define(["./shared.js"],function(t){"use strict";var e=t.createCommonjsModule(function(t){function e(t){return!!("undefined"!=typeof window&&"undefined"!=typeof document&&Array.prototype&&Array.prototype.every&&Array.prototype.filter&&Array.prototype.forEach&&Array.prototype.indexOf&&Array.prototype.lastIndexOf&&Array.prototype.map&&Array.prototype.some&&Array.prototype.reduce&&Array.prototype.reduceRight&&Array.isArray&&Function.prototype&&Function.prototype.bind&&Object.keys&&Object.create&&Object.getPrototypeOf&&Object.getOwnPropertyNames&&Object.isSealed&&Object.isFrozen&&Object.isExtensible&&Object.getOwnPropertyDescriptor&&Object.defineProperty&&Object.defineProperties&&Object.seal&&Object.freeze&&Object.preventExtensions&&"JSON"in window&&"parse"in JSON&&"stringify"in JSON&&function(){if(!("Worker"in window&&"Blob"in window&&"URL"in window))return!1;var t,e,i=new Blob([""],{type:"text/javascript"}),n=URL.createObjectURL(i);try{e=new Worker(n),t=!0}catch(e){t=!1}e&&e.terminate();return URL.revokeObjectURL(n),t}()&&"Uint8ClampedArray"in window&&ArrayBuffer.isView&&function(t){void 0===i[t]&&(i[t]=function(t){var i=document.createElement("canvas"),n=Object.create(e.webGLContextAttributes);return n.failIfMajorPerformanceCaveat=t,i.probablySupportsContext?i.probablySupportsContext("webgl",n)||i.probablySupportsContext("experimental-webgl",n):i.supportsContext?i.supportsContext("webgl",n)||i.supportsContext("experimental-webgl",n):i.getContext("webgl",n)||i.getContext("experimental-webgl",n)}(t));return i[t]}(t&&t.failIfMajorPerformanceCaveat))}t.exports?t.exports=e:window&&(window.mapboxgl=window.mapboxgl||{},window.mapboxgl.supported=e);var i={};e.webGLContextAttributes={antialias:!1,alpha:!0,stencil:!0,depth:!0}}),i={create:function(e,i,n){var o=t.window.document.createElement(e);return i&&(o.className=i),n&&n.appendChild(o),o},createNS:function(e,i){return t.window.document.createElementNS(e,i)}},n=t.window.document?t.window.document.documentElement.style:null;function o(t){if(!n)return null;for(var e=0;e<t.length;e++)if(t[e]in n)return t[e];return t[0]}var r,a=o(["userSelect","MozUserSelect","WebkitUserSelect","msUserSelect"]);i.disableDrag=function(){n&&a&&(r=n[a],n[a]="none")},i.enableDrag=function(){n&&a&&(n[a]=r)};var s=o(["transform","WebkitTransform"]);i.setTransform=function(t,e){t.style[s]=e};var l=!1;try{var c=Object.defineProperty({},"passive",{get:function(){l=!0}});t.window.addEventListener("test",c,c),t.window.removeEventListener("test",c,c)}catch(t){l=!1}i.addEventListener=function(t,e,i,n){void 0===n&&(n={}),"passive"in n&&l?t.addEventListener(e,i,n):t.addEventListener(e,i,n.capture)},i.removeEventListener=function(t,e,i,n){void 0===n&&(n={}),"passive"in n&&l?t.removeEventListener(e,i,n):t.removeEventListener(e,i,n.capture)};var h=function(e){e.preventDefault(),e.stopPropagation(),t.window.removeEventListener("click",h,!0)};i.suppressClick=function(){t.window.addEventListener("click",h,!0),t.window.setTimeout(function(){t.window.removeEventListener("click",h,!0)},0)},i.mousePos=function(e,i){var n=e.getBoundingClientRect();return i=i.touches?i.touches[0]:i,new t.Point(i.clientX-n.left-e.clientLeft,i.clientY-n.top-e.clientTop)},i.touchPos=function(e,i){for(var n=e.getBoundingClientRect(),o=[],r="touchend"===i.type?i.changedTouches:i.touches,a=0;a<r.length;a++)o.push(new t.Point(r[a].clientX-n.left-e.clientLeft,r[a].clientY-n.top-e.clientTop));return o},i.mouseButton=function(e){return void 0!==t.window.InstallTrigger&&2===e.button&&e.ctrlKey&&t.window.navigator.platform.toUpperCase().indexOf("MAC")>=0?0:e.button},i.remove=function(t){t.parentNode&&t.parentNode.removeChild(t)};var u={API_URL:"https://api.mapbox.com",get EVENTS_URL(){return 0===this.API_URL.indexOf("https://api.mapbox.cn")?"https://events.mapbox.cn/events/v2":"https://events.mapbox.com/events/v2"},REQUIRE_ACCESS_TOKEN:!0,ACCESS_TOKEN:null},p="See https://www.mapbox.com/api-documentation/#access-tokens";function d(t,e){var i=b(u.API_URL);if(t.protocol=i.protocol,t.authority=i.authority,"/"!==i.path&&(t.path=""+i.path+t.path),!u.REQUIRE_ACCESS_TOKEN)return w(t);if(!(e=e||u.ACCESS_TOKEN))throw new Error("An API access token is required to use Mapbox GL. "+p);if("s"===e[0])throw new Error("Use a public access token (pk.*) with Mapbox GL, not a secret access token (sk.*). "+p);return t.params.push("access_token="+e),w(t)}function _(t){return 0===t.indexOf("mapbox:")}var f=function(t,e){if(!_(t))return t;var i=b(t);return i.path="/fonts/v1"+i.path,d(i,e)},m=function(t,e){if(!_(t))return t;var i=b(t);return i.path="/v4/"+i.authority+".json",i.params.push("secure"),d(i,e)},g=function(t,e,i,n){var o=b(t);return _(t)?(o.path="/styles/v1"+o.path+"/sprite"+e+i,d(o,n)):(o.path+=""+e+i,w(o))},v=/(\.(png|jpg)\d*)(?=$)/,y=function(e,i,n){if(!i||!_(i))return e;var o=b(e),r=t.browser.devicePixelRatio>=2||512===n?"@2x":"",a=t.browser.supportsWebp?".webp":"$1";return o.path=o.path.replace(v,""+r+a),function(t){for(var e=0;e<t.length;e++)0===t[e].indexOf("access_token=tk.")&&(t[e]="access_token="+(u.ACCESS_TOKEN||""))}(o.params),w(o)};var x=/^(\w+):\/\/([^/?]*)(\/[^?]+)?\??(.+)?/;function b(t){var e=t.match(x);if(!e)throw new Error("Unable to parse URL object");return{protocol:e[1],authority:e[2],path:e[3]||"/",params:e[4]?e[4].split("&"):[]}}function w(t){var e=t.params.length?"?"+t.params.join("&"):"";return t.protocol+"://"+t.authority+t.path+e}var E=function(){this.eventData={anonId:null,lastSuccess:null,accessToken:u.ACCESS_TOKEN},this.queue=[],this.pending=!1,this.pendingRequest=null};E.prototype.postTurnstileEvent=function(e){u.ACCESS_TOKEN&&Array.isArray(e)&&e.some(function(t){return/(mapbox\.c)(n|om)/i.test(t)})&&this.queueRequest(t.browser.now())},E.prototype.queueRequest=function(t){this.queue.push(t),this.processRequests()},E.prototype.processRequests=function(){var e=this;if(!this.pendingRequest&&0!==this.queue.length){var i="mapbox.turnstileEventData:"+(u.ACCESS_TOKEN||""),n=t.storageAvailable("localStorage"),o=!!this.eventData.accessToken&&this.eventData.accessToken!==u.ACCESS_TOKEN;if(o&&(this.eventData.anonId=this.eventData.lastSuccess=null),(!this.eventData.anonId||!this.eventData.lastSuccess)&&n)try{var r=t.window.localStorage.getItem(i);r&&(this.eventData=JSON.parse(r))}catch(e){t.warnOnce("Unable to read from LocalStorage")}t.validateUuid(this.eventData.anonId)||(this.eventData.anonId=t.uuid(),o=!0);var a=this.queue.shift();if(this.eventData.lastSuccess){var s=new Date(this.eventData.lastSuccess),l=new Date(a),c=(a-this.eventData.lastSuccess)/864e5;o=o||c>=1||c<-1||s.getDate()!==l.getDate()}if(!o)return this.processRequests();var h=b(u.EVENTS_URL);h.params.push("access_token="+(u.ACCESS_TOKEN||""));var p={url:w(h),headers:{"Content-Type":"text/plain"}},d=JSON.stringify([{event:"appUserTurnstile",created:new Date(a).toISOString(),sdkIdentifier:"mapbox-gl-js",sdkVersion:"0.50.0","enabled.telemetry":!1,userId:this.eventData.anonId}]);this.pendingRequest=t.postData(p,d,function(o){if(e.pendingRequest=null,!o){if(e.eventData.lastSuccess=a,e.eventData.accessToken=u.ACCESS_TOKEN,n)try{t.window.localStorage.setItem(i,JSON.stringify(e.eventData))}catch(e){t.warnOnce("Unable to write to LocalStorage")}e.processRequests()}})}};var T=new E,S=T.postTurnstileEvent.bind(T);var I=function(){this.images={},this.loaded=!1,this.requestors=[],this.patterns={},this.atlasImage=new t.RGBAImage({width:1,height:1}),this.dirty=!0};I.prototype.isLoaded=function(){return this.loaded},I.prototype.setLoaded=function(t){if(this.loaded!==t&&(this.loaded=t,t)){for(var e=0,i=this.requestors;e<i.length;e+=1){var n=i[e],o=n.ids,r=n.callback;this._notify(o,r)}this.requestors=[]}},I.prototype.getImage=function(t){return this.images[t]},I.prototype.addImage=function(t,e){this.images[t]=e},I.prototype.removeImage=function(t){delete this.images[t],delete this.patterns[t]},I.prototype.listImages=function(){return Object.keys(this.images)},I.prototype.getImages=function(t,e){var i=!0;if(!this.isLoaded())for(var n=0,o=t;n<o.length;n+=1){var r=o[n];this.images[r]||(i=!1)}this.isLoaded()||i?this._notify(t,e):this.requestors.push({ids:t,callback:e})},I.prototype._notify=function(t,e){for(var i={},n=0,o=t;n<o.length;n+=1){var r=o[n],a=this.images[r];a&&(i[r]={data:a.data.clone(),pixelRatio:a.pixelRatio,sdf:a.sdf})}e(null,i)},I.prototype.getPixelSize=function(){var t=this.atlasImage;return{width:t.width,height:t.height}},I.prototype.getPattern=function(e){var i=this.patterns[e];if(i)return i.position;var n=this.getImage(e);if(!n)return null;var o={w:n.data.width+2,h:n.data.height+2,x:0,y:0},r=new t.ImagePosition(o,n);return this.patterns[e]={bin:o,position:r},this._updatePatternAtlas(),r},I.prototype.bind=function(e){var i=e.gl;this.atlasTexture?this.dirty&&(this.atlasTexture.update(this.atlasImage),this.dirty=!1):this.atlasTexture=new t.Texture(e,this.atlasImage,i.RGBA),this.atlasTexture.bind(i.LINEAR,i.CLAMP_TO_EDGE)},I.prototype._updatePatternAtlas=function(){var e=[];for(var i in this.patterns)e.push(this.patterns[i].bin);var n=t.potpack(e),o=n.w,r=n.h,a=this.atlasImage;for(var s in a.resize({width:o||1,height:r||1}),this.patterns){var l=this.patterns[s].bin,c=l.x+1,h=l.y+1,u=this.images[s].data,p=u.width,d=u.height;t.RGBAImage.copy(u,a,{x:0,y:0},{x:c,y:h},{width:p,height:d}),t.RGBAImage.copy(u,a,{x:0,y:d-1},{x:c,y:h-1},{width:p,height:1}),t.RGBAImage.copy(u,a,{x:0,y:0},{x:c,y:h+d},{width:p,height:1}),t.RGBAImage.copy(u,a,{x:p-1,y:0},{x:c-1,y:h},{width:1,height:d}),t.RGBAImage.copy(u,a,{x:0,y:0},{x:c+p,y:h},{width:1,height:d})}this.dirty=!0};var C=P,z=1e20;function P(t,e,i,n,o,r){this.fontSize=t||24,this.buffer=void 0===e?3:e,this.cutoff=n||.25,this.fontFamily=o||"sans-serif",this.fontWeight=r||"normal",this.radius=i||8;var a=this.size=this.fontSize+2*this.buffer;this.canvas=document.createElement("canvas"),this.canvas.width=this.canvas.height=a,this.ctx=this.canvas.getContext("2d"),this.ctx.font=this.fontWeight+" "+this.fontSize+"px "+this.fontFamily,this.ctx.textBaseline="middle",this.ctx.fillStyle="black",this.gridOuter=new Float64Array(a*a),this.gridInner=new Float64Array(a*a),this.f=new Float64Array(a),this.d=new Float64Array(a),this.z=new Float64Array(a+1),this.v=new Int16Array(a),this.middle=Math.round(a/2*(navigator.userAgent.indexOf("Gecko/")>=0?1.2:1))}function R(t,e,i,n,o,r,a){for(var s=0;s<e;s++){for(var l=0;l<i;l++)n[l]=t[l*e+s];for(A(n,o,r,a,i),l=0;l<i;l++)t[l*e+s]=o[l]}for(l=0;l<i;l++){for(s=0;s<e;s++)n[s]=t[l*e+s];for(A(n,o,r,a,e),s=0;s<e;s++)t[l*e+s]=Math.sqrt(o[s])}}function A(t,e,i,n,o){i[0]=0,n[0]=-z,n[1]=+z;for(var r=1,a=0;r<o;r++){for(var s=(t[r]+r*r-(t[i[a]]+i[a]*i[a]))/(2*r-2*i[a]);s<=n[a];)a--,s=(t[r]+r*r-(t[i[a]]+i[a]*i[a]))/(2*r-2*i[a]);i[++a]=r,n[a]=s,n[a+1]=+z}for(r=0,a=0;r<o;r++){for(;n[a+1]<r;)a++;e[r]=(r-i[a])*(r-i[a])+t[i[a]]}}P.prototype.draw=function(t){this.ctx.clearRect(0,0,this.size,this.size),this.ctx.fillText(t,this.buffer,this.middle);for(var e=this.ctx.getImageData(0,0,this.size,this.size),i=new Uint8ClampedArray(this.size*this.size),n=0;n<this.size*this.size;n++){var o=e.data[4*n+3]/255;this.gridOuter[n]=1===o?0:0===o?z:Math.pow(Math.max(0,.5-o),2),this.gridInner[n]=1===o?z:0===o?0:Math.pow(Math.max(0,o-.5),2)}for(R(this.gridOuter,this.size,this.size,this.f,this.d,this.v,this.z),R(this.gridInner,this.size,this.size,this.f,this.d,this.v,this.z),n=0;n<this.size*this.size;n++){var r=this.gridOuter[n]-this.gridInner[n];i[n]=Math.max(0,Math.min(255,Math.round(255-255*(r/this.radius+this.cutoff))))}return i};var L=function(t,e){this.requestTransform=t,this.localIdeographFontFamily=e,this.entries={}};L.prototype.setURL=function(t){this.url=t},L.prototype.getGlyphs=function(e,i){var n=this,o=[];for(var r in e)for(var a=0,s=e[r];a<s.length;a+=1){var l=s[a];o.push({stack:r,id:l})}t.asyncAll(o,function(t,e){var i=t.stack,o=t.id,r=n.entries[i];r||(r=n.entries[i]={glyphs:{},requests:{}});var a=r.glyphs[o];if(void 0===a)if(a=n._tinySDF(r,i,o))e(null,{stack:i,id:o,glyph:a});else{var s=Math.floor(o/256);if(256*s>65535)e(new Error("glyphs > 65535 not supported"));else{var l=r.requests[s];l||(l=r.requests[s]=[],L.loadGlyphRange(i,s,n.url,n.requestTransform,function(t,e){if(e)for(var i in e)r.glyphs[+i]=e[+i];for(var n=0,o=l;n<o.length;n+=1){(0,o[n])(t,e)}delete r.requests[s]})),l.push(function(t,n){t?e(t):n&&e(null,{stack:i,id:o,glyph:n[o]||null})})}}else e(null,{stack:i,id:o,glyph:a})},function(t,e){if(t)i(t);else if(e){for(var n={},o=0,r=e;o<r.length;o+=1){var a=r[o],s=a.stack,l=a.id,c=a.glyph;(n[s]||(n[s]={}))[l]=c&&{id:c.id,bitmap:c.bitmap.clone(),metrics:c.metrics}}i(null,n)}})},L.prototype._tinySDF=function(e,i,n){var o=this.localIdeographFontFamily;if(o&&(t.isChar["CJK Unified Ideographs"](n)||t.isChar["Hangul Syllables"](n))){var r=e.tinySDF;if(!r){var a="400";/bold/i.test(i)?a="900":/medium/i.test(i)?a="500":/light/i.test(i)&&(a="200"),r=e.tinySDF=new L.TinySDF(24,3,8,.25,o,a)}return{id:n,bitmap:new t.AlphaImage({width:30,height:30},r.draw(String.fromCharCode(n))),metrics:{width:24,height:24,left:0,top:-8,advance:24}}}},L.loadGlyphRange=function(e,i,n,o,r){var a=256*i,s=a+255,l=o(f(n).replace("{fontstack}",e).replace("{range}",a+"-"+s),t.ResourceType.Glyphs);t.getArrayBuffer(l,function(e,i){if(e)r(e);else if(i){for(var n={},o=0,a=t.parseGlyphPBF(i.data);o<a.length;o+=1){var s=a[o];n[s.id]=s}r(null,n)}})},L.TinySDF=C;var D=function(){this.specification=t.styleSpec.light.position};D.prototype.possiblyEvaluate=function(e,i){return t.sphericalToCartesian(e.expression.evaluate(i))},D.prototype.interpolate=function(e,i,n){return{x:t.number(e.x,i.x,n),y:t.number(e.y,i.y,n),z:t.number(e.z,i.z,n)}};var M=new t.Properties({anchor:new t.DataConstantProperty(t.styleSpec.light.anchor),position:new D,color:new t.DataConstantProperty(t.styleSpec.light.color),intensity:new t.DataConstantProperty(t.styleSpec.light.intensity)}),k=function(e){function i(i){e.call(this),this._transitionable=new t.Transitionable(M),this.setLight(i),this._transitioning=this._transitionable.untransitioned()}return e&&(i.__proto__=e),i.prototype=Object.create(e&&e.prototype),i.prototype.constructor=i,i.prototype.getLight=function(){return this._transitionable.serialize()},i.prototype.setLight=function(e){if(!this._validate(t.validateLight,e))for(var i in e){var n=e[i];t.endsWith(i,"-transition")?this._transitionable.setTransition(i.slice(0,-"-transition".length),n):this._transitionable.setValue(i,n)}},i.prototype.updateTransitions=function(t){this._transitioning=this._transitionable.transitioned(t,this._transitioning)},i.prototype.hasTransition=function(){return this._transitioning.hasTransition()},i.prototype.recalculate=function(t){this.properties=this._transitioning.possiblyEvaluate(t)},i.prototype._validate=function(e,i){return t.emitValidationErrors(this,e.call(t.validateStyle,t.extend({value:i,style:{glyphs:!0,sprite:!0},styleSpec:t.styleSpec})))},i}(t.Evented),B=function(t,e){this.width=t,this.height=e,this.nextRow=0,this.bytes=4,this.data=new Uint8Array(this.width*this.height*this.bytes),this.positions={}};B.prototype.getDash=function(t,e){var i=t.join(",")+String(e);return this.positions[i]||(this.positions[i]=this.addDash(t,e)),this.positions[i]},B.prototype.addDash=function(e,i){var n=i?7:0,o=2*n+1;if(this.nextRow+o>this.height)return t.warnOnce("LineAtlas out of space"),null;for(var r=0,a=0;a<e.length;a++)r+=e[a];for(var s=this.width/r,l=s/2,c=e.length%2==1,h=-n;h<=n;h++)for(var u=this.nextRow+n+h,p=this.width*u,d=c?-e[e.length-1]:0,_=e[0],f=1,m=0;m<this.width;m++){for(;_<m/s;)d=_,_+=e[f],c&&f===e.length-1&&(_+=e[0]),f++;var g=Math.abs(m-d*s),v=Math.abs(m-_*s),y=Math.min(g,v),x=f%2==1,b=void 0;if(i){var w=n?h/n*(l+1):0;if(x){var E=l-Math.abs(w);b=Math.sqrt(y*y+E*E)}else b=l-Math.sqrt(y*y+w*w)}else b=(x?1:-1)*y;this.data[3+4*(p+m)]=Math.max(0,Math.min(255,b+128))}var T={y:(this.nextRow+n+.5)/this.height,height:2*n/this.height,width:r};return this.nextRow+=o,this.dirty=!0,T},B.prototype.bind=function(t){var e=t.gl;this.texture?(e.bindTexture(e.TEXTURE_2D,this.texture),this.dirty&&(this.dirty=!1,e.texSubImage2D(e.TEXTURE_2D,0,0,0,this.width,this.height,e.RGBA,e.UNSIGNED_BYTE,this.data))):(this.texture=e.createTexture(),e.bindTexture(e.TEXTURE_2D,this.texture),e.texParameteri(e.TEXTURE_2D,e.TEXTURE_WRAP_S,e.REPEAT),e.texParameteri(e.TEXTURE_2D,e.TEXTURE_WRAP_T,e.REPEAT),e.texParameteri(e.TEXTURE_2D,e.TEXTURE_MIN_FILTER,e.LINEAR),e.texParameteri(e.TEXTURE_2D,e.TEXTURE_MAG_FILTER,e.LINEAR),e.texImage2D(e.TEXTURE_2D,0,e.RGBA,this.width,this.height,0,e.RGBA,e.UNSIGNED_BYTE,this.data))};var O=function e(i,n){this.workerPool=i,this.actors=[],this.currentActor=0,this.id=t.uniqueId();for(var o=this.workerPool.acquire(this.id),r=0;r<o.length;r++){var a=o[r],s=new e.Actor(a,n,this.id);s.name="Worker "+r,this.actors.push(s)}};function F(e,i,n){var o=function(e,i){if(e)return n(e);if(i){var o=t.pick(i,["tiles","minzoom","maxzoom","attribution","mapbox_logo","bounds"]);i.vector_layers&&(o.vectorLayers=i.vector_layers,o.vectorLayerIds=o.vectorLayers.map(function(t){return t.id})),n(null,o)}};return e.url?t.getJSON(i(m(e.url),t.ResourceType.Source),o):t.browser.frame(function(){return o(null,e)})}O.prototype.broadcast=function(e,i,n){n=n||function(){},t.asyncAll(this.actors,function(t,n){t.send(e,i,n)},n)},O.prototype.send=function(t,e,i,n){return("number"!=typeof n||isNaN(n))&&(n=this.currentActor=(this.currentActor+1)%this.actors.length),this.actors[n].send(t,e,i),n},O.prototype.remove=function(){this.actors.forEach(function(t){t.remove()}),this.actors=[],this.workerPool.release(this.id)},O.Actor=t.Actor;var U=function(t,e){if(isNaN(t)||isNaN(e))throw new Error("Invalid LngLat object: ("+t+", "+e+")");if(this.lng=+t,this.lat=+e,this.lat>90||this.lat<-90)throw new Error("Invalid LngLat latitude value: must be between -90 and 90")};U.prototype.wrap=function(){return new U(t.wrap(this.lng,-180,180),this.lat)},U.prototype.toArray=function(){return[this.lng,this.lat]},U.prototype.toString=function(){return"LngLat("+this.lng+", "+this.lat+")"},U.prototype.toBounds=function(t){var e=360*t/40075017,i=e/Math.cos(Math.PI/180*this.lat);return new N(new U(this.lng-i,this.lat-e),new U(this.lng+i,this.lat+e))},U.convert=function(t){if(t instanceof U)return t;if(Array.isArray(t)&&(2===t.length||3===t.length))return new U(Number(t[0]),Number(t[1]));if(!Array.isArray(t)&&"object"==typeof t&&null!==t)return new U(Number(t.lng),Number(t.lat));throw new Error("`LngLatLike` argument must be specified as a LngLat instance, an object {lng: <lng>, lat: <lat>}, or an array of [<lng>, <lat>]")};var N=function(t,e){t&&(e?this.setSouthWest(t).setNorthEast(e):4===t.length?this.setSouthWest([t[0],t[1]]).setNorthEast([t[2],t[3]]):this.setSouthWest(t[0]).setNorthEast(t[1]))};N.prototype.setNorthEast=function(t){return this._ne=t instanceof U?new U(t.lng,t.lat):U.convert(t),this},N.prototype.setSouthWest=function(t){return this._sw=t instanceof U?new U(t.lng,t.lat):U.convert(t),this},N.prototype.extend=function(t){var e,i,n=this._sw,o=this._ne;if(t instanceof U)e=t,i=t;else{if(!(t instanceof N))return Array.isArray(t)?t.every(Array.isArray)?this.extend(N.convert(t)):this.extend(U.convert(t)):this;if(e=t._sw,i=t._ne,!e||!i)return this}return n||o?(n.lng=Math.min(e.lng,n.lng),n.lat=Math.min(e.lat,n.lat),o.lng=Math.max(i.lng,o.lng),o.lat=Math.max(i.lat,o.lat)):(this._sw=new U(e.lng,e.lat),this._ne=new U(i.lng,i.lat)),this},N.prototype.getCenter=function(){return new U((this._sw.lng+this._ne.lng)/2,(this._sw.lat+this._ne.lat)/2)},N.prototype.getSouthWest=function(){return this._sw},N.prototype.getNorthEast=function(){return this._ne},N.prototype.getNorthWest=function(){return new U(this.getWest(),this.getNorth())},N.prototype.getSouthEast=function(){return new U(this.getEast(),this.getSouth())},N.prototype.getWest=function(){return this._sw.lng},N.prototype.getSouth=function(){return this._sw.lat},N.prototype.getEast=function(){return this._ne.lng},N.prototype.getNorth=function(){return this._ne.lat},N.prototype.toArray=function(){return[this._sw.toArray(),this._ne.toArray()]},N.prototype.toString=function(){return"LngLatBounds("+this._sw.toString()+", "+this._ne.toString()+")"},N.prototype.isEmpty=function(){return!(this._sw&&this._ne)},N.convert=function(t){return!t||t instanceof N?t:new N(t)};var Z=function(t,e,i){this.bounds=N.convert(this.validateBounds(t)),this.minzoom=e||0,this.maxzoom=i||24};Z.prototype.validateBounds=function(t){return Array.isArray(t)&&4===t.length?[Math.max(-180,t[0]),Math.max(-90,t[1]),Math.min(180,t[2]),Math.min(90,t[3])]:[-180,-90,180,90]},Z.prototype.contains=function(t){var e=Math.floor(this.lngX(this.bounds.getWest(),t.z)),i=Math.floor(this.latY(this.bounds.getNorth(),t.z)),n=Math.ceil(this.lngX(this.bounds.getEast(),t.z)),o=Math.ceil(this.latY(this.bounds.getSouth(),t.z));return t.x>=e&&t.x<n&&t.y>=i&&t.y<o},Z.prototype.lngX=function(t,e){return(t+180)*(Math.pow(2,e)/360)},Z.prototype.latY=function(e,i){var n=t.clamp(Math.sin(Math.PI/180*e),-.9999,.9999),o=Math.pow(2,i)/(2*Math.PI);return Math.pow(2,i-1)+.5*Math.log((1+n)/(1-n))*-o};var q=function(e){function i(i,n,o,r){if(e.call(this),this.id=i,this.dispatcher=o,this.type="vector",this.minzoom=0,this.maxzoom=22,this.scheme="xyz",this.tileSize=512,this.reparseOverscaled=!0,this.isTileClipped=!0,t.extend(this,t.pick(n,["url","scheme","tileSize"])),this._options=t.extend({type:"vector"},n),this._collectResourceTiming=n.collectResourceTiming,512!==this.tileSize)throw new Error("vector tile sources must have a tileSize of 512");this.setEventedParent(r)}return e&&(i.__proto__=e),i.prototype=Object.create(e&&e.prototype),i.prototype.constructor=i,i.prototype.load=function(){var e=this;this.fire(new t.Event("dataloading",{dataType:"source"})),this._tileJSONRequest=F(this._options,this.map._transformRequest,function(i,n){e._tileJSONRequest=null,i?e.fire(new t.ErrorEvent(i)):n&&(t.extend(e,n),n.bounds&&(e.tileBounds=new Z(n.bounds,e.minzoom,e.maxzoom)),S(n.tiles),e.fire(new t.Event("data",{dataType:"source",sourceDataType:"metadata"})),e.fire(new t.Event("data",{dataType:"source",sourceDataType:"content"})))})},i.prototype.hasTile=function(t){return!this.tileBounds||this.tileBounds.contains(t.canonical)},i.prototype.onAdd=function(t){this.map=t,this.load()},i.prototype.onRemove=function(){this._tileJSONRequest&&(this._tileJSONRequest.cancel(),this._tileJSONRequest=null)},i.prototype.serialize=function(){return t.extend({},this._options)},i.prototype.loadTile=function(e,i){var n=y(e.tileID.canonical.url(this.tiles,this.scheme),this.url),o={request:this.map._transformRequest(n,t.ResourceType.Tile),uid:e.uid,tileID:e.tileID,zoom:e.tileID.overscaledZ,tileSize:this.tileSize*e.tileID.overscaleFactor(),type:this.type,source:this.id,pixelRatio:t.browser.devicePixelRatio,showCollisionBoxes:this.map.showCollisionBoxes};function r(t,n){return e.aborted?i(null):t&&404!==t.status?i(t):(n&&n.resourceTiming&&(e.resourceTiming=n.resourceTiming),this.map._refreshExpiredTiles&&n&&e.setExpiryData(n),e.loadVectorData(n,this.map.painter),i(null),void(e.reloadCallback&&(this.loadTile(e,e.reloadCallback),e.reloadCallback=null)))}o.request.collectResourceTiming=this._collectResourceTiming,void 0===e.workerID||"expired"===e.state?e.workerID=this.dispatcher.send("loadTile",o,r.bind(this)):"loading"===e.state?e.reloadCallback=i:this.dispatcher.send("reloadTile",o,r.bind(this),e.workerID)},i.prototype.abortTile=function(t){this.dispatcher.send("abortTile",{uid:t.uid,type:this.type,source:this.id},void 0,t.workerID)},i.prototype.unloadTile=function(t){t.unloadVectorData(),this.dispatcher.send("removeTile",{uid:t.uid,type:this.type,source:this.id},void 0,t.workerID)},i.prototype.hasTransition=function(){return!1},i}(t.Evented),V=function(e){function i(i,n,o,r){e.call(this),this.id=i,this.dispatcher=o,this.setEventedParent(r),this.type="raster",this.minzoom=0,this.maxzoom=22,this.roundZoom=!0,this.scheme="xyz",this.tileSize=512,this._loaded=!1,this._options=t.extend({},n),t.extend(this,t.pick(n,["url","scheme","tileSize"]))}return e&&(i.__proto__=e),i.prototype=Object.create(e&&e.prototype),i.prototype.constructor=i,i.prototype.load=function(){var e=this;this.fire(new t.Event("dataloading",{dataType:"source"})),this._tileJSONRequest=F(this._options,this.map._transformRequest,function(i,n){e._tileJSONRequest=null,i?e.fire(new t.ErrorEvent(i)):n&&(t.extend(e,n),n.bounds&&(e.tileBounds=new Z(n.bounds,e.minzoom,e.maxzoom)),S(n.tiles),e.fire(new t.Event("data",{dataType:"source",sourceDataType:"metadata"})),e.fire(new t.Event("data",{dataType:"source",sourceDataType:"content"})))})},i.prototype.onAdd=function(t){this.map=t,this.load()},i.prototype.onRemove=function(){this._tileJSONRequest&&(this._tileJSONRequest.cancel(),this._tileJSONRequest=null)},i.prototype.serialize=function(){return t.extend({},this._options)},i.prototype.hasTile=function(t){return!this.tileBounds||this.tileBounds.contains(t.canonical)},i.prototype.loadTile=function(e,i){var n=this,o=y(e.tileID.canonical.url(this.tiles,this.scheme),this.url,this.tileSize);e.request=t.getImage(this.map._transformRequest(o,t.ResourceType.Tile),function(o,r){if(delete e.request,e.aborted)e.state="unloaded",i(null);else if(o)e.state="errored",i(o);else if(r){n.map._refreshExpiredTiles&&e.setExpiryData(r),delete r.cacheControl,delete r.expires;var a=n.map.painter.context,s=a.gl;e.texture=n.map.painter.getTileTexture(r.width),e.texture?e.texture.update(r,{useMipmap:!0}):(e.texture=new t.Texture(a,r,s.RGBA,{useMipmap:!0}),e.texture.bind(s.LINEAR,s.CLAMP_TO_EDGE,s.LINEAR_MIPMAP_NEAREST),a.extTextureFilterAnisotropic&&s.texParameterf(s.TEXTURE_2D,a.extTextureFilterAnisotropic.TEXTURE_MAX_ANISOTROPY_EXT,a.extTextureFilterAnisotropicMax)),e.state="loaded",i(null)}})},i.prototype.abortTile=function(t,e){t.request&&(t.request.cancel(),delete t.request),e()},i.prototype.unloadTile=function(t,e){t.texture&&this.map.painter.saveTileTexture(t.texture),e()},i.prototype.hasTransition=function(){return!1},i}(t.Evented),j=function(e){function i(i,n,o,r){e.call(this,i,n,o,r),this.type="raster-dem",this.maxzoom=22,this._options=t.extend({},n),this.encoding=n.encoding||"mapbox"}return e&&(i.__proto__=e),i.prototype=Object.create(e&&e.prototype),i.prototype.constructor=i,i.prototype.serialize=function(){return{type:"raster-dem",url:this.url,tileSize:this.tileSize,tiles:this.tiles,bounds:this.bounds,encoding:this.encoding}},i.prototype.loadTile=function(e,i){var n=y(e.tileID.canonical.url(this.tiles,this.scheme),this.url,this.tileSize);e.request=t.getImage(this.map._transformRequest(n,t.ResourceType.Tile),function(n,o){if(delete e.request,e.aborted)e.state="unloaded",i(null);else if(n)e.state="errored",i(n);else if(o){this.map._refreshExpiredTiles&&e.setExpiryData(o),delete o.cacheControl,delete o.expires;var r=t.browser.getImageData(o),a={uid:e.uid,coord:e.tileID,source:this.id,rawImageData:r,encoding:this.encoding};e.workerID&&"expired"!==e.state||(e.workerID=this.dispatcher.send("loadDEMTile",a,function(t,n){t&&(e.state="errored",i(t));n&&(e.dem=n,e.needsHillshadePrepare=!0,e.state="loaded",i(null))}.bind(this)))}}.bind(this)),e.neighboringTiles=this._getNeighboringTiles(e.tileID)},i.prototype._getNeighboringTiles=function(e){var i=e.canonical,n=Math.pow(2,i.z),o=(i.x-1+n)%n,r=0===i.x?e.wrap-1:e.wrap,a=(i.x+1+n)%n,s=i.x+1===n?e.wrap+1:e.wrap,l={};return l[new t.OverscaledTileID(e.overscaledZ,r,i.z,o,i.y).key]={backfilled:!1},l[new t.OverscaledTileID(e.overscaledZ,s,i.z,a,i.y).key]={backfilled:!1},i.y>0&&(l[new t.OverscaledTileID(e.overscaledZ,r,i.z,o,i.y-1).key]={backfilled:!1},l[new t.OverscaledTileID(e.overscaledZ,e.wrap,i.z,i.x,i.y-1).key]={backfilled:!1},l[new t.OverscaledTileID(e.overscaledZ,s,i.z,a,i.y-1).key]={backfilled:!1}),i.y+1<n&&(l[new t.OverscaledTileID(e.overscaledZ,r,i.z,o,i.y+1).key]={backfilled:!1},l[new t.OverscaledTileID(e.overscaledZ,e.wrap,i.z,i.x,i.y+1).key]={backfilled:!1},l[new t.OverscaledTileID(e.overscaledZ,s,i.z,a,i.y+1).key]={backfilled:!1}),l},i.prototype.unloadTile=function(t){t.demTexture&&this.map.painter.saveTileTexture(t.demTexture),t.fbo&&(t.fbo.destroy(),delete t.fbo),t.dem&&delete t.dem,delete t.neighboringTiles,t.state="unloaded",this.dispatcher.send("removeDEMTile",{uid:t.uid,source:this.id},void 0,t.workerID)},i}(V),G=function(e){function i(i,n,o,r){e.call(this),this.id=i,this.type="geojson",this.minzoom=0,this.maxzoom=18,this.tileSize=512,this.isTileClipped=!0,this.reparseOverscaled=!0,this._removed=!1,this.dispatcher=o,this.setEventedParent(r),this._data=n.data,this._options=t.extend({},n),this._collectResourceTiming=n.collectResourceTiming,this._resourceTiming=[],void 0!==n.maxzoom&&(this.maxzoom=n.maxzoom),n.type&&(this.type=n.type),n.attribution&&(this.attribution=n.attribution);var a=t.EXTENT/this.tileSize;this.workerOptions=t.extend({source:this.id,cluster:n.cluster||!1,geojsonVtOptions:{buffer:(void 0!==n.buffer?n.buffer:128)*a,tolerance:(void 0!==n.tolerance?n.tolerance:.375)*a,extent:t.EXTENT,maxZoom:this.maxzoom,lineMetrics:n.lineMetrics||!1,generateId:n.generateId||!1},superclusterOptions:{maxZoom:void 0!==n.clusterMaxZoom?Math.min(n.clusterMaxZoom,this.maxzoom-1):this.maxzoom-1,extent:t.EXTENT,radius:(n.clusterRadius||50)*a,log:!1}},n.workerOptions)}return e&&(i.__proto__=e),i.prototype=Object.create(e&&e.prototype),i.prototype.constructor=i,i.prototype.load=function(){var e=this;this.fire(new t.Event("dataloading",{dataType:"source"})),this._updateWorkerData(function(i){if(i)e.fire(new t.ErrorEvent(i));else{var n={dataType:"source",sourceDataType:"metadata"};e._collectResourceTiming&&e._resourceTiming&&e._resourceTiming.length>0&&(n.resourceTiming=e._resourceTiming,e._resourceTiming=[]),e.fire(new t.Event("data",n))}})},i.prototype.onAdd=function(t){this.map=t,this.load()},i.prototype.setData=function(e){var i=this;return this._data=e,this.fire(new t.Event("dataloading",{dataType:"source"})),this._updateWorkerData(function(e){if(e)i.fire(new t.ErrorEvent(e));else{var n={dataType:"source",sourceDataType:"content"};i._collectResourceTiming&&i._resourceTiming&&i._resourceTiming.length>0&&(n.resourceTiming=i._resourceTiming,i._resourceTiming=[]),i.fire(new t.Event("data",n))}}),this},i.prototype.getClusterExpansionZoom=function(t,e){return this.dispatcher.send("geojson.getClusterExpansionZoom",{clusterId:t,source:this.id},e,this.workerID),this},i.prototype.getClusterChildren=function(t,e){return this.dispatcher.send("geojson.getClusterChildren",{clusterId:t,source:this.id},e,this.workerID),this},i.prototype.getClusterLeaves=function(t,e,i,n){return this.dispatcher.send("geojson.getClusterLeaves",{source:this.id,clusterId:t,limit:e,offset:i},n,this.workerID),this},i.prototype._updateWorkerData=function(e){var i=this,n=t.extend({},this.workerOptions),o=this._data;"string"==typeof o?(n.request=this.map._transformRequest(t.browser.resolveURL(o),t.ResourceType.Source),n.request.collectResourceTiming=this._collectResourceTiming):n.data=JSON.stringify(o),this.workerID=this.dispatcher.send(this.type+".loadData",n,function(t,o){i._removed||o&&o.abandoned||(i._loaded=!0,o&&o.resourceTiming&&o.resourceTiming[i.id]&&(i._resourceTiming=o.resourceTiming[i.id].slice(0)),i.dispatcher.send(i.type+".coalesce",{source:n.source},null,i.workerID),e(t))},this.workerID)},i.prototype.loadTile=function(e,i){var n=this,o=void 0===e.workerID?"loadTile":"reloadTile",r={type:this.type,uid:e.uid,tileID:e.tileID,zoom:e.tileID.overscaledZ,maxZoom:this.maxzoom,tileSize:this.tileSize,source:this.id,pixelRatio:t.browser.devicePixelRatio,showCollisionBoxes:this.map.showCollisionBoxes};e.workerID=this.dispatcher.send(o,r,function(t,r){return e.unloadVectorData(),e.aborted?i(null):t?i(t):(e.loadVectorData(r,n.map.painter,"reloadTile"===o),i(null))},this.workerID)},i.prototype.abortTile=function(t){t.aborted=!0},i.prototype.unloadTile=function(t){t.unloadVectorData(),this.dispatcher.send("removeTile",{uid:t.uid,type:this.type,source:this.id},null,t.workerID)},i.prototype.onRemove=function(){this._removed=!0,this.dispatcher.send("removeSource",{type:this.type,source:this.id},null,this.workerID)},i.prototype.serialize=function(){return t.extend({},this._options,{type:this.type,data:this._data})},i.prototype.hasTransition=function(){return!1},i}(t.Evented),W=function(e){function i(t,i,n,o){e.call(this),this.id=t,this.dispatcher=n,this.coordinates=i.coordinates,this.type="image",this.minzoom=0,this.maxzoom=22,this.tileSize=512,this.tiles={},this.setEventedParent(o),this.options=i}return e&&(i.__proto__=e),i.prototype=Object.create(e&&e.prototype),i.prototype.constructor=i,i.prototype.load=function(){var e=this;this.fire(new t.Event("dataloading",{dataType:"source"})),this.url=this.options.url,t.getImage(this.map._transformRequest(this.url,t.ResourceType.Image),function(i,n){i?e.fire(new t.ErrorEvent(i)):n&&(e.image=t.browser.getImageData(n),e._finishLoading())})},i.prototype._finishLoading=function(){this.map&&(this.setCoordinates(this.coordinates),this.fire(new t.Event("data",{dataType:"source",sourceDataType:"metadata"})))},i.prototype.onAdd=function(t){this.map=t,this.load()},i.prototype.setCoordinates=function(e){this.coordinates=e;var i=this.map,n=e.map(function(t){return i.transform.locationCoordinate(U.convert(t)).zoomTo(0)}),o=this.centerCoord=t.getCoordinatesCenter(n);o.column=Math.floor(o.column),o.row=Math.floor(o.row),this.tileID=new t.CanonicalTileID(o.zoom,o.column,o.row),this.minzoom=this.maxzoom=o.zoom;var r=n.map(function(e){var i=e.zoomTo(o.zoom);return new t.Point(Math.round((i.column-o.column)*t.EXTENT),Math.round((i.row-o.row)*t.EXTENT))});return this._boundsArray=new t.StructArrayLayout4i8,this._boundsArray.emplaceBack(r[0].x,r[0].y,0,0),this._boundsArray.emplaceBack(r[1].x,r[1].y,t.EXTENT,0),this._boundsArray.emplaceBack(r[3].x,r[3].y,0,t.EXTENT),this._boundsArray.emplaceBack(r[2].x,r[2].y,t.EXTENT,t.EXTENT),this.boundsBuffer&&(this.boundsBuffer.destroy(),delete this.boundsBuffer),this.fire(new t.Event("data",{dataType:"source",sourceDataType:"content"})),this},i.prototype.prepare=function(){if(0!==Object.keys(this.tiles).length&&this.image){var e=this.map.painter.context,i=e.gl;for(var n in this.boundsBuffer||(this.boundsBuffer=e.createVertexBuffer(this._boundsArray,t.rasterBoundsAttributes.members)),this.boundsSegments||(this.boundsSegments=t.SegmentVector.simpleSegment(0,0,4,2)),this.texture||(this.texture=new t.Texture(e,this.image,i.RGBA),this.texture.bind(i.LINEAR,i.CLAMP_TO_EDGE)),this.tiles){var o=this.tiles[n];"loaded"!==o.state&&(o.state="loaded",o.texture=this.texture)}}},i.prototype.loadTile=function(t,e){this.tileID&&this.tileID.equals(t.tileID.canonical)?(this.tiles[String(t.tileID.wrap)]=t,t.buckets={},e(null)):(t.state="errored",e(null))},i.prototype.serialize=function(){return{type:"image",url:this.options.url,coordinates:this.coordinates}},i.prototype.hasTransition=function(){return!1},i}(t.Evented),X=function(e){function i(t,i,n,o){e.call(this,t,i,n,o),this.roundZoom=!0,this.type="video",this.options=i}return e&&(i.__proto__=e),i.prototype=Object.create(e&&e.prototype),i.prototype.constructor=i,i.prototype.load=function(){var e=this,i=this.options;this.urls=[];for(var n=0,o=i.urls;n<o.length;n+=1){var r=o[n];e.urls.push(e.map._transformRequest(r,t.ResourceType.Source).url)}t.getVideo(this.urls,function(i,n){i?e.fire(new t.ErrorEvent(i)):n&&(e.video=n,e.video.loop=!0,e.video.addEventListener("playing",function(){e.map._rerender()}),e.map&&e.video.play(),e._finishLoading())})},i.prototype.getVideo=function(){return this.video},i.prototype.onAdd=function(t){this.map||(this.map=t,this.load(),this.video&&(this.video.play(),this.setCoordinates(this.coordinates)))},i.prototype.prepare=function(){if(!(0===Object.keys(this.tiles).length||this.video.readyState<2)){var e=this.map.painter.context,i=e.gl;for(var n in this.boundsBuffer||(this.boundsBuffer=e.createVertexBuffer(this._boundsArray,t.rasterBoundsAttributes.members)),this.boundsSegments||(this.boundsSegments=t.SegmentVector.simpleSegment(0,0,4,2)),this.texture?this.video.paused||(this.texture.bind(i.LINEAR,i.CLAMP_TO_EDGE),i.texSubImage2D(i.TEXTURE_2D,0,0,0,i.RGBA,i.UNSIGNED_BYTE,this.video)):(this.texture=new t.Texture(e,this.video,i.RGBA),this.texture.bind(i.LINEAR,i.CLAMP_TO_EDGE)),this.tiles){var o=this.tiles[n];"loaded"!==o.state&&(o.state="loaded",o.texture=this.texture)}}},i.prototype.serialize=function(){return{type:"video",urls:this.urls,coordinates:this.coordinates}},i.prototype.hasTransition=function(){return this.video&&!this.video.paused},i}(W),H=function(e){function i(i,n,o,r){e.call(this,i,n,o,r),n.coordinates?Array.isArray(n.coordinates)&&4===n.coordinates.length&&!n.coordinates.some(function(t){return!Array.isArray(t)||2!==t.length||t.some(function(t){return"number"!=typeof t})})||this.fire(new t.ErrorEvent(new t.ValidationError("sources."+i,null,'"coordinates" property must be an array of 4 longitude/latitude array pairs'))):this.fire(new t.ErrorEvent(new t.ValidationError("sources."+i,null,'missing required property "coordinates"'))),n.animate&&"boolean"!=typeof n.animate&&this.fire(new t.ErrorEvent(new t.ValidationError("sources."+i,null,'optional "animate" property must be a boolean value'))),n.canvas?"string"==typeof n.canvas||n.canvas instanceof t.window.HTMLCanvasElement||this.fire(new t.ErrorEvent(new t.ValidationError("sources."+i,null,'"canvas" must be either a string representing the ID of the canvas element from which to read, or an HTMLCanvasElement instance'))):this.fire(new t.ErrorEvent(new t.ValidationError("sources."+i,null,'missing required property "canvas"'))),this.options=n,this.animate=void 0===n.animate||n.animate}return e&&(i.__proto__=e),i.prototype=Object.create(e&&e.prototype),i.prototype.constructor=i,i.prototype.load=function(){this.canvas||(this.canvas=this.options.canvas instanceof t.window.HTMLCanvasElement?this.options.canvas:t.window.document.getElementById(this.options.canvas)),this.width=this.canvas.width,this.height=this.canvas.height,this._hasInvalidDimensions()?this.fire(new t.ErrorEvent(new Error("Canvas dimensions cannot be less than or equal to zero."))):(this.play=function(){this._playing=!0,this.map._rerender()},this.pause=function(){this._playing=!1},this._finishLoading())},i.prototype.getCanvas=function(){return this.canvas},i.prototype.onAdd=function(t){this.map=t,this.load(),this.canvas&&this.animate&&this.play()},i.prototype.onRemove=function(){this.pause()},i.prototype.prepare=function(){var e=!1;if(this.canvas.width!==this.width&&(this.width=this.canvas.width,e=!0),this.canvas.height!==this.height&&(this.height=this.canvas.height,e=!0),!this._hasInvalidDimensions()&&0!==Object.keys(this.tiles).length){var i=this.map.painter.context,n=i.gl;for(var o in this.boundsBuffer||(this.boundsBuffer=i.createVertexBuffer(this._boundsArray,t.rasterBoundsAttributes.members)),this.boundsSegments||(this.boundsSegments=t.SegmentVector.simpleSegment(0,0,4,2)),this.texture?e?this.texture.update(this.canvas):this._playing&&(this.texture.bind(n.LINEAR,n.CLAMP_TO_EDGE),n.texSubImage2D(n.TEXTURE_2D,0,0,0,n.RGBA,n.UNSIGNED_BYTE,this.canvas)):(this.texture=new t.Texture(i,this.canvas,n.RGBA),this.texture.bind(n.LINEAR,n.CLAMP_TO_EDGE)),this.tiles){var r=this.tiles[o];"loaded"!==r.state&&(r.state="loaded",r.texture=this.texture)}}},i.prototype.serialize=function(){return{type:"canvas",coordinates:this.coordinates}},i.prototype.hasTransition=function(){return this._playing},i.prototype._hasInvalidDimensions=function(){for(var t=0,e=[this.canvas.width,this.canvas.height];t<e.length;t+=1){var i=e[t];if(isNaN(i)||i<=0)return!0}return!1},i}(W),K={vector:q,raster:V,"raster-dem":j,geojson:G,video:X,image:W,canvas:H},Y=function(e,i,n,o){var r=new K[i.type](e,i,n,o);if(r.id!==e)throw new Error("Expected Source id to be "+e+" instead of "+r.id);return t.bindAll(["load","abort","unload","serialize","prepare"],r),r};function J(t,e,i,n,o){var r=o.maxPitchScaleFactor(),a=t.tilesIn(i,r);a.sort(Q);for(var s=[],l=0,c=a;l<c.length;l+=1){var h=c[l];s.push({wrappedTileID:h.tileID.wrapped().key,queryResults:h.tile.queryRenderedFeatures(e,t._state,h.queryGeometry,h.scale,n,o,r,t.transform.calculatePosMatrix(h.tileID.toUnwrapped()))})}var u=function(t){for(var e={},i={},n=0,o=t;n<o.length;n+=1){var r=o[n],a=r.queryResults,s=r.wrappedTileID,l=i[s]=i[s]||{};for(var c in a)for(var h=a[c],u=l[c]=l[c]||{},p=e[c]=e[c]||[],d=0,_=h;d<_.length;d+=1){var f=_[d];u[f.featureIndex]||(u[f.featureIndex]=!0,p.push(f.feature))}}return e}(s);for(var p in u)u[p].forEach(function(e){var i=t.getFeatureState(e.layer["source-layer"],e.id);e.source=e.layer.source,e.layer["source-layer"]&&(e.sourceLayer=e.layer["source-layer"]),e.state=i});return u}function Q(t,e){var i=t.tileID,n=e.tileID;return i.overscaledZ-n.overscaledZ||i.canonical.y-n.canonical.y||i.wrap-n.wrap||i.canonical.x-n.canonical.x}var $=function(t,e){this.max=t,this.onRemove=e,this.reset()};$.prototype.reset=function(){for(var t in this.data)for(var e=0,i=this.data[t];e<i.length;e+=1){var n=i[e];n.timeout&&clearTimeout(n.timeout),this.onRemove(n.value)}return this.data={},this.order=[],this},$.prototype.add=function(t,e,i){var n=this,o=t.wrapped().key;void 0===this.data[o]&&(this.data[o]=[]);var r={value:e,timeout:void 0};if(void 0!==i&&(r.timeout=setTimeout(function(){n.remove(t,r)},i)),this.data[o].push(r),this.order.push(o),this.order.length>this.max){var a=this._getAndRemoveByKey(this.order[0]);a&&this.onRemove(a)}return this},$.prototype.has=function(t){return t.wrapped().key in this.data},$.prototype.getAndRemove=function(t){return this.has(t)?this._getAndRemoveByKey(t.wrapped().key):null},$.prototype._getAndRemoveByKey=function(t){var e=this.data[t].shift();return e.timeout&&clearTimeout(e.timeout),0===this.data[t].length&&delete this.data[t],this.order.splice(this.order.indexOf(t),1),e.value},$.prototype.get=function(t){return this.has(t)?this.data[t.wrapped().key][0].value:null},$.prototype.remove=function(t,e){if(!this.has(t))return this;var i=t.wrapped().key,n=void 0===e?0:this.data[i].indexOf(e),o=this.data[i][n];return this.data[i].splice(n,1),o.timeout&&clearTimeout(o.timeout),0===this.data[i].length&&delete this.data[i],this.onRemove(o.value),this.order.splice(this.order.indexOf(i),1),this},$.prototype.setMaxSize=function(t){for(this.max=t;this.order.length>this.max;){var e=this._getAndRemoveByKey(this.order[0]);e&&this.onRemove(e)}return this};var tt=function(t,e,i){this.context=t;var n=t.gl;this.buffer=n.createBuffer(),this.dynamicDraw=Boolean(i),this.unbindVAO(),t.bindElementBuffer.set(this.buffer),n.bufferData(n.ELEMENT_ARRAY_BUFFER,e.arrayBuffer,this.dynamicDraw?n.DYNAMIC_DRAW:n.STATIC_DRAW),this.dynamicDraw||delete e.arrayBuffer};tt.prototype.unbindVAO=function(){this.context.extVertexArrayObject&&this.context.bindVertexArrayOES.set(null)},tt.prototype.bind=function(){this.context.bindElementBuffer.set(this.buffer)},tt.prototype.updateData=function(t){var e=this.context.gl;this.unbindVAO(),this.bind(),e.bufferSubData(e.ELEMENT_ARRAY_BUFFER,0,t.arrayBuffer)},tt.prototype.destroy=function(){var t=this.context.gl;this.buffer&&(t.deleteBuffer(this.buffer),delete this.buffer)};var et={Int8:"BYTE",Uint8:"UNSIGNED_BYTE",Int16:"SHORT",Uint16:"UNSIGNED_SHORT",Int32:"INT",Uint32:"UNSIGNED_INT",Float32:"FLOAT"},it=function(t,e,i,n){this.length=e.length,this.attributes=i,this.itemSize=e.bytesPerElement,this.dynamicDraw=n,this.context=t;var o=t.gl;this.buffer=o.createBuffer(),t.bindVertexBuffer.set(this.buffer),o.bufferData(o.ARRAY_BUFFER,e.arrayBuffer,this.dynamicDraw?o.DYNAMIC_DRAW:o.STATIC_DRAW),this.dynamicDraw||delete e.arrayBuffer};it.prototype.bind=function(){this.context.bindVertexBuffer.set(this.buffer)},it.prototype.updateData=function(t){var e=this.context.gl;this.bind(),e.bufferSubData(e.ARRAY_BUFFER,0,t.arrayBuffer)},it.prototype.enableAttributes=function(t,e){for(var i=0;i<this.attributes.length;i++){var n=this.attributes[i],o=e.attributes[n.name];void 0!==o&&t.enableVertexAttribArray(o)}},it.prototype.setVertexAttribPointers=function(t,e,i){for(var n=0;n<this.attributes.length;n++){var o=this.attributes[n],r=e.attributes[o.name];void 0!==r&&t.vertexAttribPointer(r,o.components,t[et[o.type]],!1,this.itemSize,o.offset+this.itemSize*(i||0))}},it.prototype.destroy=function(){var t=this.context.gl;this.buffer&&(t.deleteBuffer(this.buffer),delete this.buffer)};var nt=function(e){this.context=e,this.current=t.Color.transparent};nt.prototype.get=function(){return this.current},nt.prototype.set=function(t){var e=this.current;t.r===e.r&&t.g===e.g&&t.b===e.b&&t.a===e.a||(this.context.gl.clearColor(t.r,t.g,t.b,t.a),this.current=t)};var ot=function(t){this.context=t,this.current=1};ot.prototype.get=function(){return this.current},ot.prototype.set=function(t){this.current!==t&&(this.context.gl.clearDepth(t),this.current=t)};var rt=function(t){this.context=t,this.current=0};rt.prototype.get=function(){return this.current},rt.prototype.set=function(t){this.current!==t&&(this.context.gl.clearStencil(t),this.current=t)};var at=function(t){this.context=t,this.current=[!0,!0,!0,!0]};at.prototype.get=function(){return this.current},at.prototype.set=function(t){var e=this.current;t[0]===e[0]&&t[1]===e[1]&&t[2]===e[2]&&t[3]===e[3]||(this.context.gl.colorMask(t[0],t[1],t[2],t[3]),this.current=t)};var st=function(t){this.context=t,this.current=!0};st.prototype.get=function(){return this.current},st.prototype.set=function(t){this.current!==t&&(this.context.gl.depthMask(t),this.current=t)};var lt=function(t){this.context=t,this.current=255};lt.prototype.get=function(){return this.current},lt.prototype.set=function(t){this.current!==t&&(this.context.gl.stencilMask(t),this.current=t)};var ct=function(t){this.context=t,this.current={func:t.gl.ALWAYS,ref:0,mask:255}};ct.prototype.get=function(){return this.current},ct.prototype.set=function(t){var e=this.current;t.func===e.func&&t.ref===e.ref&&t.mask===e.mask||(this.context.gl.stencilFunc(t.func,t.ref,t.mask),this.current=t)};var ht=function(t){this.context=t;var e=this.context.gl;this.current=[e.KEEP,e.KEEP,e.KEEP]};ht.prototype.get=function(){return this.current},ht.prototype.set=function(t){var e=this.current;t[0]===e[0]&&t[1]===e[1]&&t[2]===e[2]||(this.context.gl.stencilOp(t[0],t[1],t[2]),this.current=t)};var ut=function(t){this.context=t,this.current=!1};ut.prototype.get=function(){return this.current},ut.prototype.set=function(t){if(this.current!==t){var e=this.context.gl;t?e.enable(e.STENCIL_TEST):e.disable(e.STENCIL_TEST),this.current=t}};var pt=function(t){this.context=t,this.current=[0,1]};pt.prototype.get=function(){return this.current},pt.prototype.set=function(t){var e=this.current;t[0]===e[0]&&t[1]===e[1]||(this.context.gl.depthRange(t[0],t[1]),this.current=t)};var dt=function(t){this.context=t,this.current=!1};dt.prototype.get=function(){return this.current},dt.prototype.set=function(t){if(this.current!==t){var e=this.context.gl;t?e.enable(e.DEPTH_TEST):e.disable(e.DEPTH_TEST),this.current=t}};var _t=function(t){this.context=t,this.current=t.gl.LESS};_t.prototype.get=function(){return this.current},_t.prototype.set=function(t){this.current!==t&&(this.context.gl.depthFunc(t),this.current=t)};var ft=function(t){this.context=t,this.current=!1};ft.prototype.get=function(){return this.current},ft.prototype.set=function(t){if(this.current!==t){var e=this.context.gl;t?e.enable(e.BLEND):e.disable(e.BLEND),this.current=t}};var mt=function(t){this.context=t;var e=this.context.gl;this.current=[e.ONE,e.ZERO]};mt.prototype.get=function(){return this.current},mt.prototype.set=function(t){var e=this.current;t[0]===e[0]&&t[1]===e[1]||(this.context.gl.blendFunc(t[0],t[1]),this.current=t)};var gt=function(e){this.context=e,this.current=t.Color.transparent};gt.prototype.get=function(){return this.current},gt.prototype.set=function(t){var e=this.current;t.r===e.r&&t.g===e.g&&t.b===e.b&&t.a===e.a||(this.context.gl.blendColor(t.r,t.g,t.b,t.a),this.current=t)};var vt=function(t){this.context=t,this.current=null};vt.prototype.get=function(){return this.current},vt.prototype.set=function(t){this.current!==t&&(this.context.gl.useProgram(t),this.current=t)};var yt=function(t){this.context=t,this.current=t.gl.TEXTURE0};yt.prototype.get=function(){return this.current},yt.prototype.set=function(t){this.current!==t&&(this.context.gl.activeTexture(t),this.current=t)};var xt=function(t){this.context=t;var e=this.context.gl;this.current=[0,0,e.drawingBufferWidth,e.drawingBufferHeight]};xt.prototype.get=function(){return this.current},xt.prototype.set=function(t){var e=this.current;t[0]===e[0]&&t[1]===e[1]&&t[2]===e[2]&&t[3]===e[3]||(this.context.gl.viewport(t[0],t[1],t[2],t[3]),this.current=t)};var bt=function(t){this.context=t,this.current=null};bt.prototype.get=function(){return this.current},bt.prototype.set=function(t){if(this.current!==t){var e=this.context.gl;e.bindFramebuffer(e.FRAMEBUFFER,t),this.current=t}};var wt=function(t){this.context=t,this.current=null};wt.prototype.get=function(){return this.current},wt.prototype.set=function(t){if(this.current!==t){var e=this.context.gl;e.bindRenderbuffer(e.RENDERBUFFER,t),this.current=t}};var Et=function(t){this.context=t,this.current=null};Et.prototype.get=function(){return this.current},Et.prototype.set=function(t){if(this.current!==t){var e=this.context.gl;e.bindTexture(e.TEXTURE_2D,t),this.current=t}};var Tt=function(t){this.context=t,this.current=null};Tt.prototype.get=function(){return this.current},Tt.prototype.set=function(t){if(this.current!==t){var e=this.context.gl;e.bindBuffer(e.ARRAY_BUFFER,t),this.current=t}};var St=function(t){this.context=t,this.current=null};St.prototype.get=function(){return this.current},St.prototype.set=function(t){var e=this.context.gl;e.bindBuffer(e.ELEMENT_ARRAY_BUFFER,t),this.current=t};var It=function(t){this.context=t,this.current=null};It.prototype.get=function(){return this.current},It.prototype.set=function(t){this.current!==t&&this.context.extVertexArrayObject&&(this.context.extVertexArrayObject.bindVertexArrayOES(t),this.current=t)};var Ct=function(t){this.context=t,this.current=4};Ct.prototype.get=function(){return this.current},Ct.prototype.set=function(t){if(this.current!==t){var e=this.context.gl;e.pixelStorei(e.UNPACK_ALIGNMENT,t),this.current=t}};var zt=function(t){this.context=t,this.current=!1};zt.prototype.get=function(){return this.current},zt.prototype.set=function(t){if(this.current!==t){var e=this.context.gl;e.pixelStorei(e.UNPACK_PREMULTIPLY_ALPHA_WEBGL,t),this.current=t}};var Pt=function(t,e){this.context=t,this.current=null,this.parent=e};Pt.prototype.get=function(){return this.current};var Rt=function(t){function e(e,i){t.call(this,e,i),this.dirty=!1}return t&&(e.__proto__=t),e.prototype=Object.create(t&&t.prototype),e.prototype.constructor=e,e.prototype.set=function(t){if(this.dirty||this.current!==t){var e=this.context.gl;this.context.bindFramebuffer.set(this.parent),e.framebufferTexture2D(e.FRAMEBUFFER,e.COLOR_ATTACHMENT0,e.TEXTURE_2D,t,0),this.current=t,this.dirty=!1}},e.prototype.setDirty=function(){this.dirty=!0},e}(Pt),At=function(t){function e(){t.apply(this,arguments)}return t&&(e.__proto__=t),e.prototype=Object.create(t&&t.prototype),e.prototype.constructor=e,e.prototype.set=function(t){if(this.current!==t){var e=this.context.gl;this.context.bindFramebuffer.set(this.parent),e.framebufferRenderbuffer(e.FRAMEBUFFER,e.DEPTH_ATTACHMENT,e.RENDERBUFFER,t),this.current=t}},e}(Pt),Lt=function(t,e,i){this.context=t,this.width=e,this.height=i;var n=t.gl,o=this.framebuffer=n.createFramebuffer();this.colorAttachment=new Rt(t,o),this.depthAttachment=new At(t,o)};Lt.prototype.destroy=function(){var t=this.context.gl,e=this.colorAttachment.get();e&&t.deleteTexture(e);var i=this.depthAttachment.get();i&&t.deleteRenderbuffer(i),t.deleteFramebuffer(this.framebuffer)};var Dt=function(t,e,i){this.func=t,this.mask=e,this.range=i};Dt.ReadOnly=!1,Dt.ReadWrite=!0,Dt.disabled=new Dt(519,Dt.ReadOnly,[0,1]);var Mt=function(t,e,i,n,o,r){this.test=t,this.ref=e,this.mask=i,this.fail=n,this.depthFail=o,this.pass=r};Mt.disabled=new Mt({func:519,mask:0},0,0,7680,7680,7680);var kt=function(t,e,i){this.blendFunction=t,this.blendColor=e,this.mask=i};kt.Replace=[1,0],kt.disabled=new kt(kt.Replace,t.Color.transparent,[!1,!1,!1,!1]),kt.unblended=new kt(kt.Replace,t.Color.transparent,[!0,!0,!0,!0]),kt.alphaBlended=new kt([1,771],t.Color.transparent,[!0,!0,!0,!0]);var Bt=function(t){this.gl=t,this.extVertexArrayObject=this.gl.getExtension("OES_vertex_array_object"),this.clearColor=new nt(this),this.clearDepth=new ot(this),this.clearStencil=new rt(this),this.colorMask=new at(this),this.depthMask=new st(this),this.stencilMask=new lt(this),this.stencilFunc=new ct(this),this.stencilOp=new ht(this),this.stencilTest=new ut(this),this.depthRange=new pt(this),this.depthTest=new dt(this),this.depthFunc=new _t(this),this.blend=new ft(this),this.blendFunc=new mt(this),this.blendColor=new gt(this),this.program=new vt(this),this.activeTexture=new yt(this),this.viewport=new xt(this),this.bindFramebuffer=new bt(this),this.bindRenderbuffer=new wt(this),this.bindTexture=new Et(this),this.bindVertexBuffer=new Tt(this),this.bindElementBuffer=new St(this),this.bindVertexArrayOES=this.extVertexArrayObject&&new It(this),this.pixelStoreUnpack=new Ct(this),this.pixelStoreUnpackPremultiplyAlpha=new zt(this),this.extTextureFilterAnisotropic=t.getExtension("EXT_texture_filter_anisotropic")||t.getExtension("MOZ_EXT_texture_filter_anisotropic")||t.getExtension("WEBKIT_EXT_texture_filter_anisotropic"),this.extTextureFilterAnisotropic&&(this.extTextureFilterAnisotropicMax=t.getParameter(this.extTextureFilterAnisotropic.MAX_TEXTURE_MAX_ANISOTROPY_EXT)),this.extTextureHalfFloat=t.getExtension("OES_texture_half_float"),this.extTextureHalfFloat&&t.getExtension("OES_texture_half_float_linear")};Bt.prototype.createIndexBuffer=function(t,e){return new tt(this,t,e)},Bt.prototype.createVertexBuffer=function(t,e,i){return new it(this,t,e,i)},Bt.prototype.createRenderbuffer=function(t,e,i){var n=this.gl,o=n.createRenderbuffer();return this.bindRenderbuffer.set(o),n.renderbufferStorage(n.RENDERBUFFER,t,e,i),this.bindRenderbuffer.set(null),o},Bt.prototype.createFramebuffer=function(t,e){return new Lt(this,t,e)},Bt.prototype.clear=function(t){var e=t.color,i=t.depth,n=this.gl,o=0;e&&(o|=n.COLOR_BUFFER_BIT,this.clearColor.set(e),this.colorMask.set([!0,!0,!0,!0])),void 0!==i&&(o|=n.DEPTH_BUFFER_BIT,this.clearDepth.set(i),this.depthMask.set(!0)),n.clear(o)},Bt.prototype.setDepthMode=function(t){t.func!==this.gl.ALWAYS||t.mask?(this.depthTest.set(!0),this.depthFunc.set(t.func),this.depthMask.set(t.mask),this.depthRange.set(t.range)):this.depthTest.set(!1)},Bt.prototype.setStencilMode=function(t){t.test.func!==this.gl.ALWAYS||t.mask?(this.stencilTest.set(!0),this.stencilMask.set(t.mask),this.stencilOp.set([t.fail,t.depthFail,t.pass]),this.stencilFunc.set({func:t.test.func,ref:t.ref,mask:t.test.mask})):this.stencilTest.set(!1)},Bt.prototype.setColorMode=function(e){t.isEqual(e.blendFunction,kt.Replace)?this.blend.set(!1):(this.blend.set(!0),this.blendFunc.set(e.blendFunction),this.blendColor.set(e.blendColor)),this.colorMask.set(e.mask)};var Ot=function(e){function i(i,n,o){var r=this;e.call(this),this.id=i,this.dispatcher=o,this.on("data",function(t){"source"===t.dataType&&"metadata"===t.sourceDataType&&(r._sourceLoaded=!0),r._sourceLoaded&&!r._paused&&"source"===t.dataType&&"content"===t.sourceDataType&&(r.reload(),r.transform&&r.update(r.transform))}),this.on("error",function(){r._sourceErrored=!0}),this._source=Y(i,n,o,this),this._tiles={},this._cache=new $(0,this._unloadTile.bind(this)),this._timers={},this._cacheTimers={},this._maxTileCacheSize=null,this._coveredTiles={},this._state=new t.SourceFeatureState}return e&&(i.__proto__=e),i.prototype=Object.create(e&&e.prototype),i.prototype.constructor=i,i.prototype.onAdd=function(t){this.map=t,this._maxTileCacheSize=t?t._maxTileCacheSize:null,this._source&&this._source.onAdd&&this._source.onAdd(t)},i.prototype.onRemove=function(t){this._source&&this._source.onRemove&&this._source.onRemove(t)},i.prototype.loaded=function(){if(this._sourceErrored)return!0;if(!this._sourceLoaded)return!1;for(var t in this._tiles){var e=this._tiles[t];if("loaded"!==e.state&&"errored"!==e.state)return!1}return!0},i.prototype.getSource=function(){return this._source},i.prototype.pause=function(){this._paused=!0},i.prototype.resume=function(){if(this._paused){var t=this._shouldReloadOnResume;this._paused=!1,this._shouldReloadOnResume=!1,t&&this.reload(),this.transform&&this.update(this.transform)}},i.prototype._loadTile=function(t,e){return this._source.loadTile(t,e)},i.prototype._unloadTile=function(t){if(this._source.unloadTile)return this._source.unloadTile(t,function(){})},i.prototype._abortTile=function(t){if(this._source.abortTile)return this._source.abortTile(t,function(){})},i.prototype.serialize=function(){return this._source.serialize()},i.prototype.prepare=function(t){for(var e in this._source.prepare&&this._source.prepare(),this._state.coalesceChanges(this._tiles,this.map?this.map.painter:null),this._tiles)this._tiles[e].upload(t)},i.prototype.getIds=function(){return Object.keys(this._tiles).map(Number).sort(Ut)},i.prototype.getRenderableIds=function(e){var i=this,n=[];for(var o in i._tiles)i._isIdRenderable(+o,e)&&n.push(+o);return e?n.sort(function(e,n){var o=i._tiles[e].tileID,r=i._tiles[n].tileID,a=new t.Point(o.canonical.x,o.canonical.y)._rotate(i.transform.angle),s=new t.Point(r.canonical.x,r.canonical.y)._rotate(i.transform.angle);return o.overscaledZ-r.overscaledZ||s.y-a.y||s.x-a.x}):n.sort(Ut)},i.prototype.hasRenderableParent=function(t){var e=this.findLoadedParent(t,0);return!!e&&this._isIdRenderable(e.tileID.key)},i.prototype._isIdRenderable=function(t,e){return this._tiles[t]&&this._tiles[t].hasData()&&!this._coveredTiles[t]&&(e||!this._tiles[t].holdingForFade())},i.prototype.reload=function(){if(this._paused)this._shouldReloadOnResume=!0;else for(var t in this._cache.reset(),this._tiles)"errored"!==this._tiles[t].state&&this._reloadTile(t,"reloading")},i.prototype._reloadTile=function(t,e){var i=this._tiles[t];i&&("loading"!==i.state&&(i.state=e),this._loadTile(i,this._tileLoaded.bind(this,i,t,e)))},i.prototype._tileLoaded=function(e,i,n,o){if(o)return e.state="errored",void(404!==o.status?this._source.fire(new t.ErrorEvent(o,{tile:e})):this.update(this.transform));e.timeAdded=t.browser.now(),"expired"===n&&(e.refreshedUponExpiration=!0),this._setTileReloadTimer(i,e),"raster-dem"===this.getSource().type&&e.dem&&this._backfillDEM(e),this._state.initializeTileState(e,this.map?this.map.painter:null),this._source.fire(new t.Event("data",{dataType:"source",tile:e,coord:e.tileID}))},i.prototype._backfillDEM=function(t){for(var e=this.getRenderableIds(),i=0;i<e.length;i++){var n=e[i];if(t.neighboringTiles&&t.neighboringTiles[n]){var o=this.getTileByID(n);r(t,o),r(o,t)}}function r(t,e){t.needsHillshadePrepare=!0;var i=e.tileID.canonical.x-t.tileID.canonical.x,n=e.tileID.canonical.y-t.tileID.canonical.y,o=Math.pow(2,t.tileID.canonical.z),r=e.tileID.key;0===i&&0===n||Math.abs(n)>1||(Math.abs(i)>1&&(1===Math.abs(i+o)?i+=o:1===Math.abs(i-o)&&(i-=o)),e.dem&&t.dem&&(t.dem.backfillBorder(e.dem,i,n),t.neighboringTiles&&t.neighboringTiles[r]&&(t.neighboringTiles[r].backfilled=!0)))}},i.prototype.getTile=function(t){return this.getTileByID(t.key)},i.prototype.getTileByID=function(t){return this._tiles[t]},i.prototype.getZoom=function(t){return t.zoom+t.scaleZoom(t.tileSize/this._source.tileSize)},i.prototype._retainLoadedChildren=function(t,e,i,n){for(var o in this._tiles){var r=this._tiles[o];if(!(n[o]||!r.hasData()||r.tileID.overscaledZ<=e||r.tileID.overscaledZ>i)){for(var a=r.tileID;r&&r.tileID.overscaledZ>e+1;){var s=r.tileID.scaledTo(r.tileID.overscaledZ-1);(r=this._tiles[s.key])&&r.hasData()&&(a=s)}for(var l=a;l.overscaledZ>e;)if(t[(l=l.scaledTo(l.overscaledZ-1)).key]){n[a.key]=a;break}}}},i.prototype.findLoadedParent=function(t,e){for(var i=t.overscaledZ-1;i>=e;i--){var n=t.scaledTo(i);if(!n)return;var o=String(n.key),r=this._tiles[o];if(r&&r.hasData())return r;if(this._cache.has(n))return this._cache.get(n)}},i.prototype.updateCacheSize=function(t){var e=(Math.ceil(t.width/this._source.tileSize)+1)*(Math.ceil(t.height/this._source.tileSize)+1),i=Math.floor(5*e),n="number"==typeof this._maxTileCacheSize?Math.min(this._maxTileCacheSize,i):i;this._cache.setMaxSize(n)},i.prototype.handleWrapJump=function(t){var e=(t-(void 0===this._prevLng?t:this._prevLng))/360,i=Math.round(e);if(this._prevLng=t,i){var n={};for(var o in this._tiles){var r=this._tiles[o];r.tileID=r.tileID.unwrapTo(r.tileID.wrap+i),n[r.tileID.key]=r}for(var a in this._tiles=n,this._timers)clearTimeout(this._timers[a]),delete this._timers[a];for(var s in this._tiles){var l=this._tiles[s];this._setTileReloadTimer(s,l)}}},i.prototype.update=function(e){var n=this;if(this.transform=e,this._sourceLoaded&&!this._paused){var o;this.updateCacheSize(e),this.handleWrapJump(this.transform.center.lng),this._coveredTiles={},this.used?this._source.tileID?o=e.getVisibleUnwrappedCoordinates(this._source.tileID).map(function(e){return new t.OverscaledTileID(e.canonical.z,e.wrap,e.canonical.z,e.canonical.x,e.canonical.y)}):(o=e.coveringTiles({tileSize:this._source.tileSize,minzoom:this._source.minzoom,maxzoom:this._source.maxzoom,roundZoom:this._source.roundZoom,reparseOverscaled:this._source.reparseOverscaled}),this._source.hasTile&&(o=o.filter(function(t){return n._source.hasTile(t)}))):o=[];var r=(this._source.roundZoom?Math.round:Math.floor)(this.getZoom(e)),a=Math.max(r-i.maxOverzooming,this._source.minzoom),s=Math.max(r+i.maxUnderzooming,this._source.minzoom),l=this._updateRetainedTiles(o,r);if(Nt(this._source.type)){for(var c={},h={},u=0,p=Object.keys(l);u<p.length;u+=1){var d=p[u],_=l[d],f=n._tiles[d];if(f&&!(f.fadeEndTime&&f.fadeEndTime<=t.browser.now())){var m=n.findLoadedParent(_,a);m&&(n._addTile(m.tileID),c[m.tileID.key]=m.tileID),h[d]=_}}for(var g in this._retainLoadedChildren(h,r,s,l),c)l[g]||(n._coveredTiles[g]=!0,l[g]=c[g])}for(var v in l)n._tiles[v].clearFadeHold();for(var y=0,x=t.keysDifference(this._tiles,l);y<x.length;y+=1){var b=x[y],w=n._tiles[b];w.hasSymbolBuckets&&!w.holdingForFade()?w.setHoldDuration(n.map._fadeDuration):w.hasSymbolBuckets&&!w.symbolFadeFinished()||n._removeTile(b)}}},i.prototype.releaseSymbolFadeTiles=function(){for(var t in this._tiles)this._tiles[t].holdingForFade()&&this._removeTile(t)},i.prototype._updateRetainedTiles=function(t,e){for(var n={},o={},r=Math.max(e-i.maxOverzooming,this._source.minzoom),a=Math.max(e+i.maxUnderzooming,this._source.minzoom),s={},l=0,c=t;l<c.length;l+=1){var h=c[l],u=this._addTile(h);n[h.key]=h,u.hasData()||e<this._source.maxzoom&&(s[h.key]=h)}this._retainLoadedChildren(s,e,a,n);for(var p=0,d=t;p<d.length;p+=1){var _=d[p],f=this._tiles[_.key];if(!f.hasData()){if(e+1>this._source.maxzoom){var m=_.children(this._source.maxzoom)[0],g=this.getTile(m);if(g&&g.hasData()){n[m.key]=m;continue}}else{var v=_.children(this._source.maxzoom);if(n[v[0].key]&&n[v[1].key]&&n[v[2].key]&&n[v[3].key])continue}for(var y=f.wasRequested(),x=_.overscaledZ-1;x>=r;--x){var b=_.scaledTo(x);if(o[b.key])break;if(o[b.key]=!0,!(f=this.getTile(b))&&y&&(f=this._addTile(b)),f&&(n[b.key]=b,y=f.wasRequested(),f.hasData()))break}}}return n},i.prototype._addTile=function(e){var i=this._tiles[e.key];if(i)return i;(i=this._cache.getAndRemove(e))&&(this._setTileReloadTimer(e.key,i),i.tileID=e,this._state.initializeTileState(i,this.map?this.map.painter:null),this._cacheTimers[e.key]&&(clearTimeout(this._cacheTimers[e.key]),delete this._cacheTimers[e.key],this._setTileReloadTimer(e.key,i)));var n=Boolean(i);return n||(i=new t.Tile(e,this._source.tileSize*e.overscaleFactor()),this._loadTile(i,this._tileLoaded.bind(this,i,e.key,i.state))),i?(i.uses++,this._tiles[e.key]=i,n||this._source.fire(new t.Event("dataloading",{tile:i,coord:i.tileID,dataType:"source"})),i):null},i.prototype._setTileReloadTimer=function(t,e){var i=this;t in this._timers&&(clearTimeout(this._timers[t]),delete this._timers[t]);var n=e.getExpiryTimeout();n&&(this._timers[t]=setTimeout(function(){i._reloadTile(t,"expired"),delete i._timers[t]},n))},i.prototype._removeTile=function(t){var e=this._tiles[t];e&&(e.uses--,delete this._tiles[t],this._timers[t]&&(clearTimeout(this._timers[t]),delete this._timers[t]),e.uses>0||(e.hasData()?this._cache.add(e.tileID,e,e.getExpiryTimeout()):(e.aborted=!0,this._abortTile(e),this._unloadTile(e))))},i.prototype.clearTiles=function(){for(var t in this._shouldReloadOnResume=!1,this._paused=!1,this._tiles)this._removeTile(t);this._cache.reset()},i.prototype.tilesIn=function(e,i){for(var n=[],o=this.getIds(),r=1/0,a=1/0,s=-1/0,l=-1/0,c=e[0].zoom,h=0;h<e.length;h++){var u=e[h];r=Math.min(r,u.column),a=Math.min(a,u.row),s=Math.max(s,u.column),l=Math.max(l,u.row)}for(var p=0;p<o.length;p++){var d=this._tiles[o[p]];if(!d.holdingForFade()){var _=d.tileID,f=Math.pow(2,this.transform.zoom-d.tileID.overscaledZ),m=i*d.queryPadding*t.EXTENT/d.tileSize/f,g=[Ft(_,new t.Coordinate(r,a,c)),Ft(_,new t.Coordinate(s,l,c))];if(g[0].x-m<t.EXTENT&&g[0].y-m<t.EXTENT&&g[1].x+m>=0&&g[1].y+m>=0){for(var v=[],y=0;y<e.length;y++)v.push(Ft(_,e[y]));n.push({tile:d,tileID:_,queryGeometry:[v],scale:f})}}}return n},i.prototype.getVisibleCoordinates=function(t){for(var e=this,i=this.getRenderableIds(t).map(function(t){return e._tiles[t].tileID}),n=0,o=i;n<o.length;n+=1){var r=o[n];r.posMatrix=e.transform.calculatePosMatrix(r.toUnwrapped())}return i},i.prototype.hasTransition=function(){if(this._source.hasTransition())return!0;if(Nt(this._source.type))for(var e in this._tiles){var i=this._tiles[e];if(void 0!==i.fadeEndTime&&i.fadeEndTime>=t.browser.now())return!0}return!1},i.prototype.setFeatureState=function(t,e,i){t=t||"_geojsonTileLayer",this._state.updateState(t,e,i)},i.prototype.getFeatureState=function(t,e){return t=t||"_geojsonTileLayer",this._state.getState(t,e)},i}(t.Evented);function Ft(e,i){var n=i.zoomTo(e.canonical.z);return new t.Point((n.column-(e.canonical.x+e.wrap*Math.pow(2,e.canonical.z)))*t.EXTENT,(n.row-e.canonical.y)*t.EXTENT)}function Ut(t,e){return t%32-e%32||e-t}function Nt(t){return"raster"===t||"image"===t||"video"===t}function Zt(){return new t.window.Worker(kn.workerUrl)}Ot.maxOverzooming=10,Ot.maxUnderzooming=3;var qt,Vt=function(){this.active={}};function jt(e,i){var n={};for(var o in e)"ref"!==o&&(n[o]=e[o]);return t.refProperties.forEach(function(t){t in i&&(n[t]=i[t])}),n}function Gt(t){t=t.slice();for(var e=Object.create(null),i=0;i<t.length;i++)e[t[i].id]=t[i];for(var n=0;n<t.length;n++)"ref"in t[n]&&(t[n]=jt(t[n],e[t[n].ref]));return t}Vt.prototype.acquire=function(t){if(!this.workers)for(this.workers=[];this.workers.length<Vt.workerCount;)this.workers.push(new Zt);return this.active[t]=!0,this.workers.slice()},Vt.prototype.release=function(t){delete this.active[t],0===Object.keys(this.active).length&&(this.workers.forEach(function(t){t.terminate()}),this.workers=null)},Vt.workerCount=Math.max(Math.floor(t.browser.hardwareConcurrency/2),1);var Wt={setStyle:"setStyle",addLayer:"addLayer",removeLayer:"removeLayer",setPaintProperty:"setPaintProperty",setLayoutProperty:"setLayoutProperty",setFilter:"setFilter",addSource:"addSource",removeSource:"removeSource",setGeoJSONSourceData:"setGeoJSONSourceData",setLayerZoomRange:"setLayerZoomRange",setLayerProperty:"setLayerProperty",setCenter:"setCenter",setZoom:"setZoom",setBearing:"setBearing",setPitch:"setPitch",setSprite:"setSprite",setGlyphs:"setGlyphs",setTransition:"setTransition",setLight:"setLight"};function Xt(t,e,i){i.push({command:Wt.addSource,args:[t,e[t]]})}function Ht(t,e,i){e.push({command:Wt.removeSource,args:[t]}),i[t]=!0}function Kt(t,e,i,n){Ht(t,i,n),Xt(t,e,i)}function Yt(e,i,n){var o;for(o in e[n])if(e[n].hasOwnProperty(o)&&"data"!==o&&!t.isEqual(e[n][o],i[n][o]))return!1;for(o in i[n])if(i[n].hasOwnProperty(o)&&"data"!==o&&!t.isEqual(e[n][o],i[n][o]))return!1;return!0}function Jt(e,i,n,o,r,a){var s;for(s in i=i||{},e=e||{})e.hasOwnProperty(s)&&(t.isEqual(e[s],i[s])||n.push({command:a,args:[o,s,i[s],r]}));for(s in i)i.hasOwnProperty(s)&&!e.hasOwnProperty(s)&&(t.isEqual(e[s],i[s])||n.push({command:a,args:[o,s,i[s],r]}))}function Qt(t){return t.id}function $t(t,e){return t[e.id]=e,t}function te(e,i){if(!e)return[{command:Wt.setStyle,args:[i]}];var n=[];try{if(!t.isEqual(e.version,i.version))return[{command:Wt.setStyle,args:[i]}];t.isEqual(e.center,i.center)||n.push({command:Wt.setCenter,args:[i.center]}),t.isEqual(e.zoom,i.zoom)||n.push({command:Wt.setZoom,args:[i.zoom]}),t.isEqual(e.bearing,i.bearing)||n.push({command:Wt.setBearing,args:[i.bearing]}),t.isEqual(e.pitch,i.pitch)||n.push({command:Wt.setPitch,args:[i.pitch]}),t.isEqual(e.sprite,i.sprite)||n.push({command:Wt.setSprite,args:[i.sprite]}),t.isEqual(e.glyphs,i.glyphs)||n.push({command:Wt.setGlyphs,args:[i.glyphs]}),t.isEqual(e.transition,i.transition)||n.push({command:Wt.setTransition,args:[i.transition]}),t.isEqual(e.light,i.light)||n.push({command:Wt.setLight,args:[i.light]});var o={},r=[];!function(e,i,n,o){var r;for(r in i=i||{},e=e||{})e.hasOwnProperty(r)&&(i.hasOwnProperty(r)||Ht(r,n,o));for(r in i)i.hasOwnProperty(r)&&(e.hasOwnProperty(r)?t.isEqual(e[r],i[r])||("geojson"===e[r].type&&"geojson"===i[r].type&&Yt(e,i,r)?n.push({command:Wt.setGeoJSONSourceData,args:[r,i[r].data]}):Kt(r,i,n,o)):Xt(r,i,n))}(e.sources,i.sources,r,o);var a=[];e.layers&&e.layers.forEach(function(t){o[t.source]?n.push({command:Wt.removeLayer,args:[t.id]}):a.push(t)}),n=n.concat(r),function(e,i,n){i=i||[];var o,r,a,s,l,c,h,u=(e=e||[]).map(Qt),p=i.map(Qt),d=e.reduce($t,{}),_=i.reduce($t,{}),f=u.slice(),m=Object.create(null);for(o=0,r=0;o<u.length;o++)a=u[o],_.hasOwnProperty(a)?r++:(n.push({command:Wt.removeLayer,args:[a]}),f.splice(f.indexOf(a,r),1));for(o=0,r=0;o<p.length;o++)a=p[p.length-1-o],f[f.length-1-o]!==a&&(d.hasOwnProperty(a)?(n.push({command:Wt.removeLayer,args:[a]}),f.splice(f.lastIndexOf(a,f.length-r),1)):r++,c=f[f.length-o],n.push({command:Wt.addLayer,args:[_[a],c]}),f.splice(f.length-o,0,a),m[a]=!0);for(o=0;o<p.length;o++)if(s=d[a=p[o]],l=_[a],!m[a]&&!t.isEqual(s,l))if(t.isEqual(s.source,l.source)&&t.isEqual(s["source-layer"],l["source-layer"])&&t.isEqual(s.type,l.type)){for(h in Jt(s.layout,l.layout,n,a,null,Wt.setLayoutProperty),Jt(s.paint,l.paint,n,a,null,Wt.setPaintProperty),t.isEqual(s.filter,l.filter)||n.push({command:Wt.setFilter,args:[a,l.filter]}),t.isEqual(s.minzoom,l.minzoom)&&t.isEqual(s.maxzoom,l.maxzoom)||n.push({command:Wt.setLayerZoomRange,args:[a,l.minzoom,l.maxzoom]}),s)s.hasOwnProperty(h)&&"layout"!==h&&"paint"!==h&&"filter"!==h&&"metadata"!==h&&"minzoom"!==h&&"maxzoom"!==h&&(0===h.indexOf("paint.")?Jt(s[h],l[h],n,a,h.slice(6),Wt.setPaintProperty):t.isEqual(s[h],l[h])||n.push({command:Wt.setLayerProperty,args:[a,h,l[h]]}));for(h in l)l.hasOwnProperty(h)&&!s.hasOwnProperty(h)&&"layout"!==h&&"paint"!==h&&"filter"!==h&&"metadata"!==h&&"minzoom"!==h&&"maxzoom"!==h&&(0===h.indexOf("paint.")?Jt(s[h],l[h],n,a,h.slice(6),Wt.setPaintProperty):t.isEqual(s[h],l[h])||n.push({command:Wt.setLayerProperty,args:[a,h,l[h]]}))}else n.push({command:Wt.removeLayer,args:[a]}),c=f[f.lastIndexOf(a)+1],n.push({command:Wt.addLayer,args:[l,c]})}(a,i.layers,n)}catch(t){console.warn("Unable to compute style diff:",t),n=[{command:Wt.setStyle,args:[i]}]}return n}var ee=function(t,e,i){var n=this.boxCells=[],o=this.circleCells=[];this.xCellCount=Math.ceil(t/i),this.yCellCount=Math.ceil(e/i);for(var r=0;r<this.xCellCount*this.yCellCount;r++)n.push([]),o.push([]);this.circleKeys=[],this.boxKeys=[],this.bboxes=[],this.circles=[],this.width=t,this.height=e,this.xScale=this.xCellCount/t,this.yScale=this.yCellCount/e,this.boxUid=0,this.circleUid=0};ee.prototype.keysLength=function(){return this.boxKeys.length+this.circleKeys.length},ee.prototype.insert=function(t,e,i,n,o){this._forEachCell(e,i,n,o,this._insertBoxCell,this.boxUid++),this.boxKeys.push(t),this.bboxes.push(e),this.bboxes.push(i),this.bboxes.push(n),this.bboxes.push(o)},ee.prototype.insertCircle=function(t,e,i,n){this._forEachCell(e-n,i-n,e+n,i+n,this._insertCircleCell,this.circleUid++),this.circleKeys.push(t),this.circles.push(e),this.circles.push(i),this.circles.push(n)},ee.prototype._insertBoxCell=function(t,e,i,n,o,r){this.boxCells[o].push(r)},ee.prototype._insertCircleCell=function(t,e,i,n,o,r){this.circleCells[o].push(r)},ee.prototype._query=function(t,e,i,n,o,r){if(i<0||t>this.width||n<0||e>this.height)return!o&&[];var a=[];if(t<=0&&e<=0&&this.width<=i&&this.height<=n){if(o)return!0;for(var s=0;s<this.boxKeys.length;s++)a.push({key:this.boxKeys[s],x1:this.bboxes[4*s],y1:this.bboxes[4*s+1],x2:this.bboxes[4*s+2],y2:this.bboxes[4*s+3]});for(var l=0;l<this.circleKeys.length;l++){var c=this.circles[3*l],h=this.circles[3*l+1],u=this.circles[3*l+2];a.push({key:this.circleKeys[l],x1:c-u,y1:h-u,x2:c+u,y2:h+u})}return r?a.filter(r):a}var p={hitTest:o,seenUids:{box:{},circle:{}}};return this._forEachCell(t,e,i,n,this._queryCell,a,p,r),o?a.length>0:a},ee.prototype._queryCircle=function(t,e,i,n,o){var r=t-i,a=t+i,s=e-i,l=e+i;if(a<0||r>this.width||l<0||s>this.height)return!n&&[];var c=[],h={hitTest:n,circle:{x:t,y:e,radius:i},seenUids:{box:{},circle:{}}};return this._forEachCell(r,s,a,l,this._queryCellCircle,c,h,o),n?c.length>0:c},ee.prototype.query=function(t,e,i,n,o){return this._query(t,e,i,n,!1,o)},ee.prototype.hitTest=function(t,e,i,n,o){return this._query(t,e,i,n,!0,o)},ee.prototype.hitTestCircle=function(t,e,i,n){return this._queryCircle(t,e,i,!0,n)},ee.prototype._queryCell=function(t,e,i,n,o,r,a,s){var l=a.seenUids,c=this.boxCells[o];if(null!==c)for(var h=this.bboxes,u=0,p=c;u<p.length;u+=1){var d=p[u];if(!l.box[d]){l.box[d]=!0;var _=4*d;if(t<=h[_+2]&&e<=h[_+3]&&i>=h[_+0]&&n>=h[_+1]&&(!s||s(this.boxKeys[d]))){if(a.hitTest)return r.push(!0),!0;r.push({key:this.boxKeys[d],x1:h[_],y1:h[_+1],x2:h[_+2],y2:h[_+3]})}}}var f=this.circleCells[o];if(null!==f)for(var m=this.circles,g=0,v=f;g<v.length;g+=1){var y=v[g];if(!l.circle[y]){l.circle[y]=!0;var x=3*y;if(this._circleAndRectCollide(m[x],m[x+1],m[x+2],t,e,i,n)&&(!s||s(this.circleKeys[y]))){if(a.hitTest)return r.push(!0),!0;var b=m[x],w=m[x+1],E=m[x+2];r.push({key:this.circleKeys[y],x1:b-E,y1:w-E,x2:b+E,y2:w+E})}}}},ee.prototype._queryCellCircle=function(t,e,i,n,o,r,a,s){var l=a.circle,c=a.seenUids,h=this.boxCells[o];if(null!==h)for(var u=this.bboxes,p=0,d=h;p<d.length;p+=1){var _=d[p];if(!c.box[_]){c.box[_]=!0;var f=4*_;if(this._circleAndRectCollide(l.x,l.y,l.radius,u[f+0],u[f+1],u[f+2],u[f+3])&&(!s||s(this.boxKeys[_])))return r.push(!0),!0}}var m=this.circleCells[o];if(null!==m)for(var g=this.circles,v=0,y=m;v<y.length;v+=1){var x=y[v];if(!c.circle[x]){c.circle[x]=!0;var b=3*x;if(this._circlesCollide(g[b],g[b+1],g[b+2],l.x,l.y,l.radius)&&(!s||s(this.circleKeys[x])))return r.push(!0),!0}}},ee.prototype._forEachCell=function(t,e,i,n,o,r,a,s){for(var l=this._convertToXCellCoord(t),c=this._convertToYCellCoord(e),h=this._convertToXCellCoord(i),u=this._convertToYCellCoord(n),p=l;p<=h;p++)for(var d=c;d<=u;d++){var _=this.xCellCount*d+p;if(o.call(this,t,e,i,n,_,r,a,s))return}},ee.prototype._convertToXCellCoord=function(t){return Math.max(0,Math.min(this.xCellCount-1,Math.floor(t*this.xScale)))},ee.prototype._convertToYCellCoord=function(t){return Math.max(0,Math.min(this.yCellCount-1,Math.floor(t*this.yScale)))},ee.prototype._circlesCollide=function(t,e,i,n,o,r){var a=n-t,s=o-e,l=i+r;return l*l>a*a+s*s},ee.prototype._circleAndRectCollide=function(t,e,i,n,o,r,a){var s=(r-n)/2,l=Math.abs(t-(n+s));if(l>s+i)return!1;var c=(a-o)/2,h=Math.abs(e-(o+c));if(h>c+i)return!1;if(l<=s||h<=c)return!0;var u=l-s,p=h-c;return u*u+p*p<=i*i};var ie=t.properties.layout;function ne(e,i,n,o,r){var a=t.identity(new Float32Array(16));return i?(t.identity(a),t.scale(a,a,[1/r,1/r,1]),n||t.rotateZ(a,a,o.angle)):(t.scale(a,a,[o.width/2,-o.height/2,1]),t.translate(a,a,[1,-1,0]),t.multiply(a,a,e)),a}function oe(e,i,n,o,r){var a=t.identity(new Float32Array(16));return i?(t.multiply(a,a,e),t.scale(a,a,[r,r,1]),n||t.rotateZ(a,a,-o.angle)):(t.scale(a,a,[1,-1,1]),t.translate(a,a,[-1,-1,0]),t.scale(a,a,[2/o.width,2/o.height,1])),a}function re(e,i){var n=[e.x,e.y,0,1];fe(n,n,i);var o=n[3];return{point:new t.Point(n[0]/o,n[1]/o),signedDistanceFromCamera:o}}function ae(t,e){var i=t[0]/t[3],n=t[1]/t[3];return i>=-e[0]&&i<=e[0]&&n>=-e[1]&&n<=e[1]}function se(e,i,n,o,r,a,s,l){var c=o?e.textSizeData:e.iconSizeData,h=t.evaluateSizeForZoom(c,n.transform.zoom,ie.properties[o?"text-size":"icon-size"]),u=[256/n.width*2+1,256/n.height*2+1],p=o?e.text.dynamicLayoutVertexArray:e.icon.dynamicLayoutVertexArray;p.clear();for(var d=e.lineVertexArray,_=o?e.text.placedSymbolArray:e.icon.placedSymbolArray,f=n.transform.width/n.transform.height,m=!1,g=0;g<_.length;g++){var v=_.get(g);if(v.hidden||v.writingMode===t.WritingMode.vertical&&!m)_e(v.numGlyphs,p);else{m=!1;var y=[v.anchorX,v.anchorY,0,1];if(t.transformMat4(y,y,i),ae(y,u)){var x=.5+y[3]/n.transform.cameraToCenterDistance*.5,b=t.evaluateSizeForFeature(c,h,v),w=s?b*x:b/x,E=new t.Point(v.anchorX,v.anchorY),T=re(E,r).point,S={},I=he(v,w,!1,l,i,r,a,e.glyphOffsetArray,d,p,T,E,S,f);m=I.useVertical,(I.notEnoughRoom||m||I.needsFlipping&&he(v,w,!0,l,i,r,a,e.glyphOffsetArray,d,p,T,E,S,f).notEnoughRoom)&&_e(v.numGlyphs,p)}else _e(v.numGlyphs,p)}}o?e.text.dynamicLayoutVertexBuffer.updateData(p):e.icon.dynamicLayoutVertexBuffer.updateData(p)}function le(t,e,i,n,o,r,a,s,l,c,h,u){var p=s.glyphStartIndex+s.numGlyphs,d=s.lineStartIndex,_=s.lineStartIndex+s.lineLength,f=e.getoffsetX(s.glyphStartIndex),m=e.getoffsetX(p-1),g=pe(t*f,i,n,o,r,a,s.segment,d,_,l,c,h,u);if(!g)return null;var v=pe(t*m,i,n,o,r,a,s.segment,d,_,l,c,h,u);return v?{first:g,last:v}:null}function ce(e,i,n,o){if(e===t.WritingMode.horizontal&&Math.abs(n.y-i.y)>Math.abs(n.x-i.x)*o)return{useVertical:!0};return(e===t.WritingMode.vertical?i.y<n.y:i.x>n.x)?{needsFlipping:!0}:null}function he(e,i,n,o,r,a,s,l,c,h,u,p,d,_){var f,m=i/24,g=e.lineOffsetX*i,v=e.lineOffsetY*i;if(e.numGlyphs>1){var y=e.glyphStartIndex+e.numGlyphs,x=e.lineStartIndex,b=e.lineStartIndex+e.lineLength,w=le(m,l,g,v,n,u,p,e,c,a,d,!1);if(!w)return{notEnoughRoom:!0};var E=re(w.first.point,s).point,T=re(w.last.point,s).point;if(o&&!n){var S=ce(e.writingMode,E,T,_);if(S)return S}f=[w.first];for(var I=e.glyphStartIndex+1;I<y-1;I++)f.push(pe(m*l.getoffsetX(I),g,v,n,u,p,e.segment,x,b,c,a,d,!1));f.push(w.last)}else{if(o&&!n){var C=re(p,r).point,z=e.lineStartIndex+e.segment+1,P=new t.Point(c.getx(z),c.gety(z)),R=re(P,r),A=R.signedDistanceFromCamera>0?R.point:ue(p,P,C,1,r),L=ce(e.writingMode,C,A,_);if(L)return L}var D=pe(m*l.getoffsetX(e.glyphStartIndex),g,v,n,u,p,e.segment,e.lineStartIndex,e.lineStartIndex+e.lineLength,c,a,d,!1);if(!D)return{notEnoughRoom:!0};f=[D]}for(var M=0,k=f;M<k.length;M+=1){var B=k[M];t.addDynamicAttributes(h,B.point,B.angle)}return{}}function ue(t,e,i,n,o){var r=re(t.add(t.sub(e)._unit()),o).point,a=i.sub(r);return i.add(a._mult(n/a.mag()))}function pe(e,i,n,o,r,a,s,l,c,h,u,p,d){var _=o?e-i:e+i,f=_>0?1:-1,m=0;o&&(f*=-1,m=Math.PI),f<0&&(m+=Math.PI);for(var g=f>0?l+s:l+s+1,v=g,y=r,x=r,b=0,w=0,E=Math.abs(_);b+w<=E;){if((g+=f)<l||g>=c)return null;if(x=y,void 0===(y=p[g])){var T=new t.Point(h.getx(g),h.gety(g)),S=re(T,u);if(S.signedDistanceFromCamera>0)y=p[g]=S.point;else{var I=g-f;y=ue(0===b?a:new t.Point(h.getx(I),h.gety(I)),T,x,E-b+1,u)}}b+=w,w=x.dist(y)}var C=(E-b)/w,z=y.sub(x),P=z.mult(C)._add(x);return P._add(z._unit()._perp()._mult(n*f)),{point:P,angle:m+Math.atan2(y.y-x.y,y.x-x.x),tileDistance:d?{prevTileDistance:g-f===v?0:h.gettileUnitDistanceFromAnchor(g-f),lastSegmentViewportDistance:E-b}:null}}var de=new Float32Array([-1/0,-1/0,0,-1/0,-1/0,0,-1/0,-1/0,0,-1/0,-1/0,0]);function _e(t,e){for(var i=0;i<t;i++){var n=e.length;e.resize(n+4),e.float32.set(de,3*n)}}function fe(t,e,i){var n=e[0],o=e[1];return t[0]=i[0]*n+i[4]*o+i[12],t[1]=i[1]*n+i[5]*o+i[13],t[3]=i[3]*n+i[7]*o+i[15],t}var me=function(t,e,i){void 0===e&&(e=new ee(t.width+200,t.height+200,25)),void 0===i&&(i=new ee(t.width+200,t.height+200,25)),this.transform=t,this.grid=e,this.ignoredGrid=i,this.pitchfactor=Math.cos(t._pitch)*t.cameraToCenterDistance,this.screenRightBoundary=t.width+100,this.screenBottomBoundary=t.height+100,this.gridRightBoundary=t.width+200,this.gridBottomBoundary=t.height+200};function ge(t,e,i){t[e+4]=i?1:0}function ve(e,i,n){return i*(t.EXTENT/(e.tileSize*Math.pow(2,n-e.tileID.overscaledZ)))}me.prototype.placeCollisionBox=function(t,e,i,n,o){var r=this.projectAndGetPerspectiveRatio(n,t.anchorPointX,t.anchorPointY),a=i*r.perspectiveRatio,s=t.x1*a+r.point.x,l=t.y1*a+r.point.y,c=t.x2*a+r.point.x,h=t.y2*a+r.point.y;return!this.isInsideGrid(s,l,c,h)||!e&&this.grid.hitTest(s,l,c,h,o)?{box:[],offscreen:!1}:{box:[s,l,c,h],offscreen:this.isOffscreen(s,l,c,h)}},me.prototype.approximateTileDistance=function(t,e,i,n,o){var r=o?1:n/this.pitchfactor,a=t.lastSegmentViewportDistance*i;return t.prevTileDistance+a+(r-1)*a*Math.abs(Math.sin(e))},me.prototype.placeCollisionCircles=function(e,i,n,o,r,a,s,l,c,h,u,p,d){var _=[],f=this.projectAnchor(c,r.anchorX,r.anchorY),m=l/24,g=r.lineOffsetX*l,v=r.lineOffsetY*l,y=new t.Point(r.anchorX,r.anchorY),x=le(m,s,g,v,!1,re(y,h).point,y,r,a,h,{},!0),b=!1,w=!1,E=!0,T=f.perspectiveRatio*o,S=1/(o*n),I=0,C=0;x&&(I=this.approximateTileDistance(x.first.tileDistance,x.first.angle,S,f.cameraDistance,p),C=this.approximateTileDistance(x.last.tileDistance,x.last.angle,S,f.cameraDistance,p));for(var z=0;z<e.length;z+=5){var P=e[z],R=e[z+1],A=e[z+2],L=e[z+3];if(!x||L<-I||L>C)ge(e,z,!1);else{var D=this.projectPoint(c,P,R),M=A*T;if(_.length>0){var k=D.x-_[_.length-4],B=D.y-_[_.length-3];if(M*M*2>k*k+B*B)if(z+8<e.length){var O=e[z+8];if(O>-I&&O<C){ge(e,z,!1);continue}}}var F=z/5;_.push(D.x,D.y,M,F),ge(e,z,!0);var U=D.x-M,N=D.y-M,Z=D.x+M,q=D.y+M;if(E=E&&this.isOffscreen(U,N,Z,q),w=w||this.isInsideGrid(U,N,Z,q),!i&&this.grid.hitTestCircle(D.x,D.y,M,d)){if(!u)return{circles:[],offscreen:!1};b=!0}}}return{circles:b||!w?[]:_,offscreen:E}},me.prototype.queryRenderedSymbols=function(e){if(0===e.length||0===this.grid.keysLength()&&0===this.ignoredGrid.keysLength())return{};for(var i=[],n=1/0,o=1/0,r=-1/0,a=-1/0,s=0,l=e;s<l.length;s+=1){var c=l[s],h=new t.Point(c.x+100,c.y+100);n=Math.min(n,h.x),o=Math.min(o,h.y),r=Math.max(r,h.x),a=Math.max(a,h.y),i.push(h)}for(var u={},p={},d=0,_=this.grid.query(n,o,r,a).concat(this.ignoredGrid.query(n,o,r,a));d<_.length;d+=1){var f=_[d],m=f.key;if(void 0===u[m.bucketInstanceId]&&(u[m.bucketInstanceId]={}),!u[m.bucketInstanceId][m.featureIndex]){var g=[new t.Point(f.x1,f.y1),new t.Point(f.x2,f.y1),new t.Point(f.x2,f.y2),new t.Point(f.x1,f.y2)];t.polygonIntersectsPolygon(i,g)&&(u[m.bucketInstanceId][m.featureIndex]=!0,void 0===p[m.bucketInstanceId]&&(p[m.bucketInstanceId]=[]),p[m.bucketInstanceId].push(m.featureIndex))}}return p},me.prototype.insertCollisionBox=function(t,e,i,n,o){var r={bucketInstanceId:i,featureIndex:n,collisionGroupID:o};(e?this.ignoredGrid:this.grid).insert(r,t[0],t[1],t[2],t[3])},me.prototype.insertCollisionCircles=function(t,e,i,n,o){for(var r=e?this.ignoredGrid:this.grid,a={bucketInstanceId:i,featureIndex:n,collisionGroupID:o},s=0;s<t.length;s+=4)r.insertCircle(a,t[s],t[s+1],t[s+2])},me.prototype.projectAnchor=function(t,e,i){var n=[e,i,0,1];return fe(n,n,t),{perspectiveRatio:.5+this.transform.cameraToCenterDistance/n[3]*.5,cameraDistance:n[3]}},me.prototype.projectPoint=function(e,i,n){var o=[i,n,0,1];return fe(o,o,e),new t.Point((o[0]/o[3]+1)/2*this.transform.width+100,(-o[1]/o[3]+1)/2*this.transform.height+100)},me.prototype.projectAndGetPerspectiveRatio=function(e,i,n){var o=[i,n,0,1];return fe(o,o,e),{point:new t.Point((o[0]/o[3]+1)/2*this.transform.width+100,(-o[1]/o[3]+1)/2*this.transform.height+100),perspectiveRatio:.5+this.transform.cameraToCenterDistance/o[3]*.5}},me.prototype.isOffscreen=function(t,e,i,n){return i<100||t>=this.screenRightBoundary||n<100||e>this.screenBottomBoundary},me.prototype.isInsideGrid=function(t,e,i,n){return i>=0&&t<this.gridRightBoundary&&n>=0&&e<this.gridBottomBoundary};var ye=function(t,e,i,n){this.opacity=t?Math.max(0,Math.min(1,t.opacity+(t.placed?e:-e))):n&&i?1:0,this.placed=i};ye.prototype.isHidden=function(){return 0===this.opacity&&!this.placed};var xe=function(t,e,i,n,o){this.text=new ye(t?t.text:null,e,i,o),this.icon=new ye(t?t.icon:null,e,n,o)};xe.prototype.isHidden=function(){return this.text.isHidden()&&this.icon.isHidden()};var be=function(t,e,i){this.text=t,this.icon=e,this.skipFade=i},we=function(t){this.crossSourceCollisions=t,this.maxGroupID=0,this.collisionGroups={}};we.prototype.get=function(t){if(this.crossSourceCollisions)return{ID:0,predicate:null};if(!this.collisionGroups[t]){var e=++this.maxGroupID;this.collisionGroups[t]={ID:e,predicate:function(t){return t.collisionGroupID===e}}}return this.collisionGroups[t]};var Ee=function(t,e,i){this.transform=t.clone(),this.collisionIndex=new me(this.transform),this.placements={},this.opacities={},this.stale=!1,this.fadeDuration=e,this.retainedQueryData={},this.collisionGroups=new we(i)};function Te(t,e,i){t.emplaceBack(e?1:0,i?1:0),t.emplaceBack(e?1:0,i?1:0),t.emplaceBack(e?1:0,i?1:0),t.emplaceBack(e?1:0,i?1:0)}Ee.prototype.placeLayerTile=function(e,i,n,o){var r=i.getBucket(e),a=i.latestFeatureIndex;if(r&&a&&e.id===r.layerIds[0]){var s=i.collisionBoxArray,l=r.layers[0].layout,c=Math.pow(2,this.transform.zoom-i.tileID.overscaledZ),h=i.tileSize/t.EXTENT,u=this.transform.calculatePosMatrix(i.tileID.toUnwrapped()),p=ne(u,"map"===l.get("text-pitch-alignment"),"map"===l.get("text-rotation-alignment"),this.transform,ve(i,1,this.transform.zoom)),d=ne(u,"map"===l.get("icon-pitch-alignment"),"map"===l.get("icon-rotation-alignment"),this.transform,ve(i,1,this.transform.zoom));this.retainedQueryData[r.bucketInstanceId]=new function(t,e,i,n,o){this.bucketInstanceId=t,this.featureIndex=e,this.sourceLayerIndex=i,this.bucketIndex=n,this.tileID=o}(r.bucketInstanceId,a,r.sourceLayerIndex,r.index,i.tileID),this.placeLayerBucket(r,u,p,d,c,h,n,i.holdingForFade(),o,s)}},Ee.prototype.placeLayerBucket=function(e,i,n,o,r,a,s,l,c,h){var u=e.layers[0].layout,p=t.evaluateSizeForZoom(e.textSizeData,this.transform.zoom,t.properties.layout.properties["text-size"]),d=u.get("text-optional"),_=u.get("icon-optional"),f=this.collisionGroups.get(e.sourceID);!e.collisionArrays&&h&&e.deserializeCollisionBoxes(h);for(var m=0;m<e.symbolInstances.length;m++){var g=e.symbolInstances.get(m);if(!c[g.crossTileID]){if(l){this.placements[g.crossTileID]=new be(!1,!1,!1);continue}var v=!1,y=!1,x=!0,b=null,w=null,E=null,T=0,S=0,I=e.collisionArrays[m];I.textFeatureIndex&&(T=I.textFeatureIndex),I.textBox&&(v=(b=this.collisionIndex.placeCollisionBox(I.textBox,u.get("text-allow-overlap"),a,i,f.predicate)).box.length>0,x=x&&b.offscreen);var C=I.textCircles;if(C){var z=e.text.placedSymbolArray.get(g.horizontalPlacedTextSymbolIndex),P=t.evaluateSizeForFeature(e.textSizeData,p,z);w=this.collisionIndex.placeCollisionCircles(C,u.get("text-allow-overlap"),r,a,z,e.lineVertexArray,e.glyphOffsetArray,P,i,n,s,"map"===u.get("text-pitch-alignment"),f.predicate),v=u.get("text-allow-overlap")||w.circles.length>0,x=x&&w.offscreen}I.iconFeatureIndex&&(S=I.iconFeatureIndex),I.iconBox&&(y=(E=this.collisionIndex.placeCollisionBox(I.iconBox,u.get("icon-allow-overlap"),a,i,f.predicate)).box.length>0,x=x&&E.offscreen);var R=d||0===g.numGlyphVertices&&0===g.numVerticalGlyphVertices,A=_||0===g.numIconVertices;R||A?A?R||(y=y&&v):v=y&&v:y=v=y&&v,v&&b&&this.collisionIndex.insertCollisionBox(b.box,u.get("text-ignore-placement"),e.bucketInstanceId,T,f.ID),y&&E&&this.collisionIndex.insertCollisionBox(E.box,u.get("icon-ignore-placement"),e.bucketInstanceId,S,f.ID),v&&w&&this.collisionIndex.insertCollisionCircles(w.circles,u.get("text-ignore-placement"),e.bucketInstanceId,T,f.ID),this.placements[g.crossTileID]=new be(v,y,x||e.justReloaded),c[g.crossTileID]=!0}}e.justReloaded=!1},Ee.prototype.commit=function(t,e){this.commitTime=e;var i=!1,n=t&&0!==this.fadeDuration?(this.commitTime-t.commitTime)/this.fadeDuration:1,o=t?t.opacities:{};for(var r in this.placements){var a=this.placements[r],s=o[r];s?(this.opacities[r]=new xe(s,n,a.text,a.icon),i=i||a.text!==s.text.placed||a.icon!==s.icon.placed):(this.opacities[r]=new xe(null,n,a.text,a.icon,a.skipFade),i=i||a.text||a.icon)}for(var l in o){var c=o[l];if(!this.opacities[l]){var h=new xe(c,n,!1,!1);h.isHidden()||(this.opacities[l]=h,i=i||c.text.placed||c.icon.placed)}}i?this.lastPlacementChangeTime=e:"number"!=typeof this.lastPlacementChangeTime&&(this.lastPlacementChangeTime=t?t.lastPlacementChangeTime:e)},Ee.prototype.updateLayerOpacities=function(t,e){for(var i={},n=0,o=e;n<o.length;n+=1){var r=o[n],a=r.getBucket(t);a&&r.latestFeatureIndex&&t.id===a.layerIds[0]&&this.updateBucketOpacities(a,i,r.collisionBoxArray)}},Ee.prototype.updateBucketOpacities=function(t,e,i){t.hasTextData()&&t.text.opacityVertexArray.clear(),t.hasIconData()&&t.icon.opacityVertexArray.clear(),t.hasCollisionBoxData()&&t.collisionBox.collisionVertexArray.clear(),t.hasCollisionCircleData()&&t.collisionCircle.collisionVertexArray.clear();var n=t.layers[0].layout,o=new xe(null,0,!1,!1,!0),r=n.get("text-allow-overlap"),a=n.get("icon-allow-overlap"),s=new xe(null,0,r&&(a||!t.hasIconData()||n.get("icon-optional")),a&&(r||!t.hasTextData()||n.get("text-optional")),!0);!t.collisionArrays&&i&&(t.hasCollisionBoxData()||t.hasCollisionCircleData())&&t.deserializeCollisionBoxes(i);for(var l=0;l<t.symbolInstances.length;l++){var c=t.symbolInstances.get(l),h=e[c.crossTileID],u=this.opacities[c.crossTileID];h?u=o:u||(u=s,this.opacities[c.crossTileID]=u),e[c.crossTileID]=!0;var p=c.numGlyphVertices>0||c.numVerticalGlyphVertices>0,d=c.numIconVertices>0;if(p){for(var _=Le(u.text),f=(c.numGlyphVertices+c.numVerticalGlyphVertices)/4,m=0;m<f;m++)t.text.opacityVertexArray.emplaceBack(_);t.text.placedSymbolArray.get(c.horizontalPlacedTextSymbolIndex).hidden=u.text.isHidden(),c.verticalPlacedTextSymbolIndex>=0&&(t.text.placedSymbolArray.get(c.verticalPlacedTextSymbolIndex).hidden=u.text.isHidden())}if(d){for(var g=Le(u.icon),v=0;v<c.numIconVertices/4;v++)t.icon.opacityVertexArray.emplaceBack(g);t.icon.placedSymbolArray.get(l).hidden=u.icon.isHidden()}if(t.hasCollisionBoxData()||t.hasCollisionCircleData()){var y=t.collisionArrays[l];if(y){y.textBox&&Te(t.collisionBox.collisionVertexArray,u.text.placed,!1),y.iconBox&&Te(t.collisionBox.collisionVertexArray,u.icon.placed,!1);var x=y.textCircles;if(x&&t.hasCollisionCircleData())for(var b=0;b<x.length;b+=5){var w=h||0===x[b+4];Te(t.collisionCircle.collisionVertexArray,u.text.placed,w)}}}}t.sortFeatures(this.transform.angle),this.retainedQueryData[t.bucketInstanceId]&&(this.retainedQueryData[t.bucketInstanceId].featureSortOrder=t.featureSortOrder),t.hasTextData()&&t.text.opacityVertexBuffer&&t.text.opacityVertexBuffer.updateData(t.text.opacityVertexArray),t.hasIconData()&&t.icon.opacityVertexBuffer&&t.icon.opacityVertexBuffer.updateData(t.icon.opacityVertexArray),t.hasCollisionBoxData()&&t.collisionBox.collisionVertexBuffer&&t.collisionBox.collisionVertexBuffer.updateData(t.collisionBox.collisionVertexArray),t.hasCollisionCircleData()&&t.collisionCircle.collisionVertexBuffer&&t.collisionCircle.collisionVertexBuffer.updateData(t.collisionCircle.collisionVertexArray)},Ee.prototype.symbolFadeChange=function(t){return 0===this.fadeDuration?1:(t-this.commitTime)/this.fadeDuration},Ee.prototype.hasTransitions=function(t){return this.stale||t-this.lastPlacementChangeTime<this.fadeDuration},Ee.prototype.stillRecent=function(t){return"undefined"!==this.commitTime&&this.commitTime+this.fadeDuration>t},Ee.prototype.setStale=function(){this.stale=!0};var Se=Math.pow(2,25),Ie=Math.pow(2,24),Ce=Math.pow(2,17),ze=Math.pow(2,16),Pe=Math.pow(2,9),Re=Math.pow(2,8),Ae=Math.pow(2,1);function Le(t){if(0===t.opacity&&!t.placed)return 0;if(1===t.opacity&&t.placed)return 4294967295;var e=t.placed?1:0,i=Math.floor(127*t.opacity);return i*Se+e*Ie+i*Ce+e*ze+i*Pe+e*Re+i*Ae+e}var De=function(){this._currentTileIndex=0,this._seenCrossTileIDs={}};De.prototype.continuePlacement=function(t,e,i,n,o){for(;this._currentTileIndex<t.length;){var r=t[this._currentTileIndex];if(e.placeLayerTile(n,r,i,this._seenCrossTileIDs),this._currentTileIndex++,o())return!0}};var Me=function(t,e,i,n,o,r){this.placement=new Ee(t,o,r),this._currentPlacementIndex=e.length-1,this._forceFullPlacement=i,this._showCollisionBoxes=n,this._done=!1};Me.prototype.isDone=function(){return this._done},Me.prototype.continuePlacement=function(e,i,n){for(var o=this,r=t.browser.now(),a=function(){var e=t.browser.now()-r;return!o._forceFullPlacement&&e>2};this._currentPlacementIndex>=0;){var s=i[e[o._currentPlacementIndex]],l=o.placement.collisionIndex.transform.zoom;if("symbol"===s.type&&(!s.minzoom||s.minzoom<=l)&&(!s.maxzoom||s.maxzoom>l)){if(o._inProgressLayer||(o._inProgressLayer=new De),o._inProgressLayer.continuePlacement(n[s.source],o.placement,o._showCollisionBoxes,s,a))return;delete o._inProgressLayer}o._currentPlacementIndex--}this._done=!0},Me.prototype.commit=function(t,e){return this.placement.commit(t,e),this.placement};var ke=512/t.EXTENT/2,Be=function(t,e,i){this.tileID=t,this.indexedSymbolInstances={},this.bucketInstanceId=i;for(var n=0;n<e.length;n++){var o=e.get(n),r=o.key;this.indexedSymbolInstances[r]||(this.indexedSymbolInstances[r]=[]),this.indexedSymbolInstances[r].push({crossTileID:o.crossTileID,coord:this.getScaledCoordinates(o,t)})}};Be.prototype.getScaledCoordinates=function(e,i){var n=i.canonical.z-this.tileID.canonical.z,o=ke/Math.pow(2,n);return{x:Math.floor((i.canonical.x*t.EXTENT+e.anchorX)*o),y:Math.floor((i.canonical.y*t.EXTENT+e.anchorY)*o)}},Be.prototype.findMatches=function(t,e,i){for(var n=this.tileID.canonical.z<e.canonical.z?1:Math.pow(2,this.tileID.canonical.z-e.canonical.z),o=0;o<t.length;o++){var r=t.get(o);if(!r.crossTileID){var a=this.indexedSymbolInstances[r.key];if(a)for(var s=this.getScaledCoordinates(r,e),l=0,c=a;l<c.length;l+=1){var h=c[l];if(Math.abs(h.coord.x-s.x)<=n&&Math.abs(h.coord.y-s.y)<=n&&!i[h.crossTileID]){i[h.crossTileID]=!0,r.crossTileID=h.crossTileID;break}}}}};var Oe=function(){this.maxCrossTileID=0};Oe.prototype.generate=function(){return++this.maxCrossTileID};var Fe=function(){this.indexes={},this.usedCrossTileIDs={},this.lng=0};Fe.prototype.handleWrapJump=function(t){var e=Math.round((t-this.lng)/360);if(0!==e)for(var i in this.indexes){var n=this.indexes[i],o={};for(var r in n){var a=n[r];a.tileID=a.tileID.unwrapTo(a.tileID.wrap+e),o[a.tileID.key]=a}this.indexes[i]=o}this.lng=t},Fe.prototype.addBucket=function(t,e,i){if(this.indexes[t.overscaledZ]&&this.indexes[t.overscaledZ][t.key]){if(this.indexes[t.overscaledZ][t.key].bucketInstanceId===e.bucketInstanceId)return!1;this.removeBucketCrossTileIDs(t.overscaledZ,this.indexes[t.overscaledZ][t.key])}for(var n=0;n<e.symbolInstances.length;n++){e.symbolInstances.get(n).crossTileID=0}this.usedCrossTileIDs[t.overscaledZ]||(this.usedCrossTileIDs[t.overscaledZ]={});var o=this.usedCrossTileIDs[t.overscaledZ];for(var r in this.indexes){var a=this.indexes[r];if(Number(r)>t.overscaledZ)for(var s in a){var l=a[s];l.tileID.isChildOf(t)&&l.findMatches(e.symbolInstances,t,o)}else{var c=a[t.scaledTo(Number(r)).key];c&&c.findMatches(e.symbolInstances,t,o)}}for(var h=0;h<e.symbolInstances.length;h++){var u=e.symbolInstances.get(h);u.crossTileID||(u.crossTileID=i.generate(),o[u.crossTileID]=!0)}return void 0===this.indexes[t.overscaledZ]&&(this.indexes[t.overscaledZ]={}),this.indexes[t.overscaledZ][t.key]=new Be(t,e.symbolInstances,e.bucketInstanceId),!0},Fe.prototype.removeBucketCrossTileIDs=function(t,e){for(var i in e.indexedSymbolInstances)for(var n=0,o=e.indexedSymbolInstances[i];n<o.length;n+=1){var r=o[n];delete this.usedCrossTileIDs[t][r.crossTileID]}},Fe.prototype.removeStaleBuckets=function(t){var e=!1;for(var i in this.indexes){var n=this.indexes[i];for(var o in n)t[n[o].bucketInstanceId]||(this.removeBucketCrossTileIDs(i,n[o]),delete n[o],e=!0)}return e};var Ue=function(){this.layerIndexes={},this.crossTileIDs=new Oe,this.maxBucketInstanceId=0,this.bucketsInCurrentPlacement={}};Ue.prototype.addLayer=function(t,e,i){var n=this.layerIndexes[t.id];void 0===n&&(n=this.layerIndexes[t.id]=new Fe);var o=!1,r={};n.handleWrapJump(i);for(var a=0,s=e;a<s.length;a+=1){var l=s[a],c=l.getBucket(t);c&&t.id===c.layerIds[0]&&(c.bucketInstanceId||(c.bucketInstanceId=++this.maxBucketInstanceId),n.addBucket(l.tileID,c,this.crossTileIDs)&&(o=!0),r[c.bucketInstanceId]=!0)}return n.removeStaleBuckets(r)&&(o=!0),o},Ue.prototype.pruneUnusedLayers=function(t){var e={};for(var i in t.forEach(function(t){e[t]=!0}),this.layerIndexes)e[i]||delete this.layerIndexes[i]};var Ne=function(e,i){return t.emitValidationErrors(e,i&&i.filter(function(t){return"source.canvas"!==t.identifier}))},Ze=t.pick(Wt,["addLayer","removeLayer","setPaintProperty","setLayoutProperty","setFilter","addSource","removeSource","setLayerZoomRange","setLight","setTransition","setGeoJSONSourceData"]),qe=t.pick(Wt,["setCenter","setZoom","setBearing","setPitch"]),Ve=function(e){function i(n,o){var r=this;void 0===o&&(o={}),e.call(this),this.map=n,this.dispatcher=new O((qt||(qt=new Vt),qt),this),this.imageManager=new I,this.glyphManager=new L(n._transformRequest,o.localIdeographFontFamily),this.lineAtlas=new B(256,512),this.crossTileSymbolIndex=new Ue,this._layers={},this._order=[],this.sourceCaches={},this.zoomHistory=new t.ZoomHistory,this._loaded=!1,this._resetUpdates();var a=this;this._rtlTextPluginCallback=i.registerForPluginAvailability(function(t){for(var e in a.dispatcher.broadcast("loadRTLTextPlugin",t.pluginURL,t.completionCallback),a.sourceCaches)a.sourceCaches[e].reload()}),this.on("data",function(t){if("source"===t.dataType&&"metadata"===t.sourceDataType){var e=r.sourceCaches[t.sourceId];if(e){var i=e.getSource();if(i&&i.vectorLayerIds)for(var n in r._layers){var o=r._layers[n];o.source===i.id&&r._validateLayer(o)}}}})}return e&&(i.__proto__=e),i.prototype=Object.create(e&&e.prototype),i.prototype.constructor=i,i.prototype.loadURL=function(e,i){var n=this;void 0===i&&(i={}),this.fire(new t.Event("dataloading",{dataType:"style"}));var o="boolean"==typeof i.validate?i.validate:!_(e);e=function(t,e){if(!_(t))return t;var i=b(t);return i.path="/styles/v1"+i.path,d(i,e)}(e,i.accessToken);var r=this.map._transformRequest(e,t.ResourceType.Style);this._request=t.getJSON(r,function(e,i){n._request=null,e?n.fire(new t.ErrorEvent(e)):i&&n._load(i,o)})},i.prototype.loadJSON=function(e,i){var n=this;void 0===i&&(i={}),this.fire(new t.Event("dataloading",{dataType:"style"})),this._request=t.browser.frame(function(){n._request=null,n._load(e,!1!==i.validate)})},i.prototype._load=function(e,i){var n=this;if(!i||!Ne(this,t.validateStyle(e))){for(var o in this._loaded=!0,this.stylesheet=e,e.sources)n.addSource(o,e.sources[o],{validate:!1});e.sprite?this._spriteRequest=function(e,i,n){var o,r,a,s=t.browser.devicePixelRatio>1?"@2x":"",l=t.getJSON(i(g(e,s,".json"),t.ResourceType.SpriteJSON),function(t,e){l=null,a||(a=t,o=e,h())}),c=t.getImage(i(g(e,s,".png"),t.ResourceType.SpriteImage),function(t,e){c=null,a||(a=t,r=e,h())});function h(){if(a)n(a);else if(o&&r){var e=t.browser.getImageData(r),i={};for(var s in o){var l=o[s],c=l.width,h=l.height,u=l.x,p=l.y,d=l.sdf,_=l.pixelRatio,f=new t.RGBAImage({width:c,height:h});t.RGBAImage.copy(e,f,{x:u,y:p},{x:0,y:0},{width:c,height:h}),i[s]={data:f,pixelRatio:_,sdf:d}}n(null,i)}}return{cancel:function(){l&&(l.cancel(),l=null),c&&(c.cancel(),c=null)}}}(e.sprite,this.map._transformRequest,function(e,i){if(n._spriteRequest=null,e)n.fire(new t.ErrorEvent(e));else if(i)for(var o in i)n.imageManager.addImage(o,i[o]);n.imageManager.setLoaded(!0),n.fire(new t.Event("data",{dataType:"style"}))}):this.imageManager.setLoaded(!0),this.glyphManager.setURL(e.glyphs);var r=Gt(this.stylesheet.layers);this._order=r.map(function(t){return t.id}),this._layers={};for(var a=0,s=r;a<s.length;a+=1){var l=s[a];(l=t.createStyleLayer(l)).setEventedParent(n,{layer:{id:l.id}}),n._layers[l.id]=l}this.dispatcher.broadcast("setLayers",this._serializeLayers(this._order)),this.light=new k(this.stylesheet.light),this.fire(new t.Event("data",{dataType:"style"})),this.fire(new t.Event("style.load"))}},i.prototype._validateLayer=function(e){var i=this.sourceCaches[e.source];if(i){var n=e.sourceLayer;if(n){var o=i.getSource();("geojson"===o.type||o.vectorLayerIds&&-1===o.vectorLayerIds.indexOf(n))&&this.fire(new t.ErrorEvent(new Error('Source layer "'+n+'" does not exist on source "'+o.id+'" as specified by style layer "'+e.id+'"')))}}},i.prototype.loaded=function(){if(!this._loaded)return!1;if(Object.keys(this._updatedSources).length)return!1;for(var t in this.sourceCaches)if(!this.sourceCaches[t].loaded())return!1;return!!this.imageManager.isLoaded()},i.prototype._serializeLayers=function(t){var e=this;return t.map(function(t){return e._layers[t].serialize()})},i.prototype.hasTransitions=function(){if(this.light&&this.light.hasTransition())return!0;for(var t in this.sourceCaches)if(this.sourceCaches[t].hasTransition())return!0;for(var e in this._layers)if(this._layers[e].hasTransition())return!0;return!1},i.prototype._checkLoaded=function(){if(!this._loaded)throw new Error("Style is not done loading")},i.prototype.update=function(e){if(this._loaded){if(this._changed){var i=Object.keys(this._updatedLayers),n=Object.keys(this._removedLayers);for(var o in(i.length||n.length)&&this._updateWorkerLayers(i,n),this._updatedSources){var r=this._updatedSources[o];"reload"===r?this._reloadSource(o):"clear"===r&&this._clearSource(o)}for(var a in this._updatedPaintProps)this._layers[a].updateTransitions(e);this.light.updateTransitions(e),this._resetUpdates(),this.fire(new t.Event("data",{dataType:"style"}))}for(var s in this.sourceCaches)this.sourceCaches[s].used=!1;for(var l=0,c=this._order;l<c.length;l+=1){var h=c[l],u=this._layers[h];u.recalculate(e),!u.isHidden(e.zoom)&&u.source&&(this.sourceCaches[u.source].used=!0)}this.light.recalculate(e),this.z=e.zoom}},i.prototype._updateWorkerLayers=function(t,e){this.dispatcher.broadcast("updateLayers",{layers:this._serializeLayers(t),removedIds:e})},i.prototype._resetUpdates=function(){this._changed=!1,this._updatedLayers={},this._removedLayers={},this._updatedSources={},this._updatedPaintProps={}},i.prototype.setState=function(e){var i=this;if(this._checkLoaded(),Ne(this,t.validateStyle(e)))return!1;(e=t.clone(e)).layers=Gt(e.layers);var n=te(this.serialize(),e).filter(function(t){return!(t.command in qe)});if(0===n.length)return!1;var o=n.filter(function(t){return!(t.command in Ze)});if(o.length>0)throw new Error("Unimplemented: "+o.map(function(t){return t.command}).join(", ")+".");return n.forEach(function(t){"setTransition"!==t.command&&i[t.command].apply(i,t.args)}),this.stylesheet=e,!0},i.prototype.addImage=function(e,i){if(this.getImage(e))return this.fire(new t.ErrorEvent(new Error("An image with this name already exists.")));this.imageManager.addImage(e,i),this.fire(new t.Event("data",{dataType:"style"}))},i.prototype.getImage=function(t){return this.imageManager.getImage(t)},i.prototype.removeImage=function(e){if(!this.getImage(e))return this.fire(new t.ErrorEvent(new Error("No image with this name exists.")));this.imageManager.removeImage(e),this.fire(new t.Event("data",{dataType:"style"}))},i.prototype.listImages=function(){return this._checkLoaded(),this.imageManager.listImages()},i.prototype.addSource=function(e,i,n){var o=this;if(this._checkLoaded(),void 0!==this.sourceCaches[e])throw new Error("There is already a source with this ID");if(!i.type)throw new Error("The type property must be defined, but the only the following properties were given: "+Object.keys(i).join(", ")+".");if(!(["vector","raster","geojson","video","image"].indexOf(i.type)>=0)||!this._validate(t.validateStyle.source,"sources."+e,i,null,n)){this.map&&this.map._collectResourceTiming&&(i.collectResourceTiming=!0);var r=this.sourceCaches[e]=new Ot(e,i,this.dispatcher);r.style=this,r.setEventedParent(this,function(){return{isSourceLoaded:o.loaded(),source:r.serialize(),sourceId:e}}),r.onAdd(this.map),this._changed=!0}},i.prototype.removeSource=function(e){if(this._checkLoaded(),void 0===this.sourceCaches[e])throw new Error("There is no source with this ID");for(var i in this._layers)if(this._layers[i].source===e)return this.fire(new t.ErrorEvent(new Error('Source "'+e+'" cannot be removed while layer "'+i+'" is using it.')));var n=this.sourceCaches[e];delete this.sourceCaches[e],delete this._updatedSources[e],n.fire(new t.Event("data",{sourceDataType:"metadata",dataType:"source",sourceId:e})),n.setEventedParent(null),n.clearTiles(),n.onRemove&&n.onRemove(this.map),this._changed=!0},i.prototype.setGeoJSONSourceData=function(t,e){this._checkLoaded(),this.sourceCaches[t].getSource().setData(e),this._changed=!0},i.prototype.getSource=function(t){return this.sourceCaches[t]&&this.sourceCaches[t].getSource()},i.prototype.addLayer=function(e,i,n){this._checkLoaded();var o=e.id;if(this.getLayer(o))this.fire(new t.ErrorEvent(new Error('Layer with id "'+o+'" already exists on this map')));else if("object"==typeof e.source&&(this.addSource(o,e.source),e=t.clone(e),e=t.extend(e,{source:o})),!this._validate(t.validateStyle.layer,"layers."+o,e,{arrayIndex:-1},n)){var r=t.createStyleLayer(e);this._validateLayer(r),r.setEventedParent(this,{layer:{id:o}});var a=i?this._order.indexOf(i):this._order.length;if(i&&-1===a)this.fire(new t.ErrorEvent(new Error('Layer with id "'+i+'" does not exist on this map.')));else{if(this._order.splice(a,0,o),this._layerOrderChanged=!0,this._layers[o]=r,this._removedLayers[o]&&r.source){var s=this._removedLayers[o];delete this._removedLayers[o],s.type!==r.type?this._updatedSources[r.source]="clear":(this._updatedSources[r.source]="reload",this.sourceCaches[r.source].pause())}this._updateLayer(r)}}},i.prototype.moveLayer=function(e,i){if(this._checkLoaded(),this._changed=!0,this._layers[e]){if(e!==i){var n=this._order.indexOf(e);this._order.splice(n,1);var o=i?this._order.indexOf(i):this._order.length;i&&-1===o?this.fire(new t.ErrorEvent(new Error('Layer with id "'+i+'" does not exist on this map.'))):(this._order.splice(o,0,e),this._layerOrderChanged=!0)}}else this.fire(new t.ErrorEvent(new Error("The layer '"+e+"' does not exist in the map's style and cannot be moved.")))},i.prototype.removeLayer=function(e){this._checkLoaded();var i=this._layers[e];if(i){i.setEventedParent(null);var n=this._order.indexOf(e);this._order.splice(n,1),this._layerOrderChanged=!0,this._changed=!0,this._removedLayers[e]=i,delete this._layers[e],delete this._updatedLayers[e],delete this._updatedPaintProps[e]}else this.fire(new t.ErrorEvent(new Error("The layer '"+e+"' does not exist in the map's style and cannot be removed.")))},i.prototype.getLayer=function(t){return this._layers[t]},i.prototype.setLayerZoomRange=function(e,i,n){this._checkLoaded();var o=this.getLayer(e);o?o.minzoom===i&&o.maxzoom===n||(null!=i&&(o.minzoom=i),null!=n&&(o.maxzoom=n),this._updateLayer(o)):this.fire(new t.ErrorEvent(new Error("The layer '"+e+"' does not exist in the map's style and cannot have zoom extent.")))},i.prototype.setFilter=function(e,i){this._checkLoaded();var n=this.getLayer(e);if(n){if(!t.isEqual(n.filter,i))return null==i?(n.filter=void 0,void this._updateLayer(n)):void(this._validate(t.validateStyle.filter,"layers."+n.id+".filter",i)||(n.filter=t.clone(i),this._updateLayer(n)))}else this.fire(new t.ErrorEvent(new Error("The layer '"+e+"' does not exist in the map's style and cannot be filtered.")))},i.prototype.getFilter=function(e){return t.clone(this.getLayer(e).filter)},i.prototype.setLayoutProperty=function(e,i,n){this._checkLoaded();var o=this.getLayer(e);o?t.isEqual(o.getLayoutProperty(i),n)||(o.setLayoutProperty(i,n),this._updateLayer(o)):this.fire(new t.ErrorEvent(new Error("The layer '"+e+"' does not exist in the map's style and cannot be styled.")))},i.prototype.getLayoutProperty=function(t,e){return this.getLayer(t).getLayoutProperty(e)},i.prototype.setPaintProperty=function(e,i,n){this._checkLoaded();var o=this.getLayer(e);o?t.isEqual(o.getPaintProperty(i),n)||(o.setPaintProperty(i,n)&&this._updateLayer(o),this._changed=!0,this._updatedPaintProps[e]=!0):this.fire(new t.ErrorEvent(new Error("The layer '"+e+"' does not exist in the map's style and cannot be styled.")))},i.prototype.getPaintProperty=function(t,e){return this.getLayer(t).getPaintProperty(e)},i.prototype.setFeatureState=function(e,i){this._checkLoaded();var n=e.source,o=e.sourceLayer,r=this.sourceCaches[n],a=parseInt(e.id,10);void 0!==r?"vector"!==r.getSource().type||o?isNaN(a)||a<0?this.fire(new t.ErrorEvent(new Error("The feature id parameter must be provided and non-negative."))):r.setFeatureState(o,a,i):this.fire(new t.ErrorEvent(new Error("The sourceLayer parameter must be provided for vector source types."))):this.fire(new t.ErrorEvent(new Error("The source '"+n+"' does not exist in the map's style.")))},i.prototype.getFeatureState=function(e){this._checkLoaded();var i=e.source,n=e.sourceLayer,o=this.sourceCaches[i],r=parseInt(e.id,10);if(void 0!==o)if("vector"!==o.getSource().type||n){if(!(isNaN(r)||r<0))return o.getFeatureState(n,r);this.fire(new t.ErrorEvent(new Error("The feature id parameter must be provided and non-negative.")))}else this.fire(new t.ErrorEvent(new Error("The sourceLayer parameter must be provided for vector source types.")));else this.fire(new t.ErrorEvent(new Error("The source '"+i+"' does not exist in the map's style.")))},i.prototype.getTransition=function(){return t.extend({duration:300,delay:0},this.stylesheet&&this.stylesheet.transition)},i.prototype.serialize=function(){var e=this;return t.filterObject({version:this.stylesheet.version,name:this.stylesheet.name,metadata:this.stylesheet.metadata,light:this.stylesheet.light,center:this.stylesheet.center,zoom:this.stylesheet.zoom,bearing:this.stylesheet.bearing,pitch:this.stylesheet.pitch,sprite:this.stylesheet.sprite,glyphs:this.stylesheet.glyphs,transition:this.stylesheet.transition,sources:t.mapObject(this.sourceCaches,function(t){return t.serialize()}),layers:this._order.map(function(t){return e._layers[t].serialize()})},function(t){return void 0!==t})},i.prototype._updateLayer=function(t){this._updatedLayers[t.id]=!0,t.source&&!this._updatedSources[t.source]&&(this._updatedSources[t.source]="reload",this.sourceCaches[t.source].pause()),this._changed=!0},i.prototype._flattenRenderedFeatures=function(t){for(var e=[],i=this._order.length-1;i>=0;i--)for(var n=this._order[i],o=0,r=t;o<r.length;o+=1){var a=r[o][n];if(a)for(var s=0,l=a;s<l.length;s+=1){var c=l[s];e.push(c)}}return e},i.prototype.queryRenderedFeatures=function(e,i,n){i&&i.filter&&this._validate(t.validateStyle.filter,"queryRenderedFeatures.filter",i.filter);var o={};if(i&&i.layers){if(!Array.isArray(i.layers))return this.fire(new t.ErrorEvent(new Error("parameters.layers must be an Array."))),[];for(var r=0,a=i.layers;r<a.length;r+=1){var s=a[r],l=this._layers[s];if(!l)return this.fire(new t.ErrorEvent(new Error("The layer '"+s+"' does not exist in the map's style and cannot be queried for features."))),[];o[l.source]=!0}}var c=[],h=e.map(function(t){return n.pointCoordinate(t)});for(var u in this.sourceCaches)i.layers&&!o[u]||c.push(J(this.sourceCaches[u],this._layers,h,i,n));return this.placement&&c.push(function(t,e,i,n,o,r){for(var a={},s=o.queryRenderedSymbols(i),l=[],c=0,h=Object.keys(s).map(Number);c<h.length;c+=1){var u=h[c];l.push(r[u])}l.sort(Q);for(var p=function(){var e=_[d],i=e.featureIndex.lookupSymbolFeatures(s[e.bucketInstanceId],e.bucketIndex,e.sourceLayerIndex,n.filter,n.layers,t);for(var o in i){var r=a[o]=a[o]||[],l=i[o];l.sort(function(t,i){var n=e.featureSortOrder;if(n){var o=n.indexOf(t.featureIndex);return n.indexOf(i.featureIndex)-o}return i.featureIndex-t.featureIndex});for(var c=0,h=l;c<h.length;c+=1){var u=h[c];r.push(u.feature)}}},d=0,_=l;d<_.length;d+=1)p();var f=function(i){a[i].forEach(function(n){var o=t[i],r=e[o.source].getFeatureState(n.layer["source-layer"],n.id);n.source=n.layer.source,n.layer["source-layer"]&&(n.sourceLayer=n.layer["source-layer"]),n.state=r})};for(var m in a)f(m);return a}(this._layers,this.sourceCaches,e,i,this.placement.collisionIndex,this.placement.retainedQueryData)),this._flattenRenderedFeatures(c)},i.prototype.querySourceFeatures=function(e,i){i&&i.filter&&this._validate(t.validateStyle.filter,"querySourceFeatures.filter",i.filter);var n=this.sourceCaches[e];return n?function(t,e){for(var i=t.getRenderableIds().map(function(e){return t.getTileByID(e)}),n=[],o={},r=0;r<i.length;r++){var a=i[r],s=a.tileID.canonical.key;o[s]||(o[s]=!0,a.querySourceFeatures(n,e))}return n}(n,i):[]},i.prototype.addSourceType=function(t,e,n){return i.getSourceType(t)?n(new Error('A source type called "'+t+'" already exists.')):(i.setSourceType(t,e),e.workerSourceURL?void this.dispatcher.broadcast("loadWorkerSource",{name:t,url:e.workerSourceURL},n):n(null,null))},i.prototype.getLight=function(){return this.light.getLight()},i.prototype.setLight=function(e){this._checkLoaded();var i=this.light.getLight(),n=!1;for(var o in e)if(!t.isEqual(e[o],i[o])){n=!0;break}if(n){var r={now:t.browser.now(),transition:t.extend({duration:300,delay:0},this.stylesheet.transition)};this.light.setLight(e),this.light.updateTransitions(r)}},i.prototype._validate=function(e,i,n,o,r){return(!r||!1!==r.validate)&&Ne(this,e.call(t.validateStyle,t.extend({key:i,style:this.serialize(),value:n,styleSpec:t.styleSpec},o)))},i.prototype._remove=function(){for(var e in this._request&&(this._request.cancel(),this._request=null),this._spriteRequest&&(this._spriteRequest.cancel(),this._spriteRequest=null),t.evented.off("pluginAvailable",this._rtlTextPluginCallback),this.sourceCaches)this.sourceCaches[e].clearTiles();this.dispatcher.remove()},i.prototype._clearSource=function(t){this.sourceCaches[t].clearTiles()},i.prototype._reloadSource=function(t){this.sourceCaches[t].resume(),this.sourceCaches[t].reload()},i.prototype._updateSources=function(t){for(var e in this.sourceCaches)this.sourceCaches[e].update(t)},i.prototype._generateCollisionBoxes=function(){for(var t in this.sourceCaches)this._reloadSource(t)},i.prototype._updatePlacement=function(e,i,n,o){for(var r=!1,a=!1,s={},l=0,c=this._order;l<c.length;l+=1){var h=c[l],u=this._layers[h];if("symbol"===u.type){if(!s[u.source]){var p=this.sourceCaches[u.source];s[u.source]=p.getRenderableIds(!0).map(function(t){return p.getTileByID(t)}).sort(function(t,e){return e.tileID.overscaledZ-t.tileID.overscaledZ||(t.tileID.isLessThan(e.tileID)?-1:1)})}var d=this.crossTileSymbolIndex.addLayer(u,s[u.source],e.center.lng);r=r||d}}this.crossTileSymbolIndex.pruneUnusedLayers(this._order);var _=this._layerOrderChanged;if((_||!this.pauseablePlacement||this.pauseablePlacement.isDone()&&!this.placement.stillRecent(t.browser.now()))&&(this.pauseablePlacement=new Me(e,this._order,_,i,n,o),this._layerOrderChanged=!1),this.pauseablePlacement.isDone()?this.placement.setStale():(this.pauseablePlacement.continuePlacement(this._order,this._layers,s),this.pauseablePlacement.isDone()&&(this.placement=this.pauseablePlacement.commit(this.placement,t.browser.now()),a=!0),r&&this.pauseablePlacement.placement.setStale()),a||r)for(var f=0,m=this._order;f<m.length;f+=1){var g=m[f],v=this._layers[g];"symbol"===v.type&&this.placement.updateLayerOpacities(v,s[v.source])}return!this.pauseablePlacement.isDone()||this.placement.hasTransitions(t.browser.now())},i.prototype._releaseSymbolFadeTiles=function(){for(var t in this.sourceCaches)this.sourceCaches[t].releaseSymbolFadeTiles()},i.prototype.getImages=function(t,e,i){this.imageManager.getImages(e.icons,i)},i.prototype.getGlyphs=function(t,e,i){this.glyphManager.getGlyphs(e.stacks,i)},i}(t.Evented);Ve.getSourceType=function(t){return K[t]},Ve.setSourceType=function(t,e){K[t]=e},Ve.registerForPluginAvailability=t.registerForPluginAvailability;var je=t.createLayout([{name:"a_pos",type:"Int16",components:2}]),Ge={prelude:{fragmentSource:"#ifdef GL_ES\nprecision mediump float;\n#else\n\n#if !defined(lowp)\n#define lowp\n#endif\n\n#if !defined(mediump)\n#define mediump\n#endif\n\n#if !defined(highp)\n#define highp\n#endif\n\n#endif\n",vertexSource:"#ifdef GL_ES\nprecision highp float;\n#else\n\n#if !defined(lowp)\n#define lowp\n#endif\n\n#if !defined(mediump)\n#define mediump\n#endif\n\n#if !defined(highp)\n#define highp\n#endif\n\n#endif\n\n// Unpack a pair of values that have been packed into a single float.\n// The packed values are assumed to be 8-bit unsigned integers, and are\n// packed like so:\n// packedValue = floor(input[0]) * 256 + input[1],\nvec2 unpack_float(const float packedValue) {\n    int packedIntValue = int(packedValue);\n    int v0 = packedIntValue / 256;\n    return vec2(v0, packedIntValue - v0 * 256);\n}\n\nvec2 unpack_opacity(const float packedOpacity) {\n    int intOpacity = int(packedOpacity) / 2;\n    return vec2(float(intOpacity) / 127.0, mod(packedOpacity, 2.0));\n}\n\n// To minimize the number of attributes needed, we encode a 4-component\n// color into a pair of floats (i.e. a vec2) as follows:\n// [ floor(color.r * 255) * 256 + color.g * 255,\n//   floor(color.b * 255) * 256 + color.g * 255 ]\nvec4 decode_color(const vec2 encodedColor) {\n    return vec4(\n        unpack_float(encodedColor[0]) / 255.0,\n        unpack_float(encodedColor[1]) / 255.0\n    );\n}\n\n// Unpack a pair of paint values and interpolate between them.\nfloat unpack_mix_vec2(const vec2 packedValue, const float t) {\n    return mix(packedValue[0], packedValue[1], t);\n}\n\n// Unpack a pair of paint values and interpolate between them.\nvec4 unpack_mix_color(const vec4 packedColors, const float t) {\n    vec4 minColor = decode_color(vec2(packedColors[0], packedColors[1]));\n    vec4 maxColor = decode_color(vec2(packedColors[2], packedColors[3]));\n    return mix(minColor, maxColor, t);\n}\n\n// The offset depends on how many pixels are between the world origin and the edge of the tile:\n// vec2 offset = mod(pixel_coord, size)\n//\n// At high zoom levels there are a ton of pixels between the world origin and the edge of the tile.\n// The glsl spec only guarantees 16 bits of precision for highp floats. We need more than that.\n//\n// The pixel_coord is passed in as two 16 bit values:\n// pixel_coord_upper = floor(pixel_coord / 2^16)\n// pixel_coord_lower = mod(pixel_coord, 2^16)\n//\n// The offset is calculated in a series of steps that should preserve this precision:\nvec2 get_pattern_pos(const vec2 pixel_coord_upper, const vec2 pixel_coord_lower,\n    const vec2 pattern_size, const float tile_units_to_pixels, const vec2 pos) {\n\n    vec2 offset = mod(mod(mod(pixel_coord_upper, pattern_size) * 256.0, pattern_size) * 256.0 + pixel_coord_lower, pattern_size);\n    return (tile_units_to_pixels * pos + offset) / pattern_size;\n}\n"},background:{fragmentSource:"uniform vec4 u_color;\nuniform float u_opacity;\n\nvoid main() {\n    gl_FragColor = u_color * u_opacity;\n\n#ifdef OVERDRAW_INSPECTOR\n    gl_FragColor = vec4(1.0);\n#endif\n}\n",vertexSource:"attribute vec2 a_pos;\n\nuniform mat4 u_matrix;\n\nvoid main() {\n    gl_Position = u_matrix * vec4(a_pos, 0, 1);\n}\n"},backgroundPattern:{fragmentSource:"uniform vec2 u_pattern_tl_a;\nuniform vec2 u_pattern_br_a;\nuniform vec2 u_pattern_tl_b;\nuniform vec2 u_pattern_br_b;\nuniform vec2 u_texsize;\nuniform float u_mix;\nuniform float u_opacity;\n\nuniform sampler2D u_image;\n\nvarying vec2 v_pos_a;\nvarying vec2 v_pos_b;\n\nvoid main() {\n    vec2 imagecoord = mod(v_pos_a, 1.0);\n    vec2 pos = mix(u_pattern_tl_a / u_texsize, u_pattern_br_a / u_texsize, imagecoord);\n    vec4 color1 = texture2D(u_image, pos);\n\n    vec2 imagecoord_b = mod(v_pos_b, 1.0);\n    vec2 pos2 = mix(u_pattern_tl_b / u_texsize, u_pattern_br_b / u_texsize, imagecoord_b);\n    vec4 color2 = texture2D(u_image, pos2);\n\n    gl_FragColor = mix(color1, color2, u_mix) * u_opacity;\n\n#ifdef OVERDRAW_INSPECTOR\n    gl_FragColor = vec4(1.0);\n#endif\n}\n",vertexSource:"uniform mat4 u_matrix;\nuniform vec2 u_pattern_size_a;\nuniform vec2 u_pattern_size_b;\nuniform vec2 u_pixel_coord_upper;\nuniform vec2 u_pixel_coord_lower;\nuniform float u_scale_a;\nuniform float u_scale_b;\nuniform float u_tile_units_to_pixels;\n\nattribute vec2 a_pos;\n\nvarying vec2 v_pos_a;\nvarying vec2 v_pos_b;\n\nvoid main() {\n    gl_Position = u_matrix * vec4(a_pos, 0, 1);\n\n    v_pos_a = get_pattern_pos(u_pixel_coord_upper, u_pixel_coord_lower, u_scale_a * u_pattern_size_a, u_tile_units_to_pixels, a_pos);\n    v_pos_b = get_pattern_pos(u_pixel_coord_upper, u_pixel_coord_lower, u_scale_b * u_pattern_size_b, u_tile_units_to_pixels, a_pos);\n}\n"},circle:{fragmentSource:"#pragma mapbox: define highp vec4 color\n#pragma mapbox: define mediump float radius\n#pragma mapbox: define lowp float blur\n#pragma mapbox: define lowp float opacity\n#pragma mapbox: define highp vec4 stroke_color\n#pragma mapbox: define mediump float stroke_width\n#pragma mapbox: define lowp float stroke_opacity\n\nvarying vec3 v_data;\n\nvoid main() {\n    #pragma mapbox: initialize highp vec4 color\n    #pragma mapbox: initialize mediump float radius\n    #pragma mapbox: initialize lowp float blur\n    #pragma mapbox: initialize lowp float opacity\n    #pragma mapbox: initialize highp vec4 stroke_color\n    #pragma mapbox: initialize mediump float stroke_width\n    #pragma mapbox: initialize lowp float stroke_opacity\n\n    vec2 extrude = v_data.xy;\n    float extrude_length = length(extrude);\n\n    lowp float antialiasblur = v_data.z;\n    float antialiased_blur = -max(blur, antialiasblur);\n\n    float opacity_t = smoothstep(0.0, antialiased_blur, extrude_length - 1.0);\n\n    float color_t = stroke_width < 0.01 ? 0.0 : smoothstep(\n        antialiased_blur,\n        0.0,\n        extrude_length - radius / (radius + stroke_width)\n    );\n\n    gl_FragColor = opacity_t * mix(color * opacity, stroke_color * stroke_opacity, color_t);\n\n#ifdef OVERDRAW_INSPECTOR\n    gl_FragColor = vec4(1.0);\n#endif\n}\n",vertexSource:"uniform mat4 u_matrix;\nuniform bool u_scale_with_map;\nuniform bool u_pitch_with_map;\nuniform vec2 u_extrude_scale;\nuniform highp float u_camera_to_center_distance;\n\nattribute vec2 a_pos;\n\n#pragma mapbox: define highp vec4 color\n#pragma mapbox: define mediump float radius\n#pragma mapbox: define lowp float blur\n#pragma mapbox: define lowp float opacity\n#pragma mapbox: define highp vec4 stroke_color\n#pragma mapbox: define mediump float stroke_width\n#pragma mapbox: define lowp float stroke_opacity\n\nvarying vec3 v_data;\n\nvoid main(void) {\n    #pragma mapbox: initialize highp vec4 color\n    #pragma mapbox: initialize mediump float radius\n    #pragma mapbox: initialize lowp float blur\n    #pragma mapbox: initialize lowp float opacity\n    #pragma mapbox: initialize highp vec4 stroke_color\n    #pragma mapbox: initialize mediump float stroke_width\n    #pragma mapbox: initialize lowp float stroke_opacity\n\n    // unencode the extrusion vector that we snuck into the a_pos vector\n    vec2 extrude = vec2(mod(a_pos, 2.0) * 2.0 - 1.0);\n\n    // multiply a_pos by 0.5, since we had it * 2 in order to sneak\n    // in extrusion data\n    vec2 circle_center = floor(a_pos * 0.5);\n    if (u_pitch_with_map) {\n        vec2 corner_position = circle_center;\n        if (u_scale_with_map) {\n            corner_position += extrude * (radius + stroke_width) * u_extrude_scale;\n        } else {\n            // Pitching the circle with the map effectively scales it with the map\n            // To counteract the effect for pitch-scale: viewport, we rescale the\n            // whole circle based on the pitch scaling effect at its central point\n            vec4 projected_center = u_matrix * vec4(circle_center, 0, 1);\n            corner_position += extrude * (radius + stroke_width) * u_extrude_scale * (projected_center.w / u_camera_to_center_distance);\n        }\n\n        gl_Position = u_matrix * vec4(corner_position, 0, 1);\n    } else {\n        gl_Position = u_matrix * vec4(circle_center, 0, 1);\n\n        if (u_scale_with_map) {\n            gl_Position.xy += extrude * (radius + stroke_width) * u_extrude_scale * u_camera_to_center_distance;\n        } else {\n            gl_Position.xy += extrude * (radius + stroke_width) * u_extrude_scale * gl_Position.w;\n        }\n    }\n\n    // This is a minimum blur distance that serves as a faux-antialiasing for\n    // the circle. since blur is a ratio of the circle's size and the intent is\n    // to keep the blur at roughly 1px, the two are inversely related.\n    lowp float antialiasblur = 1.0 / DEVICE_PIXEL_RATIO / (radius + stroke_width);\n\n    v_data = vec3(extrude.x, extrude.y, antialiasblur);\n}\n"},clippingMask:{fragmentSource:"void main() {\n    gl_FragColor = vec4(1.0);\n}\n",vertexSource:"attribute vec2 a_pos;\n\nuniform mat4 u_matrix;\n\nvoid main() {\n    gl_Position = u_matrix * vec4(a_pos, 0, 1);\n}\n"},heatmap:{fragmentSource:"#pragma mapbox: define highp float weight\n\nuniform highp float u_intensity;\nvarying vec2 v_extrude;\n\n// Gaussian kernel coefficient: 1 / sqrt(2 * PI)\n#define GAUSS_COEF 0.3989422804014327\n\nvoid main() {\n    #pragma mapbox: initialize highp float weight\n\n    // Kernel density estimation with a Gaussian kernel of size 5x5\n    float d = -0.5 * 3.0 * 3.0 * dot(v_extrude, v_extrude);\n    float val = weight * u_intensity * GAUSS_COEF * exp(d);\n\n    gl_FragColor = vec4(val, 1.0, 1.0, 1.0);\n\n#ifdef OVERDRAW_INSPECTOR\n    gl_FragColor = vec4(1.0);\n#endif\n}\n",vertexSource:"#pragma mapbox: define highp float weight\n#pragma mapbox: define mediump float radius\n\nuniform mat4 u_matrix;\nuniform float u_extrude_scale;\nuniform float u_opacity;\nuniform float u_intensity;\n\nattribute vec2 a_pos;\n\nvarying vec2 v_extrude;\n\n// Effective \"0\" in the kernel density texture to adjust the kernel size to;\n// this empirically chosen number minimizes artifacts on overlapping kernels\n// for typical heatmap cases (assuming clustered source)\nconst highp float ZERO = 1.0 / 255.0 / 16.0;\n\n// Gaussian kernel coefficient: 1 / sqrt(2 * PI)\n#define GAUSS_COEF 0.3989422804014327\n\nvoid main(void) {\n    #pragma mapbox: initialize highp float weight\n    #pragma mapbox: initialize mediump float radius\n\n    // unencode the extrusion vector that we snuck into the a_pos vector\n    vec2 unscaled_extrude = vec2(mod(a_pos, 2.0) * 2.0 - 1.0);\n\n    // This 'extrude' comes in ranging from [-1, -1], to [1, 1].  We'll use\n    // it to produce the vertices of a square mesh framing the point feature\n    // we're adding to the kernel density texture.  We'll also pass it as\n    // a varying, so that the fragment shader can determine the distance of\n    // each fragment from the point feature.\n    // Before we do so, we need to scale it up sufficiently so that the\n    // kernel falls effectively to zero at the edge of the mesh.\n    // That is, we want to know S such that\n    // weight * u_intensity * GAUSS_COEF * exp(-0.5 * 3.0^2 * S^2) == ZERO\n    // Which solves to:\n    // S = sqrt(-2.0 * log(ZERO / (weight * u_intensity * GAUSS_COEF))) / 3.0\n    float S = sqrt(-2.0 * log(ZERO / weight / u_intensity / GAUSS_COEF)) / 3.0;\n\n    // Pass the varying in units of radius\n    v_extrude = S * unscaled_extrude;\n\n    // Scale by radius and the zoom-based scale factor to produce actual\n    // mesh position\n    vec2 extrude = v_extrude * radius * u_extrude_scale;\n\n    // multiply a_pos by 0.5, since we had it * 2 in order to sneak\n    // in extrusion data\n    vec4 pos = vec4(floor(a_pos * 0.5) + extrude, 0, 1);\n\n    gl_Position = u_matrix * pos;\n}\n"},heatmapTexture:{fragmentSource:"uniform sampler2D u_image;\nuniform sampler2D u_color_ramp;\nuniform float u_opacity;\nvarying vec2 v_pos;\n\nvoid main() {\n    float t = texture2D(u_image, v_pos).r;\n    vec4 color = texture2D(u_color_ramp, vec2(t, 0.5));\n    gl_FragColor = color * u_opacity;\n\n#ifdef OVERDRAW_INSPECTOR\n    gl_FragColor = vec4(0.0);\n#endif\n}\n",vertexSource:"uniform mat4 u_matrix;\nuniform vec2 u_world;\nattribute vec2 a_pos;\nvarying vec2 v_pos;\n\nvoid main() {\n    gl_Position = u_matrix * vec4(a_pos * u_world, 0, 1);\n\n    v_pos.x = a_pos.x;\n    v_pos.y = 1.0 - a_pos.y;\n}\n"},collisionBox:{fragmentSource:"\nvarying float v_placed;\nvarying float v_notUsed;\n\nvoid main() {\n\n    float alpha = 0.5;\n\n    // Red = collision, hide label\n    gl_FragColor = vec4(1.0, 0.0, 0.0, 1.0) * alpha;\n\n    // Blue = no collision, label is showing\n    if (v_placed > 0.5) {\n        gl_FragColor = vec4(0.0, 0.0, 1.0, 0.5) * alpha;\n    }\n\n    if (v_notUsed > 0.5) {\n        // This box not used, fade it out\n        gl_FragColor *= .1;\n    }\n}",vertexSource:"attribute vec2 a_pos;\nattribute vec2 a_anchor_pos;\nattribute vec2 a_extrude;\nattribute vec2 a_placed;\n\nuniform mat4 u_matrix;\nuniform vec2 u_extrude_scale;\nuniform float u_camera_to_center_distance;\n\nvarying float v_placed;\nvarying float v_notUsed;\n\nvoid main() {\n    vec4 projectedPoint = u_matrix * vec4(a_anchor_pos, 0, 1);\n    highp float camera_to_anchor_distance = projectedPoint.w;\n    highp float collision_perspective_ratio = clamp(\n        0.5 + 0.5 * (u_camera_to_center_distance / camera_to_anchor_distance),\n        0.0, // Prevents oversized near-field boxes in pitched/overzoomed tiles\n        4.0);\n\n    gl_Position = u_matrix * vec4(a_pos, 0.0, 1.0);\n    gl_Position.xy += a_extrude * u_extrude_scale * gl_Position.w * collision_perspective_ratio;\n\n    v_placed = a_placed.x;\n    v_notUsed = a_placed.y;\n}\n"},collisionCircle:{fragmentSource:"uniform float u_overscale_factor;\n\nvarying float v_placed;\nvarying float v_notUsed;\nvarying float v_radius;\nvarying vec2 v_extrude;\nvarying vec2 v_extrude_scale;\n\nvoid main() {\n    float alpha = 0.5;\n\n    // Red = collision, hide label\n    vec4 color = vec4(1.0, 0.0, 0.0, 1.0) * alpha;\n\n    // Blue = no collision, label is showing\n    if (v_placed > 0.5) {\n        color = vec4(0.0, 0.0, 1.0, 0.5) * alpha;\n    }\n\n    if (v_notUsed > 0.5) {\n        // This box not used, fade it out\n        color *= .2;\n    }\n\n    float extrude_scale_length = length(v_extrude_scale);\n    float extrude_length = length(v_extrude) * extrude_scale_length;\n    float stroke_width = 15.0 * extrude_scale_length / u_overscale_factor;\n    float radius = v_radius * extrude_scale_length;\n\n    float distance_to_edge = abs(extrude_length - radius);\n    float opacity_t = smoothstep(-stroke_width, 0.0, -distance_to_edge);\n\n    gl_FragColor = opacity_t * color;\n}\n",vertexSource:"attribute vec2 a_pos;\nattribute vec2 a_anchor_pos;\nattribute vec2 a_extrude;\nattribute vec2 a_placed;\n\nuniform mat4 u_matrix;\nuniform vec2 u_extrude_scale;\nuniform float u_camera_to_center_distance;\n\nvarying float v_placed;\nvarying float v_notUsed;\nvarying float v_radius;\n\nvarying vec2 v_extrude;\nvarying vec2 v_extrude_scale;\n\nvoid main() {\n    vec4 projectedPoint = u_matrix * vec4(a_anchor_pos, 0, 1);\n    highp float camera_to_anchor_distance = projectedPoint.w;\n    highp float collision_perspective_ratio = clamp(\n        0.5 + 0.5 * (u_camera_to_center_distance / camera_to_anchor_distance),\n        0.0, // Prevents oversized near-field circles in pitched/overzoomed tiles\n        4.0);\n\n    gl_Position = u_matrix * vec4(a_pos, 0.0, 1.0);\n\n    highp float padding_factor = 1.2; // Pad the vertices slightly to make room for anti-alias blur\n    gl_Position.xy += a_extrude * u_extrude_scale * padding_factor * gl_Position.w * collision_perspective_ratio;\n\n    v_placed = a_placed.x;\n    v_notUsed = a_placed.y;\n    v_radius = abs(a_extrude.y); // We don't pitch the circles, so both units of the extrusion vector are equal in magnitude to the radius\n\n    v_extrude = a_extrude * padding_factor;\n    v_extrude_scale = u_extrude_scale * u_camera_to_center_distance * collision_perspective_ratio;\n}\n"},debug:{fragmentSource:"uniform highp vec4 u_color;\n\nvoid main() {\n    gl_FragColor = u_color;\n}\n",vertexSource:"attribute vec2 a_pos;\n\nuniform mat4 u_matrix;\n\nvoid main() {\n    gl_Position = u_matrix * vec4(a_pos, 0, 1);\n}\n"},fill:{fragmentSource:"#pragma mapbox: define highp vec4 color\n#pragma mapbox: define lowp float opacity\n\nvoid main() {\n    #pragma mapbox: initialize highp vec4 color\n    #pragma mapbox: initialize lowp float opacity\n\n    gl_FragColor = color * opacity;\n\n#ifdef OVERDRAW_INSPECTOR\n    gl_FragColor = vec4(1.0);\n#endif\n}\n",vertexSource:"attribute vec2 a_pos;\n\nuniform mat4 u_matrix;\n\n#pragma mapbox: define highp vec4 color\n#pragma mapbox: define lowp float opacity\n\nvoid main() {\n    #pragma mapbox: initialize highp vec4 color\n    #pragma mapbox: initialize lowp float opacity\n\n    gl_Position = u_matrix * vec4(a_pos, 0, 1);\n}\n"},fillOutline:{fragmentSource:"#pragma mapbox: define highp vec4 outline_color\n#pragma mapbox: define lowp float opacity\n\nvarying vec2 v_pos;\n\nvoid main() {\n    #pragma mapbox: initialize highp vec4 outline_color\n    #pragma mapbox: initialize lowp float opacity\n\n    float dist = length(v_pos - gl_FragCoord.xy);\n    float alpha = 1.0 - smoothstep(0.0, 1.0, dist);\n    gl_FragColor = outline_color * (alpha * opacity);\n\n#ifdef OVERDRAW_INSPECTOR\n    gl_FragColor = vec4(1.0);\n#endif\n}\n",vertexSource:"attribute vec2 a_pos;\n\nuniform mat4 u_matrix;\nuniform vec2 u_world;\n\nvarying vec2 v_pos;\n\n#pragma mapbox: define highp vec4 outline_color\n#pragma mapbox: define lowp float opacity\n\nvoid main() {\n    #pragma mapbox: initialize highp vec4 outline_color\n    #pragma mapbox: initialize lowp float opacity\n\n    gl_Position = u_matrix * vec4(a_pos, 0, 1);\n    v_pos = (gl_Position.xy / gl_Position.w + 1.0) / 2.0 * u_world;\n}\n"},fillOutlinePattern:{fragmentSource:"\nuniform vec2 u_texsize;\nuniform sampler2D u_image;\nuniform float u_fade;\n\nvarying vec2 v_pos_a;\nvarying vec2 v_pos_b;\nvarying vec2 v_pos;\n\n#pragma mapbox: define lowp float opacity\n#pragma mapbox: define lowp vec4 pattern_from\n#pragma mapbox: define lowp vec4 pattern_to\n\nvoid main() {\n    #pragma mapbox: initialize lowp float opacity\n    #pragma mapbox: initialize mediump vec4 pattern_from\n    #pragma mapbox: initialize mediump vec4 pattern_to\n\n    vec2 pattern_tl_a = pattern_from.xy;\n    vec2 pattern_br_a = pattern_from.zw;\n    vec2 pattern_tl_b = pattern_to.xy;\n    vec2 pattern_br_b = pattern_to.zw;\n\n    vec2 imagecoord = mod(v_pos_a, 1.0);\n    vec2 pos = mix(pattern_tl_a / u_texsize, pattern_br_a / u_texsize, imagecoord);\n    vec4 color1 = texture2D(u_image, pos);\n\n    vec2 imagecoord_b = mod(v_pos_b, 1.0);\n    vec2 pos2 = mix(pattern_tl_b / u_texsize, pattern_br_b / u_texsize, imagecoord_b);\n    vec4 color2 = texture2D(u_image, pos2);\n\n    // find distance to outline for alpha interpolation\n\n    float dist = length(v_pos - gl_FragCoord.xy);\n    float alpha = 1.0 - smoothstep(0.0, 1.0, dist);\n\n\n    gl_FragColor = mix(color1, color2, u_fade) * alpha * opacity;\n\n#ifdef OVERDRAW_INSPECTOR\n    gl_FragColor = vec4(1.0);\n#endif\n}\n",vertexSource:"uniform mat4 u_matrix;\nuniform vec2 u_world;\nuniform vec2 u_pixel_coord_upper;\nuniform vec2 u_pixel_coord_lower;\nuniform vec4 u_scale;\n\nattribute vec2 a_pos;\n\nvarying vec2 v_pos_a;\nvarying vec2 v_pos_b;\nvarying vec2 v_pos;\n\n#pragma mapbox: define lowp float opacity\n#pragma mapbox: define lowp vec4 pattern_from\n#pragma mapbox: define lowp vec4 pattern_to\n\nvoid main() {\n    #pragma mapbox: initialize lowp float opacity\n    #pragma mapbox: initialize mediump vec4 pattern_from\n    #pragma mapbox: initialize mediump vec4 pattern_to\n\n    vec2 pattern_tl_a = pattern_from.xy;\n    vec2 pattern_br_a = pattern_from.zw;\n    vec2 pattern_tl_b = pattern_to.xy;\n    vec2 pattern_br_b = pattern_to.zw;\n\n    float pixelRatio = u_scale.x;\n    float tileRatio = u_scale.y;\n    float fromScale = u_scale.z;\n    float toScale = u_scale.w;\n\n    gl_Position = u_matrix * vec4(a_pos, 0, 1);\n\n    vec2 display_size_a = vec2((pattern_br_a.x - pattern_tl_a.x) / pixelRatio, (pattern_br_a.y - pattern_tl_a.y) / pixelRatio);\n    vec2 display_size_b = vec2((pattern_br_b.x - pattern_tl_b.x) / pixelRatio, (pattern_br_b.y - pattern_tl_b.y) / pixelRatio);\n\n    v_pos_a = get_pattern_pos(u_pixel_coord_upper, u_pixel_coord_lower, fromScale * display_size_a, tileRatio, a_pos);\n    v_pos_b = get_pattern_pos(u_pixel_coord_upper, u_pixel_coord_lower, toScale * display_size_b, tileRatio, a_pos);\n\n    v_pos = (gl_Position.xy / gl_Position.w + 1.0) / 2.0 * u_world;\n}\n"},fillPattern:{fragmentSource:"uniform vec2 u_texsize;\nuniform float u_fade;\n\nuniform sampler2D u_image;\n\nvarying vec2 v_pos_a;\nvarying vec2 v_pos_b;\n\n#pragma mapbox: define lowp float opacity\n#pragma mapbox: define lowp vec4 pattern_from\n#pragma mapbox: define lowp vec4 pattern_to\n\nvoid main() {\n    #pragma mapbox: initialize lowp float opacity\n    #pragma mapbox: initialize mediump vec4 pattern_from\n    #pragma mapbox: initialize mediump vec4 pattern_to\n\n    vec2 pattern_tl_a = pattern_from.xy;\n    vec2 pattern_br_a = pattern_from.zw;\n    vec2 pattern_tl_b = pattern_to.xy;\n    vec2 pattern_br_b = pattern_to.zw;\n\n    vec2 imagecoord = mod(v_pos_a, 1.0);\n    vec2 pos = mix(pattern_tl_a / u_texsize, pattern_br_a / u_texsize, imagecoord);\n    vec4 color1 = texture2D(u_image, pos);\n\n    vec2 imagecoord_b = mod(v_pos_b, 1.0);\n    vec2 pos2 = mix(pattern_tl_b / u_texsize, pattern_br_b / u_texsize, imagecoord_b);\n    vec4 color2 = texture2D(u_image, pos2);\n\n    gl_FragColor = mix(color1, color2, u_fade) * opacity;\n\n#ifdef OVERDRAW_INSPECTOR\n    gl_FragColor = vec4(1.0);\n#endif\n}\n",vertexSource:"uniform mat4 u_matrix;\nuniform vec2 u_pixel_coord_upper;\nuniform vec2 u_pixel_coord_lower;\nuniform vec4 u_scale;\n\nattribute vec2 a_pos;\n\nvarying vec2 v_pos_a;\nvarying vec2 v_pos_b;\n\n#pragma mapbox: define lowp float opacity\n#pragma mapbox: define lowp vec4 pattern_from\n#pragma mapbox: define lowp vec4 pattern_to\n\nvoid main() {\n    #pragma mapbox: initialize lowp float opacity\n    #pragma mapbox: initialize mediump vec4 pattern_from\n    #pragma mapbox: initialize mediump vec4 pattern_to\n\n    vec2 pattern_tl_a = pattern_from.xy;\n    vec2 pattern_br_a = pattern_from.zw;\n    vec2 pattern_tl_b = pattern_to.xy;\n    vec2 pattern_br_b = pattern_to.zw;\n\n    float pixelRatio = u_scale.x;\n    float tileZoomRatio = u_scale.y;\n    float fromScale = u_scale.z;\n    float toScale = u_scale.w;\n\n    vec2 display_size_a = vec2((pattern_br_a.x - pattern_tl_a.x) / pixelRatio, (pattern_br_a.y - pattern_tl_a.y) / pixelRatio);\n    vec2 display_size_b = vec2((pattern_br_b.x - pattern_tl_b.x) / pixelRatio, (pattern_br_b.y - pattern_tl_b.y) / pixelRatio);\n    gl_Position = u_matrix * vec4(a_pos, 0, 1);\n\n    v_pos_a = get_pattern_pos(u_pixel_coord_upper, u_pixel_coord_lower, fromScale * display_size_a, tileZoomRatio, a_pos);\n    v_pos_b = get_pattern_pos(u_pixel_coord_upper, u_pixel_coord_lower, toScale * display_size_b, tileZoomRatio, a_pos);\n}\n"},fillExtrusion:{fragmentSource:"varying vec4 v_color;\n#pragma mapbox: define lowp float base\n#pragma mapbox: define lowp float height\n#pragma mapbox: define highp vec4 color\n\nvoid main() {\n    #pragma mapbox: initialize lowp float base\n    #pragma mapbox: initialize lowp float height\n    #pragma mapbox: initialize highp vec4 color\n\n    gl_FragColor = v_color;\n\n#ifdef OVERDRAW_INSPECTOR\n    gl_FragColor = vec4(1.0);\n#endif\n}\n",vertexSource:"uniform mat4 u_matrix;\nuniform vec3 u_lightcolor;\nuniform lowp vec3 u_lightpos;\nuniform lowp float u_lightintensity;\n\nattribute vec2 a_pos;\nattribute vec4 a_normal_ed;\n\nvarying vec4 v_color;\n\n#pragma mapbox: define lowp float base\n#pragma mapbox: define lowp float height\n\n#pragma mapbox: define highp vec4 color\n\nvoid main() {\n    #pragma mapbox: initialize lowp float base\n    #pragma mapbox: initialize lowp float height\n    #pragma mapbox: initialize highp vec4 color\n\n    vec3 normal = a_normal_ed.xyz;\n\n    base = max(0.0, base);\n    height = max(0.0, height);\n\n    float t = mod(normal.x, 2.0);\n\n    gl_Position = u_matrix * vec4(a_pos, t > 0.0 ? height : base, 1);\n\n    // Relative luminance (how dark/bright is the surface color?)\n    float colorvalue = color.r * 0.2126 + color.g * 0.7152 + color.b * 0.0722;\n\n    v_color = vec4(0.0, 0.0, 0.0, 1.0);\n\n    // Add slight ambient lighting so no extrusions are totally black\n    vec4 ambientlight = vec4(0.03, 0.03, 0.03, 1.0);\n    color += ambientlight;\n\n    // Calculate cos(theta), where theta is the angle between surface normal and diffuse light ray\n    float directional = clamp(dot(normal / 16384.0, u_lightpos), 0.0, 1.0);\n\n    // Adjust directional so that\n    // the range of values for highlight/shading is narrower\n    // with lower light intensity\n    // and with lighter/brighter surface colors\n    directional = mix((1.0 - u_lightintensity), max((1.0 - colorvalue + u_lightintensity), 1.0), directional);\n\n    // Add gradient along z axis of side surfaces\n    if (normal.y != 0.0) {\n        directional *= clamp((t + base) * pow(height / 150.0, 0.5), mix(0.7, 0.98, 1.0 - u_lightintensity), 1.0);\n    }\n\n    // Assign final color based on surface + ambient light color, diffuse light directional, and light color\n    // with lower bounds adjusted to hue of light\n    // so that shading is tinted with the complementary (opposite) color to the light color\n    v_color.r += clamp(color.r * directional * u_lightcolor.r, mix(0.0, 0.3, 1.0 - u_lightcolor.r), 1.0);\n    v_color.g += clamp(color.g * directional * u_lightcolor.g, mix(0.0, 0.3, 1.0 - u_lightcolor.g), 1.0);\n    v_color.b += clamp(color.b * directional * u_lightcolor.b, mix(0.0, 0.3, 1.0 - u_lightcolor.b), 1.0);\n}\n"},fillExtrusionPattern:{fragmentSource:"uniform vec2 u_texsize;\nuniform float u_fade;\n\nuniform sampler2D u_image;\n\nvarying vec2 v_pos_a;\nvarying vec2 v_pos_b;\nvarying vec4 v_lighting;\n\n#pragma mapbox: define lowp float base\n#pragma mapbox: define lowp float height\n#pragma mapbox: define lowp vec4 pattern_from\n#pragma mapbox: define lowp vec4 pattern_to\n\nvoid main() {\n    #pragma mapbox: initialize lowp float base\n    #pragma mapbox: initialize lowp float height\n    #pragma mapbox: initialize mediump vec4 pattern_from\n    #pragma mapbox: initialize mediump vec4 pattern_to\n\n    vec2 pattern_tl_a = pattern_from.xy;\n    vec2 pattern_br_a = pattern_from.zw;\n    vec2 pattern_tl_b = pattern_to.xy;\n    vec2 pattern_br_b = pattern_to.zw;\n\n    vec2 imagecoord = mod(v_pos_a, 1.0);\n    vec2 pos = mix(pattern_tl_a / u_texsize, pattern_br_a / u_texsize, imagecoord);\n    vec4 color1 = texture2D(u_image, pos);\n\n    vec2 imagecoord_b = mod(v_pos_b, 1.0);\n    vec2 pos2 = mix(pattern_tl_b / u_texsize, pattern_br_b / u_texsize, imagecoord_b);\n    vec4 color2 = texture2D(u_image, pos2);\n\n    vec4 mixedColor = mix(color1, color2, u_fade);\n\n    gl_FragColor = mixedColor * v_lighting;\n\n#ifdef OVERDRAW_INSPECTOR\n    gl_FragColor = vec4(1.0);\n#endif\n}\n",vertexSource:"uniform mat4 u_matrix;\nuniform vec2 u_pixel_coord_upper;\nuniform vec2 u_pixel_coord_lower;\nuniform float u_height_factor;\nuniform vec4 u_scale;\n\nuniform vec3 u_lightcolor;\nuniform lowp vec3 u_lightpos;\nuniform lowp float u_lightintensity;\n\nattribute vec2 a_pos;\nattribute vec4 a_normal_ed;\n\nvarying vec2 v_pos_a;\nvarying vec2 v_pos_b;\nvarying vec4 v_lighting;\n\n#pragma mapbox: define lowp float base\n#pragma mapbox: define lowp float height\n#pragma mapbox: define lowp vec4 pattern_from\n#pragma mapbox: define lowp vec4 pattern_to\n\nvoid main() {\n    #pragma mapbox: initialize lowp float base\n    #pragma mapbox: initialize lowp float height\n    #pragma mapbox: initialize mediump vec4 pattern_from\n    #pragma mapbox: initialize mediump vec4 pattern_to\n\n    vec2 pattern_tl_a = pattern_from.xy;\n    vec2 pattern_br_a = pattern_from.zw;\n    vec2 pattern_tl_b = pattern_to.xy;\n    vec2 pattern_br_b = pattern_to.zw;\n\n    float pixelRatio = u_scale.x;\n    float tileRatio = u_scale.y;\n    float fromScale = u_scale.z;\n    float toScale = u_scale.w;\n\n    vec3 normal = a_normal_ed.xyz;\n    float edgedistance = a_normal_ed.w;\n\n    vec2 display_size_a = vec2((pattern_br_a.x - pattern_tl_a.x) / pixelRatio, (pattern_br_a.y - pattern_tl_a.y) / pixelRatio);\n    vec2 display_size_b = vec2((pattern_br_b.x - pattern_tl_b.x) / pixelRatio, (pattern_br_b.y - pattern_tl_b.y) / pixelRatio);\n\n    base = max(0.0, base);\n    height = max(0.0, height);\n\n    float t = mod(normal.x, 2.0);\n    float z = t > 0.0 ? height : base;\n\n    gl_Position = u_matrix * vec4(a_pos, z, 1);\n\n    vec2 pos = normal.x == 1.0 && normal.y == 0.0 && normal.z == 16384.0\n        ? a_pos // extrusion top\n        : vec2(edgedistance, z * u_height_factor); // extrusion side\n\n    v_pos_a = get_pattern_pos(u_pixel_coord_upper, u_pixel_coord_lower, fromScale * display_size_a, tileRatio, pos);\n    v_pos_b = get_pattern_pos(u_pixel_coord_upper, u_pixel_coord_lower, toScale * display_size_b, tileRatio, pos);\n\n    v_lighting = vec4(0.0, 0.0, 0.0, 1.0);\n    float directional = clamp(dot(normal / 16383.0, u_lightpos), 0.0, 1.0);\n    directional = mix((1.0 - u_lightintensity), max((0.5 + u_lightintensity), 1.0), directional);\n\n    if (normal.y != 0.0) {\n        directional *= clamp((t + base) * pow(height / 150.0, 0.5), mix(0.7, 0.98, 1.0 - u_lightintensity), 1.0);\n    }\n\n    v_lighting.rgb += clamp(directional * u_lightcolor, mix(vec3(0.0), vec3(0.3), 1.0 - u_lightcolor), vec3(1.0));\n}\n"},extrusionTexture:{fragmentSource:"uniform sampler2D u_image;\nuniform float u_opacity;\nvarying vec2 v_pos;\n\nvoid main() {\n    gl_FragColor = texture2D(u_image, v_pos) * u_opacity;\n\n#ifdef OVERDRAW_INSPECTOR\n    gl_FragColor = vec4(0.0);\n#endif\n}\n",vertexSource:"uniform mat4 u_matrix;\nuniform vec2 u_world;\nattribute vec2 a_pos;\nvarying vec2 v_pos;\n\nvoid main() {\n    gl_Position = u_matrix * vec4(a_pos * u_world, 0, 1);\n\n    v_pos.x = a_pos.x;\n    v_pos.y = 1.0 - a_pos.y;\n}\n"},hillshadePrepare:{fragmentSource:"#ifdef GL_ES\nprecision highp float;\n#endif\n\nuniform sampler2D u_image;\nvarying vec2 v_pos;\nuniform vec2 u_dimension;\nuniform float u_zoom;\nuniform float u_maxzoom;\n\nfloat getElevation(vec2 coord, float bias) {\n    // Convert encoded elevation value to meters\n    vec4 data = texture2D(u_image, coord) * 255.0;\n    return (data.r + data.g * 256.0 + data.b * 256.0 * 256.0) / 4.0;\n}\n\nvoid main() {\n    vec2 epsilon = 1.0 / u_dimension;\n\n    // queried pixels:\n    // +-----------+\n    // |   |   |   |\n    // | a | b | c |\n    // |   |   |   |\n    // +-----------+\n    // |   |   |   |\n    // | d | e | f |\n    // |   |   |   |\n    // +-----------+\n    // |   |   |   |\n    // | g | h | i |\n    // |   |   |   |\n    // +-----------+\n\n    float a = getElevation(v_pos + vec2(-epsilon.x, -epsilon.y), 0.0);\n    float b = getElevation(v_pos + vec2(0, -epsilon.y), 0.0);\n    float c = getElevation(v_pos + vec2(epsilon.x, -epsilon.y), 0.0);\n    float d = getElevation(v_pos + vec2(-epsilon.x, 0), 0.0);\n    float e = getElevation(v_pos, 0.0);\n    float f = getElevation(v_pos + vec2(epsilon.x, 0), 0.0);\n    float g = getElevation(v_pos + vec2(-epsilon.x, epsilon.y), 0.0);\n    float h = getElevation(v_pos + vec2(0, epsilon.y), 0.0);\n    float i = getElevation(v_pos + vec2(epsilon.x, epsilon.y), 0.0);\n\n    // here we divide the x and y slopes by 8 * pixel size\n    // where pixel size (aka meters/pixel) is:\n    // circumference of the world / (pixels per tile * number of tiles)\n    // which is equivalent to: 8 * 40075016.6855785 / (512 * pow(2, u_zoom))\n    // which can be reduced to: pow(2, 19.25619978527 - u_zoom)\n    // we want to vertically exaggerate the hillshading though, because otherwise\n    // it is barely noticeable at low zooms. to do this, we multiply this by some\n    // scale factor pow(2, (u_zoom - u_maxzoom) * a) where a is an arbitrary value\n    // Here we use a=0.3 which works out to the expression below. see \n    // nickidlugash's awesome breakdown for more info\n    // https://github.com/mapbox/mapbox-gl-js/pull/5286#discussion_r148419556\n    float exaggeration = u_zoom < 2.0 ? 0.4 : u_zoom < 4.5 ? 0.35 : 0.3;\n\n    vec2 deriv = vec2(\n        (c + f + f + i) - (a + d + d + g),\n        (g + h + h + i) - (a + b + b + c)\n    ) /  pow(2.0, (u_zoom - u_maxzoom) * exaggeration + 19.2562 - u_zoom);\n\n    gl_FragColor = clamp(vec4(\n        deriv.x / 2.0 + 0.5,\n        deriv.y / 2.0 + 0.5,\n        1.0,\n        1.0), 0.0, 1.0);\n\n#ifdef OVERDRAW_INSPECTOR\n    gl_FragColor = vec4(1.0);\n#endif\n}\n",vertexSource:"uniform mat4 u_matrix;\n\nattribute vec2 a_pos;\nattribute vec2 a_texture_pos;\n\nvarying vec2 v_pos;\n\nvoid main() {\n    gl_Position = u_matrix * vec4(a_pos, 0, 1);\n    v_pos = (a_texture_pos / 8192.0) / 2.0 + 0.25;\n}\n"},hillshade:{fragmentSource:"uniform sampler2D u_image;\nvarying vec2 v_pos;\n\nuniform vec2 u_latrange;\nuniform vec2 u_light;\nuniform vec4 u_shadow;\nuniform vec4 u_highlight;\nuniform vec4 u_accent;\n\n#define PI 3.141592653589793\n\nvoid main() {\n    vec4 pixel = texture2D(u_image, v_pos);\n\n    vec2 deriv = ((pixel.rg * 2.0) - 1.0);\n\n    // We divide the slope by a scale factor based on the cosin of the pixel's approximate latitude\n    // to account for mercator projection distortion. see #4807 for details\n    float scaleFactor = cos(radians((u_latrange[0] - u_latrange[1]) * (1.0 - v_pos.y) + u_latrange[1]));\n    // We also multiply the slope by an arbitrary z-factor of 1.25\n    float slope = atan(1.25 * length(deriv) / scaleFactor);\n    float aspect = deriv.x != 0.0 ? atan(deriv.y, -deriv.x) : PI / 2.0 * (deriv.y > 0.0 ? 1.0 : -1.0);\n\n    float intensity = u_light.x;\n    // We add PI to make this property match the global light object, which adds PI/2 to the light's azimuthal\n    // position property to account for 0deg corresponding to north/the top of the viewport in the style spec\n    // and the original shader was written to accept (-illuminationDirection - 90) as the azimuthal.\n    float azimuth = u_light.y + PI;\n\n    // We scale the slope exponentially based on intensity, using a calculation similar to\n    // the exponential interpolation function in the style spec:\n    // https://github.com/mapbox/mapbox-gl-js/blob/master/src/style-spec/expression/definitions/interpolate.js#L217-L228\n    // so that higher intensity values create more opaque hillshading.\n    float base = 1.875 - intensity * 1.75;\n    float maxValue = 0.5 * PI;\n    float scaledSlope = intensity != 0.5 ? ((pow(base, slope) - 1.0) / (pow(base, maxValue) - 1.0)) * maxValue : slope;\n\n    // The accent color is calculated with the cosine of the slope while the shade color is calculated with the sine\n    // so that the accent color's rate of change eases in while the shade color's eases out.\n    float accent = cos(scaledSlope);\n    // We multiply both the accent and shade color by a clamped intensity value\n    // so that intensities >= 0.5 do not additionally affect the color values\n    // while intensity values < 0.5 make the overall color more transparent.\n    vec4 accent_color = (1.0 - accent) * u_accent * clamp(intensity * 2.0, 0.0, 1.0);\n    float shade = abs(mod((aspect + azimuth) / PI + 0.5, 2.0) - 1.0);\n    vec4 shade_color = mix(u_shadow, u_highlight, shade) * sin(scaledSlope) * clamp(intensity * 2.0, 0.0, 1.0);\n    gl_FragColor = accent_color * (1.0 - shade_color.a) + shade_color;\n\n#ifdef OVERDRAW_INSPECTOR\n    gl_FragColor = vec4(1.0);\n#endif\n}\n",vertexSource:"uniform mat4 u_matrix;\n\nattribute vec2 a_pos;\nattribute vec2 a_texture_pos;\n\nvarying vec2 v_pos;\n\nvoid main() {\n    gl_Position = u_matrix * vec4(a_pos, 0, 1);\n    v_pos = a_texture_pos / 8192.0;\n}\n"},line:{fragmentSource:"#pragma mapbox: define highp vec4 color\n#pragma mapbox: define lowp float blur\n#pragma mapbox: define lowp float opacity\n\nvarying vec2 v_width2;\nvarying vec2 v_normal;\nvarying float v_gamma_scale;\n\nvoid main() {\n    #pragma mapbox: initialize highp vec4 color\n    #pragma mapbox: initialize lowp float blur\n    #pragma mapbox: initialize lowp float opacity\n\n    // Calculate the distance of the pixel from the line in pixels.\n    float dist = length(v_normal) * v_width2.s;\n\n    // Calculate the antialiasing fade factor. This is either when fading in\n    // the line in case of an offset line (v_width2.t) or when fading out\n    // (v_width2.s)\n    float blur2 = (blur + 1.0 / DEVICE_PIXEL_RATIO) * v_gamma_scale;\n    float alpha = clamp(min(dist - (v_width2.t - blur2), v_width2.s - dist) / blur2, 0.0, 1.0);\n\n    gl_FragColor = color * (alpha * opacity);\n\n#ifdef OVERDRAW_INSPECTOR\n    gl_FragColor = vec4(1.0);\n#endif\n}\n",vertexSource:"\n\n// the distance over which the line edge fades out.\n// Retina devices need a smaller distance to avoid aliasing.\n#define ANTIALIASING 1.0 / DEVICE_PIXEL_RATIO / 2.0\n\n// floor(127 / 2) == 63.0\n// the maximum allowed miter limit is 2.0 at the moment. the extrude normal is\n// stored in a byte (-128..127). we scale regular normals up to length 63, but\n// there are also \"special\" normals that have a bigger length (of up to 126 in\n// this case).\n// #define scale 63.0\n#define scale 0.015873016\n\nattribute vec4 a_pos_normal;\nattribute vec4 a_data;\n\nuniform mat4 u_matrix;\nuniform mediump float u_ratio;\nuniform vec2 u_gl_units_to_pixels;\n\nvarying vec2 v_normal;\nvarying vec2 v_width2;\nvarying float v_gamma_scale;\nvarying highp float v_linesofar;\n\n#pragma mapbox: define highp vec4 color\n#pragma mapbox: define lowp float blur\n#pragma mapbox: define lowp float opacity\n#pragma mapbox: define mediump float gapwidth\n#pragma mapbox: define lowp float offset\n#pragma mapbox: define mediump float width\n\nvoid main() {\n    #pragma mapbox: initialize highp vec4 color\n    #pragma mapbox: initialize lowp float blur\n    #pragma mapbox: initialize lowp float opacity\n    #pragma mapbox: initialize mediump float gapwidth\n    #pragma mapbox: initialize lowp float offset\n    #pragma mapbox: initialize mediump float width\n\n    vec2 a_extrude = a_data.xy - 128.0;\n    float a_direction = mod(a_data.z, 4.0) - 1.0;\n\n    v_linesofar = (floor(a_data.z / 4.0) + a_data.w * 64.0) * 2.0;\n\n    vec2 pos = a_pos_normal.xy;\n\n    // x is 1 if it's a round cap, 0 otherwise\n    // y is 1 if the normal points up, and -1 if it points down\n    mediump vec2 normal = a_pos_normal.zw;\n    v_normal = normal;\n\n    // these transformations used to be applied in the JS and native code bases.\n    // moved them into the shader for clarity and simplicity.\n    gapwidth = gapwidth / 2.0;\n    float halfwidth = width / 2.0;\n    offset = -1.0 * offset;\n\n    float inset = gapwidth + (gapwidth > 0.0 ? ANTIALIASING : 0.0);\n    float outset = gapwidth + halfwidth * (gapwidth > 0.0 ? 2.0 : 1.0) + (halfwidth == 0.0 ? 0.0 : ANTIALIASING);\n\n    // Scale the extrusion vector down to a normal and then up by the line width\n    // of this vertex.\n    mediump vec2 dist = outset * a_extrude * scale;\n\n    // Calculate the offset when drawing a line that is to the side of the actual line.\n    // We do this by creating a vector that points towards the extrude, but rotate\n    // it when we're drawing round end points (a_direction = -1 or 1) since their\n    // extrude vector points in another direction.\n    mediump float u = 0.5 * a_direction;\n    mediump float t = 1.0 - abs(u);\n    mediump vec2 offset2 = offset * a_extrude * scale * normal.y * mat2(t, -u, u, t);\n\n    vec4 projected_extrude = u_matrix * vec4(dist / u_ratio, 0.0, 0.0);\n    gl_Position = u_matrix * vec4(pos + offset2 / u_ratio, 0.0, 1.0) + projected_extrude;\n\n    // calculate how much the perspective view squishes or stretches the extrude\n    float extrude_length_without_perspective = length(dist);\n    float extrude_length_with_perspective = length(projected_extrude.xy / gl_Position.w * u_gl_units_to_pixels);\n    v_gamma_scale = extrude_length_without_perspective / extrude_length_with_perspective;\n\n    v_width2 = vec2(outset, inset);\n}\n"},lineGradient:{fragmentSource:"\n#pragma mapbox: define lowp float blur\n#pragma mapbox: define lowp float opacity\n\nuniform sampler2D u_image;\n\nvarying vec2 v_width2;\nvarying vec2 v_normal;\nvarying float v_gamma_scale;\nvarying highp float v_lineprogress;\n\nvoid main() {\n    #pragma mapbox: initialize lowp float blur\n    #pragma mapbox: initialize lowp float opacity\n\n    // Calculate the distance of the pixel from the line in pixels.\n    float dist = length(v_normal) * v_width2.s;\n\n    // Calculate the antialiasing fade factor. This is either when fading in\n    // the line in case of an offset line (v_width2.t) or when fading out\n    // (v_width2.s)\n    float blur2 = (blur + 1.0 / DEVICE_PIXEL_RATIO) * v_gamma_scale;\n    float alpha = clamp(min(dist - (v_width2.t - blur2), v_width2.s - dist) / blur2, 0.0, 1.0);\n\n    // For gradient lines, v_lineprogress is the ratio along the entire line,\n    // scaled to [0, 2^15), and the gradient ramp is stored in a texture.\n    vec4 color = texture2D(u_image, vec2(v_lineprogress, 0.5));\n\n    gl_FragColor = color * (alpha * opacity);\n\n#ifdef OVERDRAW_INSPECTOR\n    gl_FragColor = vec4(1.0);\n#endif\n}\n",vertexSource:"\n// the attribute conveying progress along a line is scaled to [0, 2^15)\n#define MAX_LINE_DISTANCE 32767.0\n\n// the distance over which the line edge fades out.\n// Retina devices need a smaller distance to avoid aliasing.\n#define ANTIALIASING 1.0 / DEVICE_PIXEL_RATIO / 2.0\n\n// floor(127 / 2) == 63.0\n// the maximum allowed miter limit is 2.0 at the moment. the extrude normal is\n// stored in a byte (-128..127). we scale regular normals up to length 63, but\n// there are also \"special\" normals that have a bigger length (of up to 126 in\n// this case).\n// #define scale 63.0\n#define scale 0.015873016\n\nattribute vec4 a_pos_normal;\nattribute vec4 a_data;\n\nuniform mat4 u_matrix;\nuniform mediump float u_ratio;\nuniform vec2 u_gl_units_to_pixels;\n\nvarying vec2 v_normal;\nvarying vec2 v_width2;\nvarying float v_gamma_scale;\nvarying highp float v_lineprogress;\n\n#pragma mapbox: define lowp float blur\n#pragma mapbox: define lowp float opacity\n#pragma mapbox: define mediump float gapwidth\n#pragma mapbox: define lowp float offset\n#pragma mapbox: define mediump float width\n\nvoid main() {\n    #pragma mapbox: initialize lowp float blur\n    #pragma mapbox: initialize lowp float opacity\n    #pragma mapbox: initialize mediump float gapwidth\n    #pragma mapbox: initialize lowp float offset\n    #pragma mapbox: initialize mediump float width\n\n    vec2 a_extrude = a_data.xy - 128.0;\n    float a_direction = mod(a_data.z, 4.0) - 1.0;\n\n    v_lineprogress = (floor(a_data.z / 4.0) + a_data.w * 64.0) * 2.0 / MAX_LINE_DISTANCE;\n\n    vec2 pos = a_pos_normal.xy;\n\n    // x is 1 if it's a round cap, 0 otherwise\n    // y is 1 if the normal points up, and -1 if it points down\n    mediump vec2 normal = a_pos_normal.zw;\n    v_normal = normal;\n\n    // these transformations used to be applied in the JS and native code bases.\n    // moved them into the shader for clarity and simplicity.\n    gapwidth = gapwidth / 2.0;\n    float halfwidth = width / 2.0;\n    offset = -1.0 * offset;\n\n    float inset = gapwidth + (gapwidth > 0.0 ? ANTIALIASING : 0.0);\n    float outset = gapwidth + halfwidth * (gapwidth > 0.0 ? 2.0 : 1.0) + (halfwidth == 0.0 ? 0.0 : ANTIALIASING);\n\n    // Scale the extrusion vector down to a normal and then up by the line width\n    // of this vertex.\n    mediump vec2 dist = outset * a_extrude * scale;\n\n    // Calculate the offset when drawing a line that is to the side of the actual line.\n    // We do this by creating a vector that points towards the extrude, but rotate\n    // it when we're drawing round end points (a_direction = -1 or 1) since their\n    // extrude vector points in another direction.\n    mediump float u = 0.5 * a_direction;\n    mediump float t = 1.0 - abs(u);\n    mediump vec2 offset2 = offset * a_extrude * scale * normal.y * mat2(t, -u, u, t);\n\n    vec4 projected_extrude = u_matrix * vec4(dist / u_ratio, 0.0, 0.0);\n    gl_Position = u_matrix * vec4(pos + offset2 / u_ratio, 0.0, 1.0) + projected_extrude;\n\n    // calculate how much the perspective view squishes or stretches the extrude\n    float extrude_length_without_perspective = length(dist);\n    float extrude_length_with_perspective = length(projected_extrude.xy / gl_Position.w * u_gl_units_to_pixels);\n    v_gamma_scale = extrude_length_without_perspective / extrude_length_with_perspective;\n\n    v_width2 = vec2(outset, inset);\n}\n"},linePattern:{fragmentSource:"uniform vec2 u_texsize;\nuniform float u_fade;\nuniform mediump vec4 u_scale;\n\nuniform sampler2D u_image;\n\nvarying vec2 v_normal;\nvarying vec2 v_width2;\nvarying float v_linesofar;\nvarying float v_gamma_scale;\n\n#pragma mapbox: define lowp vec4 pattern_from\n#pragma mapbox: define lowp vec4 pattern_to\n#pragma mapbox: define lowp float blur\n#pragma mapbox: define lowp float opacity\n\nvoid main() {\n    #pragma mapbox: initialize mediump vec4 pattern_from\n    #pragma mapbox: initialize mediump vec4 pattern_to\n\n    #pragma mapbox: initialize lowp float blur\n    #pragma mapbox: initialize lowp float opacity\n\n    vec2 pattern_tl_a = pattern_from.xy;\n    vec2 pattern_br_a = pattern_from.zw;\n    vec2 pattern_tl_b = pattern_to.xy;\n    vec2 pattern_br_b = pattern_to.zw;\n\n    float pixelRatio = u_scale.x;\n    float tileZoomRatio = u_scale.y;\n    float fromScale = u_scale.z;\n    float toScale = u_scale.w;\n\n    vec2 display_size_a = vec2((pattern_br_a.x - pattern_tl_a.x) / pixelRatio, (pattern_br_a.y - pattern_tl_a.y) / pixelRatio);\n    vec2 display_size_b = vec2((pattern_br_b.x - pattern_tl_b.x) / pixelRatio, (pattern_br_b.y - pattern_tl_b.y) / pixelRatio);\n\n    vec2 pattern_size_a = vec2(display_size_a.x * fromScale / tileZoomRatio, display_size_a.y);\n    vec2 pattern_size_b = vec2(display_size_b.x * toScale / tileZoomRatio, display_size_b.y);\n\n    // Calculate the distance of the pixel from the line in pixels.\n    float dist = length(v_normal) * v_width2.s;\n\n    // Calculate the antialiasing fade factor. This is either when fading in\n    // the line in case of an offset line (v_width2.t) or when fading out\n    // (v_width2.s)\n    float blur2 = (blur + 1.0 / DEVICE_PIXEL_RATIO) * v_gamma_scale;\n    float alpha = clamp(min(dist - (v_width2.t - blur2), v_width2.s - dist) / blur2, 0.0, 1.0);\n\n    float x_a = mod(v_linesofar / pattern_size_a.x, 1.0);\n    float x_b = mod(v_linesofar / pattern_size_b.x, 1.0);\n\n    // v_normal.y is 0 at the midpoint of the line, -1 at the lower edge, 1 at the upper edge\n    // we clamp the line width outset to be between 0 and half the pattern height plus padding (2.0)\n    // to ensure we don't sample outside the designated symbol on the sprite sheet.\n    // 0.5 is added to shift the component to be bounded between 0 and 1 for interpolation of\n    // the texture coordinate\n    float y_a = 0.5 + (v_normal.y * clamp(v_width2.s, 0.0, (pattern_size_a.y + 2.0) / 2.0) / pattern_size_a.y);\n    float y_b = 0.5 + (v_normal.y * clamp(v_width2.s, 0.0, (pattern_size_b.y + 2.0) / 2.0) / pattern_size_b.y);\n    vec2 pos_a = mix(pattern_tl_a / u_texsize, pattern_br_a / u_texsize, vec2(x_a, y_a));\n    vec2 pos_b = mix(pattern_tl_b / u_texsize, pattern_br_b / u_texsize, vec2(x_b, y_b));\n\n    vec4 color = mix(texture2D(u_image, pos_a), texture2D(u_image, pos_b), u_fade);\n\n    gl_FragColor = color * alpha * opacity;\n\n#ifdef OVERDRAW_INSPECTOR\n    gl_FragColor = vec4(1.0);\n#endif\n}\n",vertexSource:"// floor(127 / 2) == 63.0\n// the maximum allowed miter limit is 2.0 at the moment. the extrude normal is\n// stored in a byte (-128..127). we scale regular normals up to length 63, but\n// there are also \"special\" normals that have a bigger length (of up to 126 in\n// this case).\n// #define scale 63.0\n#define scale 0.015873016\n\n// We scale the distance before adding it to the buffers so that we can store\n// long distances for long segments. Use this value to unscale the distance.\n#define LINE_DISTANCE_SCALE 2.0\n\n// the distance over which the line edge fades out.\n// Retina devices need a smaller distance to avoid aliasing.\n#define ANTIALIASING 1.0 / DEVICE_PIXEL_RATIO / 2.0\n\nattribute vec4 a_pos_normal;\nattribute vec4 a_data;\n\nuniform mat4 u_matrix;\nuniform vec2 u_gl_units_to_pixels;\nuniform mediump float u_ratio;\n\nvarying vec2 v_normal;\nvarying vec2 v_width2;\nvarying float v_linesofar;\nvarying float v_gamma_scale;\n\n#pragma mapbox: define lowp float blur\n#pragma mapbox: define lowp float opacity\n#pragma mapbox: define lowp float offset\n#pragma mapbox: define mediump float gapwidth\n#pragma mapbox: define mediump float width\n#pragma mapbox: define lowp vec4 pattern_from\n#pragma mapbox: define lowp vec4 pattern_to\n\nvoid main() {\n    #pragma mapbox: initialize lowp float blur\n    #pragma mapbox: initialize lowp float opacity\n    #pragma mapbox: initialize lowp float offset\n    #pragma mapbox: initialize mediump float gapwidth\n    #pragma mapbox: initialize mediump float width\n    #pragma mapbox: initialize mediump vec4 pattern_from\n    #pragma mapbox: initialize mediump vec4 pattern_to\n\n    vec2 a_extrude = a_data.xy - 128.0;\n    float a_direction = mod(a_data.z, 4.0) - 1.0;\n    float a_linesofar = (floor(a_data.z / 4.0) + a_data.w * 64.0) * LINE_DISTANCE_SCALE;\n    // float tileRatio = u_scale.y;\n    vec2 pos = a_pos_normal.xy;\n\n    // x is 1 if it's a round cap, 0 otherwise\n    // y is 1 if the normal points up, and -1 if it points down\n    mediump vec2 normal = a_pos_normal.zw;\n    v_normal = normal;\n\n    // these transformations used to be applied in the JS and native code bases.\n    // moved them into the shader for clarity and simplicity.\n    gapwidth = gapwidth / 2.0;\n    float halfwidth = width / 2.0;\n    offset = -1.0 * offset;\n\n    float inset = gapwidth + (gapwidth > 0.0 ? ANTIALIASING : 0.0);\n    float outset = gapwidth + halfwidth * (gapwidth > 0.0 ? 2.0 : 1.0) + (halfwidth == 0.0 ? 0.0 : ANTIALIASING);\n\n    // Scale the extrusion vector down to a normal and then up by the line width\n    // of this vertex.\n    mediump vec2 dist = outset * a_extrude * scale;\n\n    // Calculate the offset when drawing a line that is to the side of the actual line.\n    // We do this by creating a vector that points towards the extrude, but rotate\n    // it when we're drawing round end points (a_direction = -1 or 1) since their\n    // extrude vector points in another direction.\n    mediump float u = 0.5 * a_direction;\n    mediump float t = 1.0 - abs(u);\n    mediump vec2 offset2 = offset * a_extrude * scale * normal.y * mat2(t, -u, u, t);\n\n    vec4 projected_extrude = u_matrix * vec4(dist / u_ratio, 0.0, 0.0);\n    gl_Position = u_matrix * vec4(pos + offset2 / u_ratio, 0.0, 1.0) + projected_extrude;\n\n    // calculate how much the perspective view squishes or stretches the extrude\n    float extrude_length_without_perspective = length(dist);\n    float extrude_length_with_perspective = length(projected_extrude.xy / gl_Position.w * u_gl_units_to_pixels);\n    v_gamma_scale = extrude_length_without_perspective / extrude_length_with_perspective;\n\n    v_linesofar = a_linesofar;\n    v_width2 = vec2(outset, inset);\n}\n"},lineSDF:{fragmentSource:"\nuniform sampler2D u_image;\nuniform float u_sdfgamma;\nuniform float u_mix;\n\nvarying vec2 v_normal;\nvarying vec2 v_width2;\nvarying vec2 v_tex_a;\nvarying vec2 v_tex_b;\nvarying float v_gamma_scale;\n\n#pragma mapbox: define highp vec4 color\n#pragma mapbox: define lowp float blur\n#pragma mapbox: define lowp float opacity\n#pragma mapbox: define mediump float width\n#pragma mapbox: define lowp float floorwidth\n\nvoid main() {\n    #pragma mapbox: initialize highp vec4 color\n    #pragma mapbox: initialize lowp float blur\n    #pragma mapbox: initialize lowp float opacity\n    #pragma mapbox: initialize mediump float width\n    #pragma mapbox: initialize lowp float floorwidth\n\n    // Calculate the distance of the pixel from the line in pixels.\n    float dist = length(v_normal) * v_width2.s;\n\n    // Calculate the antialiasing fade factor. This is either when fading in\n    // the line in case of an offset line (v_width2.t) or when fading out\n    // (v_width2.s)\n    float blur2 = (blur + 1.0 / DEVICE_PIXEL_RATIO) * v_gamma_scale;\n    float alpha = clamp(min(dist - (v_width2.t - blur2), v_width2.s - dist) / blur2, 0.0, 1.0);\n\n    float sdfdist_a = texture2D(u_image, v_tex_a).a;\n    float sdfdist_b = texture2D(u_image, v_tex_b).a;\n    float sdfdist = mix(sdfdist_a, sdfdist_b, u_mix);\n    alpha *= smoothstep(0.5 - u_sdfgamma / floorwidth, 0.5 + u_sdfgamma / floorwidth, sdfdist);\n\n    gl_FragColor = color * (alpha * opacity);\n\n#ifdef OVERDRAW_INSPECTOR\n    gl_FragColor = vec4(1.0);\n#endif\n}\n",vertexSource:"// floor(127 / 2) == 63.0\n// the maximum allowed miter limit is 2.0 at the moment. the extrude normal is\n// stored in a byte (-128..127). we scale regular normals up to length 63, but\n// there are also \"special\" normals that have a bigger length (of up to 126 in\n// this case).\n// #define scale 63.0\n#define scale 0.015873016\n\n// We scale the distance before adding it to the buffers so that we can store\n// long distances for long segments. Use this value to unscale the distance.\n#define LINE_DISTANCE_SCALE 2.0\n\n// the distance over which the line edge fades out.\n// Retina devices need a smaller distance to avoid aliasing.\n#define ANTIALIASING 1.0 / DEVICE_PIXEL_RATIO / 2.0\n\nattribute vec4 a_pos_normal;\nattribute vec4 a_data;\n\nuniform mat4 u_matrix;\nuniform mediump float u_ratio;\nuniform vec2 u_patternscale_a;\nuniform float u_tex_y_a;\nuniform vec2 u_patternscale_b;\nuniform float u_tex_y_b;\nuniform vec2 u_gl_units_to_pixels;\n\nvarying vec2 v_normal;\nvarying vec2 v_width2;\nvarying vec2 v_tex_a;\nvarying vec2 v_tex_b;\nvarying float v_gamma_scale;\n\n#pragma mapbox: define highp vec4 color\n#pragma mapbox: define lowp float blur\n#pragma mapbox: define lowp float opacity\n#pragma mapbox: define mediump float gapwidth\n#pragma mapbox: define lowp float offset\n#pragma mapbox: define mediump float width\n#pragma mapbox: define lowp float floorwidth\n\nvoid main() {\n    #pragma mapbox: initialize highp vec4 color\n    #pragma mapbox: initialize lowp float blur\n    #pragma mapbox: initialize lowp float opacity\n    #pragma mapbox: initialize mediump float gapwidth\n    #pragma mapbox: initialize lowp float offset\n    #pragma mapbox: initialize mediump float width\n    #pragma mapbox: initialize lowp float floorwidth\n\n    vec2 a_extrude = a_data.xy - 128.0;\n    float a_direction = mod(a_data.z, 4.0) - 1.0;\n    float a_linesofar = (floor(a_data.z / 4.0) + a_data.w * 64.0) * LINE_DISTANCE_SCALE;\n\n    vec2 pos = a_pos_normal.xy;\n\n    // x is 1 if it's a round cap, 0 otherwise\n    // y is 1 if the normal points up, and -1 if it points down\n    mediump vec2 normal = a_pos_normal.zw;\n    v_normal = normal;\n\n    // these transformations used to be applied in the JS and native code bases.\n    // moved them into the shader for clarity and simplicity.\n    gapwidth = gapwidth / 2.0;\n    float halfwidth = width / 2.0;\n    offset = -1.0 * offset;\n\n    float inset = gapwidth + (gapwidth > 0.0 ? ANTIALIASING : 0.0);\n    float outset = gapwidth + halfwidth * (gapwidth > 0.0 ? 2.0 : 1.0) + (halfwidth == 0.0 ? 0.0 : ANTIALIASING);\n\n    // Scale the extrusion vector down to a normal and then up by the line width\n    // of this vertex.\n    mediump vec2 dist =outset * a_extrude * scale;\n\n    // Calculate the offset when drawing a line that is to the side of the actual line.\n    // We do this by creating a vector that points towards the extrude, but rotate\n    // it when we're drawing round end points (a_direction = -1 or 1) since their\n    // extrude vector points in another direction.\n    mediump float u = 0.5 * a_direction;\n    mediump float t = 1.0 - abs(u);\n    mediump vec2 offset2 = offset * a_extrude * scale * normal.y * mat2(t, -u, u, t);\n\n    vec4 projected_extrude = u_matrix * vec4(dist / u_ratio, 0.0, 0.0);\n    gl_Position = u_matrix * vec4(pos + offset2 / u_ratio, 0.0, 1.0) + projected_extrude;\n\n    // calculate how much the perspective view squishes or stretches the extrude\n    float extrude_length_without_perspective = length(dist);\n    float extrude_length_with_perspective = length(projected_extrude.xy / gl_Position.w * u_gl_units_to_pixels);\n    v_gamma_scale = extrude_length_without_perspective / extrude_length_with_perspective;\n\n    v_tex_a = vec2(a_linesofar * u_patternscale_a.x / floorwidth, normal.y * u_patternscale_a.y + u_tex_y_a);\n    v_tex_b = vec2(a_linesofar * u_patternscale_b.x / floorwidth, normal.y * u_patternscale_b.y + u_tex_y_b);\n\n    v_width2 = vec2(outset, inset);\n}\n"},raster:{fragmentSource:"uniform float u_fade_t;\nuniform float u_opacity;\nuniform sampler2D u_image0;\nuniform sampler2D u_image1;\nvarying vec2 v_pos0;\nvarying vec2 v_pos1;\n\nuniform float u_brightness_low;\nuniform float u_brightness_high;\n\nuniform float u_saturation_factor;\nuniform float u_contrast_factor;\nuniform vec3 u_spin_weights;\n\nvoid main() {\n\n    // read and cross-fade colors from the main and parent tiles\n    vec4 color0 = texture2D(u_image0, v_pos0);\n    vec4 color1 = texture2D(u_image1, v_pos1);\n    if (color0.a > 0.0) {\n        color0.rgb = color0.rgb / color0.a;\n    }\n    if (color1.a > 0.0) {\n        color1.rgb = color1.rgb / color1.a;\n    }\n    vec4 color = mix(color0, color1, u_fade_t);\n    color.a *= u_opacity;\n    vec3 rgb = color.rgb;\n\n    // spin\n    rgb = vec3(\n        dot(rgb, u_spin_weights.xyz),\n        dot(rgb, u_spin_weights.zxy),\n        dot(rgb, u_spin_weights.yzx));\n\n    // saturation\n    float average = (color.r + color.g + color.b) / 3.0;\n    rgb += (average - rgb) * u_saturation_factor;\n\n    // contrast\n    rgb = (rgb - 0.5) * u_contrast_factor + 0.5;\n\n    // brightness\n    vec3 u_high_vec = vec3(u_brightness_low, u_brightness_low, u_brightness_low);\n    vec3 u_low_vec = vec3(u_brightness_high, u_brightness_high, u_brightness_high);\n\n    gl_FragColor = vec4(mix(u_high_vec, u_low_vec, rgb) * color.a, color.a);\n\n#ifdef OVERDRAW_INSPECTOR\n    gl_FragColor = vec4(1.0);\n#endif\n}\n",vertexSource:"uniform mat4 u_matrix;\nuniform vec2 u_tl_parent;\nuniform float u_scale_parent;\nuniform float u_buffer_scale;\n\nattribute vec2 a_pos;\nattribute vec2 a_texture_pos;\n\nvarying vec2 v_pos0;\nvarying vec2 v_pos1;\n\nvoid main() {\n    gl_Position = u_matrix * vec4(a_pos, 0, 1);\n    // We are using Int16 for texture position coordinates to give us enough precision for\n    // fractional coordinates. We use 8192 to scale the texture coordinates in the buffer\n    // as an arbitrarily high number to preserve adequate precision when rendering.\n    // This is also the same value as the EXTENT we are using for our tile buffer pos coordinates,\n    // so math for modifying either is consistent.\n    v_pos0 = (((a_texture_pos / 8192.0) - 0.5) / u_buffer_scale ) + 0.5;\n    v_pos1 = (v_pos0 * u_scale_parent) + u_tl_parent;\n}\n"},symbolIcon:{fragmentSource:"uniform sampler2D u_texture;\n\n#pragma mapbox: define lowp float opacity\n\nvarying vec2 v_tex;\nvarying float v_fade_opacity;\n\nvoid main() {\n    #pragma mapbox: initialize lowp float opacity\n\n    lowp float alpha = opacity * v_fade_opacity;\n    gl_FragColor = texture2D(u_texture, v_tex) * alpha;\n\n#ifdef OVERDRAW_INSPECTOR\n    gl_FragColor = vec4(1.0);\n#endif\n}\n",vertexSource:"const float PI = 3.141592653589793;\n\nattribute vec4 a_pos_offset;\nattribute vec4 a_data;\nattribute vec3 a_projected_pos;\nattribute float a_fade_opacity;\n\nuniform bool u_is_size_zoom_constant;\nuniform bool u_is_size_feature_constant;\nuniform highp float u_size_t; // used to interpolate between zoom stops when size is a composite function\nuniform highp float u_size; // used when size is both zoom and feature constant\nuniform highp float u_camera_to_center_distance;\nuniform highp float u_pitch;\nuniform bool u_rotate_symbol;\nuniform highp float u_aspect_ratio;\nuniform float u_fade_change;\n\n#pragma mapbox: define lowp float opacity\n\nuniform mat4 u_matrix;\nuniform mat4 u_label_plane_matrix;\nuniform mat4 u_gl_coord_matrix;\n\nuniform bool u_is_text;\nuniform bool u_pitch_with_map;\n\nuniform vec2 u_texsize;\n\nvarying vec2 v_tex;\nvarying float v_fade_opacity;\n\nvoid main() {\n    #pragma mapbox: initialize lowp float opacity\n\n    vec2 a_pos = a_pos_offset.xy;\n    vec2 a_offset = a_pos_offset.zw;\n\n    vec2 a_tex = a_data.xy;\n    vec2 a_size = a_data.zw;\n\n    highp float segment_angle = -a_projected_pos[2];\n\n    float size;\n    if (!u_is_size_zoom_constant && !u_is_size_feature_constant) {\n        size = mix(a_size[0], a_size[1], u_size_t) / 256.0;\n    } else if (u_is_size_zoom_constant && !u_is_size_feature_constant) {\n        size = a_size[0] / 256.0;\n    } else if (!u_is_size_zoom_constant && u_is_size_feature_constant) {\n        size = u_size;\n    } else {\n        size = u_size;\n    }\n\n    vec4 projectedPoint = u_matrix * vec4(a_pos, 0, 1);\n    highp float camera_to_anchor_distance = projectedPoint.w;\n    // See comments in symbol_sdf.vertex\n    highp float distance_ratio = u_pitch_with_map ?\n        camera_to_anchor_distance / u_camera_to_center_distance :\n        u_camera_to_center_distance / camera_to_anchor_distance;\n    highp float perspective_ratio = clamp(\n            0.5 + 0.5 * distance_ratio,\n            0.0, // Prevents oversized near-field symbols in pitched/overzoomed tiles\n            4.0);\n\n    size *= perspective_ratio;\n\n    float fontScale = u_is_text ? size / 24.0 : size;\n\n    highp float symbol_rotation = 0.0;\n    if (u_rotate_symbol) {\n        // See comments in symbol_sdf.vertex\n        vec4 offsetProjectedPoint = u_matrix * vec4(a_pos + vec2(1, 0), 0, 1);\n\n        vec2 a = projectedPoint.xy / projectedPoint.w;\n        vec2 b = offsetProjectedPoint.xy / offsetProjectedPoint.w;\n\n        symbol_rotation = atan((b.y - a.y) / u_aspect_ratio, b.x - a.x);\n    }\n\n    highp float angle_sin = sin(segment_angle + symbol_rotation);\n    highp float angle_cos = cos(segment_angle + symbol_rotation);\n    mat2 rotation_matrix = mat2(angle_cos, -1.0 * angle_sin, angle_sin, angle_cos);\n\n    vec4 projected_pos = u_label_plane_matrix * vec4(a_projected_pos.xy, 0.0, 1.0);\n    gl_Position = u_gl_coord_matrix * vec4(projected_pos.xy / projected_pos.w + rotation_matrix * (a_offset / 32.0 * fontScale), 0.0, 1.0);\n\n    v_tex = a_tex / u_texsize;\n    vec2 fade_opacity = unpack_opacity(a_fade_opacity);\n    float fade_change = fade_opacity[1] > 0.5 ? u_fade_change : -u_fade_change;\n    v_fade_opacity = max(0.0, min(1.0, fade_opacity[0] + fade_change));\n}\n"},symbolSDF:{fragmentSource:"#define SDF_PX 8.0\n#define EDGE_GAMMA 0.105/DEVICE_PIXEL_RATIO\n\nuniform bool u_is_halo;\n#pragma mapbox: define highp vec4 fill_color\n#pragma mapbox: define highp vec4 halo_color\n#pragma mapbox: define lowp float opacity\n#pragma mapbox: define lowp float halo_width\n#pragma mapbox: define lowp float halo_blur\n\nuniform sampler2D u_texture;\nuniform highp float u_gamma_scale;\nuniform bool u_is_text;\n\nvarying vec2 v_data0;\nvarying vec3 v_data1;\n\nvoid main() {\n    #pragma mapbox: initialize highp vec4 fill_color\n    #pragma mapbox: initialize highp vec4 halo_color\n    #pragma mapbox: initialize lowp float opacity\n    #pragma mapbox: initialize lowp float halo_width\n    #pragma mapbox: initialize lowp float halo_blur\n\n    vec2 tex = v_data0.xy;\n    float gamma_scale = v_data1.x;\n    float size = v_data1.y;\n    float fade_opacity = v_data1[2];\n\n    float fontScale = u_is_text ? size / 24.0 : size;\n\n    lowp vec4 color = fill_color;\n    highp float gamma = EDGE_GAMMA / (fontScale * u_gamma_scale);\n    lowp float buff = (256.0 - 64.0) / 256.0;\n    if (u_is_halo) {\n        color = halo_color;\n        gamma = (halo_blur * 1.19 / SDF_PX + EDGE_GAMMA) / (fontScale * u_gamma_scale);\n        buff = (6.0 - halo_width / fontScale) / SDF_PX;\n    }\n\n    lowp float dist = texture2D(u_texture, tex).a;\n    highp float gamma_scaled = gamma * gamma_scale;\n    highp float alpha = smoothstep(buff - gamma_scaled, buff + gamma_scaled, dist);\n\n    gl_FragColor = color * (alpha * opacity * fade_opacity);\n\n#ifdef OVERDRAW_INSPECTOR\n    gl_FragColor = vec4(1.0);\n#endif\n}\n",vertexSource:"const float PI = 3.141592653589793;\n\nattribute vec4 a_pos_offset;\nattribute vec4 a_data;\nattribute vec3 a_projected_pos;\nattribute float a_fade_opacity;\n\n// contents of a_size vary based on the type of property value\n// used for {text,icon}-size.\n// For constants, a_size is disabled.\n// For source functions, we bind only one value per vertex: the value of {text,icon}-size evaluated for the current feature.\n// For composite functions:\n// [ text-size(lowerZoomStop, feature),\n//   text-size(upperZoomStop, feature) ]\nuniform bool u_is_size_zoom_constant;\nuniform bool u_is_size_feature_constant;\nuniform highp float u_size_t; // used to interpolate between zoom stops when size is a composite function\nuniform highp float u_size; // used when size is both zoom and feature constant\n\n#pragma mapbox: define highp vec4 fill_color\n#pragma mapbox: define highp vec4 halo_color\n#pragma mapbox: define lowp float opacity\n#pragma mapbox: define lowp float halo_width\n#pragma mapbox: define lowp float halo_blur\n\nuniform mat4 u_matrix;\nuniform mat4 u_label_plane_matrix;\nuniform mat4 u_gl_coord_matrix;\n\nuniform bool u_is_text;\nuniform bool u_pitch_with_map;\nuniform highp float u_pitch;\nuniform bool u_rotate_symbol;\nuniform highp float u_aspect_ratio;\nuniform highp float u_camera_to_center_distance;\nuniform float u_fade_change;\n\nuniform vec2 u_texsize;\n\nvarying vec2 v_data0;\nvarying vec3 v_data1;\n\nvoid main() {\n    #pragma mapbox: initialize highp vec4 fill_color\n    #pragma mapbox: initialize highp vec4 halo_color\n    #pragma mapbox: initialize lowp float opacity\n    #pragma mapbox: initialize lowp float halo_width\n    #pragma mapbox: initialize lowp float halo_blur\n\n    vec2 a_pos = a_pos_offset.xy;\n    vec2 a_offset = a_pos_offset.zw;\n\n    vec2 a_tex = a_data.xy;\n    vec2 a_size = a_data.zw;\n\n    highp float segment_angle = -a_projected_pos[2];\n    float size;\n\n    if (!u_is_size_zoom_constant && !u_is_size_feature_constant) {\n        size = mix(a_size[0], a_size[1], u_size_t) / 256.0;\n    } else if (u_is_size_zoom_constant && !u_is_size_feature_constant) {\n        size = a_size[0] / 256.0;\n    } else if (!u_is_size_zoom_constant && u_is_size_feature_constant) {\n        size = u_size;\n    } else {\n        size = u_size;\n    }\n\n    vec4 projectedPoint = u_matrix * vec4(a_pos, 0, 1);\n    highp float camera_to_anchor_distance = projectedPoint.w;\n    // If the label is pitched with the map, layout is done in pitched space,\n    // which makes labels in the distance smaller relative to viewport space.\n    // We counteract part of that effect by multiplying by the perspective ratio.\n    // If the label isn't pitched with the map, we do layout in viewport space,\n    // which makes labels in the distance larger relative to the features around\n    // them. We counteract part of that effect by dividing by the perspective ratio.\n    highp float distance_ratio = u_pitch_with_map ?\n        camera_to_anchor_distance / u_camera_to_center_distance :\n        u_camera_to_center_distance / camera_to_anchor_distance;\n    highp float perspective_ratio = clamp(\n        0.5 + 0.5 * distance_ratio,\n        0.0, // Prevents oversized near-field symbols in pitched/overzoomed tiles\n        4.0);\n\n    size *= perspective_ratio;\n\n    float fontScale = u_is_text ? size / 24.0 : size;\n\n    highp float symbol_rotation = 0.0;\n    if (u_rotate_symbol) {\n        // Point labels with 'rotation-alignment: map' are horizontal with respect to tile units\n        // To figure out that angle in projected space, we draw a short horizontal line in tile\n        // space, project it, and measure its angle in projected space.\n        vec4 offsetProjectedPoint = u_matrix * vec4(a_pos + vec2(1, 0), 0, 1);\n\n        vec2 a = projectedPoint.xy / projectedPoint.w;\n        vec2 b = offsetProjectedPoint.xy / offsetProjectedPoint.w;\n\n        symbol_rotation = atan((b.y - a.y) / u_aspect_ratio, b.x - a.x);\n    }\n\n    highp float angle_sin = sin(segment_angle + symbol_rotation);\n    highp float angle_cos = cos(segment_angle + symbol_rotation);\n    mat2 rotation_matrix = mat2(angle_cos, -1.0 * angle_sin, angle_sin, angle_cos);\n\n    vec4 projected_pos = u_label_plane_matrix * vec4(a_projected_pos.xy, 0.0, 1.0);\n    gl_Position = u_gl_coord_matrix * vec4(projected_pos.xy / projected_pos.w + rotation_matrix * (a_offset / 32.0 * fontScale), 0.0, 1.0);\n    float gamma_scale = gl_Position.w;\n\n    vec2 tex = a_tex / u_texsize;\n    vec2 fade_opacity = unpack_opacity(a_fade_opacity);\n    float fade_change = fade_opacity[1] > 0.5 ? u_fade_change : -u_fade_change;\n    float interpolated_fade_opacity = max(0.0, min(1.0, fade_opacity[0] + fade_change));\n\n    v_data0 = vec2(tex.x, tex.y);\n    v_data1 = vec3(gamma_scale, size, interpolated_fade_opacity);\n}\n"}},We=/#pragma mapbox: ([\w]+) ([\w]+) ([\w]+) ([\w]+)/g,Xe=function(t){var e=Ge[t],i={};e.fragmentSource=e.fragmentSource.replace(We,function(t,e,n,o,r){return i[r]=!0,"define"===e?"\n#ifndef HAS_UNIFORM_u_"+r+"\nvarying "+n+" "+o+" "+r+";\n#else\nuniform "+n+" "+o+" u_"+r+";\n#endif\n":"\n#ifdef HAS_UNIFORM_u_"+r+"\n    "+n+" "+o+" "+r+" = u_"+r+";\n#endif\n"}),e.vertexSource=e.vertexSource.replace(We,function(t,e,n,o,r){var a="float"===o?"vec2":"vec4",s=r.match(/color/)?"color":a;return i[r]?"define"===e?"\n#ifndef HAS_UNIFORM_u_"+r+"\nuniform lowp float a_"+r+"_t;\nattribute "+n+" "+a+" a_"+r+";\nvarying "+n+" "+o+" "+r+";\n#else\nuniform "+n+" "+o+" u_"+r+";\n#endif\n":"vec4"===s?"\n#ifndef HAS_UNIFORM_u_"+r+"\n    "+r+" = a_"+r+";\n#else\n    "+n+" "+o+" "+r+" = u_"+r+";\n#endif\n":"\n#ifndef HAS_UNIFORM_u_"+r+"\n    "+r+" = unpack_mix_"+s+"(a_"+r+", a_"+r+"_t);\n#else\n    "+n+" "+o+" "+r+" = u_"+r+";\n#endif\n":"define"===e?"\n#ifndef HAS_UNIFORM_u_"+r+"\nuniform lowp float a_"+r+"_t;\nattribute "+n+" "+a+" a_"+r+";\n#else\nuniform "+n+" "+o+" u_"+r+";\n#endif\n":"vec4"===s?"\n#ifndef HAS_UNIFORM_u_"+r+"\n    "+n+" "+o+" "+r+" = a_"+r+";\n#else\n    "+n+" "+o+" "+r+" = u_"+r+";\n#endif\n":"\n#ifndef HAS_UNIFORM_u_"+r+"\n    "+n+" "+o+" "+r+" = unpack_mix_"+s+"(a_"+r+", a_"+r+"_t);\n#else\n    "+n+" "+o+" "+r+" = u_"+r+";\n#endif\n"})};for(var He in Ge)Xe(He);var Ke=Ge,Ye=function(){this.boundProgram=null,this.boundLayoutVertexBuffer=null,this.boundPaintVertexBuffers=[],this.boundIndexBuffer=null,this.boundVertexOffset=null,this.boundDynamicVertexBuffer=null,this.vao=null};Ye.prototype.bind=function(t,e,i,n,o,r,a,s){this.context=t;for(var l=this.boundPaintVertexBuffers.length!==n.length,c=0;!l&&c<n.length;c++)this.boundPaintVertexBuffers[c]!==n[c]&&(l=!0);var h=!this.vao||this.boundProgram!==e||this.boundLayoutVertexBuffer!==i||l||this.boundIndexBuffer!==o||this.boundVertexOffset!==r||this.boundDynamicVertexBuffer!==a||this.boundDynamicVertexBuffer2!==s;!t.extVertexArrayObject||h?this.freshBind(e,i,n,o,r,a,s):(t.bindVertexArrayOES.set(this.vao),a&&a.bind(),o&&o.dynamicDraw&&o.bind(),s&&s.bind())},Ye.prototype.freshBind=function(t,e,i,n,o,r,a){var s,l=t.numAttributes,c=this.context,h=c.gl;if(c.extVertexArrayObject)this.vao&&this.destroy(),this.vao=c.extVertexArrayObject.createVertexArrayOES(),c.bindVertexArrayOES.set(this.vao),s=0,this.boundProgram=t,this.boundLayoutVertexBuffer=e,this.boundPaintVertexBuffers=i,this.boundIndexBuffer=n,this.boundVertexOffset=o,this.boundDynamicVertexBuffer=r,this.boundDynamicVertexBuffer2=a;else{s=c.currentNumAttributes||0;for(var u=l;u<s;u++)h.disableVertexAttribArray(u)}e.enableAttributes(h,t);for(var p=0,d=i;p<d.length;p+=1){d[p].enableAttributes(h,t)}r&&r.enableAttributes(h,t),a&&a.enableAttributes(h,t),e.bind(),e.setVertexAttribPointers(h,t,o);for(var _=0,f=i;_<f.length;_+=1){var m=f[_];m.bind(),m.setVertexAttribPointers(h,t,o)}r&&(r.bind(),r.setVertexAttribPointers(h,t,o)),n&&n.bind(),a&&(a.bind(),a.setVertexAttribPointers(h,t,o)),c.currentNumAttributes=l},Ye.prototype.destroy=function(){this.vao&&(this.context.extVertexArrayObject.deleteVertexArrayOES(this.vao),this.vao=null)};var Je=function(e,i,n,o,r){var a=e.gl;this.program=a.createProgram();var s=n.defines().concat("#define DEVICE_PIXEL_RATIO "+t.browser.devicePixelRatio.toFixed(1));r&&s.push("#define OVERDRAW_INSPECTOR;");var l=s.concat(Ke.prelude.fragmentSource,i.fragmentSource).join("\n"),c=s.concat(Ke.prelude.vertexSource,i.vertexSource).join("\n"),h=a.createShader(a.FRAGMENT_SHADER);a.shaderSource(h,l),a.compileShader(h),a.attachShader(this.program,h);var u=a.createShader(a.VERTEX_SHADER);a.shaderSource(u,c),a.compileShader(u),a.attachShader(this.program,u);for(var p=n.layoutAttributes||[],d=0;d<p.length;d++)a.bindAttribLocation(this.program,d,p[d].name);a.linkProgram(this.program),this.numAttributes=a.getProgramParameter(this.program,a.ACTIVE_ATTRIBUTES),this.attributes={};for(var _={},f=0;f<this.numAttributes;f++){var m=a.getActiveAttrib(this.program,f);m&&(this.attributes[m.name]=a.getAttribLocation(this.program,m.name))}for(var g=a.getProgramParameter(this.program,a.ACTIVE_UNIFORMS),v=0;v<g;v++){var y=a.getActiveUniform(this.program,v);y&&(_[y.name]=a.getUniformLocation(this.program,y.name))}this.fixedUniforms=o(e,_),this.binderUniforms=n.getUniforms(e,_)};function Qe(e,i,n){var o=1/ve(n,1,i.transform.tileZoom),r=Math.pow(2,n.tileID.overscaledZ),a=n.tileSize*Math.pow(2,i.transform.tileZoom)/r,s=a*(n.tileID.canonical.x+n.tileID.wrap*r),l=a*n.tileID.canonical.y;return{u_image:0,u_texsize:n.imageAtlasTexture.size,u_scale:[t.browser.devicePixelRatio,o,e.fromScale,e.toScale],u_fade:e.t,u_pixel_coord_upper:[s>>16,l>>16],u_pixel_coord_lower:[65535&s,65535&l]}}Je.prototype.draw=function(t,e,i,n,o,r,a,s,l,c,h,u,p,d,_){var f,m=t.gl;for(var g in t.program.set(this.program),t.setDepthMode(i),t.setStencilMode(n),t.setColorMode(o),this.fixedUniforms)this.fixedUniforms[g].set(r[g]);p&&p.setUniforms(t,this.binderUniforms,h,{zoom:u});for(var v=(f={},f[m.LINES]=2,f[m.TRIANGLES]=3,f[m.LINE_STRIP]=1,f)[e],y=0,x=c.get();y<x.length;y+=1){var b=x[y],w=b.vaos||(b.vaos={});(w[a]||(w[a]=new Ye)).bind(t,this,s,p?p.getPaintVertexBuffers():[],l,b.vertexOffset,d,_),m.drawElements(e,b.primitiveLength*v,m.UNSIGNED_SHORT,b.primitiveOffset*v*2)}};var $e=function(e,i){var n=i.style.light,o=n.properties.get("position"),r=[o.x,o.y,o.z],a=t.create$2();"viewport"===n.properties.get("anchor")&&t.fromRotation(a,-i.transform.angle),t.transformMat3(r,r,a);var s=n.properties.get("color");return{u_matrix:e,u_lightpos:r,u_lightintensity:n.properties.get("intensity"),u_lightcolor:[s.r,s.g,s.b]}},ti=function(e,i,n,o,r){return t.extend($e(e,i),Qe(o,i,r),{u_height_factor:-Math.pow(2,n.overscaledZ)/r.tileSize/8})},ei=function(e,i,n){var o=t.create();t.ortho(o,0,e.width,e.height,0,0,1);var r=e.context.gl;return{u_matrix:o,u_world:[r.drawingBufferWidth,r.drawingBufferHeight],u_image:n,u_opacity:i.paint.get("fill-extrusion-opacity")}},ii=function(t){return{u_matrix:t}},ni=function(e,i,n,o){return t.extend(ii(e),Qe(n,i,o))},oi=function(t,e){return{u_matrix:t,u_world:e}},ri=function(e,i,n,o,r){return t.extend(ni(e,i,n,o),{u_world:r})},ai=function(t,e,i,n){var o,r,a=t.transform;if("map"===n.paint.get("circle-pitch-alignment")){var s=ve(i,1,a.zoom);o=!0,r=[s,s]}else o=!1,r=a.pixelsToGLUnits;return{u_camera_to_center_distance:a.cameraToCenterDistance,u_scale_with_map:+("map"===n.paint.get("circle-pitch-scale")),u_matrix:t.translatePosMatrix(e.posMatrix,i,n.paint.get("circle-translate"),n.paint.get("circle-translate-anchor")),u_pitch_with_map:+o,u_extrude_scale:r}},si=function(e,i){return{u_matrix:new t.UniformMatrix4f(e,i.u_matrix),u_camera_to_center_distance:new t.Uniform1f(e,i.u_camera_to_center_distance),u_pixels_to_tile_units:new t.Uniform1f(e,i.u_pixels_to_tile_units),u_extrude_scale:new t.Uniform2f(e,i.u_extrude_scale),u_overscale_factor:new t.Uniform1f(e,i.u_overscale_factor)}},li=function(t,e,i){var n=ve(i,1,e.zoom),o=Math.pow(2,e.zoom-i.tileID.overscaledZ),r=i.tileID.overscaleFactor();return{u_matrix:t,u_camera_to_center_distance:e.cameraToCenterDistance,u_pixels_to_tile_units:n,u_extrude_scale:[e.pixelsToGLUnits[0]/(n*o),e.pixelsToGLUnits[1]/(n*o)],u_overscale_factor:r}},ci=function(t,e){return{u_matrix:t,u_color:e}},hi=function(t){return{u_matrix:t}},ui=function(t,e,i,n){return{u_matrix:t,u_extrude_scale:ve(e,1,i),u_intensity:n}},pi=function(e,i,n,o){var r=t.create();t.ortho(r,0,e.width,e.height,0,0,1);var a=e.context.gl;return{u_matrix:r,u_world:[a.drawingBufferWidth,a.drawingBufferHeight],u_image:n,u_color_ramp:o,u_opacity:i.paint.get("heatmap-opacity")}},di=function(e,i,n){var o=n.paint.get("hillshade-shadow-color"),r=n.paint.get("hillshade-highlight-color"),a=n.paint.get("hillshade-accent-color"),s=n.paint.get("hillshade-illumination-direction")*(Math.PI/180);return"viewport"===n.paint.get("hillshade-illumination-anchor")&&(s-=e.transform.angle),{u_matrix:e.transform.calculatePosMatrix(i.tileID.toUnwrapped(),!0),u_image:0,u_latrange:function(e,i){var n=i.toCoordinate(),o=new t.Coordinate(n.column,n.row+1,n.zoom);return[e.transform.coordinateLocation(n).lat,e.transform.coordinateLocation(o).lat]}(e,i.tileID),u_light:[n.paint.get("hillshade-exaggeration"),s],u_shadow:o,u_highlight:r,u_accent:a}},_i=function(e,i){var n=e.dem.dim,o=t.create();return t.ortho(o,0,t.EXTENT,-t.EXTENT,0,0,1),t.translate(o,o,[0,-t.EXTENT,0]),{u_matrix:o,u_image:1,u_dimension:[2*n,2*n],u_zoom:e.tileID.overscaledZ,u_maxzoom:i}};var fi=function(t,e,i){var n=t.transform;return{u_matrix:xi(t,e,i),u_ratio:1/ve(e,1,n.zoom),u_gl_units_to_pixels:[1/n.pixelsToGLUnits[0],1/n.pixelsToGLUnits[1]]}},mi=function(e,i,n){return t.extend(fi(e,i,n),{u_image:0})},gi=function(e,i,n,o){var r=e.transform,a=yi(i,r);return{u_matrix:xi(e,i,n),u_texsize:i.imageAtlasTexture.size,u_ratio:1/ve(i,1,r.zoom),u_image:0,u_scale:[t.browser.devicePixelRatio,a,o.fromScale,o.toScale],u_fade:o.t,u_gl_units_to_pixels:[1/r.pixelsToGLUnits[0],1/r.pixelsToGLUnits[1]]}},vi=function(e,i,n,o,r){var a=e.transform,s=e.lineAtlas,l=yi(i,a),c="round"===n.layout.get("line-cap"),h=s.getDash(o.from,c),u=s.getDash(o.to,c),p=h.width*r.fromScale,d=u.width*r.toScale;return t.extend(fi(e,i,n),{u_patternscale_a:[l/p,-h.height/2],u_patternscale_b:[l/d,-u.height/2],u_sdfgamma:s.width/(256*Math.min(p,d)*t.browser.devicePixelRatio)/2,u_image:0,u_tex_y_a:h.y,u_tex_y_b:u.y,u_mix:r.t})};function yi(t,e){return 1/ve(t,1,e.tileZoom)}function xi(t,e,i){return t.translatePosMatrix(e.tileID.posMatrix,e,i.paint.get("line-translate"),i.paint.get("line-translate-anchor"))}var bi=function(t,e,i,n,o){return{u_matrix:t,u_tl_parent:e,u_scale_parent:i,u_buffer_scale:1,u_fade_t:n.mix,u_opacity:n.opacity*o.paint.get("raster-opacity"),u_image0:0,u_image1:1,u_brightness_low:o.paint.get("raster-brightness-min"),u_brightness_high:o.paint.get("raster-brightness-max"),u_saturation_factor:(a=o.paint.get("raster-saturation"),a>0?1-1/(1.001-a):-a),u_contrast_factor:(r=o.paint.get("raster-contrast"),r>0?1/(1-r):1+r),u_spin_weights:function(t){t*=Math.PI/180;var e=Math.sin(t),i=Math.cos(t);return[(2*i+1)/3,(-Math.sqrt(3)*e-i+1)/3,(Math.sqrt(3)*e-i+1)/3]}(o.paint.get("raster-hue-rotate"))};var r,a};var wi=function(t,e,i,n,o,r,a,s,l,c){var h=o.transform;return{u_is_size_zoom_constant:+("constant"===t||"source"===t),u_is_size_feature_constant:+("constant"===t||"camera"===t),u_size_t:e?e.uSizeT:0,u_size:e?e.uSize:0,u_camera_to_center_distance:h.cameraToCenterDistance,u_pitch:h.pitch/360*2*Math.PI,u_rotate_symbol:+i,u_aspect_ratio:h.width/h.height,u_fade_change:o.options.fadeDuration?o.symbolFadeChange:1,u_matrix:r,u_label_plane_matrix:a,u_gl_coord_matrix:s,u_is_text:+l,u_pitch_with_map:+n,u_texsize:c,u_texture:0}},Ei=function(e,i,n,o,r,a,s,l,c,h,u){var p=r.transform;return t.extend(wi(e,i,n,o,r,a,s,l,c,h),{u_gamma_scale:o?Math.cos(p._pitch)*p.cameraToCenterDistance:1,u_is_halo:+u})},Ti=function(t,e,i){return{u_matrix:t,u_opacity:e,u_color:i}},Si=function(e,i,n,o,r,a){return t.extend(function(t,e,i,n){var o=i.imageManager.getPattern(t.from),r=i.imageManager.getPattern(t.to),a=i.imageManager.getPixelSize(),s=a.width,l=a.height,c=Math.pow(2,n.tileID.overscaledZ),h=n.tileSize*Math.pow(2,i.transform.tileZoom)/c,u=h*(n.tileID.canonical.x+n.tileID.wrap*c),p=h*n.tileID.canonical.y;return{u_image:0,u_pattern_tl_a:o.tl,u_pattern_br_a:o.br,u_pattern_tl_b:r.tl,u_pattern_br_b:r.br,u_texsize:[s,l],u_mix:e.t,u_pattern_size_a:o.displaySize,u_pattern_size_b:r.displaySize,u_scale_a:e.fromScale,u_scale_b:e.toScale,u_tile_units_to_pixels:1/ve(n,1,i.transform.tileZoom),u_pixel_coord_upper:[u>>16,p>>16],u_pixel_coord_lower:[65535&u,65535&p]}}(o,a,n,r),{u_matrix:e,u_opacity:i})},Ii={fillExtrusion:function(e,i){return{u_matrix:new t.UniformMatrix4f(e,i.u_matrix),u_lightpos:new t.Uniform3f(e,i.u_lightpos),u_lightintensity:new t.Uniform1f(e,i.u_lightintensity),u_lightcolor:new t.Uniform3f(e,i.u_lightcolor)}},fillExtrusionPattern:function(e,i){return{u_matrix:new t.UniformMatrix4f(e,i.u_matrix),u_lightpos:new t.Uniform3f(e,i.u_lightpos),u_lightintensity:new t.Uniform1f(e,i.u_lightintensity),u_lightcolor:new t.Uniform3f(e,i.u_lightcolor),u_height_factor:new t.Uniform1f(e,i.u_height_factor),u_image:new t.Uniform1i(e,i.u_image),u_texsize:new t.Uniform2f(e,i.u_texsize),u_pixel_coord_upper:new t.Uniform2f(e,i.u_pixel_coord_upper),u_pixel_coord_lower:new t.Uniform2f(e,i.u_pixel_coord_lower),u_scale:new t.Uniform4f(e,i.u_scale),u_fade:new t.Uniform1f(e,i.u_fade)}},extrusionTexture:function(e,i){return{u_matrix:new t.UniformMatrix4f(e,i.u_matrix),u_world:new t.Uniform2f(e,i.u_world),u_image:new t.Uniform1i(e,i.u_image),u_opacity:new t.Uniform1f(e,i.u_opacity)}},fill:function(e,i){return{u_matrix:new t.UniformMatrix4f(e,i.u_matrix)}},fillPattern:function(e,i){return{u_matrix:new t.UniformMatrix4f(e,i.u_matrix),u_image:new t.Uniform1i(e,i.u_image),u_texsize:new t.Uniform2f(e,i.u_texsize),u_pixel_coord_upper:new t.Uniform2f(e,i.u_pixel_coord_upper),u_pixel_coord_lower:new t.Uniform2f(e,i.u_pixel_coord_lower),u_scale:new t.Uniform4f(e,i.u_scale),u_fade:new t.Uniform1f(e,i.u_fade)}},fillOutline:function(e,i){return{u_matrix:new t.UniformMatrix4f(e,i.u_matrix),u_world:new t.Uniform2f(e,i.u_world)}},fillOutlinePattern:function(e,i){return{u_matrix:new t.UniformMatrix4f(e,i.u_matrix),u_world:new t.Uniform2f(e,i.u_world),u_image:new t.Uniform1i(e,i.u_image),u_texsize:new t.Uniform2f(e,i.u_texsize),u_pixel_coord_upper:new t.Uniform2f(e,i.u_pixel_coord_upper),u_pixel_coord_lower:new t.Uniform2f(e,i.u_pixel_coord_lower),u_scale:new t.Uniform4f(e,i.u_scale),u_fade:new t.Uniform1f(e,i.u_fade)}},circle:function(e,i){return{u_camera_to_center_distance:new t.Uniform1f(e,i.u_camera_to_center_distance),u_scale_with_map:new t.Uniform1i(e,i.u_scale_with_map),u_pitch_with_map:new t.Uniform1i(e,i.u_pitch_with_map),u_extrude_scale:new t.Uniform2f(e,i.u_extrude_scale),u_matrix:new t.UniformMatrix4f(e,i.u_matrix)}},collisionBox:si,collisionCircle:si,debug:function(e,i){return{u_color:new t.UniformColor(e,i.u_color),u_matrix:new t.UniformMatrix4f(e,i.u_matrix)}},clippingMask:function(e,i){return{u_matrix:new t.UniformMatrix4f(e,i.u_matrix)}},heatmap:function(e,i){return{u_extrude_scale:new t.Uniform1f(e,i.u_extrude_scale),u_intensity:new t.Uniform1f(e,i.u_intensity),u_matrix:new t.UniformMatrix4f(e,i.u_matrix)}},heatmapTexture:function(e,i){return{u_matrix:new t.UniformMatrix4f(e,i.u_matrix),u_world:new t.Uniform2f(e,i.u_world),u_image:new t.Uniform1i(e,i.u_image),u_color_ramp:new t.Uniform1i(e,i.u_color_ramp),u_opacity:new t.Uniform1f(e,i.u_opacity)}},hillshade:function(e,i){return{u_matrix:new t.UniformMatrix4f(e,i.u_matrix),u_image:new t.Uniform1i(e,i.u_image),u_latrange:new t.Uniform2f(e,i.u_latrange),u_light:new t.Uniform2f(e,i.u_light),u_shadow:new t.UniformColor(e,i.u_shadow),u_highlight:new t.UniformColor(e,i.u_highlight),u_accent:new t.UniformColor(e,i.u_accent)}},hillshadePrepare:function(e,i){return{u_matrix:new t.UniformMatrix4f(e,i.u_matrix),u_image:new t.Uniform1i(e,i.u_image),u_dimension:new t.Uniform2f(e,i.u_dimension),u_zoom:new t.Uniform1f(e,i.u_zoom),u_maxzoom:new t.Uniform1f(e,i.u_maxzoom)}},line:function(e,i){return{u_matrix:new t.UniformMatrix4f(e,i.u_matrix),u_ratio:new t.Uniform1f(e,i.u_ratio),u_gl_units_to_pixels:new t.Uniform2f(e,i.u_gl_units_to_pixels)}},lineGradient:function(e,i){return{u_matrix:new t.UniformMatrix4f(e,i.u_matrix),u_ratio:new t.Uniform1f(e,i.u_ratio),u_gl_units_to_pixels:new t.Uniform2f(e,i.u_gl_units_to_pixels),u_image:new t.Uniform1i(e,i.u_image)}},linePattern:function(e,i){return{u_matrix:new t.UniformMatrix4f(e,i.u_matrix),u_texsize:new t.Uniform2f(e,i.u_texsize),u_ratio:new t.Uniform1f(e,i.u_ratio),u_image:new t.Uniform1i(e,i.u_image),u_gl_units_to_pixels:new t.Uniform2f(e,i.u_gl_units_to_pixels),u_scale:new t.Uniform4f(e,i.u_scale),u_fade:new t.Uniform1f(e,i.u_fade)}},lineSDF:function(e,i){return{u_matrix:new t.UniformMatrix4f(e,i.u_matrix),u_ratio:new t.Uniform1f(e,i.u_ratio),u_gl_units_to_pixels:new t.Uniform2f(e,i.u_gl_units_to_pixels),u_patternscale_a:new t.Uniform2f(e,i.u_patternscale_a),u_patternscale_b:new t.Uniform2f(e,i.u_patternscale_b),u_sdfgamma:new t.Uniform1f(e,i.u_sdfgamma),u_image:new t.Uniform1i(e,i.u_image),u_tex_y_a:new t.Uniform1f(e,i.u_tex_y_a),u_tex_y_b:new t.Uniform1f(e,i.u_tex_y_b),u_mix:new t.Uniform1f(e,i.u_mix)}},raster:function(e,i){return{u_matrix:new t.UniformMatrix4f(e,i.u_matrix),u_tl_parent:new t.Uniform2f(e,i.u_tl_parent),u_scale_parent:new t.Uniform1f(e,i.u_scale_parent),u_buffer_scale:new t.Uniform1f(e,i.u_buffer_scale),u_fade_t:new t.Uniform1f(e,i.u_fade_t),u_opacity:new t.Uniform1f(e,i.u_opacity),u_image0:new t.Uniform1i(e,i.u_image0),u_image1:new t.Uniform1i(e,i.u_image1),u_brightness_low:new t.Uniform1f(e,i.u_brightness_low),u_brightness_high:new t.Uniform1f(e,i.u_brightness_high),u_saturation_factor:new t.Uniform1f(e,i.u_saturation_factor),u_contrast_factor:new t.Uniform1f(e,i.u_contrast_factor),u_spin_weights:new t.Uniform3f(e,i.u_spin_weights)}},symbolIcon:function(e,i){return{u_is_size_zoom_constant:new t.Uniform1i(e,i.u_is_size_zoom_constant),u_is_size_feature_constant:new t.Uniform1i(e,i.u_is_size_feature_constant),u_size_t:new t.Uniform1f(e,i.u_size_t),u_size:new t.Uniform1f(e,i.u_size),u_camera_to_center_distance:new t.Uniform1f(e,i.u_camera_to_center_distance),u_pitch:new t.Uniform1f(e,i.u_pitch),u_rotate_symbol:new t.Uniform1i(e,i.u_rotate_symbol),u_aspect_ratio:new t.Uniform1f(e,i.u_aspect_ratio),u_fade_change:new t.Uniform1f(e,i.u_fade_change),u_matrix:new t.UniformMatrix4f(e,i.u_matrix),u_label_plane_matrix:new t.UniformMatrix4f(e,i.u_label_plane_matrix),u_gl_coord_matrix:new t.UniformMatrix4f(e,i.u_gl_coord_matrix),u_is_text:new t.Uniform1f(e,i.u_is_text),u_pitch_with_map:new t.Uniform1i(e,i.u_pitch_with_map),u_texsize:new t.Uniform2f(e,i.u_texsize),u_texture:new t.Uniform1i(e,i.u_texture)}},symbolSDF:function(e,i){return{u_is_size_zoom_constant:new t.Uniform1i(e,i.u_is_size_zoom_constant),u_is_size_feature_constant:new t.Uniform1i(e,i.u_is_size_feature_constant),u_size_t:new t.Uniform1f(e,i.u_size_t),u_size:new t.Uniform1f(e,i.u_size),u_camera_to_center_distance:new t.Uniform1f(e,i.u_camera_to_center_distance),u_pitch:new t.Uniform1f(e,i.u_pitch),u_rotate_symbol:new t.Uniform1i(e,i.u_rotate_symbol),u_aspect_ratio:new t.Uniform1f(e,i.u_aspect_ratio),u_fade_change:new t.Uniform1f(e,i.u_fade_change),u_matrix:new t.UniformMatrix4f(e,i.u_matrix),u_label_plane_matrix:new t.UniformMatrix4f(e,i.u_label_plane_matrix),u_gl_coord_matrix:new t.UniformMatrix4f(e,i.u_gl_coord_matrix),u_is_text:new t.Uniform1f(e,i.u_is_text),u_pitch_with_map:new t.Uniform1i(e,i.u_pitch_with_map),u_texsize:new t.Uniform2f(e,i.u_texsize),u_texture:new t.Uniform1i(e,i.u_texture),u_gamma_scale:new t.Uniform1f(e,i.u_gamma_scale),u_is_halo:new t.Uniform1f(e,i.u_is_halo)}},background:function(e,i){return{u_matrix:new t.UniformMatrix4f(e,i.u_matrix),u_opacity:new t.Uniform1f(e,i.u_opacity),u_color:new t.UniformColor(e,i.u_color)}},backgroundPattern:function(e,i){return{u_matrix:new t.UniformMatrix4f(e,i.u_matrix),u_opacity:new t.Uniform1f(e,i.u_opacity),u_image:new t.Uniform1i(e,i.u_image),u_pattern_tl_a:new t.Uniform2f(e,i.u_pattern_tl_a),u_pattern_br_a:new t.Uniform2f(e,i.u_pattern_br_a),u_pattern_tl_b:new t.Uniform2f(e,i.u_pattern_tl_b),u_pattern_br_b:new t.Uniform2f(e,i.u_pattern_br_b),u_texsize:new t.Uniform2f(e,i.u_texsize),u_mix:new t.Uniform1f(e,i.u_mix),u_pattern_size_a:new t.Uniform2f(e,i.u_pattern_size_a),u_pattern_size_b:new t.Uniform2f(e,i.u_pattern_size_b),u_scale_a:new t.Uniform1f(e,i.u_scale_a),u_scale_b:new t.Uniform1f(e,i.u_scale_b),u_pixel_coord_upper:new t.Uniform2f(e,i.u_pixel_coord_upper),u_pixel_coord_lower:new t.Uniform2f(e,i.u_pixel_coord_lower),u_tile_units_to_pixels:new t.Uniform1f(e,i.u_tile_units_to_pixels)}}};function Ci(e,i){for(var n=e.sort(function(t,e){return t.tileID.isLessThan(e.tileID)?-1:e.tileID.isLessThan(t.tileID)?1:0}),o=0;o<n.length;o++){var r={},a=n[o],s=n.slice(o+1);zi(a.tileID.wrapped(),a.tileID,s,new t.OverscaledTileID(0,a.tileID.wrap+1,0,0,0),r),a.setMask(r,i)}}function zi(e,i,n,o,r){for(var a=0;a<n.length;a++){var s=n[a];if(o.isLessThan(s.tileID))break;if(i.key===s.tileID.key)return;if(s.tileID.isChildOf(i)){for(var l=i.children(1/0),c=0;c<l.length;c++){zi(e,l[c],n.slice(a),o,r)}return}}var h=i.overscaledZ-e.overscaledZ,u=new t.CanonicalTileID(h,i.canonical.x-(e.canonical.x<<h),i.canonical.y-(e.canonical.y<<h));r[u.key]=r[u.key]||u}function Pi(t,e,i,n,o){for(var r=t.context,a=r.gl,s=o?t.useProgram("collisionCircle"):t.useProgram("collisionBox"),l=0;l<n.length;l++){var c=n[l],h=e.getTile(c),u=h.getBucket(i);if(u){var p=o?u.collisionCircle:u.collisionBox;p&&s.draw(r,o?a.TRIANGLES:a.LINES,Dt.disabled,Mt.disabled,t.colorModeForRenderPass(),li(c.posMatrix,t.transform,h),i.id,p.layoutVertexBuffer,p.indexBuffer,p.segments,null,t.transform.zoom,null,null,p.collisionVertexBuffer)}}}var Ri=t.identity(new Float32Array(16)),Ai=t.properties.layout;function Li(e,i,n,o,r,a,s,l,c,h,u,p){for(var d,_,f=e.context,m=f.gl,g=e.transform,v="map"===l,y="map"===c,x=v&&"point"!==n.layout.get("symbol-placement"),b=v&&!y&&!x,w=y?e.depthModeForSublayer(0,Dt.ReadOnly):Dt.disabled,E=0,T=o;E<T.length;E+=1){var S=T[E],I=i.getTile(S),C=I.getBucket(n);if(C){var z=r?C.text:C.icon;if(z&&z.segments.get().length){var P=z.programConfigurations.get(n.id),R=r||C.sdfIcons,A=r?C.textSizeData:C.iconSizeData;d||(d=e.useProgram(R?"symbolSDF":"symbolIcon",P),_=t.evaluateSizeForZoom(A,g.zoom,Ai.properties[r?"text-size":"icon-size"])),f.activeTexture.set(m.TEXTURE0);var L=void 0;if(r)I.glyphAtlasTexture.bind(m.LINEAR,m.CLAMP_TO_EDGE),L=I.glyphAtlasTexture.size;else{var D=1!==n.layout.get("icon-size").constantOr(0)||C.iconsNeedLinear,M=y||0!==g.pitch;I.imageAtlasTexture.bind(R||e.options.rotating||e.options.zooming||D||M?m.LINEAR:m.NEAREST,m.CLAMP_TO_EDGE),L=I.imageAtlasTexture.size}var k=ve(I,1,e.transform.zoom),B=ne(S.posMatrix,y,v,e.transform,k),O=oe(S.posMatrix,y,v,e.transform,k);x&&se(C,S.posMatrix,e,r,B,O,y,h);var F=e.translatePosMatrix(S.posMatrix,I,a,s),U=x?Ri:B,N=e.translatePosMatrix(O,I,a,s,!0),Z=void 0;if(R){var q=0!==n.paint.get(r?"text-halo-width":"icon-halo-width").constantOr(1);Z=Ei(A.functionType,_,b,y,e,F,U,N,r,L,!0),q&&Di(z,n,e,d,w,u,p,Z),Z.u_is_halo=0}else Z=wi(A.functionType,_,b,y,e,F,U,N,r,L);Di(z,n,e,d,w,u,p,Z)}}}}function Di(t,e,i,n,o,r,a,s){var l=i.context,c=l.gl;n.draw(l,c.TRIANGLES,o,r,a,s,e.id,t.layoutVertexBuffer,t.indexBuffer,t.segments,e.paint,i.transform.zoom,t.programConfigurations.get(e.id),t.dynamicLayoutVertexBuffer,t.opacityVertexBuffer)}function Mi(t,e,i,n,o,r,a){var s,l,c,h,u,p=t.context.gl,d=i.paint.get("fill-pattern"),_=d&&d.constantOr(1),f=i.getCrossfadeParameters();a?(l=_&&!i.getPaintProperty("fill-outline-color")?"fillOutlinePattern":"fillOutline",s=p.LINES):(l=_?"fillPattern":"fill",s=p.TRIANGLES);for(var m=0,g=n;m<g.length;m+=1){var v=g[m],y=e.getTile(v);if(!_||y.patternsLoaded()){var x=y.getBucket(i);if(x){var b=x.programConfigurations.get(i.id),w=t.useProgram(l,b);_&&(t.context.activeTexture.set(p.TEXTURE0),y.imageAtlasTexture.bind(p.LINEAR,p.CLAMP_TO_EDGE),b.updatePatternPaintBuffers(f));var E=d.constantOr(null);if(E&&y.imageAtlas){var T=y.imageAtlas.patternPositions[E.to],S=y.imageAtlas.patternPositions[E.from];T&&S&&b.setConstantPatternPositions(T,S)}var I=t.translatePosMatrix(v.posMatrix,y,i.paint.get("fill-translate"),i.paint.get("fill-translate-anchor"));if(a){h=x.indexBuffer2,u=x.segments2;var C=[p.drawingBufferWidth,p.drawingBufferHeight];c="fillOutlinePattern"===l&&_?ri(I,t,f,y,C):oi(I,C)}else h=x.indexBuffer,u=x.segments,c=_?ni(I,t,f,y):ii(I);w.draw(t.context,s,o,t.stencilModeForClipping(v),r,c,i.id,x.layoutVertexBuffer,h,u,i.paint,t.transform.zoom,b)}}}}function ki(t,e,i,n,o,r){var a=t.context,s=a.gl,l=e.fbo;if(l){var c=t.useProgram("hillshade");a.activeTexture.set(s.TEXTURE0),s.bindTexture(s.TEXTURE_2D,l.colorAttachment.get());var h=di(t,e,i);e.maskedBoundsBuffer&&e.maskedIndexBuffer&&e.segments?c.draw(a,s.TRIANGLES,n,o,r,h,i.id,e.maskedBoundsBuffer,e.maskedIndexBuffer,e.segments):c.draw(a,s.TRIANGLES,n,o,r,h,i.id,t.rasterBoundsBuffer,t.quadTriangleIndexBuffer,t.rasterBoundsSegments)}}function Bi(e,i,n,o,r,a,s){var l=e.context,c=l.gl;if(i.dem&&i.dem.data){var h=i.dem.dim,u=i.dem.getPixels();if(l.activeTexture.set(c.TEXTURE1),l.pixelStoreUnpackPremultiplyAlpha.set(!1),i.demTexture=i.demTexture||e.getTileTexture(i.tileSize),i.demTexture){var p=i.demTexture;p.update(u,{premultiply:!1}),p.bind(c.NEAREST,c.CLAMP_TO_EDGE)}else i.demTexture=new t.Texture(l,u,c.RGBA,{premultiply:!1}),i.demTexture.bind(c.NEAREST,c.CLAMP_TO_EDGE);l.activeTexture.set(c.TEXTURE0);var d=i.fbo;if(!d){var _=new t.Texture(l,{width:h,height:h,data:null},c.RGBA);_.bind(c.LINEAR,c.CLAMP_TO_EDGE),(d=i.fbo=l.createFramebuffer(h,h)).colorAttachment.set(_.texture)}l.bindFramebuffer.set(d.framebuffer),l.viewport.set([0,0,h,h]),e.useProgram("hillshadePrepare").draw(l,c.TRIANGLES,r,a,s,_i(i,o),n.id,e.rasterBoundsBuffer,e.quadTriangleIndexBuffer,e.rasterBoundsSegments),i.needsHillshadePrepare=!1}}function Oi(e,i,n,o,r){var a=o.paint.get("raster-fade-duration");if(a>0){var s=t.browser.now(),l=(s-e.timeAdded)/a,c=i?(s-i.timeAdded)/a:-1,h=n.getSource(),u=r.coveringZoomLevel({tileSize:h.tileSize,roundZoom:h.roundZoom}),p=!i||Math.abs(i.tileID.overscaledZ-u)>Math.abs(e.tileID.overscaledZ-u),d=p&&e.refreshedUponExpiration?1:t.clamp(p?l:1-c,0,1);return e.refreshedUponExpiration&&l>=1&&(e.refreshedUponExpiration=!1),i?{opacity:1,mix:1-d}:{opacity:d,mix:0}}return{opacity:1,mix:0}}function Fi(e,i,n){var o=e.context,r=o.gl,a=n.posMatrix,s=e.useProgram("debug"),l=Dt.disabled,c=Mt.disabled,h=e.colorModeForRenderPass(),u="$debug";s.draw(o,r.LINE_STRIP,l,c,h,ci(a,t.Color.red),u,e.debugBuffer,e.tileBorderIndexBuffer,e.debugSegments);for(var p=function(t,e,i,n){n=n||1;var o,r,a,s,l,c,h,u,p=[];for(o=0,r=t.length;o<r;o++)if(l=Ui[t[o]]){for(u=null,a=0,s=l[1].length;a<s;a+=2)-1===l[1][a]&&-1===l[1][a+1]?u=null:(c=e+l[1][a]*n,h=i-l[1][a+1]*n,u&&p.push(u.x,u.y,c,h),u={x:c,y:h});e+=l[0]*n}return p}(n.toString(),50,200,5),d=new t.StructArrayLayout2i4,_=new t.StructArrayLayout2ui4,f=0;f<p.length;f+=2)d.emplaceBack(p[f],p[f+1]),_.emplaceBack(f,f+1);for(var m=o.createVertexBuffer(d,je.members),g=o.createIndexBuffer(_),v=t.SegmentVector.simpleSegment(0,0,d.length/2,d.length/2),y=i.getTile(n).tileSize,x=t.EXTENT/(Math.pow(2,e.transform.zoom-n.overscaledZ)*y),b=[[-1,-1],[-1,1],[1,-1],[1,1]],w=0;w<b.length;w++){var E=b[w];s.draw(o,r.LINES,l,c,h,ci(t.translate([],a,[x*E[0],x*E[1],0]),t.Color.white),u,m,g,v)}s.draw(o,r.LINES,l,c,h,ci(a,t.Color.black),u,m,g,v)}var Ui={" ":[16,[]],"!":[10,[5,21,5,7,-1,-1,5,2,4,1,5,0,6,1,5,2]],'"':[16,[4,21,4,14,-1,-1,12,21,12,14]],"#":[21,[11,25,4,-7,-1,-1,17,25,10,-7,-1,-1,4,12,18,12,-1,-1,3,6,17,6]],$:[20,[8,25,8,-4,-1,-1,12,25,12,-4,-1,-1,17,18,15,20,12,21,8,21,5,20,3,18,3,16,4,14,5,13,7,12,13,10,15,9,16,8,17,6,17,3,15,1,12,0,8,0,5,1,3,3]],"%":[24,[21,21,3,0,-1,-1,8,21,10,19,10,17,9,15,7,14,5,14,3,16,3,18,4,20,6,21,8,21,10,20,13,19,16,19,19,20,21,21,-1,-1,17,7,15,6,14,4,14,2,16,0,18,0,20,1,21,3,21,5,19,7,17,7]],"&":[26,[23,12,23,13,22,14,21,14,20,13,19,11,17,6,15,3,13,1,11,0,7,0,5,1,4,2,3,4,3,6,4,8,5,9,12,13,13,14,14,16,14,18,13,20,11,21,9,20,8,18,8,16,9,13,11,10,16,3,18,1,20,0,22,0,23,1,23,2]],"'":[10,[5,19,4,20,5,21,6,20,6,18,5,16,4,15]],"(":[14,[11,25,9,23,7,20,5,16,4,11,4,7,5,2,7,-2,9,-5,11,-7]],")":[14,[3,25,5,23,7,20,9,16,10,11,10,7,9,2,7,-2,5,-5,3,-7]],"*":[16,[8,21,8,9,-1,-1,3,18,13,12,-1,-1,13,18,3,12]],"+":[26,[13,18,13,0,-1,-1,4,9,22,9]],",":[10,[6,1,5,0,4,1,5,2,6,1,6,-1,5,-3,4,-4]],"-":[26,[4,9,22,9]],".":[10,[5,2,4,1,5,0,6,1,5,2]],"/":[22,[20,25,2,-7]],0:[20,[9,21,6,20,4,17,3,12,3,9,4,4,6,1,9,0,11,0,14,1,16,4,17,9,17,12,16,17,14,20,11,21,9,21]],1:[20,[6,17,8,18,11,21,11,0]],2:[20,[4,16,4,17,5,19,6,20,8,21,12,21,14,20,15,19,16,17,16,15,15,13,13,10,3,0,17,0]],3:[20,[5,21,16,21,10,13,13,13,15,12,16,11,17,8,17,6,16,3,14,1,11,0,8,0,5,1,4,2,3,4]],4:[20,[13,21,3,7,18,7,-1,-1,13,21,13,0]],5:[20,[15,21,5,21,4,12,5,13,8,14,11,14,14,13,16,11,17,8,17,6,16,3,14,1,11,0,8,0,5,1,4,2,3,4]],6:[20,[16,18,15,20,12,21,10,21,7,20,5,17,4,12,4,7,5,3,7,1,10,0,11,0,14,1,16,3,17,6,17,7,16,10,14,12,11,13,10,13,7,12,5,10,4,7]],7:[20,[17,21,7,0,-1,-1,3,21,17,21]],8:[20,[8,21,5,20,4,18,4,16,5,14,7,13,11,12,14,11,16,9,17,7,17,4,16,2,15,1,12,0,8,0,5,1,4,2,3,4,3,7,4,9,6,11,9,12,13,13,15,14,16,16,16,18,15,20,12,21,8,21]],9:[20,[16,14,15,11,13,9,10,8,9,8,6,9,4,11,3,14,3,15,4,18,6,20,9,21,10,21,13,20,15,18,16,14,16,9,15,4,13,1,10,0,8,0,5,1,4,3]],":":[10,[5,14,4,13,5,12,6,13,5,14,-1,-1,5,2,4,1,5,0,6,1,5,2]],";":[10,[5,14,4,13,5,12,6,13,5,14,-1,-1,6,1,5,0,4,1,5,2,6,1,6,-1,5,-3,4,-4]],"<":[24,[20,18,4,9,20,0]],"=":[26,[4,12,22,12,-1,-1,4,6,22,6]],">":[24,[4,18,20,9,4,0]],"?":[18,[3,16,3,17,4,19,5,20,7,21,11,21,13,20,14,19,15,17,15,15,14,13,13,12,9,10,9,7,-1,-1,9,2,8,1,9,0,10,1,9,2]],"@":[27,[18,13,17,15,15,16,12,16,10,15,9,14,8,11,8,8,9,6,11,5,14,5,16,6,17,8,-1,-1,12,16,10,14,9,11,9,8,10,6,11,5,-1,-1,18,16,17,8,17,6,19,5,21,5,23,7,24,10,24,12,23,15,22,17,20,19,18,20,15,21,12,21,9,20,7,19,5,17,4,15,3,12,3,9,4,6,5,4,7,2,9,1,12,0,15,0,18,1,20,2,21,3,-1,-1,19,16,18,8,18,6,19,5]],A:[18,[9,21,1,0,-1,-1,9,21,17,0,-1,-1,4,7,14,7]],B:[21,[4,21,4,0,-1,-1,4,21,13,21,16,20,17,19,18,17,18,15,17,13,16,12,13,11,-1,-1,4,11,13,11,16,10,17,9,18,7,18,4,17,2,16,1,13,0,4,0]],C:[21,[18,16,17,18,15,20,13,21,9,21,7,20,5,18,4,16,3,13,3,8,4,5,5,3,7,1,9,0,13,0,15,1,17,3,18,5]],D:[21,[4,21,4,0,-1,-1,4,21,11,21,14,20,16,18,17,16,18,13,18,8,17,5,16,3,14,1,11,0,4,0]],E:[19,[4,21,4,0,-1,-1,4,21,17,21,-1,-1,4,11,12,11,-1,-1,4,0,17,0]],F:[18,[4,21,4,0,-1,-1,4,21,17,21,-1,-1,4,11,12,11]],G:[21,[18,16,17,18,15,20,13,21,9,21,7,20,5,18,4,16,3,13,3,8,4,5,5,3,7,1,9,0,13,0,15,1,17,3,18,5,18,8,-1,-1,13,8,18,8]],H:[22,[4,21,4,0,-1,-1,18,21,18,0,-1,-1,4,11,18,11]],I:[8,[4,21,4,0]],J:[16,[12,21,12,5,11,2,10,1,8,0,6,0,4,1,3,2,2,5,2,7]],K:[21,[4,21,4,0,-1,-1,18,21,4,7,-1,-1,9,12,18,0]],L:[17,[4,21,4,0,-1,-1,4,0,16,0]],M:[24,[4,21,4,0,-1,-1,4,21,12,0,-1,-1,20,21,12,0,-1,-1,20,21,20,0]],N:[22,[4,21,4,0,-1,-1,4,21,18,0,-1,-1,18,21,18,0]],O:[22,[9,21,7,20,5,18,4,16,3,13,3,8,4,5,5,3,7,1,9,0,13,0,15,1,17,3,18,5,19,8,19,13,18,16,17,18,15,20,13,21,9,21]],P:[21,[4,21,4,0,-1,-1,4,21,13,21,16,20,17,19,18,17,18,14,17,12,16,11,13,10,4,10]],Q:[22,[9,21,7,20,5,18,4,16,3,13,3,8,4,5,5,3,7,1,9,0,13,0,15,1,17,3,18,5,19,8,19,13,18,16,17,18,15,20,13,21,9,21,-1,-1,12,4,18,-2]],R:[21,[4,21,4,0,-1,-1,4,21,13,21,16,20,17,19,18,17,18,15,17,13,16,12,13,11,4,11,-1,-1,11,11,18,0]],S:[20,[17,18,15,20,12,21,8,21,5,20,3,18,3,16,4,14,5,13,7,12,13,10,15,9,16,8,17,6,17,3,15,1,12,0,8,0,5,1,3,3]],T:[16,[8,21,8,0,-1,-1,1,21,15,21]],U:[22,[4,21,4,6,5,3,7,1,10,0,12,0,15,1,17,3,18,6,18,21]],V:[18,[1,21,9,0,-1,-1,17,21,9,0]],W:[24,[2,21,7,0,-1,-1,12,21,7,0,-1,-1,12,21,17,0,-1,-1,22,21,17,0]],X:[20,[3,21,17,0,-1,-1,17,21,3,0]],Y:[18,[1,21,9,11,9,0,-1,-1,17,21,9,11]],Z:[20,[17,21,3,0,-1,-1,3,21,17,21,-1,-1,3,0,17,0]],"[":[14,[4,25,4,-7,-1,-1,5,25,5,-7,-1,-1,4,25,11,25,-1,-1,4,-7,11,-7]],"\\":[14,[0,21,14,-3]],"]":[14,[9,25,9,-7,-1,-1,10,25,10,-7,-1,-1,3,25,10,25,-1,-1,3,-7,10,-7]],"^":[16,[6,15,8,18,10,15,-1,-1,3,12,8,17,13,12,-1,-1,8,17,8,0]],_:[16,[0,-2,16,-2]],"`":[10,[6,21,5,20,4,18,4,16,5,15,6,16,5,17]],a:[19,[15,14,15,0,-1,-1,15,11,13,13,11,14,8,14,6,13,4,11,3,8,3,6,4,3,6,1,8,0,11,0,13,1,15,3]],b:[19,[4,21,4,0,-1,-1,4,11,6,13,8,14,11,14,13,13,15,11,16,8,16,6,15,3,13,1,11,0,8,0,6,1,4,3]],c:[18,[15,11,13,13,11,14,8,14,6,13,4,11,3,8,3,6,4,3,6,1,8,0,11,0,13,1,15,3]],d:[19,[15,21,15,0,-1,-1,15,11,13,13,11,14,8,14,6,13,4,11,3,8,3,6,4,3,6,1,8,0,11,0,13,1,15,3]],e:[18,[3,8,15,8,15,10,14,12,13,13,11,14,8,14,6,13,4,11,3,8,3,6,4,3,6,1,8,0,11,0,13,1,15,3]],f:[12,[10,21,8,21,6,20,5,17,5,0,-1,-1,2,14,9,14]],g:[19,[15,14,15,-2,14,-5,13,-6,11,-7,8,-7,6,-6,-1,-1,15,11,13,13,11,14,8,14,6,13,4,11,3,8,3,6,4,3,6,1,8,0,11,0,13,1,15,3]],h:[19,[4,21,4,0,-1,-1,4,10,7,13,9,14,12,14,14,13,15,10,15,0]],i:[8,[3,21,4,20,5,21,4,22,3,21,-1,-1,4,14,4,0]],j:[10,[5,21,6,20,7,21,6,22,5,21,-1,-1,6,14,6,-3,5,-6,3,-7,1,-7]],k:[17,[4,21,4,0,-1,-1,14,14,4,4,-1,-1,8,8,15,0]],l:[8,[4,21,4,0]],m:[30,[4,14,4,0,-1,-1,4,10,7,13,9,14,12,14,14,13,15,10,15,0,-1,-1,15,10,18,13,20,14,23,14,25,13,26,10,26,0]],n:[19,[4,14,4,0,-1,-1,4,10,7,13,9,14,12,14,14,13,15,10,15,0]],o:[19,[8,14,6,13,4,11,3,8,3,6,4,3,6,1,8,0,11,0,13,1,15,3,16,6,16,8,15,11,13,13,11,14,8,14]],p:[19,[4,14,4,-7,-1,-1,4,11,6,13,8,14,11,14,13,13,15,11,16,8,16,6,15,3,13,1,11,0,8,0,6,1,4,3]],q:[19,[15,14,15,-7,-1,-1,15,11,13,13,11,14,8,14,6,13,4,11,3,8,3,6,4,3,6,1,8,0,11,0,13,1,15,3]],r:[13,[4,14,4,0,-1,-1,4,8,5,11,7,13,9,14,12,14]],s:[17,[14,11,13,13,10,14,7,14,4,13,3,11,4,9,6,8,11,7,13,6,14,4,14,3,13,1,10,0,7,0,4,1,3,3]],t:[12,[5,21,5,4,6,1,8,0,10,0,-1,-1,2,14,9,14]],u:[19,[4,14,4,4,5,1,7,0,10,0,12,1,15,4,-1,-1,15,14,15,0]],v:[16,[2,14,8,0,-1,-1,14,14,8,0]],w:[22,[3,14,7,0,-1,-1,11,14,7,0,-1,-1,11,14,15,0,-1,-1,19,14,15,0]],x:[17,[3,14,14,0,-1,-1,14,14,3,0]],y:[16,[2,14,8,0,-1,-1,14,14,8,0,6,-4,4,-6,2,-7,1,-7]],z:[17,[14,14,3,0,-1,-1,3,14,14,14,-1,-1,3,0,14,0]],"{":[14,[9,25,7,24,6,23,5,21,5,19,6,17,7,16,8,14,8,12,6,10,-1,-1,7,24,6,22,6,20,7,18,8,17,9,15,9,13,8,11,4,9,8,7,9,5,9,3,8,1,7,0,6,-2,6,-4,7,-6,-1,-1,6,8,8,6,8,4,7,2,6,1,5,-1,5,-3,6,-5,7,-6,9,-7]],"|":[8,[4,25,4,-7]],"}":[14,[5,25,7,24,8,23,9,21,9,19,8,17,7,16,6,14,6,12,8,10,-1,-1,7,24,8,22,8,20,7,18,6,17,5,15,5,13,6,11,10,9,6,7,5,5,5,3,6,1,7,0,8,-2,8,-4,7,-6,-1,-1,8,8,6,6,6,4,7,2,8,1,9,-1,9,-3,8,-5,7,-6,5,-7]],"~":[24,[3,6,3,8,4,11,6,12,8,12,10,11,14,8,16,7,18,7,20,8,21,10,-1,-1,3,8,4,10,6,11,8,11,10,10,14,7,16,6,18,6,20,7,21,10,21,12]]};var Ni={symbol:function(t,e,i,n){if("translucent"===t.renderPass){var o=Mt.disabled,r=t.colorModeForRenderPass();0!==i.paint.get("icon-opacity").constantOr(1)&&Li(t,e,i,n,!1,i.paint.get("icon-translate"),i.paint.get("icon-translate-anchor"),i.layout.get("icon-rotation-alignment"),i.layout.get("icon-pitch-alignment"),i.layout.get("icon-keep-upright"),o,r),0!==i.paint.get("text-opacity").constantOr(1)&&Li(t,e,i,n,!0,i.paint.get("text-translate"),i.paint.get("text-translate-anchor"),i.layout.get("text-rotation-alignment"),i.layout.get("text-pitch-alignment"),i.layout.get("text-keep-upright"),o,r),e.map.showCollisionBoxes&&function(t,e,i,n){Pi(t,e,i,n,!1),Pi(t,e,i,n,!0)}(t,e,i,n)}},circle:function(t,e,i,n){if("translucent"===t.renderPass){var o=i.paint.get("circle-opacity"),r=i.paint.get("circle-stroke-width"),a=i.paint.get("circle-stroke-opacity");if(0!==o.constantOr(1)||0!==r.constantOr(1)&&0!==a.constantOr(1))for(var s=t.context,l=s.gl,c=t.depthModeForSublayer(0,Dt.ReadOnly),h=Mt.disabled,u=t.colorModeForRenderPass(),p=0;p<n.length;p++){var d=n[p],_=e.getTile(d),f=_.getBucket(i);if(f){var m=f.programConfigurations.get(i.id);t.useProgram("circle",m).draw(s,l.TRIANGLES,c,h,u,ai(t,d,_,i),i.id,f.layoutVertexBuffer,f.indexBuffer,f.segments,i.paint,t.transform.zoom,m)}}}},heatmap:function(e,i,n,o){if(0!==n.paint.get("heatmap-opacity"))if("offscreen"===e.renderPass){var r=e.context,a=r.gl,s=e.depthModeForSublayer(0,Dt.ReadOnly),l=Mt.disabled,c=new kt([a.ONE,a.ONE],t.Color.transparent,[!0,!0,!0,!0]);!function(t,e,i){var n=t.gl;t.activeTexture.set(n.TEXTURE1),t.viewport.set([0,0,e.width/4,e.height/4]);var o=i.heatmapFbo;if(o)n.bindTexture(n.TEXTURE_2D,o.colorAttachment.get()),t.bindFramebuffer.set(o.framebuffer);else{var r=n.createTexture();n.bindTexture(n.TEXTURE_2D,r),n.texParameteri(n.TEXTURE_2D,n.TEXTURE_WRAP_S,n.CLAMP_TO_EDGE),n.texParameteri(n.TEXTURE_2D,n.TEXTURE_WRAP_T,n.CLAMP_TO_EDGE),n.texParameteri(n.TEXTURE_2D,n.TEXTURE_MIN_FILTER,n.LINEAR),n.texParameteri(n.TEXTURE_2D,n.TEXTURE_MAG_FILTER,n.LINEAR),o=i.heatmapFbo=t.createFramebuffer(e.width/4,e.height/4),function t(e,i,n,o){var r=e.gl;r.texImage2D(r.TEXTURE_2D,0,r.RGBA,i.width/4,i.height/4,0,r.RGBA,e.extTextureHalfFloat?e.extTextureHalfFloat.HALF_FLOAT_OES:r.UNSIGNED_BYTE,null),o.colorAttachment.set(n),e.extTextureHalfFloat&&r.checkFramebufferStatus(r.FRAMEBUFFER)!==r.FRAMEBUFFER_COMPLETE&&(e.extTextureHalfFloat=null,o.colorAttachment.setDirty(),t(e,i,n,o))}(t,e,r,o)}}(r,e,n),r.clear({color:t.Color.transparent});for(var h=0;h<o.length;h++){var u=o[h];if(!i.hasRenderableParent(u)){var p=i.getTile(u),d=p.getBucket(n);if(d){var _=d.programConfigurations.get(n.id),f=e.useProgram("heatmap",_),m=e.transform.zoom;f.draw(r,a.TRIANGLES,s,l,c,ui(u.posMatrix,p,m,n.paint.get("heatmap-intensity")),n.id,d.layoutVertexBuffer,d.indexBuffer,d.segments,n.paint,e.transform.zoom,_)}}}r.viewport.set([0,0,e.width,e.height])}else"translucent"===e.renderPass&&(e.context.setColorMode(e.colorModeForRenderPass()),function(e,i){var n=e.context,o=n.gl,r=i.heatmapFbo;if(r){n.activeTexture.set(o.TEXTURE0),o.bindTexture(o.TEXTURE_2D,r.colorAttachment.get()),n.activeTexture.set(o.TEXTURE1);var a=i.colorRampTexture;a||(a=i.colorRampTexture=new t.Texture(n,i.colorRamp,o.RGBA)),a.bind(o.LINEAR,o.CLAMP_TO_EDGE),e.useProgram("heatmapTexture").draw(n,o.TRIANGLES,Dt.disabled,Mt.disabled,e.colorModeForRenderPass(),pi(e,i,0,1),i.id,e.viewportBuffer,e.quadTriangleIndexBuffer,e.viewportSegments,i.paint,e.transform.zoom)}}(e,n))},line:function(e,i,n,o){if("translucent"===e.renderPass){var r=n.paint.get("line-opacity"),a=n.paint.get("line-width");if(0!==r.constantOr(1)&&0!==a.constantOr(1)){var s=e.depthModeForSublayer(0,Dt.ReadOnly),l=e.colorModeForRenderPass(),c=n.paint.get("line-dasharray"),h=n.paint.get("line-pattern"),u=h.constantOr(1),p=n.paint.get("line-gradient"),d=n.getCrossfadeParameters(),_=c?"lineSDF":u?"linePattern":p?"lineGradient":"line",f=e.context,m=f.gl,g=!0;if(p){f.activeTexture.set(m.TEXTURE0);var v=n.gradientTexture;if(!n.gradient)return;v||(v=n.gradientTexture=new t.Texture(f,n.gradient,m.RGBA)),v.bind(m.LINEAR,m.CLAMP_TO_EDGE)}for(var y=0,x=o;y<x.length;y+=1){var b=x[y],w=i.getTile(b);if(!u||w.patternsLoaded()){var E=w.getBucket(n);if(E){var T=E.programConfigurations.get(n.id),S=e.context.program.get(),I=e.useProgram(_,T),C=g||I.program!==S,z=h.constantOr(null);if(z&&w.imageAtlas){var P=w.imageAtlas.patternPositions[z.to],R=w.imageAtlas.patternPositions[z.from];P&&R&&T.setConstantPatternPositions(P,R)}var A=c?vi(e,w,n,c,d):u?gi(e,w,n,d):p?mi(e,w,n):fi(e,w,n);c&&(C||e.lineAtlas.dirty)?(f.activeTexture.set(m.TEXTURE0),e.lineAtlas.bind(f)):u&&(f.activeTexture.set(m.TEXTURE0),w.imageAtlasTexture.bind(m.LINEAR,m.CLAMP_TO_EDGE),T.updatePatternPaintBuffers(d)),I.draw(f,m.TRIANGLES,s,e.stencilModeForClipping(b),l,A,n.id,E.layoutVertexBuffer,E.indexBuffer,E.segments,n.paint,e.transform.zoom,T),g=!1}}}}}},fill:function(e,i,n,o){var r=n.paint.get("fill-color"),a=n.paint.get("fill-opacity");if(0!==a.constantOr(1)){var s=e.colorModeForRenderPass(),l=n.paint.get("fill-pattern").constantOr(1)||1!==r.constantOr(t.Color.transparent).a||1!==a.constantOr(0)?"translucent":"opaque";e.renderPass===l&&Mi(e,i,n,o,e.depthModeForSublayer(1,"opaque"===e.renderPass?Dt.ReadWrite:Dt.ReadOnly),s,!1),"translucent"===e.renderPass&&n.paint.get("fill-antialias")&&Mi(e,i,n,o,e.depthModeForSublayer(n.getPaintProperty("fill-outline-color")?2:0,Dt.ReadOnly),s,!0)}},"fill-extrusion":function(e,i,n,o){0!==n.paint.get("fill-extrusion-opacity")&&("offscreen"===e.renderPass?(function(e,i){var n=e.context,o=n.gl,r=i.viewportFrame;if(e.depthRboNeedsClear&&e.setupOffscreenDepthRenderbuffer(),!r){var a=new t.Texture(n,{width:e.width,height:e.height,data:null},o.RGBA);a.bind(o.LINEAR,o.CLAMP_TO_EDGE),(r=i.viewportFrame=n.createFramebuffer(e.width,e.height)).colorAttachment.set(a.texture)}n.bindFramebuffer.set(r.framebuffer),r.depthAttachment.set(e.depthRbo),e.depthRboNeedsClear&&(n.clear({depth:1}),e.depthRboNeedsClear=!1),n.clear({color:t.Color.transparent})}(e,n),function(t,e,i,n,o,r,a){for(var s=t.context,l=s.gl,c=i.paint.get("fill-extrusion-pattern"),h=c.constantOr(1),u=i.getCrossfadeParameters(),p=0,d=n;p<d.length;p+=1){var _=d[p],f=e.getTile(_),m=f.getBucket(i);if(m){var g=m.programConfigurations.get(i.id),v=t.useProgram(h?"fillExtrusionPattern":"fillExtrusion",g);h&&(t.context.activeTexture.set(l.TEXTURE0),f.imageAtlasTexture.bind(l.LINEAR,l.CLAMP_TO_EDGE),g.updatePatternPaintBuffers(u));var y=c.constantOr(null);if(y&&f.imageAtlas){var x=f.imageAtlas.patternPositions[y.to],b=f.imageAtlas.patternPositions[y.from];x&&b&&g.setConstantPatternPositions(x,b)}var w=t.translatePosMatrix(_.posMatrix,f,i.paint.get("fill-extrusion-translate"),i.paint.get("fill-extrusion-translate-anchor")),E=h?ti(w,t,_,u,f):$e(w,t);v.draw(s,s.gl.TRIANGLES,o,r,a,E,i.id,m.layoutVertexBuffer,m.indexBuffer,m.segments,i.paint,t.transform.zoom,g)}}}(e,i,n,o,new Dt(e.context.gl.LEQUAL,Dt.ReadWrite,[0,1]),Mt.disabled,e.colorModeForRenderPass())):"translucent"===e.renderPass&&function(t,e){var i=e.viewportFrame;if(i){var n=t.context,o=n.gl;n.activeTexture.set(o.TEXTURE0),o.bindTexture(o.TEXTURE_2D,i.colorAttachment.get()),t.useProgram("extrusionTexture").draw(n,o.TRIANGLES,Dt.disabled,Mt.disabled,t.colorModeForRenderPass(),ei(t,e,0),e.id,t.viewportBuffer,t.quadTriangleIndexBuffer,t.viewportSegments,e.paint,t.transform.zoom)}}(e,n))},hillshade:function(t,e,i,n){if("offscreen"===t.renderPass||"translucent"===t.renderPass){for(var o=t.context,r=e.getSource().maxzoom,a=t.depthModeForSublayer(0,Dt.ReadOnly),s=Mt.disabled,l=t.colorModeForRenderPass(),c=0,h=n;c<h.length;c+=1){var u=h[c],p=e.getTile(u);p.needsHillshadePrepare&&"offscreen"===t.renderPass?Bi(t,p,i,r,a,s,l):"translucent"===t.renderPass&&ki(t,p,i,a,s,l)}o.viewport.set([0,0,t.width,t.height])}},raster:function(t,e,i,n){if("translucent"===t.renderPass&&0!==i.paint.get("raster-opacity"))for(var o=t.context,r=o.gl,a=e.getSource(),s=t.useProgram("raster"),l=Mt.disabled,c=t.colorModeForRenderPass(),h=n.length&&n[0].overscaledZ,u=0,p=n;u<p.length;u+=1){var d=p[u],_=t.depthModeForSublayer(d.overscaledZ-h,1===i.paint.get("raster-opacity")?Dt.ReadWrite:Dt.ReadOnly,r.LESS),f=e.getTile(d),m=t.transform.calculatePosMatrix(d.toUnwrapped(),!0);f.registerFadeDuration(i.paint.get("raster-fade-duration"));var g=e.findLoadedParent(d,0),v=Oi(f,g,e,i,t.transform),y=void 0,x=void 0,b="nearest"===i.paint.get("raster-resampling")?r.NEAREST:r.LINEAR;o.activeTexture.set(r.TEXTURE0),f.texture.bind(b,r.CLAMP_TO_EDGE,r.LINEAR_MIPMAP_NEAREST),o.activeTexture.set(r.TEXTURE1),g?(g.texture.bind(b,r.CLAMP_TO_EDGE,r.LINEAR_MIPMAP_NEAREST),y=Math.pow(2,g.tileID.overscaledZ-f.tileID.overscaledZ),x=[f.tileID.canonical.x*y%1,f.tileID.canonical.y*y%1]):f.texture.bind(b,r.CLAMP_TO_EDGE,r.LINEAR_MIPMAP_NEAREST);var w=bi(m,x||[0,0],y||1,v,i);a instanceof W?s.draw(o,r.TRIANGLES,_,l,c,w,i.id,a.boundsBuffer,t.quadTriangleIndexBuffer,a.boundsSegments):f.maskedBoundsBuffer&&f.maskedIndexBuffer&&f.segments?s.draw(o,r.TRIANGLES,_,l,c,w,i.id,f.maskedBoundsBuffer,f.maskedIndexBuffer,f.segments,i.paint,t.transform.zoom):s.draw(o,r.TRIANGLES,_,l,c,w,i.id,t.rasterBoundsBuffer,t.quadTriangleIndexBuffer,t.rasterBoundsSegments)}},background:function(t,e,i){var n=i.paint.get("background-color"),o=i.paint.get("background-opacity");if(0!==o){var r=t.context,a=r.gl,s=t.transform,l=s.tileSize,c=i.paint.get("background-pattern");if(!t.isPatternMissing(c)){var h=c||1!==n.a||1!==o?"translucent":"opaque";if(t.renderPass===h){var u=Mt.disabled,p=t.depthModeForSublayer(0,"opaque"===h?Dt.ReadWrite:Dt.ReadOnly),d=t.colorModeForRenderPass(),_=t.useProgram(c?"backgroundPattern":"background"),f=s.coveringTiles({tileSize:l});c&&(r.activeTexture.set(a.TEXTURE0),t.imageManager.bind(t.context));for(var m=i.getCrossfadeParameters(),g=0,v=f;g<v.length;g+=1){var y=v[g],x=t.transform.calculatePosMatrix(y.toUnwrapped()),b=c?Si(x,o,t,c,{tileID:y,tileSize:l},m):Ti(x,o,n);_.draw(r,a.TRIANGLES,p,u,d,b,i.id,t.tileExtentBuffer,t.quadTriangleIndexBuffer,t.tileExtentSegments)}}}}},debug:function(t,e,i){for(var n=0;n<i.length;n++)Fi(t,e,i[n])}},Zi=function(e,i){this.context=new Bt(e),this.transform=i,this._tileTextures={},this.setup(),this.numSublayers=Ot.maxUnderzooming+Ot.maxOverzooming+1,this.depthEpsilon=1/Math.pow(2,16),this.depthRboNeedsClear=!0,this.emptyProgramConfiguration=new t.ProgramConfiguration,this.crossTileSymbolIndex=new Ue};function qi(t,e){if(t.row>e.row){var i=t;t=e,e=i}return{x0:t.column,y0:t.row,x1:e.column,y1:e.row,dx:e.column-t.column,dy:e.row-t.row}}function Vi(t,e,i,n,o){var r=Math.max(i,Math.floor(e.y0)),a=Math.min(n,Math.ceil(e.y1));if(t.x0===e.x0&&t.y0===e.y0?t.x0+e.dy/t.dy*t.dx<e.x1:t.x1-e.dy/t.dy*t.dx<e.x0){var s=t;t=e,e=s}for(var l=t.dx/t.dy,c=e.dx/e.dy,h=t.dx>0,u=e.dx<0,p=r;p<a;p++){var d=l*Math.max(0,Math.min(t.dy,p+h-t.y0))+t.x0,_=c*Math.max(0,Math.min(e.dy,p+u-e.y0))+e.x0;o(Math.floor(_),Math.ceil(d),p)}}function ji(t,e,i,n,o,r){var a,s=qi(t,e),l=qi(e,i),c=qi(i,t);s.dy>l.dy&&(a=s,s=l,l=a),s.dy>c.dy&&(a=s,s=c,c=a),l.dy>c.dy&&(a=l,l=c,c=a),s.dy&&Vi(c,s,n,o,r),l.dy&&Vi(c,l,n,o,r)}Zi.prototype.resize=function(e,i){var n=this.context.gl;if(this.width=e*t.browser.devicePixelRatio,this.height=i*t.browser.devicePixelRatio,this.context.viewport.set([0,0,this.width,this.height]),this.style)for(var o=0,r=this.style._order;o<r.length;o+=1){var a=r[o];this.style._layers[a].resize()}this.depthRbo&&(n.deleteRenderbuffer(this.depthRbo),this.depthRbo=null)},Zi.prototype.setup=function(){var e=this.context,i=new t.StructArrayLayout2i4;i.emplaceBack(0,0),i.emplaceBack(t.EXTENT,0),i.emplaceBack(0,t.EXTENT),i.emplaceBack(t.EXTENT,t.EXTENT),this.tileExtentBuffer=e.createVertexBuffer(i,je.members),this.tileExtentSegments=t.SegmentVector.simpleSegment(0,0,4,2);var n=new t.StructArrayLayout2i4;n.emplaceBack(0,0),n.emplaceBack(t.EXTENT,0),n.emplaceBack(0,t.EXTENT),n.emplaceBack(t.EXTENT,t.EXTENT),this.debugBuffer=e.createVertexBuffer(n,je.members),this.debugSegments=t.SegmentVector.simpleSegment(0,0,4,5);var o=new t.StructArrayLayout4i8;o.emplaceBack(0,0,0,0),o.emplaceBack(t.EXTENT,0,t.EXTENT,0),o.emplaceBack(0,t.EXTENT,0,t.EXTENT),o.emplaceBack(t.EXTENT,t.EXTENT,t.EXTENT,t.EXTENT),this.rasterBoundsBuffer=e.createVertexBuffer(o,t.rasterBoundsAttributes.members),this.rasterBoundsSegments=t.SegmentVector.simpleSegment(0,0,4,2);var r=new t.StructArrayLayout2i4;r.emplaceBack(0,0),r.emplaceBack(1,0),r.emplaceBack(0,1),r.emplaceBack(1,1),this.viewportBuffer=e.createVertexBuffer(r,je.members),this.viewportSegments=t.SegmentVector.simpleSegment(0,0,4,2);var a=new t.StructArrayLayout1ui2;a.emplaceBack(0),a.emplaceBack(1),a.emplaceBack(3),a.emplaceBack(2),a.emplaceBack(0),this.tileBorderIndexBuffer=e.createIndexBuffer(a);var s=new t.StructArrayLayout3ui6;s.emplaceBack(0,1,2),s.emplaceBack(2,1,3),this.quadTriangleIndexBuffer=e.createIndexBuffer(s);var l=this.context.gl;this.stencilClearMode=new Mt({func:l.ALWAYS,mask:0},0,255,l.ZERO,l.ZERO,l.ZERO)},Zi.prototype.clearStencil=function(){var e=this.context,i=e.gl,n=t.create();t.ortho(n,0,this.width,this.height,0,0,1),t.scale(n,n,[i.drawingBufferWidth,i.drawingBufferHeight,0]),this.useProgram("clippingMask").draw(e,i.TRIANGLES,Dt.disabled,this.stencilClearMode,kt.disabled,hi(n),"$clipping",this.viewportBuffer,this.quadTriangleIndexBuffer,this.viewportSegments)},Zi.prototype._renderTileClippingMasks=function(t){var e=this.context,i=e.gl;e.setColorMode(kt.disabled),e.setDepthMode(Dt.disabled);var n=this.useProgram("clippingMask"),o=1;this._tileClippingMaskIDs={};for(var r=0,a=t;r<a.length;r+=1){var s=a[r],l=this._tileClippingMaskIDs[s.key]=o++;n.draw(e,i.TRIANGLES,Dt.disabled,new Mt({func:i.ALWAYS,mask:0},l,255,i.KEEP,i.KEEP,i.REPLACE),kt.disabled,hi(s.posMatrix),"$clipping",this.tileExtentBuffer,this.quadTriangleIndexBuffer,this.tileExtentSegments)}},Zi.prototype.stencilModeForClipping=function(t){var e=this.context.gl;return new Mt({func:e.EQUAL,mask:255},this._tileClippingMaskIDs[t.key],0,e.KEEP,e.KEEP,e.REPLACE)},Zi.prototype.colorModeForRenderPass=function(){var e=this.context.gl;if(this._showOverdrawInspector){return new kt([e.CONSTANT_COLOR,e.ONE],new t.Color(1/8,1/8,1/8,0),[!0,!0,!0,!0])}return"opaque"===this.renderPass?kt.unblended:kt.alphaBlended},Zi.prototype.depthModeForSublayer=function(t,e,i){var n=1-((1+this.currentLayer)*this.numSublayers+t)*this.depthEpsilon,o=n-1+this.depthRange;return new Dt(i||this.context.gl.LEQUAL,e,[o,n])},Zi.prototype.render=function(e,i){this.style=e,this.options=i,this.lineAtlas=e.lineAtlas,this.imageManager=e.imageManager,this.glyphManager=e.glyphManager,this.symbolFadeChange=e.placement.symbolFadeChange(t.browser.now());var n=this.style._order,o=this.style.sourceCaches;for(var r in o){var a=o[r];a.used&&a.prepare(this.context)}var s,l={},c={},h={};for(var u in o){var p=o[u];l[u]=p.getVisibleCoordinates(),c[u]=l[u].slice().reverse(),h[u]=p.getVisibleCoordinates(!0).reverse()}for(var d in o){var _=o[d],f=_.getSource();if("raster"===f.type||"raster-dem"===f.type){for(var m=[],g=0,v=l[d];g<v.length;g+=1){var y=v[g];m.push(_.getTile(y))}Ci(m,this.context)}}this.renderPass="offscreen",this.depthRboNeedsClear=!0;for(var x=0,b=n;x<b.length;x+=1){var w=b[x],E=this.style._layers[w];if(E.hasOffscreenPass()&&!E.isHidden(this.transform.zoom)){var T=c[E.source];T.length&&this.renderLayer(this,o[E.source],E,T)}}for(this.context.bindFramebuffer.set(null),this.context.clear({color:i.showOverdrawInspector?t.Color.black:t.Color.transparent,depth:1}),this._showOverdrawInspector=i.showOverdrawInspector,this.depthRange=(e._order.length+2)*this.numSublayers*this.depthEpsilon,this.renderPass="opaque",this.currentLayer=n.length-1;this.currentLayer>=0;this.currentLayer--){var S=this.style._layers[n[this.currentLayer]],I=o[S.source],C=l[S.source];S.source!==s&&I&&(this.clearStencil(),I.getSource().isTileClipped&&this._renderTileClippingMasks(C)),this.renderLayer(this,I,S,C),s=S.source}for(this.renderPass="translucent",this.currentLayer=0,s=null;this.currentLayer<n.length;this.currentLayer++){var z=this.style._layers[n[this.currentLayer]],P=o[z.source],R=("symbol"===z.type?h:c)[z.source];z.source!==s&&P&&(this.clearStencil(),P.getSource().isTileClipped&&this._renderTileClippingMasks(l[z.source])),this.renderLayer(this,P,z,R),s=z.source}if(this.options.showTileBoundaries)for(var A in o){Ni.debug(this,o[A],l[A]);break}},Zi.prototype.setupOffscreenDepthRenderbuffer=function(){var t=this.context;this.depthRbo||(this.depthRbo=t.createRenderbuffer(t.gl.DEPTH_COMPONENT16,this.width,this.height))},Zi.prototype.renderLayer=function(t,e,i,n){i.isHidden(this.transform.zoom)||("background"===i.type||n.length)&&(this.id=i.id,Ni[i.type](t,e,i,n))},Zi.prototype.translatePosMatrix=function(e,i,n,o,r){if(!n[0]&&!n[1])return e;var a=r?"map"===o?this.transform.angle:0:"viewport"===o?-this.transform.angle:0;if(a){var s=Math.sin(a),l=Math.cos(a);n=[n[0]*l-n[1]*s,n[0]*s+n[1]*l]}var c=[r?n[0]:ve(i,n[0],this.transform.zoom),r?n[1]:ve(i,n[1],this.transform.zoom),0],h=new Float32Array(16);return t.translate(h,e,c),h},Zi.prototype.saveTileTexture=function(t){var e=this._tileTextures[t.size[0]];e?e.push(t):this._tileTextures[t.size[0]]=[t]},Zi.prototype.getTileTexture=function(t){var e=this._tileTextures[t];return e&&e.length>0?e.pop():null},Zi.prototype.isPatternMissing=function(t){if(!t)return!1;var e=this.imageManager.getPattern(t.from),i=this.imageManager.getPattern(t.to);return!e||!i},Zi.prototype.useProgram=function(t,e){void 0===e&&(e=this.emptyProgramConfiguration),this.cache=this.cache||{};var i=""+t+(e.cacheKey||"")+(this._showOverdrawInspector?"/overdraw":"");return this.cache[i]||(this.cache[i]=new Je(this.context,Ke[t],e,Ii[t],this._showOverdrawInspector)),this.cache[i]};var Gi=function(t,e,i){this.tileSize=512,this.maxValidLatitude=85.051129,this._renderWorldCopies=void 0===i||i,this._minZoom=t||0,this._maxZoom=e||22,this.setMaxBounds(),this.width=0,this.height=0,this._center=new U(0,0),this.zoom=0,this.angle=0,this._fov=.6435011087932844,this._pitch=0,this._unmodified=!0,this._posMatrixCache={},this._alignedPosMatrixCache={}},Wi={minZoom:{configurable:!0},maxZoom:{configurable:!0},renderWorldCopies:{configurable:!0},worldSize:{configurable:!0},centerPoint:{configurable:!0},size:{configurable:!0},bearing:{configurable:!0},pitch:{configurable:!0},fov:{configurable:!0},zoom:{configurable:!0},center:{configurable:!0},unmodified:{configurable:!0},x:{configurable:!0},y:{configurable:!0},point:{configurable:!0}};Gi.prototype.clone=function(){var t=new Gi(this._minZoom,this._maxZoom,this._renderWorldCopies);return t.tileSize=this.tileSize,t.latRange=this.latRange,t.width=this.width,t.height=this.height,t._center=this._center,t.zoom=this.zoom,t.angle=this.angle,t._fov=this._fov,t._pitch=this._pitch,t._unmodified=this._unmodified,t._calcMatrices(),t},Wi.minZoom.get=function(){return this._minZoom},Wi.minZoom.set=function(t){this._minZoom!==t&&(this._minZoom=t,this.zoom=Math.max(this.zoom,t))},Wi.maxZoom.get=function(){return this._maxZoom},Wi.maxZoom.set=function(t){this._maxZoom!==t&&(this._maxZoom=t,this.zoom=Math.min(this.zoom,t))},Wi.renderWorldCopies.get=function(){return this._renderWorldCopies},Wi.renderWorldCopies.set=function(t){void 0===t?t=!0:null===t&&(t=!1),this._renderWorldCopies=t},Wi.worldSize.get=function(){return this.tileSize*this.scale},Wi.centerPoint.get=function(){return this.size._div(2)},Wi.size.get=function(){return new t.Point(this.width,this.height)},Wi.bearing.get=function(){return-this.angle/Math.PI*180},Wi.bearing.set=function(e){var i=-t.wrap(e,-180,180)*Math.PI/180;this.angle!==i&&(this._unmodified=!1,this.angle=i,this._calcMatrices(),this.rotationMatrix=t.create$4(),t.rotate(this.rotationMatrix,this.rotationMatrix,this.angle))},Wi.pitch.get=function(){return this._pitch/Math.PI*180},Wi.pitch.set=function(e){var i=t.clamp(e,0,60)/180*Math.PI;this._pitch!==i&&(this._unmodified=!1,this._pitch=i,this._calcMatrices())},Wi.fov.get=function(){return this._fov/Math.PI*180},Wi.fov.set=function(t){t=Math.max(.01,Math.min(60,t)),this._fov!==t&&(this._unmodified=!1,this._fov=t/180*Math.PI,this._calcMatrices())},Wi.zoom.get=function(){return this._zoom},Wi.zoom.set=function(t){var e=Math.min(Math.max(t,this.minZoom),this.maxZoom);this._zoom!==e&&(this._unmodified=!1,this._zoom=e,this.scale=this.zoomScale(e),this.tileZoom=Math.floor(e),this.zoomFraction=e-this.tileZoom,this._constrain(),this._calcMatrices())},Wi.center.get=function(){return this._center},Wi.center.set=function(t){t.lat===this._center.lat&&t.lng===this._center.lng||(this._unmodified=!1,this._center=t,this._constrain(),this._calcMatrices())},Gi.prototype.coveringZoomLevel=function(t){return(t.roundZoom?Math.round:Math.floor)(this.zoom+this.scaleZoom(this.tileSize/t.tileSize))},Gi.prototype.getVisibleUnwrappedCoordinates=function(e){var i=[new t.UnwrappedTileID(0,e)];if(this._renderWorldCopies)for(var n=this.pointCoordinate(new t.Point(0,0),0),o=this.pointCoordinate(new t.Point(this.width,0),0),r=this.pointCoordinate(new t.Point(this.width,this.height),0),a=this.pointCoordinate(new t.Point(0,this.height),0),s=Math.floor(Math.min(n.column,o.column,r.column,a.column)),l=Math.floor(Math.max(n.column,o.column,r.column,a.column)),c=s-1;c<=l+1;c++)0!==c&&i.push(new t.UnwrappedTileID(c,e));return i},Gi.prototype.coveringTiles=function(e){var i=this.coveringZoomLevel(e),n=i;if(void 0!==e.minzoom&&i<e.minzoom)return[];void 0!==e.maxzoom&&i>e.maxzoom&&(i=e.maxzoom);var o=this.pointCoordinate(this.centerPoint,i),r=new t.Point(o.column-.5,o.row-.5);return function(e,i,n,o){void 0===o&&(o=!0);var r=1<<e,a={};function s(i,s,l){var c,h,u,p;if(l>=0&&l<=r)for(c=i;c<s;c++)h=Math.floor(c/r),u=(c%r+r)%r,0!==h&&!0!==o||(p=new t.OverscaledTileID(n,h,e,u,l),a[p.key]=p)}return ji(i[0],i[1],i[2],0,r,s),ji(i[2],i[3],i[0],0,r,s),Object.keys(a).map(function(t){return a[t]})}(i,[this.pointCoordinate(new t.Point(0,0),i),this.pointCoordinate(new t.Point(this.width,0),i),this.pointCoordinate(new t.Point(this.width,this.height),i),this.pointCoordinate(new t.Point(0,this.height),i)],e.reparseOverscaled?n:i,this._renderWorldCopies).sort(function(t,e){return r.dist(t.canonical)-r.dist(e.canonical)})},Gi.prototype.resize=function(t,e){this.width=t,this.height=e,this.pixelsToGLUnits=[2/t,-2/e],this._constrain(),this._calcMatrices()},Wi.unmodified.get=function(){return this._unmodified},Gi.prototype.zoomScale=function(t){return Math.pow(2,t)},Gi.prototype.scaleZoom=function(t){return Math.log(t)/Math.LN2},Gi.prototype.project=function(e){return new t.Point(this.lngX(e.lng),this.latY(e.lat))},Gi.prototype.unproject=function(t){return new U(this.xLng(t.x),this.yLat(t.y))},Wi.x.get=function(){return this.lngX(this.center.lng)},Wi.y.get=function(){return this.latY(this.center.lat)},Wi.point.get=function(){return new t.Point(this.x,this.y)},Gi.prototype.lngX=function(t){return(180+t)*this.worldSize/360},Gi.prototype.latY=function(e){return e=t.clamp(e,-this.maxValidLatitude,this.maxValidLatitude),(180-180/Math.PI*Math.log(Math.tan(Math.PI/4+e*Math.PI/360)))*this.worldSize/360},Gi.prototype.xLng=function(t){return 360*t/this.worldSize-180},Gi.prototype.yLat=function(t){var e=180-360*t/this.worldSize;return 360/Math.PI*Math.atan(Math.exp(e*Math.PI/180))-90},Gi.prototype.setLocationAtPoint=function(t,e){var i=this.pointCoordinate(e)._sub(this.pointCoordinate(this.centerPoint));this.center=this.coordinateLocation(this.locationCoordinate(t)._sub(i)),this._renderWorldCopies&&(this.center=this.center.wrap())},Gi.prototype.locationPoint=function(t){return this.coordinatePoint(this.locationCoordinate(t))},Gi.prototype.pointLocation=function(t){return this.coordinateLocation(this.pointCoordinate(t))},Gi.prototype.locationCoordinate=function(e){return new t.Coordinate(this.lngX(e.lng)/this.tileSize,this.latY(e.lat)/this.tileSize,this.zoom).zoomTo(this.tileZoom)},Gi.prototype.coordinateLocation=function(t){var e=t.zoomTo(this.zoom);return new U(this.xLng(e.column*this.tileSize),this.yLat(e.row*this.tileSize))},Gi.prototype.pointCoordinate=function(e,i){void 0===i&&(i=this.tileZoom);var n=[e.x,e.y,0,1],o=[e.x,e.y,1,1];t.transformMat4(n,n,this.pixelMatrixInverse),t.transformMat4(o,o,this.pixelMatrixInverse);var r=n[3],a=o[3],s=n[0]/r,l=o[0]/a,c=n[1]/r,h=o[1]/a,u=n[2]/r,p=o[2]/a,d=u===p?0:(0-u)/(p-u);return new t.Coordinate(t.number(s,l,d)/this.tileSize,t.number(c,h,d)/this.tileSize,this.zoom)._zoomTo(i)},Gi.prototype.coordinatePoint=function(e){var i=e.zoomTo(this.zoom),n=[i.column*this.tileSize,i.row*this.tileSize,0,1];return t.transformMat4(n,n,this.pixelMatrix),new t.Point(n[0]/n[3],n[1]/n[3])},Gi.prototype.getBounds=function(){return(new N).extend(this.pointLocation(new t.Point(0,0))).extend(this.pointLocation(new t.Point(this.width,0))).extend(this.pointLocation(new t.Point(this.width,this.height))).extend(this.pointLocation(new t.Point(0,this.height)))},Gi.prototype.getMaxBounds=function(){return this.latRange&&2===this.latRange.length&&this.lngRange&&2===this.lngRange.length?new N([this.lngRange[0],this.latRange[0]],[this.lngRange[1],this.latRange[1]]):null},Gi.prototype.setMaxBounds=function(t){t?(this.lngRange=[t.getWest(),t.getEast()],this.latRange=[t.getSouth(),t.getNorth()],this._constrain()):(this.lngRange=null,this.latRange=[-this.maxValidLatitude,this.maxValidLatitude])},Gi.prototype.calculatePosMatrix=function(e,i){void 0===i&&(i=!1);var n=e.key,o=i?this._alignedPosMatrixCache:this._posMatrixCache;if(o[n])return o[n];var r=e.canonical,a=this.worldSize/this.zoomScale(r.z),s=r.x+Math.pow(2,r.z)*e.wrap,l=t.identity(new Float64Array(16));return t.translate(l,l,[s*a,r.y*a,0]),t.scale(l,l,[a/t.EXTENT,a/t.EXTENT,1]),t.multiply(l,i?this.alignedProjMatrix:this.projMatrix,l),o[n]=new Float32Array(l),o[n]},Gi.prototype._constrain=function(){if(this.center&&this.width&&this.height&&!this._constraining){this._constraining=!0;var e,i,n,o,r=-90,a=90,s=-180,l=180,c=this.size,h=this._unmodified;if(this.latRange){var u=this.latRange;r=this.latY(u[1]),e=(a=this.latY(u[0]))-r<c.y?c.y/(a-r):0}if(this.lngRange){var p=this.lngRange;s=this.lngX(p[0]),i=(l=this.lngX(p[1]))-s<c.x?c.x/(l-s):0}var d=Math.max(i||0,e||0);if(d)return this.center=this.unproject(new t.Point(i?(l+s)/2:this.x,e?(a+r)/2:this.y)),this.zoom+=this.scaleZoom(d),this._unmodified=h,void(this._constraining=!1);if(this.latRange){var _=this.y,f=c.y/2;_-f<r&&(o=r+f),_+f>a&&(o=a-f)}if(this.lngRange){var m=this.x,g=c.x/2;m-g<s&&(n=s+g),m+g>l&&(n=l-g)}void 0===n&&void 0===o||(this.center=this.unproject(new t.Point(void 0!==n?n:this.x,void 0!==o?o:this.y))),this._unmodified=h,this._constraining=!1}},Gi.prototype._calcMatrices=function(){if(this.height){this.cameraToCenterDistance=.5/Math.tan(this._fov/2)*this.height;var e=this._fov/2,i=Math.PI/2+this._pitch,n=Math.sin(e)*this.cameraToCenterDistance/Math.sin(Math.PI-i-e),o=this.x,r=this.y,a=1.01*(Math.cos(Math.PI/2-this._pitch)*n+this.cameraToCenterDistance),s=new Float64Array(16);t.perspective(s,this._fov,this.width/this.height,1,a),t.scale(s,s,[1,-1,1]),t.translate(s,s,[0,0,-this.cameraToCenterDistance]),t.rotateX(s,s,this._pitch),t.rotateZ(s,s,this.angle),t.translate(s,s,[-o,-r,0]);var l=this.worldSize/(2*Math.PI*6378137*Math.abs(Math.cos(this.center.lat*(Math.PI/180))));t.scale(s,s,[1,1,l,1]),this.projMatrix=s;var c=this.width%2/2,h=this.height%2/2,u=Math.cos(this.angle),p=Math.sin(this.angle),d=o-Math.round(o)+u*c+p*h,_=r-Math.round(r)+u*h+p*c,f=new Float64Array(s);if(t.translate(f,f,[d>.5?d-1:d,_>.5?_-1:_,0]),this.alignedProjMatrix=f,s=t.create(),t.scale(s,s,[this.width/2,-this.height/2,1]),t.translate(s,s,[1,-1,0]),this.pixelMatrix=t.multiply(new Float64Array(16),s,this.projMatrix),!(s=t.invert(new Float64Array(16),this.pixelMatrix)))throw new Error("failed to invert matrix");this.pixelMatrixInverse=s,this._posMatrixCache={},this._alignedPosMatrixCache={}}},Gi.prototype.maxPitchScaleFactor=function(){if(!this.pixelMatrixInverse)return 1;var e=this.pointCoordinate(new t.Point(0,0)).zoomTo(this.zoom),i=[e.column*this.tileSize,e.row*this.tileSize,0,1];return t.transformMat4(i,i,this.pixelMatrix)[3]/this.cameraToCenterDistance},Object.defineProperties(Gi.prototype,Wi);var Xi=function(){var e,i,n,o,r;t.bindAll(["_onHashChange","_updateHash"],this),this._updateHash=(e=this._updateHashUnthrottled.bind(this),i=300,n=!1,o=0,r=function(){o=0,n&&(e(),o=setTimeout(r,i),n=!1)},function(){return n=!0,o||r(),o})};Xi.prototype.addTo=function(e){return this._map=e,t.window.addEventListener("hashchange",this._onHashChange,!1),this._map.on("moveend",this._updateHash),this},Xi.prototype.remove=function(){return t.window.removeEventListener("hashchange",this._onHashChange,!1),this._map.off("moveend",this._updateHash),clearTimeout(this._updateHash()),delete this._map,this},Xi.prototype.getHashString=function(t){var e=this._map.getCenter(),i=Math.round(100*this._map.getZoom())/100,n=Math.ceil((i*Math.LN2+Math.log(512/360/.5))/Math.LN10),o=Math.pow(10,n),r=Math.round(e.lng*o)/o,a=Math.round(e.lat*o)/o,s=this._map.getBearing(),l=this._map.getPitch(),c="";return c+=t?"#/"+r+"/"+a+"/"+i:"#"+i+"/"+a+"/"+r,(s||l)&&(c+="/"+Math.round(10*s)/10),l&&(c+="/"+Math.round(l)),c},Xi.prototype._onHashChange=function(){var e=t.window.location.hash.replace("#","").split("/");return e.length>=3&&(this._map.jumpTo({center:[+e[2],+e[1]],zoom:+e[0],bearing:+(e[3]||0),pitch:+(e[4]||0)}),!0)},Xi.prototype._updateHashUnthrottled=function(){var e=this.getHashString();t.window.history.replaceState(t.window.history.state,"",e)};var Hi=function(e){function n(n,o,r,a){void 0===a&&(a={});var s=i.mousePos(o.getCanvasContainer(),r),l=o.unproject(s);e.call(this,n,t.extend({point:s,lngLat:l,originalEvent:r},a)),this._defaultPrevented=!1,this.target=o}e&&(n.__proto__=e),n.prototype=Object.create(e&&e.prototype),n.prototype.constructor=n;var o={defaultPrevented:{configurable:!0}};return n.prototype.preventDefault=function(){this._defaultPrevented=!0},o.defaultPrevented.get=function(){return this._defaultPrevented},Object.defineProperties(n.prototype,o),n}(t.Event),Ki=function(e){function n(n,o,r){var a=i.touchPos(o.getCanvasContainer(),r),s=a.map(function(t){return o.unproject(t)}),l=a.reduce(function(t,e,i,n){return t.add(e.div(n.length))},new t.Point(0,0)),c=o.unproject(l);e.call(this,n,{points:a,point:l,lngLats:s,lngLat:c,originalEvent:r}),this._defaultPrevented=!1}e&&(n.__proto__=e),n.prototype=Object.create(e&&e.prototype),n.prototype.constructor=n;var o={defaultPrevented:{configurable:!0}};return n.prototype.preventDefault=function(){this._defaultPrevented=!0},o.defaultPrevented.get=function(){return this._defaultPrevented},Object.defineProperties(n.prototype,o),n}(t.Event),Yi=function(t){function e(e,i,n){t.call(this,e,{originalEvent:n}),this._defaultPrevented=!1}t&&(e.__proto__=t),e.prototype=Object.create(t&&t.prototype),e.prototype.constructor=e;var i={defaultPrevented:{configurable:!0}};return e.prototype.preventDefault=function(){this._defaultPrevented=!0},i.defaultPrevented.get=function(){return this._defaultPrevented},Object.defineProperties(e.prototype,i),e}(t.Event),Ji=function(e){this._map=e,this._el=e.getCanvasContainer(),this._delta=0,t.bindAll(["_onWheel","_onTimeout","_onScrollFrame","_onScrollFinished"],this)};Ji.prototype.isEnabled=function(){return!!this._enabled},Ji.prototype.isActive=function(){return!!this._active},Ji.prototype.enable=function(t){this.isEnabled()||(this._enabled=!0,this._aroundCenter=t&&"center"===t.around)},Ji.prototype.disable=function(){this.isEnabled()&&(this._enabled=!1)},Ji.prototype.onWheel=function(e){if(this.isEnabled()){var i=e.deltaMode===t.window.WheelEvent.DOM_DELTA_LINE?40*e.deltaY:e.deltaY,n=t.browser.now(),o=n-(this._lastWheelEventTime||0);this._lastWheelEventTime=n,0!==i&&i%4.000244140625==0?this._type="wheel":0!==i&&Math.abs(i)<4?this._type="trackpad":o>400?(this._type=null,this._lastValue=i,this._timeout=setTimeout(this._onTimeout,40,e)):this._type||(this._type=Math.abs(o*i)<200?"trackpad":"wheel",this._timeout&&(clearTimeout(this._timeout),this._timeout=null,i+=this._lastValue)),e.shiftKey&&i&&(i/=4),this._type&&(this._lastWheelEvent=e,this._delta-=i,this.isActive()||this._start(e)),e.preventDefault()}},Ji.prototype._onTimeout=function(t){this._type="wheel",this._delta-=this._lastValue,this.isActive()||this._start(t)},Ji.prototype._start=function(e){if(this._delta){this._frameId&&(this._map._cancelRenderFrame(this._frameId),this._frameId=null),this._active=!0,this._map.fire(new t.Event("movestart",{originalEvent:e})),this._map.fire(new t.Event("zoomstart",{originalEvent:e})),this._finishTimeout&&clearTimeout(this._finishTimeout);var n=i.mousePos(this._el,e);this._around=U.convert(this._aroundCenter?this._map.getCenter():this._map.unproject(n)),this._aroundPoint=this._map.transform.locationPoint(this._around),this._frameId||(this._frameId=this._map._requestRenderFrame(this._onScrollFrame))}},Ji.prototype._onScrollFrame=function(){var e=this;if(this._frameId=null,this.isActive()){var i=this._map.transform;if(0!==this._delta){var n="wheel"===this._type&&Math.abs(this._delta)>4.000244140625?1/450:.01,o=2/(1+Math.exp(-Math.abs(this._delta*n)));this._delta<0&&0!==o&&(o=1/o);var r="number"==typeof this._targetZoom?i.zoomScale(this._targetZoom):i.scale;this._targetZoom=Math.min(i.maxZoom,Math.max(i.minZoom,i.scaleZoom(r*o))),"wheel"===this._type&&(this._startZoom=i.zoom,this._easing=this._smoothOutEasing(200)),this._delta=0}var a="number"==typeof this._targetZoom?this._targetZoom:i.zoom,s=this._startZoom,l=this._easing,c=!1;if("wheel"===this._type&&s&&l){var h=Math.min((t.browser.now()-this._lastWheelEventTime)/200,1),u=l(h);i.zoom=t.number(s,a,u),h<1?this._frameId||(this._frameId=this._map._requestRenderFrame(this._onScrollFrame)):c=!0}else i.zoom=a,c=!0;i.setLocationAtPoint(this._around,this._aroundPoint),this._map.fire(new t.Event("move",{originalEvent:this._lastWheelEvent})),this._map.fire(new t.Event("zoom",{originalEvent:this._lastWheelEvent})),c&&(this._active=!1,this._finishTimeout=setTimeout(function(){e._map.fire(new t.Event("zoomend",{originalEvent:e._lastWheelEvent})),e._map.fire(new t.Event("moveend",{originalEvent:e._lastWheelEvent})),delete e._targetZoom},200))}},Ji.prototype._smoothOutEasing=function(e){var i=t.ease;if(this._prevEase){var n=this._prevEase,o=(t.browser.now()-n.start)/n.duration,r=n.easing(o+.01)-n.easing(o),a=.27/Math.sqrt(r*r+1e-4)*.01,s=Math.sqrt(.0729-a*a);i=t.bezier(a,s,.25,1)}return this._prevEase={start:t.browser.now(),duration:e,easing:i},i};var Qi=function(e,i){this._map=e,this._el=e.getCanvasContainer(),this._container=e.getContainer(),this._clickTolerance=i.clickTolerance||1,t.bindAll(["_onMouseMove","_onMouseUp","_onKeyDown"],this)};Qi.prototype.isEnabled=function(){return!!this._enabled},Qi.prototype.isActive=function(){return!!this._active},Qi.prototype.enable=function(){this.isEnabled()||(this._enabled=!0)},Qi.prototype.disable=function(){this.isEnabled()&&(this._enabled=!1)},Qi.prototype.onMouseDown=function(e){this.isEnabled()&&e.shiftKey&&0===e.button&&(t.window.document.addEventListener("mousemove",this._onMouseMove,!1),t.window.document.addEventListener("keydown",this._onKeyDown,!1),t.window.document.addEventListener("mouseup",this._onMouseUp,!1),i.disableDrag(),this._startPos=this._lastPos=i.mousePos(this._el,e),this._active=!0)},Qi.prototype._onMouseMove=function(t){var e=i.mousePos(this._el,t);if(!(this._lastPos.equals(e)||!this._box&&e.dist(this._startPos)<this._clickTolerance)){var n=this._startPos;this._lastPos=e,this._box||(this._box=i.create("div","mapboxgl-boxzoom",this._container),this._container.classList.add("mapboxgl-crosshair"),this._fireEvent("boxzoomstart",t));var o=Math.min(n.x,e.x),r=Math.max(n.x,e.x),a=Math.min(n.y,e.y),s=Math.max(n.y,e.y);i.setTransform(this._box,"translate("+o+"px,"+a+"px)"),this._box.style.width=r-o+"px",this._box.style.height=s-a+"px"}},Qi.prototype._onMouseUp=function(e){if(0===e.button){var n=this._startPos,o=i.mousePos(this._el,e);this._finish(),i.suppressClick(),n.x===o.x&&n.y===o.y?this._fireEvent("boxzoomcancel",e):this._map.fitScreenCoordinates(n,o,this._map.getBearing(),{linear:!0}).fire(new t.Event("boxzoomend",{originalEvent:e}))}},Qi.prototype._onKeyDown=function(t){27===t.keyCode&&(this._finish(),this._fireEvent("boxzoomcancel",t))},Qi.prototype._finish=function(){this._active=!1,t.window.document.removeEventListener("mousemove",this._onMouseMove,!1),t.window.document.removeEventListener("keydown",this._onKeyDown,!1),t.window.document.removeEventListener("mouseup",this._onMouseUp,!1),this._container.classList.remove("mapboxgl-crosshair"),this._box&&(i.remove(this._box),this._box=null),i.enableDrag(),delete this._startPos,delete this._lastPos},Qi.prototype._fireEvent=function(e,i){return this._map.fire(new t.Event(e,{originalEvent:i}))};var $i=t.bezier(0,0,.25,1),tn=function(e,i){this._map=e,this._el=i.element||e.getCanvasContainer(),this._state="disabled",this._button=i.button||"right",this._bearingSnap=i.bearingSnap||0,this._pitchWithRotate=!1!==i.pitchWithRotate,t.bindAll(["onMouseDown","_onMouseMove","_onMouseUp","_onBlur","_onDragFrame"],this)};tn.prototype.isEnabled=function(){return"disabled"!==this._state},tn.prototype.isActive=function(){return"active"===this._state},tn.prototype.enable=function(){this.isEnabled()||(this._state="enabled")},tn.prototype.disable=function(){if(this.isEnabled())switch(this._state){case"active":this._state="disabled",this._unbind(),this._deactivate(),this._fireEvent("rotateend"),this._pitchWithRotate&&this._fireEvent("pitchend"),this._fireEvent("moveend");break;case"pending":this._state="disabled",this._unbind();break;default:this._state="disabled"}},tn.prototype.onMouseDown=function(e){if("enabled"===this._state){if("right"===this._button){if(this._eventButton=i.mouseButton(e),this._eventButton!==(e.ctrlKey?0:2))return}else{if(e.ctrlKey||0!==i.mouseButton(e))return;this._eventButton=0}i.disableDrag(),t.window.document.addEventListener("mousemove",this._onMouseMove,{capture:!0}),t.window.document.addEventListener("mouseup",this._onMouseUp),t.window.addEventListener("blur",this._onBlur),this._state="pending",this._inertia=[[t.browser.now(),this._map.getBearing()]],this._startPos=this._lastPos=i.mousePos(this._el,e),this._center=this._map.transform.centerPoint,e.preventDefault()}},tn.prototype._onMouseMove=function(t){var e=i.mousePos(this._el,t);this._lastPos.equals(e)||(this._lastMoveEvent=t,this._lastPos=e,"pending"===this._state&&(this._state="active",this._fireEvent("rotatestart",t),this._fireEvent("movestart",t),this._pitchWithRotate&&this._fireEvent("pitchstart",t)),this._frameId||(this._frameId=this._map._requestRenderFrame(this._onDragFrame)))},tn.prototype._onDragFrame=function(){this._frameId=null;var e=this._lastMoveEvent;if(e){var i=this._map.transform,n=this._startPos,o=this._lastPos,r=.8*(n.x-o.x),a=-.5*(n.y-o.y),s=i.bearing-r,l=i.pitch-a,c=this._inertia,h=c[c.length-1];this._drainInertiaBuffer(),c.push([t.browser.now(),this._map._normalizeBearing(s,h[1])]),i.bearing=s,this._pitchWithRotate&&(this._fireEvent("pitch",e),i.pitch=l),this._fireEvent("rotate",e),this._fireEvent("move",e),delete this._lastMoveEvent,this._startPos=this._lastPos}},tn.prototype._onMouseUp=function(t){if(i.mouseButton(t)===this._eventButton)switch(this._state){case"active":this._state="enabled",i.suppressClick(),this._unbind(),this._deactivate(),this._inertialRotate(t);break;case"pending":this._state="enabled",this._unbind()}},tn.prototype._onBlur=function(t){switch(this._state){case"active":this._state="enabled",this._unbind(),this._deactivate(),this._fireEvent("rotateend",t),this._pitchWithRotate&&this._fireEvent("pitchend",t),this._fireEvent("moveend",t);break;case"pending":this._state="enabled",this._unbind()}},tn.prototype._unbind=function(){t.window.document.removeEventListener("mousemove",this._onMouseMove,{capture:!0}),t.window.document.removeEventListener("mouseup",this._onMouseUp),t.window.removeEventListener("blur",this._onBlur),i.enableDrag()},tn.prototype._deactivate=function(){this._frameId&&(this._map._cancelRenderFrame(this._frameId),this._frameId=null),delete this._lastMoveEvent,delete this._startPos,delete this._lastPos},tn.prototype._inertialRotate=function(t){var e=this;this._fireEvent("rotateend",t),this._drainInertiaBuffer();var i=this._map,n=i.getBearing(),o=this._inertia,r=function(){Math.abs(n)<e._bearingSnap?i.resetNorth({noMoveStart:!0},{originalEvent:t}):e._fireEvent("moveend",t),e._pitchWithRotate&&e._fireEvent("pitchend",t)};if(o.length<2)r();else{var a=o[0],s=o[o.length-1],l=o[o.length-2],c=i._normalizeBearing(n,l[1]),h=s[1]-a[1],u=h<0?-1:1,p=(s[0]-a[0])/1e3;if(0!==h&&0!==p){var d=Math.abs(h*(.25/p));d>180&&(d=180);var _=d/180;c+=u*d*(_/2),Math.abs(i._normalizeBearing(c,0))<this._bearingSnap&&(c=i._normalizeBearing(0,c)),i.rotateTo(c,{duration:1e3*_,easing:$i,noMoveStart:!0},{originalEvent:t})}else r()}},tn.prototype._fireEvent=function(e,i){return this._map.fire(new t.Event(e,i?{originalEvent:i}:{}))},tn.prototype._drainInertiaBuffer=function(){for(var e=this._inertia,i=t.browser.now();e.length>0&&i-e[0][0]>160;)e.shift()};var en=t.bezier(0,0,.3,1),nn=function(e,i){this._map=e,this._el=e.getCanvasContainer(),this._state="disabled",this._clickTolerance=i.clickTolerance||1,t.bindAll(["_onMove","_onMouseUp","_onTouchEnd","_onBlur","_onDragFrame"],this)};nn.prototype.isEnabled=function(){return"disabled"!==this._state},nn.prototype.isActive=function(){return"active"===this._state},nn.prototype.enable=function(){this.isEnabled()||(this._el.classList.add("mapboxgl-touch-drag-pan"),this._state="enabled")},nn.prototype.disable=function(){if(this.isEnabled())switch(this._el.classList.remove("mapboxgl-touch-drag-pan"),this._state){case"active":this._state="disabled",this._unbind(),this._deactivate(),this._fireEvent("dragend"),this._fireEvent("moveend");break;case"pending":this._state="disabled",this._unbind();break;default:this._state="disabled"}},nn.prototype.onMouseDown=function(e){"enabled"===this._state&&(e.ctrlKey||0!==i.mouseButton(e)||(i.addEventListener(t.window.document,"mousemove",this._onMove,{capture:!0}),i.addEventListener(t.window.document,"mouseup",this._onMouseUp),this._start(e)))},nn.prototype.onTouchStart=function(e){"enabled"===this._state&&(e.touches.length>1||(i.addEventListener(t.window.document,"touchmove",this._onMove,{capture:!0,passive:!1}),i.addEventListener(t.window.document,"touchend",this._onTouchEnd),this._start(e)))},nn.prototype._start=function(e){t.window.addEventListener("blur",this._onBlur),this._state="pending",this._startPos=this._mouseDownPos=this._lastPos=i.mousePos(this._el,e),this._inertia=[[t.browser.now(),this._startPos]]},nn.prototype._onMove=function(e){e.preventDefault();var n=i.mousePos(this._el,e);this._lastPos.equals(n)||"pending"===this._state&&n.dist(this._mouseDownPos)<this._clickTolerance||(this._lastMoveEvent=e,this._lastPos=n,this._drainInertiaBuffer(),this._inertia.push([t.browser.now(),this._lastPos]),"pending"===this._state&&(this._state="active",this._fireEvent("dragstart",e),this._fireEvent("movestart",e)),this._frameId||(this._frameId=this._map._requestRenderFrame(this._onDragFrame)))},nn.prototype._onDragFrame=function(){this._frameId=null;var t=this._lastMoveEvent;if(t){var e=this._map.transform;e.setLocationAtPoint(e.pointLocation(this._startPos),this._lastPos),this._fireEvent("drag",t),this._fireEvent("move",t),this._startPos=this._lastPos,delete this._lastMoveEvent}},nn.prototype._onMouseUp=function(t){if(0===i.mouseButton(t))switch(this._state){case"active":this._state="enabled",i.suppressClick(),this._unbind(),this._deactivate(),this._inertialPan(t);break;case"pending":this._state="enabled",this._unbind()}},nn.prototype._onTouchEnd=function(t){switch(this._state){case"active":this._state="enabled",this._unbind(),this._deactivate(),this._inertialPan(t);break;case"pending":this._state="enabled",this._unbind()}},nn.prototype._onBlur=function(t){switch(this._state){case"active":this._state="enabled",this._unbind(),this._deactivate(),this._fireEvent("dragend",t),this._fireEvent("moveend",t);break;case"pending":this._state="enabled",this._unbind()}},nn.prototype._unbind=function(){i.removeEventListener(t.window.document,"touchmove",this._onMove,{capture:!0,passive:!1}),i.removeEventListener(t.window.document,"touchend",this._onTouchEnd),i.removeEventListener(t.window.document,"mousemove",this._onMove,{capture:!0}),i.removeEventListener(t.window.document,"mouseup",this._onMouseUp),i.removeEventListener(t.window,"blur",this._onBlur)},nn.prototype._deactivate=function(){this._frameId&&(this._map._cancelRenderFrame(this._frameId),this._frameId=null),delete this._lastMoveEvent,delete this._startPos,delete this._mouseDownPos,delete this._lastPos},nn.prototype._inertialPan=function(t){this._fireEvent("dragend",t),this._drainInertiaBuffer();var e=this._inertia;if(e.length<2)this._fireEvent("moveend",t);else{var i=e[e.length-1],n=e[0],o=i[1].sub(n[1]),r=(i[0]-n[0])/1e3;if(0===r||i[1].equals(n[1]))this._fireEvent("moveend",t);else{var a=o.mult(.3/r),s=a.mag();s>1400&&(s=1400,a._unit()._mult(s));var l=s/750,c=a.mult(-l/2);this._map.panBy(c,{duration:1e3*l,easing:en,noMoveStart:!0},{originalEvent:t})}}},nn.prototype._fireEvent=function(e,i){return this._map.fire(new t.Event(e,i?{originalEvent:i}:{}))},nn.prototype._drainInertiaBuffer=function(){for(var e=this._inertia,i=t.browser.now();e.length>0&&i-e[0][0]>160;)e.shift()};var on=function(e){this._map=e,this._el=e.getCanvasContainer(),t.bindAll(["_onKeyDown"],this)};function rn(t){return t*(2-t)}on.prototype.isEnabled=function(){return!!this._enabled},on.prototype.enable=function(){this.isEnabled()||(this._el.addEventListener("keydown",this._onKeyDown,!1),this._enabled=!0)},on.prototype.disable=function(){this.isEnabled()&&(this._el.removeEventListener("keydown",this._onKeyDown),this._enabled=!1)},on.prototype._onKeyDown=function(t){if(!(t.altKey||t.ctrlKey||t.metaKey)){var e=0,i=0,n=0,o=0,r=0;switch(t.keyCode){case 61:case 107:case 171:case 187:e=1;break;case 189:case 109:case 173:e=-1;break;case 37:t.shiftKey?i=-1:(t.preventDefault(),o=-1);break;case 39:t.shiftKey?i=1:(t.preventDefault(),o=1);break;case 38:t.shiftKey?n=1:(t.preventDefault(),r=-1);break;case 40:t.shiftKey?n=-1:(r=1,t.preventDefault());break;default:return}var a=this._map,s=a.getZoom(),l={duration:300,delayEndEvents:500,easing:rn,zoom:e?Math.round(s)+e*(t.shiftKey?2:1):s,bearing:a.getBearing()+15*i,pitch:a.getPitch()+10*n,offset:[100*-o,100*-r],center:a.getCenter()};a.easeTo(l,{originalEvent:t})}};var an=function(e){this._map=e,t.bindAll(["_onDblClick","_onZoomEnd"],this)};an.prototype.isEnabled=function(){return!!this._enabled},an.prototype.isActive=function(){return!!this._active},an.prototype.enable=function(){this.isEnabled()||(this._enabled=!0)},an.prototype.disable=function(){this.isEnabled()&&(this._enabled=!1)},an.prototype.onTouchStart=function(t){var e=this;this.isEnabled()&&(t.points.length>1||(this._tapped?(clearTimeout(this._tapped),this._tapped=null,this._zoom(t)):this._tapped=setTimeout(function(){e._tapped=null},300)))},an.prototype.onDblClick=function(t){this.isEnabled()&&(t.originalEvent.preventDefault(),this._zoom(t))},an.prototype._zoom=function(t){this._active=!0,this._map.on("zoomend",this._onZoomEnd),this._map.zoomTo(this._map.getZoom()+(t.originalEvent.shiftKey?-1:1),{around:t.lngLat},t)},an.prototype._onZoomEnd=function(){this._active=!1,this._map.off("zoomend",this._onZoomEnd)};var sn=t.bezier(0,0,.15,1),ln=function(e){this._map=e,this._el=e.getCanvasContainer(),t.bindAll(["_onMove","_onEnd","_onTouchFrame"],this)};ln.prototype.isEnabled=function(){return!!this._enabled},ln.prototype.enable=function(t){this.isEnabled()||(this._el.classList.add("mapboxgl-touch-zoom-rotate"),this._enabled=!0,this._aroundCenter=!!t&&"center"===t.around)},ln.prototype.disable=function(){this.isEnabled()&&(this._el.classList.remove("mapboxgl-touch-zoom-rotate"),this._enabled=!1)},ln.prototype.disableRotation=function(){this._rotationDisabled=!0},ln.prototype.enableRotation=function(){this._rotationDisabled=!1},ln.prototype.onStart=function(e){if(this.isEnabled()&&2===e.touches.length){var n=i.mousePos(this._el,e.touches[0]),o=i.mousePos(this._el,e.touches[1]),r=n.add(o).div(2);this._startVec=n.sub(o),this._startAround=this._map.transform.pointLocation(r),this._gestureIntent=void 0,this._inertia=[],i.addEventListener(t.window.document,"touchmove",this._onMove,{passive:!1}),i.addEventListener(t.window.document,"touchend",this._onEnd)}},ln.prototype._getTouchEventData=function(t){var e=i.mousePos(this._el,t.touches[0]),n=i.mousePos(this._el,t.touches[1]),o=e.sub(n);return{vec:o,center:e.add(n).div(2),scale:o.mag()/this._startVec.mag(),bearing:this._rotationDisabled?0:180*o.angleWith(this._startVec)/Math.PI}},ln.prototype._onMove=function(e){if(2===e.touches.length){var i=this._getTouchEventData(e),n=i.vec,o=i.scale,r=i.bearing;if(!this._gestureIntent){var a=Math.abs(1-o)>.15;Math.abs(r)>10?this._gestureIntent="rotate":a&&(this._gestureIntent="zoom"),this._gestureIntent&&(this._map.fire(new t.Event(this._gestureIntent+"start",{originalEvent:e})),this._map.fire(new t.Event("movestart",{originalEvent:e})),this._startVec=n)}this._lastTouchEvent=e,this._frameId||(this._frameId=this._map._requestRenderFrame(this._onTouchFrame)),e.preventDefault()}},ln.prototype._onTouchFrame=function(){this._frameId=null;var e=this._gestureIntent;if(e){var i=this._map.transform;this._startScale||(this._startScale=i.scale,this._startBearing=i.bearing);var n=this._getTouchEventData(this._lastTouchEvent),o=n.center,r=n.bearing,a=n.scale,s=i.pointLocation(o),l=i.locationPoint(s);"rotate"===e&&(i.bearing=this._startBearing+r),i.zoom=i.scaleZoom(this._startScale*a),i.setLocationAtPoint(this._startAround,l),this._map.fire(new t.Event(e,{originalEvent:this._lastTouchEvent})),this._map.fire(new t.Event("move",{originalEvent:this._lastTouchEvent})),this._drainInertiaBuffer(),this._inertia.push([t.browser.now(),a,o])}},ln.prototype._onEnd=function(e){i.removeEventListener(t.window.document,"touchmove",this._onMove,{passive:!1}),i.removeEventListener(t.window.document,"touchend",this._onEnd);var n=this._gestureIntent,o=this._startScale;if(this._frameId&&(this._map._cancelRenderFrame(this._frameId),this._frameId=null),delete this._gestureIntent,delete this._startScale,delete this._startBearing,delete this._lastTouchEvent,n){this._map.fire(new t.Event(n+"end",{originalEvent:e})),this._drainInertiaBuffer();var r=this._inertia,a=this._map;if(r.length<2)a.snapToNorth({},{originalEvent:e});else{var s=r[r.length-1],l=r[0],c=a.transform.scaleZoom(o*s[1]),h=a.transform.scaleZoom(o*l[1]),u=c-h,p=(s[0]-l[0])/1e3,d=s[2];if(0!==p&&c!==h){var _=.15*u/p;Math.abs(_)>2.5&&(_=_>0?2.5:-2.5);var f=1e3*Math.abs(_/(12*.15)),m=c+_*f/2e3;m<0&&(m=0),a.easeTo({zoom:m,duration:f,easing:sn,around:this._aroundCenter?a.getCenter():a.unproject(d),noMoveStart:!0},{originalEvent:e})}else a.snapToNorth({},{originalEvent:e})}}},ln.prototype._drainInertiaBuffer=function(){for(var e=this._inertia,i=t.browser.now();e.length>2&&i-e[0][0]>160;)e.shift()};var cn={scrollZoom:Ji,boxZoom:Qi,dragRotate:tn,dragPan:nn,keyboard:on,doubleClickZoom:an,touchZoomRotate:ln};var hn=function(e){function i(i,n){e.call(this),this._moving=!1,this._zooming=!1,this.transform=i,this._bearingSnap=n.bearingSnap,t.bindAll(["_renderFrameCallback"],this)}return e&&(i.__proto__=e),i.prototype=Object.create(e&&e.prototype),i.prototype.constructor=i,i.prototype.getCenter=function(){return this.transform.center},i.prototype.setCenter=function(t,e){return this.jumpTo({center:t},e)},i.prototype.panBy=function(e,i,n){return e=t.Point.convert(e).mult(-1),this.panTo(this.transform.center,t.extend({offset:e},i),n)},i.prototype.panTo=function(e,i,n){return this.easeTo(t.extend({center:e},i),n)},i.prototype.getZoom=function(){return this.transform.zoom},i.prototype.setZoom=function(t,e){return this.jumpTo({zoom:t},e),this},i.prototype.zoomTo=function(e,i,n){return this.easeTo(t.extend({zoom:e},i),n)},i.prototype.zoomIn=function(t,e){return this.zoomTo(this.getZoom()+1,t,e),this},i.prototype.zoomOut=function(t,e){return this.zoomTo(this.getZoom()-1,t,e),this},i.prototype.getBearing=function(){return this.transform.bearing},i.prototype.setBearing=function(t,e){return this.jumpTo({bearing:t},e),this},i.prototype.rotateTo=function(e,i,n){return this.easeTo(t.extend({bearing:e},i),n)},i.prototype.resetNorth=function(e,i){return this.rotateTo(0,t.extend({duration:1e3},e),i),this},i.prototype.snapToNorth=function(t,e){return Math.abs(this.getBearing())<this._bearingSnap?this.resetNorth(t,e):this},i.prototype.getPitch=function(){return this.transform.pitch},i.prototype.setPitch=function(t,e){return this.jumpTo({pitch:t},e),this},i.prototype.cameraForBounds=function(t,e){return t=N.convert(t),this._cameraForBoxAndBearing(t.getNorthWest(),t.getSouthEast(),0,e)},i.prototype._cameraForBoxAndBearing=function(e,i,n,o){if("number"==typeof(o=t.extend({padding:{top:0,bottom:0,right:0,left:0},offset:[0,0],maxZoom:this.transform.maxZoom},o)).padding){var r=o.padding;o.padding={top:r,bottom:r,right:r,left:r}}if(t.isEqual(Object.keys(o.padding).sort(function(t,e){return t<e?-1:t>e?1:0}),["bottom","left","right","top"])){var a=[(o.padding.left-o.padding.right)/2,(o.padding.top-o.padding.bottom)/2],s=Math.min(o.padding.right,o.padding.left),l=Math.min(o.padding.top,o.padding.bottom);o.offset=[o.offset[0]+a[0],o.offset[1]+a[1]];var c=this.transform,h=c.project(U.convert(e)),u=c.project(U.convert(i)),p=h.rotate(-n*Math.PI/180),d=u.rotate(-n*Math.PI/180),_=new t.Point(Math.max(p.x,d.x),Math.max(p.y,d.y)),f=new t.Point(Math.min(p.x,d.x),Math.min(p.y,d.y)),m=t.Point.convert(o.offset),g=_.sub(f),v=(c.width-2*s-2*Math.abs(m.x))/g.x,y=(c.height-2*l-2*Math.abs(m.y))/g.y;if(!(y<0||v<0))return o.center=c.unproject(h.add(u).div(2)),o.zoom=Math.min(c.scaleZoom(c.scale*Math.min(v,y)),o.maxZoom),o.bearing=n,o;t.warnOnce("Map cannot fit within canvas with the given bounds, padding, and/or offset.")}else t.warnOnce("options.padding must be a positive number, or an Object with keys 'bottom', 'left', 'right', 'top'")},i.prototype.fitBounds=function(t,e,i){return this._fitInternal(this.cameraForBounds(t,e),e,i)},i.prototype.fitScreenCoordinates=function(e,i,n,o,r){return this._fitInternal(this._cameraForBoxAndBearing(this.transform.pointLocation(t.Point.convert(e)),this.transform.pointLocation(t.Point.convert(i)),n,o),o,r)},i.prototype._fitInternal=function(e,i,n){return e?(i=t.extend(e,i)).linear?this.easeTo(i,n):this.flyTo(i,n):this},i.prototype.jumpTo=function(e,i){this.stop();var n=this.transform,o=!1,r=!1,a=!1;return"zoom"in e&&n.zoom!==+e.zoom&&(o=!0,n.zoom=+e.zoom),void 0!==e.center&&(n.center=U.convert(e.center)),"bearing"in e&&n.bearing!==+e.bearing&&(r=!0,n.bearing=+e.bearing),"pitch"in e&&n.pitch!==+e.pitch&&(a=!0,n.pitch=+e.pitch),this.fire(new t.Event("movestart",i)).fire(new t.Event("move",i)),o&&this.fire(new t.Event("zoomstart",i)).fire(new t.Event("zoom",i)).fire(new t.Event("zoomend",i)),r&&this.fire(new t.Event("rotatestart",i)).fire(new t.Event("rotate",i)).fire(new t.Event("rotateend",i)),a&&this.fire(new t.Event("pitchstart",i)).fire(new t.Event("pitch",i)).fire(new t.Event("pitchend",i)),this.fire(new t.Event("moveend",i))},i.prototype.easeTo=function(e,i){var n=this;this.stop(),!1===(e=t.extend({offset:[0,0],duration:500,easing:t.ease},e)).animate&&(e.duration=0);var o=this.transform,r=this.getZoom(),a=this.getBearing(),s=this.getPitch(),l="zoom"in e?+e.zoom:r,c="bearing"in e?this._normalizeBearing(e.bearing,a):a,h="pitch"in e?+e.pitch:s,u=o.centerPoint.add(t.Point.convert(e.offset)),p=o.pointLocation(u),d=U.convert(e.center||p);this._normalizeCenter(d);var _,f,m=o.project(p),g=o.project(d).sub(m),v=o.zoomScale(l-r);return e.around&&(_=U.convert(e.around),f=o.locationPoint(_)),this._zooming=l!==r,this._rotating=a!==c,this._pitching=h!==s,this._prepareEase(i,e.noMoveStart),clearTimeout(this._easeEndTimeoutID),this._ease(function(e){if(n._zooming&&(o.zoom=t.number(r,l,e)),n._rotating&&(o.bearing=t.number(a,c,e)),n._pitching&&(o.pitch=t.number(s,h,e)),_)o.setLocationAtPoint(_,f);else{var p=o.zoomScale(o.zoom-r),d=l>r?Math.min(2,v):Math.max(.5,v),y=Math.pow(d,1-e),x=o.unproject(m.add(g.mult(e*y)).mult(p));o.setLocationAtPoint(o.renderWorldCopies?x.wrap():x,u)}n._fireMoveEvents(i)},function(){e.delayEndEvents?n._easeEndTimeoutID=setTimeout(function(){return n._afterEase(i)},e.delayEndEvents):n._afterEase(i)},e),this},i.prototype._prepareEase=function(e,i){this._moving=!0,i||this.fire(new t.Event("movestart",e)),this._zooming&&this.fire(new t.Event("zoomstart",e)),this._rotating&&this.fire(new t.Event("rotatestart",e)),this._pitching&&this.fire(new t.Event("pitchstart",e))},i.prototype._fireMoveEvents=function(e){this.fire(new t.Event("move",e)),this._zooming&&this.fire(new t.Event("zoom",e)),this._rotating&&this.fire(new t.Event("rotate",e)),this._pitching&&this.fire(new t.Event("pitch",e))},i.prototype._afterEase=function(e){var i=this._zooming,n=this._rotating,o=this._pitching;this._moving=!1,this._zooming=!1,this._rotating=!1,this._pitching=!1,i&&this.fire(new t.Event("zoomend",e)),n&&this.fire(new t.Event("rotateend",e)),o&&this.fire(new t.Event("pitchend",e)),this.fire(new t.Event("moveend",e))},i.prototype.flyTo=function(e,i){var n=this;this.stop(),e=t.extend({offset:[0,0],speed:1.2,curve:1.42,easing:t.ease},e);var o=this.transform,r=this.getZoom(),a=this.getBearing(),s=this.getPitch(),l="zoom"in e?t.clamp(+e.zoom,o.minZoom,o.maxZoom):r,c="bearing"in e?this._normalizeBearing(e.bearing,a):a,h="pitch"in e?+e.pitch:s,u=o.zoomScale(l-r),p=o.centerPoint.add(t.Point.convert(e.offset)),d=o.pointLocation(p),_=U.convert(e.center||d);this._normalizeCenter(_);var f=o.project(d),m=o.project(_).sub(f),g=e.curve,v=Math.max(o.width,o.height),y=v/u,x=m.mag();if("minZoom"in e){var b=t.clamp(Math.min(e.minZoom,r,l),o.minZoom,o.maxZoom),w=v/o.zoomScale(b-r);g=Math.sqrt(w/x*2)}var E=g*g;function T(t){var e=(y*y-v*v+(t?-1:1)*E*E*x*x)/(2*(t?y:v)*E*x);return Math.log(Math.sqrt(e*e+1)-e)}function S(t){return(Math.exp(t)-Math.exp(-t))/2}function I(t){return(Math.exp(t)+Math.exp(-t))/2}var C=T(0),z=function(t){return I(C)/I(C+g*t)},P=function(t){return v*((I(C)*(S(e=C+g*t)/I(e))-S(C))/E)/x;var e},R=(T(1)-C)/g;if(Math.abs(x)<1e-6||!isFinite(R)){if(Math.abs(v-y)<1e-6)return this.easeTo(e,i);var A=y<v?-1:1;R=Math.abs(Math.log(y/v))/g,P=function(){return 0},z=function(t){return Math.exp(A*g*t)}}if("duration"in e)e.duration=+e.duration;else{var L="screenSpeed"in e?+e.screenSpeed/g:+e.speed;e.duration=1e3*R/L}return e.maxDuration&&e.duration>e.maxDuration&&(e.duration=0),this._zooming=!0,this._rotating=a!==c,this._pitching=h!==s,this._prepareEase(i,!1),this._ease(function(e){var u=e*R,d=1/z(u);o.zoom=1===e?l:r+o.scaleZoom(d),n._rotating&&(o.bearing=t.number(a,c,e)),n._pitching&&(o.pitch=t.number(s,h,e));var g=1===e?_:o.unproject(f.add(m.mult(P(u))).mult(d));o.setLocationAtPoint(o.renderWorldCopies?g.wrap():g,p),n._fireMoveEvents(i)},function(){return n._afterEase(i)},e),this},i.prototype.isEasing=function(){return!!this._easeFrameId},i.prototype.stop=function(){if(this._easeFrameId&&(this._cancelRenderFrame(this._easeFrameId),delete this._easeFrameId,delete this._onEaseFrame),this._onEaseEnd){var t=this._onEaseEnd;delete this._onEaseEnd,t.call(this)}return this},i.prototype._ease=function(e,i,n){!1===n.animate||0===n.duration?(e(1),i()):(this._easeStart=t.browser.now(),this._easeOptions=n,this._onEaseFrame=e,this._onEaseEnd=i,this._easeFrameId=this._requestRenderFrame(this._renderFrameCallback))},i.prototype._renderFrameCallback=function(){var e=Math.min((t.browser.now()-this._easeStart)/this._easeOptions.duration,1);this._onEaseFrame(this._easeOptions.easing(e)),e<1?this._easeFrameId=this._requestRenderFrame(this._renderFrameCallback):this.stop()},i.prototype._normalizeBearing=function(e,i){e=t.wrap(e,-180,180);var n=Math.abs(e-i);return Math.abs(e-360-i)<n&&(e-=360),Math.abs(e+360-i)<n&&(e+=360),e},i.prototype._normalizeCenter=function(t){var e=this.transform;if(e.renderWorldCopies&&!e.lngRange){var i=t.lng-e.center.lng;t.lng+=i>180?-360:i<-180?360:0}},i}(t.Evented),un=function(e){void 0===e&&(e={}),this.options=e,t.bindAll(["_updateEditLink","_updateData","_updateCompact"],this)};un.prototype.getDefaultPosition=function(){return"bottom-right"},un.prototype.onAdd=function(t){var e=this.options&&this.options.compact;return this._map=t,this._container=i.create("div","mapboxgl-ctrl mapboxgl-ctrl-attrib"),e&&this._container.classList.add("mapboxgl-compact"),this._updateAttributions(),this._updateEditLink(),this._map.on("sourcedata",this._updateData),this._map.on("moveend",this._updateEditLink),void 0===e&&(this._map.on("resize",this._updateCompact),this._updateCompact()),this._container},un.prototype.onRemove=function(){i.remove(this._container),this._map.off("sourcedata",this._updateData),this._map.off("moveend",this._updateEditLink),this._map.off("resize",this._updateCompact),this._map=void 0},un.prototype._updateEditLink=function(){var t=this._editLink;t||(t=this._editLink=this._container.querySelector(".mapbox-improve-map"));var e=[{key:"owner",value:this.styleOwner},{key:"id",value:this.styleId},{key:"access_token",value:u.ACCESS_TOKEN}];if(t){var i=e.reduce(function(t,i,n){return i.value&&(t+=i.key+"="+i.value+(n<e.length-1?"&":"")),t},"?");t.href="https://www.mapbox.com/feedback/"+i+(this._map._hash?this._map._hash.getHashString(!0):"")}},un.prototype._updateData=function(t){t&&"metadata"===t.sourceDataType&&(this._updateAttributions(),this._updateEditLink())},un.prototype._updateAttributions=function(){if(this._map.style){var t=[];if(this.options.customAttribution&&(Array.isArray(this.options.customAttribution)?t=t.concat(this.options.customAttribution):"string"==typeof this.options.customAttribution&&t.push(this.options.customAttribution)),this._map.style.stylesheet){var e=this._map.style.stylesheet;this.styleOwner=e.owner,this.styleId=e.id}var i=this._map.style.sourceCaches;for(var n in i){var o=i[n].getSource();o.attribution&&t.indexOf(o.attribution)<0&&t.push(o.attribution)}t.sort(function(t,e){return t.length-e.length}),(t=t.filter(function(e,i){for(var n=i+1;n<t.length;n++)if(t[n].indexOf(e)>=0)return!1;return!0})).length?(this._container.innerHTML=t.join(" | "),this._container.classList.remove("mapboxgl-attrib-empty")):this._container.classList.add("mapboxgl-attrib-empty"),this._editLink=null}},un.prototype._updateCompact=function(){this._map.getCanvasContainer().offsetWidth<=640?this._container.classList.add("mapboxgl-compact"):this._container.classList.remove("mapboxgl-compact")};var pn=function(){t.bindAll(["_updateLogo"],this),t.bindAll(["_updateCompact"],this)};pn.prototype.onAdd=function(t){this._map=t,this._container=i.create("div","mapboxgl-ctrl");var e=i.create("a","mapboxgl-ctrl-logo");return e.target="_blank",e.href="https://www.mapbox.com/",e.setAttribute("aria-label","Mapbox logo"),e.setAttribute("rel","noopener"),this._container.appendChild(e),this._container.style.display="none",this._map.on("sourcedata",this._updateLogo),this._updateLogo(),this._map.on("resize",this._updateCompact),this._updateCompact(),this._container},pn.prototype.onRemove=function(){i.remove(this._container),this._map.off("sourcedata",this._updateLogo),this._map.off("resize",this._updateCompact)},pn.prototype.getDefaultPosition=function(){return"bottom-left"},pn.prototype._updateLogo=function(t){t&&"metadata"!==t.sourceDataType||(this._container.style.display=this._logoRequired()?"block":"none")},pn.prototype._logoRequired=function(){if(this._map.style){var t=this._map.style.sourceCaches;for(var e in t){if(t[e].getSource().mapbox_logo)return!0}return!1}},pn.prototype._updateCompact=function(){var t=this._container.children;if(t.length){var e=t[0];this._map.getCanvasContainer().offsetWidth<250?e.classList.add("mapboxgl-compact"):e.classList.remove("mapboxgl-compact")}};var dn=function(){this._queue=[],this._id=0,this._cleared=!1,this._currentlyRunning=!1};dn.prototype.add=function(t){var e=++this._id;return this._queue.push({callback:t,id:e,cancelled:!1}),e},dn.prototype.remove=function(t){for(var e=this._currentlyRunning,i=0,n=e?this._queue.concat(e):this._queue;i<n.length;i+=1){var o=n[i];if(o.id===t)return void(o.cancelled=!0)}},dn.prototype.run=function(){var t=this._currentlyRunning=this._queue;this._queue=[];for(var e=0,i=t;e<i.length;e+=1){var n=i[e];if(!n.cancelled&&(n.callback(),this._cleared))break}this._cleared=!1,this._currentlyRunning=!1},dn.prototype.clear=function(){this._currentlyRunning&&(this._cleared=!0),this._queue=[]};var _n=t.window.HTMLImageElement,fn=t.window.HTMLElement,mn={center:[0,0],zoom:0,bearing:0,pitch:0,minZoom:0,maxZoom:22,interactive:!0,scrollZoom:!0,boxZoom:!0,dragRotate:!0,dragPan:!0,keyboard:!0,doubleClickZoom:!0,touchZoomRotate:!0,bearingSnap:7,clickTolerance:3,hash:!1,attributionControl:!0,failIfMajorPerformanceCaveat:!1,preserveDrawingBuffer:!1,trackResize:!0,renderWorldCopies:!0,refreshExpiredTiles:!0,maxTileCacheSize:null,transformRequest:null,fadeDuration:300,crossSourceCollisions:!0},gn=function(n){function o(e){var o=this;if(null!=(e=t.extend({},mn,e)).minZoom&&null!=e.maxZoom&&e.minZoom>e.maxZoom)throw new Error("maxZoom must be greater than minZoom");var r=new Gi(e.minZoom,e.maxZoom,e.renderWorldCopies);n.call(this,r,e),this._interactive=e.interactive,this._maxTileCacheSize=e.maxTileCacheSize,this._failIfMajorPerformanceCaveat=e.failIfMajorPerformanceCaveat,this._preserveDrawingBuffer=e.preserveDrawingBuffer,this._trackResize=e.trackResize,this._bearingSnap=e.bearingSnap,this._refreshExpiredTiles=e.refreshExpiredTiles,this._fadeDuration=e.fadeDuration,this._crossSourceCollisions=e.crossSourceCollisions,this._crossFadingFactor=1,this._collectResourceTiming=e.collectResourceTiming,this._renderTaskQueue=new dn,this._controls=[];var a=e.transformRequest;if(this._transformRequest=a?function(t,e){return a(t,e)||{url:t}}:function(t){return{url:t}},"string"==typeof e.container){if(this._container=t.window.document.getElementById(e.container),!this._container)throw new Error("Container '"+e.container+"' not found.")}else{if(!(e.container instanceof fn))throw new Error("Invalid type: 'container' must be a String or HTMLElement.");this._container=e.container}if(e.maxBounds&&this.setMaxBounds(e.maxBounds),t.bindAll(["_onWindowOnline","_onWindowResize","_contextLost","_contextRestored"],this),this._setupContainer(),this._setupPainter(),void 0===this.painter)throw new Error("Failed to initialize WebGL.");this.on("move",function(){return o._update(!1)}),this.on("zoom",function(){return o._update(!0)}),void 0!==t.window&&(t.window.addEventListener("online",this._onWindowOnline,!1),t.window.addEventListener("resize",this._onWindowResize,!1)),function(t,e){var n=t.getCanvasContainer(),o=null,r=!1,a=null;for(var s in cn)t[s]=new cn[s](t,e),e.interactive&&e[s]&&t[s].enable(e[s]);i.addEventListener(n,"mouseout",function(e){t.fire(new Hi("mouseout",t,e))}),i.addEventListener(n,"mousedown",function(o){r=!0,a=i.mousePos(n,o);var s=new Hi("mousedown",t,o);t.fire(s),s.defaultPrevented||(e.interactive&&!t.doubleClickZoom.isActive()&&t.stop(),t.boxZoom.onMouseDown(o),t.boxZoom.isActive()||t.dragPan.isActive()||t.dragRotate.onMouseDown(o),t.boxZoom.isActive()||t.dragRotate.isActive()||t.dragPan.onMouseDown(o))}),i.addEventListener(n,"mouseup",function(e){var i=t.dragRotate.isActive();o&&!i&&t.fire(new Hi("contextmenu",t,o)),o=null,r=!1,t.fire(new Hi("mouseup",t,e))}),i.addEventListener(n,"mousemove",function(e){if(!t.dragPan.isActive()&&!t.dragRotate.isActive()){for(var i=e.target;i&&i!==n;)i=i.parentNode;i===n&&t.fire(new Hi("mousemove",t,e))}}),i.addEventListener(n,"mouseover",function(e){for(var i=e.target;i&&i!==n;)i=i.parentNode;i===n&&t.fire(new Hi("mouseover",t,e))}),i.addEventListener(n,"touchstart",function(i){var n=new Ki("touchstart",t,i);t.fire(n),n.defaultPrevented||(e.interactive&&t.stop(),t.boxZoom.isActive()||t.dragRotate.isActive()||t.dragPan.onTouchStart(i),t.touchZoomRotate.onStart(i),t.doubleClickZoom.onTouchStart(n))},{passive:!1}),i.addEventListener(n,"touchmove",function(e){t.fire(new Ki("touchmove",t,e))},{passive:!1}),i.addEventListener(n,"touchend",function(e){t.fire(new Ki("touchend",t,e))}),i.addEventListener(n,"touchcancel",function(e){t.fire(new Ki("touchcancel",t,e))}),i.addEventListener(n,"click",function(o){var r=i.mousePos(n,o);(r.equals(a)||r.dist(a)<e.clickTolerance)&&t.fire(new Hi("click",t,o))}),i.addEventListener(n,"dblclick",function(e){var i=new Hi("dblclick",t,e);t.fire(i),i.defaultPrevented||t.doubleClickZoom.onDblClick(i)}),i.addEventListener(n,"contextmenu",function(e){var i=t.dragRotate.isActive();r||i?r&&(o=e):t.fire(new Hi("contextmenu",t,e)),e.preventDefault()}),i.addEventListener(n,"wheel",function(i){e.interactive&&t.stop();var n=new Yi("wheel",t,i);t.fire(n),n.defaultPrevented||t.scrollZoom.onWheel(i)},{passive:!1})}(this,e),this._hash=e.hash&&(new Xi).addTo(this),this._hash&&this._hash._onHashChange()||this.jumpTo({center:e.center,zoom:e.zoom,bearing:e.bearing,pitch:e.pitch}),this.resize(),e.style&&this.setStyle(e.style,{localIdeographFontFamily:e.localIdeographFontFamily}),e.attributionControl&&this.addControl(new un({customAttribution:e.customAttribution})),this.addControl(new pn,e.logoPosition),this.on("style.load",function(){o.transform.unmodified&&o.jumpTo(o.style.stylesheet)}),this.on("data",function(e){o._update("style"===e.dataType),o.fire(new t.Event(e.dataType+"data",e))}),this.on("dataloading",function(e){o.fire(new t.Event(e.dataType+"dataloading",e))})}n&&(o.__proto__=n),o.prototype=Object.create(n&&n.prototype),o.prototype.constructor=o;var r={showTileBoundaries:{configurable:!0},showCollisionBoxes:{configurable:!0},showOverdrawInspector:{configurable:!0},repaint:{configurable:!0},vertices:{configurable:!0}};return o.prototype.addControl=function(e,i){if(void 0===i&&e.getDefaultPosition&&(i=e.getDefaultPosition()),void 0===i&&(i="top-right"),!e||!e.onAdd)return this.fire(new t.ErrorEvent(new Error("Invalid argument to map.addControl(). Argument must be a control with onAdd and onRemove methods.")));var n=e.onAdd(this);this._controls.push(e);var o=this._controlPositions[i];return-1!==i.indexOf("bottom")?o.insertBefore(n,o.firstChild):o.appendChild(n),this},o.prototype.removeControl=function(e){if(!e||!e.onRemove)return this.fire(new t.ErrorEvent(new Error("Invalid argument to map.removeControl(). Argument must be a control with onAdd and onRemove methods.")));var i=this._controls.indexOf(e);return i>-1&&this._controls.splice(i,1),e.onRemove(this),this},o.prototype.resize=function(e){var i=this._containerDimensions(),n=i[0],o=i[1];return this._resizeCanvas(n,o),this.transform.resize(n,o),this.painter.resize(n,o),this.fire(new t.Event("movestart",e)).fire(new t.Event("move",e)).fire(new t.Event("resize",e)).fire(new t.Event("moveend",e)),this},o.prototype.getBounds=function(){return this.transform.getBounds()},o.prototype.getMaxBounds=function(){return this.transform.getMaxBounds()},o.prototype.setMaxBounds=function(t){return this.transform.setMaxBounds(N.convert(t)),this._update()},o.prototype.setMinZoom=function(t){if((t=null==t?0:t)>=0&&t<=this.transform.maxZoom)return this.transform.minZoom=t,this._update(),this.getZoom()<t&&this.setZoom(t),this;throw new Error("minZoom must be between 0 and the current maxZoom, inclusive")},o.prototype.getMinZoom=function(){return this.transform.minZoom},o.prototype.setMaxZoom=function(t){if((t=null==t?22:t)>=this.transform.minZoom)return this.transform.maxZoom=t,this._update(),this.getZoom()>t&&this.setZoom(t),this;throw new Error("maxZoom must be greater than the current minZoom")},o.prototype.getRenderWorldCopies=function(){return this.transform.renderWorldCopies},o.prototype.setRenderWorldCopies=function(t){return this.transform.renderWorldCopies=t,this._update()},o.prototype.getMaxZoom=function(){return this.transform.maxZoom},o.prototype.project=function(t){return this.transform.locationPoint(U.convert(t))},o.prototype.unproject=function(e){return this.transform.pointLocation(t.Point.convert(e))},o.prototype.isMoving=function(){return this._moving||this.dragPan.isActive()||this.dragRotate.isActive()||this.scrollZoom.isActive()},o.prototype.isZooming=function(){return this._zooming||this.scrollZoom.isActive()},o.prototype.isRotating=function(){return this._rotating||this.dragRotate.isActive()},o.prototype.on=function(t,e,i){var o,r=this;if(void 0===i)return n.prototype.on.call(this,t,e);var a=function(){if("mouseenter"===t||"mouseover"===t){var n=!1;return{layer:e,listener:i,delegates:{mousemove:function(o){var a=r.getLayer(e)?r.queryRenderedFeatures(o.point,{layers:[e]}):[];a.length?n||(n=!0,i.call(r,new Hi(t,r,o.originalEvent,{features:a}))):n=!1},mouseout:function(){n=!1}}}}if("mouseleave"===t||"mouseout"===t){var a=!1;return{layer:e,listener:i,delegates:{mousemove:function(n){(r.getLayer(e)?r.queryRenderedFeatures(n.point,{layers:[e]}):[]).length?a=!0:a&&(a=!1,i.call(r,new Hi(t,r,n.originalEvent)))},mouseout:function(e){a&&(a=!1,i.call(r,new Hi(t,r,e.originalEvent)))}}}}return{layer:e,listener:i,delegates:(o={},o[t]=function(t){var n=r.getLayer(e)?r.queryRenderedFeatures(t.point,{layers:[e]}):[];n.length&&(t.features=n,i.call(r,t),delete t.features)},o)}}();for(var s in this._delegatedListeners=this._delegatedListeners||{},this._delegatedListeners[t]=this._delegatedListeners[t]||[],this._delegatedListeners[t].push(a),a.delegates)r.on(s,a.delegates[s]);return this},o.prototype.off=function(t,e,i){if(void 0===i)return n.prototype.off.call(this,t,e);if(this._delegatedListeners&&this._delegatedListeners[t])for(var o=this._delegatedListeners[t],r=0;r<o.length;r++){var a=o[r];if(a.layer===e&&a.listener===i){for(var s in a.delegates)this.off(s,a.delegates[s]);return o.splice(r,1),this}}return this},o.prototype.queryRenderedFeatures=function(e,i){if(!this.style)return[];var n;if(void 0!==i||void 0===e||e instanceof t.Point||Array.isArray(e)||(i=e,e=void 0),i=i||{},(e=e||[[0,0],[this.transform.width,this.transform.height]])instanceof t.Point||"number"==typeof e[0])n=[t.Point.convert(e)];else{var o=t.Point.convert(e[0]),r=t.Point.convert(e[1]);n=[o,new t.Point(r.x,o.y),r,new t.Point(o.x,r.y),o]}return this.style.queryRenderedFeatures(n,i,this.transform)},o.prototype.querySourceFeatures=function(t,e){return this.style.querySourceFeatures(t,e)},o.prototype.setStyle=function(e,i){if((!i||!1!==i.diff&&!i.localIdeographFontFamily)&&this.style&&e&&"object"==typeof e)try{return this.style.setState(e)&&this._update(!0),this}catch(e){t.warnOnce("Unable to perform style diff: "+(e.message||e.error||e)+".  Rebuilding the style from scratch.")}return this.style&&(this.style.setEventedParent(null),this.style._remove()),e?(this.style=new Ve(this,i||{}),this.style.setEventedParent(this,{style:this.style}),"string"==typeof e?this.style.loadURL(e):this.style.loadJSON(e),this):(delete this.style,this)},o.prototype.getStyle=function(){if(this.style)return this.style.serialize()},o.prototype.isStyleLoaded=function(){return this.style?this.style.loaded():t.warnOnce("There is no style added to the map.")},o.prototype.addSource=function(t,e){return this.style.addSource(t,e),this._update(!0)},o.prototype.isSourceLoaded=function(e){var i=this.style&&this.style.sourceCaches[e];if(void 0!==i)return i.loaded();this.fire(new t.ErrorEvent(new Error("There is no source with ID '"+e+"'")))},o.prototype.areTilesLoaded=function(){var t=this.style&&this.style.sourceCaches;for(var e in t){var i=t[e]._tiles;for(var n in i){var o=i[n];if("loaded"!==o.state&&"errored"!==o.state)return!1}}return!0},o.prototype.addSourceType=function(t,e,i){return this.style.addSourceType(t,e,i)},o.prototype.removeSource=function(t){return this.style.removeSource(t),this._update(!0)},o.prototype.getSource=function(t){return this.style.getSource(t)},o.prototype.addImage=function(e,i,n){void 0===n&&(n={});var o=n.pixelRatio;void 0===o&&(o=1);var r=n.sdf;if(void 0===r&&(r=!1),i instanceof _n){var a=t.browser.getImageData(i),s=a.width,l=a.height,c=a.data;this.style.addImage(e,{data:new t.RGBAImage({width:s,height:l},c),pixelRatio:o,sdf:r})}else{if(void 0===i.width||void 0===i.height)return this.fire(new t.ErrorEvent(new Error("Invalid arguments to map.addImage(). The second argument must be an `HTMLImageElement`, `ImageData`, or object with `width`, `height`, and `data` properties with the same format as `ImageData`")));var h=i.width,u=i.height,p=i.data;this.style.addImage(e,{data:new t.RGBAImage({width:h,height:u},new Uint8Array(p)),pixelRatio:o,sdf:r})}},o.prototype.hasImage=function(e){return e?!!this.style.getImage(e):(this.fire(new t.ErrorEvent(new Error("Missing required image id"))),!1)},o.prototype.removeImage=function(t){this.style.removeImage(t)},o.prototype.loadImage=function(e,i){t.getImage(this._transformRequest(e,t.ResourceType.Image),i)},o.prototype.listImages=function(){return this.style.listImages()},o.prototype.addLayer=function(t,e){return this.style.addLayer(t,e),this._update(!0)},o.prototype.moveLayer=function(t,e){return this.style.moveLayer(t,e),this._update(!0)},o.prototype.removeLayer=function(t){return this.style.removeLayer(t),this._update(!0)},o.prototype.getLayer=function(t){return this.style.getLayer(t)},o.prototype.setFilter=function(t,e){return this.style.setFilter(t,e),this._update(!0)},o.prototype.setLayerZoomRange=function(t,e,i){return this.style.setLayerZoomRange(t,e,i),this._update(!0)},o.prototype.getFilter=function(t){return this.style.getFilter(t)},o.prototype.setPaintProperty=function(t,e,i){return this.style.setPaintProperty(t,e,i),this._update(!0)},o.prototype.getPaintProperty=function(t,e){return this.style.getPaintProperty(t,e)},o.prototype.setLayoutProperty=function(t,e,i){return this.style.setLayoutProperty(t,e,i),this._update(!0)},o.prototype.getLayoutProperty=function(t,e){return this.style.getLayoutProperty(t,e)},o.prototype.setLight=function(t){return this.style.setLight(t),this._update(!0)},o.prototype.getLight=function(){return this.style.getLight()},o.prototype.setFeatureState=function(t,e){return this.style.setFeatureState(t,e),this._update()},o.prototype.getFeatureState=function(t){return this.style.getFeatureState(t)},o.prototype.getContainer=function(){return this._container},o.prototype.getCanvasContainer=function(){return this._canvasContainer},o.prototype.getCanvas=function(){return this._canvas},o.prototype._containerDimensions=function(){var t=0,e=0;return this._container&&(t=this._container.clientWidth||400,e=this._container.clientHeight||300),[t,e]},o.prototype._detectMissingCSS=function(){"rgb(250, 128, 114)"!==t.window.getComputedStyle(this._missingCSSCanary).getPropertyValue("background-color")&&t.warnOnce("This page appears to be missing CSS declarations for Mapbox GL JS, which may cause the map to display incorrectly. Please ensure your page includes mapbox-gl.css, as described in https://www.mapbox.com/mapbox-gl-js/api/.")},o.prototype._setupContainer=function(){var t=this._container;t.classList.add("mapboxgl-map"),(this._missingCSSCanary=i.create("div","mapboxgl-canary",t)).style.visibility="hidden",this._detectMissingCSS();var e=this._canvasContainer=i.create("div","mapboxgl-canvas-container",t);this._interactive&&e.classList.add("mapboxgl-interactive"),this._canvas=i.create("canvas","mapboxgl-canvas",e),this._canvas.style.position="absolute",this._canvas.addEventListener("webglcontextlost",this._contextLost,!1),this._canvas.addEventListener("webglcontextrestored",this._contextRestored,!1),this._canvas.setAttribute("tabindex","0"),this._canvas.setAttribute("aria-label","Map");var n=this._containerDimensions();this._resizeCanvas(n[0],n[1]);var o=this._controlContainer=i.create("div","mapboxgl-control-container",t),r=this._controlPositions={};["top-left","top-right","bottom-left","bottom-right"].forEach(function(t){r[t]=i.create("div","mapboxgl-ctrl-"+t,o)})},o.prototype._resizeCanvas=function(e,i){var n=t.window.devicePixelRatio||1;this._canvas.width=n*e,this._canvas.height=n*i,this._canvas.style.width=e+"px",this._canvas.style.height=i+"px"},o.prototype._setupPainter=function(){var i=t.extend({failIfMajorPerformanceCaveat:this._failIfMajorPerformanceCaveat,preserveDrawingBuffer:this._preserveDrawingBuffer},e.webGLContextAttributes),n=this._canvas.getContext("webgl",i)||this._canvas.getContext("experimental-webgl",i);n?this.painter=new Zi(n,this.transform):this.fire(new t.ErrorEvent(new Error("Failed to initialize WebGL")))},o.prototype._contextLost=function(e){e.preventDefault(),this._frame&&(this._frame.cancel(),this._frame=null),this.fire(new t.Event("webglcontextlost",{originalEvent:e}))},o.prototype._contextRestored=function(e){this._setupPainter(),this.resize(),this._update(),this.fire(new t.Event("webglcontextrestored",{originalEvent:e}))},o.prototype.loaded=function(){return!this._styleDirty&&!this._sourcesDirty&&!!this.style&&this.style.loaded()},o.prototype._update=function(t){return this.style?(this._styleDirty=this._styleDirty||t,this._sourcesDirty=!0,this._rerender(),this):this},o.prototype._requestRenderFrame=function(t){return this._update(),this._renderTaskQueue.add(t)},o.prototype._cancelRenderFrame=function(t){this._renderTaskQueue.remove(t)},o.prototype._render=function(){this._renderTaskQueue.run();var e=!1;if(this.style&&this._styleDirty){this._styleDirty=!1;var i=this.transform.zoom,n=t.browser.now();this.style.zoomHistory.update(i,n);var o=new t.EvaluationParameters(i,{now:n,fadeDuration:this._fadeDuration,zoomHistory:this.style.zoomHistory,transition:this.style.getTransition()}),r=o.crossFadingFactor();1===r&&r===this._crossFadingFactor||(e=!0,this._crossFadingFactor=r),this.style.update(o)}return this.style&&this._sourcesDirty&&(this._sourcesDirty=!1,this.style._updateSources(this.transform)),this._placementDirty=this.style&&this.style._updatePlacement(this.painter.transform,this.showCollisionBoxes,this._fadeDuration,this._crossSourceCollisions),this.painter.render(this.style,{showTileBoundaries:this.showTileBoundaries,showOverdrawInspector:this._showOverdrawInspector,rotating:this.isRotating(),zooming:this.isZooming(),fadeDuration:this._fadeDuration}),this.fire(new t.Event("render")),this.loaded()&&!this._loaded&&(this._loaded=!0,this.fire(new t.Event("load"))),this.style&&(this.style.hasTransitions()||e)&&(this._styleDirty=!0),this.style&&!this._placementDirty&&this.style._releaseSymbolFadeTiles(),(this._sourcesDirty||this._repaint||this._styleDirty||this._placementDirty)&&this._rerender(),this},o.prototype.remove=function(){this._hash&&this._hash.remove(),this._frame&&(this._frame.cancel(),this._frame=null),this._renderTaskQueue.clear(),this.setStyle(null),void 0!==t.window&&(t.window.removeEventListener("resize",this._onWindowResize,!1),t.window.removeEventListener("online",this._onWindowOnline,!1));for(var e=0,i=this._controls;e<i.length;e+=1){i[e].onRemove(this)}this._controls=[];var n=this.painter.context.gl.getExtension("WEBGL_lose_context");n&&n.loseContext(),vn(this._canvasContainer),vn(this._controlContainer),vn(this._missingCSSCanary),this._container.classList.remove("mapboxgl-map"),this.fire(new t.Event("remove"))},o.prototype._rerender=function(){var e=this;this.style&&!this._frame&&(this._frame=t.browser.frame(function(){e._frame=null,e._render()}))},o.prototype._onWindowOnline=function(){this._update()},o.prototype._onWindowResize=function(){this._trackResize&&this.resize()._update()},r.showTileBoundaries.get=function(){return!!this._showTileBoundaries},r.showTileBoundaries.set=function(t){this._showTileBoundaries!==t&&(this._showTileBoundaries=t,this._update())},r.showCollisionBoxes.get=function(){return!!this._showCollisionBoxes},r.showCollisionBoxes.set=function(t){this._showCollisionBoxes!==t&&(this._showCollisionBoxes=t,t?this.style._generateCollisionBoxes():this._update())},r.showOverdrawInspector.get=function(){return!!this._showOverdrawInspector},r.showOverdrawInspector.set=function(t){this._showOverdrawInspector!==t&&(this._showOverdrawInspector=t,this._update())},r.repaint.get=function(){return!!this._repaint},r.repaint.set=function(t){this._repaint=t,this._update()},r.vertices.get=function(){return!!this._vertices},r.vertices.set=function(t){this._vertices=t,this._update()},Object.defineProperties(o.prototype,r),o}(hn);function vn(t){t.parentNode&&t.parentNode.removeChild(t)}var yn={showCompass:!0,showZoom:!0},xn=function(e){var n=this;this.options=t.extend({},yn,e),this._container=i.create("div","mapboxgl-ctrl mapboxgl-ctrl-group"),this._container.addEventListener("contextmenu",function(t){return t.preventDefault()}),this.options.showZoom&&(this._zoomInButton=this._createButton("mapboxgl-ctrl-icon mapboxgl-ctrl-zoom-in","Zoom In",function(){return n._map.zoomIn()}),this._zoomOutButton=this._createButton("mapboxgl-ctrl-icon mapboxgl-ctrl-zoom-out","Zoom Out",function(){return n._map.zoomOut()})),this.options.showCompass&&(t.bindAll(["_rotateCompassArrow"],this),this._compass=this._createButton("mapboxgl-ctrl-icon mapboxgl-ctrl-compass","Reset North",function(){return n._map.resetNorth()}),this._compassArrow=i.create("span","mapboxgl-ctrl-compass-arrow",this._compass))};function bn(t,e,i){if(t=new U(t.lng,t.lat),e){var n=new U(t.lng-360,t.lat),o=new U(t.lng+360,t.lat),r=i.locationPoint(t).distSqr(e);i.locationPoint(n).distSqr(e)<r?t=n:i.locationPoint(o).distSqr(e)<r&&(t=o)}for(;Math.abs(t.lng-i.center.lng)>180;){var a=i.locationPoint(t);if(a.x>=0&&a.y>=0&&a.x<=i.width&&a.y<=i.height)break;t.lng>i.center.lng?t.lng-=360:t.lng+=360}return t}xn.prototype._rotateCompassArrow=function(){var t="rotate("+this._map.transform.angle*(180/Math.PI)+"deg)";this._compassArrow.style.transform=t},xn.prototype.onAdd=function(t){return this._map=t,this.options.showCompass&&(this._map.on("rotate",this._rotateCompassArrow),this._rotateCompassArrow(),this._handler=new tn(t,{button:"left",element:this._compass}),i.addEventListener(this._compass,"mousedown",this._handler.onMouseDown),this._handler.enable()),this._container},xn.prototype.onRemove=function(){i.remove(this._container),this.options.showCompass&&(this._map.off("rotate",this._rotateCompassArrow),i.removeEventListener(this._compass,"mousedown",this._handler.onMouseDown),this._handler.disable(),delete this._handler),delete this._map},xn.prototype._createButton=function(t,e,n){var o=i.create("button",t,this._container);return o.type="button",o.setAttribute("aria-label",e),o.addEventListener("click",n),o};var wn={center:"translate(-50%,-50%)",top:"translate(-50%,0)","top-left":"translate(0,0)","top-right":"translate(-100%,0)",bottom:"translate(-50%,-100%)","bottom-left":"translate(0,-100%)","bottom-right":"translate(-100%,-100%)",left:"translate(0,-50%)",right:"translate(-100%,-50%)"};function En(t,e,i){var n=t.classList;for(var o in wn)n.remove("mapboxgl-"+i+"-anchor-"+o);n.add("mapboxgl-"+i+"-anchor-"+e)}var Tn,Sn=function(e){function n(n){if(e.call(this),(arguments[0]instanceof t.window.HTMLElement||2===arguments.length)&&(n=t.extend({element:n},arguments[1])),t.bindAll(["_update","_onMove","_onUp","_addDragHandler","_onMapClick"],this),this._anchor=n&&n.anchor||"center",this._color=n&&n.color||"#3FB1CE",this._draggable=n&&n.draggable||!1,this._state="inactive",n&&n.element)this._element=n.element,this._offset=t.Point.convert(n&&n.offset||[0,0]);else{this._defaultMarker=!0,this._element=i.create("div");var o=i.createNS("http://www.w3.org/2000/svg","svg");o.setAttributeNS(null,"height","41px"),o.setAttributeNS(null,"width","27px"),o.setAttributeNS(null,"viewBox","0 0 27 41");var r=i.createNS("http://www.w3.org/2000/svg","g");r.setAttributeNS(null,"stroke","none"),r.setAttributeNS(null,"stroke-width","1"),r.setAttributeNS(null,"fill","none"),r.setAttributeNS(null,"fill-rule","evenodd");var a=i.createNS("http://www.w3.org/2000/svg","g");a.setAttributeNS(null,"fill-rule","nonzero");var s=i.createNS("http://www.w3.org/2000/svg","g");s.setAttributeNS(null,"transform","translate(3.0, 29.0)"),s.setAttributeNS(null,"fill","#000000");for(var l=0,c=[{rx:"10.5",ry:"5.25002273"},{rx:"10.5",ry:"5.25002273"},{rx:"9.5",ry:"4.77275007"},{rx:"8.5",ry:"4.29549936"},{rx:"7.5",ry:"3.81822308"},{rx:"6.5",ry:"3.34094679"},{rx:"5.5",ry:"2.86367051"},{rx:"4.5",ry:"2.38636864"}];l<c.length;l+=1){var h=c[l],u=i.createNS("http://www.w3.org/2000/svg","ellipse");u.setAttributeNS(null,"opacity","0.04"),u.setAttributeNS(null,"cx","10.5"),u.setAttributeNS(null,"cy","5.80029008"),u.setAttributeNS(null,"rx",h.rx),u.setAttributeNS(null,"ry",h.ry),s.appendChild(u)}var p=i.createNS("http://www.w3.org/2000/svg","g");p.setAttributeNS(null,"fill",this._color);var d=i.createNS("http://www.w3.org/2000/svg","path");d.setAttributeNS(null,"d","M27,13.5 C27,19.074644 20.250001,27.000002 14.75,34.500002 C14.016665,35.500004 12.983335,35.500004 12.25,34.500002 C6.7499993,27.000002 0,19.222562 0,13.5 C0,6.0441559 6.0441559,0 13.5,0 C20.955844,0 27,6.0441559 27,13.5 Z"),p.appendChild(d);var _=i.createNS("http://www.w3.org/2000/svg","g");_.setAttributeNS(null,"opacity","0.25"),_.setAttributeNS(null,"fill","#000000");var f=i.createNS("http://www.w3.org/2000/svg","path");f.setAttributeNS(null,"d","M13.5,0 C6.0441559,0 0,6.0441559 0,13.5 C0,19.222562 6.7499993,27 12.25,34.5 C13,35.522727 14.016664,35.500004 14.75,34.5 C20.250001,27 27,19.074644 27,13.5 C27,6.0441559 20.955844,0 13.5,0 Z M13.5,1 C20.415404,1 26,6.584596 26,13.5 C26,15.898657 24.495584,19.181431 22.220703,22.738281 C19.945823,26.295132 16.705119,30.142167 13.943359,33.908203 C13.743445,34.180814 13.612715,34.322738 13.5,34.441406 C13.387285,34.322738 13.256555,34.180814 13.056641,33.908203 C10.284481,30.127985 7.4148684,26.314159 5.015625,22.773438 C2.6163816,19.232715 1,15.953538 1,13.5 C1,6.584596 6.584596,1 13.5,1 Z"),_.appendChild(f);var m=i.createNS("http://www.w3.org/2000/svg","g");m.setAttributeNS(null,"transform","translate(6.0, 7.0)"),m.setAttributeNS(null,"fill","#FFFFFF");var g=i.createNS("http://www.w3.org/2000/svg","g");g.setAttributeNS(null,"transform","translate(8.0, 8.0)");var v=i.createNS("http://www.w3.org/2000/svg","circle");v.setAttributeNS(null,"fill","#000000"),v.setAttributeNS(null,"opacity","0.25"),v.setAttributeNS(null,"cx","5.5"),v.setAttributeNS(null,"cy","5.5"),v.setAttributeNS(null,"r","5.4999962");var y=i.createNS("http://www.w3.org/2000/svg","circle");y.setAttributeNS(null,"fill","#FFFFFF"),y.setAttributeNS(null,"cx","5.5"),y.setAttributeNS(null,"cy","5.5"),y.setAttributeNS(null,"r","5.4999962"),g.appendChild(v),g.appendChild(y),a.appendChild(s),a.appendChild(p),a.appendChild(_),a.appendChild(m),a.appendChild(g),o.appendChild(a),this._element.appendChild(o),this._offset=t.Point.convert(n&&n.offset||[0,-14])}this._element.classList.add("mapboxgl-marker"),this._popup=null}return e&&(n.__proto__=e),n.prototype=Object.create(e&&e.prototype),n.prototype.constructor=n,n.prototype.addTo=function(t){return this.remove(),this._map=t,t.getCanvasContainer().appendChild(this._element),t.on("move",this._update),t.on("moveend",this._update),this.setDraggable(this._draggable),this._update(),this._map.on("click",this._onMapClick),this},n.prototype.remove=function(){return this._map&&(this._map.off("click",this._onMapClick),this._map.off("move",this._update),this._map.off("moveend",this._update),this._map.off("mousedown",this._addDragHandler),this._map.off("touchstart",this._addDragHandler),delete this._map),i.remove(this._element),this._popup&&this._popup.remove(),this},n.prototype.getLngLat=function(){return this._lngLat},n.prototype.setLngLat=function(t){return this._lngLat=U.convert(t),this._pos=null,this._popup&&this._popup.setLngLat(this._lngLat),this._update(),this},n.prototype.getElement=function(){return this._element},n.prototype.setPopup=function(t){if(this._popup&&(this._popup.remove(),this._popup=null),t){if(!("offset"in t.options)){var e=Math.sqrt(Math.pow(13.5,2)/2);t.options.offset=this._defaultMarker?{top:[0,0],"top-left":[0,0],"top-right":[0,0],bottom:[0,-38.1],"bottom-left":[e,-1*(24.6+e)],"bottom-right":[-e,-1*(24.6+e)],left:[13.5,-24.6],right:[-13.5,-24.6]}:this._offset}this._popup=t,this._lngLat&&this._popup.setLngLat(this._lngLat)}return this},n.prototype._onMapClick=function(t){var e=t.originalEvent.target,i=this._element;this._popup&&(e===i||i.contains(e))&&this.togglePopup()},n.prototype.getPopup=function(){return this._popup},n.prototype.togglePopup=function(){var t=this._popup;return t?(t.isOpen()?t.remove():t.addTo(this._map),this):this},n.prototype._update=function(t){this._map&&(this._map.transform.renderWorldCopies&&(this._lngLat=bn(this._lngLat,this._pos,this._map.transform)),this._pos=this._map.project(this._lngLat)._add(this._offset),t&&"moveend"!==t.type||(this._pos=this._pos.round()),i.setTransform(this._element,wn[this._anchor]+" translate("+this._pos.x+"px, "+this._pos.y+"px)"),En(this._element,this._anchor,"marker"))},n.prototype.getOffset=function(){return this._offset},n.prototype.setOffset=function(e){return this._offset=t.Point.convert(e),this._update(),this},n.prototype._onMove=function(e){this._pos=e.point.sub(this._positionDelta),this._lngLat=this._map.unproject(this._pos),this.setLngLat(this._lngLat),this._element.style.pointerEvents="none","pending"===this._state&&(this._state="active",this.fire(new t.Event("dragstart"))),this.fire(new t.Event("drag"))},n.prototype._onUp=function(){this._element.style.pointerEvents="auto",this._positionDelta=null,this._map.off("mousemove",this._onMove),this._map.off("touchmove",this._onMove),"active"===this._state&&this.fire(new t.Event("dragend")),this._state="inactive"},n.prototype._addDragHandler=function(t){this._element.contains(t.originalEvent.target)&&(t.preventDefault(),this._positionDelta=t.point.sub(this._pos).add(this._offset),this._state="pending",this._map.on("mousemove",this._onMove),this._map.on("touchmove",this._onMove),this._map.once("mouseup",this._onUp),this._map.once("touchend",this._onUp))},n.prototype.setDraggable=function(t){return this._draggable=!!t,this._map&&(t?(this._map.on("mousedown",this._addDragHandler),this._map.on("touchstart",this._addDragHandler)):(this._map.off("mousedown",this._addDragHandler),this._map.off("touchstart",this._addDragHandler))),this},n.prototype.isDraggable=function(){return this._draggable},n}(t.Evented),In={positionOptions:{enableHighAccuracy:!1,maximumAge:0,timeout:6e3},fitBoundsOptions:{maxZoom:15},trackUserLocation:!1,showUserLocation:!0};var Cn=function(e){function n(i){e.call(this),this.options=t.extend({},In,i),t.bindAll(["_onSuccess","_onError","_finish","_setupUI","_updateCamera","_updateMarker"],this)}return e&&(n.__proto__=e),n.prototype=Object.create(e&&e.prototype),n.prototype.constructor=n,n.prototype.onAdd=function(e){var n;return this._map=e,this._container=i.create("div","mapboxgl-ctrl mapboxgl-ctrl-group"),n=this._setupUI,void 0!==Tn?n(Tn):void 0!==t.window.navigator.permissions?t.window.navigator.permissions.query({name:"geolocation"}).then(function(t){Tn="denied"!==t.state,n(Tn)}):(Tn=!!t.window.navigator.geolocation,n(Tn)),this._container},n.prototype.onRemove=function(){void 0!==this._geolocationWatchID&&(t.window.navigator.geolocation.clearWatch(this._geolocationWatchID),this._geolocationWatchID=void 0),this.options.showUserLocation&&this._userLocationDotMarker&&this._userLocationDotMarker.remove(),i.remove(this._container),this._map=void 0},n.prototype._onSuccess=function(e){if(this.options.trackUserLocation)switch(this._lastKnownPosition=e,this._watchState){case"WAITING_ACTIVE":case"ACTIVE_LOCK":case"ACTIVE_ERROR":this._watchState="ACTIVE_LOCK",this._geolocateButton.classList.remove("mapboxgl-ctrl-geolocate-waiting"),this._geolocateButton.classList.remove("mapboxgl-ctrl-geolocate-active-error"),this._geolocateButton.classList.add("mapboxgl-ctrl-geolocate-active");break;case"BACKGROUND":case"BACKGROUND_ERROR":this._watchState="BACKGROUND",this._geolocateButton.classList.remove("mapboxgl-ctrl-geolocate-waiting"),this._geolocateButton.classList.remove("mapboxgl-ctrl-geolocate-background-error"),this._geolocateButton.classList.add("mapboxgl-ctrl-geolocate-background")}this.options.showUserLocation&&"OFF"!==this._watchState&&this._updateMarker(e),this.options.trackUserLocation&&"ACTIVE_LOCK"!==this._watchState||this._updateCamera(e),this.options.showUserLocation&&this._dotElement.classList.remove("mapboxgl-user-location-dot-stale"),this.fire(new t.Event("geolocate",e)),this._finish()},n.prototype._updateCamera=function(t){var e=new U(t.coords.longitude,t.coords.latitude),i=t.coords.accuracy;this._map.fitBounds(e.toBounds(i),this.options.fitBoundsOptions,{geolocateSource:!0})},n.prototype._updateMarker=function(t){t?this._userLocationDotMarker.setLngLat([t.coords.longitude,t.coords.latitude]).addTo(this._map):this._userLocationDotMarker.remove()},n.prototype._onError=function(e){if(this.options.trackUserLocation)if(1===e.code)this._watchState="OFF",this._geolocateButton.classList.remove("mapboxgl-ctrl-geolocate-waiting"),this._geolocateButton.classList.remove("mapboxgl-ctrl-geolocate-active"),this._geolocateButton.classList.remove("mapboxgl-ctrl-geolocate-active-error"),this._geolocateButton.classList.remove("mapboxgl-ctrl-geolocate-background"),this._geolocateButton.classList.remove("mapboxgl-ctrl-geolocate-background-error"),void 0!==this._geolocationWatchID&&this._clearWatch();else switch(this._watchState){case"WAITING_ACTIVE":this._watchState="ACTIVE_ERROR",this._geolocateButton.classList.remove("mapboxgl-ctrl-geolocate-active"),this._geolocateButton.classList.add("mapboxgl-ctrl-geolocate-active-error");break;case"ACTIVE_LOCK":this._watchState="ACTIVE_ERROR",this._geolocateButton.classList.remove("mapboxgl-ctrl-geolocate-active"),this._geolocateButton.classList.add("mapboxgl-ctrl-geolocate-active-error"),this._geolocateButton.classList.add("mapboxgl-ctrl-geolocate-waiting");break;case"BACKGROUND":this._watchState="BACKGROUND_ERROR",this._geolocateButton.classList.remove("mapboxgl-ctrl-geolocate-background"),this._geolocateButton.classList.add("mapboxgl-ctrl-geolocate-background-error"),this._geolocateButton.classList.add("mapboxgl-ctrl-geolocate-waiting")}"OFF"!==this._watchState&&this.options.showUserLocation&&this._dotElement.classList.add("mapboxgl-user-location-dot-stale"),this.fire(new t.Event("error",e)),this._finish()},n.prototype._finish=function(){this._timeoutId&&clearTimeout(this._timeoutId),this._timeoutId=void 0},n.prototype._setupUI=function(e){var n=this;!1!==e?(this._container.addEventListener("contextmenu",function(t){return t.preventDefault()}),this._geolocateButton=i.create("button","mapboxgl-ctrl-icon mapboxgl-ctrl-geolocate",this._container),this._geolocateButton.type="button",this._geolocateButton.setAttribute("aria-label","Geolocate"),this.options.trackUserLocation&&(this._geolocateButton.setAttribute("aria-pressed","false"),this._watchState="OFF"),this.options.showUserLocation&&(this._dotElement=i.create("div","mapboxgl-user-location-dot"),this._userLocationDotMarker=new Sn(this._dotElement),this.options.trackUserLocation&&(this._watchState="OFF")),this._geolocateButton.addEventListener("click",this.trigger.bind(this)),this._setup=!0,this.options.trackUserLocation&&this._map.on("movestart",function(e){e.geolocateSource||"ACTIVE_LOCK"!==n._watchState||(n._watchState="BACKGROUND",n._geolocateButton.classList.add("mapboxgl-ctrl-geolocate-background"),n._geolocateButton.classList.remove("mapboxgl-ctrl-geolocate-active"),n.fire(new t.Event("trackuserlocationend")))})):t.warnOnce("Geolocation support is not available, the GeolocateControl will not be visible.")},n.prototype.trigger=function(){if(!this._setup)return t.warnOnce("Geolocate control triggered before added to a map"),!1;if(this.options.trackUserLocation){switch(this._watchState){case"OFF":this._watchState="WAITING_ACTIVE",this.fire(new t.Event("trackuserlocationstart"));break;case"WAITING_ACTIVE":case"ACTIVE_LOCK":case"ACTIVE_ERROR":case"BACKGROUND_ERROR":this._watchState="OFF",this._geolocateButton.classList.remove("mapboxgl-ctrl-geolocate-waiting"),this._geolocateButton.classList.remove("mapboxgl-ctrl-geolocate-active"),this._geolocateButton.classList.remove("mapboxgl-ctrl-geolocate-active-error"),this._geolocateButton.classList.remove("mapboxgl-ctrl-geolocate-background"),this._geolocateButton.classList.remove("mapboxgl-ctrl-geolocate-background-error"),this.fire(new t.Event("trackuserlocationend"));break;case"BACKGROUND":this._watchState="ACTIVE_LOCK",this._geolocateButton.classList.remove("mapboxgl-ctrl-geolocate-background"),this._lastKnownPosition&&this._updateCamera(this._lastKnownPosition),this.fire(new t.Event("trackuserlocationstart"))}switch(this._watchState){case"WAITING_ACTIVE":this._geolocateButton.classList.add("mapboxgl-ctrl-geolocate-waiting"),this._geolocateButton.classList.add("mapboxgl-ctrl-geolocate-active");break;case"ACTIVE_LOCK":this._geolocateButton.classList.add("mapboxgl-ctrl-geolocate-active");break;case"ACTIVE_ERROR":this._geolocateButton.classList.add("mapboxgl-ctrl-geolocate-waiting"),this._geolocateButton.classList.add("mapboxgl-ctrl-geolocate-active-error");break;case"BACKGROUND":this._geolocateButton.classList.add("mapboxgl-ctrl-geolocate-background");break;case"BACKGROUND_ERROR":this._geolocateButton.classList.add("mapboxgl-ctrl-geolocate-waiting"),this._geolocateButton.classList.add("mapboxgl-ctrl-geolocate-background-error")}"OFF"===this._watchState&&void 0!==this._geolocationWatchID?this._clearWatch():void 0===this._geolocationWatchID&&(this._geolocateButton.classList.add("mapboxgl-ctrl-geolocate-waiting"),this._geolocateButton.setAttribute("aria-pressed","true"),this._geolocationWatchID=t.window.navigator.geolocation.watchPosition(this._onSuccess,this._onError,this.options.positionOptions))}else t.window.navigator.geolocation.getCurrentPosition(this._onSuccess,this._onError,this.options.positionOptions),this._timeoutId=setTimeout(this._finish,1e4);return!0},n.prototype._clearWatch=function(){t.window.navigator.geolocation.clearWatch(this._geolocationWatchID),this._geolocationWatchID=void 0,this._geolocateButton.classList.remove("mapboxgl-ctrl-geolocate-waiting"),this._geolocateButton.setAttribute("aria-pressed","false"),this.options.showUserLocation&&this._updateMarker(null)},n}(t.Evented),zn={maxWidth:100,unit:"metric"},Pn=function(e){this.options=t.extend({},zn,e),t.bindAll(["_onMove","setUnit"],this)};function Rn(t,e,i){var n,o,r,a,s,l,c=i&&i.maxWidth||100,h=t._container.clientHeight/2,u=(n=t.unproject([0,h]),o=t.unproject([c,h]),r=Math.PI/180,a=n.lat*r,s=o.lat*r,l=Math.sin(a)*Math.sin(s)+Math.cos(a)*Math.cos(s)*Math.cos((o.lng-n.lng)*r),6371e3*Math.acos(Math.min(l,1)));if(i&&"imperial"===i.unit){var p=3.2808*u;if(p>5280)An(e,c,p/5280,"mi");else An(e,c,p,"ft")}else if(i&&"nautical"===i.unit){An(e,c,u/1852,"nm")}else An(e,c,u,"m")}function An(t,e,i,n){var o,r,a,s=(o=i,(r=Math.pow(10,(""+Math.floor(o)).length-1))*(a=(a=o/r)>=10?10:a>=5?5:a>=3?3:a>=2?2:1)),l=s/i;"m"===n&&s>=1e3&&(s/=1e3,n="km"),t.style.width=e*l+"px",t.innerHTML=s+n}Pn.prototype.getDefaultPosition=function(){return"bottom-left"},Pn.prototype._onMove=function(){Rn(this._map,this._container,this.options)},Pn.prototype.onAdd=function(t){return this._map=t,this._container=i.create("div","mapboxgl-ctrl mapboxgl-ctrl-scale",t.getContainer()),this._map.on("move",this._onMove),this._onMove(),this._container},Pn.prototype.onRemove=function(){i.remove(this._container),this._map.off("move",this._onMove),this._map=void 0},Pn.prototype.setUnit=function(t){this.options.unit=t,Rn(this._map,this._container,this.options)};var Ln=function(){this._fullscreen=!1,t.bindAll(["_onClickFullscreen","_changeIcon"],this),"onfullscreenchange"in t.window.document?this._fullscreenchange="fullscreenchange":"onmozfullscreenchange"in t.window.document?this._fullscreenchange="mozfullscreenchange":"onwebkitfullscreenchange"in t.window.document?this._fullscreenchange="webkitfullscreenchange":"onmsfullscreenchange"in t.window.document&&(this._fullscreenchange="MSFullscreenChange"),this._className="mapboxgl-ctrl"};Ln.prototype.onAdd=function(e){return this._map=e,this._mapContainer=this._map.getContainer(),this._container=i.create("div",this._className+" mapboxgl-ctrl-group"),this._checkFullscreenSupport()?this._setupUI():(this._container.style.display="none",t.warnOnce("This device does not support fullscreen mode.")),this._container},Ln.prototype.onRemove=function(){i.remove(this._container),this._map=null,t.window.document.removeEventListener(this._fullscreenchange,this._changeIcon)},Ln.prototype._checkFullscreenSupport=function(){return!!(t.window.document.fullscreenEnabled||t.window.document.mozFullScreenEnabled||t.window.document.msFullscreenEnabled||t.window.document.webkitFullscreenEnabled)},Ln.prototype._setupUI=function(){var e=this._fullscreenButton=i.create("button",this._className+"-icon "+this._className+"-fullscreen",this._container);e.setAttribute("aria-label","Toggle fullscreen"),e.type="button",this._fullscreenButton.addEventListener("click",this._onClickFullscreen),t.window.document.addEventListener(this._fullscreenchange,this._changeIcon)},Ln.prototype._isFullscreen=function(){return this._fullscreen},Ln.prototype._changeIcon=function(){(t.window.document.fullscreenElement||t.window.document.mozFullScreenElement||t.window.document.webkitFullscreenElement||t.window.document.msFullscreenElement)===this._mapContainer!==this._fullscreen&&(this._fullscreen=!this._fullscreen,this._fullscreenButton.classList.toggle(this._className+"-shrink"),this._fullscreenButton.classList.toggle(this._className+"-fullscreen"))},Ln.prototype._onClickFullscreen=function(){this._isFullscreen()?t.window.document.exitFullscreen?t.window.document.exitFullscreen():t.window.document.mozCancelFullScreen?t.window.document.mozCancelFullScreen():t.window.document.msExitFullscreen?t.window.document.msExitFullscreen():t.window.document.webkitCancelFullScreen&&t.window.document.webkitCancelFullScreen():this._mapContainer.requestFullscreen?this._mapContainer.requestFullscreen():this._mapContainer.mozRequestFullScreen?this._mapContainer.mozRequestFullScreen():this._mapContainer.msRequestFullscreen?this._mapContainer.msRequestFullscreen():this._mapContainer.webkitRequestFullscreen&&this._mapContainer.webkitRequestFullscreen()};var Dn={closeButton:!0,closeOnClick:!0,className:""},Mn=function(e){function n(i){e.call(this),this.options=t.extend(Object.create(Dn),i),t.bindAll(["_update","_onClickClose"],this)}return e&&(n.__proto__=e),n.prototype=Object.create(e&&e.prototype),n.prototype.constructor=n,n.prototype.addTo=function(e){return this._map=e,this._map.on("move",this._update),this.options.closeOnClick&&this._map.on("click",this._onClickClose),this._update(),this.fire(new t.Event("open")),this},n.prototype.isOpen=function(){return!!this._map},n.prototype.remove=function(){return this._content&&i.remove(this._content),this._container&&(i.remove(this._container),delete this._container),this._map&&(this._map.off("move",this._update),this._map.off("click",this._onClickClose),delete this._map),this.fire(new t.Event("close")),this},n.prototype.getLngLat=function(){return this._lngLat},n.prototype.setLngLat=function(t){return this._lngLat=U.convert(t),this._pos=null,this._update(),this},n.prototype.setText=function(e){return this.setDOMContent(t.window.document.createTextNode(e))},n.prototype.setHTML=function(e){var i,n=t.window.document.createDocumentFragment(),o=t.window.document.createElement("body");for(o.innerHTML=e;i=o.firstChild;)n.appendChild(i);return this.setDOMContent(n)},n.prototype.setDOMContent=function(t){return this._createContent(),this._content.appendChild(t),this._update(),this},n.prototype._createContent=function(){this._content&&i.remove(this._content),this._content=i.create("div","mapboxgl-popup-content",this._container),this.options.closeButton&&(this._closeButton=i.create("button","mapboxgl-popup-close-button",this._content),this._closeButton.type="button",this._closeButton.setAttribute("aria-label","Close popup"),this._closeButton.innerHTML="&#215;",this._closeButton.addEventListener("click",this._onClickClose))},n.prototype._update=function(){var e=this;if(this._map&&this._lngLat&&this._content){this._container||(this._container=i.create("div","mapboxgl-popup",this._map.getContainer()),this._tip=i.create("div","mapboxgl-popup-tip",this._container),this._container.appendChild(this._content),this.options.className&&this.options.className.split(" ").forEach(function(t){return e._container.classList.add(t)})),this._map.transform.renderWorldCopies&&(this._lngLat=bn(this._lngLat,this._pos,this._map.transform));var n=this._pos=this._map.project(this._lngLat),o=this.options.anchor,r=function e(i){if(i){if("number"==typeof i){var n=Math.round(Math.sqrt(.5*Math.pow(i,2)));return{center:new t.Point(0,0),top:new t.Point(0,i),"top-left":new t.Point(n,n),"top-right":new t.Point(-n,n),bottom:new t.Point(0,-i),"bottom-left":new t.Point(n,-n),"bottom-right":new t.Point(-n,-n),left:new t.Point(i,0),right:new t.Point(-i,0)}}if(i instanceof t.Point||Array.isArray(i)){var o=t.Point.convert(i);return{center:o,top:o,"top-left":o,"top-right":o,bottom:o,"bottom-left":o,"bottom-right":o,left:o,right:o}}return{center:t.Point.convert(i.center||[0,0]),top:t.Point.convert(i.top||[0,0]),"top-left":t.Point.convert(i["top-left"]||[0,0]),"top-right":t.Point.convert(i["top-right"]||[0,0]),bottom:t.Point.convert(i.bottom||[0,0]),"bottom-left":t.Point.convert(i["bottom-left"]||[0,0]),"bottom-right":t.Point.convert(i["bottom-right"]||[0,0]),left:t.Point.convert(i.left||[0,0]),right:t.Point.convert(i.right||[0,0])}}return e(new t.Point(0,0))}(this.options.offset);if(!o){var a,s=this._container.offsetWidth,l=this._container.offsetHeight;a=n.y+r.bottom.y<l?["top"]:n.y>this._map.transform.height-l?["bottom"]:[],n.x<s/2?a.push("left"):n.x>this._map.transform.width-s/2&&a.push("right"),o=0===a.length?"bottom":a.join("-")}var c=n.add(r[o]).round();i.setTransform(this._container,wn[o]+" translate("+c.x+"px,"+c.y+"px)"),En(this._container,o,"popup")}},n.prototype._onClickClose=function(){this.remove()},n}(t.Evented);var kn={version:"0.50.0",supported:e,setRTLTextPlugin:t.setRTLTextPlugin,Map:gn,NavigationControl:xn,GeolocateControl:Cn,AttributionControl:un,ScaleControl:Pn,FullscreenControl:Ln,Popup:Mn,Marker:Sn,Style:Ve,LngLat:U,LngLatBounds:N,Point:t.Point,Evented:t.Evented,config:u,get accessToken(){return u.ACCESS_TOKEN},set accessToken(t){u.ACCESS_TOKEN=t},get workerCount(){return Vt.workerCount},set workerCount(t){Vt.workerCount=t},workerUrl:""};return kn});
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiaW5kZXguanMiLCJzb3VyY2VzIjpbIi4uLy4uLy4uLy4uLy4uLy4uL25vZGVfbW9kdWxlcy9AbWFwYm94L21hcGJveC1nbC1zdXBwb3J0ZWQvaW5kZXguanMiLCIuLi8uLi8uLi9zcmMvdXRpbC9kb20uanMiLCIuLi8uLi8uLi9zcmMvdXRpbC9jb25maWcuanMiLCIuLi8uLi8uLi9zcmMvdXRpbC9tYXBib3guanMiLCIuLi8uLi8uLi9zcmMvcmVuZGVyL2ltYWdlX21hbmFnZXIuanMiLCIuLi8uLi8uLi8uLi8uLi8uLi9ub2RlX21vZHVsZXMvQG1hcGJveC90aW55LXNkZi9pbmRleC5qcyIsIi4uLy4uLy4uL3NyYy9yZW5kZXIvZ2x5cGhfbWFuYWdlci5qcyIsIi4uLy4uLy4uL3NyYy9zdHlsZS9saWdodC5qcyIsIi4uLy4uLy4uL3NyYy9yZW5kZXIvbGluZV9hdGxhcy5qcyIsIi4uLy4uLy4uL3NyYy91dGlsL2Rpc3BhdGNoZXIuanMiLCIuLi8uLi8uLi9zcmMvZ2VvL2xuZ19sYXQuanMiLCIuLi8uLi8uLi9zcmMvZ2VvL2xuZ19sYXRfYm91bmRzLmpzIiwiLi4vLi4vLi4vc3JjL3NvdXJjZS90aWxlX2JvdW5kcy5qcyIsIi4uLy4uLy4uL3NyYy9zb3VyY2UvdmVjdG9yX3RpbGVfc291cmNlLmpzIiwiLi4vLi4vLi4vc3JjL3NvdXJjZS9yYXN0ZXJfdGlsZV9zb3VyY2UuanMiLCIuLi8uLi8uLi9zcmMvc291cmNlL3Jhc3Rlcl9kZW1fdGlsZV9zb3VyY2UuanMiLCIuLi8uLi8uLi9zcmMvc291cmNlL2dlb2pzb25fc291cmNlLmpzIiwiLi4vLi4vLi4vc3JjL3NvdXJjZS9pbWFnZV9zb3VyY2UuanMiLCIuLi8uLi8uLi9zcmMvc291cmNlL3ZpZGVvX3NvdXJjZS5qcyIsIi4uLy4uLy4uL3NyYy9zb3VyY2UvY2FudmFzX3NvdXJjZS5qcyIsIi4uLy4uLy4uL3NyYy9zb3VyY2Uvc291cmNlLmpzIiwiLi4vLi4vLi4vc3JjL3NvdXJjZS9xdWVyeV9mZWF0dXJlcy5qcyIsIi4uLy4uLy4uL3NyYy9zb3VyY2UvdGlsZV9jYWNoZS5qcyIsIi4uLy4uLy4uL3NyYy9nbC9pbmRleF9idWZmZXIuanMiLCIuLi8uLi8uLi9zcmMvZ2wvdmVydGV4X2J1ZmZlci5qcyIsIi4uLy4uLy4uL3NyYy9nbC92YWx1ZS5qcyIsIi4uLy4uLy4uL3NyYy9nbC9mcmFtZWJ1ZmZlci5qcyIsIi4uLy4uLy4uL3NyYy9nbC9kZXB0aF9tb2RlLmpzIiwiLi4vLi4vLi4vc3JjL2dsL3N0ZW5jaWxfbW9kZS5qcyIsIi4uLy4uLy4uL3NyYy9nbC9jb2xvcl9tb2RlLmpzIiwiLi4vLi4vLi4vc3JjL2dsL2NvbnRleHQuanMiLCIuLi8uLi8uLi9zcmMvc291cmNlL3NvdXJjZV9jYWNoZS5qcyIsIi4uLy4uLy4uL3NyYy91dGlsL3dvcmtlcl9wb29sLmpzIiwiLi4vLi4vLi4vc3JjL3V0aWwvZ2xvYmFsX3dvcmtlcl9wb29sLmpzIiwiLi4vLi4vLi4vc3JjL3N0eWxlLXNwZWMvZGVyZWYuanMiLCIuLi8uLi8uLi9zcmMvc3R5bGUtc3BlYy9kaWZmLmpzIiwiLi4vLi4vLi4vc3JjL3N5bWJvbC9ncmlkX2luZGV4LmpzIiwiLi4vLi4vLi4vc3JjL3N5bWJvbC9wcm9qZWN0aW9uLmpzIiwiLi4vLi4vLi4vc3JjL3N5bWJvbC9jb2xsaXNpb25faW5kZXguanMiLCIuLi8uLi8uLi9zcmMvc3ltYm9sL3BsYWNlbWVudC5qcyIsIi4uLy4uLy4uL3NyYy9zdHlsZS9wYXVzZWFibGVfcGxhY2VtZW50LmpzIiwiLi4vLi4vLi4vc3JjL3N5bWJvbC9jcm9zc190aWxlX3N5bWJvbF9pbmRleC5qcyIsIi4uLy4uLy4uL3NyYy9zdHlsZS9zdHlsZS5qcyIsIi4uLy4uLy4uL3NyYy9kYXRhL3Bvc19hdHRyaWJ1dGVzLmpzIiwiLi4vLi4vLi4vc3JjL3JlbmRlci92ZXJ0ZXhfYXJyYXlfb2JqZWN0LmpzIiwiLi4vLi4vLi4vc3JjL3JlbmRlci9wcm9ncmFtLmpzIiwiLi4vLi4vLi4vc3JjL3JlbmRlci9wcm9ncmFtL3BhdHRlcm4uanMiLCIuLi8uLi8uLi9zcmMvcmVuZGVyL3Byb2dyYW0vZmlsbF9leHRydXNpb25fcHJvZ3JhbS5qcyIsIi4uLy4uLy4uL3NyYy9yZW5kZXIvcHJvZ3JhbS9maWxsX3Byb2dyYW0uanMiLCIuLi8uLi8uLi9zcmMvcmVuZGVyL3Byb2dyYW0vY2lyY2xlX3Byb2dyYW0uanMiLCIuLi8uLi8uLi9zcmMvcmVuZGVyL3Byb2dyYW0vY29sbGlzaW9uX3Byb2dyYW0uanMiLCIuLi8uLi8uLi9zcmMvcmVuZGVyL3Byb2dyYW0vZGVidWdfcHJvZ3JhbS5qcyIsIi4uLy4uLy4uL3NyYy9yZW5kZXIvcHJvZ3JhbS9jbGlwcGluZ19tYXNrX3Byb2dyYW0uanMiLCIuLi8uLi8uLi9zcmMvcmVuZGVyL3Byb2dyYW0vaGVhdG1hcF9wcm9ncmFtLmpzIiwiLi4vLi4vLi4vc3JjL3JlbmRlci9wcm9ncmFtL2hpbGxzaGFkZV9wcm9ncmFtLmpzIiwiLi4vLi4vLi4vc3JjL3JlbmRlci9wcm9ncmFtL2xpbmVfcHJvZ3JhbS5qcyIsIi4uLy4uLy4uL3NyYy9yZW5kZXIvcHJvZ3JhbS9yYXN0ZXJfcHJvZ3JhbS5qcyIsIi4uLy4uLy4uL3NyYy9yZW5kZXIvcHJvZ3JhbS9zeW1ib2xfcHJvZ3JhbS5qcyIsIi4uLy4uLy4uL3NyYy9yZW5kZXIvcHJvZ3JhbS9iYWNrZ3JvdW5kX3Byb2dyYW0uanMiLCIuLi8uLi8uLi9zcmMvcmVuZGVyL3Byb2dyYW0vcHJvZ3JhbV91bmlmb3Jtcy5qcyIsIi4uLy4uLy4uL3NyYy9yZW5kZXIvdGlsZV9tYXNrLmpzIiwiLi4vLi4vLi4vc3JjL3JlbmRlci9kcmF3X2NvbGxpc2lvbl9kZWJ1Zy5qcyIsIi4uLy4uLy4uL3NyYy9yZW5kZXIvZHJhd19zeW1ib2wuanMiLCIuLi8uLi8uLi9zcmMvcmVuZGVyL2RyYXdfZmlsbC5qcyIsIi4uLy4uLy4uL3NyYy9yZW5kZXIvZHJhd19oaWxsc2hhZGUuanMiLCIuLi8uLi8uLi9zcmMvcmVuZGVyL2RyYXdfcmFzdGVyLmpzIiwiLi4vLi4vLi4vc3JjL3JlbmRlci9kcmF3X2RlYnVnLmpzIiwiLi4vLi4vLi4vc3JjL3JlbmRlci9wYWludGVyLmpzIiwiLi4vLi4vLi4vc3JjL3JlbmRlci9kcmF3X2NpcmNsZS5qcyIsIi4uLy4uLy4uL3NyYy9yZW5kZXIvZHJhd19oZWF0bWFwLmpzIiwiLi4vLi4vLi4vc3JjL3JlbmRlci9kcmF3X2xpbmUuanMiLCIuLi8uLi8uLi9zcmMvcmVuZGVyL2RyYXdfZmlsbF9leHRydXNpb24uanMiLCIuLi8uLi8uLi9zcmMvcmVuZGVyL2RyYXdfYmFja2dyb3VuZC5qcyIsIi4uLy4uLy4uL3NyYy91dGlsL3RpbGVfY292ZXIuanMiLCIuLi8uLi8uLi9zcmMvZ2VvL3RyYW5zZm9ybS5qcyIsIi4uLy4uLy4uL3NyYy91aS9oYXNoLmpzIiwiLi4vLi4vLi4vc3JjL3V0aWwvdGhyb3R0bGUuanMiLCIuLi8uLi8uLi9zcmMvdWkvZXZlbnRzLmpzIiwiLi4vLi4vLi4vc3JjL3VpL2hhbmRsZXIvc2Nyb2xsX3pvb20uanMiLCIuLi8uLi8uLi9zcmMvdWkvaGFuZGxlci9ib3hfem9vbS5qcyIsIi4uLy4uLy4uL3NyYy91aS9oYW5kbGVyL2RyYWdfcm90YXRlLmpzIiwiLi4vLi4vLi4vc3JjL3VpL2hhbmRsZXIvZHJhZ19wYW4uanMiLCIuLi8uLi8uLi9zcmMvdWkvaGFuZGxlci9rZXlib2FyZC5qcyIsIi4uLy4uLy4uL3NyYy91aS9oYW5kbGVyL2RibGNsaWNrX3pvb20uanMiLCIuLi8uLi8uLi9zcmMvdWkvaGFuZGxlci90b3VjaF96b29tX3JvdGF0ZS5qcyIsIi4uLy4uLy4uL3NyYy91aS9iaW5kX2hhbmRsZXJzLmpzIiwiLi4vLi4vLi4vc3JjL3VpL2NhbWVyYS5qcyIsIi4uLy4uLy4uL3NyYy91aS9jb250cm9sL2F0dHJpYnV0aW9uX2NvbnRyb2wuanMiLCIuLi8uLi8uLi9zcmMvdWkvY29udHJvbC9sb2dvX2NvbnRyb2wuanMiLCIuLi8uLi8uLi9zcmMvdXRpbC90YXNrX3F1ZXVlLmpzIiwiLi4vLi4vLi4vc3JjL3VpL21hcC5qcyIsIi4uLy4uLy4uL3NyYy91aS9jb250cm9sL25hdmlnYXRpb25fY29udHJvbC5qcyIsIi4uLy4uLy4uL3NyYy91aS9hbmNob3IuanMiLCIuLi8uLi8uLi9zcmMvdWkvbWFya2VyLmpzIiwiLi4vLi4vLi4vc3JjL3VpL2NvbnRyb2wvZ2VvbG9jYXRlX2NvbnRyb2wuanMiLCIuLi8uLi8uLi9zcmMvdWkvY29udHJvbC9zY2FsZV9jb250cm9sLmpzIiwiLi4vLi4vLi4vc3JjL3VpL2NvbnRyb2wvZnVsbHNjcmVlbl9jb250cm9sLmpzIiwiLi4vLi4vLi4vc3JjL3VpL3BvcHVwLmpzIiwiLi4vLi4vLi4vc3JjL2luZGV4LmpzIl0sInNvdXJjZXNDb250ZW50IjpbIid1c2Ugc3RyaWN0JztcblxuaWYgKHR5cGVvZiBtb2R1bGUgIT09ICd1bmRlZmluZWQnICYmIG1vZHVsZS5leHBvcnRzKSB7XG4gICAgbW9kdWxlLmV4cG9ydHMgPSBpc1N1cHBvcnRlZDtcbn0gZWxzZSBpZiAod2luZG93KSB7XG4gICAgd2luZG93Lm1hcGJveGdsID0gd2luZG93Lm1hcGJveGdsIHx8IHt9O1xuICAgIHdpbmRvdy5tYXBib3hnbC5zdXBwb3J0ZWQgPSBpc1N1cHBvcnRlZDtcbn1cblxuLyoqXG4gKiBUZXN0IHdoZXRoZXIgdGhlIGN1cnJlbnQgYnJvd3NlciBzdXBwb3J0cyBNYXBib3ggR0wgSlNcbiAqIEBwYXJhbSB7T2JqZWN0fSBvcHRpb25zXG4gKiBAcGFyYW0ge2Jvb2xlYW59IFtvcHRpb25zLmZhaWxJZk1ham9yUGVyZm9ybWFuY2VDYXZlYXQ9ZmFsc2VdIFJldHVybiBgZmFsc2VgXG4gKiAgIGlmIHRoZSBwZXJmb3JtYW5jZSBvZiBNYXBib3ggR0wgSlMgd291bGQgYmUgZHJhbWF0aWNhbGx5IHdvcnNlIHRoYW5cbiAqICAgZXhwZWN0ZWQgKGkuZS4gYSBzb2Z0d2FyZSByZW5kZXJlciBpcyB3b3VsZCBiZSB1c2VkKVxuICogQHJldHVybiB7Ym9vbGVhbn1cbiAqL1xuZnVuY3Rpb24gaXNTdXBwb3J0ZWQob3B0aW9ucykge1xuICAgIHJldHVybiAhIShcbiAgICAgICAgaXNCcm93c2VyKCkgJiZcbiAgICAgICAgaXNBcnJheVN1cHBvcnRlZCgpICYmXG4gICAgICAgIGlzRnVuY3Rpb25TdXBwb3J0ZWQoKSAmJlxuICAgICAgICBpc09iamVjdFN1cHBvcnRlZCgpICYmXG4gICAgICAgIGlzSlNPTlN1cHBvcnRlZCgpICYmXG4gICAgICAgIGlzV29ya2VyU3VwcG9ydGVkKCkgJiZcbiAgICAgICAgaXNVaW50OENsYW1wZWRBcnJheVN1cHBvcnRlZCgpICYmXG4gICAgICAgIGlzQXJyYXlCdWZmZXJTdXBwb3J0ZWQoKSAmJlxuICAgICAgICBpc1dlYkdMU3VwcG9ydGVkQ2FjaGVkKG9wdGlvbnMgJiYgb3B0aW9ucy5mYWlsSWZNYWpvclBlcmZvcm1hbmNlQ2F2ZWF0KVxuICAgICk7XG59XG5cbmZ1bmN0aW9uIGlzQnJvd3NlcigpIHtcbiAgICByZXR1cm4gdHlwZW9mIHdpbmRvdyAhPT0gJ3VuZGVmaW5lZCcgJiYgdHlwZW9mIGRvY3VtZW50ICE9PSAndW5kZWZpbmVkJztcbn1cblxuZnVuY3Rpb24gaXNBcnJheVN1cHBvcnRlZCgpIHtcbiAgICByZXR1cm4gKFxuICAgICAgICBBcnJheS5wcm90b3R5cGUgJiZcbiAgICAgICAgQXJyYXkucHJvdG90eXBlLmV2ZXJ5ICYmXG4gICAgICAgIEFycmF5LnByb3RvdHlwZS5maWx0ZXIgJiZcbiAgICAgICAgQXJyYXkucHJvdG90eXBlLmZvckVhY2ggJiZcbiAgICAgICAgQXJyYXkucHJvdG90eXBlLmluZGV4T2YgJiZcbiAgICAgICAgQXJyYXkucHJvdG90eXBlLmxhc3RJbmRleE9mICYmXG4gICAgICAgIEFycmF5LnByb3RvdHlwZS5tYXAgJiZcbiAgICAgICAgQXJyYXkucHJvdG90eXBlLnNvbWUgJiZcbiAgICAgICAgQXJyYXkucHJvdG90eXBlLnJlZHVjZSAmJlxuICAgICAgICBBcnJheS5wcm90b3R5cGUucmVkdWNlUmlnaHQgJiZcbiAgICAgICAgQXJyYXkuaXNBcnJheVxuICAgICk7XG59XG5cbmZ1bmN0aW9uIGlzRnVuY3Rpb25TdXBwb3J0ZWQoKSB7XG4gICAgcmV0dXJuIEZ1bmN0aW9uLnByb3RvdHlwZSAmJiBGdW5jdGlvbi5wcm90b3R5cGUuYmluZDtcbn1cblxuZnVuY3Rpb24gaXNPYmplY3RTdXBwb3J0ZWQoKSB7XG4gICAgcmV0dXJuIChcbiAgICAgICAgT2JqZWN0LmtleXMgJiZcbiAgICAgICAgT2JqZWN0LmNyZWF0ZSAmJlxuICAgICAgICBPYmplY3QuZ2V0UHJvdG90eXBlT2YgJiZcbiAgICAgICAgT2JqZWN0LmdldE93blByb3BlcnR5TmFtZXMgJiZcbiAgICAgICAgT2JqZWN0LmlzU2VhbGVkICYmXG4gICAgICAgIE9iamVjdC5pc0Zyb3plbiAmJlxuICAgICAgICBPYmplY3QuaXNFeHRlbnNpYmxlICYmXG4gICAgICAgIE9iamVjdC5nZXRPd25Qcm9wZXJ0eURlc2NyaXB0b3IgJiZcbiAgICAgICAgT2JqZWN0LmRlZmluZVByb3BlcnR5ICYmXG4gICAgICAgIE9iamVjdC5kZWZpbmVQcm9wZXJ0aWVzICYmXG4gICAgICAgIE9iamVjdC5zZWFsICYmXG4gICAgICAgIE9iamVjdC5mcmVlemUgJiZcbiAgICAgICAgT2JqZWN0LnByZXZlbnRFeHRlbnNpb25zXG4gICAgKTtcbn1cblxuZnVuY3Rpb24gaXNKU09OU3VwcG9ydGVkKCkge1xuICAgIHJldHVybiAnSlNPTicgaW4gd2luZG93ICYmICdwYXJzZScgaW4gSlNPTiAmJiAnc3RyaW5naWZ5JyBpbiBKU09OO1xufVxuXG5mdW5jdGlvbiBpc1dvcmtlclN1cHBvcnRlZCgpIHtcbiAgICBpZiAoISgnV29ya2VyJyBpbiB3aW5kb3cgJiYgJ0Jsb2InIGluIHdpbmRvdyAmJiAnVVJMJyBpbiB3aW5kb3cpKSB7XG4gICAgICAgIHJldHVybiBmYWxzZTtcbiAgICB9XG5cbiAgICB2YXIgYmxvYiA9IG5ldyBCbG9iKFsnJ10sIHsgdHlwZTogJ3RleHQvamF2YXNjcmlwdCcgfSk7XG4gICAgdmFyIHdvcmtlclVSTCA9IFVSTC5jcmVhdGVPYmplY3RVUkwoYmxvYik7XG4gICAgdmFyIHN1cHBvcnRlZDtcbiAgICB2YXIgd29ya2VyO1xuXG4gICAgdHJ5IHtcbiAgICAgICAgd29ya2VyID0gbmV3IFdvcmtlcih3b3JrZXJVUkwpO1xuICAgICAgICBzdXBwb3J0ZWQgPSB0cnVlO1xuICAgIH0gY2F0Y2ggKGUpIHtcbiAgICAgICAgc3VwcG9ydGVkID0gZmFsc2U7XG4gICAgfVxuXG4gICAgaWYgKHdvcmtlcikge1xuICAgICAgICB3b3JrZXIudGVybWluYXRlKCk7XG4gICAgfVxuICAgIFVSTC5yZXZva2VPYmplY3RVUkwod29ya2VyVVJMKTtcblxuICAgIHJldHVybiBzdXBwb3J0ZWQ7XG59XG5cbi8vIElFMTEgb25seSBzdXBwb3J0cyBgVWludDhDbGFtcGVkQXJyYXlgIGFzIG9mIHZlcnNpb25cbi8vIFtLQjI5Mjk0MzddKGh0dHBzOi8vc3VwcG9ydC5taWNyb3NvZnQuY29tL2VuLXVzL2tiLzI5Mjk0MzcpXG5mdW5jdGlvbiBpc1VpbnQ4Q2xhbXBlZEFycmF5U3VwcG9ydGVkKCkge1xuICAgIHJldHVybiAnVWludDhDbGFtcGVkQXJyYXknIGluIHdpbmRvdztcbn1cblxuLy8gaHR0cHM6Ly9naXRodWIuY29tL21hcGJveC9tYXBib3gtZ2wtc3VwcG9ydGVkL2lzc3Vlcy8xOVxuZnVuY3Rpb24gaXNBcnJheUJ1ZmZlclN1cHBvcnRlZCgpIHtcbiAgICByZXR1cm4gQXJyYXlCdWZmZXIuaXNWaWV3O1xufVxuXG52YXIgaXNXZWJHTFN1cHBvcnRlZENhY2hlID0ge307XG5mdW5jdGlvbiBpc1dlYkdMU3VwcG9ydGVkQ2FjaGVkKGZhaWxJZk1ham9yUGVyZm9ybWFuY2VDYXZlYXQpIHtcblxuICAgIGlmIChpc1dlYkdMU3VwcG9ydGVkQ2FjaGVbZmFpbElmTWFqb3JQZXJmb3JtYW5jZUNhdmVhdF0gPT09IHVuZGVmaW5lZCkge1xuICAgICAgICBpc1dlYkdMU3VwcG9ydGVkQ2FjaGVbZmFpbElmTWFqb3JQZXJmb3JtYW5jZUNhdmVhdF0gPSBpc1dlYkdMU3VwcG9ydGVkKGZhaWxJZk1ham9yUGVyZm9ybWFuY2VDYXZlYXQpO1xuICAgIH1cblxuICAgIHJldHVybiBpc1dlYkdMU3VwcG9ydGVkQ2FjaGVbZmFpbElmTWFqb3JQZXJmb3JtYW5jZUNhdmVhdF07XG59XG5cbmlzU3VwcG9ydGVkLndlYkdMQ29udGV4dEF0dHJpYnV0ZXMgPSB7XG4gICAgYW50aWFsaWFzOiBmYWxzZSxcbiAgICBhbHBoYTogdHJ1ZSxcbiAgICBzdGVuY2lsOiB0cnVlLFxuICAgIGRlcHRoOiB0cnVlXG59O1xuXG5mdW5jdGlvbiBpc1dlYkdMU3VwcG9ydGVkKGZhaWxJZk1ham9yUGVyZm9ybWFuY2VDYXZlYXQpIHtcblxuICAgIHZhciBjYW52YXMgPSBkb2N1bWVudC5jcmVhdGVFbGVtZW50KCdjYW52YXMnKTtcblxuICAgIHZhciBhdHRyaWJ1dGVzID0gT2JqZWN0LmNyZWF0ZShpc1N1cHBvcnRlZC53ZWJHTENvbnRleHRBdHRyaWJ1dGVzKTtcbiAgICBhdHRyaWJ1dGVzLmZhaWxJZk1ham9yUGVyZm9ybWFuY2VDYXZlYXQgPSBmYWlsSWZNYWpvclBlcmZvcm1hbmNlQ2F2ZWF0O1xuXG4gICAgaWYgKGNhbnZhcy5wcm9iYWJseVN1cHBvcnRzQ29udGV4dCkge1xuICAgICAgICByZXR1cm4gKFxuICAgICAgICAgICAgY2FudmFzLnByb2JhYmx5U3VwcG9ydHNDb250ZXh0KCd3ZWJnbCcsIGF0dHJpYnV0ZXMpIHx8XG4gICAgICAgICAgICBjYW52YXMucHJvYmFibHlTdXBwb3J0c0NvbnRleHQoJ2V4cGVyaW1lbnRhbC13ZWJnbCcsIGF0dHJpYnV0ZXMpXG4gICAgICAgICk7XG5cbiAgICB9IGVsc2UgaWYgKGNhbnZhcy5zdXBwb3J0c0NvbnRleHQpIHtcbiAgICAgICAgcmV0dXJuIChcbiAgICAgICAgICAgIGNhbnZhcy5zdXBwb3J0c0NvbnRleHQoJ3dlYmdsJywgYXR0cmlidXRlcykgfHxcbiAgICAgICAgICAgIGNhbnZhcy5zdXBwb3J0c0NvbnRleHQoJ2V4cGVyaW1lbnRhbC13ZWJnbCcsIGF0dHJpYnV0ZXMpXG4gICAgICAgICk7XG5cbiAgICB9IGVsc2Uge1xuICAgICAgICByZXR1cm4gKFxuICAgICAgICAgICAgY2FudmFzLmdldENvbnRleHQoJ3dlYmdsJywgYXR0cmlidXRlcykgfHxcbiAgICAgICAgICAgIGNhbnZhcy5nZXRDb250ZXh0KCdleHBlcmltZW50YWwtd2ViZ2wnLCBhdHRyaWJ1dGVzKVxuICAgICAgICApO1xuICAgIH1cbn1cbiIsIi8vIEBmbG93XG5cbmltcG9ydCBQb2ludCBmcm9tICdAbWFwYm94L3BvaW50LWdlb21ldHJ5JztcblxuaW1wb3J0IHdpbmRvdyBmcm9tICcuL3dpbmRvdyc7XG5pbXBvcnQgYXNzZXJ0IGZyb20gJ2Fzc2VydCc7XG5cbmNvbnN0IERPTSA9IHt9O1xuZXhwb3J0IGRlZmF1bHQgRE9NO1xuXG5ET00uY3JlYXRlID0gZnVuY3Rpb24gKHRhZ05hbWU6ICosIGNsYXNzTmFtZT86IHN0cmluZywgY29udGFpbmVyPzogSFRNTEVsZW1lbnQpIHtcbiAgICBjb25zdCBlbCA9IHdpbmRvdy5kb2N1bWVudC5jcmVhdGVFbGVtZW50KHRhZ05hbWUpO1xuICAgIGlmIChjbGFzc05hbWUpIGVsLmNsYXNzTmFtZSA9IGNsYXNzTmFtZTtcbiAgICBpZiAoY29udGFpbmVyKSBjb250YWluZXIuYXBwZW5kQ2hpbGQoZWwpO1xuICAgIHJldHVybiBlbDtcbn07XG5cbkRPTS5jcmVhdGVOUyA9IGZ1bmN0aW9uIChuYW1lc3BhY2VVUkk6IHN0cmluZywgdGFnTmFtZTogc3RyaW5nKSB7XG4gICAgY29uc3QgZWwgPSB3aW5kb3cuZG9jdW1lbnQuY3JlYXRlRWxlbWVudE5TKG5hbWVzcGFjZVVSSSwgdGFnTmFtZSk7XG4gICAgcmV0dXJuIGVsO1xufTtcblxuY29uc3QgZG9jU3R5bGUgPSB3aW5kb3cuZG9jdW1lbnQgP1xuICAgICh3aW5kb3cuZG9jdW1lbnQuZG9jdW1lbnRFbGVtZW50OiBhbnkpLnN0eWxlIDpcbiAgICBudWxsO1xuXG5mdW5jdGlvbiB0ZXN0UHJvcChwcm9wcykge1xuICAgIGlmICghZG9jU3R5bGUpIHJldHVybiBudWxsO1xuICAgIGZvciAobGV0IGkgPSAwOyBpIDwgcHJvcHMubGVuZ3RoOyBpKyspIHtcbiAgICAgICAgaWYgKHByb3BzW2ldIGluIGRvY1N0eWxlKSB7XG4gICAgICAgICAgICByZXR1cm4gcHJvcHNbaV07XG4gICAgICAgIH1cbiAgICB9XG4gICAgcmV0dXJuIHByb3BzWzBdO1xufVxuXG5jb25zdCBzZWxlY3RQcm9wID0gdGVzdFByb3AoWyd1c2VyU2VsZWN0JywgJ01velVzZXJTZWxlY3QnLCAnV2Via2l0VXNlclNlbGVjdCcsICdtc1VzZXJTZWxlY3QnXSk7XG5sZXQgdXNlclNlbGVjdDtcblxuRE9NLmRpc2FibGVEcmFnID0gZnVuY3Rpb24gKCkge1xuICAgIGlmIChkb2NTdHlsZSAmJiBzZWxlY3RQcm9wKSB7XG4gICAgICAgIHVzZXJTZWxlY3QgPSBkb2NTdHlsZVtzZWxlY3RQcm9wXTtcbiAgICAgICAgZG9jU3R5bGVbc2VsZWN0UHJvcF0gPSAnbm9uZSc7XG4gICAgfVxufTtcblxuRE9NLmVuYWJsZURyYWcgPSBmdW5jdGlvbiAoKSB7XG4gICAgaWYgKGRvY1N0eWxlICYmIHNlbGVjdFByb3ApIHtcbiAgICAgICAgZG9jU3R5bGVbc2VsZWN0UHJvcF0gPSB1c2VyU2VsZWN0O1xuICAgIH1cbn07XG5cbmNvbnN0IHRyYW5zZm9ybVByb3AgPSB0ZXN0UHJvcChbJ3RyYW5zZm9ybScsICdXZWJraXRUcmFuc2Zvcm0nXSk7XG5cbkRPTS5zZXRUcmFuc2Zvcm0gPSBmdW5jdGlvbihlbDogSFRNTEVsZW1lbnQsIHZhbHVlOiBzdHJpbmcpIHtcbiAgICAoZWwuc3R5bGU6IGFueSlbdHJhbnNmb3JtUHJvcF0gPSB2YWx1ZTtcbn07XG5cbi8vIEZlYXR1cmUgZGV0ZWN0aW9uIGZvciB7cGFzc2l2ZTogZmFsc2V9IHN1cHBvcnQgaW4gYWRkL3JlbW92ZUV2ZW50TGlzdGVuZXIuXG5sZXQgcGFzc2l2ZVN1cHBvcnRlZCA9IGZhbHNlO1xuXG50cnkge1xuICAgIGNvbnN0IG9wdGlvbnMgPSAoT2JqZWN0LmRlZmluZVByb3BlcnR5OiBhbnkpKHt9LCBcInBhc3NpdmVcIiwge1xuICAgICAgICBnZXQ6IGZ1bmN0aW9uKCkge1xuICAgICAgICAgICAgcGFzc2l2ZVN1cHBvcnRlZCA9IHRydWU7XG4gICAgICAgIH1cbiAgICB9KTtcbiAgICAod2luZG93LmFkZEV2ZW50TGlzdGVuZXI6IGFueSkoXCJ0ZXN0XCIsIG9wdGlvbnMsIG9wdGlvbnMpO1xuICAgICh3aW5kb3cucmVtb3ZlRXZlbnRMaXN0ZW5lcjogYW55KShcInRlc3RcIiwgb3B0aW9ucywgb3B0aW9ucyk7XG59IGNhdGNoIChlcnIpIHtcbiAgICBwYXNzaXZlU3VwcG9ydGVkID0gZmFsc2U7XG59XG5cbkRPTS5hZGRFdmVudExpc3RlbmVyID0gZnVuY3Rpb24odGFyZ2V0OiAqLCB0eXBlOiAqLCBjYWxsYmFjazogKiwgb3B0aW9uczoge3Bhc3NpdmU/OiBib29sZWFuLCBjYXB0dXJlPzogYm9vbGVhbn0gPSB7fSkge1xuICAgIGlmICgncGFzc2l2ZScgaW4gb3B0aW9ucyAmJiBwYXNzaXZlU3VwcG9ydGVkKSB7XG4gICAgICAgIHRhcmdldC5hZGRFdmVudExpc3RlbmVyKHR5cGUsIGNhbGxiYWNrLCAob3B0aW9uczogYW55KSk7XG4gICAgfSBlbHNlIHtcbiAgICAgICAgdGFyZ2V0LmFkZEV2ZW50TGlzdGVuZXIodHlwZSwgY2FsbGJhY2ssIG9wdGlvbnMuY2FwdHVyZSk7XG4gICAgfVxufTtcblxuRE9NLnJlbW92ZUV2ZW50TGlzdGVuZXIgPSBmdW5jdGlvbih0YXJnZXQ6ICosIHR5cGU6ICosIGNhbGxiYWNrOiAqLCBvcHRpb25zOiB7cGFzc2l2ZT86IGJvb2xlYW4sIGNhcHR1cmU/OiBib29sZWFufSA9IHt9KSB7XG4gICAgaWYgKCdwYXNzaXZlJyBpbiBvcHRpb25zICYmIHBhc3NpdmVTdXBwb3J0ZWQpIHtcbiAgICAgICAgdGFyZ2V0LnJlbW92ZUV2ZW50TGlzdGVuZXIodHlwZSwgY2FsbGJhY2ssIChvcHRpb25zOiBhbnkpKTtcbiAgICB9IGVsc2Uge1xuICAgICAgICB0YXJnZXQucmVtb3ZlRXZlbnRMaXN0ZW5lcih0eXBlLCBjYWxsYmFjaywgb3B0aW9ucy5jYXB0dXJlKTtcbiAgICB9XG59O1xuXG4vLyBTdXBwcmVzcyB0aGUgbmV4dCBjbGljaywgYnV0IG9ubHkgaWYgaXQncyBpbW1lZGlhdGUuXG5jb25zdCBzdXBwcmVzc0NsaWNrOiBNb3VzZUV2ZW50TGlzdGVuZXIgPSBmdW5jdGlvbiAoZSkge1xuICAgIGUucHJldmVudERlZmF1bHQoKTtcbiAgICBlLnN0b3BQcm9wYWdhdGlvbigpO1xuICAgIHdpbmRvdy5yZW1vdmVFdmVudExpc3RlbmVyKCdjbGljaycsIHN1cHByZXNzQ2xpY2ssIHRydWUpO1xufTtcblxuRE9NLnN1cHByZXNzQ2xpY2sgPSBmdW5jdGlvbigpIHtcbiAgICB3aW5kb3cuYWRkRXZlbnRMaXN0ZW5lcignY2xpY2snLCBzdXBwcmVzc0NsaWNrLCB0cnVlKTtcbiAgICB3aW5kb3cuc2V0VGltZW91dCgoKSA9PiB7XG4gICAgICAgIHdpbmRvdy5yZW1vdmVFdmVudExpc3RlbmVyKCdjbGljaycsIHN1cHByZXNzQ2xpY2ssIHRydWUpO1xuICAgIH0sIDApO1xufTtcblxuRE9NLm1vdXNlUG9zID0gZnVuY3Rpb24gKGVsOiBIVE1MRWxlbWVudCwgZTogYW55KSB7XG4gICAgY29uc3QgcmVjdCA9IGVsLmdldEJvdW5kaW5nQ2xpZW50UmVjdCgpO1xuICAgIGUgPSBlLnRvdWNoZXMgPyBlLnRvdWNoZXNbMF0gOiBlO1xuICAgIHJldHVybiBuZXcgUG9pbnQoXG4gICAgICAgIGUuY2xpZW50WCAtIHJlY3QubGVmdCAtIGVsLmNsaWVudExlZnQsXG4gICAgICAgIGUuY2xpZW50WSAtIHJlY3QudG9wIC0gZWwuY2xpZW50VG9wXG4gICAgKTtcbn07XG5cbkRPTS50b3VjaFBvcyA9IGZ1bmN0aW9uIChlbDogSFRNTEVsZW1lbnQsIGU6IGFueSkge1xuICAgIGNvbnN0IHJlY3QgPSBlbC5nZXRCb3VuZGluZ0NsaWVudFJlY3QoKSxcbiAgICAgICAgcG9pbnRzID0gW107XG4gICAgY29uc3QgdG91Y2hlcyA9IChlLnR5cGUgPT09ICd0b3VjaGVuZCcpID8gZS5jaGFuZ2VkVG91Y2hlcyA6IGUudG91Y2hlcztcbiAgICBmb3IgKGxldCBpID0gMDsgaSA8IHRvdWNoZXMubGVuZ3RoOyBpKyspIHtcbiAgICAgICAgcG9pbnRzLnB1c2gobmV3IFBvaW50KFxuICAgICAgICAgICAgdG91Y2hlc1tpXS5jbGllbnRYIC0gcmVjdC5sZWZ0IC0gZWwuY2xpZW50TGVmdCxcbiAgICAgICAgICAgIHRvdWNoZXNbaV0uY2xpZW50WSAtIHJlY3QudG9wIC0gZWwuY2xpZW50VG9wXG4gICAgICAgICkpO1xuICAgIH1cbiAgICByZXR1cm4gcG9pbnRzO1xufTtcblxuRE9NLm1vdXNlQnV0dG9uID0gZnVuY3Rpb24gKGU6IE1vdXNlRXZlbnQpIHtcbiAgICBhc3NlcnQoZS50eXBlID09PSAnbW91c2Vkb3duJyB8fCBlLnR5cGUgPT09ICdtb3VzZXVwJyk7XG4gICAgaWYgKHR5cGVvZiB3aW5kb3cuSW5zdGFsbFRyaWdnZXIgIT09ICd1bmRlZmluZWQnICYmIGUuYnV0dG9uID09PSAyICYmIGUuY3RybEtleSAmJlxuICAgICAgICB3aW5kb3cubmF2aWdhdG9yLnBsYXRmb3JtLnRvVXBwZXJDYXNlKCkuaW5kZXhPZignTUFDJykgPj0gMCkge1xuICAgICAgICAvLyBGaXggZm9yIGh0dHBzOi8vZ2l0aHViLmNvbS9tYXBib3gvbWFwYm94LWdsLWpzL2lzc3Vlcy8zMTMxOlxuICAgICAgICAvLyBGaXJlZm94IChkZXRlY3RlZCBieSBJbnN0YWxsVHJpZ2dlcikgb24gTWFjIGRldGVybWluZXMgZS5idXR0b24gPSAyIHdoZW5cbiAgICAgICAgLy8gdXNpbmcgQ29udHJvbCArIGxlZnQgY2xpY2tcbiAgICAgICAgcmV0dXJuIDA7XG4gICAgfVxuICAgIHJldHVybiBlLmJ1dHRvbjtcbn07XG5cbkRPTS5yZW1vdmUgPSBmdW5jdGlvbihub2RlOiBIVE1MRWxlbWVudCkge1xuICAgIGlmIChub2RlLnBhcmVudE5vZGUpIHtcbiAgICAgICAgbm9kZS5wYXJlbnROb2RlLnJlbW92ZUNoaWxkKG5vZGUpO1xuICAgIH1cbn07XG4iLCIvLyBAZmxvd1xuXG50eXBlIENvbmZpZyA9IHt8XG4gIEFQSV9VUkw6IHN0cmluZyxcbiAgRVZFTlRTX1VSTDogc3RyaW5nLFxuICBSRVFVSVJFX0FDQ0VTU19UT0tFTjogYm9vbGVhbixcbiAgQUNDRVNTX1RPS0VOOiA/c3RyaW5nXG58fTtcblxuY29uc3QgY29uZmlnOiBDb25maWcgPSB7XG4gICAgQVBJX1VSTDogJ2h0dHBzOi8vYXBpLm1hcGJveC5jb20nLFxuICAgIGdldCBFVkVOVFNfVVJMKCkge1xuICAgICAgICBpZiAodGhpcy5BUElfVVJMLmluZGV4T2YoJ2h0dHBzOi8vYXBpLm1hcGJveC5jbicpID09PSAwKSB7XG4gICAgICAgICAgICByZXR1cm4gJ2h0dHBzOi8vZXZlbnRzLm1hcGJveC5jbi9ldmVudHMvdjInO1xuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgcmV0dXJuICdodHRwczovL2V2ZW50cy5tYXBib3guY29tL2V2ZW50cy92Mic7XG4gICAgICAgIH1cbiAgICB9LFxuICAgIFJFUVVJUkVfQUNDRVNTX1RPS0VOOiB0cnVlLFxuICAgIEFDQ0VTU19UT0tFTjogbnVsbFxufTtcblxuZXhwb3J0IGRlZmF1bHQgY29uZmlnO1xuIiwiLy8gQGZsb3dcblxuaW1wb3J0IGNvbmZpZyBmcm9tICcuL2NvbmZpZyc7XG5cbmltcG9ydCBicm93c2VyIGZyb20gJy4vYnJvd3Nlcic7XG5pbXBvcnQgd2luZG93IGZyb20gJy4vd2luZG93JztcbmltcG9ydCB7IHZlcnNpb24gfSBmcm9tICcuLi8uLi9wYWNrYWdlLmpzb24nO1xuaW1wb3J0IHsgdXVpZCwgdmFsaWRhdGVVdWlkLCBzdG9yYWdlQXZhaWxhYmxlLCB3YXJuT25jZSB9IGZyb20gJy4vdXRpbCc7XG5pbXBvcnQgeyBwb3N0RGF0YSB9IGZyb20gJy4vYWpheCc7XG5cbmltcG9ydCB0eXBlIHsgUmVxdWVzdFBhcmFtZXRlcnMgfSBmcm9tICcuL2FqYXgnO1xuaW1wb3J0IHR5cGUgeyBDYW5jZWxhYmxlIH0gZnJvbSAnLi4vdHlwZXMvY2FuY2VsYWJsZSc7XG5cbmNvbnN0IGhlbHAgPSAnU2VlIGh0dHBzOi8vd3d3Lm1hcGJveC5jb20vYXBpLWRvY3VtZW50YXRpb24vI2FjY2Vzcy10b2tlbnMnO1xuY29uc3QgdHVybnN0aWxlRXZlbnRTdG9yYWdlS2V5ID0gJ21hcGJveC50dXJuc3RpbGVFdmVudERhdGEnO1xuXG50eXBlIFVybE9iamVjdCA9IHt8XG4gICAgcHJvdG9jb2w6IHN0cmluZyxcbiAgICBhdXRob3JpdHk6IHN0cmluZyxcbiAgICBwYXRoOiBzdHJpbmcsXG4gICAgcGFyYW1zOiBBcnJheTxzdHJpbmc+XG58fTtcblxuZnVuY3Rpb24gbWFrZUFQSVVSTCh1cmxPYmplY3Q6IFVybE9iamVjdCwgYWNjZXNzVG9rZW46IHN0cmluZyB8IG51bGwgfCB2b2lkKTogc3RyaW5nIHtcbiAgICBjb25zdCBhcGlVcmxPYmplY3QgPSBwYXJzZVVybChjb25maWcuQVBJX1VSTCk7XG4gICAgdXJsT2JqZWN0LnByb3RvY29sID0gYXBpVXJsT2JqZWN0LnByb3RvY29sO1xuICAgIHVybE9iamVjdC5hdXRob3JpdHkgPSBhcGlVcmxPYmplY3QuYXV0aG9yaXR5O1xuXG4gICAgaWYgKGFwaVVybE9iamVjdC5wYXRoICE9PSAnLycpIHtcbiAgICAgICAgdXJsT2JqZWN0LnBhdGggPSBgJHthcGlVcmxPYmplY3QucGF0aH0ke3VybE9iamVjdC5wYXRofWA7XG4gICAgfVxuXG4gICAgaWYgKCFjb25maWcuUkVRVUlSRV9BQ0NFU1NfVE9LRU4pIHJldHVybiBmb3JtYXRVcmwodXJsT2JqZWN0KTtcblxuICAgIGFjY2Vzc1Rva2VuID0gYWNjZXNzVG9rZW4gfHwgY29uZmlnLkFDQ0VTU19UT0tFTjtcbiAgICBpZiAoIWFjY2Vzc1Rva2VuKVxuICAgICAgICB0aHJvdyBuZXcgRXJyb3IoYEFuIEFQSSBhY2Nlc3MgdG9rZW4gaXMgcmVxdWlyZWQgdG8gdXNlIE1hcGJveCBHTC4gJHtoZWxwfWApO1xuICAgIGlmIChhY2Nlc3NUb2tlblswXSA9PT0gJ3MnKVxuICAgICAgICB0aHJvdyBuZXcgRXJyb3IoYFVzZSBhIHB1YmxpYyBhY2Nlc3MgdG9rZW4gKHBrLiopIHdpdGggTWFwYm94IEdMLCBub3QgYSBzZWNyZXQgYWNjZXNzIHRva2VuIChzay4qKS4gJHtoZWxwfWApO1xuXG4gICAgdXJsT2JqZWN0LnBhcmFtcy5wdXNoKGBhY2Nlc3NfdG9rZW49JHthY2Nlc3NUb2tlbn1gKTtcbiAgICByZXR1cm4gZm9ybWF0VXJsKHVybE9iamVjdCk7XG59XG5cbmZ1bmN0aW9uIGlzTWFwYm94VVJMKHVybDogc3RyaW5nKSB7XG4gICAgcmV0dXJuIHVybC5pbmRleE9mKCdtYXBib3g6JykgPT09IDA7XG59XG5cbmV4cG9ydCB7IGlzTWFwYm94VVJMIH07XG5cbmV4cG9ydCBjb25zdCBub3JtYWxpemVTdHlsZVVSTCA9IGZ1bmN0aW9uKHVybDogc3RyaW5nLCBhY2Nlc3NUb2tlbj86IHN0cmluZyk6IHN0cmluZyB7XG4gICAgaWYgKCFpc01hcGJveFVSTCh1cmwpKSByZXR1cm4gdXJsO1xuICAgIGNvbnN0IHVybE9iamVjdCA9IHBhcnNlVXJsKHVybCk7XG4gICAgdXJsT2JqZWN0LnBhdGggPSBgL3N0eWxlcy92MSR7dXJsT2JqZWN0LnBhdGh9YDtcbiAgICByZXR1cm4gbWFrZUFQSVVSTCh1cmxPYmplY3QsIGFjY2Vzc1Rva2VuKTtcbn07XG5cbmV4cG9ydCBjb25zdCBub3JtYWxpemVHbHlwaHNVUkwgPSBmdW5jdGlvbih1cmw6IHN0cmluZywgYWNjZXNzVG9rZW4/OiBzdHJpbmcpOiBzdHJpbmcge1xuICAgIGlmICghaXNNYXBib3hVUkwodXJsKSkgcmV0dXJuIHVybDtcbiAgICBjb25zdCB1cmxPYmplY3QgPSBwYXJzZVVybCh1cmwpO1xuICAgIHVybE9iamVjdC5wYXRoID0gYC9mb250cy92MSR7dXJsT2JqZWN0LnBhdGh9YDtcbiAgICByZXR1cm4gbWFrZUFQSVVSTCh1cmxPYmplY3QsIGFjY2Vzc1Rva2VuKTtcbn07XG5cbmV4cG9ydCBjb25zdCBub3JtYWxpemVTb3VyY2VVUkwgPSBmdW5jdGlvbih1cmw6IHN0cmluZywgYWNjZXNzVG9rZW4/OiBzdHJpbmcpOiBzdHJpbmcge1xuICAgIGlmICghaXNNYXBib3hVUkwodXJsKSkgcmV0dXJuIHVybDtcbiAgICBjb25zdCB1cmxPYmplY3QgPSBwYXJzZVVybCh1cmwpO1xuICAgIHVybE9iamVjdC5wYXRoID0gYC92NC8ke3VybE9iamVjdC5hdXRob3JpdHl9Lmpzb25gO1xuICAgIC8vIFRpbGVKU09OIHJlcXVlc3RzIG5lZWQgYSBzZWN1cmUgZmxhZyBhcHBlbmRlZCB0byB0aGVpciBVUkxzIHNvXG4gICAgLy8gdGhhdCB0aGUgc2VydmVyIGtub3dzIHRvIHNlbmQgU1NMLWlmaWVkIHJlc291cmNlIHJlZmVyZW5jZXMuXG4gICAgdXJsT2JqZWN0LnBhcmFtcy5wdXNoKCdzZWN1cmUnKTtcbiAgICByZXR1cm4gbWFrZUFQSVVSTCh1cmxPYmplY3QsIGFjY2Vzc1Rva2VuKTtcbn07XG5cbmV4cG9ydCBjb25zdCBub3JtYWxpemVTcHJpdGVVUkwgPSBmdW5jdGlvbih1cmw6IHN0cmluZywgZm9ybWF0OiBzdHJpbmcsIGV4dGVuc2lvbjogc3RyaW5nLCBhY2Nlc3NUb2tlbj86IHN0cmluZyk6IHN0cmluZyB7XG4gICAgY29uc3QgdXJsT2JqZWN0ID0gcGFyc2VVcmwodXJsKTtcbiAgICBpZiAoIWlzTWFwYm94VVJMKHVybCkpIHtcbiAgICAgICAgdXJsT2JqZWN0LnBhdGggKz0gYCR7Zm9ybWF0fSR7ZXh0ZW5zaW9ufWA7XG4gICAgICAgIHJldHVybiBmb3JtYXRVcmwodXJsT2JqZWN0KTtcbiAgICB9XG4gICAgdXJsT2JqZWN0LnBhdGggPSBgL3N0eWxlcy92MSR7dXJsT2JqZWN0LnBhdGh9L3Nwcml0ZSR7Zm9ybWF0fSR7ZXh0ZW5zaW9ufWA7XG4gICAgcmV0dXJuIG1ha2VBUElVUkwodXJsT2JqZWN0LCBhY2Nlc3NUb2tlbik7XG59O1xuXG5jb25zdCBpbWFnZUV4dGVuc2lvblJlID0gLyhcXC4ocG5nfGpwZylcXGQqKSg/PSQpLztcblxuZXhwb3J0IGNvbnN0IG5vcm1hbGl6ZVRpbGVVUkwgPSBmdW5jdGlvbih0aWxlVVJMOiBzdHJpbmcsIHNvdXJjZVVSTD86ID9zdHJpbmcsIHRpbGVTaXplPzogP251bWJlcik6IHN0cmluZyB7XG4gICAgaWYgKCFzb3VyY2VVUkwgfHwgIWlzTWFwYm94VVJMKHNvdXJjZVVSTCkpIHJldHVybiB0aWxlVVJMO1xuXG4gICAgY29uc3QgdXJsT2JqZWN0ID0gcGFyc2VVcmwodGlsZVVSTCk7XG5cbiAgICAvLyBUaGUgdjQgbWFwYm94IHRpbGUgQVBJIHN1cHBvcnRzIDUxMng1MTIgaW1hZ2UgdGlsZXMgb25seSB3aGVuIEAyeFxuICAgIC8vIGlzIGFwcGVuZGVkIHRvIHRoZSB0aWxlIFVSTC4gSWYgYHRpbGVTaXplOiA1MTJgIGlzIHNwZWNpZmllZCBmb3JcbiAgICAvLyBhIE1hcGJveCByYXN0ZXIgc291cmNlIGZvcmNlIHRoZSBAMnggc3VmZml4IGV2ZW4gaWYgYSBub24gaGlkcGkgZGV2aWNlLlxuICAgIGNvbnN0IHN1ZmZpeCA9IGJyb3dzZXIuZGV2aWNlUGl4ZWxSYXRpbyA+PSAyIHx8IHRpbGVTaXplID09PSA1MTIgPyAnQDJ4JyA6ICcnO1xuICAgIGNvbnN0IGV4dGVuc2lvbiA9IGJyb3dzZXIuc3VwcG9ydHNXZWJwID8gJy53ZWJwJyA6ICckMSc7XG4gICAgdXJsT2JqZWN0LnBhdGggPSB1cmxPYmplY3QucGF0aC5yZXBsYWNlKGltYWdlRXh0ZW5zaW9uUmUsIGAke3N1ZmZpeH0ke2V4dGVuc2lvbn1gKTtcblxuICAgIHJlcGxhY2VUZW1wQWNjZXNzVG9rZW4odXJsT2JqZWN0LnBhcmFtcyk7XG4gICAgcmV0dXJuIGZvcm1hdFVybCh1cmxPYmplY3QpO1xufTtcblxuZnVuY3Rpb24gcmVwbGFjZVRlbXBBY2Nlc3NUb2tlbihwYXJhbXM6IEFycmF5PHN0cmluZz4pIHtcbiAgICBmb3IgKGxldCBpID0gMDsgaSA8IHBhcmFtcy5sZW5ndGg7IGkrKykge1xuICAgICAgICBpZiAocGFyYW1zW2ldLmluZGV4T2YoJ2FjY2Vzc190b2tlbj10ay4nKSA9PT0gMCkge1xuICAgICAgICAgICAgcGFyYW1zW2ldID0gYGFjY2Vzc190b2tlbj0ke2NvbmZpZy5BQ0NFU1NfVE9LRU4gfHwgJyd9YDtcbiAgICAgICAgfVxuICAgIH1cbn1cblxuY29uc3QgdXJsUmUgPSAvXihcXHcrKTpcXC9cXC8oW14vP10qKShcXC9bXj9dKyk/XFw/PyguKyk/LztcblxuZnVuY3Rpb24gcGFyc2VVcmwodXJsOiBzdHJpbmcpOiBVcmxPYmplY3Qge1xuICAgIGNvbnN0IHBhcnRzID0gdXJsLm1hdGNoKHVybFJlKTtcbiAgICBpZiAoIXBhcnRzKSB7XG4gICAgICAgIHRocm93IG5ldyBFcnJvcignVW5hYmxlIHRvIHBhcnNlIFVSTCBvYmplY3QnKTtcbiAgICB9XG4gICAgcmV0dXJuIHtcbiAgICAgICAgcHJvdG9jb2w6IHBhcnRzWzFdLFxuICAgICAgICBhdXRob3JpdHk6IHBhcnRzWzJdLFxuICAgICAgICBwYXRoOiBwYXJ0c1szXSB8fCAnLycsXG4gICAgICAgIHBhcmFtczogcGFydHNbNF0gPyBwYXJ0c1s0XS5zcGxpdCgnJicpIDogW11cbiAgICB9O1xufVxuXG5mdW5jdGlvbiBmb3JtYXRVcmwob2JqOiBVcmxPYmplY3QpOiBzdHJpbmcge1xuICAgIGNvbnN0IHBhcmFtcyA9IG9iai5wYXJhbXMubGVuZ3RoID8gYD8ke29iai5wYXJhbXMuam9pbignJicpfWAgOiAnJztcbiAgICByZXR1cm4gYCR7b2JqLnByb3RvY29sfTovLyR7b2JqLmF1dGhvcml0eX0ke29iai5wYXRofSR7cGFyYW1zfWA7XG59XG5cbmV4cG9ydCBjbGFzcyBUdXJuc3RpbGVFdmVudCB7XG4gICAgZXZlbnREYXRhOiB7IGFub25JZDogP3N0cmluZywgbGFzdFN1Y2Nlc3M6ID9udW1iZXIsIGFjY2Vzc1Rva2VuOiA/c3RyaW5nfTtcbiAgICBxdWV1ZTogQXJyYXk8bnVtYmVyPjtcbiAgICBwZW5kaW5nOiBib29sZWFuXG4gICAgcGVuZGluZ1JlcXVlc3Q6ID9DYW5jZWxhYmxlO1xuXG4gICAgY29uc3RydWN0b3IoKSB7XG4gICAgICAgIHRoaXMuZXZlbnREYXRhID0geyBhbm9uSWQ6IG51bGwsIGxhc3RTdWNjZXNzOiBudWxsLCBhY2Nlc3NUb2tlbjogY29uZmlnLkFDQ0VTU19UT0tFTn07XG4gICAgICAgIHRoaXMucXVldWUgPSBbXTtcbiAgICAgICAgdGhpcy5wZW5kaW5nID0gZmFsc2U7XG4gICAgICAgIHRoaXMucGVuZGluZ1JlcXVlc3QgPSBudWxsO1xuICAgIH1cblxuICAgIHBvc3RUdXJuc3RpbGVFdmVudCh0aWxlVXJsczogQXJyYXk8c3RyaW5nPikge1xuICAgICAgICAvL0VuYWJsZWQgb25seSB3aGVuIE1hcGJveCBBY2Nlc3MgVG9rZW4gaXMgc2V0IGFuZCBhIHNvdXJjZSB1c2VzXG4gICAgICAgIC8vIG1hcGJveCB0aWxlcy5cbiAgICAgICAgaWYgKGNvbmZpZy5BQ0NFU1NfVE9LRU4gJiZcbiAgICAgICAgICAgIEFycmF5LmlzQXJyYXkodGlsZVVybHMpICYmXG4gICAgICAgICAgICB0aWxlVXJscy5zb21lKCh1cmwpID0+IHsgcmV0dXJuIC8obWFwYm94XFwuYykobnxvbSkvaS50ZXN0KHVybCk7IH0pKSB7XG4gICAgICAgICAgICB0aGlzLnF1ZXVlUmVxdWVzdChicm93c2VyLm5vdygpKTtcbiAgICAgICAgfVxuICAgIH1cblxuICAgIHF1ZXVlUmVxdWVzdChkYXRlOiBudW1iZXIpIHtcbiAgICAgICAgdGhpcy5xdWV1ZS5wdXNoKGRhdGUpO1xuICAgICAgICB0aGlzLnByb2Nlc3NSZXF1ZXN0cygpO1xuICAgIH1cblxuICAgIHByb2Nlc3NSZXF1ZXN0cygpIHtcbiAgICAgICAgaWYgKHRoaXMucGVuZGluZ1JlcXVlc3QgfHwgdGhpcy5xdWV1ZS5sZW5ndGggPT09IDApIHtcbiAgICAgICAgICAgIHJldHVybjtcbiAgICAgICAgfVxuICAgICAgICBjb25zdCBzdG9yYWdlS2V5ID0gYCR7dHVybnN0aWxlRXZlbnRTdG9yYWdlS2V5fToke2NvbmZpZy5BQ0NFU1NfVE9LRU4gfHwgJyd9YDtcbiAgICAgICAgY29uc3QgaXNMb2NhbFN0b3JhZ2VBdmFpbGFibGUgPSBzdG9yYWdlQXZhaWxhYmxlKCdsb2NhbFN0b3JhZ2UnKTtcbiAgICAgICAgbGV0IGR1ZUZvckV2ZW50ID0gdGhpcy5ldmVudERhdGEuYWNjZXNzVG9rZW4gPyAodGhpcy5ldmVudERhdGEuYWNjZXNzVG9rZW4gIT09IGNvbmZpZy5BQ0NFU1NfVE9LRU4pIDogZmFsc2U7XG5cbiAgICAgICAgLy9SZXNldCBldmVudCBkYXRhIGNhY2hlIGlmIHRoZSBhY2Nlc3MgdG9rZW4gY2hhbmdlZC5cbiAgICAgICAgaWYgKGR1ZUZvckV2ZW50KSB7XG4gICAgICAgICAgICB0aGlzLmV2ZW50RGF0YS5hbm9uSWQgPSB0aGlzLmV2ZW50RGF0YS5sYXN0U3VjY2VzcyA9IG51bGw7XG4gICAgICAgIH1cbiAgICAgICAgaWYgKCghdGhpcy5ldmVudERhdGEuYW5vbklkIHx8ICF0aGlzLmV2ZW50RGF0YS5sYXN0U3VjY2VzcykgJiZcbiAgICAgICAgICAgIGlzTG9jYWxTdG9yYWdlQXZhaWxhYmxlKSB7XG4gICAgICAgICAgICAvL1JldHJpZXZlIGNhY2hlZCBkYXRhXG4gICAgICAgICAgICB0cnkge1xuICAgICAgICAgICAgICAgIGNvbnN0IGRhdGEgPSB3aW5kb3cubG9jYWxTdG9yYWdlLmdldEl0ZW0oc3RvcmFnZUtleSk7XG4gICAgICAgICAgICAgICAgaWYgKGRhdGEpIHtcbiAgICAgICAgICAgICAgICAgICAgdGhpcy5ldmVudERhdGEgPSBKU09OLnBhcnNlKGRhdGEpO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH0gY2F0Y2ggKGUpIHtcbiAgICAgICAgICAgICAgICB3YXJuT25jZSgnVW5hYmxlIHRvIHJlYWQgZnJvbSBMb2NhbFN0b3JhZ2UnKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfVxuXG4gICAgICAgIGlmICghdmFsaWRhdGVVdWlkKHRoaXMuZXZlbnREYXRhLmFub25JZCkpIHtcbiAgICAgICAgICAgIHRoaXMuZXZlbnREYXRhLmFub25JZCA9IHV1aWQoKTtcbiAgICAgICAgICAgIGR1ZUZvckV2ZW50ID0gdHJ1ZTtcbiAgICAgICAgfVxuICAgICAgICBjb25zdCBuZXh0VXBkYXRlID0gdGhpcy5xdWV1ZS5zaGlmdCgpO1xuXG4gICAgICAgIC8vIFJlY29yZCB0dXJuc3RpbGUgZXZlbnQgb25jZSBwZXIgY2FsZW5kYXIgZGF5LlxuICAgICAgICBpZiAodGhpcy5ldmVudERhdGEubGFzdFN1Y2Nlc3MpIHtcbiAgICAgICAgICAgIGNvbnN0IGxhc3RVcGRhdGUgPSBuZXcgRGF0ZSh0aGlzLmV2ZW50RGF0YS5sYXN0U3VjY2Vzcyk7XG4gICAgICAgICAgICBjb25zdCBuZXh0RGF0ZSA9IG5ldyBEYXRlKG5leHRVcGRhdGUpO1xuICAgICAgICAgICAgY29uc3QgZGF5c0VsYXBzZWQgPSAobmV4dFVwZGF0ZSAtIHRoaXMuZXZlbnREYXRhLmxhc3RTdWNjZXNzKSAvICgyNCAqIDYwICogNjAgKiAxMDAwKTtcbiAgICAgICAgICAgIGR1ZUZvckV2ZW50ID0gZHVlRm9yRXZlbnQgfHwgZGF5c0VsYXBzZWQgPj0gMSB8fCBkYXlzRWxhcHNlZCA8IC0xIHx8IGxhc3RVcGRhdGUuZ2V0RGF0ZSgpICE9PSBuZXh0RGF0ZS5nZXREYXRlKCk7XG4gICAgICAgIH1cblxuICAgICAgICBpZiAoIWR1ZUZvckV2ZW50KSB7XG4gICAgICAgICAgICByZXR1cm4gdGhpcy5wcm9jZXNzUmVxdWVzdHMoKTtcbiAgICAgICAgfVxuXG4gICAgICAgIGNvbnN0IGV2ZW5zdFVybE9iamVjdDogVXJsT2JqZWN0ID0gcGFyc2VVcmwoY29uZmlnLkVWRU5UU19VUkwpO1xuICAgICAgICBldmVuc3RVcmxPYmplY3QucGFyYW1zLnB1c2goYGFjY2Vzc190b2tlbj0ke2NvbmZpZy5BQ0NFU1NfVE9LRU4gfHwgJyd9YCk7XG4gICAgICAgIGNvbnN0IHJlcXVlc3Q6IFJlcXVlc3RQYXJhbWV0ZXJzID0ge1xuICAgICAgICAgICAgdXJsOiBmb3JtYXRVcmwoZXZlbnN0VXJsT2JqZWN0KSxcbiAgICAgICAgICAgIGhlYWRlcnM6IHtcbiAgICAgICAgICAgICAgICAnQ29udGVudC1UeXBlJzogJ3RleHQvcGxhaW4nIC8vU2tpcCB0aGUgcHJlLWZsaWdodCBPUFRJT05TIHJlcXVlc3RcbiAgICAgICAgICAgIH1cbiAgICAgICAgfTtcblxuICAgICAgICBjb25zdCBwYXlsb2FkID0gSlNPTi5zdHJpbmdpZnkoW3tcbiAgICAgICAgICAgIGV2ZW50OiAnYXBwVXNlclR1cm5zdGlsZScsXG4gICAgICAgICAgICBjcmVhdGVkOiAobmV3IERhdGUobmV4dFVwZGF0ZSkpLnRvSVNPU3RyaW5nKCksXG4gICAgICAgICAgICBzZGtJZGVudGlmaWVyOiAnbWFwYm94LWdsLWpzJyxcbiAgICAgICAgICAgIHNka1ZlcnNpb246IHZlcnNpb24sXG4gICAgICAgICAgICAnZW5hYmxlZC50ZWxlbWV0cnknOiBmYWxzZSxcbiAgICAgICAgICAgIHVzZXJJZDogdGhpcy5ldmVudERhdGEuYW5vbklkXG4gICAgICAgIH1dKTtcblxuICAgICAgICB0aGlzLnBlbmRpbmdSZXF1ZXN0ID0gcG9zdERhdGEocmVxdWVzdCwgcGF5bG9hZCwgKGVycm9yKSA9PiB7XG4gICAgICAgICAgICB0aGlzLnBlbmRpbmdSZXF1ZXN0ID0gbnVsbDtcbiAgICAgICAgICAgIGlmICghZXJyb3IpIHtcbiAgICAgICAgICAgICAgICB0aGlzLmV2ZW50RGF0YS5sYXN0U3VjY2VzcyA9IG5leHRVcGRhdGU7XG4gICAgICAgICAgICAgICAgdGhpcy5ldmVudERhdGEuYWNjZXNzVG9rZW4gPSBjb25maWcuQUNDRVNTX1RPS0VOO1xuICAgICAgICAgICAgICAgIGlmIChpc0xvY2FsU3RvcmFnZUF2YWlsYWJsZSkge1xuICAgICAgICAgICAgICAgICAgICB0cnkge1xuICAgICAgICAgICAgICAgICAgICAgICAgd2luZG93LmxvY2FsU3RvcmFnZS5zZXRJdGVtKHN0b3JhZ2VLZXksIEpTT04uc3RyaW5naWZ5KHRoaXMuZXZlbnREYXRhKSk7XG4gICAgICAgICAgICAgICAgICAgIH0gY2F0Y2ggKGUpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIHdhcm5PbmNlKCdVbmFibGUgdG8gd3JpdGUgdG8gTG9jYWxTdG9yYWdlJyk7XG4gICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgdGhpcy5wcm9jZXNzUmVxdWVzdHMoKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfSk7XG4gICAgfVxufVxuXG5jb25zdCB0dXJuc3RpbGVFdmVudF8gPSBuZXcgVHVybnN0aWxlRXZlbnQoKTtcblxuZXhwb3J0IGNvbnN0IHBvc3RUdXJuc3RpbGVFdmVudCA9IHR1cm5zdGlsZUV2ZW50Xy5wb3N0VHVybnN0aWxlRXZlbnQuYmluZCh0dXJuc3RpbGVFdmVudF8pO1xuIiwiLy8gQGZsb3dcblxuaW1wb3J0IHBvdHBhY2sgZnJvbSAncG90cGFjayc7XG5cbmltcG9ydCB7IFJHQkFJbWFnZSB9IGZyb20gJy4uL3V0aWwvaW1hZ2UnO1xuaW1wb3J0IHsgSW1hZ2VQb3NpdGlvbiB9IGZyb20gJy4vaW1hZ2VfYXRsYXMnO1xuaW1wb3J0IFRleHR1cmUgZnJvbSAnLi90ZXh0dXJlJztcbmltcG9ydCBhc3NlcnQgZnJvbSAnYXNzZXJ0JztcblxuaW1wb3J0IHR5cGUge1N0eWxlSW1hZ2V9IGZyb20gJy4uL3N0eWxlL3N0eWxlX2ltYWdlJztcbmltcG9ydCB0eXBlIENvbnRleHQgZnJvbSAnLi4vZ2wvY29udGV4dCc7XG5pbXBvcnQgdHlwZSB7QmlufSBmcm9tICdwb3RwYWNrJztcbmltcG9ydCB0eXBlIHtDYWxsYmFja30gZnJvbSAnLi4vdHlwZXMvY2FsbGJhY2snO1xuXG50eXBlIFBhdHRlcm4gPSB7XG4gICAgYmluOiBCaW4sXG4gICAgcG9zaXRpb246IEltYWdlUG9zaXRpb25cbn07XG5cbi8vIFdoZW4gY29waWVkIGludG8gdGhlIGF0bGFzIHRleHR1cmUsIGltYWdlIGRhdGEgaXMgcGFkZGVkIGJ5IG9uZSBwaXhlbCBvbiBlYWNoIHNpZGUuIEljb25cbi8vIGltYWdlcyBhcmUgcGFkZGVkIHdpdGggZnVsbHkgdHJhbnNwYXJlbnQgcGl4ZWxzLCB3aGlsZSBwYXR0ZXJuIGltYWdlcyBhcmUgcGFkZGVkIHdpdGggYVxuLy8gY29weSBvZiB0aGUgaW1hZ2UgZGF0YSB3cmFwcGVkIGZyb20gdGhlIG9wcG9zaXRlIHNpZGUuIEluIGJvdGggY2FzZXMsIHRoaXMgZW5zdXJlcyB0aGVcbi8vIGNvcnJlY3QgYmVoYXZpb3Igb2YgR0xfTElORUFSIHRleHR1cmUgc2FtcGxpbmcgbW9kZS5cbmNvbnN0IHBhZGRpbmcgPSAxO1xuXG4vKlxuICAgIEltYWdlTWFuYWdlciBkb2VzIHR3byB0aGluZ3M6XG5cbiAgICAgICAgMS4gVHJhY2tzIHJlcXVlc3RzIGZvciBpY29uIGltYWdlcyBmcm9tIHRpbGUgd29ya2VycyBhbmQgc2VuZHMgcmVzcG9uc2VzIHdoZW4gdGhlIHJlcXVlc3RzIGFyZSBmdWxmaWxsZWQuXG4gICAgICAgIDIuIEJ1aWxkcyBhIHRleHR1cmUgYXRsYXMgZm9yIHBhdHRlcm4gaW1hZ2VzLlxuXG4gICAgVGhlc2UgYXJlIGRpc3BhcmF0ZSByZXNwb25zaWJpbGl0aWVzIGFuZCBzaG91bGQgZXZlbnR1YWxseSBiZSBoYW5kbGVkIGJ5IGRpZmZlcmVudCBjbGFzc2VzLiBXaGVuIHdlIGltcGxlbWVudFxuICAgIGRhdGEtZHJpdmVuIHN1cHBvcnQgZm9yIGAqLXBhdHRlcm5gLCB3ZSdsbCBsaWtlbHkgdXNlIHBlci1idWNrZXQgcGF0dGVybiBhdGxhc2VzLCBhbmQgdGhhdCB3b3VsZCBiZSBhIGdvb2QgdGltZVxuICAgIHRvIHJlZmFjdG9yIHRoaXMuXG4qL1xuY2xhc3MgSW1hZ2VNYW5hZ2VyIHtcbiAgICBpbWFnZXM6IHtbc3RyaW5nXTogU3R5bGVJbWFnZX07XG4gICAgbG9hZGVkOiBib29sZWFuO1xuICAgIHJlcXVlc3RvcnM6IEFycmF5PHtpZHM6IEFycmF5PHN0cmluZz4sIGNhbGxiYWNrOiBDYWxsYmFjazx7W3N0cmluZ106IFN0eWxlSW1hZ2V9Pn0+O1xuXG4gICAgcGF0dGVybnM6IHtbc3RyaW5nXTogUGF0dGVybn07XG4gICAgYXRsYXNJbWFnZTogUkdCQUltYWdlO1xuICAgIGF0bGFzVGV4dHVyZTogP1RleHR1cmU7XG4gICAgZGlydHk6IGJvb2xlYW47XG5cbiAgICBjb25zdHJ1Y3RvcigpIHtcbiAgICAgICAgdGhpcy5pbWFnZXMgPSB7fTtcbiAgICAgICAgdGhpcy5sb2FkZWQgPSBmYWxzZTtcbiAgICAgICAgdGhpcy5yZXF1ZXN0b3JzID0gW107XG5cbiAgICAgICAgdGhpcy5wYXR0ZXJucyA9IHt9O1xuICAgICAgICB0aGlzLmF0bGFzSW1hZ2UgPSBuZXcgUkdCQUltYWdlKHt3aWR0aDogMSwgaGVpZ2h0OiAxfSk7XG4gICAgICAgIHRoaXMuZGlydHkgPSB0cnVlO1xuICAgIH1cblxuICAgIGlzTG9hZGVkKCkge1xuICAgICAgICByZXR1cm4gdGhpcy5sb2FkZWQ7XG4gICAgfVxuXG4gICAgc2V0TG9hZGVkKGxvYWRlZDogYm9vbGVhbikge1xuICAgICAgICBpZiAodGhpcy5sb2FkZWQgPT09IGxvYWRlZCkge1xuICAgICAgICAgICAgcmV0dXJuO1xuICAgICAgICB9XG5cbiAgICAgICAgdGhpcy5sb2FkZWQgPSBsb2FkZWQ7XG5cbiAgICAgICAgaWYgKGxvYWRlZCkge1xuICAgICAgICAgICAgZm9yIChjb25zdCB7aWRzLCBjYWxsYmFja30gb2YgdGhpcy5yZXF1ZXN0b3JzKSB7XG4gICAgICAgICAgICAgICAgdGhpcy5fbm90aWZ5KGlkcywgY2FsbGJhY2spO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgdGhpcy5yZXF1ZXN0b3JzID0gW107XG4gICAgICAgIH1cbiAgICB9XG5cbiAgICBnZXRJbWFnZShpZDogc3RyaW5nKTogP1N0eWxlSW1hZ2Uge1xuICAgICAgICByZXR1cm4gdGhpcy5pbWFnZXNbaWRdO1xuICAgIH1cblxuICAgIGFkZEltYWdlKGlkOiBzdHJpbmcsIGltYWdlOiBTdHlsZUltYWdlKSB7XG4gICAgICAgIGFzc2VydCghdGhpcy5pbWFnZXNbaWRdKTtcbiAgICAgICAgdGhpcy5pbWFnZXNbaWRdID0gaW1hZ2U7XG4gICAgfVxuXG4gICAgcmVtb3ZlSW1hZ2UoaWQ6IHN0cmluZykge1xuICAgICAgICBhc3NlcnQodGhpcy5pbWFnZXNbaWRdKTtcbiAgICAgICAgZGVsZXRlIHRoaXMuaW1hZ2VzW2lkXTtcbiAgICAgICAgZGVsZXRlIHRoaXMucGF0dGVybnNbaWRdO1xuICAgIH1cblxuICAgIGxpc3RJbWFnZXMoKTogQXJyYXk8c3RyaW5nPiB7XG4gICAgICAgIHJldHVybiBPYmplY3Qua2V5cyh0aGlzLmltYWdlcyk7XG4gICAgfVxuXG4gICAgZ2V0SW1hZ2VzKGlkczogQXJyYXk8c3RyaW5nPiwgY2FsbGJhY2s6IENhbGxiYWNrPHtbc3RyaW5nXTogU3R5bGVJbWFnZX0+KSB7XG4gICAgICAgIC8vIElmIHRoZSBzcHJpdGUgaGFzIGJlZW4gbG9hZGVkLCBvciBpZiBhbGwgdGhlIGljb24gZGVwZW5kZW5jaWVzIGFyZSBhbHJlYWR5IHByZXNlbnRcbiAgICAgICAgLy8gKGkuZS4gaWYgdGhleSd2ZSBiZWVuIGFkZGVkZWQgdmlhIHJ1bnRpbWUgc3R5bGluZyksIHRoZW4gbm90aWZ5IHRoZSByZXF1ZXN0b3IgaW1tZWRpYXRlbHkuXG4gICAgICAgIC8vIE90aGVyd2lzZSwgZGVsYXkgbm90aWZpY2F0aW9uIHVudGlsIHRoZSBzcHJpdGUgaXMgbG9hZGVkLiBBdCB0aGF0IHBvaW50LCBpZiBhbnkgb2YgdGhlXG4gICAgICAgIC8vIGRlcGVuZGVuY2llcyBhcmUgc3RpbGwgdW5hdmFpbGFibGUsIHdlJ2xsIGp1c3QgYXNzdW1lIHRoZXkgYXJlIHBlcm1hbmVudGx5IG1pc3NpbmcuXG4gICAgICAgIGxldCBoYXNBbGxEZXBlbmRlbmNpZXMgPSB0cnVlO1xuICAgICAgICBpZiAoIXRoaXMuaXNMb2FkZWQoKSkge1xuICAgICAgICAgICAgZm9yIChjb25zdCBpZCBvZiBpZHMpIHtcbiAgICAgICAgICAgICAgICBpZiAoIXRoaXMuaW1hZ2VzW2lkXSkge1xuICAgICAgICAgICAgICAgICAgICBoYXNBbGxEZXBlbmRlbmNpZXMgPSBmYWxzZTtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICAgICAgaWYgKHRoaXMuaXNMb2FkZWQoKSB8fCBoYXNBbGxEZXBlbmRlbmNpZXMpIHtcbiAgICAgICAgICAgIHRoaXMuX25vdGlmeShpZHMsIGNhbGxiYWNrKTtcbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgIHRoaXMucmVxdWVzdG9ycy5wdXNoKHtpZHMsIGNhbGxiYWNrfSk7XG4gICAgICAgIH1cbiAgICB9XG5cbiAgICBfbm90aWZ5KGlkczogQXJyYXk8c3RyaW5nPiwgY2FsbGJhY2s6IENhbGxiYWNrPHtbc3RyaW5nXTogU3R5bGVJbWFnZX0+KSB7XG4gICAgICAgIGNvbnN0IHJlc3BvbnNlID0ge307XG5cbiAgICAgICAgZm9yIChjb25zdCBpZCBvZiBpZHMpIHtcbiAgICAgICAgICAgIGNvbnN0IGltYWdlID0gdGhpcy5pbWFnZXNbaWRdO1xuICAgICAgICAgICAgaWYgKGltYWdlKSB7XG4gICAgICAgICAgICAgICAgLy8gQ2xvbmUgdGhlIGltYWdlIHNvIHRoYXQgb3VyIG93biBjb3B5IG9mIGl0cyBBcnJheUJ1ZmZlciBkb2Vzbid0IGdldCB0cmFuc2ZlcnJlZC5cbiAgICAgICAgICAgICAgICByZXNwb25zZVtpZF0gPSB7XG4gICAgICAgICAgICAgICAgICAgIGRhdGE6IGltYWdlLmRhdGEuY2xvbmUoKSxcbiAgICAgICAgICAgICAgICAgICAgcGl4ZWxSYXRpbzogaW1hZ2UucGl4ZWxSYXRpbyxcbiAgICAgICAgICAgICAgICAgICAgc2RmOiBpbWFnZS5zZGZcbiAgICAgICAgICAgICAgICB9O1xuICAgICAgICAgICAgfVxuICAgICAgICB9XG5cbiAgICAgICAgY2FsbGJhY2sobnVsbCwgcmVzcG9uc2UpO1xuICAgIH1cblxuICAgIC8vIFBhdHRlcm4gc3R1ZmZcblxuICAgIGdldFBpeGVsU2l6ZSgpIHtcbiAgICAgICAgY29uc3Qge3dpZHRoLCBoZWlnaHR9ID0gdGhpcy5hdGxhc0ltYWdlO1xuICAgICAgICByZXR1cm4ge3dpZHRoLCBoZWlnaHR9O1xuICAgIH1cblxuICAgIGdldFBhdHRlcm4oaWQ6IHN0cmluZyk6ID9JbWFnZVBvc2l0aW9uIHtcbiAgICAgICAgY29uc3QgcGF0dGVybiA9IHRoaXMucGF0dGVybnNbaWRdO1xuICAgICAgICBpZiAocGF0dGVybikge1xuICAgICAgICAgICAgcmV0dXJuIHBhdHRlcm4ucG9zaXRpb247XG4gICAgICAgIH1cblxuICAgICAgICBjb25zdCBpbWFnZSA9IHRoaXMuZ2V0SW1hZ2UoaWQpO1xuICAgICAgICBpZiAoIWltYWdlKSB7XG4gICAgICAgICAgICByZXR1cm4gbnVsbDtcbiAgICAgICAgfVxuXG4gICAgICAgIGNvbnN0IHcgPSBpbWFnZS5kYXRhLndpZHRoICsgcGFkZGluZyAqIDI7XG4gICAgICAgIGNvbnN0IGggPSBpbWFnZS5kYXRhLmhlaWdodCArIHBhZGRpbmcgKiAyO1xuICAgICAgICBjb25zdCBiaW4gPSB7dywgaCwgeDogMCwgeTogMH07XG4gICAgICAgIGNvbnN0IHBvc2l0aW9uID0gbmV3IEltYWdlUG9zaXRpb24oYmluLCBpbWFnZSk7XG4gICAgICAgIHRoaXMucGF0dGVybnNbaWRdID0ge2JpbiwgcG9zaXRpb259O1xuICAgICAgICB0aGlzLl91cGRhdGVQYXR0ZXJuQXRsYXMoKTtcblxuICAgICAgICByZXR1cm4gcG9zaXRpb247XG4gICAgfVxuXG4gICAgYmluZChjb250ZXh0OiBDb250ZXh0KSB7XG4gICAgICAgIGNvbnN0IGdsID0gY29udGV4dC5nbDtcbiAgICAgICAgaWYgKCF0aGlzLmF0bGFzVGV4dHVyZSkge1xuICAgICAgICAgICAgdGhpcy5hdGxhc1RleHR1cmUgPSBuZXcgVGV4dHVyZShjb250ZXh0LCB0aGlzLmF0bGFzSW1hZ2UsIGdsLlJHQkEpO1xuICAgICAgICB9IGVsc2UgaWYgKHRoaXMuZGlydHkpIHtcbiAgICAgICAgICAgIHRoaXMuYXRsYXNUZXh0dXJlLnVwZGF0ZSh0aGlzLmF0bGFzSW1hZ2UpO1xuICAgICAgICAgICAgdGhpcy5kaXJ0eSA9IGZhbHNlO1xuICAgICAgICB9XG5cbiAgICAgICAgdGhpcy5hdGxhc1RleHR1cmUuYmluZChnbC5MSU5FQVIsIGdsLkNMQU1QX1RPX0VER0UpO1xuICAgIH1cblxuICAgIF91cGRhdGVQYXR0ZXJuQXRsYXMoKSB7XG4gICAgICAgIGNvbnN0IGJpbnMgPSBbXTtcbiAgICAgICAgZm9yIChjb25zdCBpZCBpbiB0aGlzLnBhdHRlcm5zKSB7XG4gICAgICAgICAgICBiaW5zLnB1c2godGhpcy5wYXR0ZXJuc1tpZF0uYmluKTtcbiAgICAgICAgfVxuXG4gICAgICAgIGNvbnN0IHt3LCBofSA9IHBvdHBhY2soYmlucyk7XG5cbiAgICAgICAgY29uc3QgZHN0ID0gdGhpcy5hdGxhc0ltYWdlO1xuICAgICAgICBkc3QucmVzaXplKHt3aWR0aDogdyB8fCAxLCBoZWlnaHQ6IGggfHwgMX0pO1xuXG4gICAgICAgIGZvciAoY29uc3QgaWQgaW4gdGhpcy5wYXR0ZXJucykge1xuICAgICAgICAgICAgY29uc3Qge2Jpbn0gPSB0aGlzLnBhdHRlcm5zW2lkXTtcbiAgICAgICAgICAgIGNvbnN0IHggPSBiaW4ueCArIHBhZGRpbmc7XG4gICAgICAgICAgICBjb25zdCB5ID0gYmluLnkgKyBwYWRkaW5nO1xuICAgICAgICAgICAgY29uc3Qgc3JjID0gdGhpcy5pbWFnZXNbaWRdLmRhdGE7XG4gICAgICAgICAgICBjb25zdCB3ID0gc3JjLndpZHRoO1xuICAgICAgICAgICAgY29uc3QgaCA9IHNyYy5oZWlnaHQ7XG5cbiAgICAgICAgICAgIFJHQkFJbWFnZS5jb3B5KHNyYywgZHN0LCB7IHg6IDAsIHk6IDAgfSwgeyB4LCB5IH0sIHsgd2lkdGg6IHcsIGhlaWdodDogaCB9KTtcblxuICAgICAgICAgICAgLy8gQWRkIDEgcGl4ZWwgd3JhcHBlZCBwYWRkaW5nIG9uIGVhY2ggc2lkZSBvZiB0aGUgaW1hZ2UuXG4gICAgICAgICAgICBSR0JBSW1hZ2UuY29weShzcmMsIGRzdCwgeyB4OiAwLCB5OiBoIC0gMSB9LCB7IHg6IHgsIHk6IHkgLSAxIH0sIHsgd2lkdGg6IHcsIGhlaWdodDogMSB9KTsgLy8gVFxuICAgICAgICAgICAgUkdCQUltYWdlLmNvcHkoc3JjLCBkc3QsIHsgeDogMCwgeTogICAgIDAgfSwgeyB4OiB4LCB5OiB5ICsgaCB9LCB7IHdpZHRoOiB3LCBoZWlnaHQ6IDEgfSk7IC8vIEJcbiAgICAgICAgICAgIFJHQkFJbWFnZS5jb3B5KHNyYywgZHN0LCB7IHg6IHcgLSAxLCB5OiAwIH0sIHsgeDogeCAtIDEsIHk6IHkgfSwgeyB3aWR0aDogMSwgaGVpZ2h0OiBoIH0pOyAvLyBMXG4gICAgICAgICAgICBSR0JBSW1hZ2UuY29weShzcmMsIGRzdCwgeyB4OiAwLCAgICAgeTogMCB9LCB7IHg6IHggKyB3LCB5OiB5IH0sIHsgd2lkdGg6IDEsIGhlaWdodDogaCB9KTsgLy8gUlxuICAgICAgICB9XG5cbiAgICAgICAgdGhpcy5kaXJ0eSA9IHRydWU7XG4gICAgfVxufVxuXG5leHBvcnQgZGVmYXVsdCBJbWFnZU1hbmFnZXI7XG4iLCIndXNlIHN0cmljdCc7XG5cbm1vZHVsZS5leHBvcnRzID0gVGlueVNERjtcblxudmFyIElORiA9IDFlMjA7XG5cbmZ1bmN0aW9uIFRpbnlTREYoZm9udFNpemUsIGJ1ZmZlciwgcmFkaXVzLCBjdXRvZmYsIGZvbnRGYW1pbHksIGZvbnRXZWlnaHQpIHtcbiAgICB0aGlzLmZvbnRTaXplID0gZm9udFNpemUgfHwgMjQ7XG4gICAgdGhpcy5idWZmZXIgPSBidWZmZXIgPT09IHVuZGVmaW5lZCA/IDMgOiBidWZmZXI7XG4gICAgdGhpcy5jdXRvZmYgPSBjdXRvZmYgfHwgMC4yNTtcbiAgICB0aGlzLmZvbnRGYW1pbHkgPSBmb250RmFtaWx5IHx8ICdzYW5zLXNlcmlmJztcbiAgICB0aGlzLmZvbnRXZWlnaHQgPSBmb250V2VpZ2h0IHx8ICdub3JtYWwnO1xuICAgIHRoaXMucmFkaXVzID0gcmFkaXVzIHx8IDg7XG4gICAgdmFyIHNpemUgPSB0aGlzLnNpemUgPSB0aGlzLmZvbnRTaXplICsgdGhpcy5idWZmZXIgKiAyO1xuXG4gICAgdGhpcy5jYW52YXMgPSBkb2N1bWVudC5jcmVhdGVFbGVtZW50KCdjYW52YXMnKTtcbiAgICB0aGlzLmNhbnZhcy53aWR0aCA9IHRoaXMuY2FudmFzLmhlaWdodCA9IHNpemU7XG5cbiAgICB0aGlzLmN0eCA9IHRoaXMuY2FudmFzLmdldENvbnRleHQoJzJkJyk7XG4gICAgdGhpcy5jdHguZm9udCA9IHRoaXMuZm9udFdlaWdodCArICcgJyArIHRoaXMuZm9udFNpemUgKyAncHggJyArIHRoaXMuZm9udEZhbWlseTtcbiAgICB0aGlzLmN0eC50ZXh0QmFzZWxpbmUgPSAnbWlkZGxlJztcbiAgICB0aGlzLmN0eC5maWxsU3R5bGUgPSAnYmxhY2snO1xuXG4gICAgLy8gdGVtcG9yYXJ5IGFycmF5cyBmb3IgdGhlIGRpc3RhbmNlIHRyYW5zZm9ybVxuICAgIHRoaXMuZ3JpZE91dGVyID0gbmV3IEZsb2F0NjRBcnJheShzaXplICogc2l6ZSk7XG4gICAgdGhpcy5ncmlkSW5uZXIgPSBuZXcgRmxvYXQ2NEFycmF5KHNpemUgKiBzaXplKTtcbiAgICB0aGlzLmYgPSBuZXcgRmxvYXQ2NEFycmF5KHNpemUpO1xuICAgIHRoaXMuZCA9IG5ldyBGbG9hdDY0QXJyYXkoc2l6ZSk7XG4gICAgdGhpcy56ID0gbmV3IEZsb2F0NjRBcnJheShzaXplICsgMSk7XG4gICAgdGhpcy52ID0gbmV3IEludDE2QXJyYXkoc2l6ZSk7XG5cbiAgICAvLyBoYWNrIGFyb3VuZCBodHRwczovL2J1Z3ppbGxhLm1vemlsbGEub3JnL3Nob3dfYnVnLmNnaT9pZD03Mzc4NTJcbiAgICB0aGlzLm1pZGRsZSA9IE1hdGgucm91bmQoKHNpemUgLyAyKSAqIChuYXZpZ2F0b3IudXNlckFnZW50LmluZGV4T2YoJ0dlY2tvLycpID49IDAgPyAxLjIgOiAxKSk7XG59XG5cblRpbnlTREYucHJvdG90eXBlLmRyYXcgPSBmdW5jdGlvbiAoY2hhcikge1xuICAgIHRoaXMuY3R4LmNsZWFyUmVjdCgwLCAwLCB0aGlzLnNpemUsIHRoaXMuc2l6ZSk7XG4gICAgdGhpcy5jdHguZmlsbFRleHQoY2hhciwgdGhpcy5idWZmZXIsIHRoaXMubWlkZGxlKTtcblxuICAgIHZhciBpbWdEYXRhID0gdGhpcy5jdHguZ2V0SW1hZ2VEYXRhKDAsIDAsIHRoaXMuc2l6ZSwgdGhpcy5zaXplKTtcbiAgICB2YXIgYWxwaGFDaGFubmVsID0gbmV3IFVpbnQ4Q2xhbXBlZEFycmF5KHRoaXMuc2l6ZSAqIHRoaXMuc2l6ZSk7XG5cbiAgICBmb3IgKHZhciBpID0gMDsgaSA8IHRoaXMuc2l6ZSAqIHRoaXMuc2l6ZTsgaSsrKSB7XG4gICAgICAgIHZhciBhID0gaW1nRGF0YS5kYXRhW2kgKiA0ICsgM10gLyAyNTU7IC8vIGFscGhhIHZhbHVlXG4gICAgICAgIHRoaXMuZ3JpZE91dGVyW2ldID0gYSA9PT0gMSA/IDAgOiBhID09PSAwID8gSU5GIDogTWF0aC5wb3coTWF0aC5tYXgoMCwgMC41IC0gYSksIDIpO1xuICAgICAgICB0aGlzLmdyaWRJbm5lcltpXSA9IGEgPT09IDEgPyBJTkYgOiBhID09PSAwID8gMCA6IE1hdGgucG93KE1hdGgubWF4KDAsIGEgLSAwLjUpLCAyKTtcbiAgICB9XG5cbiAgICBlZHQodGhpcy5ncmlkT3V0ZXIsIHRoaXMuc2l6ZSwgdGhpcy5zaXplLCB0aGlzLmYsIHRoaXMuZCwgdGhpcy52LCB0aGlzLnopO1xuICAgIGVkdCh0aGlzLmdyaWRJbm5lciwgdGhpcy5zaXplLCB0aGlzLnNpemUsIHRoaXMuZiwgdGhpcy5kLCB0aGlzLnYsIHRoaXMueik7XG5cbiAgICBmb3IgKGkgPSAwOyBpIDwgdGhpcy5zaXplICogdGhpcy5zaXplOyBpKyspIHtcbiAgICAgICAgdmFyIGQgPSB0aGlzLmdyaWRPdXRlcltpXSAtIHRoaXMuZ3JpZElubmVyW2ldO1xuICAgICAgICBhbHBoYUNoYW5uZWxbaV0gPSBNYXRoLm1heCgwLCBNYXRoLm1pbigyNTUsIE1hdGgucm91bmQoMjU1IC0gMjU1ICogKGQgLyB0aGlzLnJhZGl1cyArIHRoaXMuY3V0b2ZmKSkpKTtcbiAgICB9XG5cbiAgICByZXR1cm4gYWxwaGFDaGFubmVsO1xufTtcblxuLy8gMkQgRXVjbGlkZWFuIGRpc3RhbmNlIHRyYW5zZm9ybSBieSBGZWx6ZW5zendhbGIgJiBIdXR0ZW5sb2NoZXIgaHR0cHM6Ly9jcy5icm93bi5lZHUvfnBmZi9kdC9cbmZ1bmN0aW9uIGVkdChkYXRhLCB3aWR0aCwgaGVpZ2h0LCBmLCBkLCB2LCB6KSB7XG4gICAgZm9yICh2YXIgeCA9IDA7IHggPCB3aWR0aDsgeCsrKSB7XG4gICAgICAgIGZvciAodmFyIHkgPSAwOyB5IDwgaGVpZ2h0OyB5KyspIHtcbiAgICAgICAgICAgIGZbeV0gPSBkYXRhW3kgKiB3aWR0aCArIHhdO1xuICAgICAgICB9XG4gICAgICAgIGVkdDFkKGYsIGQsIHYsIHosIGhlaWdodCk7XG4gICAgICAgIGZvciAoeSA9IDA7IHkgPCBoZWlnaHQ7IHkrKykge1xuICAgICAgICAgICAgZGF0YVt5ICogd2lkdGggKyB4XSA9IGRbeV07XG4gICAgICAgIH1cbiAgICB9XG4gICAgZm9yICh5ID0gMDsgeSA8IGhlaWdodDsgeSsrKSB7XG4gICAgICAgIGZvciAoeCA9IDA7IHggPCB3aWR0aDsgeCsrKSB7XG4gICAgICAgICAgICBmW3hdID0gZGF0YVt5ICogd2lkdGggKyB4XTtcbiAgICAgICAgfVxuICAgICAgICBlZHQxZChmLCBkLCB2LCB6LCB3aWR0aCk7XG4gICAgICAgIGZvciAoeCA9IDA7IHggPCB3aWR0aDsgeCsrKSB7XG4gICAgICAgICAgICBkYXRhW3kgKiB3aWR0aCArIHhdID0gTWF0aC5zcXJ0KGRbeF0pO1xuICAgICAgICB9XG4gICAgfVxufVxuXG4vLyAxRCBzcXVhcmVkIGRpc3RhbmNlIHRyYW5zZm9ybVxuZnVuY3Rpb24gZWR0MWQoZiwgZCwgdiwgeiwgbikge1xuICAgIHZbMF0gPSAwO1xuICAgIHpbMF0gPSAtSU5GO1xuICAgIHpbMV0gPSArSU5GO1xuXG4gICAgZm9yICh2YXIgcSA9IDEsIGsgPSAwOyBxIDwgbjsgcSsrKSB7XG4gICAgICAgIHZhciBzID0gKChmW3FdICsgcSAqIHEpIC0gKGZbdltrXV0gKyB2W2tdICogdltrXSkpIC8gKDIgKiBxIC0gMiAqIHZba10pO1xuICAgICAgICB3aGlsZSAocyA8PSB6W2tdKSB7XG4gICAgICAgICAgICBrLS07XG4gICAgICAgICAgICBzID0gKChmW3FdICsgcSAqIHEpIC0gKGZbdltrXV0gKyB2W2tdICogdltrXSkpIC8gKDIgKiBxIC0gMiAqIHZba10pO1xuICAgICAgICB9XG4gICAgICAgIGsrKztcbiAgICAgICAgdltrXSA9IHE7XG4gICAgICAgIHpba10gPSBzO1xuICAgICAgICB6W2sgKyAxXSA9ICtJTkY7XG4gICAgfVxuXG4gICAgZm9yIChxID0gMCwgayA9IDA7IHEgPCBuOyBxKyspIHtcbiAgICAgICAgd2hpbGUgKHpbayArIDFdIDwgcSkgaysrO1xuICAgICAgICBkW3FdID0gKHEgLSB2W2tdKSAqIChxIC0gdltrXSkgKyBmW3Zba11dO1xuICAgIH1cbn1cbiIsIi8vIEBmbG93XG5cbmltcG9ydCBsb2FkR2x5cGhSYW5nZSBmcm9tICcuLi9zdHlsZS9sb2FkX2dseXBoX3JhbmdlJztcblxuaW1wb3J0IFRpbnlTREYgZnJvbSAnQG1hcGJveC90aW55LXNkZic7XG5pbXBvcnQgaXNDaGFyIGZyb20gJy4uL3V0aWwvaXNfY2hhcl9pbl91bmljb2RlX2Jsb2NrJztcbmltcG9ydCB7IGFzeW5jQWxsIH0gZnJvbSAnLi4vdXRpbC91dGlsJztcbmltcG9ydCB7IEFscGhhSW1hZ2UgfSBmcm9tICcuLi91dGlsL2ltYWdlJztcblxuaW1wb3J0IHR5cGUge1N0eWxlR2x5cGh9IGZyb20gJy4uL3N0eWxlL3N0eWxlX2dseXBoJztcbmltcG9ydCB0eXBlIHtSZXF1ZXN0VHJhbnNmb3JtRnVuY3Rpb259IGZyb20gJy4uL3VpL21hcCc7XG5pbXBvcnQgdHlwZSB7Q2FsbGJhY2t9IGZyb20gJy4uL3R5cGVzL2NhbGxiYWNrJztcblxudHlwZSBFbnRyeSA9IHtcbiAgICAvLyBudWxsIG1lYW5zIHdlJ3ZlIHJlcXVlc3RlZCB0aGUgcmFuZ2UsIGJ1dCB0aGUgZ2x5cGggd2Fzbid0IGluY2x1ZGVkIGluIHRoZSByZXN1bHQuXG4gICAgZ2x5cGhzOiB7W2lkOiBudW1iZXJdOiBTdHlsZUdseXBoIHwgbnVsbH0sXG4gICAgcmVxdWVzdHM6IHtbcmFuZ2U6IG51bWJlcl06IEFycmF5PENhbGxiYWNrPHtbbnVtYmVyXTogU3R5bGVHbHlwaCB8IG51bGx9Pj59LFxuICAgIHRpbnlTREY/OiBUaW55U0RGXG59O1xuXG5jbGFzcyBHbHlwaE1hbmFnZXIge1xuICAgIHJlcXVlc3RUcmFuc2Zvcm06IFJlcXVlc3RUcmFuc2Zvcm1GdW5jdGlvbjtcbiAgICBsb2NhbElkZW9ncmFwaEZvbnRGYW1pbHk6ID9zdHJpbmc7XG4gICAgZW50cmllczoge1tzdHJpbmddOiBFbnRyeX07XG4gICAgdXJsOiA/c3RyaW5nO1xuXG4gICAgLy8gZXhwb3NlZCBhcyBzdGF0aWNzIHRvIGVuYWJsZSBzdHViYmluZyBpbiB1bml0IHRlc3RzXG4gICAgc3RhdGljIGxvYWRHbHlwaFJhbmdlOiB0eXBlb2YgbG9hZEdseXBoUmFuZ2U7XG4gICAgc3RhdGljIFRpbnlTREY6IENsYXNzPFRpbnlTREY+O1xuXG4gICAgY29uc3RydWN0b3IocmVxdWVzdFRyYW5zZm9ybTogUmVxdWVzdFRyYW5zZm9ybUZ1bmN0aW9uLCBsb2NhbElkZW9ncmFwaEZvbnRGYW1pbHk6ID9zdHJpbmcpIHtcbiAgICAgICAgdGhpcy5yZXF1ZXN0VHJhbnNmb3JtID0gcmVxdWVzdFRyYW5zZm9ybTtcbiAgICAgICAgdGhpcy5sb2NhbElkZW9ncmFwaEZvbnRGYW1pbHkgPSBsb2NhbElkZW9ncmFwaEZvbnRGYW1pbHk7XG4gICAgICAgIHRoaXMuZW50cmllcyA9IHt9O1xuICAgIH1cblxuICAgIHNldFVSTCh1cmw6ID9zdHJpbmcpIHtcbiAgICAgICAgdGhpcy51cmwgPSB1cmw7XG4gICAgfVxuXG4gICAgZ2V0R2x5cGhzKGdseXBoczoge1tzdGFjazogc3RyaW5nXTogQXJyYXk8bnVtYmVyPn0sIGNhbGxiYWNrOiBDYWxsYmFjazx7W3N0YWNrOiBzdHJpbmddOiB7W2lkOiBudW1iZXJdOiA/U3R5bGVHbHlwaH19Pikge1xuICAgICAgICBjb25zdCBhbGwgPSBbXTtcblxuICAgICAgICBmb3IgKGNvbnN0IHN0YWNrIGluIGdseXBocykge1xuICAgICAgICAgICAgZm9yIChjb25zdCBpZCBvZiBnbHlwaHNbc3RhY2tdKSB7XG4gICAgICAgICAgICAgICAgYWxsLnB1c2goe3N0YWNrLCBpZH0pO1xuICAgICAgICAgICAgfVxuICAgICAgICB9XG5cbiAgICAgICAgYXN5bmNBbGwoYWxsLCAoe3N0YWNrLCBpZH0sIGNhbGxiYWNrOiBDYWxsYmFjazx7c3RhY2s6IHN0cmluZywgaWQ6IG51bWJlciwgZ2x5cGg6ID9TdHlsZUdseXBofT4pID0+IHtcbiAgICAgICAgICAgIGxldCBlbnRyeSA9IHRoaXMuZW50cmllc1tzdGFja107XG4gICAgICAgICAgICBpZiAoIWVudHJ5KSB7XG4gICAgICAgICAgICAgICAgZW50cnkgPSB0aGlzLmVudHJpZXNbc3RhY2tdID0ge1xuICAgICAgICAgICAgICAgICAgICBnbHlwaHM6IHt9LFxuICAgICAgICAgICAgICAgICAgICByZXF1ZXN0czoge31cbiAgICAgICAgICAgICAgICB9O1xuICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICBsZXQgZ2x5cGggPSBlbnRyeS5nbHlwaHNbaWRdO1xuICAgICAgICAgICAgaWYgKGdseXBoICE9PSB1bmRlZmluZWQpIHtcbiAgICAgICAgICAgICAgICBjYWxsYmFjayhudWxsLCB7c3RhY2ssIGlkLCBnbHlwaH0pO1xuICAgICAgICAgICAgICAgIHJldHVybjtcbiAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgZ2x5cGggPSB0aGlzLl90aW55U0RGKGVudHJ5LCBzdGFjaywgaWQpO1xuICAgICAgICAgICAgaWYgKGdseXBoKSB7XG4gICAgICAgICAgICAgICAgY2FsbGJhY2sobnVsbCwge3N0YWNrLCBpZCwgZ2x5cGh9KTtcbiAgICAgICAgICAgICAgICByZXR1cm47XG4gICAgICAgICAgICB9XG5cbiAgICAgICAgICAgIGNvbnN0IHJhbmdlID0gTWF0aC5mbG9vcihpZCAvIDI1Nik7XG4gICAgICAgICAgICBpZiAocmFuZ2UgKiAyNTYgPiA2NTUzNSkge1xuICAgICAgICAgICAgICAgIGNhbGxiYWNrKG5ldyBFcnJvcignZ2x5cGhzID4gNjU1MzUgbm90IHN1cHBvcnRlZCcpKTtcbiAgICAgICAgICAgICAgICByZXR1cm47XG4gICAgICAgICAgICB9XG5cbiAgICAgICAgICAgIGxldCByZXF1ZXN0cyA9IGVudHJ5LnJlcXVlc3RzW3JhbmdlXTtcbiAgICAgICAgICAgIGlmICghcmVxdWVzdHMpIHtcbiAgICAgICAgICAgICAgICByZXF1ZXN0cyA9IGVudHJ5LnJlcXVlc3RzW3JhbmdlXSA9IFtdO1xuICAgICAgICAgICAgICAgIEdseXBoTWFuYWdlci5sb2FkR2x5cGhSYW5nZShzdGFjaywgcmFuZ2UsICh0aGlzLnVybDogYW55KSwgdGhpcy5yZXF1ZXN0VHJhbnNmb3JtLFxuICAgICAgICAgICAgICAgICAgICAoZXJyLCByZXNwb25zZTogP3tbbnVtYmVyXTogU3R5bGVHbHlwaCB8IG51bGx9KSA9PiB7XG4gICAgICAgICAgICAgICAgICAgICAgICBpZiAocmVzcG9uc2UpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBmb3IgKGNvbnN0IGlkIGluIHJlc3BvbnNlKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGVudHJ5LmdseXBoc1sraWRdID0gcmVzcG9uc2VbK2lkXTtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgICAgICBmb3IgKGNvbnN0IGNiIG9mIHJlcXVlc3RzKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgY2IoZXJyLCByZXNwb25zZSk7XG4gICAgICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgICAgICBkZWxldGUgZW50cnkucmVxdWVzdHNbcmFuZ2VdO1xuICAgICAgICAgICAgICAgICAgICB9KTtcbiAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgcmVxdWVzdHMucHVzaCgoZXJyLCByZXN1bHQ6ID97W251bWJlcl06IFN0eWxlR2x5cGggfCBudWxsfSkgPT4ge1xuICAgICAgICAgICAgICAgIGlmIChlcnIpIHtcbiAgICAgICAgICAgICAgICAgICAgY2FsbGJhY2soZXJyKTtcbiAgICAgICAgICAgICAgICB9IGVsc2UgaWYgKHJlc3VsdCkge1xuICAgICAgICAgICAgICAgICAgICBjYWxsYmFjayhudWxsLCB7c3RhY2ssIGlkLCBnbHlwaDogcmVzdWx0W2lkXSB8fCBudWxsfSk7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfSk7XG4gICAgICAgIH0sIChlcnIsIGdseXBoczogP0FycmF5PHtzdGFjazogc3RyaW5nLCBpZDogbnVtYmVyLCBnbHlwaDogP1N0eWxlR2x5cGh9PikgPT4ge1xuICAgICAgICAgICAgaWYgKGVycikge1xuICAgICAgICAgICAgICAgIGNhbGxiYWNrKGVycik7XG4gICAgICAgICAgICB9IGVsc2UgaWYgKGdseXBocykge1xuICAgICAgICAgICAgICAgIGNvbnN0IHJlc3VsdCA9IHt9O1xuXG4gICAgICAgICAgICAgICAgZm9yIChjb25zdCB7c3RhY2ssIGlkLCBnbHlwaH0gb2YgZ2x5cGhzKSB7XG4gICAgICAgICAgICAgICAgICAgIC8vIENsb25lIHRoZSBnbHlwaCBzbyB0aGF0IG91ciBvd24gY29weSBvZiBpdHMgQXJyYXlCdWZmZXIgZG9lc24ndCBnZXQgdHJhbnNmZXJyZWQuXG4gICAgICAgICAgICAgICAgICAgIChyZXN1bHRbc3RhY2tdIHx8IChyZXN1bHRbc3RhY2tdID0ge30pKVtpZF0gPSBnbHlwaCAmJiB7XG4gICAgICAgICAgICAgICAgICAgICAgICBpZDogZ2x5cGguaWQsXG4gICAgICAgICAgICAgICAgICAgICAgICBiaXRtYXA6IGdseXBoLmJpdG1hcC5jbG9uZSgpLFxuICAgICAgICAgICAgICAgICAgICAgICAgbWV0cmljczogZ2x5cGgubWV0cmljc1xuICAgICAgICAgICAgICAgICAgICB9O1xuICAgICAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgICAgIGNhbGxiYWNrKG51bGwsIHJlc3VsdCk7XG4gICAgICAgICAgICB9XG4gICAgICAgIH0pO1xuICAgIH1cblxuICAgIF90aW55U0RGKGVudHJ5OiBFbnRyeSwgc3RhY2s6IHN0cmluZywgaWQ6IG51bWJlcik6ID9TdHlsZUdseXBoIHtcbiAgICAgICAgY29uc3QgZmFtaWx5ID0gdGhpcy5sb2NhbElkZW9ncmFwaEZvbnRGYW1pbHk7XG4gICAgICAgIGlmICghZmFtaWx5KSB7XG4gICAgICAgICAgICByZXR1cm47XG4gICAgICAgIH1cblxuICAgICAgICBpZiAoIWlzQ2hhclsnQ0pLIFVuaWZpZWQgSWRlb2dyYXBocyddKGlkKSAmJiAhaXNDaGFyWydIYW5ndWwgU3lsbGFibGVzJ10oaWQpKSB7IC8vIGVzbGludC1kaXNhYmxlLWxpbmUgbmV3LWNhcFxuICAgICAgICAgICAgcmV0dXJuO1xuICAgICAgICB9XG5cbiAgICAgICAgbGV0IHRpbnlTREYgPSBlbnRyeS50aW55U0RGO1xuICAgICAgICBpZiAoIXRpbnlTREYpIHtcbiAgICAgICAgICAgIGxldCBmb250V2VpZ2h0ID0gJzQwMCc7XG4gICAgICAgICAgICBpZiAoL2JvbGQvaS50ZXN0KHN0YWNrKSkge1xuICAgICAgICAgICAgICAgIGZvbnRXZWlnaHQgPSAnOTAwJztcbiAgICAgICAgICAgIH0gZWxzZSBpZiAoL21lZGl1bS9pLnRlc3Qoc3RhY2spKSB7XG4gICAgICAgICAgICAgICAgZm9udFdlaWdodCA9ICc1MDAnO1xuICAgICAgICAgICAgfSBlbHNlIGlmICgvbGlnaHQvaS50ZXN0KHN0YWNrKSkge1xuICAgICAgICAgICAgICAgIGZvbnRXZWlnaHQgPSAnMjAwJztcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIHRpbnlTREYgPSBlbnRyeS50aW55U0RGID0gbmV3IEdseXBoTWFuYWdlci5UaW55U0RGKDI0LCAzLCA4LCAuMjUsIGZhbWlseSwgZm9udFdlaWdodCk7XG4gICAgICAgIH1cblxuICAgICAgICByZXR1cm4ge1xuICAgICAgICAgICAgaWQsXG4gICAgICAgICAgICBiaXRtYXA6IG5ldyBBbHBoYUltYWdlKHt3aWR0aDogMzAsIGhlaWdodDogMzB9LCB0aW55U0RGLmRyYXcoU3RyaW5nLmZyb21DaGFyQ29kZShpZCkpKSxcbiAgICAgICAgICAgIG1ldHJpY3M6IHtcbiAgICAgICAgICAgICAgICB3aWR0aDogMjQsXG4gICAgICAgICAgICAgICAgaGVpZ2h0OiAyNCxcbiAgICAgICAgICAgICAgICBsZWZ0OiAwLFxuICAgICAgICAgICAgICAgIHRvcDogLTgsXG4gICAgICAgICAgICAgICAgYWR2YW5jZTogMjRcbiAgICAgICAgICAgIH1cbiAgICAgICAgfTtcbiAgICB9XG59XG5cbkdseXBoTWFuYWdlci5sb2FkR2x5cGhSYW5nZSA9IGxvYWRHbHlwaFJhbmdlO1xuR2x5cGhNYW5hZ2VyLlRpbnlTREYgPSBUaW55U0RGO1xuXG5leHBvcnQgZGVmYXVsdCBHbHlwaE1hbmFnZXI7XG4iLCIvLyBAZmxvd1xuXG5pbXBvcnQgc3R5bGVTcGVjIGZyb20gJy4uL3N0eWxlLXNwZWMvcmVmZXJlbmNlL2xhdGVzdCc7XG5cbmltcG9ydCB7IGVuZHNXaXRoLCBleHRlbmQsIHNwaGVyaWNhbFRvQ2FydGVzaWFuIH0gZnJvbSAnLi4vdXRpbC91dGlsJztcbmltcG9ydCB7IEV2ZW50ZWQgfSBmcm9tICcuLi91dGlsL2V2ZW50ZWQnO1xuaW1wb3J0IHtcbiAgICB2YWxpZGF0ZVN0eWxlLFxuICAgIHZhbGlkYXRlTGlnaHQsXG4gICAgZW1pdFZhbGlkYXRpb25FcnJvcnNcbn0gZnJvbSAnLi92YWxpZGF0ZV9zdHlsZSc7XG5pbXBvcnQgQ29sb3IgZnJvbSAnLi4vc3R5bGUtc3BlYy91dGlsL2NvbG9yJztcbmltcG9ydCB7IG51bWJlciBhcyBpbnRlcnBvbGF0ZSB9IGZyb20gJy4uL3N0eWxlLXNwZWMvdXRpbC9pbnRlcnBvbGF0ZSc7XG5cbmltcG9ydCB0eXBlIHtTdHlsZVByb3BlcnR5U3BlY2lmaWNhdGlvbn0gZnJvbSAnLi4vc3R5bGUtc3BlYy9zdHlsZS1zcGVjJztcbmltcG9ydCB0eXBlIEV2YWx1YXRpb25QYXJhbWV0ZXJzIGZyb20gJy4vZXZhbHVhdGlvbl9wYXJhbWV0ZXJzJztcblxuaW1wb3J0IHsgUHJvcGVydGllcywgVHJhbnNpdGlvbmFibGUsIFRyYW5zaXRpb25pbmcsIFBvc3NpYmx5RXZhbHVhdGVkLCBEYXRhQ29uc3RhbnRQcm9wZXJ0eSB9IGZyb20gJy4vcHJvcGVydGllcyc7XG5cbmltcG9ydCB0eXBlIHtcbiAgICBQcm9wZXJ0eSxcbiAgICBQcm9wZXJ0eVZhbHVlLFxuICAgIFRyYW5zaXRpb25QYXJhbWV0ZXJzXG59IGZyb20gJy4vcHJvcGVydGllcyc7XG5cbmltcG9ydCB0eXBlIHtMaWdodFNwZWNpZmljYXRpb259IGZyb20gJy4uL3N0eWxlLXNwZWMvdHlwZXMnO1xuXG50eXBlIExpZ2h0UG9zaXRpb24gPSB7XG4gICAgeDogbnVtYmVyLFxuICAgIHk6IG51bWJlcixcbiAgICB6OiBudW1iZXJcbn07XG5cbmNsYXNzIExpZ2h0UG9zaXRpb25Qcm9wZXJ0eSBpbXBsZW1lbnRzIFByb3BlcnR5PFtudW1iZXIsIG51bWJlciwgbnVtYmVyXSwgTGlnaHRQb3NpdGlvbj4ge1xuICAgIHNwZWNpZmljYXRpb246IFN0eWxlUHJvcGVydHlTcGVjaWZpY2F0aW9uO1xuXG4gICAgY29uc3RydWN0b3IoKSB7XG4gICAgICAgIHRoaXMuc3BlY2lmaWNhdGlvbiA9IHN0eWxlU3BlYy5saWdodC5wb3NpdGlvbjtcbiAgICB9XG5cbiAgICBwb3NzaWJseUV2YWx1YXRlKHZhbHVlOiBQcm9wZXJ0eVZhbHVlPFtudW1iZXIsIG51bWJlciwgbnVtYmVyXSwgTGlnaHRQb3NpdGlvbj4sIHBhcmFtZXRlcnM6IEV2YWx1YXRpb25QYXJhbWV0ZXJzKTogTGlnaHRQb3NpdGlvbiB7XG4gICAgICAgIHJldHVybiBzcGhlcmljYWxUb0NhcnRlc2lhbih2YWx1ZS5leHByZXNzaW9uLmV2YWx1YXRlKHBhcmFtZXRlcnMpKTtcbiAgICB9XG5cbiAgICBpbnRlcnBvbGF0ZShhOiBMaWdodFBvc2l0aW9uLCBiOiBMaWdodFBvc2l0aW9uLCB0OiBudW1iZXIpOiBMaWdodFBvc2l0aW9uIHtcbiAgICAgICAgcmV0dXJuIHtcbiAgICAgICAgICAgIHg6IGludGVycG9sYXRlKGEueCwgYi54LCB0KSxcbiAgICAgICAgICAgIHk6IGludGVycG9sYXRlKGEueSwgYi55LCB0KSxcbiAgICAgICAgICAgIHo6IGludGVycG9sYXRlKGEueiwgYi56LCB0KSxcbiAgICAgICAgfTtcbiAgICB9XG59XG5cbnR5cGUgUHJvcHMgPSB7fFxuICAgIFwiYW5jaG9yXCI6IERhdGFDb25zdGFudFByb3BlcnR5PFwibWFwXCIgfCBcInZpZXdwb3J0XCI+LFxuICAgIFwicG9zaXRpb25cIjogTGlnaHRQb3NpdGlvblByb3BlcnR5LFxuICAgIFwiY29sb3JcIjogRGF0YUNvbnN0YW50UHJvcGVydHk8Q29sb3I+LFxuICAgIFwiaW50ZW5zaXR5XCI6IERhdGFDb25zdGFudFByb3BlcnR5PG51bWJlcj4sXG58fTtcblxuY29uc3QgcHJvcGVydGllczogUHJvcGVydGllczxQcm9wcz4gPSBuZXcgUHJvcGVydGllcyh7XG4gICAgXCJhbmNob3JcIjogbmV3IERhdGFDb25zdGFudFByb3BlcnR5KHN0eWxlU3BlYy5saWdodC5hbmNob3IpLFxuICAgIFwicG9zaXRpb25cIjogbmV3IExpZ2h0UG9zaXRpb25Qcm9wZXJ0eSgpLFxuICAgIFwiY29sb3JcIjogbmV3IERhdGFDb25zdGFudFByb3BlcnR5KHN0eWxlU3BlYy5saWdodC5jb2xvciksXG4gICAgXCJpbnRlbnNpdHlcIjogbmV3IERhdGFDb25zdGFudFByb3BlcnR5KHN0eWxlU3BlYy5saWdodC5pbnRlbnNpdHkpLFxufSk7XG5cbmNvbnN0IFRSQU5TSVRJT05fU1VGRklYID0gJy10cmFuc2l0aW9uJztcblxuLypcbiAqIFJlcHJlc2VudHMgdGhlIGxpZ2h0IHVzZWQgdG8gbGlnaHQgZXh0cnVkZWQgZmVhdHVyZXMuXG4gKi9cbmNsYXNzIExpZ2h0IGV4dGVuZHMgRXZlbnRlZCB7XG4gICAgX3RyYW5zaXRpb25hYmxlOiBUcmFuc2l0aW9uYWJsZTxQcm9wcz47XG4gICAgX3RyYW5zaXRpb25pbmc6IFRyYW5zaXRpb25pbmc8UHJvcHM+O1xuICAgIHByb3BlcnRpZXM6IFBvc3NpYmx5RXZhbHVhdGVkPFByb3BzPjtcblxuICAgIGNvbnN0cnVjdG9yKGxpZ2h0T3B0aW9ucz86IExpZ2h0U3BlY2lmaWNhdGlvbikge1xuICAgICAgICBzdXBlcigpO1xuICAgICAgICB0aGlzLl90cmFuc2l0aW9uYWJsZSA9IG5ldyBUcmFuc2l0aW9uYWJsZShwcm9wZXJ0aWVzKTtcbiAgICAgICAgdGhpcy5zZXRMaWdodChsaWdodE9wdGlvbnMpO1xuICAgICAgICB0aGlzLl90cmFuc2l0aW9uaW5nID0gdGhpcy5fdHJhbnNpdGlvbmFibGUudW50cmFuc2l0aW9uZWQoKTtcbiAgICB9XG5cbiAgICBnZXRMaWdodCgpIHtcbiAgICAgICAgcmV0dXJuIHRoaXMuX3RyYW5zaXRpb25hYmxlLnNlcmlhbGl6ZSgpO1xuICAgIH1cblxuICAgIHNldExpZ2h0KG9wdGlvbnM/OiBMaWdodFNwZWNpZmljYXRpb24pIHtcbiAgICAgICAgaWYgKHRoaXMuX3ZhbGlkYXRlKHZhbGlkYXRlTGlnaHQsIG9wdGlvbnMpKSB7XG4gICAgICAgICAgICByZXR1cm47XG4gICAgICAgIH1cblxuICAgICAgICBmb3IgKGNvbnN0IG5hbWUgaW4gb3B0aW9ucykge1xuICAgICAgICAgICAgY29uc3QgdmFsdWUgPSBvcHRpb25zW25hbWVdO1xuICAgICAgICAgICAgaWYgKGVuZHNXaXRoKG5hbWUsIFRSQU5TSVRJT05fU1VGRklYKSkge1xuICAgICAgICAgICAgICAgIHRoaXMuX3RyYW5zaXRpb25hYmxlLnNldFRyYW5zaXRpb24obmFtZS5zbGljZSgwLCAtVFJBTlNJVElPTl9TVUZGSVgubGVuZ3RoKSwgdmFsdWUpO1xuICAgICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgICAgICB0aGlzLl90cmFuc2l0aW9uYWJsZS5zZXRWYWx1ZShuYW1lLCB2YWx1ZSk7XG4gICAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICB9XG5cbiAgICB1cGRhdGVUcmFuc2l0aW9ucyhwYXJhbWV0ZXJzOiBUcmFuc2l0aW9uUGFyYW1ldGVycykge1xuICAgICAgICB0aGlzLl90cmFuc2l0aW9uaW5nID0gdGhpcy5fdHJhbnNpdGlvbmFibGUudHJhbnNpdGlvbmVkKHBhcmFtZXRlcnMsIHRoaXMuX3RyYW5zaXRpb25pbmcpO1xuICAgIH1cblxuICAgIGhhc1RyYW5zaXRpb24oKSB7XG4gICAgICAgIHJldHVybiB0aGlzLl90cmFuc2l0aW9uaW5nLmhhc1RyYW5zaXRpb24oKTtcbiAgICB9XG5cbiAgICByZWNhbGN1bGF0ZShwYXJhbWV0ZXJzOiBFdmFsdWF0aW9uUGFyYW1ldGVycykge1xuICAgICAgICB0aGlzLnByb3BlcnRpZXMgPSB0aGlzLl90cmFuc2l0aW9uaW5nLnBvc3NpYmx5RXZhbHVhdGUocGFyYW1ldGVycyk7XG4gICAgfVxuXG4gICAgX3ZhbGlkYXRlKHZhbGlkYXRlOiBGdW5jdGlvbiwgdmFsdWU6IG1peGVkKSB7XG4gICAgICAgIHJldHVybiBlbWl0VmFsaWRhdGlvbkVycm9ycyh0aGlzLCB2YWxpZGF0ZS5jYWxsKHZhbGlkYXRlU3R5bGUsIGV4dGVuZCh7XG4gICAgICAgICAgICB2YWx1ZTogdmFsdWUsXG4gICAgICAgICAgICAvLyBXb3JrYXJvdW5kIGZvciBodHRwczovL2dpdGh1Yi5jb20vbWFwYm94L21hcGJveC1nbC1qcy9pc3N1ZXMvMjQwN1xuICAgICAgICAgICAgc3R5bGU6IHtnbHlwaHM6IHRydWUsIHNwcml0ZTogdHJ1ZX0sXG4gICAgICAgICAgICBzdHlsZVNwZWM6IHN0eWxlU3BlY1xuICAgICAgICB9KSkpO1xuICAgIH1cbn1cblxuZXhwb3J0IGRlZmF1bHQgTGlnaHQ7XG4iLCIvLyBAZmxvd1xuXG5pbXBvcnQgeyB3YXJuT25jZSB9IGZyb20gJy4uL3V0aWwvdXRpbCc7XG5cbmltcG9ydCB0eXBlIENvbnRleHQgZnJvbSAnLi4vZ2wvY29udGV4dCc7XG5cbi8qKlxuICogQSBMaW5lQXRsYXMgbGV0cyB1cyByZXVzZSByZW5kZXJlZCBkYXNoZWQgbGluZXNcbiAqIGJ5IHdyaXRpbmcgbWFueSBvZiB0aGVtIHRvIGEgdGV4dHVyZSBhbmQgdGhlbiBmZXRjaGluZyB0aGVpciBwb3NpdGlvbnNcbiAqIHVzaW5nIC5nZXREYXNoLlxuICpcbiAqIEBwYXJhbSB7bnVtYmVyfSB3aWR0aFxuICogQHBhcmFtIHtudW1iZXJ9IGhlaWdodFxuICogQHByaXZhdGVcbiAqL1xuY2xhc3MgTGluZUF0bGFzIHtcbiAgICB3aWR0aDogbnVtYmVyO1xuICAgIGhlaWdodDogbnVtYmVyO1xuICAgIG5leHRSb3c6IG51bWJlcjtcbiAgICBieXRlczogbnVtYmVyO1xuICAgIGRhdGE6IFVpbnQ4QXJyYXk7XG4gICAgcG9zaXRpb25zOiB7W3N0cmluZ106IGFueX07XG4gICAgZGlydHk6IGJvb2xlYW47XG4gICAgdGV4dHVyZTogV2ViR0xUZXh0dXJlO1xuXG4gICAgY29uc3RydWN0b3Iod2lkdGg6IG51bWJlciwgaGVpZ2h0OiBudW1iZXIpIHtcbiAgICAgICAgdGhpcy53aWR0aCA9IHdpZHRoO1xuICAgICAgICB0aGlzLmhlaWdodCA9IGhlaWdodDtcbiAgICAgICAgdGhpcy5uZXh0Um93ID0gMDtcblxuICAgICAgICB0aGlzLmJ5dGVzID0gNDtcbiAgICAgICAgdGhpcy5kYXRhID0gbmV3IFVpbnQ4QXJyYXkodGhpcy53aWR0aCAqIHRoaXMuaGVpZ2h0ICogdGhpcy5ieXRlcyk7XG5cbiAgICAgICAgdGhpcy5wb3NpdGlvbnMgPSB7fTtcbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBHZXQgb3IgY3JlYXRlIGEgZGFzaCBsaW5lIHBhdHRlcm4uXG4gICAgICpcbiAgICAgKiBAcGFyYW0ge0FycmF5PG51bWJlcj59IGRhc2hhcnJheVxuICAgICAqIEBwYXJhbSB7Ym9vbGVhbn0gcm91bmQgd2hldGhlciB0byBhZGQgY2lyY2xlIGNhcHMgaW4gYmV0d2VlbiBkYXNoIHNlZ21lbnRzXG4gICAgICogQHJldHVybnMge09iamVjdH0gcG9zaXRpb24gb2YgZGFzaCB0ZXh0dXJlIGluIHsgeSwgaGVpZ2h0LCB3aWR0aCB9XG4gICAgICogQHByaXZhdGVcbiAgICAgKi9cbiAgICBnZXREYXNoKGRhc2hhcnJheTogQXJyYXk8bnVtYmVyPiwgcm91bmQ6IGJvb2xlYW4pIHtcbiAgICAgICAgY29uc3Qga2V5ID0gZGFzaGFycmF5LmpvaW4oXCIsXCIpICsgU3RyaW5nKHJvdW5kKTtcblxuICAgICAgICBpZiAoIXRoaXMucG9zaXRpb25zW2tleV0pIHtcbiAgICAgICAgICAgIHRoaXMucG9zaXRpb25zW2tleV0gPSB0aGlzLmFkZERhc2goZGFzaGFycmF5LCByb3VuZCk7XG4gICAgICAgIH1cbiAgICAgICAgcmV0dXJuIHRoaXMucG9zaXRpb25zW2tleV07XG4gICAgfVxuXG4gICAgYWRkRGFzaChkYXNoYXJyYXk6IEFycmF5PG51bWJlcj4sIHJvdW5kOiBib29sZWFuKSB7XG5cbiAgICAgICAgY29uc3QgbiA9IHJvdW5kID8gNyA6IDA7XG4gICAgICAgIGNvbnN0IGhlaWdodCA9IDIgKiBuICsgMTtcbiAgICAgICAgY29uc3Qgb2Zmc2V0ID0gMTI4O1xuXG4gICAgICAgIGlmICh0aGlzLm5leHRSb3cgKyBoZWlnaHQgPiB0aGlzLmhlaWdodCkge1xuICAgICAgICAgICAgd2Fybk9uY2UoJ0xpbmVBdGxhcyBvdXQgb2Ygc3BhY2UnKTtcbiAgICAgICAgICAgIHJldHVybiBudWxsO1xuICAgICAgICB9XG5cbiAgICAgICAgbGV0IGxlbmd0aCA9IDA7XG4gICAgICAgIGZvciAobGV0IGkgPSAwOyBpIDwgZGFzaGFycmF5Lmxlbmd0aDsgaSsrKSB7XG4gICAgICAgICAgICBsZW5ndGggKz0gZGFzaGFycmF5W2ldO1xuICAgICAgICB9XG5cbiAgICAgICAgY29uc3Qgc3RyZXRjaCA9IHRoaXMud2lkdGggLyBsZW5ndGg7XG4gICAgICAgIGNvbnN0IGhhbGZXaWR0aCA9IHN0cmV0Y2ggLyAyO1xuXG4gICAgICAgIC8vIElmIGRhc2hhcnJheSBoYXMgYW4gb2RkIGxlbmd0aCwgYm90aCB0aGUgZmlyc3QgYW5kIGxhc3QgcGFydHNcbiAgICAgICAgLy8gYXJlIGRhc2hlcyBhbmQgc2hvdWxkIGJlIGpvaW5lZCBzZWFtbGVzc2x5LlxuICAgICAgICBjb25zdCBvZGRMZW5ndGggPSBkYXNoYXJyYXkubGVuZ3RoICUgMiA9PT0gMTtcblxuICAgICAgICBmb3IgKGxldCB5ID0gLW47IHkgPD0gbjsgeSsrKSB7XG4gICAgICAgICAgICBjb25zdCByb3cgPSB0aGlzLm5leHRSb3cgKyBuICsgeTtcbiAgICAgICAgICAgIGNvbnN0IGluZGV4ID0gdGhpcy53aWR0aCAqIHJvdztcblxuICAgICAgICAgICAgbGV0IGxlZnQgPSBvZGRMZW5ndGggPyAtZGFzaGFycmF5W2Rhc2hhcnJheS5sZW5ndGggLSAxXSA6IDA7XG4gICAgICAgICAgICBsZXQgcmlnaHQgPSBkYXNoYXJyYXlbMF07XG4gICAgICAgICAgICBsZXQgcGFydEluZGV4ID0gMTtcblxuICAgICAgICAgICAgZm9yIChsZXQgeCA9IDA7IHggPCB0aGlzLndpZHRoOyB4KyspIHtcblxuICAgICAgICAgICAgICAgIHdoaWxlIChyaWdodCA8IHggLyBzdHJldGNoKSB7XG4gICAgICAgICAgICAgICAgICAgIGxlZnQgPSByaWdodDtcbiAgICAgICAgICAgICAgICAgICAgcmlnaHQgPSByaWdodCArIGRhc2hhcnJheVtwYXJ0SW5kZXhdO1xuXG4gICAgICAgICAgICAgICAgICAgIGlmIChvZGRMZW5ndGggJiYgcGFydEluZGV4ID09PSBkYXNoYXJyYXkubGVuZ3RoIC0gMSkge1xuICAgICAgICAgICAgICAgICAgICAgICAgcmlnaHQgKz0gZGFzaGFycmF5WzBdO1xuICAgICAgICAgICAgICAgICAgICB9XG5cbiAgICAgICAgICAgICAgICAgICAgcGFydEluZGV4Kys7XG4gICAgICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICAgICAgY29uc3QgZGlzdExlZnQgPSBNYXRoLmFicyh4IC0gbGVmdCAqIHN0cmV0Y2gpO1xuICAgICAgICAgICAgICAgIGNvbnN0IGRpc3RSaWdodCA9IE1hdGguYWJzKHggLSByaWdodCAqIHN0cmV0Y2gpO1xuICAgICAgICAgICAgICAgIGNvbnN0IGRpc3QgPSBNYXRoLm1pbihkaXN0TGVmdCwgZGlzdFJpZ2h0KTtcbiAgICAgICAgICAgICAgICBjb25zdCBpbnNpZGUgPSAocGFydEluZGV4ICUgMikgPT09IDE7XG4gICAgICAgICAgICAgICAgbGV0IHNpZ25lZERpc3RhbmNlO1xuXG4gICAgICAgICAgICAgICAgaWYgKHJvdW5kKSB7XG4gICAgICAgICAgICAgICAgICAgIC8vIEFkZCBjaXJjbGUgY2Fwc1xuICAgICAgICAgICAgICAgICAgICBjb25zdCBkaXN0TWlkZGxlID0gbiA/IHkgLyBuICogKGhhbGZXaWR0aCArIDEpIDogMDtcbiAgICAgICAgICAgICAgICAgICAgaWYgKGluc2lkZSkge1xuICAgICAgICAgICAgICAgICAgICAgICAgY29uc3QgZGlzdEVkZ2UgPSBoYWxmV2lkdGggLSBNYXRoLmFicyhkaXN0TWlkZGxlKTtcbiAgICAgICAgICAgICAgICAgICAgICAgIHNpZ25lZERpc3RhbmNlID0gTWF0aC5zcXJ0KGRpc3QgKiBkaXN0ICsgZGlzdEVkZ2UgKiBkaXN0RWRnZSk7XG4gICAgICAgICAgICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICAgICAgICAgICAgICBzaWduZWREaXN0YW5jZSA9IGhhbGZXaWR0aCAtIE1hdGguc3FydChkaXN0ICogZGlzdCArIGRpc3RNaWRkbGUgKiBkaXN0TWlkZGxlKTtcbiAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICAgICAgICAgIHNpZ25lZERpc3RhbmNlID0gKGluc2lkZSA/IDEgOiAtMSkgKiBkaXN0O1xuICAgICAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgICAgIHRoaXMuZGF0YVszICsgKGluZGV4ICsgeCkgKiA0XSA9IE1hdGgubWF4KDAsIE1hdGgubWluKDI1NSwgc2lnbmVkRGlzdGFuY2UgKyBvZmZzZXQpKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfVxuXG4gICAgICAgIGNvbnN0IHBvcyA9IHtcbiAgICAgICAgICAgIHk6ICh0aGlzLm5leHRSb3cgKyBuICsgMC41KSAvIHRoaXMuaGVpZ2h0LFxuICAgICAgICAgICAgaGVpZ2h0OiAyICogbiAvIHRoaXMuaGVpZ2h0LFxuICAgICAgICAgICAgd2lkdGg6IGxlbmd0aFxuICAgICAgICB9O1xuXG4gICAgICAgIHRoaXMubmV4dFJvdyArPSBoZWlnaHQ7XG4gICAgICAgIHRoaXMuZGlydHkgPSB0cnVlO1xuXG4gICAgICAgIHJldHVybiBwb3M7XG4gICAgfVxuXG4gICAgYmluZChjb250ZXh0OiBDb250ZXh0KSB7XG4gICAgICAgIGNvbnN0IGdsID0gY29udGV4dC5nbDtcbiAgICAgICAgaWYgKCF0aGlzLnRleHR1cmUpIHtcbiAgICAgICAgICAgIHRoaXMudGV4dHVyZSA9IGdsLmNyZWF0ZVRleHR1cmUoKTtcbiAgICAgICAgICAgIGdsLmJpbmRUZXh0dXJlKGdsLlRFWFRVUkVfMkQsIHRoaXMudGV4dHVyZSk7XG4gICAgICAgICAgICBnbC50ZXhQYXJhbWV0ZXJpKGdsLlRFWFRVUkVfMkQsIGdsLlRFWFRVUkVfV1JBUF9TLCBnbC5SRVBFQVQpO1xuICAgICAgICAgICAgZ2wudGV4UGFyYW1ldGVyaShnbC5URVhUVVJFXzJELCBnbC5URVhUVVJFX1dSQVBfVCwgZ2wuUkVQRUFUKTtcbiAgICAgICAgICAgIGdsLnRleFBhcmFtZXRlcmkoZ2wuVEVYVFVSRV8yRCwgZ2wuVEVYVFVSRV9NSU5fRklMVEVSLCBnbC5MSU5FQVIpO1xuICAgICAgICAgICAgZ2wudGV4UGFyYW1ldGVyaShnbC5URVhUVVJFXzJELCBnbC5URVhUVVJFX01BR19GSUxURVIsIGdsLkxJTkVBUik7XG4gICAgICAgICAgICBnbC50ZXhJbWFnZTJEKGdsLlRFWFRVUkVfMkQsIDAsIGdsLlJHQkEsIHRoaXMud2lkdGgsIHRoaXMuaGVpZ2h0LCAwLCBnbC5SR0JBLCBnbC5VTlNJR05FRF9CWVRFLCB0aGlzLmRhdGEpO1xuXG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICBnbC5iaW5kVGV4dHVyZShnbC5URVhUVVJFXzJELCB0aGlzLnRleHR1cmUpO1xuXG4gICAgICAgICAgICBpZiAodGhpcy5kaXJ0eSkge1xuICAgICAgICAgICAgICAgIHRoaXMuZGlydHkgPSBmYWxzZTtcbiAgICAgICAgICAgICAgICBnbC50ZXhTdWJJbWFnZTJEKGdsLlRFWFRVUkVfMkQsIDAsIDAsIDAsIHRoaXMud2lkdGgsIHRoaXMuaGVpZ2h0LCBnbC5SR0JBLCBnbC5VTlNJR05FRF9CWVRFLCB0aGlzLmRhdGEpO1xuICAgICAgICAgICAgfVxuICAgICAgICB9XG4gICAgfVxufVxuXG5leHBvcnQgZGVmYXVsdCBMaW5lQXRsYXM7XG4iLCIvLyBAZmxvd1xuXG5pbXBvcnQgeyB1bmlxdWVJZCwgYXN5bmNBbGwgfSBmcm9tICcuL3V0aWwnO1xuaW1wb3J0IEFjdG9yIGZyb20gJy4vYWN0b3InO1xuXG5pbXBvcnQgdHlwZSBXb3JrZXJQb29sIGZyb20gJy4vd29ya2VyX3Bvb2wnO1xuXG4vKipcbiAqIFJlc3BvbnNpYmxlIGZvciBzZW5kaW5nIG1lc3NhZ2VzIGZyb20gYSB7QGxpbmsgU291cmNlfSB0byBhbiBhc3NvY2lhdGVkXG4gKiB7QGxpbmsgV29ya2VyU291cmNlfS5cbiAqXG4gKiBAcHJpdmF0ZVxuICovXG5jbGFzcyBEaXNwYXRjaGVyIHtcbiAgICB3b3JrZXJQb29sOiBXb3JrZXJQb29sO1xuICAgIGFjdG9yczogQXJyYXk8QWN0b3I+O1xuICAgIGN1cnJlbnRBY3RvcjogbnVtYmVyO1xuICAgIGlkOiBudW1iZXI7XG5cbiAgICAvLyBleHBvc2VkIHRvIGFsbG93IHN0dWJiaW5nIGluIHVuaXQgdGVzdHNcbiAgICBzdGF0aWMgQWN0b3I6IENsYXNzPEFjdG9yPjtcblxuICAgIGNvbnN0cnVjdG9yKHdvcmtlclBvb2w6IFdvcmtlclBvb2wsIHBhcmVudDogYW55KSB7XG4gICAgICAgIHRoaXMud29ya2VyUG9vbCA9IHdvcmtlclBvb2w7XG4gICAgICAgIHRoaXMuYWN0b3JzID0gW107XG4gICAgICAgIHRoaXMuY3VycmVudEFjdG9yID0gMDtcbiAgICAgICAgdGhpcy5pZCA9IHVuaXF1ZUlkKCk7XG4gICAgICAgIGNvbnN0IHdvcmtlcnMgPSB0aGlzLndvcmtlclBvb2wuYWNxdWlyZSh0aGlzLmlkKTtcbiAgICAgICAgZm9yIChsZXQgaSA9IDA7IGkgPCB3b3JrZXJzLmxlbmd0aDsgaSsrKSB7XG4gICAgICAgICAgICBjb25zdCB3b3JrZXIgPSB3b3JrZXJzW2ldO1xuICAgICAgICAgICAgY29uc3QgYWN0b3IgPSBuZXcgRGlzcGF0Y2hlci5BY3Rvcih3b3JrZXIsIHBhcmVudCwgdGhpcy5pZCk7XG4gICAgICAgICAgICBhY3Rvci5uYW1lID0gYFdvcmtlciAke2l9YDtcbiAgICAgICAgICAgIHRoaXMuYWN0b3JzLnB1c2goYWN0b3IpO1xuICAgICAgICB9XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogQnJvYWRjYXN0IGEgbWVzc2FnZSB0byBhbGwgV29ya2Vycy5cbiAgICAgKi9cbiAgICBicm9hZGNhc3QodHlwZTogc3RyaW5nLCBkYXRhOiBtaXhlZCwgY2I/OiBGdW5jdGlvbikge1xuICAgICAgICBjYiA9IGNiIHx8IGZ1bmN0aW9uICgpIHt9O1xuICAgICAgICBhc3luY0FsbCh0aGlzLmFjdG9ycywgKGFjdG9yLCBkb25lKSA9PiB7XG4gICAgICAgICAgICBhY3Rvci5zZW5kKHR5cGUsIGRhdGEsIGRvbmUpO1xuICAgICAgICB9LCBjYik7XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogU2VuZCBhIG1lc3NhZ2UgdG8gYSBXb3JrZXIuXG4gICAgICogQHBhcmFtIHRhcmdldElEIFRoZSBJRCBvZiB0aGUgV29ya2VyIHRvIHdoaWNoIHRvIHNlbmQgdGhpcyBtZXNzYWdlLiBPbWl0IHRvIGFsbG93IHRoZSBkaXNwYXRjaGVyIHRvIGNob29zZS5cbiAgICAgKiBAcmV0dXJucyBUaGUgSUQgb2YgdGhlIHdvcmtlciB0byB3aGljaCB0aGUgbWVzc2FnZSB3YXMgc2VudC5cbiAgICAgKi9cbiAgICBzZW5kKHR5cGU6IHN0cmluZywgZGF0YTogbWl4ZWQsIGNhbGxiYWNrPzogP0Z1bmN0aW9uLCB0YXJnZXRJRD86IG51bWJlcik6IG51bWJlciB7XG4gICAgICAgIGlmICh0eXBlb2YgdGFyZ2V0SUQgIT09ICdudW1iZXInIHx8IGlzTmFOKHRhcmdldElEKSkge1xuICAgICAgICAgICAgLy8gVXNlIHJvdW5kIHJvYmluIHRvIHNlbmQgcmVxdWVzdHMgdG8gd2ViIHdvcmtlcnMuXG4gICAgICAgICAgICB0YXJnZXRJRCA9IHRoaXMuY3VycmVudEFjdG9yID0gKHRoaXMuY3VycmVudEFjdG9yICsgMSkgJSB0aGlzLmFjdG9ycy5sZW5ndGg7XG4gICAgICAgIH1cblxuICAgICAgICB0aGlzLmFjdG9yc1t0YXJnZXRJRF0uc2VuZCh0eXBlLCBkYXRhLCBjYWxsYmFjayk7XG4gICAgICAgIHJldHVybiB0YXJnZXRJRDtcbiAgICB9XG5cbiAgICByZW1vdmUoKSB7XG4gICAgICAgIHRoaXMuYWN0b3JzLmZvckVhY2goKGFjdG9yKSA9PiB7IGFjdG9yLnJlbW92ZSgpOyB9KTtcbiAgICAgICAgdGhpcy5hY3RvcnMgPSBbXTtcbiAgICAgICAgdGhpcy53b3JrZXJQb29sLnJlbGVhc2UodGhpcy5pZCk7XG4gICAgfVxufVxuXG5EaXNwYXRjaGVyLkFjdG9yID0gQWN0b3I7XG5cbmV4cG9ydCBkZWZhdWx0IERpc3BhdGNoZXI7XG4iLCIvLyBAZmxvd1xuXG5pbXBvcnQgeyB3cmFwIH0gZnJvbSAnLi4vdXRpbC91dGlsJztcbmltcG9ydCBMbmdMYXRCb3VuZHMgZnJvbSAnLi9sbmdfbGF0X2JvdW5kcyc7XG5cbi8qKlxuICogQSBgTG5nTGF0YCBvYmplY3QgcmVwcmVzZW50cyBhIGdpdmVuIGxvbmdpdHVkZSBhbmQgbGF0aXR1ZGUgY29vcmRpbmF0ZSwgbWVhc3VyZWQgaW4gZGVncmVlcy5cbiAqXG4gKiBNYXBib3ggR0wgdXNlcyBsb25naXR1ZGUsIGxhdGl0dWRlIGNvb3JkaW5hdGUgb3JkZXIgKGFzIG9wcG9zZWQgdG8gbGF0aXR1ZGUsIGxvbmdpdHVkZSkgdG8gbWF0Y2ggR2VvSlNPTi5cbiAqXG4gKiBOb3RlIHRoYXQgYW55IE1hcGJveCBHTCBtZXRob2QgdGhhdCBhY2NlcHRzIGEgYExuZ0xhdGAgb2JqZWN0IGFzIGFuIGFyZ3VtZW50IG9yIG9wdGlvblxuICogY2FuIGFsc28gYWNjZXB0IGFuIGBBcnJheWAgb2YgdHdvIG51bWJlcnMgYW5kIHdpbGwgcGVyZm9ybSBhbiBpbXBsaWNpdCBjb252ZXJzaW9uLlxuICogVGhpcyBmbGV4aWJsZSB0eXBlIGlzIGRvY3VtZW50ZWQgYXMge0BsaW5rIExuZ0xhdExpa2V9LlxuICpcbiAqIEBwYXJhbSB7bnVtYmVyfSBsbmcgTG9uZ2l0dWRlLCBtZWFzdXJlZCBpbiBkZWdyZWVzLlxuICogQHBhcmFtIHtudW1iZXJ9IGxhdCBMYXRpdHVkZSwgbWVhc3VyZWQgaW4gZGVncmVlcy5cbiAqIEBleGFtcGxlXG4gKiB2YXIgbGwgPSBuZXcgbWFwYm94Z2wuTG5nTGF0KC03My45NzQ5LCA0MC43NzM2KTtcbiAqIEBzZWUgW0dldCBjb29yZGluYXRlcyBvZiB0aGUgbW91c2UgcG9pbnRlcl0oaHR0cHM6Ly93d3cubWFwYm94LmNvbS9tYXBib3gtZ2wtanMvZXhhbXBsZS9tb3VzZS1wb3NpdGlvbi8pXG4gKiBAc2VlIFtEaXNwbGF5IGEgcG9wdXBdKGh0dHBzOi8vd3d3Lm1hcGJveC5jb20vbWFwYm94LWdsLWpzL2V4YW1wbGUvcG9wdXAvKVxuICogQHNlZSBbSGlnaGxpZ2h0IGZlYXR1cmVzIHdpdGhpbiBhIGJvdW5kaW5nIGJveF0oaHR0cHM6Ly93d3cubWFwYm94LmNvbS9tYXBib3gtZ2wtanMvZXhhbXBsZS91c2luZy1ib3gtcXVlcnlyZW5kZXJlZGZlYXR1cmVzLylcbiAqIEBzZWUgW0NyZWF0ZSBhIHRpbWVsaW5lIGFuaW1hdGlvbl0oaHR0cHM6Ly93d3cubWFwYm94LmNvbS9tYXBib3gtZ2wtanMvZXhhbXBsZS90aW1lbGluZS1hbmltYXRpb24vKVxuICovXG5jbGFzcyBMbmdMYXQge1xuICAgIGxuZzogbnVtYmVyO1xuICAgIGxhdDogbnVtYmVyO1xuXG4gICAgY29uc3RydWN0b3IobG5nOiBudW1iZXIsIGxhdDogbnVtYmVyKSB7XG4gICAgICAgIGlmIChpc05hTihsbmcpIHx8IGlzTmFOKGxhdCkpIHtcbiAgICAgICAgICAgIHRocm93IG5ldyBFcnJvcihgSW52YWxpZCBMbmdMYXQgb2JqZWN0OiAoJHtsbmd9LCAke2xhdH0pYCk7XG4gICAgICAgIH1cbiAgICAgICAgdGhpcy5sbmcgPSArbG5nO1xuICAgICAgICB0aGlzLmxhdCA9ICtsYXQ7XG4gICAgICAgIGlmICh0aGlzLmxhdCA+IDkwIHx8IHRoaXMubGF0IDwgLTkwKSB7XG4gICAgICAgICAgICB0aHJvdyBuZXcgRXJyb3IoJ0ludmFsaWQgTG5nTGF0IGxhdGl0dWRlIHZhbHVlOiBtdXN0IGJlIGJldHdlZW4gLTkwIGFuZCA5MCcpO1xuICAgICAgICB9XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogUmV0dXJucyBhIG5ldyBgTG5nTGF0YCBvYmplY3Qgd2hvc2UgbG9uZ2l0dWRlIGlzIHdyYXBwZWQgdG8gdGhlIHJhbmdlICgtMTgwLCAxODApLlxuICAgICAqXG4gICAgICogQHJldHVybnMge0xuZ0xhdH0gVGhlIHdyYXBwZWQgYExuZ0xhdGAgb2JqZWN0LlxuICAgICAqIEBleGFtcGxlXG4gICAgICogdmFyIGxsID0gbmV3IG1hcGJveGdsLkxuZ0xhdCgyODYuMDI1MSwgNDAuNzczNik7XG4gICAgICogdmFyIHdyYXBwZWQgPSBsbC53cmFwKCk7XG4gICAgICogd3JhcHBlZC5sbmc7IC8vID0gLTczLjk3NDlcbiAgICAgKi9cbiAgICB3cmFwKCkge1xuICAgICAgICByZXR1cm4gbmV3IExuZ0xhdCh3cmFwKHRoaXMubG5nLCAtMTgwLCAxODApLCB0aGlzLmxhdCk7XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogUmV0dXJucyB0aGUgY29vcmRpbmF0ZXMgcmVwcmVzZW50ZWQgYXMgYW4gYXJyYXkgb2YgdHdvIG51bWJlcnMuXG4gICAgICpcbiAgICAgKiBAcmV0dXJucyB7QXJyYXk8bnVtYmVyPn0gVGhlIGNvb3JkaW5hdGVzIHJlcHJlc2V0ZWQgYXMgYW4gYXJyYXkgb2YgbG9uZ2l0dWRlIGFuZCBsYXRpdHVkZS5cbiAgICAgKiBAZXhhbXBsZVxuICAgICAqIHZhciBsbCA9IG5ldyBtYXBib3hnbC5MbmdMYXQoLTczLjk3NDksIDQwLjc3MzYpO1xuICAgICAqIGxsLnRvQXJyYXkoKTsgLy8gPSBbLTczLjk3NDksIDQwLjc3MzZdXG4gICAgICovXG4gICAgdG9BcnJheSgpIHtcbiAgICAgICAgcmV0dXJuIFt0aGlzLmxuZywgdGhpcy5sYXRdO1xuICAgIH1cblxuICAgIC8qKlxuICAgICAqIFJldHVybnMgdGhlIGNvb3JkaW5hdGVzIHJlcHJlc2VudCBhcyBhIHN0cmluZy5cbiAgICAgKlxuICAgICAqIEByZXR1cm5zIHtzdHJpbmd9IFRoZSBjb29yZGluYXRlcyByZXByZXNlbnRlZCBhcyBhIHN0cmluZyBvZiB0aGUgZm9ybWF0IGAnTG5nTGF0KGxuZywgbGF0KSdgLlxuICAgICAqIEBleGFtcGxlXG4gICAgICogdmFyIGxsID0gbmV3IG1hcGJveGdsLkxuZ0xhdCgtNzMuOTc0OSwgNDAuNzczNik7XG4gICAgICogbGwudG9TdHJpbmcoKTsgLy8gPSBcIkxuZ0xhdCgtNzMuOTc0OSwgNDAuNzczNilcIlxuICAgICAqL1xuICAgIHRvU3RyaW5nKCkge1xuICAgICAgICByZXR1cm4gYExuZ0xhdCgke3RoaXMubG5nfSwgJHt0aGlzLmxhdH0pYDtcbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBSZXR1cm5zIGEgYExuZ0xhdEJvdW5kc2AgZnJvbSB0aGUgY29vcmRpbmF0ZXMgZXh0ZW5kZWQgYnkgYSBnaXZlbiBgcmFkaXVzYC5cbiAgICAgKlxuICAgICAqIEBwYXJhbSB7bnVtYmVyfSByYWRpdXMgRGlzdGFuY2UgaW4gbWV0ZXJzIGZyb20gdGhlIGNvb3JkaW5hdGVzIHRvIGV4dGVuZCB0aGUgYm91bmRzLlxuICAgICAqIEByZXR1cm5zIHtMbmdMYXRCb3VuZHN9IEEgbmV3IGBMbmdMYXRCb3VuZHNgIG9iamVjdCByZXByZXNlbnRpbmcgdGhlIGNvb3JkaW5hdGVzIGV4dGVuZGVkIGJ5IHRoZSBgcmFkaXVzYC5cbiAgICAgKiBAZXhhbXBsZVxuICAgICAqIHZhciBsbCA9IG5ldyBtYXBib3hnbC5MbmdMYXQoLTczLjk3NDksIDQwLjc3MzYpO1xuICAgICAqIGxsLnRvQm91bmRzKDEwMCkudG9BcnJheSgpOyAvLyA9IFtbLTczLjk3NTAxODYyMTQxMzI4LCA0MC43NzM1MTAxNjg0NzIyOV0sIFstNzMuOTc0NzgxMzc4NTg2NzMsIDQwLjc3MzY4OTgzMTUyNzcxXV1cbiAgICAgKi9cbiAgICB0b0JvdW5kcyhyYWRpdXM6IG51bWJlcikge1xuICAgICAgICBjb25zdCBlYXJ0aENpcmN1bWZlcmVuY2VJbk1ldGVyc0F0RXF1YXRvciA9IDQwMDc1MDE3O1xuICAgICAgICBjb25zdCBsYXRBY2N1cmFjeSA9IDM2MCAqIHJhZGl1cyAvIGVhcnRoQ2lyY3VtZmVyZW5jZUluTWV0ZXJzQXRFcXVhdG9yLFxuICAgICAgICAgICAgbG5nQWNjdXJhY3kgPSBsYXRBY2N1cmFjeSAvIE1hdGguY29zKChNYXRoLlBJIC8gMTgwKSAqIHRoaXMubGF0KTtcblxuICAgICAgICByZXR1cm4gbmV3IExuZ0xhdEJvdW5kcyhuZXcgTG5nTGF0KHRoaXMubG5nIC0gbG5nQWNjdXJhY3ksIHRoaXMubGF0IC0gbGF0QWNjdXJhY3kpLFxuICAgICAgICAgICAgbmV3IExuZ0xhdCh0aGlzLmxuZyArIGxuZ0FjY3VyYWN5LCB0aGlzLmxhdCArIGxhdEFjY3VyYWN5KSk7XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogQ29udmVydHMgYW4gYXJyYXkgb2YgdHdvIG51bWJlcnMgdG8gYSBgTG5nTGF0YCBvYmplY3QuXG4gICAgICpcbiAgICAgKiBJZiBhIGBMbmdMYXRgIG9iamVjdCBpcyBwYXNzZWQgaW4sIHRoZSBmdW5jdGlvbiByZXR1cm5zIGl0IHVuY2hhbmdlZC5cbiAgICAgKlxuICAgICAqIEBwYXJhbSB7TG5nTGF0TGlrZX0gaW5wdXQgQW4gYXJyYXkgb2YgdHdvIG51bWJlcnMgdG8gY29udmVydCwgb3IgYSBgTG5nTGF0YCBvYmplY3QgdG8gcmV0dXJuLlxuICAgICAqIEByZXR1cm5zIHtMbmdMYXR9IEEgbmV3IGBMbmdMYXRgIG9iamVjdCwgaWYgYSBjb252ZXJzaW9uIG9jY3VycmVkLCBvciB0aGUgb3JpZ2luYWwgYExuZ0xhdGAgb2JqZWN0LlxuICAgICAqIEBleGFtcGxlXG4gICAgICogdmFyIGFyciA9IFstNzMuOTc0OSwgNDAuNzczNl07XG4gICAgICogdmFyIGxsID0gbWFwYm94Z2wuTG5nTGF0LmNvbnZlcnQoYXJyKTtcbiAgICAgKiBsbDsgICAvLyA9IExuZ0xhdCB7bG5nOiAtNzMuOTc0OSwgbGF0OiA0MC43NzM2fVxuICAgICAqL1xuICAgIHN0YXRpYyBjb252ZXJ0KGlucHV0OiBMbmdMYXRMaWtlKTogTG5nTGF0IHtcbiAgICAgICAgaWYgKGlucHV0IGluc3RhbmNlb2YgTG5nTGF0KSB7XG4gICAgICAgICAgICByZXR1cm4gaW5wdXQ7XG4gICAgICAgIH1cbiAgICAgICAgaWYgKEFycmF5LmlzQXJyYXkoaW5wdXQpICYmIChpbnB1dC5sZW5ndGggPT09IDIgfHwgaW5wdXQubGVuZ3RoID09PSAzKSkge1xuICAgICAgICAgICAgcmV0dXJuIG5ldyBMbmdMYXQoTnVtYmVyKGlucHV0WzBdKSwgTnVtYmVyKGlucHV0WzFdKSk7XG4gICAgICAgIH1cbiAgICAgICAgaWYgKCFBcnJheS5pc0FycmF5KGlucHV0KSAmJiB0eXBlb2YgaW5wdXQgPT09ICdvYmplY3QnICYmIGlucHV0ICE9PSBudWxsKSB7XG4gICAgICAgICAgICByZXR1cm4gbmV3IExuZ0xhdChOdW1iZXIoaW5wdXQubG5nKSwgTnVtYmVyKGlucHV0LmxhdCkpO1xuICAgICAgICB9XG4gICAgICAgIHRocm93IG5ldyBFcnJvcihcImBMbmdMYXRMaWtlYCBhcmd1bWVudCBtdXN0IGJlIHNwZWNpZmllZCBhcyBhIExuZ0xhdCBpbnN0YW5jZSwgYW4gb2JqZWN0IHtsbmc6IDxsbmc+LCBsYXQ6IDxsYXQ+fSwgb3IgYW4gYXJyYXkgb2YgWzxsbmc+LCA8bGF0Pl1cIik7XG4gICAgfVxufVxuXG4vKipcbiAqIEEge0BsaW5rIExuZ0xhdH0gb2JqZWN0LCBhbiBhcnJheSBvZiB0d28gbnVtYmVycyByZXByZXNlbnRpbmcgbG9uZ2l0dWRlIGFuZCBsYXRpdHVkZSxcbiAqIG9yIGFuIG9iamVjdCB3aXRoIGBsbmdgIGFuZCBgbGF0YCBwcm9wZXJ0aWVzLlxuICpcbiAqIEB0eXBlZGVmIHtMbmdMYXQgfCB7bG5nOiBudW1iZXIsIGxhdDogbnVtYmVyfSB8IFtudW1iZXIsIG51bWJlcl19IExuZ0xhdExpa2VcbiAqIEBleGFtcGxlXG4gKiB2YXIgdjEgPSBuZXcgbWFwYm94Z2wuTG5nTGF0KC0xMjIuNDIwNjc5LCAzNy43NzI1MzcpO1xuICogdmFyIHYyID0gWy0xMjIuNDIwNjc5LCAzNy43NzI1MzddO1xuICovXG5leHBvcnQgdHlwZSBMbmdMYXRMaWtlID0gTG5nTGF0IHwge2xuZzogbnVtYmVyLCBsYXQ6IG51bWJlcn0gfCBbbnVtYmVyLCBudW1iZXJdO1xuXG5leHBvcnQgZGVmYXVsdCBMbmdMYXQ7XG4iLCIvLyBAZmxvd1xuXG5pbXBvcnQgTG5nTGF0IGZyb20gJy4vbG5nX2xhdCc7XG5cbmltcG9ydCB0eXBlIHtMbmdMYXRMaWtlfSBmcm9tICcuL2xuZ19sYXQnO1xuXG4vKipcbiAqIEEgYExuZ0xhdEJvdW5kc2Agb2JqZWN0IHJlcHJlc2VudHMgYSBnZW9ncmFwaGljYWwgYm91bmRpbmcgYm94LFxuICogZGVmaW5lZCBieSBpdHMgc291dGh3ZXN0IGFuZCBub3J0aGVhc3QgcG9pbnRzIGluIGxvbmdpdHVkZSBhbmQgbGF0aXR1ZGUuXG4gKlxuICogSWYgbm8gYXJndW1lbnRzIGFyZSBwcm92aWRlZCB0byB0aGUgY29uc3RydWN0b3IsIGEgYG51bGxgIGJvdW5kaW5nIGJveCBpcyBjcmVhdGVkLlxuICpcbiAqIE5vdGUgdGhhdCBhbnkgTWFwYm94IEdMIG1ldGhvZCB0aGF0IGFjY2VwdHMgYSBgTG5nTGF0Qm91bmRzYCBvYmplY3QgYXMgYW4gYXJndW1lbnQgb3Igb3B0aW9uXG4gKiBjYW4gYWxzbyBhY2NlcHQgYW4gYEFycmF5YCBvZiB0d28ge0BsaW5rIExuZ0xhdExpa2V9IGNvbnN0cnVjdHMgYW5kIHdpbGwgcGVyZm9ybSBhbiBpbXBsaWNpdCBjb252ZXJzaW9uLlxuICogVGhpcyBmbGV4aWJsZSB0eXBlIGlzIGRvY3VtZW50ZWQgYXMge0BsaW5rIExuZ0xhdEJvdW5kc0xpa2V9LlxuICpcbiAqIEBwYXJhbSB7TG5nTGF0TGlrZX0gW3N3XSBUaGUgc291dGh3ZXN0IGNvcm5lciBvZiB0aGUgYm91bmRpbmcgYm94LlxuICogQHBhcmFtIHtMbmdMYXRMaWtlfSBbbmVdIFRoZSBub3J0aGVhc3QgY29ybmVyIG9mIHRoZSBib3VuZGluZyBib3guXG4gKiBAZXhhbXBsZVxuICogdmFyIHN3ID0gbmV3IG1hcGJveGdsLkxuZ0xhdCgtNzMuOTg3NiwgNDAuNzY2MSk7XG4gKiB2YXIgbmUgPSBuZXcgbWFwYm94Z2wuTG5nTGF0KC03My45Mzk3LCA0MC44MDAyKTtcbiAqIHZhciBsbGIgPSBuZXcgbWFwYm94Z2wuTG5nTGF0Qm91bmRzKHN3LCBuZSk7XG4gKi9cbmNsYXNzIExuZ0xhdEJvdW5kcyB7XG4gICAgX25lOiBMbmdMYXQ7XG4gICAgX3N3OiBMbmdMYXQ7XG5cbiAgICAvLyBUaGlzIGNvbnN0cnVjdG9yIGlzIHRvbyBmbGV4aWJsZSB0byB0eXBlLiBJdCBzaG91bGQgbm90IGJlIHNvIGZsZXhpYmxlLlxuICAgIGNvbnN0cnVjdG9yKHN3OiBhbnksIG5lOiBhbnkpIHtcbiAgICAgICAgaWYgKCFzdykge1xuICAgICAgICAgICAgcmV0dXJuO1xuICAgICAgICB9IGVsc2UgaWYgKG5lKSB7XG4gICAgICAgICAgICB0aGlzLnNldFNvdXRoV2VzdChzdykuc2V0Tm9ydGhFYXN0KG5lKTtcbiAgICAgICAgfSBlbHNlIGlmIChzdy5sZW5ndGggPT09IDQpIHtcbiAgICAgICAgICAgIHRoaXMuc2V0U291dGhXZXN0KFtzd1swXSwgc3dbMV1dKS5zZXROb3J0aEVhc3QoW3N3WzJdLCBzd1szXV0pO1xuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgdGhpcy5zZXRTb3V0aFdlc3Qoc3dbMF0pLnNldE5vcnRoRWFzdChzd1sxXSk7XG4gICAgICAgIH1cbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBTZXQgdGhlIG5vcnRoZWFzdCBjb3JuZXIgb2YgdGhlIGJvdW5kaW5nIGJveFxuICAgICAqXG4gICAgICogQHBhcmFtIHtMbmdMYXRMaWtlfSBuZVxuICAgICAqIEByZXR1cm5zIHtMbmdMYXRCb3VuZHN9IGB0aGlzYFxuICAgICAqL1xuICAgIHNldE5vcnRoRWFzdChuZTogTG5nTGF0TGlrZSkge1xuICAgICAgICB0aGlzLl9uZSA9IG5lIGluc3RhbmNlb2YgTG5nTGF0ID8gbmV3IExuZ0xhdChuZS5sbmcsIG5lLmxhdCkgOiBMbmdMYXQuY29udmVydChuZSk7XG4gICAgICAgIHJldHVybiB0aGlzO1xuICAgIH1cblxuICAgIC8qKlxuICAgICAqIFNldCB0aGUgc291dGh3ZXN0IGNvcm5lciBvZiB0aGUgYm91bmRpbmcgYm94XG4gICAgICpcbiAgICAgKiBAcGFyYW0ge0xuZ0xhdExpa2V9IHN3XG4gICAgICogQHJldHVybnMge0xuZ0xhdEJvdW5kc30gYHRoaXNgXG4gICAgICovXG4gICAgc2V0U291dGhXZXN0KHN3OiBMbmdMYXRMaWtlKSB7XG4gICAgICAgIHRoaXMuX3N3ID0gc3cgaW5zdGFuY2VvZiBMbmdMYXQgPyBuZXcgTG5nTGF0KHN3LmxuZywgc3cubGF0KSA6IExuZ0xhdC5jb252ZXJ0KHN3KTtcbiAgICAgICAgcmV0dXJuIHRoaXM7XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogRXh0ZW5kIHRoZSBib3VuZHMgdG8gaW5jbHVkZSBhIGdpdmVuIExuZ0xhdCBvciBMbmdMYXRCb3VuZHMuXG4gICAgICpcbiAgICAgKiBAcGFyYW0ge0xuZ0xhdHxMbmdMYXRCb3VuZHN9IG9iaiBvYmplY3QgdG8gZXh0ZW5kIHRvXG4gICAgICogQHJldHVybnMge0xuZ0xhdEJvdW5kc30gYHRoaXNgXG4gICAgICovXG4gICAgZXh0ZW5kKG9iajogTG5nTGF0IHwgTG5nTGF0Qm91bmRzKSB7XG4gICAgICAgIGNvbnN0IHN3ID0gdGhpcy5fc3csXG4gICAgICAgICAgICBuZSA9IHRoaXMuX25lO1xuICAgICAgICBsZXQgc3cyLCBuZTI7XG5cbiAgICAgICAgaWYgKG9iaiBpbnN0YW5jZW9mIExuZ0xhdCkge1xuICAgICAgICAgICAgc3cyID0gb2JqO1xuICAgICAgICAgICAgbmUyID0gb2JqO1xuXG4gICAgICAgIH0gZWxzZSBpZiAob2JqIGluc3RhbmNlb2YgTG5nTGF0Qm91bmRzKSB7XG4gICAgICAgICAgICBzdzIgPSBvYmouX3N3O1xuICAgICAgICAgICAgbmUyID0gb2JqLl9uZTtcblxuICAgICAgICAgICAgaWYgKCFzdzIgfHwgIW5lMikgcmV0dXJuIHRoaXM7XG5cbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgIGlmIChBcnJheS5pc0FycmF5KG9iaikpIHtcbiAgICAgICAgICAgICAgICBpZiAob2JqLmV2ZXJ5KEFycmF5LmlzQXJyYXkpKSB7XG4gICAgICAgICAgICAgICAgICAgIHJldHVybiB0aGlzLmV4dGVuZChMbmdMYXRCb3VuZHMuY29udmVydChvYmopKTtcbiAgICAgICAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgICAgICAgICByZXR1cm4gdGhpcy5leHRlbmQoTG5nTGF0LmNvbnZlcnQob2JqKSk7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfVxuICAgICAgICAgICAgcmV0dXJuIHRoaXM7XG4gICAgICAgIH1cblxuICAgICAgICBpZiAoIXN3ICYmICFuZSkge1xuICAgICAgICAgICAgdGhpcy5fc3cgPSBuZXcgTG5nTGF0KHN3Mi5sbmcsIHN3Mi5sYXQpO1xuICAgICAgICAgICAgdGhpcy5fbmUgPSBuZXcgTG5nTGF0KG5lMi5sbmcsIG5lMi5sYXQpO1xuXG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICBzdy5sbmcgPSBNYXRoLm1pbihzdzIubG5nLCBzdy5sbmcpO1xuICAgICAgICAgICAgc3cubGF0ID0gTWF0aC5taW4oc3cyLmxhdCwgc3cubGF0KTtcbiAgICAgICAgICAgIG5lLmxuZyA9IE1hdGgubWF4KG5lMi5sbmcsIG5lLmxuZyk7XG4gICAgICAgICAgICBuZS5sYXQgPSBNYXRoLm1heChuZTIubGF0LCBuZS5sYXQpO1xuICAgICAgICB9XG5cbiAgICAgICAgcmV0dXJuIHRoaXM7XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogUmV0dXJucyB0aGUgZ2VvZ3JhcGhpY2FsIGNvb3JkaW5hdGUgZXF1aWRpc3RhbnQgZnJvbSB0aGUgYm91bmRpbmcgYm94J3MgY29ybmVycy5cbiAgICAgKlxuICAgICAqIEByZXR1cm5zIHtMbmdMYXR9IFRoZSBib3VuZGluZyBib3gncyBjZW50ZXIuXG4gICAgICogQGV4YW1wbGVcbiAgICAgKiB2YXIgbGxiID0gbmV3IG1hcGJveGdsLkxuZ0xhdEJvdW5kcyhbLTczLjk4NzYsIDQwLjc2NjFdLCBbLTczLjkzOTcsIDQwLjgwMDJdKTtcbiAgICAgKiBsbGIuZ2V0Q2VudGVyKCk7IC8vID0gTG5nTGF0IHtsbmc6IC03My45NjM2NSwgbGF0OiA0MC43ODMxNX1cbiAgICAgKi9cbiAgICBnZXRDZW50ZXIoKTogTG5nTGF0IHtcbiAgICAgICAgcmV0dXJuIG5ldyBMbmdMYXQoKHRoaXMuX3N3LmxuZyArIHRoaXMuX25lLmxuZykgLyAyLCAodGhpcy5fc3cubGF0ICsgdGhpcy5fbmUubGF0KSAvIDIpO1xuICAgIH1cblxuICAgIC8qKlxuICAgICAqIFJldHVybnMgdGhlIHNvdXRod2VzdCBjb3JuZXIgb2YgdGhlIGJvdW5kaW5nIGJveC5cbiAgICAgKlxuICAgICAqIEByZXR1cm5zIHtMbmdMYXR9IFRoZSBzb3V0aHdlc3QgY29ybmVyIG9mIHRoZSBib3VuZGluZyBib3guXG4gICAgICovXG4gICAgZ2V0U291dGhXZXN0KCk6IExuZ0xhdCB7IHJldHVybiB0aGlzLl9zdzsgfVxuXG4gICAgLyoqXG4gICAgKiBSZXR1cm5zIHRoZSBub3J0aGVhc3QgY29ybmVyIG9mIHRoZSBib3VuZGluZyBib3guXG4gICAgKlxuICAgICogQHJldHVybnMge0xuZ0xhdH0gVGhlIG5vcnRoZWFzdCBjb3JuZXIgb2YgdGhlIGJvdW5kaW5nIGJveC5cbiAgICAgKi9cbiAgICBnZXROb3J0aEVhc3QoKTogTG5nTGF0IHsgcmV0dXJuIHRoaXMuX25lOyB9XG5cbiAgICAvKipcbiAgICAqIFJldHVybnMgdGhlIG5vcnRod2VzdCBjb3JuZXIgb2YgdGhlIGJvdW5kaW5nIGJveC5cbiAgICAqXG4gICAgKiBAcmV0dXJucyB7TG5nTGF0fSBUaGUgbm9ydGh3ZXN0IGNvcm5lciBvZiB0aGUgYm91bmRpbmcgYm94LlxuICAgICAqL1xuICAgIGdldE5vcnRoV2VzdCgpOiBMbmdMYXQgeyByZXR1cm4gbmV3IExuZ0xhdCh0aGlzLmdldFdlc3QoKSwgdGhpcy5nZXROb3J0aCgpKTsgfVxuXG4gICAgLyoqXG4gICAgKiBSZXR1cm5zIHRoZSBzb3V0aGVhc3QgY29ybmVyIG9mIHRoZSBib3VuZGluZyBib3guXG4gICAgKlxuICAgICogQHJldHVybnMge0xuZ0xhdH0gVGhlIHNvdXRoZWFzdCBjb3JuZXIgb2YgdGhlIGJvdW5kaW5nIGJveC5cbiAgICAgKi9cbiAgICBnZXRTb3V0aEVhc3QoKTogTG5nTGF0IHsgcmV0dXJuIG5ldyBMbmdMYXQodGhpcy5nZXRFYXN0KCksIHRoaXMuZ2V0U291dGgoKSk7IH1cblxuICAgIC8qKlxuICAgICogUmV0dXJucyB0aGUgd2VzdCBlZGdlIG9mIHRoZSBib3VuZGluZyBib3guXG4gICAgKlxuICAgICogQHJldHVybnMge251bWJlcn0gVGhlIHdlc3QgZWRnZSBvZiB0aGUgYm91bmRpbmcgYm94LlxuICAgICAqL1xuICAgIGdldFdlc3QoKTogbnVtYmVyIHsgcmV0dXJuIHRoaXMuX3N3LmxuZzsgfVxuXG4gICAgLyoqXG4gICAgKiBSZXR1cm5zIHRoZSBzb3V0aCBlZGdlIG9mIHRoZSBib3VuZGluZyBib3guXG4gICAgKlxuICAgICogQHJldHVybnMge251bWJlcn0gVGhlIHNvdXRoIGVkZ2Ugb2YgdGhlIGJvdW5kaW5nIGJveC5cbiAgICAgKi9cbiAgICBnZXRTb3V0aCgpOiBudW1iZXIgeyByZXR1cm4gdGhpcy5fc3cubGF0OyB9XG5cbiAgICAvKipcbiAgICAqIFJldHVybnMgdGhlIGVhc3QgZWRnZSBvZiB0aGUgYm91bmRpbmcgYm94LlxuICAgICpcbiAgICAqIEByZXR1cm5zIHtudW1iZXJ9IFRoZSBlYXN0IGVkZ2Ugb2YgdGhlIGJvdW5kaW5nIGJveC5cbiAgICAgKi9cbiAgICBnZXRFYXN0KCk6IG51bWJlciB7IHJldHVybiB0aGlzLl9uZS5sbmc7IH1cblxuICAgIC8qKlxuICAgICogUmV0dXJucyB0aGUgbm9ydGggZWRnZSBvZiB0aGUgYm91bmRpbmcgYm94LlxuICAgICpcbiAgICAqIEByZXR1cm5zIHtudW1iZXJ9IFRoZSBub3J0aCBlZGdlIG9mIHRoZSBib3VuZGluZyBib3guXG4gICAgICovXG4gICAgZ2V0Tm9ydGgoKTogbnVtYmVyIHsgcmV0dXJuIHRoaXMuX25lLmxhdDsgfVxuXG4gICAgLyoqXG4gICAgICogUmV0dXJucyB0aGUgYm91bmRpbmcgYm94IHJlcHJlc2VudGVkIGFzIGFuIGFycmF5LlxuICAgICAqXG4gICAgICogQHJldHVybnMge0FycmF5PEFycmF5PG51bWJlcj4+fSBUaGUgYm91bmRpbmcgYm94IHJlcHJlc2VudGVkIGFzIGFuIGFycmF5LCBjb25zaXN0aW5nIG9mIHRoZVxuICAgICAqICAgc291dGh3ZXN0IGFuZCBub3J0aGVhc3QgY29vcmRpbmF0ZXMgb2YgdGhlIGJvdW5kaW5nIHJlcHJlc2VudGVkIGFzIGFycmF5cyBvZiBudW1iZXJzLlxuICAgICAqIEBleGFtcGxlXG4gICAgICogdmFyIGxsYiA9IG5ldyBtYXBib3hnbC5MbmdMYXRCb3VuZHMoWy03My45ODc2LCA0MC43NjYxXSwgWy03My45Mzk3LCA0MC44MDAyXSk7XG4gICAgICogbGxiLnRvQXJyYXkoKTsgLy8gPSBbWy03My45ODc2LCA0MC43NjYxXSwgWy03My45Mzk3LCA0MC44MDAyXV1cbiAgICAgKi9cbiAgICB0b0FycmF5KCkge1xuICAgICAgICByZXR1cm4gW3RoaXMuX3N3LnRvQXJyYXkoKSwgdGhpcy5fbmUudG9BcnJheSgpXTtcbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBSZXR1cm4gdGhlIGJvdW5kaW5nIGJveCByZXByZXNlbnRlZCBhcyBhIHN0cmluZy5cbiAgICAgKlxuICAgICAqIEByZXR1cm5zIHtzdHJpbmd9IFRoZSBib3VuZGluZyBib3ggcmVwcmVzZW50cyBhcyBhIHN0cmluZyBvZiB0aGUgZm9ybWF0XG4gICAgICogICBgJ0xuZ0xhdEJvdW5kcyhMbmdMYXQobG5nLCBsYXQpLCBMbmdMYXQobG5nLCBsYXQpKSdgLlxuICAgICAqIEBleGFtcGxlXG4gICAgICogdmFyIGxsYiA9IG5ldyBtYXBib3hnbC5MbmdMYXRCb3VuZHMoWy03My45ODc2LCA0MC43NjYxXSwgWy03My45Mzk3LCA0MC44MDAyXSk7XG4gICAgICogbGxiLnRvU3RyaW5nKCk7IC8vID0gXCJMbmdMYXRCb3VuZHMoTG5nTGF0KC03My45ODc2LCA0MC43NjYxKSwgTG5nTGF0KC03My45Mzk3LCA0MC44MDAyKSlcIlxuICAgICAqL1xuICAgIHRvU3RyaW5nKCkge1xuICAgICAgICByZXR1cm4gYExuZ0xhdEJvdW5kcygke3RoaXMuX3N3LnRvU3RyaW5nKCl9LCAke3RoaXMuX25lLnRvU3RyaW5nKCl9KWA7XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogQ2hlY2sgaWYgdGhlIGJvdW5kaW5nIGJveCBpcyBhbiBlbXB0eS9gbnVsbGAtdHlwZSBib3guXG4gICAgICpcbiAgICAgKiBAcmV0dXJucyB7Ym9vbGVhbn0gVHJ1ZSBpZiBib3VuZHMgaGF2ZSBiZWVuIGRlZmluZWQsIG90aGVyd2lzZSBmYWxzZS5cbiAgICAgKi9cbiAgICBpc0VtcHR5KCkge1xuICAgICAgICByZXR1cm4gISh0aGlzLl9zdyAmJiB0aGlzLl9uZSk7XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogQ29udmVydHMgYW4gYXJyYXkgdG8gYSBgTG5nTGF0Qm91bmRzYCBvYmplY3QuXG4gICAgICpcbiAgICAgKiBJZiBhIGBMbmdMYXRCb3VuZHNgIG9iamVjdCBpcyBwYXNzZWQgaW4sIHRoZSBmdW5jdGlvbiByZXR1cm5zIGl0IHVuY2hhbmdlZC5cbiAgICAgKlxuICAgICAqIEludGVybmFsbHksIHRoZSBmdW5jdGlvbiBjYWxscyBgTG5nTGF0I2NvbnZlcnRgIHRvIGNvbnZlcnQgYXJyYXlzIHRvIGBMbmdMYXRgIHZhbHVlcy5cbiAgICAgKlxuICAgICAqIEBwYXJhbSB7TG5nTGF0Qm91bmRzTGlrZX0gaW5wdXQgQW4gYXJyYXkgb2YgdHdvIGNvb3JkaW5hdGVzIHRvIGNvbnZlcnQsIG9yIGEgYExuZ0xhdEJvdW5kc2Agb2JqZWN0IHRvIHJldHVybi5cbiAgICAgKiBAcmV0dXJucyB7TG5nTGF0Qm91bmRzfSBBIG5ldyBgTG5nTGF0Qm91bmRzYCBvYmplY3QsIGlmIGEgY29udmVyc2lvbiBvY2N1cnJlZCwgb3IgdGhlIG9yaWdpbmFsIGBMbmdMYXRCb3VuZHNgIG9iamVjdC5cbiAgICAgKiBAZXhhbXBsZVxuICAgICAqIHZhciBhcnIgPSBbWy03My45ODc2LCA0MC43NjYxXSwgWy03My45Mzk3LCA0MC44MDAyXV07XG4gICAgICogdmFyIGxsYiA9IG1hcGJveGdsLkxuZ0xhdEJvdW5kcy5jb252ZXJ0KGFycik7XG4gICAgICogbGxiOyAgIC8vID0gTG5nTGF0Qm91bmRzIHtfc3c6IExuZ0xhdCB7bG5nOiAtNzMuOTg3NiwgbGF0OiA0MC43NjYxfSwgX25lOiBMbmdMYXQge2xuZzogLTczLjkzOTcsIGxhdDogNDAuODAwMn19XG4gICAgICovXG4gICAgc3RhdGljIGNvbnZlcnQoaW5wdXQ6IExuZ0xhdEJvdW5kc0xpa2UpOiBMbmdMYXRCb3VuZHMge1xuICAgICAgICBpZiAoIWlucHV0IHx8IGlucHV0IGluc3RhbmNlb2YgTG5nTGF0Qm91bmRzKSByZXR1cm4gaW5wdXQ7XG4gICAgICAgIHJldHVybiBuZXcgTG5nTGF0Qm91bmRzKGlucHV0KTtcbiAgICB9XG59XG5cbi8qKlxuICogQSB7QGxpbmsgTG5nTGF0Qm91bmRzfSBvYmplY3QsIGFuIGFycmF5IG9mIHtAbGluayBMbmdMYXRMaWtlfSBvYmplY3RzIGluIFtzdywgbmVdIG9yZGVyLFxuICogb3IgYW4gYXJyYXkgb2YgbnVtYmVycyBpbiBbd2VzdCwgc291dGgsIGVhc3QsIG5vcnRoXSBvcmRlci5cbiAqXG4gKiBAdHlwZWRlZiB7TG5nTGF0Qm91bmRzIHwgW0xuZ0xhdExpa2UsIExuZ0xhdExpa2VdIHwgW251bWJlciwgbnVtYmVyLCBudW1iZXIsIG51bWJlcl19IExuZ0xhdEJvdW5kc0xpa2VcbiAqIEBleGFtcGxlXG4gKiB2YXIgdjEgPSBuZXcgbWFwYm94Z2wuTG5nTGF0Qm91bmRzKFxuICogICBuZXcgbWFwYm94Z2wuTG5nTGF0KC03My45ODc2LCA0MC43NjYxKSxcbiAqICAgbmV3IG1hcGJveGdsLkxuZ0xhdCgtNzMuOTM5NywgNDAuODAwMilcbiAqICk7XG4gKiB2YXIgdjIgPSBuZXcgbWFwYm94Z2wuTG5nTGF0Qm91bmRzKFstNzMuOTg3NiwgNDAuNzY2MV0sIFstNzMuOTM5NywgNDAuODAwMl0pXG4gKiB2YXIgdjMgPSBbWy03My45ODc2LCA0MC43NjYxXSwgWy03My45Mzk3LCA0MC44MDAyXV07XG4gKi9cbmV4cG9ydCB0eXBlIExuZ0xhdEJvdW5kc0xpa2UgPSBMbmdMYXRCb3VuZHMgfCBbTG5nTGF0TGlrZSwgTG5nTGF0TGlrZV0gfCBbbnVtYmVyLCBudW1iZXIsIG51bWJlciwgbnVtYmVyXTtcblxuZXhwb3J0IGRlZmF1bHQgTG5nTGF0Qm91bmRzO1xuIiwiLy8gQGZsb3dcblxuaW1wb3J0IExuZ0xhdEJvdW5kcyBmcm9tICcuLi9nZW8vbG5nX2xhdF9ib3VuZHMnO1xuXG5pbXBvcnQgeyBjbGFtcCB9IGZyb20gJy4uL3V0aWwvdXRpbCc7XG5cbmltcG9ydCB0eXBlIHtDYW5vbmljYWxUaWxlSUR9IGZyb20gJy4vdGlsZV9pZCc7XG5cbmNsYXNzIFRpbGVCb3VuZHMge1xuICAgIGJvdW5kczogTG5nTGF0Qm91bmRzO1xuICAgIG1pbnpvb206IG51bWJlcjtcbiAgICBtYXh6b29tOiBudW1iZXI7XG5cbiAgICBjb25zdHJ1Y3Rvcihib3VuZHM6IFtudW1iZXIsIG51bWJlciwgbnVtYmVyLCBudW1iZXJdLCBtaW56b29tOiA/bnVtYmVyLCBtYXh6b29tOiA/bnVtYmVyKSB7XG4gICAgICAgIHRoaXMuYm91bmRzID0gTG5nTGF0Qm91bmRzLmNvbnZlcnQodGhpcy52YWxpZGF0ZUJvdW5kcyhib3VuZHMpKTtcbiAgICAgICAgdGhpcy5taW56b29tID0gbWluem9vbSB8fCAwO1xuICAgICAgICB0aGlzLm1heHpvb20gPSBtYXh6b29tIHx8IDI0O1xuICAgIH1cblxuICAgIHZhbGlkYXRlQm91bmRzKGJvdW5kczogW251bWJlciwgbnVtYmVyLCBudW1iZXIsIG51bWJlcl0pIHtcbiAgICAgICAgLy8gbWFrZSBzdXJlIHRoZSBib3VuZHMgcHJvcGVydHkgY29udGFpbnMgdmFsaWQgbG9uZ2l0dWRlIGFuZCBsYXRpdHVkZXNcbiAgICAgICAgaWYgKCFBcnJheS5pc0FycmF5KGJvdW5kcykgfHwgYm91bmRzLmxlbmd0aCAhPT0gNCkgcmV0dXJuIFstMTgwLCAtOTAsIDE4MCwgOTBdO1xuICAgICAgICByZXR1cm4gW01hdGgubWF4KC0xODAsIGJvdW5kc1swXSksIE1hdGgubWF4KC05MCwgYm91bmRzWzFdKSwgTWF0aC5taW4oMTgwLCBib3VuZHNbMl0pLCBNYXRoLm1pbig5MCwgYm91bmRzWzNdKV07XG4gICAgfVxuXG4gICAgY29udGFpbnModGlsZUlEOiBDYW5vbmljYWxUaWxlSUQpIHtcbiAgICAgICAgY29uc3QgbGV2ZWwgPSB7XG4gICAgICAgICAgICBtaW5YOiBNYXRoLmZsb29yKHRoaXMubG5nWCh0aGlzLmJvdW5kcy5nZXRXZXN0KCksIHRpbGVJRC56KSksXG4gICAgICAgICAgICBtaW5ZOiBNYXRoLmZsb29yKHRoaXMubGF0WSh0aGlzLmJvdW5kcy5nZXROb3J0aCgpLCB0aWxlSUQueikpLFxuICAgICAgICAgICAgbWF4WDogTWF0aC5jZWlsKHRoaXMubG5nWCh0aGlzLmJvdW5kcy5nZXRFYXN0KCksIHRpbGVJRC56KSksXG4gICAgICAgICAgICBtYXhZOiBNYXRoLmNlaWwodGhpcy5sYXRZKHRoaXMuYm91bmRzLmdldFNvdXRoKCksIHRpbGVJRC56KSlcbiAgICAgICAgfTtcbiAgICAgICAgY29uc3QgaGl0ID0gdGlsZUlELnggPj0gbGV2ZWwubWluWCAmJiB0aWxlSUQueCA8IGxldmVsLm1heFggJiYgdGlsZUlELnkgPj0gbGV2ZWwubWluWSAmJiB0aWxlSUQueSA8IGxldmVsLm1heFk7XG4gICAgICAgIHJldHVybiBoaXQ7XG4gICAgfVxuXG4gICAgbG5nWChsbmc6IG51bWJlciwgem9vbTogbnVtYmVyKSB7XG4gICAgICAgIHJldHVybiAobG5nICsgMTgwKSAqIChNYXRoLnBvdygyLCB6b29tKSAvIDM2MCk7XG4gICAgfVxuXG4gICAgbGF0WShsYXQ6IG51bWJlciwgem9vbTogbnVtYmVyKSB7XG4gICAgICAgIGNvbnN0IGYgPSBjbGFtcChNYXRoLnNpbihNYXRoLlBJIC8gMTgwICogbGF0KSwgLTAuOTk5OSwgMC45OTk5KTtcbiAgICAgICAgY29uc3Qgc2NhbGUgPSBNYXRoLnBvdygyLCB6b29tKSAvICgyICogTWF0aC5QSSk7XG4gICAgICAgIHJldHVybiBNYXRoLnBvdygyLCB6b29tIC0gMSkgKyAwLjUgKiBNYXRoLmxvZygoMSArIGYpIC8gKDEgLSBmKSkgKiAtc2NhbGU7XG4gICAgfVxufVxuXG5leHBvcnQgZGVmYXVsdCBUaWxlQm91bmRzO1xuIiwiLy8gQGZsb3dcblxuaW1wb3J0IHsgRXZlbnQsIEVycm9yRXZlbnQsIEV2ZW50ZWQgfSBmcm9tICcuLi91dGlsL2V2ZW50ZWQnO1xuXG5pbXBvcnQgeyBleHRlbmQsIHBpY2sgfSBmcm9tICcuLi91dGlsL3V0aWwnO1xuaW1wb3J0IGxvYWRUaWxlSlNPTiBmcm9tICcuL2xvYWRfdGlsZWpzb24nO1xuaW1wb3J0IHsgbm9ybWFsaXplVGlsZVVSTCBhcyBub3JtYWxpemVVUkwsIHBvc3RUdXJuc3RpbGVFdmVudCB9IGZyb20gJy4uL3V0aWwvbWFwYm94JztcbmltcG9ydCBUaWxlQm91bmRzIGZyb20gJy4vdGlsZV9ib3VuZHMnO1xuaW1wb3J0IHsgUmVzb3VyY2VUeXBlIH0gZnJvbSAnLi4vdXRpbC9hamF4JztcbmltcG9ydCBicm93c2VyIGZyb20gJy4uL3V0aWwvYnJvd3Nlcic7XG5cbmltcG9ydCB0eXBlIHtTb3VyY2V9IGZyb20gJy4vc291cmNlJztcbmltcG9ydCB0eXBlIHtPdmVyc2NhbGVkVGlsZUlEfSBmcm9tICcuL3RpbGVfaWQnO1xuaW1wb3J0IHR5cGUgTWFwIGZyb20gJy4uL3VpL21hcCc7XG5pbXBvcnQgdHlwZSBEaXNwYXRjaGVyIGZyb20gJy4uL3V0aWwvZGlzcGF0Y2hlcic7XG5pbXBvcnQgdHlwZSBUaWxlIGZyb20gJy4vdGlsZSc7XG5pbXBvcnQgdHlwZSB7Q2FsbGJhY2t9IGZyb20gJy4uL3R5cGVzL2NhbGxiYWNrJztcbmltcG9ydCB0eXBlIHtDYW5jZWxhYmxlfSBmcm9tICcuLi90eXBlcy9jYW5jZWxhYmxlJztcbmltcG9ydCB0eXBlIHtWZWN0b3JTb3VyY2VTcGVjaWZpY2F0aW9ufSBmcm9tICcuLi9zdHlsZS1zcGVjL3R5cGVzJztcblxuY2xhc3MgVmVjdG9yVGlsZVNvdXJjZSBleHRlbmRzIEV2ZW50ZWQgaW1wbGVtZW50cyBTb3VyY2Uge1xuICAgIHR5cGU6ICd2ZWN0b3InO1xuICAgIGlkOiBzdHJpbmc7XG4gICAgbWluem9vbTogbnVtYmVyO1xuICAgIG1heHpvb206IG51bWJlcjtcbiAgICB1cmw6IHN0cmluZztcbiAgICBzY2hlbWU6IHN0cmluZztcbiAgICB0aWxlU2l6ZTogbnVtYmVyO1xuXG4gICAgX29wdGlvbnM6IFZlY3RvclNvdXJjZVNwZWNpZmljYXRpb247XG4gICAgX2NvbGxlY3RSZXNvdXJjZVRpbWluZzogYm9vbGVhbjtcbiAgICBkaXNwYXRjaGVyOiBEaXNwYXRjaGVyO1xuICAgIG1hcDogTWFwO1xuICAgIGJvdW5kczogP1tudW1iZXIsIG51bWJlciwgbnVtYmVyLCBudW1iZXJdO1xuICAgIHRpbGVzOiBBcnJheTxzdHJpbmc+O1xuICAgIHRpbGVCb3VuZHM6IFRpbGVCb3VuZHM7XG4gICAgcmVwYXJzZU92ZXJzY2FsZWQ6IGJvb2xlYW47XG4gICAgaXNUaWxlQ2xpcHBlZDogYm9vbGVhbjtcbiAgICBfdGlsZUpTT05SZXF1ZXN0OiA/Q2FuY2VsYWJsZTtcblxuICAgIGNvbnN0cnVjdG9yKGlkOiBzdHJpbmcsIG9wdGlvbnM6IFZlY3RvclNvdXJjZVNwZWNpZmljYXRpb24gJiB7Y29sbGVjdFJlc291cmNlVGltaW5nOiBib29sZWFufSwgZGlzcGF0Y2hlcjogRGlzcGF0Y2hlciwgZXZlbnRlZFBhcmVudDogRXZlbnRlZCkge1xuICAgICAgICBzdXBlcigpO1xuICAgICAgICB0aGlzLmlkID0gaWQ7XG4gICAgICAgIHRoaXMuZGlzcGF0Y2hlciA9IGRpc3BhdGNoZXI7XG5cbiAgICAgICAgdGhpcy50eXBlID0gJ3ZlY3Rvcic7XG4gICAgICAgIHRoaXMubWluem9vbSA9IDA7XG4gICAgICAgIHRoaXMubWF4em9vbSA9IDIyO1xuICAgICAgICB0aGlzLnNjaGVtZSA9ICd4eXonO1xuICAgICAgICB0aGlzLnRpbGVTaXplID0gNTEyO1xuICAgICAgICB0aGlzLnJlcGFyc2VPdmVyc2NhbGVkID0gdHJ1ZTtcbiAgICAgICAgdGhpcy5pc1RpbGVDbGlwcGVkID0gdHJ1ZTtcblxuICAgICAgICBleHRlbmQodGhpcywgcGljayhvcHRpb25zLCBbJ3VybCcsICdzY2hlbWUnLCAndGlsZVNpemUnXSkpO1xuICAgICAgICB0aGlzLl9vcHRpb25zID0gZXh0ZW5kKHsgdHlwZTogJ3ZlY3RvcicgfSwgb3B0aW9ucyk7XG5cbiAgICAgICAgdGhpcy5fY29sbGVjdFJlc291cmNlVGltaW5nID0gb3B0aW9ucy5jb2xsZWN0UmVzb3VyY2VUaW1pbmc7XG5cbiAgICAgICAgaWYgKHRoaXMudGlsZVNpemUgIT09IDUxMikge1xuICAgICAgICAgICAgdGhyb3cgbmV3IEVycm9yKCd2ZWN0b3IgdGlsZSBzb3VyY2VzIG11c3QgaGF2ZSBhIHRpbGVTaXplIG9mIDUxMicpO1xuICAgICAgICB9XG5cbiAgICAgICAgdGhpcy5zZXRFdmVudGVkUGFyZW50KGV2ZW50ZWRQYXJlbnQpO1xuICAgIH1cblxuICAgIGxvYWQoKSB7XG4gICAgICAgIHRoaXMuZmlyZShuZXcgRXZlbnQoJ2RhdGFsb2FkaW5nJywge2RhdGFUeXBlOiAnc291cmNlJ30pKTtcbiAgICAgICAgdGhpcy5fdGlsZUpTT05SZXF1ZXN0ID0gbG9hZFRpbGVKU09OKHRoaXMuX29wdGlvbnMsIHRoaXMubWFwLl90cmFuc2Zvcm1SZXF1ZXN0LCAoZXJyLCB0aWxlSlNPTikgPT4ge1xuICAgICAgICAgICAgdGhpcy5fdGlsZUpTT05SZXF1ZXN0ID0gbnVsbDtcbiAgICAgICAgICAgIGlmIChlcnIpIHtcbiAgICAgICAgICAgICAgICB0aGlzLmZpcmUobmV3IEVycm9yRXZlbnQoZXJyKSk7XG4gICAgICAgICAgICB9IGVsc2UgaWYgKHRpbGVKU09OKSB7XG4gICAgICAgICAgICAgICAgZXh0ZW5kKHRoaXMsIHRpbGVKU09OKTtcbiAgICAgICAgICAgICAgICBpZiAodGlsZUpTT04uYm91bmRzKSB0aGlzLnRpbGVCb3VuZHMgPSBuZXcgVGlsZUJvdW5kcyh0aWxlSlNPTi5ib3VuZHMsIHRoaXMubWluem9vbSwgdGhpcy5tYXh6b29tKTtcblxuICAgICAgICAgICAgICAgIHBvc3RUdXJuc3RpbGVFdmVudCh0aWxlSlNPTi50aWxlcyk7XG5cbiAgICAgICAgICAgICAgICAvLyBgY29udGVudGAgaXMgaW5jbHVkZWQgaGVyZSB0byBwcmV2ZW50IGEgcmFjZSBjb25kaXRpb24gd2hlcmUgYFN0eWxlI191cGRhdGVTb3VyY2VzYCBpcyBjYWxsZWRcbiAgICAgICAgICAgICAgICAvLyBiZWZvcmUgdGhlIFRpbGVKU09OIGFycml2ZXMuIHRoaXMgbWFrZXMgc3VyZSB0aGUgdGlsZXMgbmVlZGVkIGFyZSBsb2FkZWQgb25jZSBUaWxlSlNPTiBhcnJpdmVzXG4gICAgICAgICAgICAgICAgLy8gcmVmOiBodHRwczovL2dpdGh1Yi5jb20vbWFwYm94L21hcGJveC1nbC1qcy9wdWxsLzQzNDcjZGlzY3Vzc2lvbl9yMTA0NDE4MDg4XG4gICAgICAgICAgICAgICAgdGhpcy5maXJlKG5ldyBFdmVudCgnZGF0YScsIHtkYXRhVHlwZTogJ3NvdXJjZScsIHNvdXJjZURhdGFUeXBlOiAnbWV0YWRhdGEnfSkpO1xuICAgICAgICAgICAgICAgIHRoaXMuZmlyZShuZXcgRXZlbnQoJ2RhdGEnLCB7ZGF0YVR5cGU6ICdzb3VyY2UnLCBzb3VyY2VEYXRhVHlwZTogJ2NvbnRlbnQnfSkpO1xuICAgICAgICAgICAgfVxuICAgICAgICB9KTtcbiAgICB9XG5cbiAgICBoYXNUaWxlKHRpbGVJRDogT3ZlcnNjYWxlZFRpbGVJRCkge1xuICAgICAgICByZXR1cm4gIXRoaXMudGlsZUJvdW5kcyB8fCB0aGlzLnRpbGVCb3VuZHMuY29udGFpbnModGlsZUlELmNhbm9uaWNhbCk7XG4gICAgfVxuXG4gICAgb25BZGQobWFwOiBNYXApIHtcbiAgICAgICAgdGhpcy5tYXAgPSBtYXA7XG4gICAgICAgIHRoaXMubG9hZCgpO1xuICAgIH1cblxuICAgIG9uUmVtb3ZlKCkge1xuICAgICAgICBpZiAodGhpcy5fdGlsZUpTT05SZXF1ZXN0KSB7XG4gICAgICAgICAgICB0aGlzLl90aWxlSlNPTlJlcXVlc3QuY2FuY2VsKCk7XG4gICAgICAgICAgICB0aGlzLl90aWxlSlNPTlJlcXVlc3QgPSBudWxsO1xuICAgICAgICB9XG4gICAgfVxuXG4gICAgc2VyaWFsaXplKCkge1xuICAgICAgICByZXR1cm4gZXh0ZW5kKHt9LCB0aGlzLl9vcHRpb25zKTtcbiAgICB9XG5cbiAgICBsb2FkVGlsZSh0aWxlOiBUaWxlLCBjYWxsYmFjazogQ2FsbGJhY2s8dm9pZD4pIHtcbiAgICAgICAgY29uc3QgdXJsID0gbm9ybWFsaXplVVJMKHRpbGUudGlsZUlELmNhbm9uaWNhbC51cmwodGhpcy50aWxlcywgdGhpcy5zY2hlbWUpLCB0aGlzLnVybCk7XG4gICAgICAgIGNvbnN0IHBhcmFtcyA9IHtcbiAgICAgICAgICAgIHJlcXVlc3Q6IHRoaXMubWFwLl90cmFuc2Zvcm1SZXF1ZXN0KHVybCwgUmVzb3VyY2VUeXBlLlRpbGUpLFxuICAgICAgICAgICAgdWlkOiB0aWxlLnVpZCxcbiAgICAgICAgICAgIHRpbGVJRDogdGlsZS50aWxlSUQsXG4gICAgICAgICAgICB6b29tOiB0aWxlLnRpbGVJRC5vdmVyc2NhbGVkWixcbiAgICAgICAgICAgIHRpbGVTaXplOiB0aGlzLnRpbGVTaXplICogdGlsZS50aWxlSUQub3ZlcnNjYWxlRmFjdG9yKCksXG4gICAgICAgICAgICB0eXBlOiB0aGlzLnR5cGUsXG4gICAgICAgICAgICBzb3VyY2U6IHRoaXMuaWQsXG4gICAgICAgICAgICBwaXhlbFJhdGlvOiBicm93c2VyLmRldmljZVBpeGVsUmF0aW8sXG4gICAgICAgICAgICBzaG93Q29sbGlzaW9uQm94ZXM6IHRoaXMubWFwLnNob3dDb2xsaXNpb25Cb3hlcyxcbiAgICAgICAgfTtcbiAgICAgICAgcGFyYW1zLnJlcXVlc3QuY29sbGVjdFJlc291cmNlVGltaW5nID0gdGhpcy5fY29sbGVjdFJlc291cmNlVGltaW5nO1xuXG4gICAgICAgIGlmICh0aWxlLndvcmtlcklEID09PSB1bmRlZmluZWQgfHwgdGlsZS5zdGF0ZSA9PT0gJ2V4cGlyZWQnKSB7XG4gICAgICAgICAgICB0aWxlLndvcmtlcklEID0gdGhpcy5kaXNwYXRjaGVyLnNlbmQoJ2xvYWRUaWxlJywgcGFyYW1zLCBkb25lLmJpbmQodGhpcykpO1xuICAgICAgICB9IGVsc2UgaWYgKHRpbGUuc3RhdGUgPT09ICdsb2FkaW5nJykge1xuICAgICAgICAgICAgLy8gc2NoZWR1bGUgdGlsZSByZWxvYWRpbmcgYWZ0ZXIgaXQgaGFzIGJlZW4gbG9hZGVkXG4gICAgICAgICAgICB0aWxlLnJlbG9hZENhbGxiYWNrID0gY2FsbGJhY2s7XG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICB0aGlzLmRpc3BhdGNoZXIuc2VuZCgncmVsb2FkVGlsZScsIHBhcmFtcywgZG9uZS5iaW5kKHRoaXMpLCB0aWxlLndvcmtlcklEKTtcbiAgICAgICAgfVxuXG4gICAgICAgIGZ1bmN0aW9uIGRvbmUoZXJyLCBkYXRhKSB7XG4gICAgICAgICAgICBpZiAodGlsZS5hYm9ydGVkKVxuICAgICAgICAgICAgICAgIHJldHVybiBjYWxsYmFjayhudWxsKTtcblxuICAgICAgICAgICAgaWYgKGVyciAmJiBlcnIuc3RhdHVzICE9PSA0MDQpIHtcbiAgICAgICAgICAgICAgICByZXR1cm4gY2FsbGJhY2soZXJyKTtcbiAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgaWYgKGRhdGEgJiYgZGF0YS5yZXNvdXJjZVRpbWluZylcbiAgICAgICAgICAgICAgICB0aWxlLnJlc291cmNlVGltaW5nID0gZGF0YS5yZXNvdXJjZVRpbWluZztcblxuICAgICAgICAgICAgaWYgKHRoaXMubWFwLl9yZWZyZXNoRXhwaXJlZFRpbGVzICYmIGRhdGEpIHRpbGUuc2V0RXhwaXJ5RGF0YShkYXRhKTtcbiAgICAgICAgICAgIHRpbGUubG9hZFZlY3RvckRhdGEoZGF0YSwgdGhpcy5tYXAucGFpbnRlcik7XG5cbiAgICAgICAgICAgIGNhbGxiYWNrKG51bGwpO1xuXG4gICAgICAgICAgICBpZiAodGlsZS5yZWxvYWRDYWxsYmFjaykge1xuICAgICAgICAgICAgICAgIHRoaXMubG9hZFRpbGUodGlsZSwgdGlsZS5yZWxvYWRDYWxsYmFjayk7XG4gICAgICAgICAgICAgICAgdGlsZS5yZWxvYWRDYWxsYmFjayA9IG51bGw7XG4gICAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICB9XG5cbiAgICBhYm9ydFRpbGUodGlsZTogVGlsZSkge1xuICAgICAgICB0aGlzLmRpc3BhdGNoZXIuc2VuZCgnYWJvcnRUaWxlJywgeyB1aWQ6IHRpbGUudWlkLCB0eXBlOiB0aGlzLnR5cGUsIHNvdXJjZTogdGhpcy5pZCB9LCB1bmRlZmluZWQsIHRpbGUud29ya2VySUQpO1xuICAgIH1cblxuICAgIHVubG9hZFRpbGUodGlsZTogVGlsZSkge1xuICAgICAgICB0aWxlLnVubG9hZFZlY3RvckRhdGEoKTtcbiAgICAgICAgdGhpcy5kaXNwYXRjaGVyLnNlbmQoJ3JlbW92ZVRpbGUnLCB7IHVpZDogdGlsZS51aWQsIHR5cGU6IHRoaXMudHlwZSwgc291cmNlOiB0aGlzLmlkIH0sIHVuZGVmaW5lZCwgdGlsZS53b3JrZXJJRCk7XG4gICAgfVxuXG4gICAgaGFzVHJhbnNpdGlvbigpIHtcbiAgICAgICAgcmV0dXJuIGZhbHNlO1xuICAgIH1cbn1cblxuZXhwb3J0IGRlZmF1bHQgVmVjdG9yVGlsZVNvdXJjZTtcbiIsIi8vIEBmbG93XG5cbmltcG9ydCB7IGV4dGVuZCwgcGljayB9IGZyb20gJy4uL3V0aWwvdXRpbCc7XG5cbmltcG9ydCB7IGdldEltYWdlLCBSZXNvdXJjZVR5cGUgfSBmcm9tICcuLi91dGlsL2FqYXgnO1xuaW1wb3J0IHsgRXZlbnQsIEVycm9yRXZlbnQsIEV2ZW50ZWQgfSBmcm9tICcuLi91dGlsL2V2ZW50ZWQnO1xuaW1wb3J0IGxvYWRUaWxlSlNPTiBmcm9tICcuL2xvYWRfdGlsZWpzb24nO1xuaW1wb3J0IHsgbm9ybWFsaXplVGlsZVVSTCBhcyBub3JtYWxpemVVUkwsIHBvc3RUdXJuc3RpbGVFdmVudCB9IGZyb20gJy4uL3V0aWwvbWFwYm94JztcbmltcG9ydCBUaWxlQm91bmRzIGZyb20gJy4vdGlsZV9ib3VuZHMnO1xuaW1wb3J0IFRleHR1cmUgZnJvbSAnLi4vcmVuZGVyL3RleHR1cmUnO1xuXG5pbXBvcnQgdHlwZSB7U291cmNlfSBmcm9tICcuL3NvdXJjZSc7XG5pbXBvcnQgdHlwZSB7T3ZlcnNjYWxlZFRpbGVJRH0gZnJvbSAnLi90aWxlX2lkJztcbmltcG9ydCB0eXBlIE1hcCBmcm9tICcuLi91aS9tYXAnO1xuaW1wb3J0IHR5cGUgRGlzcGF0Y2hlciBmcm9tICcuLi91dGlsL2Rpc3BhdGNoZXInO1xuaW1wb3J0IHR5cGUgVGlsZSBmcm9tICcuL3RpbGUnO1xuaW1wb3J0IHR5cGUge0NhbGxiYWNrfSBmcm9tICcuLi90eXBlcy9jYWxsYmFjayc7XG5pbXBvcnQgdHlwZSB7Q2FuY2VsYWJsZX0gZnJvbSAnLi4vdHlwZXMvY2FuY2VsYWJsZSc7XG5pbXBvcnQgdHlwZSB7XG4gICAgUmFzdGVyU291cmNlU3BlY2lmaWNhdGlvbixcbiAgICBSYXN0ZXJERU1Tb3VyY2VTcGVjaWZpY2F0aW9uXG59IGZyb20gJy4uL3N0eWxlLXNwZWMvdHlwZXMnO1xuXG5jbGFzcyBSYXN0ZXJUaWxlU291cmNlIGV4dGVuZHMgRXZlbnRlZCBpbXBsZW1lbnRzIFNvdXJjZSB7XG4gICAgdHlwZTogJ3Jhc3RlcicgfCAncmFzdGVyLWRlbSc7XG4gICAgaWQ6IHN0cmluZztcbiAgICBtaW56b29tOiBudW1iZXI7XG4gICAgbWF4em9vbTogbnVtYmVyO1xuICAgIHVybDogc3RyaW5nO1xuICAgIHNjaGVtZTogc3RyaW5nO1xuICAgIHRpbGVTaXplOiBudW1iZXI7XG5cbiAgICBib3VuZHM6ID9bbnVtYmVyLCBudW1iZXIsIG51bWJlciwgbnVtYmVyXTtcbiAgICB0aWxlQm91bmRzOiBUaWxlQm91bmRzO1xuICAgIHJvdW5kWm9vbTogYm9vbGVhbjtcbiAgICBkaXNwYXRjaGVyOiBEaXNwYXRjaGVyO1xuICAgIG1hcDogTWFwO1xuICAgIHRpbGVzOiBBcnJheTxzdHJpbmc+O1xuXG4gICAgX2xvYWRlZDogYm9vbGVhbjtcbiAgICBfb3B0aW9uczogUmFzdGVyU291cmNlU3BlY2lmaWNhdGlvbiB8IFJhc3RlckRFTVNvdXJjZVNwZWNpZmljYXRpb247XG4gICAgX3RpbGVKU09OUmVxdWVzdDogP0NhbmNlbGFibGU7XG5cbiAgICBjb25zdHJ1Y3RvcihpZDogc3RyaW5nLCBvcHRpb25zOiBSYXN0ZXJTb3VyY2VTcGVjaWZpY2F0aW9uIHwgUmFzdGVyREVNU291cmNlU3BlY2lmaWNhdGlvbiwgZGlzcGF0Y2hlcjogRGlzcGF0Y2hlciwgZXZlbnRlZFBhcmVudDogRXZlbnRlZCkge1xuICAgICAgICBzdXBlcigpO1xuICAgICAgICB0aGlzLmlkID0gaWQ7XG4gICAgICAgIHRoaXMuZGlzcGF0Y2hlciA9IGRpc3BhdGNoZXI7XG4gICAgICAgIHRoaXMuc2V0RXZlbnRlZFBhcmVudChldmVudGVkUGFyZW50KTtcblxuICAgICAgICB0aGlzLnR5cGUgPSAncmFzdGVyJztcbiAgICAgICAgdGhpcy5taW56b29tID0gMDtcbiAgICAgICAgdGhpcy5tYXh6b29tID0gMjI7XG4gICAgICAgIHRoaXMucm91bmRab29tID0gdHJ1ZTtcbiAgICAgICAgdGhpcy5zY2hlbWUgPSAneHl6JztcbiAgICAgICAgdGhpcy50aWxlU2l6ZSA9IDUxMjtcbiAgICAgICAgdGhpcy5fbG9hZGVkID0gZmFsc2U7XG5cbiAgICAgICAgdGhpcy5fb3B0aW9ucyA9IGV4dGVuZCh7fSwgb3B0aW9ucyk7XG4gICAgICAgIGV4dGVuZCh0aGlzLCBwaWNrKG9wdGlvbnMsIFsndXJsJywgJ3NjaGVtZScsICd0aWxlU2l6ZSddKSk7XG4gICAgfVxuXG4gICAgbG9hZCgpIHtcbiAgICAgICAgdGhpcy5maXJlKG5ldyBFdmVudCgnZGF0YWxvYWRpbmcnLCB7ZGF0YVR5cGU6ICdzb3VyY2UnfSkpO1xuICAgICAgICB0aGlzLl90aWxlSlNPTlJlcXVlc3QgPSBsb2FkVGlsZUpTT04odGhpcy5fb3B0aW9ucywgdGhpcy5tYXAuX3RyYW5zZm9ybVJlcXVlc3QsIChlcnIsIHRpbGVKU09OKSA9PiB7XG4gICAgICAgICAgICB0aGlzLl90aWxlSlNPTlJlcXVlc3QgPSBudWxsO1xuICAgICAgICAgICAgaWYgKGVycikge1xuICAgICAgICAgICAgICAgIHRoaXMuZmlyZShuZXcgRXJyb3JFdmVudChlcnIpKTtcbiAgICAgICAgICAgIH0gZWxzZSBpZiAodGlsZUpTT04pIHtcbiAgICAgICAgICAgICAgICBleHRlbmQodGhpcywgdGlsZUpTT04pO1xuICAgICAgICAgICAgICAgIGlmICh0aWxlSlNPTi5ib3VuZHMpIHRoaXMudGlsZUJvdW5kcyA9IG5ldyBUaWxlQm91bmRzKHRpbGVKU09OLmJvdW5kcywgdGhpcy5taW56b29tLCB0aGlzLm1heHpvb20pO1xuXG4gICAgICAgICAgICAgICAgcG9zdFR1cm5zdGlsZUV2ZW50KHRpbGVKU09OLnRpbGVzKTtcblxuICAgICAgICAgICAgICAgIC8vIGBjb250ZW50YCBpcyBpbmNsdWRlZCBoZXJlIHRvIHByZXZlbnQgYSByYWNlIGNvbmRpdGlvbiB3aGVyZSBgU3R5bGUjX3VwZGF0ZVNvdXJjZXNgIGlzIGNhbGxlZFxuICAgICAgICAgICAgICAgIC8vIGJlZm9yZSB0aGUgVGlsZUpTT04gYXJyaXZlcy4gdGhpcyBtYWtlcyBzdXJlIHRoZSB0aWxlcyBuZWVkZWQgYXJlIGxvYWRlZCBvbmNlIFRpbGVKU09OIGFycml2ZXNcbiAgICAgICAgICAgICAgICAvLyByZWY6IGh0dHBzOi8vZ2l0aHViLmNvbS9tYXBib3gvbWFwYm94LWdsLWpzL3B1bGwvNDM0NyNkaXNjdXNzaW9uX3IxMDQ0MTgwODhcbiAgICAgICAgICAgICAgICB0aGlzLmZpcmUobmV3IEV2ZW50KCdkYXRhJywge2RhdGFUeXBlOiAnc291cmNlJywgc291cmNlRGF0YVR5cGU6ICdtZXRhZGF0YSd9KSk7XG4gICAgICAgICAgICAgICAgdGhpcy5maXJlKG5ldyBFdmVudCgnZGF0YScsIHtkYXRhVHlwZTogJ3NvdXJjZScsIHNvdXJjZURhdGFUeXBlOiAnY29udGVudCd9KSk7XG4gICAgICAgICAgICB9XG4gICAgICAgIH0pO1xuICAgIH1cblxuICAgIG9uQWRkKG1hcDogTWFwKSB7XG4gICAgICAgIHRoaXMubWFwID0gbWFwO1xuICAgICAgICB0aGlzLmxvYWQoKTtcbiAgICB9XG5cbiAgICBvblJlbW92ZSgpIHtcbiAgICAgICAgaWYgKHRoaXMuX3RpbGVKU09OUmVxdWVzdCkge1xuICAgICAgICAgICAgdGhpcy5fdGlsZUpTT05SZXF1ZXN0LmNhbmNlbCgpO1xuICAgICAgICAgICAgdGhpcy5fdGlsZUpTT05SZXF1ZXN0ID0gbnVsbDtcbiAgICAgICAgfVxuICAgIH1cblxuICAgIHNlcmlhbGl6ZSgpIHtcbiAgICAgICAgcmV0dXJuIGV4dGVuZCh7fSwgdGhpcy5fb3B0aW9ucyk7XG4gICAgfVxuXG4gICAgaGFzVGlsZSh0aWxlSUQ6IE92ZXJzY2FsZWRUaWxlSUQpIHtcbiAgICAgICAgcmV0dXJuICF0aGlzLnRpbGVCb3VuZHMgfHwgdGhpcy50aWxlQm91bmRzLmNvbnRhaW5zKHRpbGVJRC5jYW5vbmljYWwpO1xuICAgIH1cblxuICAgIGxvYWRUaWxlKHRpbGU6IFRpbGUsIGNhbGxiYWNrOiBDYWxsYmFjazx2b2lkPikge1xuICAgICAgICBjb25zdCB1cmwgPSBub3JtYWxpemVVUkwodGlsZS50aWxlSUQuY2Fub25pY2FsLnVybCh0aGlzLnRpbGVzLCB0aGlzLnNjaGVtZSksIHRoaXMudXJsLCB0aGlzLnRpbGVTaXplKTtcbiAgICAgICAgdGlsZS5yZXF1ZXN0ID0gZ2V0SW1hZ2UodGhpcy5tYXAuX3RyYW5zZm9ybVJlcXVlc3QodXJsLCBSZXNvdXJjZVR5cGUuVGlsZSksIChlcnIsIGltZykgPT4ge1xuICAgICAgICAgICAgZGVsZXRlIHRpbGUucmVxdWVzdDtcblxuICAgICAgICAgICAgaWYgKHRpbGUuYWJvcnRlZCkge1xuICAgICAgICAgICAgICAgIHRpbGUuc3RhdGUgPSAndW5sb2FkZWQnO1xuICAgICAgICAgICAgICAgIGNhbGxiYWNrKG51bGwpO1xuICAgICAgICAgICAgfSBlbHNlIGlmIChlcnIpIHtcbiAgICAgICAgICAgICAgICB0aWxlLnN0YXRlID0gJ2Vycm9yZWQnO1xuICAgICAgICAgICAgICAgIGNhbGxiYWNrKGVycik7XG4gICAgICAgICAgICB9IGVsc2UgaWYgKGltZykge1xuICAgICAgICAgICAgICAgIGlmICh0aGlzLm1hcC5fcmVmcmVzaEV4cGlyZWRUaWxlcykgdGlsZS5zZXRFeHBpcnlEYXRhKGltZyk7XG4gICAgICAgICAgICAgICAgZGVsZXRlIChpbWc6IGFueSkuY2FjaGVDb250cm9sO1xuICAgICAgICAgICAgICAgIGRlbGV0ZSAoaW1nOiBhbnkpLmV4cGlyZXM7XG5cbiAgICAgICAgICAgICAgICBjb25zdCBjb250ZXh0ID0gdGhpcy5tYXAucGFpbnRlci5jb250ZXh0O1xuICAgICAgICAgICAgICAgIGNvbnN0IGdsID0gY29udGV4dC5nbDtcbiAgICAgICAgICAgICAgICB0aWxlLnRleHR1cmUgPSB0aGlzLm1hcC5wYWludGVyLmdldFRpbGVUZXh0dXJlKGltZy53aWR0aCk7XG4gICAgICAgICAgICAgICAgaWYgKHRpbGUudGV4dHVyZSkge1xuICAgICAgICAgICAgICAgICAgICB0aWxlLnRleHR1cmUudXBkYXRlKGltZywgeyB1c2VNaXBtYXA6IHRydWUgfSk7XG4gICAgICAgICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgICAgICAgICAgdGlsZS50ZXh0dXJlID0gbmV3IFRleHR1cmUoY29udGV4dCwgaW1nLCBnbC5SR0JBLCB7IHVzZU1pcG1hcDogdHJ1ZSB9KTtcbiAgICAgICAgICAgICAgICAgICAgdGlsZS50ZXh0dXJlLmJpbmQoZ2wuTElORUFSLCBnbC5DTEFNUF9UT19FREdFLCBnbC5MSU5FQVJfTUlQTUFQX05FQVJFU1QpO1xuXG4gICAgICAgICAgICAgICAgICAgIGlmIChjb250ZXh0LmV4dFRleHR1cmVGaWx0ZXJBbmlzb3Ryb3BpYykge1xuICAgICAgICAgICAgICAgICAgICAgICAgZ2wudGV4UGFyYW1ldGVyZihnbC5URVhUVVJFXzJELCBjb250ZXh0LmV4dFRleHR1cmVGaWx0ZXJBbmlzb3Ryb3BpYy5URVhUVVJFX01BWF9BTklTT1RST1BZX0VYVCwgY29udGV4dC5leHRUZXh0dXJlRmlsdGVyQW5pc290cm9waWNNYXgpO1xuICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICAgICAgdGlsZS5zdGF0ZSA9ICdsb2FkZWQnO1xuXG4gICAgICAgICAgICAgICAgY2FsbGJhY2sobnVsbCk7XG4gICAgICAgICAgICB9XG4gICAgICAgIH0pO1xuICAgIH1cblxuICAgIGFib3J0VGlsZSh0aWxlOiBUaWxlLCBjYWxsYmFjazogQ2FsbGJhY2s8dm9pZD4pIHtcbiAgICAgICAgaWYgKHRpbGUucmVxdWVzdCkge1xuICAgICAgICAgICAgdGlsZS5yZXF1ZXN0LmNhbmNlbCgpO1xuICAgICAgICAgICAgZGVsZXRlIHRpbGUucmVxdWVzdDtcbiAgICAgICAgfVxuICAgICAgICBjYWxsYmFjaygpO1xuICAgIH1cblxuICAgIHVubG9hZFRpbGUodGlsZTogVGlsZSwgY2FsbGJhY2s6IENhbGxiYWNrPHZvaWQ+KSB7XG4gICAgICAgIGlmICh0aWxlLnRleHR1cmUpIHRoaXMubWFwLnBhaW50ZXIuc2F2ZVRpbGVUZXh0dXJlKHRpbGUudGV4dHVyZSk7XG4gICAgICAgIGNhbGxiYWNrKCk7XG4gICAgfVxuXG4gICAgaGFzVHJhbnNpdGlvbigpIHtcbiAgICAgICAgcmV0dXJuIGZhbHNlO1xuICAgIH1cbn1cblxuZXhwb3J0IGRlZmF1bHQgUmFzdGVyVGlsZVNvdXJjZTtcbiIsIi8vIEBmbG93XG5cbmltcG9ydCB7IGdldEltYWdlLCBSZXNvdXJjZVR5cGUgfSBmcm9tICcuLi91dGlsL2FqYXgnO1xuaW1wb3J0IHsgZXh0ZW5kIH0gZnJvbSAnLi4vdXRpbC91dGlsJztcbmltcG9ydCB7IEV2ZW50ZWQgfSBmcm9tICcuLi91dGlsL2V2ZW50ZWQnO1xuaW1wb3J0IHsgbm9ybWFsaXplVGlsZVVSTCBhcyBub3JtYWxpemVVUkwgfSBmcm9tICcuLi91dGlsL21hcGJveCc7XG5pbXBvcnQgYnJvd3NlciBmcm9tICcuLi91dGlsL2Jyb3dzZXInO1xuaW1wb3J0IHsgT3ZlcnNjYWxlZFRpbGVJRCB9IGZyb20gJy4vdGlsZV9pZCc7XG5pbXBvcnQgUmFzdGVyVGlsZVNvdXJjZSBmcm9tICcuL3Jhc3Rlcl90aWxlX3NvdXJjZSc7XG4vLyBlbnN1cmUgREVNRGF0YSBpcyByZWdpc3RlcmVkIGZvciB3b3JrZXIgdHJhbnNmZXIgb24gbWFpbiB0aHJlYWQ6XG5pbXBvcnQgJy4uL2RhdGEvZGVtX2RhdGEnO1xuXG5pbXBvcnQgdHlwZSB7U291cmNlfSBmcm9tICcuL3NvdXJjZSc7XG5pbXBvcnQgdHlwZSBEaXNwYXRjaGVyIGZyb20gJy4uL3V0aWwvZGlzcGF0Y2hlcic7XG5pbXBvcnQgdHlwZSBUaWxlIGZyb20gJy4vdGlsZSc7XG5pbXBvcnQgdHlwZSB7Q2FsbGJhY2t9IGZyb20gJy4uL3R5cGVzL2NhbGxiYWNrJztcbmltcG9ydCB0eXBlIHtSYXN0ZXJERU1Tb3VyY2VTcGVjaWZpY2F0aW9ufSBmcm9tICcuLi9zdHlsZS1zcGVjL3R5cGVzJztcblxuXG5jbGFzcyBSYXN0ZXJERU1UaWxlU291cmNlIGV4dGVuZHMgUmFzdGVyVGlsZVNvdXJjZSBpbXBsZW1lbnRzIFNvdXJjZSB7XG4gICAgZW5jb2Rpbmc6IFwibWFwYm94XCIgfCBcInRlcnJhcml1bVwiO1xuXG4gICAgY29uc3RydWN0b3IoaWQ6IHN0cmluZywgb3B0aW9uczogUmFzdGVyREVNU291cmNlU3BlY2lmaWNhdGlvbiwgZGlzcGF0Y2hlcjogRGlzcGF0Y2hlciwgZXZlbnRlZFBhcmVudDogRXZlbnRlZCkge1xuICAgICAgICBzdXBlcihpZCwgb3B0aW9ucywgZGlzcGF0Y2hlciwgZXZlbnRlZFBhcmVudCk7XG4gICAgICAgIHRoaXMudHlwZSA9ICdyYXN0ZXItZGVtJztcbiAgICAgICAgdGhpcy5tYXh6b29tID0gMjI7XG4gICAgICAgIHRoaXMuX29wdGlvbnMgPSBleHRlbmQoe30sIG9wdGlvbnMpO1xuICAgICAgICB0aGlzLmVuY29kaW5nID0gb3B0aW9ucy5lbmNvZGluZyB8fCBcIm1hcGJveFwiO1xuICAgIH1cblxuICAgIHNlcmlhbGl6ZSgpIHtcbiAgICAgICAgcmV0dXJuIHtcbiAgICAgICAgICAgIHR5cGU6ICdyYXN0ZXItZGVtJyxcbiAgICAgICAgICAgIHVybDogdGhpcy51cmwsXG4gICAgICAgICAgICB0aWxlU2l6ZTogdGhpcy50aWxlU2l6ZSxcbiAgICAgICAgICAgIHRpbGVzOiB0aGlzLnRpbGVzLFxuICAgICAgICAgICAgYm91bmRzOiB0aGlzLmJvdW5kcyxcbiAgICAgICAgICAgIGVuY29kaW5nOiB0aGlzLmVuY29kaW5nXG4gICAgICAgIH07XG4gICAgfVxuXG4gICAgbG9hZFRpbGUodGlsZTogVGlsZSwgY2FsbGJhY2s6IENhbGxiYWNrPHZvaWQ+KSB7XG4gICAgICAgIGNvbnN0IHVybCA9IG5vcm1hbGl6ZVVSTCh0aWxlLnRpbGVJRC5jYW5vbmljYWwudXJsKHRoaXMudGlsZXMsIHRoaXMuc2NoZW1lKSwgdGhpcy51cmwsIHRoaXMudGlsZVNpemUpO1xuICAgICAgICB0aWxlLnJlcXVlc3QgPSBnZXRJbWFnZSh0aGlzLm1hcC5fdHJhbnNmb3JtUmVxdWVzdCh1cmwsIFJlc291cmNlVHlwZS5UaWxlKSwgaW1hZ2VMb2FkZWQuYmluZCh0aGlzKSk7XG5cbiAgICAgICAgdGlsZS5uZWlnaGJvcmluZ1RpbGVzID0gdGhpcy5fZ2V0TmVpZ2hib3JpbmdUaWxlcyh0aWxlLnRpbGVJRCk7XG4gICAgICAgIGZ1bmN0aW9uIGltYWdlTG9hZGVkKGVyciwgaW1nKSB7XG4gICAgICAgICAgICBkZWxldGUgdGlsZS5yZXF1ZXN0O1xuICAgICAgICAgICAgaWYgKHRpbGUuYWJvcnRlZCkge1xuICAgICAgICAgICAgICAgIHRpbGUuc3RhdGUgPSAndW5sb2FkZWQnO1xuICAgICAgICAgICAgICAgIGNhbGxiYWNrKG51bGwpO1xuICAgICAgICAgICAgfSBlbHNlIGlmIChlcnIpIHtcbiAgICAgICAgICAgICAgICB0aWxlLnN0YXRlID0gJ2Vycm9yZWQnO1xuICAgICAgICAgICAgICAgIGNhbGxiYWNrKGVycik7XG4gICAgICAgICAgICB9IGVsc2UgaWYgKGltZykge1xuICAgICAgICAgICAgICAgIGlmICh0aGlzLm1hcC5fcmVmcmVzaEV4cGlyZWRUaWxlcykgdGlsZS5zZXRFeHBpcnlEYXRhKGltZyk7XG4gICAgICAgICAgICAgICAgZGVsZXRlIChpbWc6IGFueSkuY2FjaGVDb250cm9sO1xuICAgICAgICAgICAgICAgIGRlbGV0ZSAoaW1nOiBhbnkpLmV4cGlyZXM7XG5cbiAgICAgICAgICAgICAgICBjb25zdCByYXdJbWFnZURhdGEgPSBicm93c2VyLmdldEltYWdlRGF0YShpbWcpO1xuICAgICAgICAgICAgICAgIGNvbnN0IHBhcmFtcyA9IHtcbiAgICAgICAgICAgICAgICAgICAgdWlkOiB0aWxlLnVpZCxcbiAgICAgICAgICAgICAgICAgICAgY29vcmQ6IHRpbGUudGlsZUlELFxuICAgICAgICAgICAgICAgICAgICBzb3VyY2U6IHRoaXMuaWQsXG4gICAgICAgICAgICAgICAgICAgIHJhd0ltYWdlRGF0YTogcmF3SW1hZ2VEYXRhLFxuICAgICAgICAgICAgICAgICAgICBlbmNvZGluZzogdGhpcy5lbmNvZGluZ1xuICAgICAgICAgICAgICAgIH07XG5cbiAgICAgICAgICAgICAgICBpZiAoIXRpbGUud29ya2VySUQgfHwgdGlsZS5zdGF0ZSA9PT0gJ2V4cGlyZWQnKSB7XG4gICAgICAgICAgICAgICAgICAgIHRpbGUud29ya2VySUQgPSB0aGlzLmRpc3BhdGNoZXIuc2VuZCgnbG9hZERFTVRpbGUnLCBwYXJhbXMsIGRvbmUuYmluZCh0aGlzKSk7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfVxuICAgICAgICB9XG5cbiAgICAgICAgZnVuY3Rpb24gZG9uZShlcnIsIGRlbSkge1xuICAgICAgICAgICAgaWYgKGVycikge1xuICAgICAgICAgICAgICAgIHRpbGUuc3RhdGUgPSAnZXJyb3JlZCc7XG4gICAgICAgICAgICAgICAgY2FsbGJhY2soZXJyKTtcbiAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgaWYgKGRlbSkge1xuICAgICAgICAgICAgICAgIHRpbGUuZGVtID0gZGVtO1xuICAgICAgICAgICAgICAgIHRpbGUubmVlZHNIaWxsc2hhZGVQcmVwYXJlID0gdHJ1ZTtcbiAgICAgICAgICAgICAgICB0aWxlLnN0YXRlID0gJ2xvYWRlZCc7XG4gICAgICAgICAgICAgICAgY2FsbGJhY2sobnVsbCk7XG4gICAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICB9XG5cblxuICAgIF9nZXROZWlnaGJvcmluZ1RpbGVzKHRpbGVJRDogT3ZlcnNjYWxlZFRpbGVJRCkge1xuICAgICAgICBjb25zdCBjYW5vbmljYWwgPSB0aWxlSUQuY2Fub25pY2FsO1xuICAgICAgICBjb25zdCBkaW0gPSBNYXRoLnBvdygyLCBjYW5vbmljYWwueik7XG5cbiAgICAgICAgY29uc3QgcHggPSAoY2Fub25pY2FsLnggLSAxICsgZGltKSAlIGRpbTtcbiAgICAgICAgY29uc3QgcHh3ID0gY2Fub25pY2FsLnggPT09IDAgPyB0aWxlSUQud3JhcCAtIDEgOiB0aWxlSUQud3JhcDtcbiAgICAgICAgY29uc3QgbnggPSAoY2Fub25pY2FsLnggKyAxICsgZGltKSAlIGRpbTtcbiAgICAgICAgY29uc3Qgbnh3ID0gY2Fub25pY2FsLnggKyAxID09PSBkaW0gPyB0aWxlSUQud3JhcCArIDEgOiB0aWxlSUQud3JhcDtcblxuICAgICAgICBjb25zdCBuZWlnaGJvcmluZ1RpbGVzID0ge307XG4gICAgICAgIC8vIGFkZCBhZGphY2VudCB0aWxlc1xuICAgICAgICBuZWlnaGJvcmluZ1RpbGVzW25ldyBPdmVyc2NhbGVkVGlsZUlEKHRpbGVJRC5vdmVyc2NhbGVkWiwgcHh3LCBjYW5vbmljYWwueiwgcHgsIGNhbm9uaWNhbC55KS5rZXldID0ge2JhY2tmaWxsZWQ6IGZhbHNlfTtcbiAgICAgICAgbmVpZ2hib3JpbmdUaWxlc1tuZXcgT3ZlcnNjYWxlZFRpbGVJRCh0aWxlSUQub3ZlcnNjYWxlZFosIG54dywgY2Fub25pY2FsLnosIG54LCBjYW5vbmljYWwueSkua2V5XSA9IHtiYWNrZmlsbGVkOiBmYWxzZX07XG5cbiAgICAgICAgLy8gQWRkIHVwcGVyIG5laWdoYm9yaW5nVGlsZXNcbiAgICAgICAgaWYgKGNhbm9uaWNhbC55ID4gMCkge1xuICAgICAgICAgICAgbmVpZ2hib3JpbmdUaWxlc1tuZXcgT3ZlcnNjYWxlZFRpbGVJRCh0aWxlSUQub3ZlcnNjYWxlZFosIHB4dywgY2Fub25pY2FsLnosIHB4LCBjYW5vbmljYWwueSAtIDEpLmtleV0gPSB7YmFja2ZpbGxlZDogZmFsc2V9O1xuICAgICAgICAgICAgbmVpZ2hib3JpbmdUaWxlc1tuZXcgT3ZlcnNjYWxlZFRpbGVJRCh0aWxlSUQub3ZlcnNjYWxlZFosIHRpbGVJRC53cmFwLCBjYW5vbmljYWwueiwgY2Fub25pY2FsLngsIGNhbm9uaWNhbC55IC0gMSkua2V5XSA9IHtiYWNrZmlsbGVkOiBmYWxzZX07XG4gICAgICAgICAgICBuZWlnaGJvcmluZ1RpbGVzW25ldyBPdmVyc2NhbGVkVGlsZUlEKHRpbGVJRC5vdmVyc2NhbGVkWiwgbnh3LCBjYW5vbmljYWwueiwgbngsIGNhbm9uaWNhbC55IC0gMSkua2V5XSA9IHtiYWNrZmlsbGVkOiBmYWxzZX07XG4gICAgICAgIH1cbiAgICAgICAgLy8gQWRkIGxvd2VyIG5laWdoYm9yaW5nVGlsZXNcbiAgICAgICAgaWYgKGNhbm9uaWNhbC55ICsgMSA8IGRpbSkge1xuICAgICAgICAgICAgbmVpZ2hib3JpbmdUaWxlc1tuZXcgT3ZlcnNjYWxlZFRpbGVJRCh0aWxlSUQub3ZlcnNjYWxlZFosIHB4dywgY2Fub25pY2FsLnosIHB4LCBjYW5vbmljYWwueSArIDEpLmtleV0gPSB7YmFja2ZpbGxlZDogZmFsc2V9O1xuICAgICAgICAgICAgbmVpZ2hib3JpbmdUaWxlc1tuZXcgT3ZlcnNjYWxlZFRpbGVJRCh0aWxlSUQub3ZlcnNjYWxlZFosIHRpbGVJRC53cmFwLCBjYW5vbmljYWwueiwgY2Fub25pY2FsLngsIGNhbm9uaWNhbC55ICsgMSkua2V5XSA9IHtiYWNrZmlsbGVkOiBmYWxzZX07XG4gICAgICAgICAgICBuZWlnaGJvcmluZ1RpbGVzW25ldyBPdmVyc2NhbGVkVGlsZUlEKHRpbGVJRC5vdmVyc2NhbGVkWiwgbnh3LCBjYW5vbmljYWwueiwgbngsIGNhbm9uaWNhbC55ICsgMSkua2V5XSA9IHtiYWNrZmlsbGVkOiBmYWxzZX07XG4gICAgICAgIH1cblxuICAgICAgICByZXR1cm4gbmVpZ2hib3JpbmdUaWxlcztcbiAgICB9XG5cblxuICAgIHVubG9hZFRpbGUodGlsZTogVGlsZSkge1xuICAgICAgICBpZiAodGlsZS5kZW1UZXh0dXJlKSB0aGlzLm1hcC5wYWludGVyLnNhdmVUaWxlVGV4dHVyZSh0aWxlLmRlbVRleHR1cmUpO1xuICAgICAgICBpZiAodGlsZS5mYm8pIHtcbiAgICAgICAgICAgIHRpbGUuZmJvLmRlc3Ryb3koKTtcbiAgICAgICAgICAgIGRlbGV0ZSB0aWxlLmZibztcbiAgICAgICAgfVxuICAgICAgICBpZiAodGlsZS5kZW0pIGRlbGV0ZSB0aWxlLmRlbTtcbiAgICAgICAgZGVsZXRlIHRpbGUubmVpZ2hib3JpbmdUaWxlcztcblxuICAgICAgICB0aWxlLnN0YXRlID0gJ3VubG9hZGVkJztcbiAgICAgICAgdGhpcy5kaXNwYXRjaGVyLnNlbmQoJ3JlbW92ZURFTVRpbGUnLCB7IHVpZDogdGlsZS51aWQsIHNvdXJjZTogdGhpcy5pZCB9LCB1bmRlZmluZWQsIHRpbGUud29ya2VySUQpO1xuICAgIH1cblxufVxuXG5leHBvcnQgZGVmYXVsdCBSYXN0ZXJERU1UaWxlU291cmNlO1xuIiwiLy8gQGZsb3dcblxuaW1wb3J0IHsgRXZlbnQsIEVycm9yRXZlbnQsIEV2ZW50ZWQgfSBmcm9tICcuLi91dGlsL2V2ZW50ZWQnO1xuXG5pbXBvcnQgeyBleHRlbmQgfSBmcm9tICcuLi91dGlsL3V0aWwnO1xuaW1wb3J0IEVYVEVOVCBmcm9tICcuLi9kYXRhL2V4dGVudCc7XG5pbXBvcnQgeyBSZXNvdXJjZVR5cGUgfSBmcm9tICcuLi91dGlsL2FqYXgnO1xuaW1wb3J0IGJyb3dzZXIgZnJvbSAnLi4vdXRpbC9icm93c2VyJztcblxuaW1wb3J0IHR5cGUge1NvdXJjZX0gZnJvbSAnLi9zb3VyY2UnO1xuaW1wb3J0IHR5cGUgTWFwIGZyb20gJy4uL3VpL21hcCc7XG5pbXBvcnQgdHlwZSBEaXNwYXRjaGVyIGZyb20gJy4uL3V0aWwvZGlzcGF0Y2hlcic7XG5pbXBvcnQgdHlwZSBUaWxlIGZyb20gJy4vdGlsZSc7XG5pbXBvcnQgdHlwZSB7Q2FsbGJhY2t9IGZyb20gJy4uL3R5cGVzL2NhbGxiYWNrJztcbmltcG9ydCB0eXBlIHtQZXJmb3JtYW5jZVJlc291cmNlVGltaW5nfSBmcm9tICcuLi90eXBlcy9wZXJmb3JtYW5jZV9yZXNvdXJjZV90aW1pbmcnO1xuaW1wb3J0IHR5cGUge0dlb0pTT04sIEdlb0pTT05GZWF0dXJlfSBmcm9tICdAbWFwYm94L2dlb2pzb24tdHlwZXMnO1xuaW1wb3J0IHR5cGUge0dlb0pTT05Tb3VyY2VTcGVjaWZpY2F0aW9ufSBmcm9tICcuLi9zdHlsZS1zcGVjL3R5cGVzJztcblxuLyoqXG4gKiBBIHNvdXJjZSBjb250YWluaW5nIEdlb0pTT04uXG4gKiAoU2VlIHRoZSBbU3R5bGUgU3BlY2lmaWNhdGlvbl0oaHR0cHM6Ly93d3cubWFwYm94LmNvbS9tYXBib3gtZ2wtc3R5bGUtc3BlYy8jc291cmNlcy1nZW9qc29uKSBmb3IgZGV0YWlsZWQgZG9jdW1lbnRhdGlvbiBvZiBvcHRpb25zLilcbiAqXG4gKiBAZXhhbXBsZVxuICogbWFwLmFkZFNvdXJjZSgnc29tZSBpZCcsIHtcbiAqICAgICB0eXBlOiAnZ2VvanNvbicsXG4gKiAgICAgZGF0YTogJ2h0dHBzOi8vZDJhZDZiNHVyN3l2cHEuY2xvdWRmcm9udC5uZXQvbmF0dXJhbGVhcnRoLTMuMy4wL25lXzEwbV9wb3J0cy5nZW9qc29uJ1xuICogfSk7XG4gKlxuICogQGV4YW1wbGVcbiAqIG1hcC5hZGRTb3VyY2UoJ3NvbWUgaWQnLCB7XG4gKiAgICB0eXBlOiAnZ2VvanNvbicsXG4gKiAgICBkYXRhOiB7XG4gKiAgICAgICAgXCJ0eXBlXCI6IFwiRmVhdHVyZUNvbGxlY3Rpb25cIixcbiAqICAgICAgICBcImZlYXR1cmVzXCI6IFt7XG4gKiAgICAgICAgICAgIFwidHlwZVwiOiBcIkZlYXR1cmVcIixcbiAqICAgICAgICAgICAgXCJwcm9wZXJ0aWVzXCI6IHt9LFxuICogICAgICAgICAgICBcImdlb21ldHJ5XCI6IHtcbiAqICAgICAgICAgICAgICAgIFwidHlwZVwiOiBcIlBvaW50XCIsXG4gKiAgICAgICAgICAgICAgICBcImNvb3JkaW5hdGVzXCI6IFtcbiAqICAgICAgICAgICAgICAgICAgICAtNzYuNTMwNjMyOTcyNzE3MjksXG4gKiAgICAgICAgICAgICAgICAgICAgMzkuMTgxNzQwNzc5OTQxMDhcbiAqICAgICAgICAgICAgICAgIF1cbiAqICAgICAgICAgICAgfVxuICogICAgICAgIH1dXG4gKiAgICB9XG4gKiB9KTtcbiAqXG4gKiBAZXhhbXBsZVxuICogbWFwLmdldFNvdXJjZSgnc29tZSBpZCcpLnNldERhdGEoe1xuICogICBcInR5cGVcIjogXCJGZWF0dXJlQ29sbGVjdGlvblwiLFxuICogICBcImZlYXR1cmVzXCI6IFt7XG4gKiAgICAgICBcInR5cGVcIjogXCJGZWF0dXJlXCIsXG4gKiAgICAgICBcInByb3BlcnRpZXNcIjogeyBcIm5hbWVcIjogXCJOdWxsIElzbGFuZFwiIH0sXG4gKiAgICAgICBcImdlb21ldHJ5XCI6IHtcbiAqICAgICAgICAgICBcInR5cGVcIjogXCJQb2ludFwiLFxuICogICAgICAgICAgIFwiY29vcmRpbmF0ZXNcIjogWyAwLCAwIF1cbiAqICAgICAgIH1cbiAqICAgfV1cbiAqIH0pO1xuICogQHNlZSBbRHJhdyBHZW9KU09OIHBvaW50c10oaHR0cHM6Ly93d3cubWFwYm94LmNvbS9tYXBib3gtZ2wtanMvZXhhbXBsZS9nZW9qc29uLW1hcmtlcnMvKVxuICogQHNlZSBbQWRkIGEgR2VvSlNPTiBsaW5lXShodHRwczovL3d3dy5tYXBib3guY29tL21hcGJveC1nbC1qcy9leGFtcGxlL2dlb2pzb24tbGluZS8pXG4gKiBAc2VlIFtDcmVhdGUgYSBoZWF0bWFwIGZyb20gcG9pbnRzXShodHRwczovL3d3dy5tYXBib3guY29tL21hcGJveC1nbC1qcy9leGFtcGxlL2hlYXRtYXAvKVxuICogQHNlZSBbQ3JlYXRlIGFuZCBzdHlsZSBjbHVzdGVyc10oaHR0cHM6Ly93d3cubWFwYm94LmNvbS9tYXBib3gtZ2wtanMvZXhhbXBsZS9jbHVzdGVyLylcbiAqL1xuY2xhc3MgR2VvSlNPTlNvdXJjZSBleHRlbmRzIEV2ZW50ZWQgaW1wbGVtZW50cyBTb3VyY2Uge1xuICAgIHR5cGU6ICdnZW9qc29uJztcbiAgICBpZDogc3RyaW5nO1xuICAgIG1pbnpvb206IG51bWJlcjtcbiAgICBtYXh6b29tOiBudW1iZXI7XG4gICAgdGlsZVNpemU6IG51bWJlcjtcbiAgICBhdHRyaWJ1dGlvbjogc3RyaW5nO1xuXG4gICAgaXNUaWxlQ2xpcHBlZDogYm9vbGVhbjtcbiAgICByZXBhcnNlT3ZlcnNjYWxlZDogYm9vbGVhbjtcbiAgICBfZGF0YTogR2VvSlNPTiB8IHN0cmluZztcbiAgICBfb3B0aW9uczogYW55O1xuICAgIHdvcmtlck9wdGlvbnM6IGFueTtcbiAgICBkaXNwYXRjaGVyOiBEaXNwYXRjaGVyO1xuICAgIG1hcDogTWFwO1xuICAgIHdvcmtlcklEOiBudW1iZXI7XG4gICAgX2xvYWRlZDogYm9vbGVhbjtcbiAgICBfY29sbGVjdFJlc291cmNlVGltaW5nOiBib29sZWFuO1xuICAgIF9yZXNvdXJjZVRpbWluZzogQXJyYXk8UGVyZm9ybWFuY2VSZXNvdXJjZVRpbWluZz47XG4gICAgX3JlbW92ZWQ6IGJvb2xlYW47XG5cbiAgICAvKipcbiAgICAgKiBAcHJpdmF0ZVxuICAgICAqL1xuICAgIGNvbnN0cnVjdG9yKGlkOiBzdHJpbmcsIG9wdGlvbnM6IEdlb0pTT05Tb3VyY2VTcGVjaWZpY2F0aW9uICYge3dvcmtlck9wdGlvbnM/OiBhbnksIGNvbGxlY3RSZXNvdXJjZVRpbWluZzogYm9vbGVhbn0sIGRpc3BhdGNoZXI6IERpc3BhdGNoZXIsIGV2ZW50ZWRQYXJlbnQ6IEV2ZW50ZWQpIHtcbiAgICAgICAgc3VwZXIoKTtcblxuICAgICAgICB0aGlzLmlkID0gaWQ7XG5cbiAgICAgICAgLy8gYHR5cGVgIGlzIGEgcHJvcGVydHkgcmF0aGVyIHRoYW4gYSBjb25zdGFudCB0byBtYWtlIGl0IGVhc3kgZm9yIDNyZFxuICAgICAgICAvLyBwYXJ0aWVzIHRvIHVzZSBHZW9KU09OU291cmNlIHRvIGJ1aWxkIHRoZWlyIG93biBzb3VyY2UgdHlwZXMuXG4gICAgICAgIHRoaXMudHlwZSA9ICdnZW9qc29uJztcblxuICAgICAgICB0aGlzLm1pbnpvb20gPSAwO1xuICAgICAgICB0aGlzLm1heHpvb20gPSAxODtcbiAgICAgICAgdGhpcy50aWxlU2l6ZSA9IDUxMjtcbiAgICAgICAgdGhpcy5pc1RpbGVDbGlwcGVkID0gdHJ1ZTtcbiAgICAgICAgdGhpcy5yZXBhcnNlT3ZlcnNjYWxlZCA9IHRydWU7XG4gICAgICAgIHRoaXMuX3JlbW92ZWQgPSBmYWxzZTtcblxuICAgICAgICB0aGlzLmRpc3BhdGNoZXIgPSBkaXNwYXRjaGVyO1xuICAgICAgICB0aGlzLnNldEV2ZW50ZWRQYXJlbnQoZXZlbnRlZFBhcmVudCk7XG5cbiAgICAgICAgdGhpcy5fZGF0YSA9IChvcHRpb25zLmRhdGE6IGFueSk7XG4gICAgICAgIHRoaXMuX29wdGlvbnMgPSBleHRlbmQoe30sIG9wdGlvbnMpO1xuXG4gICAgICAgIHRoaXMuX2NvbGxlY3RSZXNvdXJjZVRpbWluZyA9IG9wdGlvbnMuY29sbGVjdFJlc291cmNlVGltaW5nO1xuICAgICAgICB0aGlzLl9yZXNvdXJjZVRpbWluZyA9IFtdO1xuXG4gICAgICAgIGlmIChvcHRpb25zLm1heHpvb20gIT09IHVuZGVmaW5lZCkgdGhpcy5tYXh6b29tID0gb3B0aW9ucy5tYXh6b29tO1xuICAgICAgICBpZiAob3B0aW9ucy50eXBlKSB0aGlzLnR5cGUgPSBvcHRpb25zLnR5cGU7XG4gICAgICAgIGlmIChvcHRpb25zLmF0dHJpYnV0aW9uKSB0aGlzLmF0dHJpYnV0aW9uID0gb3B0aW9ucy5hdHRyaWJ1dGlvbjtcblxuICAgICAgICBjb25zdCBzY2FsZSA9IEVYVEVOVCAvIHRoaXMudGlsZVNpemU7XG5cbiAgICAgICAgLy8gc2VudCB0byB0aGUgd29ya2VyLCBhbG9uZyB3aXRoIGB1cmw6IC4uLmAgb3IgYGRhdGE6IGxpdGVyYWwgZ2VvanNvbmAsXG4gICAgICAgIC8vIHNvIHRoYXQgaXQgY2FuIGxvYWQvcGFyc2UvaW5kZXggdGhlIGdlb2pzb24gZGF0YVxuICAgICAgICAvLyBleHRlbmRpbmcgd2l0aCBgb3B0aW9ucy53b3JrZXJPcHRpb25zYCBoZWxwcyB0byBtYWtlIGl0IGVhc3kgZm9yXG4gICAgICAgIC8vIHRoaXJkLXBhcnR5IHNvdXJjZXMgdG8gaGFjay9yZXVzZSBHZW9KU09OU291cmNlLlxuICAgICAgICB0aGlzLndvcmtlck9wdGlvbnMgPSBleHRlbmQoe1xuICAgICAgICAgICAgc291cmNlOiB0aGlzLmlkLFxuICAgICAgICAgICAgY2x1c3Rlcjogb3B0aW9ucy5jbHVzdGVyIHx8IGZhbHNlLFxuICAgICAgICAgICAgZ2VvanNvblZ0T3B0aW9uczoge1xuICAgICAgICAgICAgICAgIGJ1ZmZlcjogKG9wdGlvbnMuYnVmZmVyICE9PSB1bmRlZmluZWQgPyBvcHRpb25zLmJ1ZmZlciA6IDEyOCkgKiBzY2FsZSxcbiAgICAgICAgICAgICAgICB0b2xlcmFuY2U6IChvcHRpb25zLnRvbGVyYW5jZSAhPT0gdW5kZWZpbmVkID8gb3B0aW9ucy50b2xlcmFuY2UgOiAwLjM3NSkgKiBzY2FsZSxcbiAgICAgICAgICAgICAgICBleHRlbnQ6IEVYVEVOVCxcbiAgICAgICAgICAgICAgICBtYXhab29tOiB0aGlzLm1heHpvb20sXG4gICAgICAgICAgICAgICAgbGluZU1ldHJpY3M6IG9wdGlvbnMubGluZU1ldHJpY3MgfHwgZmFsc2UsXG4gICAgICAgICAgICAgICAgZ2VuZXJhdGVJZDogb3B0aW9ucy5nZW5lcmF0ZUlkIHx8IGZhbHNlXG4gICAgICAgICAgICB9LFxuICAgICAgICAgICAgc3VwZXJjbHVzdGVyT3B0aW9uczoge1xuICAgICAgICAgICAgICAgIG1heFpvb206IG9wdGlvbnMuY2x1c3Rlck1heFpvb20gIT09IHVuZGVmaW5lZCA/XG4gICAgICAgICAgICAgICAgICAgIE1hdGgubWluKG9wdGlvbnMuY2x1c3Rlck1heFpvb20sIHRoaXMubWF4em9vbSAtIDEpIDpcbiAgICAgICAgICAgICAgICAgICAgKHRoaXMubWF4em9vbSAtIDEpLFxuICAgICAgICAgICAgICAgIGV4dGVudDogRVhURU5ULFxuICAgICAgICAgICAgICAgIHJhZGl1czogKG9wdGlvbnMuY2x1c3RlclJhZGl1cyB8fCA1MCkgKiBzY2FsZSxcbiAgICAgICAgICAgICAgICBsb2c6IGZhbHNlXG4gICAgICAgICAgICB9XG4gICAgICAgIH0sIG9wdGlvbnMud29ya2VyT3B0aW9ucyk7XG4gICAgfVxuXG4gICAgbG9hZCgpIHtcbiAgICAgICAgdGhpcy5maXJlKG5ldyBFdmVudCgnZGF0YWxvYWRpbmcnLCB7ZGF0YVR5cGU6ICdzb3VyY2UnfSkpO1xuICAgICAgICB0aGlzLl91cGRhdGVXb3JrZXJEYXRhKChlcnIpID0+IHtcbiAgICAgICAgICAgIGlmIChlcnIpIHtcbiAgICAgICAgICAgICAgICB0aGlzLmZpcmUobmV3IEVycm9yRXZlbnQoZXJyKSk7XG4gICAgICAgICAgICAgICAgcmV0dXJuO1xuICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICBjb25zdCBkYXRhOiBPYmplY3QgPSB7IGRhdGFUeXBlOiAnc291cmNlJywgc291cmNlRGF0YVR5cGU6ICdtZXRhZGF0YScgfTtcbiAgICAgICAgICAgIGlmICh0aGlzLl9jb2xsZWN0UmVzb3VyY2VUaW1pbmcgJiYgdGhpcy5fcmVzb3VyY2VUaW1pbmcgJiYgKHRoaXMuX3Jlc291cmNlVGltaW5nLmxlbmd0aCA+IDApKSB7XG4gICAgICAgICAgICAgICAgZGF0YS5yZXNvdXJjZVRpbWluZyA9IHRoaXMuX3Jlc291cmNlVGltaW5nO1xuICAgICAgICAgICAgICAgIHRoaXMuX3Jlc291cmNlVGltaW5nID0gW107XG4gICAgICAgICAgICB9XG5cbiAgICAgICAgICAgIC8vIGFsdGhvdWdoIEdlb0pTT04gc291cmNlcyBjb250YWluIG5vIG1ldGFkYXRhLCB3ZSBmaXJlIHRoaXMgZXZlbnQgdG8gbGV0IHRoZSBTb3VyY2VDYWNoZVxuICAgICAgICAgICAgLy8ga25vdyBpdHMgb2sgdG8gc3RhcnQgcmVxdWVzdGluZyB0aWxlcy5cbiAgICAgICAgICAgIHRoaXMuZmlyZShuZXcgRXZlbnQoJ2RhdGEnLCBkYXRhKSk7XG4gICAgICAgIH0pO1xuICAgIH1cblxuICAgIG9uQWRkKG1hcDogTWFwKSB7XG4gICAgICAgIHRoaXMubWFwID0gbWFwO1xuICAgICAgICB0aGlzLmxvYWQoKTtcbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBTZXRzIHRoZSBHZW9KU09OIGRhdGEgYW5kIHJlLXJlbmRlcnMgdGhlIG1hcC5cbiAgICAgKlxuICAgICAqIEBwYXJhbSB7T2JqZWN0fHN0cmluZ30gZGF0YSBBIEdlb0pTT04gZGF0YSBvYmplY3Qgb3IgYSBVUkwgdG8gb25lLiBUaGUgbGF0dGVyIGlzIHByZWZlcmFibGUgaW4gdGhlIGNhc2Ugb2YgbGFyZ2UgR2VvSlNPTiBmaWxlcy5cbiAgICAgKiBAcmV0dXJucyB7R2VvSlNPTlNvdXJjZX0gdGhpc1xuICAgICAqL1xuICAgIHNldERhdGEoZGF0YTogR2VvSlNPTiB8IHN0cmluZykge1xuICAgICAgICB0aGlzLl9kYXRhID0gZGF0YTtcbiAgICAgICAgdGhpcy5maXJlKG5ldyBFdmVudCgnZGF0YWxvYWRpbmcnLCB7ZGF0YVR5cGU6ICdzb3VyY2UnfSkpO1xuICAgICAgICB0aGlzLl91cGRhdGVXb3JrZXJEYXRhKChlcnIpID0+IHtcbiAgICAgICAgICAgIGlmIChlcnIpIHtcbiAgICAgICAgICAgICAgICB0aGlzLmZpcmUobmV3IEVycm9yRXZlbnQoZXJyKSk7XG4gICAgICAgICAgICAgICAgcmV0dXJuO1xuICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICBjb25zdCBkYXRhOiBPYmplY3QgPSB7IGRhdGFUeXBlOiAnc291cmNlJywgc291cmNlRGF0YVR5cGU6ICdjb250ZW50JyB9O1xuICAgICAgICAgICAgaWYgKHRoaXMuX2NvbGxlY3RSZXNvdXJjZVRpbWluZyAmJiB0aGlzLl9yZXNvdXJjZVRpbWluZyAmJiAodGhpcy5fcmVzb3VyY2VUaW1pbmcubGVuZ3RoID4gMCkpIHtcbiAgICAgICAgICAgICAgICBkYXRhLnJlc291cmNlVGltaW5nID0gdGhpcy5fcmVzb3VyY2VUaW1pbmc7XG4gICAgICAgICAgICAgICAgdGhpcy5fcmVzb3VyY2VUaW1pbmcgPSBbXTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIHRoaXMuZmlyZShuZXcgRXZlbnQoJ2RhdGEnLCBkYXRhKSk7XG4gICAgICAgIH0pO1xuXG4gICAgICAgIHJldHVybiB0aGlzO1xuICAgIH1cblxuICAgIC8qKlxuICAgICAqIEZvciBjbHVzdGVyZWQgc291cmNlcywgZmV0Y2hlcyB0aGUgem9vbSBhdCB3aGljaCB0aGUgZ2l2ZW4gY2x1c3RlciBleHBhbmRzLlxuICAgICAqXG4gICAgICogQHBhcmFtIGNsdXN0ZXJJZCBUaGUgdmFsdWUgb2YgdGhlIGNsdXN0ZXIncyBgY2x1c3Rlcl9pZGAgcHJvcGVydHkuXG4gICAgICogQHBhcmFtIGNhbGxiYWNrIEEgY2FsbGJhY2sgdG8gYmUgY2FsbGVkIHdoZW4gdGhlIHpvb20gdmFsdWUgaXMgcmV0cmlldmVkIChgKGVycm9yLCB6b29tKSA9PiB7IC4uLiB9YCkuXG4gICAgICogQHJldHVybnMge0dlb0pTT05Tb3VyY2V9IHRoaXNcbiAgICAgKi9cbiAgICBnZXRDbHVzdGVyRXhwYW5zaW9uWm9vbShjbHVzdGVySWQ6IG51bWJlciwgY2FsbGJhY2s6IENhbGxiYWNrPG51bWJlcj4pIHtcbiAgICAgICAgdGhpcy5kaXNwYXRjaGVyLnNlbmQoJ2dlb2pzb24uZ2V0Q2x1c3RlckV4cGFuc2lvblpvb20nLCB7IGNsdXN0ZXJJZCwgc291cmNlOiB0aGlzLmlkIH0sIGNhbGxiYWNrLCB0aGlzLndvcmtlcklEKTtcbiAgICAgICAgcmV0dXJuIHRoaXM7XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogRm9yIGNsdXN0ZXJlZCBzb3VyY2VzLCBmZXRjaGVzIHRoZSBjaGlsZHJlbiBvZiB0aGUgZ2l2ZW4gY2x1c3RlciBvbiB0aGUgbmV4dCB6b29tIGxldmVsIChhcyBhbiBhcnJheSBvZiBHZW9KU09OIGZlYXR1cmVzKS5cbiAgICAgKlxuICAgICAqIEBwYXJhbSBjbHVzdGVySWQgVGhlIHZhbHVlIG9mIHRoZSBjbHVzdGVyJ3MgYGNsdXN0ZXJfaWRgIHByb3BlcnR5LlxuICAgICAqIEBwYXJhbSBjYWxsYmFjayBBIGNhbGxiYWNrIHRvIGJlIGNhbGxlZCB3aGVuIHRoZSBmZWF0dXJlcyBhcmUgcmV0cmlldmVkIChgKGVycm9yLCBmZWF0dXJlcykgPT4geyAuLi4gfWApLlxuICAgICAqIEByZXR1cm5zIHtHZW9KU09OU291cmNlfSB0aGlzXG4gICAgICovXG4gICAgZ2V0Q2x1c3RlckNoaWxkcmVuKGNsdXN0ZXJJZDogbnVtYmVyLCBjYWxsYmFjazogQ2FsbGJhY2s8QXJyYXk8R2VvSlNPTkZlYXR1cmU+Pikge1xuICAgICAgICB0aGlzLmRpc3BhdGNoZXIuc2VuZCgnZ2VvanNvbi5nZXRDbHVzdGVyQ2hpbGRyZW4nLCB7IGNsdXN0ZXJJZCwgc291cmNlOiB0aGlzLmlkIH0sIGNhbGxiYWNrLCB0aGlzLndvcmtlcklEKTtcbiAgICAgICAgcmV0dXJuIHRoaXM7XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogRm9yIGNsdXN0ZXJlZCBzb3VyY2VzLCBmZXRjaGVzIHRoZSBvcmlnaW5hbCBwb2ludHMgdGhhdCBiZWxvbmcgdG8gdGhlIGNsdXN0ZXIgKGFzIGFuIGFycmF5IG9mIEdlb0pTT04gZmVhdHVyZXMpLlxuICAgICAqXG4gICAgICogQHBhcmFtIGNsdXN0ZXJJZCBUaGUgdmFsdWUgb2YgdGhlIGNsdXN0ZXIncyBgY2x1c3Rlcl9pZGAgcHJvcGVydHkuXG4gICAgICogQHBhcmFtIGxpbWl0IFRoZSBtYXhpbXVtIG51bWJlciBvZiBmZWF0dXJlcyB0byByZXR1cm4uXG4gICAgICogQHBhcmFtIG9mZnNldCBUaGUgbnVtYmVyIG9mIGZlYXR1cmVzIHRvIHNraXAgKGUuZy4gZm9yIHBhZ2luYXRpb24pLlxuICAgICAqIEBwYXJhbSBjYWxsYmFjayBBIGNhbGxiYWNrIHRvIGJlIGNhbGxlZCB3aGVuIHRoZSBmZWF0dXJlcyBhcmUgcmV0cmlldmVkIChgKGVycm9yLCBmZWF0dXJlcykgPT4geyAuLi4gfWApLlxuICAgICAqIEByZXR1cm5zIHtHZW9KU09OU291cmNlfSB0aGlzXG4gICAgICovXG4gICAgZ2V0Q2x1c3RlckxlYXZlcyhjbHVzdGVySWQ6IG51bWJlciwgbGltaXQ6IG51bWJlciwgb2Zmc2V0OiBudW1iZXIsIGNhbGxiYWNrOiBDYWxsYmFjazxBcnJheTxHZW9KU09ORmVhdHVyZT4+KSB7XG4gICAgICAgIHRoaXMuZGlzcGF0Y2hlci5zZW5kKCdnZW9qc29uLmdldENsdXN0ZXJMZWF2ZXMnLCB7XG4gICAgICAgICAgICBzb3VyY2U6IHRoaXMuaWQsXG4gICAgICAgICAgICBjbHVzdGVySWQsXG4gICAgICAgICAgICBsaW1pdCxcbiAgICAgICAgICAgIG9mZnNldFxuICAgICAgICB9LCBjYWxsYmFjaywgdGhpcy53b3JrZXJJRCk7XG4gICAgICAgIHJldHVybiB0aGlzO1xuICAgIH1cblxuICAgIC8qXG4gICAgICogUmVzcG9uc2libGUgZm9yIGludm9raW5nIFdvcmtlclNvdXJjZSdzIGdlb2pzb24ubG9hZERhdGEgdGFyZ2V0LCB3aGljaFxuICAgICAqIGhhbmRsZXMgbG9hZGluZyB0aGUgZ2VvanNvbiBkYXRhIGFuZCBwcmVwYXJpbmcgdG8gc2VydmUgaXQgdXAgYXMgdGlsZXMsXG4gICAgICogdXNpbmcgZ2VvanNvbi12dCBvciBzdXBlcmNsdXN0ZXIgYXMgYXBwcm9wcmlhdGUuXG4gICAgICovXG4gICAgX3VwZGF0ZVdvcmtlckRhdGEoY2FsbGJhY2s6IENhbGxiYWNrPHZvaWQ+KSB7XG4gICAgICAgIGNvbnN0IG9wdGlvbnMgPSBleHRlbmQoe30sIHRoaXMud29ya2VyT3B0aW9ucyk7XG4gICAgICAgIGNvbnN0IGRhdGEgPSB0aGlzLl9kYXRhO1xuICAgICAgICBpZiAodHlwZW9mIGRhdGEgPT09ICdzdHJpbmcnKSB7XG4gICAgICAgICAgICBvcHRpb25zLnJlcXVlc3QgPSB0aGlzLm1hcC5fdHJhbnNmb3JtUmVxdWVzdChicm93c2VyLnJlc29sdmVVUkwoZGF0YSksIFJlc291cmNlVHlwZS5Tb3VyY2UpO1xuICAgICAgICAgICAgb3B0aW9ucy5yZXF1ZXN0LmNvbGxlY3RSZXNvdXJjZVRpbWluZyA9IHRoaXMuX2NvbGxlY3RSZXNvdXJjZVRpbWluZztcbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgIG9wdGlvbnMuZGF0YSA9IEpTT04uc3RyaW5naWZ5KGRhdGEpO1xuICAgICAgICB9XG5cbiAgICAgICAgLy8gdGFyZ2V0IHt0aGlzLnR5cGV9LmxvYWREYXRhIHJhdGhlciB0aGFuIGxpdGVyYWxseSBnZW9qc29uLmxvYWREYXRhLFxuICAgICAgICAvLyBzbyB0aGF0IG90aGVyIGdlb2pzb24tbGlrZSBzb3VyY2UgdHlwZXMgY2FuIGVhc2lseSByZXVzZSB0aGlzXG4gICAgICAgIC8vIGltcGxlbWVudGF0aW9uXG4gICAgICAgIHRoaXMud29ya2VySUQgPSB0aGlzLmRpc3BhdGNoZXIuc2VuZChgJHt0aGlzLnR5cGV9LmxvYWREYXRhYCwgb3B0aW9ucywgKGVyciwgcmVzdWx0KSA9PiB7XG4gICAgICAgICAgICBpZiAodGhpcy5fcmVtb3ZlZCB8fCAocmVzdWx0ICYmIHJlc3VsdC5hYmFuZG9uZWQpKSB7XG4gICAgICAgICAgICAgICAgcmV0dXJuO1xuICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICB0aGlzLl9sb2FkZWQgPSB0cnVlO1xuXG4gICAgICAgICAgICBpZiAocmVzdWx0ICYmIHJlc3VsdC5yZXNvdXJjZVRpbWluZyAmJiByZXN1bHQucmVzb3VyY2VUaW1pbmdbdGhpcy5pZF0pXG4gICAgICAgICAgICAgICAgdGhpcy5fcmVzb3VyY2VUaW1pbmcgPSByZXN1bHQucmVzb3VyY2VUaW1pbmdbdGhpcy5pZF0uc2xpY2UoMCk7XG4gICAgICAgICAgICAvLyBBbnkgYGxvYWREYXRhYCBjYWxscyB0aGF0IHBpbGVkIHVwIHdoaWxlIHdlIHdlcmUgcHJvY2Vzc2luZ1xuICAgICAgICAgICAgLy8gdGhpcyBvbmUgd2lsbCBnZXQgY29hbGVzY2VkIGludG8gYSBzaW5nbGUgY2FsbCB3aGVuIHRoaXNcbiAgICAgICAgICAgIC8vICdjb2FsZXNjZScgbWVzc2FnZSBpcyBwcm9jZXNzZWQuXG4gICAgICAgICAgICAvLyBXZSB3b3VsZCBzZWxmLXNlbmQgZnJvbSB0aGUgd29ya2VyIGlmIHdlIGhhZCBhY2Nlc3MgdG8gaXRzXG4gICAgICAgICAgICAvLyBtZXNzYWdlIHF1ZXVlLiBXYWl0aW5nIGluc3RlYWQgZm9yIHRoZSAnY29hbGVzY2UnIHRvIHJvdW5kLXRyaXBcbiAgICAgICAgICAgIC8vIHRocm91Z2ggdGhlIGZvcmVncm91bmQganVzdCBtZWFucyB3ZSdyZSB0aHJvdHRsaW5nIHRoZSB3b3JrZXJcbiAgICAgICAgICAgIC8vIHRvIHJ1biBhdCBhIGxpdHRsZSBsZXNzIHRoYW4gZnVsbC10aHJvdHRsZS5cbiAgICAgICAgICAgIHRoaXMuZGlzcGF0Y2hlci5zZW5kKGAke3RoaXMudHlwZX0uY29hbGVzY2VgLCB7IHNvdXJjZTogb3B0aW9ucy5zb3VyY2UgfSwgbnVsbCwgdGhpcy53b3JrZXJJRCk7XG4gICAgICAgICAgICBjYWxsYmFjayhlcnIpO1xuXG4gICAgICAgIH0sIHRoaXMud29ya2VySUQpO1xuICAgIH1cblxuICAgIGxvYWRUaWxlKHRpbGU6IFRpbGUsIGNhbGxiYWNrOiBDYWxsYmFjazx2b2lkPikge1xuICAgICAgICBjb25zdCBtZXNzYWdlID0gdGlsZS53b3JrZXJJRCA9PT0gdW5kZWZpbmVkID8gJ2xvYWRUaWxlJyA6ICdyZWxvYWRUaWxlJztcbiAgICAgICAgY29uc3QgcGFyYW1zID0ge1xuICAgICAgICAgICAgdHlwZTogdGhpcy50eXBlLFxuICAgICAgICAgICAgdWlkOiB0aWxlLnVpZCxcbiAgICAgICAgICAgIHRpbGVJRDogdGlsZS50aWxlSUQsXG4gICAgICAgICAgICB6b29tOiB0aWxlLnRpbGVJRC5vdmVyc2NhbGVkWixcbiAgICAgICAgICAgIG1heFpvb206IHRoaXMubWF4em9vbSxcbiAgICAgICAgICAgIHRpbGVTaXplOiB0aGlzLnRpbGVTaXplLFxuICAgICAgICAgICAgc291cmNlOiB0aGlzLmlkLFxuICAgICAgICAgICAgcGl4ZWxSYXRpbzogYnJvd3Nlci5kZXZpY2VQaXhlbFJhdGlvLFxuICAgICAgICAgICAgc2hvd0NvbGxpc2lvbkJveGVzOiB0aGlzLm1hcC5zaG93Q29sbGlzaW9uQm94ZXNcbiAgICAgICAgfTtcblxuICAgICAgICB0aWxlLndvcmtlcklEID0gdGhpcy5kaXNwYXRjaGVyLnNlbmQobWVzc2FnZSwgcGFyYW1zLCAoZXJyLCBkYXRhKSA9PiB7XG4gICAgICAgICAgICB0aWxlLnVubG9hZFZlY3RvckRhdGEoKTtcblxuICAgICAgICAgICAgaWYgKHRpbGUuYWJvcnRlZCkge1xuICAgICAgICAgICAgICAgIHJldHVybiBjYWxsYmFjayhudWxsKTtcbiAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgaWYgKGVycikge1xuICAgICAgICAgICAgICAgIHJldHVybiBjYWxsYmFjayhlcnIpO1xuICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICB0aWxlLmxvYWRWZWN0b3JEYXRhKGRhdGEsIHRoaXMubWFwLnBhaW50ZXIsIG1lc3NhZ2UgPT09ICdyZWxvYWRUaWxlJyk7XG5cbiAgICAgICAgICAgIHJldHVybiBjYWxsYmFjayhudWxsKTtcbiAgICAgICAgfSwgdGhpcy53b3JrZXJJRCk7XG4gICAgfVxuXG4gICAgYWJvcnRUaWxlKHRpbGU6IFRpbGUpIHtcbiAgICAgICAgdGlsZS5hYm9ydGVkID0gdHJ1ZTtcbiAgICB9XG5cbiAgICB1bmxvYWRUaWxlKHRpbGU6IFRpbGUpIHtcbiAgICAgICAgdGlsZS51bmxvYWRWZWN0b3JEYXRhKCk7XG4gICAgICAgIHRoaXMuZGlzcGF0Y2hlci5zZW5kKCdyZW1vdmVUaWxlJywgeyB1aWQ6IHRpbGUudWlkLCB0eXBlOiB0aGlzLnR5cGUsIHNvdXJjZTogdGhpcy5pZCB9LCBudWxsLCB0aWxlLndvcmtlcklEKTtcbiAgICB9XG5cbiAgICBvblJlbW92ZSgpIHtcbiAgICAgICAgdGhpcy5fcmVtb3ZlZCA9IHRydWU7XG4gICAgICAgIHRoaXMuZGlzcGF0Y2hlci5zZW5kKCdyZW1vdmVTb3VyY2UnLCB7IHR5cGU6IHRoaXMudHlwZSwgc291cmNlOiB0aGlzLmlkIH0sIG51bGwsIHRoaXMud29ya2VySUQpO1xuICAgIH1cblxuICAgIHNlcmlhbGl6ZSgpIHtcbiAgICAgICAgcmV0dXJuIGV4dGVuZCh7fSwgdGhpcy5fb3B0aW9ucywge1xuICAgICAgICAgICAgdHlwZTogdGhpcy50eXBlLFxuICAgICAgICAgICAgZGF0YTogdGhpcy5fZGF0YVxuICAgICAgICB9KTtcbiAgICB9XG5cbiAgICBoYXNUcmFuc2l0aW9uKCkge1xuICAgICAgICByZXR1cm4gZmFsc2U7XG4gICAgfVxufVxuXG5leHBvcnQgZGVmYXVsdCBHZW9KU09OU291cmNlO1xuIiwiLy8gQGZsb3dcblxuaW1wb3J0IHsgZ2V0Q29vcmRpbmF0ZXNDZW50ZXIgfSBmcm9tICcuLi91dGlsL3V0aWwnO1xuXG5pbXBvcnQgeyBDYW5vbmljYWxUaWxlSUQgfSBmcm9tICcuL3RpbGVfaWQnO1xuaW1wb3J0IExuZ0xhdCBmcm9tICcuLi9nZW8vbG5nX2xhdCc7XG5pbXBvcnQgUG9pbnQgZnJvbSAnQG1hcGJveC9wb2ludC1nZW9tZXRyeSc7XG5pbXBvcnQgeyBFdmVudCwgRXJyb3JFdmVudCwgRXZlbnRlZCB9IGZyb20gJy4uL3V0aWwvZXZlbnRlZCc7XG5pbXBvcnQgeyBnZXRJbWFnZSwgUmVzb3VyY2VUeXBlIH0gZnJvbSAnLi4vdXRpbC9hamF4JztcbmltcG9ydCBicm93c2VyIGZyb20gJy4uL3V0aWwvYnJvd3Nlcic7XG5pbXBvcnQgRVhURU5UIGZyb20gJy4uL2RhdGEvZXh0ZW50JztcbmltcG9ydCB7IFJhc3RlckJvdW5kc0FycmF5IH0gZnJvbSAnLi4vZGF0YS9hcnJheV90eXBlcyc7XG5pbXBvcnQgcmFzdGVyQm91bmRzQXR0cmlidXRlcyBmcm9tICcuLi9kYXRhL3Jhc3Rlcl9ib3VuZHNfYXR0cmlidXRlcyc7XG5pbXBvcnQgU2VnbWVudFZlY3RvciBmcm9tICcuLi9kYXRhL3NlZ21lbnQnO1xuaW1wb3J0IFRleHR1cmUgZnJvbSAnLi4vcmVuZGVyL3RleHR1cmUnO1xuXG5pbXBvcnQgdHlwZSB7U291cmNlfSBmcm9tICcuL3NvdXJjZSc7XG5pbXBvcnQgdHlwZSB7Q2FudmFzU291cmNlU3BlY2lmaWNhdGlvbn0gZnJvbSAnLi9jYW52YXNfc291cmNlJztcbmltcG9ydCB0eXBlIE1hcCBmcm9tICcuLi91aS9tYXAnO1xuaW1wb3J0IHR5cGUgRGlzcGF0Y2hlciBmcm9tICcuLi91dGlsL2Rpc3BhdGNoZXInO1xuaW1wb3J0IHR5cGUgVGlsZSBmcm9tICcuL3RpbGUnO1xuaW1wb3J0IHR5cGUgQ29vcmRpbmF0ZSBmcm9tICcuLi9nZW8vY29vcmRpbmF0ZSc7XG5pbXBvcnQgdHlwZSB7Q2FsbGJhY2t9IGZyb20gJy4uL3R5cGVzL2NhbGxiYWNrJztcbmltcG9ydCB0eXBlIFZlcnRleEJ1ZmZlciBmcm9tICcuLi9nbC92ZXJ0ZXhfYnVmZmVyJztcbmltcG9ydCB0eXBlIHtcbiAgICBJbWFnZVNvdXJjZVNwZWNpZmljYXRpb24sXG4gICAgVmlkZW9Tb3VyY2VTcGVjaWZpY2F0aW9uXG59IGZyb20gJy4uL3N0eWxlLXNwZWMvdHlwZXMnO1xuXG4vKipcbiAqIEEgZGF0YSBzb3VyY2UgY29udGFpbmluZyBhbiBpbWFnZS5cbiAqIChTZWUgdGhlIFtTdHlsZSBTcGVjaWZpY2F0aW9uXShodHRwczovL3d3dy5tYXBib3guY29tL21hcGJveC1nbC1zdHlsZS1zcGVjLyNzb3VyY2VzLWltYWdlKSBmb3IgZGV0YWlsZWQgZG9jdW1lbnRhdGlvbiBvZiBvcHRpb25zLilcbiAqXG4gKiBAZXhhbXBsZVxuICogLy8gYWRkIHRvIG1hcFxuICogbWFwLmFkZFNvdXJjZSgnc29tZSBpZCcsIHtcbiAqICAgIHR5cGU6ICdpbWFnZScsXG4gKiAgICB1cmw6ICdodHRwczovL3d3dy5tYXBib3guY29tL2ltYWdlcy9mb28ucG5nJyxcbiAqICAgIGNvb3JkaW5hdGVzOiBbXG4gKiAgICAgICAgWy03Ni41NCwgMzkuMThdLFxuICogICAgICAgIFstNzYuNTIsIDM5LjE4XSxcbiAqICAgICAgICBbLTc2LjUyLCAzOS4xN10sXG4gKiAgICAgICAgWy03Ni41NCwgMzkuMTddXG4gKiAgICBdXG4gKiB9KTtcbiAqXG4gKiAvLyB1cGRhdGVcbiAqIHZhciBteVNvdXJjZSA9IG1hcC5nZXRTb3VyY2UoJ3NvbWUgaWQnKTtcbiAqIG15U291cmNlLnNldENvb3JkaW5hdGVzKFtcbiAqICAgICBbLTc2LjU0MzM1NzM3MjI4Mzk0LCAzOS4xODU3OTkwNzIyOTc0OF0sXG4gKiAgICAgWy03Ni41MjgwMzY1OTQzOTA4NywgMzkuMTgzODM2NDg0NzU4N10sXG4gKiAgICAgWy03Ni41Mjk1Mzg2MzE0MzkyLCAzOS4xNzY4MzM5MjUwNzYwNl0sXG4gKiAgICAgWy03Ni41NDUyMDI3MzIwODYxOCwgMzkuMTc4NzYzNDQxMDY2NDJdXG4gKiBdKTtcbiAqXG4gKiBtYXAucmVtb3ZlU291cmNlKCdzb21lIGlkJyk7ICAvLyByZW1vdmVcbiAqIEBzZWUgW0FkZCBhbiBpbWFnZV0oaHR0cHM6Ly93d3cubWFwYm94LmNvbS9tYXBib3gtZ2wtanMvZXhhbXBsZS9pbWFnZS1vbi1hLW1hcC8pXG4gKi9cbmNsYXNzIEltYWdlU291cmNlIGV4dGVuZHMgRXZlbnRlZCBpbXBsZW1lbnRzIFNvdXJjZSB7XG4gICAgdHlwZTogc3RyaW5nO1xuICAgIGlkOiBzdHJpbmc7XG4gICAgbWluem9vbTogbnVtYmVyO1xuICAgIG1heHpvb206IG51bWJlcjtcbiAgICB0aWxlU2l6ZTogbnVtYmVyO1xuICAgIHVybDogc3RyaW5nO1xuXG4gICAgY29vcmRpbmF0ZXM6IFtbbnVtYmVyLCBudW1iZXJdLCBbbnVtYmVyLCBudW1iZXJdLCBbbnVtYmVyLCBudW1iZXJdLCBbbnVtYmVyLCBudW1iZXJdXTtcbiAgICB0aWxlczoge1tzdHJpbmddOiBUaWxlfTtcbiAgICBvcHRpb25zOiBhbnk7XG4gICAgZGlzcGF0Y2hlcjogRGlzcGF0Y2hlcjtcbiAgICBtYXA6IE1hcDtcbiAgICB0ZXh0dXJlOiBUZXh0dXJlO1xuICAgIGltYWdlOiBJbWFnZURhdGE7XG4gICAgY2VudGVyQ29vcmQ6IENvb3JkaW5hdGU7XG4gICAgdGlsZUlEOiBDYW5vbmljYWxUaWxlSUQ7XG4gICAgX2JvdW5kc0FycmF5OiBSYXN0ZXJCb3VuZHNBcnJheTtcbiAgICBib3VuZHNCdWZmZXI6IFZlcnRleEJ1ZmZlcjtcbiAgICBib3VuZHNTZWdtZW50czogU2VnbWVudFZlY3RvcjtcblxuICAgIC8qKlxuICAgICAqIEBwcml2YXRlXG4gICAgICovXG4gICAgY29uc3RydWN0b3IoaWQ6IHN0cmluZywgb3B0aW9uczogSW1hZ2VTb3VyY2VTcGVjaWZpY2F0aW9uIHwgVmlkZW9Tb3VyY2VTcGVjaWZpY2F0aW9uIHwgQ2FudmFzU291cmNlU3BlY2lmaWNhdGlvbiwgZGlzcGF0Y2hlcjogRGlzcGF0Y2hlciwgZXZlbnRlZFBhcmVudDogRXZlbnRlZCkge1xuICAgICAgICBzdXBlcigpO1xuICAgICAgICB0aGlzLmlkID0gaWQ7XG4gICAgICAgIHRoaXMuZGlzcGF0Y2hlciA9IGRpc3BhdGNoZXI7XG4gICAgICAgIHRoaXMuY29vcmRpbmF0ZXMgPSBvcHRpb25zLmNvb3JkaW5hdGVzO1xuXG4gICAgICAgIHRoaXMudHlwZSA9ICdpbWFnZSc7XG4gICAgICAgIHRoaXMubWluem9vbSA9IDA7XG4gICAgICAgIHRoaXMubWF4em9vbSA9IDIyO1xuICAgICAgICB0aGlzLnRpbGVTaXplID0gNTEyO1xuICAgICAgICB0aGlzLnRpbGVzID0ge307XG5cbiAgICAgICAgdGhpcy5zZXRFdmVudGVkUGFyZW50KGV2ZW50ZWRQYXJlbnQpO1xuXG4gICAgICAgIHRoaXMub3B0aW9ucyA9IG9wdGlvbnM7XG4gICAgfVxuXG4gICAgbG9hZCgpIHtcbiAgICAgICAgdGhpcy5maXJlKG5ldyBFdmVudCgnZGF0YWxvYWRpbmcnLCB7ZGF0YVR5cGU6ICdzb3VyY2UnfSkpO1xuXG4gICAgICAgIHRoaXMudXJsID0gdGhpcy5vcHRpb25zLnVybDtcblxuICAgICAgICBnZXRJbWFnZSh0aGlzLm1hcC5fdHJhbnNmb3JtUmVxdWVzdCh0aGlzLnVybCwgUmVzb3VyY2VUeXBlLkltYWdlKSwgKGVyciwgaW1hZ2UpID0+IHtcbiAgICAgICAgICAgIGlmIChlcnIpIHtcbiAgICAgICAgICAgICAgICB0aGlzLmZpcmUobmV3IEVycm9yRXZlbnQoZXJyKSk7XG4gICAgICAgICAgICB9IGVsc2UgaWYgKGltYWdlKSB7XG4gICAgICAgICAgICAgICAgdGhpcy5pbWFnZSA9IGJyb3dzZXIuZ2V0SW1hZ2VEYXRhKGltYWdlKTtcbiAgICAgICAgICAgICAgICB0aGlzLl9maW5pc2hMb2FkaW5nKCk7XG4gICAgICAgICAgICB9XG4gICAgICAgIH0pO1xuICAgIH1cblxuICAgIF9maW5pc2hMb2FkaW5nKCkge1xuICAgICAgICBpZiAodGhpcy5tYXApIHtcbiAgICAgICAgICAgIHRoaXMuc2V0Q29vcmRpbmF0ZXModGhpcy5jb29yZGluYXRlcyk7XG4gICAgICAgICAgICB0aGlzLmZpcmUobmV3IEV2ZW50KCdkYXRhJywge2RhdGFUeXBlOiAnc291cmNlJywgc291cmNlRGF0YVR5cGU6ICdtZXRhZGF0YSd9KSk7XG4gICAgICAgIH1cbiAgICB9XG5cbiAgICBvbkFkZChtYXA6IE1hcCkge1xuICAgICAgICB0aGlzLm1hcCA9IG1hcDtcbiAgICAgICAgdGhpcy5sb2FkKCk7XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogU2V0cyB0aGUgaW1hZ2UncyBjb29yZGluYXRlcyBhbmQgcmUtcmVuZGVycyB0aGUgbWFwLlxuICAgICAqXG4gICAgICogQHBhcmFtIHtBcnJheTxBcnJheTxudW1iZXI+Pn0gY29vcmRpbmF0ZXMgRm91ciBnZW9ncmFwaGljYWwgY29vcmRpbmF0ZXMsXG4gICAgICogICByZXByZXNlbnRlZCBhcyBhcnJheXMgb2YgbG9uZ2l0dWRlIGFuZCBsYXRpdHVkZSBudW1iZXJzLCB3aGljaCBkZWZpbmUgdGhlIGNvcm5lcnMgb2YgdGhlIGltYWdlLlxuICAgICAqICAgVGhlIGNvb3JkaW5hdGVzIHN0YXJ0IGF0IHRoZSB0b3AgbGVmdCBjb3JuZXIgb2YgdGhlIGltYWdlIGFuZCBwcm9jZWVkIGluIGNsb2Nrd2lzZSBvcmRlci5cbiAgICAgKiAgIFRoZXkgZG8gbm90IGhhdmUgdG8gcmVwcmVzZW50IGEgcmVjdGFuZ2xlLlxuICAgICAqIEByZXR1cm5zIHtJbWFnZVNvdXJjZX0gdGhpc1xuICAgICAqL1xuICAgIHNldENvb3JkaW5hdGVzKGNvb3JkaW5hdGVzOiBbW251bWJlciwgbnVtYmVyXSwgW251bWJlciwgbnVtYmVyXSwgW251bWJlciwgbnVtYmVyXSwgW251bWJlciwgbnVtYmVyXV0pIHtcbiAgICAgICAgdGhpcy5jb29yZGluYXRlcyA9IGNvb3JkaW5hdGVzO1xuXG4gICAgICAgIC8vIENhbGN1bGF0ZSB3aGljaCBtZXJjYXRvciB0aWxlIGlzIHN1aXRhYmxlIGZvciByZW5kZXJpbmcgdGhlIHZpZGVvIGluXG4gICAgICAgIC8vIGFuZCBjcmVhdGUgYSBidWZmZXIgd2l0aCB0aGUgY29ybmVyIGNvb3JkaW5hdGVzLiBUaGVzZSBjb29yZGluYXRlc1xuICAgICAgICAvLyBtYXkgYmUgb3V0c2lkZSB0aGUgdGlsZSwgYmVjYXVzZSByYXN0ZXIgdGlsZXMgYXJlbid0IGNsaXBwZWQgd2hlbiByZW5kZXJpbmcuXG5cbiAgICAgICAgY29uc3QgbWFwID0gdGhpcy5tYXA7XG5cbiAgICAgICAgLy8gdHJhbnNmb3JtIHRoZSBnZW8gY29vcmRpbmF0ZXMgaW50byAoem9vbSAwKSB0aWxlIHNwYWNlIGNvb3JkaW5hdGVzXG4gICAgICAgIGNvbnN0IGNvcm5lclowQ29vcmRzID0gY29vcmRpbmF0ZXMubWFwKChjb29yZCkgPT4ge1xuICAgICAgICAgICAgcmV0dXJuIG1hcC50cmFuc2Zvcm0ubG9jYXRpb25Db29yZGluYXRlKExuZ0xhdC5jb252ZXJ0KGNvb3JkKSkuem9vbVRvKDApO1xuICAgICAgICB9KTtcblxuICAgICAgICAvLyBDb21wdXRlIHRoZSBjb29yZGluYXRlcyBvZiB0aGUgdGlsZSB3ZSdsbCB1c2UgdG8gaG9sZCB0aGlzIGltYWdlJ3NcbiAgICAgICAgLy8gcmVuZGVyIGRhdGFcbiAgICAgICAgY29uc3QgY2VudGVyQ29vcmQgPSB0aGlzLmNlbnRlckNvb3JkID0gZ2V0Q29vcmRpbmF0ZXNDZW50ZXIoY29ybmVyWjBDb29yZHMpO1xuICAgICAgICAvLyBgY29sdW1uYCBhbmQgYHJvd2AgbWF5IGJlIGZyYWN0aW9uYWw7IHJvdW5kIHRoZW0gZG93biBzbyB0aGF0IHRoZXlcbiAgICAgICAgLy8gcmVwcmVzZW50IGludGVnZXIgdGlsZSBjb29yZGluYXRlc1xuICAgICAgICBjZW50ZXJDb29yZC5jb2x1bW4gPSBNYXRoLmZsb29yKGNlbnRlckNvb3JkLmNvbHVtbik7XG4gICAgICAgIGNlbnRlckNvb3JkLnJvdyA9IE1hdGguZmxvb3IoY2VudGVyQ29vcmQucm93KTtcbiAgICAgICAgdGhpcy50aWxlSUQgPSBuZXcgQ2Fub25pY2FsVGlsZUlEKGNlbnRlckNvb3JkLnpvb20sIGNlbnRlckNvb3JkLmNvbHVtbiwgY2VudGVyQ29vcmQucm93KTtcblxuICAgICAgICAvLyBDb25zdHJhaW4gbWluL21heCB6b29tIHRvIG91ciB0aWxlJ3Mgem9vbSBsZXZlbCBpbiBvcmRlciB0byBmb3JjZVxuICAgICAgICAvLyBTb3VyY2VDYWNoZSB0byByZXF1ZXN0IHRoaXMgdGlsZSAobm8gbWF0dGVyIHdoYXQgdGhlIG1hcCdzIHpvb21cbiAgICAgICAgLy8gbGV2ZWwpXG4gICAgICAgIHRoaXMubWluem9vbSA9IHRoaXMubWF4em9vbSA9IGNlbnRlckNvb3JkLnpvb207XG5cbiAgICAgICAgLy8gVHJhbnNmb3JtIHRoZSBjb3JuZXIgY29vcmRpbmF0ZXMgaW50byB0aGUgY29vcmRpbmF0ZSBzcGFjZSBvZiBvdXJcbiAgICAgICAgLy8gdGlsZS5cbiAgICAgICAgY29uc3QgdGlsZUNvb3JkcyA9IGNvcm5lclowQ29vcmRzLm1hcCgoY29vcmQpID0+IHtcbiAgICAgICAgICAgIGNvbnN0IHpvb21lZENvb3JkID0gY29vcmQuem9vbVRvKGNlbnRlckNvb3JkLnpvb20pO1xuICAgICAgICAgICAgcmV0dXJuIG5ldyBQb2ludChcbiAgICAgICAgICAgICAgICBNYXRoLnJvdW5kKCh6b29tZWRDb29yZC5jb2x1bW4gLSBjZW50ZXJDb29yZC5jb2x1bW4pICogRVhURU5UKSxcbiAgICAgICAgICAgICAgICBNYXRoLnJvdW5kKCh6b29tZWRDb29yZC5yb3cgLSBjZW50ZXJDb29yZC5yb3cpICogRVhURU5UKSk7XG4gICAgICAgIH0pO1xuXG4gICAgICAgIHRoaXMuX2JvdW5kc0FycmF5ID0gbmV3IFJhc3RlckJvdW5kc0FycmF5KCk7XG4gICAgICAgIHRoaXMuX2JvdW5kc0FycmF5LmVtcGxhY2VCYWNrKHRpbGVDb29yZHNbMF0ueCwgdGlsZUNvb3Jkc1swXS55LCAwLCAwKTtcbiAgICAgICAgdGhpcy5fYm91bmRzQXJyYXkuZW1wbGFjZUJhY2sodGlsZUNvb3Jkc1sxXS54LCB0aWxlQ29vcmRzWzFdLnksIEVYVEVOVCwgMCk7XG4gICAgICAgIHRoaXMuX2JvdW5kc0FycmF5LmVtcGxhY2VCYWNrKHRpbGVDb29yZHNbM10ueCwgdGlsZUNvb3Jkc1szXS55LCAwLCBFWFRFTlQpO1xuICAgICAgICB0aGlzLl9ib3VuZHNBcnJheS5lbXBsYWNlQmFjayh0aWxlQ29vcmRzWzJdLngsIHRpbGVDb29yZHNbMl0ueSwgRVhURU5ULCBFWFRFTlQpO1xuXG4gICAgICAgIGlmICh0aGlzLmJvdW5kc0J1ZmZlcikge1xuICAgICAgICAgICAgdGhpcy5ib3VuZHNCdWZmZXIuZGVzdHJveSgpO1xuICAgICAgICAgICAgZGVsZXRlIHRoaXMuYm91bmRzQnVmZmVyO1xuICAgICAgICB9XG5cbiAgICAgICAgdGhpcy5maXJlKG5ldyBFdmVudCgnZGF0YScsIHtkYXRhVHlwZTonc291cmNlJywgc291cmNlRGF0YVR5cGU6ICdjb250ZW50J30pKTtcbiAgICAgICAgcmV0dXJuIHRoaXM7XG4gICAgfVxuXG4gICAgcHJlcGFyZSgpIHtcbiAgICAgICAgaWYgKE9iamVjdC5rZXlzKHRoaXMudGlsZXMpLmxlbmd0aCA9PT0gMCB8fCAhdGhpcy5pbWFnZSkge1xuICAgICAgICAgICAgcmV0dXJuO1xuICAgICAgICB9XG5cbiAgICAgICAgY29uc3QgY29udGV4dCA9IHRoaXMubWFwLnBhaW50ZXIuY29udGV4dDtcbiAgICAgICAgY29uc3QgZ2wgPSBjb250ZXh0LmdsO1xuXG4gICAgICAgIGlmICghdGhpcy5ib3VuZHNCdWZmZXIpIHtcbiAgICAgICAgICAgIHRoaXMuYm91bmRzQnVmZmVyID0gY29udGV4dC5jcmVhdGVWZXJ0ZXhCdWZmZXIodGhpcy5fYm91bmRzQXJyYXksIHJhc3RlckJvdW5kc0F0dHJpYnV0ZXMubWVtYmVycyk7XG4gICAgICAgIH1cblxuICAgICAgICBpZiAoIXRoaXMuYm91bmRzU2VnbWVudHMpIHtcbiAgICAgICAgICAgIHRoaXMuYm91bmRzU2VnbWVudHMgPSBTZWdtZW50VmVjdG9yLnNpbXBsZVNlZ21lbnQoMCwgMCwgNCwgMik7XG4gICAgICAgIH1cblxuICAgICAgICBpZiAoIXRoaXMudGV4dHVyZSkge1xuICAgICAgICAgICAgdGhpcy50ZXh0dXJlID0gbmV3IFRleHR1cmUoY29udGV4dCwgdGhpcy5pbWFnZSwgZ2wuUkdCQSk7XG4gICAgICAgICAgICB0aGlzLnRleHR1cmUuYmluZChnbC5MSU5FQVIsIGdsLkNMQU1QX1RPX0VER0UpO1xuICAgICAgICB9XG5cbiAgICAgICAgZm9yIChjb25zdCB3IGluIHRoaXMudGlsZXMpIHtcbiAgICAgICAgICAgIGNvbnN0IHRpbGUgPSB0aGlzLnRpbGVzW3ddO1xuICAgICAgICAgICAgaWYgKHRpbGUuc3RhdGUgIT09ICdsb2FkZWQnKSB7XG4gICAgICAgICAgICAgICAgdGlsZS5zdGF0ZSA9ICdsb2FkZWQnO1xuICAgICAgICAgICAgICAgIHRpbGUudGV4dHVyZSA9IHRoaXMudGV4dHVyZTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgIH1cblxuICAgIGxvYWRUaWxlKHRpbGU6IFRpbGUsIGNhbGxiYWNrOiBDYWxsYmFjazx2b2lkPikge1xuICAgICAgICAvLyBXZSBoYXZlIGEgc2luZ2xlIHRpbGUgLS0gd2hvb3NlIGNvb3JkaW5hdGVzIGFyZSB0aGlzLnRpbGVJRCAtLSB0aGF0XG4gICAgICAgIC8vIGNvdmVycyB0aGUgaW1hZ2Ugd2Ugd2FudCB0byByZW5kZXIuICBJZiB0aGF0J3MgdGhlIG9uZSBiZWluZ1xuICAgICAgICAvLyByZXF1ZXN0ZWQsIHNldCBpdCB1cCB3aXRoIHRoZSBpbWFnZTsgb3RoZXJ3aXNlLCBtYXJrIHRoZSB0aWxlIGFzXG4gICAgICAgIC8vIGBlcnJvcmVkYCB0byBpbmRpY2F0ZSB0aGF0IHdlIGhhdmUgbm8gZGF0YSBmb3IgaXQuXG4gICAgICAgIC8vIElmIHRoZSB3b3JsZCB3cmFwcywgd2UgbWF5IGhhdmUgbXVsdGlwbGUgXCJ3cmFwcGVkXCIgY29waWVzIG9mIHRoZVxuICAgICAgICAvLyBzaW5nbGUgdGlsZS5cbiAgICAgICAgaWYgKHRoaXMudGlsZUlEICYmIHRoaXMudGlsZUlELmVxdWFscyh0aWxlLnRpbGVJRC5jYW5vbmljYWwpKSB7XG4gICAgICAgICAgICB0aGlzLnRpbGVzW1N0cmluZyh0aWxlLnRpbGVJRC53cmFwKV0gPSB0aWxlO1xuICAgICAgICAgICAgdGlsZS5idWNrZXRzID0ge307XG4gICAgICAgICAgICBjYWxsYmFjayhudWxsKTtcbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgIHRpbGUuc3RhdGUgPSAnZXJyb3JlZCc7XG4gICAgICAgICAgICBjYWxsYmFjayhudWxsKTtcbiAgICAgICAgfVxuICAgIH1cblxuICAgIHNlcmlhbGl6ZSgpOiBPYmplY3Qge1xuICAgICAgICByZXR1cm4ge1xuICAgICAgICAgICAgdHlwZTogJ2ltYWdlJyxcbiAgICAgICAgICAgIHVybDogdGhpcy5vcHRpb25zLnVybCxcbiAgICAgICAgICAgIGNvb3JkaW5hdGVzOiB0aGlzLmNvb3JkaW5hdGVzXG4gICAgICAgIH07XG4gICAgfVxuXG4gICAgaGFzVHJhbnNpdGlvbigpIHtcbiAgICAgICAgcmV0dXJuIGZhbHNlO1xuICAgIH1cbn1cblxuZXhwb3J0IGRlZmF1bHQgSW1hZ2VTb3VyY2U7XG4iLCIvLyBAZmxvd1xuXG5pbXBvcnQgeyBnZXRWaWRlbywgUmVzb3VyY2VUeXBlIH0gZnJvbSAnLi4vdXRpbC9hamF4JztcblxuaW1wb3J0IEltYWdlU291cmNlIGZyb20gJy4vaW1hZ2Vfc291cmNlJztcbmltcG9ydCByYXN0ZXJCb3VuZHNBdHRyaWJ1dGVzIGZyb20gJy4uL2RhdGEvcmFzdGVyX2JvdW5kc19hdHRyaWJ1dGVzJztcbmltcG9ydCBTZWdtZW50VmVjdG9yIGZyb20gJy4uL2RhdGEvc2VnbWVudCc7XG5pbXBvcnQgVGV4dHVyZSBmcm9tICcuLi9yZW5kZXIvdGV4dHVyZSc7XG5pbXBvcnQgeyBFcnJvckV2ZW50IH0gZnJvbSAnLi4vdXRpbC9ldmVudGVkJztcblxuaW1wb3J0IHR5cGUgTWFwIGZyb20gJy4uL3VpL21hcCc7XG5pbXBvcnQgdHlwZSBEaXNwYXRjaGVyIGZyb20gJy4uL3V0aWwvZGlzcGF0Y2hlcic7XG5pbXBvcnQgdHlwZSB7RXZlbnRlZH0gZnJvbSAnLi4vdXRpbC9ldmVudGVkJztcbmltcG9ydCB0eXBlIHtWaWRlb1NvdXJjZVNwZWNpZmljYXRpb259IGZyb20gJy4uL3N0eWxlLXNwZWMvdHlwZXMnO1xuXG4vKipcbiAqIEEgZGF0YSBzb3VyY2UgY29udGFpbmluZyB2aWRlby5cbiAqIChTZWUgdGhlIFtTdHlsZSBTcGVjaWZpY2F0aW9uXShodHRwczovL3d3dy5tYXBib3guY29tL21hcGJveC1nbC1zdHlsZS1zcGVjLyNzb3VyY2VzLXZpZGVvKSBmb3IgZGV0YWlsZWQgZG9jdW1lbnRhdGlvbiBvZiBvcHRpb25zLilcbiAqXG4gKiBAZXhhbXBsZVxuICogLy8gYWRkIHRvIG1hcFxuICogbWFwLmFkZFNvdXJjZSgnc29tZSBpZCcsIHtcbiAqICAgIHR5cGU6ICd2aWRlbycsXG4gKiAgICB1cmw6IFtcbiAqICAgICAgICAnaHR0cHM6Ly93d3cubWFwYm94LmNvbS9ibG9nL2Fzc2V0cy9iYWx0aW1vcmUtc21va2UubXA0JyxcbiAqICAgICAgICAnaHR0cHM6Ly93d3cubWFwYm94LmNvbS9ibG9nL2Fzc2V0cy9iYWx0aW1vcmUtc21va2Uud2VibSdcbiAqICAgIF0sXG4gKiAgICBjb29yZGluYXRlczogW1xuICogICAgICAgIFstNzYuNTQsIDM5LjE4XSxcbiAqICAgICAgICBbLTc2LjUyLCAzOS4xOF0sXG4gKiAgICAgICAgWy03Ni41MiwgMzkuMTddLFxuICogICAgICAgIFstNzYuNTQsIDM5LjE3XVxuICogICAgXVxuICogfSk7XG4gKlxuICogLy8gdXBkYXRlXG4gKiB2YXIgbXlTb3VyY2UgPSBtYXAuZ2V0U291cmNlKCdzb21lIGlkJyk7XG4gKiBteVNvdXJjZS5zZXRDb29yZGluYXRlcyhbXG4gKiAgICAgWy03Ni41NDMzNTczNzIyODM5NCwgMzkuMTg1Nzk5MDcyMjk3NDhdLFxuICogICAgIFstNzYuNTI4MDM2NTk0MzkwODcsIDM5LjE4MzgzNjQ4NDc1ODddLFxuICogICAgIFstNzYuNTI5NTM4NjMxNDM5MiwgMzkuMTc2ODMzOTI1MDc2MDZdLFxuICogICAgIFstNzYuNTQ1MjAyNzMyMDg2MTgsIDM5LjE3ODc2MzQ0MTA2NjQyXVxuICogXSk7XG4gKlxuICogbWFwLnJlbW92ZVNvdXJjZSgnc29tZSBpZCcpOyAgLy8gcmVtb3ZlXG4gKiBAc2VlIFtBZGQgYSB2aWRlb10oaHR0cHM6Ly93d3cubWFwYm94LmNvbS9tYXBib3gtZ2wtanMvZXhhbXBsZS92aWRlby1vbi1hLW1hcC8pXG4gKi9cbmNsYXNzIFZpZGVvU291cmNlIGV4dGVuZHMgSW1hZ2VTb3VyY2Uge1xuICAgIG9wdGlvbnM6IFZpZGVvU291cmNlU3BlY2lmaWNhdGlvbjtcbiAgICB1cmxzOiBBcnJheTxzdHJpbmc+O1xuICAgIHZpZGVvOiBIVE1MVmlkZW9FbGVtZW50O1xuICAgIHJvdW5kWm9vbTogYm9vbGVhbjtcblxuICAgIC8qKlxuICAgICAqIEBwcml2YXRlXG4gICAgICovXG4gICAgY29uc3RydWN0b3IoaWQ6IHN0cmluZywgb3B0aW9uczogVmlkZW9Tb3VyY2VTcGVjaWZpY2F0aW9uLCBkaXNwYXRjaGVyOiBEaXNwYXRjaGVyLCBldmVudGVkUGFyZW50OiBFdmVudGVkKSB7XG4gICAgICAgIHN1cGVyKGlkLCBvcHRpb25zLCBkaXNwYXRjaGVyLCBldmVudGVkUGFyZW50KTtcbiAgICAgICAgdGhpcy5yb3VuZFpvb20gPSB0cnVlO1xuICAgICAgICB0aGlzLnR5cGUgPSAndmlkZW8nO1xuICAgICAgICB0aGlzLm9wdGlvbnMgPSBvcHRpb25zO1xuICAgIH1cblxuICAgIGxvYWQoKSB7XG4gICAgICAgIGNvbnN0IG9wdGlvbnMgPSB0aGlzLm9wdGlvbnM7XG5cbiAgICAgICAgdGhpcy51cmxzID0gW107XG4gICAgICAgIGZvciAoY29uc3QgdXJsIG9mIG9wdGlvbnMudXJscykge1xuICAgICAgICAgICAgdGhpcy51cmxzLnB1c2godGhpcy5tYXAuX3RyYW5zZm9ybVJlcXVlc3QodXJsLCBSZXNvdXJjZVR5cGUuU291cmNlKS51cmwpO1xuICAgICAgICB9XG5cbiAgICAgICAgZ2V0VmlkZW8odGhpcy51cmxzLCAoZXJyLCB2aWRlbykgPT4ge1xuICAgICAgICAgICAgaWYgKGVycikge1xuICAgICAgICAgICAgICAgIHRoaXMuZmlyZShuZXcgRXJyb3JFdmVudChlcnIpKTtcbiAgICAgICAgICAgIH0gZWxzZSBpZiAodmlkZW8pIHtcbiAgICAgICAgICAgICAgICB0aGlzLnZpZGVvID0gdmlkZW87XG4gICAgICAgICAgICAgICAgdGhpcy52aWRlby5sb29wID0gdHJ1ZTtcblxuICAgICAgICAgICAgICAgIC8vIFN0YXJ0IHJlcGFpbnRpbmcgd2hlbiB2aWRlbyBzdGFydHMgcGxheWluZy4gaGFzVHJhbnNpdGlvbigpIHdpbGwgdGhlbiByZXR1cm5cbiAgICAgICAgICAgICAgICAvLyB0cnVlIHRvIHRyaWdnZXIgYWRkaXRpb25hbCBmcmFtZXMgYXMgbG9uZyBhcyB0aGUgdmlkZW9zIGNvbnRpbnVlcyBwbGF5aW5nLlxuICAgICAgICAgICAgICAgIHRoaXMudmlkZW8uYWRkRXZlbnRMaXN0ZW5lcigncGxheWluZycsICgpID0+IHtcbiAgICAgICAgICAgICAgICAgICAgdGhpcy5tYXAuX3JlcmVuZGVyKCk7XG4gICAgICAgICAgICAgICAgfSk7XG5cbiAgICAgICAgICAgICAgICBpZiAodGhpcy5tYXApIHtcbiAgICAgICAgICAgICAgICAgICAgdGhpcy52aWRlby5wbGF5KCk7XG4gICAgICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICAgICAgdGhpcy5fZmluaXNoTG9hZGluZygpO1xuICAgICAgICAgICAgfVxuICAgICAgICB9KTtcbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBSZXR1cm5zIHRoZSBIVE1MIGB2aWRlb2AgZWxlbWVudC5cbiAgICAgKlxuICAgICAqIEByZXR1cm5zIHtIVE1MVmlkZW9FbGVtZW50fSBUaGUgSFRNTCBgdmlkZW9gIGVsZW1lbnQuXG4gICAgICovXG4gICAgZ2V0VmlkZW8oKSB7XG4gICAgICAgIHJldHVybiB0aGlzLnZpZGVvO1xuICAgIH1cblxuICAgIG9uQWRkKG1hcDogTWFwKSB7XG4gICAgICAgIGlmICh0aGlzLm1hcCkgcmV0dXJuO1xuICAgICAgICB0aGlzLm1hcCA9IG1hcDtcbiAgICAgICAgdGhpcy5sb2FkKCk7XG4gICAgICAgIGlmICh0aGlzLnZpZGVvKSB7XG4gICAgICAgICAgICB0aGlzLnZpZGVvLnBsYXkoKTtcbiAgICAgICAgICAgIHRoaXMuc2V0Q29vcmRpbmF0ZXModGhpcy5jb29yZGluYXRlcyk7XG4gICAgICAgIH1cbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBTZXRzIHRoZSB2aWRlbydzIGNvb3JkaW5hdGVzIGFuZCByZS1yZW5kZXJzIHRoZSBtYXAuXG4gICAgICpcbiAgICAgKiBAbWV0aG9kIHNldENvb3JkaW5hdGVzXG4gICAgICogQGluc3RhbmNlXG4gICAgICogQG1lbWJlcm9mIFZpZGVvU291cmNlXG4gICAgICogQHBhcmFtIHtBcnJheTxBcnJheTxudW1iZXI+Pn0gY29vcmRpbmF0ZXMgRm91ciBnZW9ncmFwaGljYWwgY29vcmRpbmF0ZXMsXG4gICAgICogICByZXByZXNlbnRlZCBhcyBhcnJheXMgb2YgbG9uZ2l0dWRlIGFuZCBsYXRpdHVkZSBudW1iZXJzLCB3aGljaCBkZWZpbmUgdGhlIGNvcm5lcnMgb2YgdGhlIHZpZGVvLlxuICAgICAqICAgVGhlIGNvb3JkaW5hdGVzIHN0YXJ0IGF0IHRoZSB0b3AgbGVmdCBjb3JuZXIgb2YgdGhlIHZpZGVvIGFuZCBwcm9jZWVkIGluIGNsb2Nrd2lzZSBvcmRlci5cbiAgICAgKiAgIFRoZXkgZG8gbm90IGhhdmUgdG8gcmVwcmVzZW50IGEgcmVjdGFuZ2xlLlxuICAgICAqIEByZXR1cm5zIHtWaWRlb1NvdXJjZX0gdGhpc1xuICAgICAqL1xuICAgIC8vIHNldENvb3JkaW5hdGVzIGluaGVyaXRlZCBmcm9tIEltYWdlU291cmNlXG5cbiAgICBwcmVwYXJlKCkge1xuICAgICAgICBpZiAoT2JqZWN0LmtleXModGhpcy50aWxlcykubGVuZ3RoID09PSAwIHx8IHRoaXMudmlkZW8ucmVhZHlTdGF0ZSA8IDIpIHtcbiAgICAgICAgICAgIHJldHVybjsgLy8gbm90IGVub3VnaCBkYXRhIGZvciBjdXJyZW50IHBvc2l0aW9uXG4gICAgICAgIH1cblxuICAgICAgICBjb25zdCBjb250ZXh0ID0gdGhpcy5tYXAucGFpbnRlci5jb250ZXh0O1xuICAgICAgICBjb25zdCBnbCA9IGNvbnRleHQuZ2w7XG5cbiAgICAgICAgaWYgKCF0aGlzLmJvdW5kc0J1ZmZlcikge1xuICAgICAgICAgICAgdGhpcy5ib3VuZHNCdWZmZXIgPSBjb250ZXh0LmNyZWF0ZVZlcnRleEJ1ZmZlcih0aGlzLl9ib3VuZHNBcnJheSwgcmFzdGVyQm91bmRzQXR0cmlidXRlcy5tZW1iZXJzKTtcbiAgICAgICAgfVxuXG4gICAgICAgIGlmICghdGhpcy5ib3VuZHNTZWdtZW50cykge1xuICAgICAgICAgICAgdGhpcy5ib3VuZHNTZWdtZW50cyA9IFNlZ21lbnRWZWN0b3Iuc2ltcGxlU2VnbWVudCgwLCAwLCA0LCAyKTtcbiAgICAgICAgfVxuXG4gICAgICAgIGlmICghdGhpcy50ZXh0dXJlKSB7XG4gICAgICAgICAgICB0aGlzLnRleHR1cmUgPSBuZXcgVGV4dHVyZShjb250ZXh0LCB0aGlzLnZpZGVvLCBnbC5SR0JBKTtcbiAgICAgICAgICAgIHRoaXMudGV4dHVyZS5iaW5kKGdsLkxJTkVBUiwgZ2wuQ0xBTVBfVE9fRURHRSk7XG4gICAgICAgIH0gZWxzZSBpZiAoIXRoaXMudmlkZW8ucGF1c2VkKSB7XG4gICAgICAgICAgICB0aGlzLnRleHR1cmUuYmluZChnbC5MSU5FQVIsIGdsLkNMQU1QX1RPX0VER0UpO1xuICAgICAgICAgICAgZ2wudGV4U3ViSW1hZ2UyRChnbC5URVhUVVJFXzJELCAwLCAwLCAwLCBnbC5SR0JBLCBnbC5VTlNJR05FRF9CWVRFLCB0aGlzLnZpZGVvKTtcbiAgICAgICAgfVxuXG4gICAgICAgIGZvciAoY29uc3QgdyBpbiB0aGlzLnRpbGVzKSB7XG4gICAgICAgICAgICBjb25zdCB0aWxlID0gdGhpcy50aWxlc1t3XTtcbiAgICAgICAgICAgIGlmICh0aWxlLnN0YXRlICE9PSAnbG9hZGVkJykge1xuICAgICAgICAgICAgICAgIHRpbGUuc3RhdGUgPSAnbG9hZGVkJztcbiAgICAgICAgICAgICAgICB0aWxlLnRleHR1cmUgPSB0aGlzLnRleHR1cmU7XG4gICAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICB9XG5cbiAgICBzZXJpYWxpemUoKSB7XG4gICAgICAgIHJldHVybiB7XG4gICAgICAgICAgICB0eXBlOiAndmlkZW8nLFxuICAgICAgICAgICAgdXJsczogdGhpcy51cmxzLFxuICAgICAgICAgICAgY29vcmRpbmF0ZXM6IHRoaXMuY29vcmRpbmF0ZXNcbiAgICAgICAgfTtcbiAgICB9XG5cbiAgICBoYXNUcmFuc2l0aW9uKCkge1xuICAgICAgICByZXR1cm4gdGhpcy52aWRlbyAmJiAhdGhpcy52aWRlby5wYXVzZWQ7XG4gICAgfVxufVxuXG5leHBvcnQgZGVmYXVsdCBWaWRlb1NvdXJjZTtcbiIsIi8vIEBmbG93XG5cbmltcG9ydCBJbWFnZVNvdXJjZSBmcm9tICcuL2ltYWdlX3NvdXJjZSc7XG5cbmltcG9ydCB3aW5kb3cgZnJvbSAnLi4vdXRpbC93aW5kb3cnO1xuaW1wb3J0IHJhc3RlckJvdW5kc0F0dHJpYnV0ZXMgZnJvbSAnLi4vZGF0YS9yYXN0ZXJfYm91bmRzX2F0dHJpYnV0ZXMnO1xuaW1wb3J0IFNlZ21lbnRWZWN0b3IgZnJvbSAnLi4vZGF0YS9zZWdtZW50JztcbmltcG9ydCBUZXh0dXJlIGZyb20gJy4uL3JlbmRlci90ZXh0dXJlJztcbmltcG9ydCB7IEVycm9yRXZlbnQgfSBmcm9tICcuLi91dGlsL2V2ZW50ZWQnO1xuaW1wb3J0IFZhbGlkYXRpb25FcnJvciBmcm9tICcuLi9zdHlsZS1zcGVjL2Vycm9yL3ZhbGlkYXRpb25fZXJyb3InO1xuXG5pbXBvcnQgdHlwZSBNYXAgZnJvbSAnLi4vdWkvbWFwJztcbmltcG9ydCB0eXBlIERpc3BhdGNoZXIgZnJvbSAnLi4vdXRpbC9kaXNwYXRjaGVyJztcbmltcG9ydCB0eXBlIHtFdmVudGVkfSBmcm9tICcuLi91dGlsL2V2ZW50ZWQnO1xuXG5leHBvcnQgdHlwZSBDYW52YXNTb3VyY2VTcGVjaWZpY2F0aW9uID0ge3xcbiAgICBcInR5cGVcIjogXCJjYW52YXNcIixcbiAgICBcImNvb3JkaW5hdGVzXCI6IFtbbnVtYmVyLCBudW1iZXJdLCBbbnVtYmVyLCBudW1iZXJdLCBbbnVtYmVyLCBudW1iZXJdLCBbbnVtYmVyLCBudW1iZXJdXSxcbiAgICBcImFuaW1hdGVcIj86IGJvb2xlYW4sXG4gICAgXCJjYW52YXNcIjogc3RyaW5nIHwgSFRNTENhbnZhc0VsZW1lbnRcbnx9O1xuXG4vKipcbiAqIE9wdGlvbnMgdG8gYWRkIGEgY2FudmFzIHNvdXJjZSB0eXBlIHRvIHRoZSBtYXAuXG4gKlxuICogQHR5cGVkZWYge09iamVjdH0gQ2FudmFzU291cmNlT3B0aW9uc1xuICogQHByb3BlcnR5IHtzdHJpbmd9IHR5cGUgU291cmNlIHR5cGUuIE11c3QgYmUgYFwiY2FudmFzXCJgLlxuICogQHByb3BlcnR5IHtzdHJpbmd8SFRNTENhbnZhc0VsZW1lbnR9IGNhbnZhcyBDYW52YXMgc291cmNlIGZyb20gd2hpY2ggdG8gcmVhZCBwaXhlbHMuIENhbiBiZSBhIHN0cmluZyByZXByZXNlbnRpbmcgdGhlIElEIG9mIHRoZSBjYW52YXMgZWxlbWVudCwgb3IgdGhlIGBIVE1MQ2FudmFzRWxlbWVudGAgaXRzZWxmLlxuICogQHByb3BlcnR5IHtBcnJheTxBcnJheTxudW1iZXI+Pn0gY29vcmRpbmF0ZXMgRm91ciBnZW9ncmFwaGljYWwgY29vcmRpbmF0ZXMgZGVub3Rpbmcgd2hlcmUgdG8gcGxhY2UgdGhlIGNvcm5lcnMgb2YgdGhlIGNhbnZhcywgc3BlY2lmaWVkIGluIGBbbG9uZ2l0dWRlLCBsYXRpdHVkZV1gIHBhaXJzLlxuICogQHByb3BlcnR5IHtib29sZWFufSBbYW5pbWF0ZT10cnVlXSBXaGV0aGVyIHRoZSBjYW52YXMgc291cmNlIGlzIGFuaW1hdGVkLiBJZiB0aGUgY2FudmFzIGlzIHN0YXRpYyAoaS5lLiBwaXhlbHMgZG8gbm90IG5lZWQgdG8gYmUgcmUtcmVhZCBvbiBldmVyeSBmcmFtZSksIGBhbmltYXRlYCBzaG91bGQgYmUgc2V0IHRvIGBmYWxzZWAgdG8gaW1wcm92ZSBwZXJmb3JtYW5jZS5cbiAqL1xuXG4vKipcbiAqIEEgZGF0YSBzb3VyY2UgY29udGFpbmluZyB0aGUgY29udGVudHMgb2YgYW4gSFRNTCBjYW52YXMuIFNlZSB7QGxpbmsgQ2FudmFzU291cmNlT3B0aW9uc30gZm9yIGRldGFpbGVkIGRvY3VtZW50YXRpb24gb2Ygb3B0aW9ucy5cbiAqXG4gKiBAZXhhbXBsZVxuICogLy8gYWRkIHRvIG1hcFxuICogbWFwLmFkZFNvdXJjZSgnc29tZSBpZCcsIHtcbiAqICAgIHR5cGU6ICdjYW52YXMnLFxuICogICAgY2FudmFzOiAnaWRPZk15SFRNTENhbnZhcycsXG4gKiAgICBhbmltYXRlOiB0cnVlLFxuICogICAgY29vcmRpbmF0ZXM6IFtcbiAqICAgICAgICBbLTc2LjU0LCAzOS4xOF0sXG4gKiAgICAgICAgWy03Ni41MiwgMzkuMThdLFxuICogICAgICAgIFstNzYuNTIsIDM5LjE3XSxcbiAqICAgICAgICBbLTc2LjU0LCAzOS4xN11cbiAqICAgIF1cbiAqIH0pO1xuICpcbiAqIC8vIHVwZGF0ZVxuICogdmFyIG15U291cmNlID0gbWFwLmdldFNvdXJjZSgnc29tZSBpZCcpO1xuICogbXlTb3VyY2Uuc2V0Q29vcmRpbmF0ZXMoW1xuICogICAgIFstNzYuNTQzMzU3MzcyMjgzOTQsIDM5LjE4NTc5OTA3MjI5NzQ4XSxcbiAqICAgICBbLTc2LjUyODAzNjU5NDM5MDg3LCAzOS4xODM4MzY0ODQ3NTg3XSxcbiAqICAgICBbLTc2LjUyOTUzODYzMTQzOTIsIDM5LjE3NjgzMzkyNTA3NjA2XSxcbiAqICAgICBbLTc2LjU0NTIwMjczMjA4NjE4LCAzOS4xNzg3NjM0NDEwNjY0Ml1cbiAqIF0pO1xuICpcbiAqIG1hcC5yZW1vdmVTb3VyY2UoJ3NvbWUgaWQnKTsgIC8vIHJlbW92ZVxuICovXG5jbGFzcyBDYW52YXNTb3VyY2UgZXh0ZW5kcyBJbWFnZVNvdXJjZSB7XG4gICAgb3B0aW9uczogQ2FudmFzU291cmNlU3BlY2lmaWNhdGlvbjtcbiAgICBhbmltYXRlOiBib29sZWFuO1xuICAgIGNhbnZhczogSFRNTENhbnZhc0VsZW1lbnQ7XG4gICAgd2lkdGg6IG51bWJlcjtcbiAgICBoZWlnaHQ6IG51bWJlcjtcbiAgICBwbGF5OiAoKSA9PiB2b2lkO1xuICAgIHBhdXNlOiAoKSA9PiB2b2lkO1xuICAgIF9wbGF5aW5nOiBib29sZWFuO1xuXG4gICAgLyoqXG4gICAgICogQHByaXZhdGVcbiAgICAgKi9cbiAgICBjb25zdHJ1Y3RvcihpZDogc3RyaW5nLCBvcHRpb25zOiBDYW52YXNTb3VyY2VTcGVjaWZpY2F0aW9uLCBkaXNwYXRjaGVyOiBEaXNwYXRjaGVyLCBldmVudGVkUGFyZW50OiBFdmVudGVkKSB7XG4gICAgICAgIHN1cGVyKGlkLCBvcHRpb25zLCBkaXNwYXRjaGVyLCBldmVudGVkUGFyZW50KTtcblxuICAgICAgICAvLyBXZSBidWlsZCBpbiBzb21lIHZhbGlkYXRpb24gaGVyZSwgc2luY2UgY2FudmFzIHNvdXJjZXMgYXJlbid0IGluY2x1ZGVkIGluIHRoZSBzdHlsZSBzcGVjOlxuICAgICAgICBpZiAoIW9wdGlvbnMuY29vcmRpbmF0ZXMpIHtcbiAgICAgICAgICAgIHRoaXMuZmlyZShuZXcgRXJyb3JFdmVudChuZXcgVmFsaWRhdGlvbkVycm9yKGBzb3VyY2VzLiR7aWR9YCwgbnVsbCwgJ21pc3NpbmcgcmVxdWlyZWQgcHJvcGVydHkgXCJjb29yZGluYXRlc1wiJykpKTtcbiAgICAgICAgfSBlbHNlIGlmICghQXJyYXkuaXNBcnJheShvcHRpb25zLmNvb3JkaW5hdGVzKSB8fCBvcHRpb25zLmNvb3JkaW5hdGVzLmxlbmd0aCAhPT0gNCB8fFxuICAgICAgICAgICAgICAgIG9wdGlvbnMuY29vcmRpbmF0ZXMuc29tZShjID0+ICFBcnJheS5pc0FycmF5KGMpIHx8IGMubGVuZ3RoICE9PSAyIHx8IGMuc29tZShsID0+IHR5cGVvZiBsICE9PSAnbnVtYmVyJykpKSB7XG4gICAgICAgICAgICB0aGlzLmZpcmUobmV3IEVycm9yRXZlbnQobmV3IFZhbGlkYXRpb25FcnJvcihgc291cmNlcy4ke2lkfWAsIG51bGwsICdcImNvb3JkaW5hdGVzXCIgcHJvcGVydHkgbXVzdCBiZSBhbiBhcnJheSBvZiA0IGxvbmdpdHVkZS9sYXRpdHVkZSBhcnJheSBwYWlycycpKSk7XG4gICAgICAgIH1cblxuICAgICAgICBpZiAob3B0aW9ucy5hbmltYXRlICYmIHR5cGVvZiBvcHRpb25zLmFuaW1hdGUgIT09ICdib29sZWFuJykge1xuICAgICAgICAgICAgdGhpcy5maXJlKG5ldyBFcnJvckV2ZW50KG5ldyBWYWxpZGF0aW9uRXJyb3IoYHNvdXJjZXMuJHtpZH1gLCBudWxsLCAnb3B0aW9uYWwgXCJhbmltYXRlXCIgcHJvcGVydHkgbXVzdCBiZSBhIGJvb2xlYW4gdmFsdWUnKSkpO1xuICAgICAgICB9XG5cbiAgICAgICAgaWYgKCFvcHRpb25zLmNhbnZhcykge1xuICAgICAgICAgICAgdGhpcy5maXJlKG5ldyBFcnJvckV2ZW50KG5ldyBWYWxpZGF0aW9uRXJyb3IoYHNvdXJjZXMuJHtpZH1gLCBudWxsLCAnbWlzc2luZyByZXF1aXJlZCBwcm9wZXJ0eSBcImNhbnZhc1wiJykpKTtcbiAgICAgICAgfSBlbHNlIGlmICh0eXBlb2Ygb3B0aW9ucy5jYW52YXMgIT09ICdzdHJpbmcnICYmICEob3B0aW9ucy5jYW52YXMgaW5zdGFuY2VvZiB3aW5kb3cuSFRNTENhbnZhc0VsZW1lbnQpKSB7XG4gICAgICAgICAgICB0aGlzLmZpcmUobmV3IEVycm9yRXZlbnQobmV3IFZhbGlkYXRpb25FcnJvcihgc291cmNlcy4ke2lkfWAsIG51bGwsICdcImNhbnZhc1wiIG11c3QgYmUgZWl0aGVyIGEgc3RyaW5nIHJlcHJlc2VudGluZyB0aGUgSUQgb2YgdGhlIGNhbnZhcyBlbGVtZW50IGZyb20gd2hpY2ggdG8gcmVhZCwgb3IgYW4gSFRNTENhbnZhc0VsZW1lbnQgaW5zdGFuY2UnKSkpO1xuICAgICAgICB9XG5cbiAgICAgICAgdGhpcy5vcHRpb25zID0gb3B0aW9ucztcbiAgICAgICAgdGhpcy5hbmltYXRlID0gb3B0aW9ucy5hbmltYXRlICE9PSB1bmRlZmluZWQgPyBvcHRpb25zLmFuaW1hdGUgOiB0cnVlO1xuICAgIH1cblxuICAgIC8qKlxuICAgICAqIEVuYWJsZXMgYW5pbWF0aW9uLiBUaGUgaW1hZ2Ugd2lsbCBiZSBjb3BpZWQgZnJvbSB0aGUgY2FudmFzIHRvIHRoZSBtYXAgb24gZWFjaCBmcmFtZS5cbiAgICAgKiBAbWV0aG9kIHBsYXlcbiAgICAgKiBAaW5zdGFuY2VcbiAgICAgKiBAbWVtYmVyb2YgQ2FudmFzU291cmNlXG4gICAgICovXG5cbiAgICAvKipcbiAgICAgKiBEaXNhYmxlcyBhbmltYXRpb24uIFRoZSBtYXAgd2lsbCBkaXNwbGF5IGEgc3RhdGljIGNvcHkgb2YgdGhlIGNhbnZhcyBpbWFnZS5cbiAgICAgKiBAbWV0aG9kIHBhdXNlXG4gICAgICogQGluc3RhbmNlXG4gICAgICogQG1lbWJlcm9mIENhbnZhc1NvdXJjZVxuICAgICAqL1xuXG4gICAgbG9hZCgpIHtcbiAgICAgICAgaWYgKCF0aGlzLmNhbnZhcykge1xuICAgICAgICAgICAgdGhpcy5jYW52YXMgPSAodGhpcy5vcHRpb25zLmNhbnZhcyBpbnN0YW5jZW9mIHdpbmRvdy5IVE1MQ2FudmFzRWxlbWVudCkgP1xuICAgICAgICAgICAgICAgIHRoaXMub3B0aW9ucy5jYW52YXMgOlxuICAgICAgICAgICAgICAgIHdpbmRvdy5kb2N1bWVudC5nZXRFbGVtZW50QnlJZCh0aGlzLm9wdGlvbnMuY2FudmFzKTtcbiAgICAgICAgfVxuICAgICAgICB0aGlzLndpZHRoID0gdGhpcy5jYW52YXMud2lkdGg7XG4gICAgICAgIHRoaXMuaGVpZ2h0ID0gdGhpcy5jYW52YXMuaGVpZ2h0O1xuXG4gICAgICAgIGlmICh0aGlzLl9oYXNJbnZhbGlkRGltZW5zaW9ucygpKSB7XG4gICAgICAgICAgICB0aGlzLmZpcmUobmV3IEVycm9yRXZlbnQobmV3IEVycm9yKCdDYW52YXMgZGltZW5zaW9ucyBjYW5ub3QgYmUgbGVzcyB0aGFuIG9yIGVxdWFsIHRvIHplcm8uJykpKTtcbiAgICAgICAgICAgIHJldHVybjtcbiAgICAgICAgfVxuXG4gICAgICAgIHRoaXMucGxheSA9IGZ1bmN0aW9uKCkge1xuICAgICAgICAgICAgdGhpcy5fcGxheWluZyA9IHRydWU7XG4gICAgICAgICAgICB0aGlzLm1hcC5fcmVyZW5kZXIoKTtcbiAgICAgICAgfTtcblxuICAgICAgICB0aGlzLnBhdXNlID0gZnVuY3Rpb24oKSB7XG4gICAgICAgICAgICB0aGlzLl9wbGF5aW5nID0gZmFsc2U7XG4gICAgICAgIH07XG5cbiAgICAgICAgdGhpcy5fZmluaXNoTG9hZGluZygpO1xuICAgIH1cblxuICAgIC8qKlxuICAgICAqIFJldHVybnMgdGhlIEhUTUwgYGNhbnZhc2AgZWxlbWVudC5cbiAgICAgKlxuICAgICAqIEByZXR1cm5zIHtIVE1MQ2FudmFzRWxlbWVudH0gVGhlIEhUTUwgYGNhbnZhc2AgZWxlbWVudC5cbiAgICAgKi9cbiAgICBnZXRDYW52YXMoKSB7XG4gICAgICAgIHJldHVybiB0aGlzLmNhbnZhcztcbiAgICB9XG5cbiAgICBvbkFkZChtYXA6IE1hcCkge1xuICAgICAgICB0aGlzLm1hcCA9IG1hcDtcbiAgICAgICAgdGhpcy5sb2FkKCk7XG4gICAgICAgIGlmICh0aGlzLmNhbnZhcykge1xuICAgICAgICAgICAgaWYgKHRoaXMuYW5pbWF0ZSkgdGhpcy5wbGF5KCk7XG4gICAgICAgIH1cbiAgICB9XG5cbiAgICBvblJlbW92ZSgpIHtcbiAgICAgICAgdGhpcy5wYXVzZSgpO1xuICAgIH1cblxuICAgIC8qKlxuICAgICAqIFNldHMgdGhlIGNhbnZhcydzIGNvb3JkaW5hdGVzIGFuZCByZS1yZW5kZXJzIHRoZSBtYXAuXG4gICAgICpcbiAgICAgKiBAbWV0aG9kIHNldENvb3JkaW5hdGVzXG4gICAgICogQGluc3RhbmNlXG4gICAgICogQG1lbWJlcm9mIENhbnZhc1NvdXJjZVxuICAgICAqIEBwYXJhbSB7QXJyYXk8QXJyYXk8bnVtYmVyPj59IGNvb3JkaW5hdGVzIEZvdXIgZ2VvZ3JhcGhpY2FsIGNvb3JkaW5hdGVzLFxuICAgICAqICAgcmVwcmVzZW50ZWQgYXMgYXJyYXlzIG9mIGxvbmdpdHVkZSBhbmQgbGF0aXR1ZGUgbnVtYmVycywgd2hpY2ggZGVmaW5lIHRoZSBjb3JuZXJzIG9mIHRoZSBjYW52YXMuXG4gICAgICogICBUaGUgY29vcmRpbmF0ZXMgc3RhcnQgYXQgdGhlIHRvcCBsZWZ0IGNvcm5lciBvZiB0aGUgY2FudmFzIGFuZCBwcm9jZWVkIGluIGNsb2Nrd2lzZSBvcmRlci5cbiAgICAgKiAgIFRoZXkgZG8gbm90IGhhdmUgdG8gcmVwcmVzZW50IGEgcmVjdGFuZ2xlLlxuICAgICAqIEByZXR1cm5zIHtDYW52YXNTb3VyY2V9IHRoaXNcbiAgICAgKi9cbiAgICAvLyBzZXRDb29yZGluYXRlcyBpbmhlcml0ZWQgZnJvbSBJbWFnZVNvdXJjZVxuXG4gICAgcHJlcGFyZSgpIHtcbiAgICAgICAgbGV0IHJlc2l6ZSA9IGZhbHNlO1xuICAgICAgICBpZiAodGhpcy5jYW52YXMud2lkdGggIT09IHRoaXMud2lkdGgpIHtcbiAgICAgICAgICAgIHRoaXMud2lkdGggPSB0aGlzLmNhbnZhcy53aWR0aDtcbiAgICAgICAgICAgIHJlc2l6ZSA9IHRydWU7XG4gICAgICAgIH1cbiAgICAgICAgaWYgKHRoaXMuY2FudmFzLmhlaWdodCAhPT0gdGhpcy5oZWlnaHQpIHtcbiAgICAgICAgICAgIHRoaXMuaGVpZ2h0ID0gdGhpcy5jYW52YXMuaGVpZ2h0O1xuICAgICAgICAgICAgcmVzaXplID0gdHJ1ZTtcbiAgICAgICAgfVxuXG4gICAgICAgIGlmICh0aGlzLl9oYXNJbnZhbGlkRGltZW5zaW9ucygpKSByZXR1cm47XG5cbiAgICAgICAgaWYgKE9iamVjdC5rZXlzKHRoaXMudGlsZXMpLmxlbmd0aCA9PT0gMCkgcmV0dXJuOyAvLyBub3QgZW5vdWdoIGRhdGEgZm9yIGN1cnJlbnQgcG9zaXRpb25cblxuICAgICAgICBjb25zdCBjb250ZXh0ID0gdGhpcy5tYXAucGFpbnRlci5jb250ZXh0O1xuICAgICAgICBjb25zdCBnbCA9IGNvbnRleHQuZ2w7XG5cbiAgICAgICAgaWYgKCF0aGlzLmJvdW5kc0J1ZmZlcikge1xuICAgICAgICAgICAgdGhpcy5ib3VuZHNCdWZmZXIgPSBjb250ZXh0LmNyZWF0ZVZlcnRleEJ1ZmZlcih0aGlzLl9ib3VuZHNBcnJheSwgcmFzdGVyQm91bmRzQXR0cmlidXRlcy5tZW1iZXJzKTtcbiAgICAgICAgfVxuXG4gICAgICAgIGlmICghdGhpcy5ib3VuZHNTZWdtZW50cykge1xuICAgICAgICAgICAgdGhpcy5ib3VuZHNTZWdtZW50cyA9IFNlZ21lbnRWZWN0b3Iuc2ltcGxlU2VnbWVudCgwLCAwLCA0LCAyKTtcbiAgICAgICAgfVxuXG4gICAgICAgIGlmICghdGhpcy50ZXh0dXJlKSB7XG4gICAgICAgICAgICB0aGlzLnRleHR1cmUgPSBuZXcgVGV4dHVyZShjb250ZXh0LCB0aGlzLmNhbnZhcywgZ2wuUkdCQSk7XG4gICAgICAgICAgICB0aGlzLnRleHR1cmUuYmluZChnbC5MSU5FQVIsIGdsLkNMQU1QX1RPX0VER0UpO1xuICAgICAgICB9IGVsc2UgaWYgKHJlc2l6ZSkge1xuICAgICAgICAgICAgdGhpcy50ZXh0dXJlLnVwZGF0ZSh0aGlzLmNhbnZhcyk7XG4gICAgICAgIH0gZWxzZSBpZiAodGhpcy5fcGxheWluZykge1xuICAgICAgICAgICAgdGhpcy50ZXh0dXJlLmJpbmQoZ2wuTElORUFSLCBnbC5DTEFNUF9UT19FREdFKTtcbiAgICAgICAgICAgIGdsLnRleFN1YkltYWdlMkQoZ2wuVEVYVFVSRV8yRCwgMCwgMCwgMCwgZ2wuUkdCQSwgZ2wuVU5TSUdORURfQllURSwgdGhpcy5jYW52YXMpO1xuICAgICAgICB9XG5cbiAgICAgICAgZm9yIChjb25zdCB3IGluIHRoaXMudGlsZXMpIHtcbiAgICAgICAgICAgIGNvbnN0IHRpbGUgPSB0aGlzLnRpbGVzW3ddO1xuICAgICAgICAgICAgaWYgKHRpbGUuc3RhdGUgIT09ICdsb2FkZWQnKSB7XG4gICAgICAgICAgICAgICAgdGlsZS5zdGF0ZSA9ICdsb2FkZWQnO1xuICAgICAgICAgICAgICAgIHRpbGUudGV4dHVyZSA9IHRoaXMudGV4dHVyZTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgIH1cblxuICAgIHNlcmlhbGl6ZSgpOiBPYmplY3Qge1xuICAgICAgICByZXR1cm4ge1xuICAgICAgICAgICAgdHlwZTogJ2NhbnZhcycsXG4gICAgICAgICAgICBjb29yZGluYXRlczogdGhpcy5jb29yZGluYXRlc1xuICAgICAgICB9O1xuICAgIH1cblxuICAgIGhhc1RyYW5zaXRpb24oKSB7XG4gICAgICAgIHJldHVybiB0aGlzLl9wbGF5aW5nO1xuICAgIH1cblxuICAgIF9oYXNJbnZhbGlkRGltZW5zaW9ucygpIHtcbiAgICAgICAgZm9yIChjb25zdCB4IG9mIFt0aGlzLmNhbnZhcy53aWR0aCwgdGhpcy5jYW52YXMuaGVpZ2h0XSkge1xuICAgICAgICAgICAgaWYgKGlzTmFOKHgpIHx8IHggPD0gMCkgcmV0dXJuIHRydWU7XG4gICAgICAgIH1cbiAgICAgICAgcmV0dXJuIGZhbHNlO1xuICAgIH1cbn1cblxuZXhwb3J0IGRlZmF1bHQgQ2FudmFzU291cmNlO1xuIiwiLy8gQGZsb3dcblxuaW1wb3J0IHsgYmluZEFsbCB9IGZyb20gJy4uL3V0aWwvdXRpbCc7XG5cbmltcG9ydCB0eXBlIERpc3BhdGNoZXIgZnJvbSAnLi4vdXRpbC9kaXNwYXRjaGVyJztcbmltcG9ydCB0eXBlIHtFdmVudCwgRXZlbnRlZH0gZnJvbSAnLi4vdXRpbC9ldmVudGVkJztcbmltcG9ydCB0eXBlIE1hcCBmcm9tICcuLi91aS9tYXAnO1xuaW1wb3J0IHR5cGUgVGlsZSBmcm9tICcuL3RpbGUnO1xuaW1wb3J0IHR5cGUge092ZXJzY2FsZWRUaWxlSUR9IGZyb20gJy4vdGlsZV9pZCc7XG5pbXBvcnQgdHlwZSB7Q2FsbGJhY2t9IGZyb20gJy4uL3R5cGVzL2NhbGxiYWNrJztcbmltcG9ydCB7Q2Fub25pY2FsVGlsZUlEfSBmcm9tICcuL3RpbGVfaWQnO1xuXG4vKipcbiAqIFRoZSBgU291cmNlYCBpbnRlcmZhY2UgbXVzdCBiZSBpbXBsZW1lbnRlZCBieSBlYWNoIHNvdXJjZSB0eXBlLCBpbmNsdWRpbmcgXCJjb3JlXCIgdHlwZXMgKGB2ZWN0b3JgLCBgcmFzdGVyYCxcbiAqIGB2aWRlb2AsIGV0Yy4pIGFuZCBhbGwgY3VzdG9tLCB0aGlyZC1wYXJ0eSB0eXBlcy5cbiAqXG4gKiBAcHJpdmF0ZVxuICpcbiAqIEBwYXJhbSB7c3RyaW5nfSBpZCBUaGUgaWQgZm9yIHRoZSBzb3VyY2UuIE11c3Qgbm90IGJlIHVzZWQgYnkgYW55IGV4aXN0aW5nIHNvdXJjZS5cbiAqIEBwYXJhbSB7T2JqZWN0fSBvcHRpb25zIFNvdXJjZSBvcHRpb25zLCBzcGVjaWZpYyB0byB0aGUgc291cmNlIHR5cGUgKGV4Y2VwdCBmb3IgYG9wdGlvbnMudHlwZWAsIHdoaWNoIGlzIGFsd2F5c1xuICogcmVxdWlyZWQpLlxuICogQHBhcmFtIHtzdHJpbmd9IG9wdGlvbnMudHlwZSBUaGUgc291cmNlIHR5cGUsIG1hdGNoaW5nIHRoZSB2YWx1ZSBvZiBgbmFtZWAgdXNlZCBpbiB7QGxpbmsgU3R5bGUjYWRkU291cmNlVHlwZX0uXG4gKiBAcGFyYW0ge0Rpc3BhdGNoZXJ9IGRpc3BhdGNoZXIgQSB7QGxpbmsgRGlzcGF0Y2hlcn0gaW5zdGFuY2UsIHdoaWNoIGNhbiBiZSB1c2VkIHRvIHNlbmQgbWVzc2FnZXMgdG8gdGhlIHdvcmtlcnMuXG4gKlxuICogQGZpcmVzIGRhdGEgd2l0aCBge2RhdGFUeXBlOiAnc291cmNlJywgc291cmNlRGF0YVR5cGU6ICdtZXRhZGF0YSd9YCB0byBpbmRpY2F0ZSB0aGF0IGFueSBuZWNlc3NhcnkgbWV0YWRhdGFcbiAqIGhhcyBiZWVuIGxvYWRlZCBzbyB0aGF0IGl0J3Mgb2theSB0byBjYWxsIGBsb2FkVGlsZWA7IGFuZCB3aXRoIGB7ZGF0YVR5cGU6ICdzb3VyY2UnLCBzb3VyY2VEYXRhVHlwZTogJ2NvbnRlbnQnfWBcbiAqIHRvIGluZGljYXRlIHRoYXQgdGhlIHNvdXJjZSBkYXRhIGhhcyBjaGFuZ2VkLCBzbyB0aGF0IGFueSBjdXJyZW50IGNhY2hlcyBzaG91bGQgYmUgZmx1c2hlZC5cbiAqIEBwcm9wZXJ0eSB7c3RyaW5nfSBpZCBUaGUgaWQgZm9yIHRoZSBzb3VyY2UuICBNdXN0IG1hdGNoIHRoZSBpZCBwYXNzZWQgdG8gdGhlIGNvbnN0cnVjdG9yLlxuICogQHByb3BlcnR5IHtudW1iZXJ9IG1pbnpvb21cbiAqIEBwcm9wZXJ0eSB7bnVtYmVyfSBtYXh6b29tXG4gKiBAcHJvcGVydHkge2Jvb2xlYW59IGlzVGlsZUNsaXBwZWQgYGZhbHNlYCBpZiB0aWxlcyBjYW4gYmUgZHJhd24gb3V0c2lkZSB0aGVpciBib3VuZGFyaWVzLCBgdHJ1ZWAgaWYgdGhleSBjYW5ub3QuXG4gKiBAcHJvcGVydHkge2Jvb2xlYW59IHJlcGFyc2VPdmVyc2NhbGVkIGB0cnVlYCBpZiB0aWxlcyBzaG91bGQgYmUgc2VudCBiYWNrIHRvIHRoZSB3b3JrZXIgZm9yIGVhY2ggb3Zlcnpvb21lZCB6b29tXG4gKiBsZXZlbCwgYGZhbHNlYCBpZiBub3QuXG4gKiBAcHJvcGVydHkge2Jvb2xlYW59IHJvdW5kWm9vbSBgdHJ1ZWAgaWYgem9vbSBsZXZlbHMgYXJlIHJvdW5kZWQgdG8gdGhlIG5lYXJlc3QgaW50ZWdlciBpbiB0aGUgc291cmNlIGRhdGEsIGBmYWxzZWBcbiAqIGlmIHRoZXkgYXJlIGZsb29yLWVkIHRvIHRoZSBuZWFyZXN0IGludGVnZXIuXG4gKi9cbmV4cG9ydCBpbnRlcmZhY2UgU291cmNlIHtcbiAgICArdHlwZTogc3RyaW5nO1xuICAgIGlkOiBzdHJpbmc7XG4gICAgbWluem9vbTogbnVtYmVyLFxuICAgIG1heHpvb206IG51bWJlcixcbiAgICB0aWxlU2l6ZTogbnVtYmVyLFxuICAgIGF0dHJpYnV0aW9uPzogc3RyaW5nLFxuXG4gICAgcm91bmRab29tPzogYm9vbGVhbixcbiAgICBpc1RpbGVDbGlwcGVkPzogYm9vbGVhbixcbiAgICBtYXBib3hfbG9nbz86IGJvb2xlYW4sXG4gICAgdGlsZUlEPzogQ2Fub25pY2FsVGlsZUlEO1xuICAgIHJlcGFyc2VPdmVyc2NhbGVkPzogYm9vbGVhbixcbiAgICB2ZWN0b3JMYXllcklkcz86IEFycmF5PHN0cmluZz4sXG5cbiAgICBoYXNUcmFuc2l0aW9uKCk6IGJvb2xlYW47XG5cbiAgICBmaXJlKGV2ZW50OiBFdmVudCk6IG1peGVkO1xuXG4gICAgK29uQWRkPzogKG1hcDogTWFwKSA9PiB2b2lkO1xuICAgICtvblJlbW92ZT86IChtYXA6IE1hcCkgPT4gdm9pZDtcblxuICAgIGxvYWRUaWxlKHRpbGU6IFRpbGUsIGNhbGxiYWNrOiBDYWxsYmFjazx2b2lkPik6IHZvaWQ7XG4gICAgK2hhc1RpbGU/OiAodGlsZUlEOiBPdmVyc2NhbGVkVGlsZUlEKSA9PiBib29sZWFuO1xuICAgICthYm9ydFRpbGU/OiAodGlsZTogVGlsZSwgY2FsbGJhY2s6IENhbGxiYWNrPHZvaWQ+KSA9PiB2b2lkO1xuICAgICt1bmxvYWRUaWxlPzogKHRpbGU6IFRpbGUsIGNhbGxiYWNrOiBDYWxsYmFjazx2b2lkPikgPT4gdm9pZDtcblxuICAgIC8qKlxuICAgICAqIEByZXR1cm5zIEEgcGxhaW4gKHN0cmluZ2lmaWFibGUpIEpTIG9iamVjdCByZXByZXNlbnRpbmcgdGhlIGN1cnJlbnQgc3RhdGUgb2YgdGhlIHNvdXJjZS5cbiAgICAgKiBDcmVhdGluZyBhIHNvdXJjZSB1c2luZyB0aGUgcmV0dXJuZWQgb2JqZWN0IGFzIHRoZSBgb3B0aW9uc2Agc2hvdWxkIHJlc3VsdCBpbiBhIFNvdXJjZSB0aGF0IGlzXG4gICAgICogZXF1aXZhbGVudCB0byB0aGlzIG9uZS5cbiAgICAgKiBAcHJpdmF0ZVxuICAgICAqL1xuICAgIHNlcmlhbGl6ZSgpOiBPYmplY3Q7XG5cbiAgICArcHJlcGFyZT86ICgpID0+IHZvaWQ7XG59XG5cbnR5cGUgU291cmNlU3RhdGljcyA9IHtcbiAgICAvKipcbiAgICAgKiBBbiBvcHRpb25hbCBVUkwgdG8gYSBzY3JpcHQgd2hpY2gsIHdoZW4gcnVuIGJ5IGEgV29ya2VyLCByZWdpc3RlcnMgYSB7QGxpbmsgV29ya2VyU291cmNlfVxuICAgICAqIGltcGxlbWVudGF0aW9uIGZvciB0aGlzIFNvdXJjZSB0eXBlIGJ5IGNhbGxpbmcgYHNlbGYucmVnaXN0ZXJXb3JrZXJTb3VyY2Uod29ya2VyU291cmNlOiBXb3JrZXJTb3VyY2UpYC5cbiAgICAgKiBAcHJpdmF0ZVxuICAgICAqL1xuICAgIHdvcmtlclNvdXJjZVVSTD86IFVSTDtcbn07XG5cbmV4cG9ydCB0eXBlIFNvdXJjZUNsYXNzID0gQ2xhc3M8U291cmNlPiAmIFNvdXJjZVN0YXRpY3M7XG5cbmltcG9ydCB2ZWN0b3IgZnJvbSAnLi4vc291cmNlL3ZlY3Rvcl90aWxlX3NvdXJjZSc7XG5pbXBvcnQgcmFzdGVyIGZyb20gJy4uL3NvdXJjZS9yYXN0ZXJfdGlsZV9zb3VyY2UnO1xuaW1wb3J0IHJhc3RlckRlbSBmcm9tICcuLi9zb3VyY2UvcmFzdGVyX2RlbV90aWxlX3NvdXJjZSc7XG5pbXBvcnQgZ2VvanNvbiBmcm9tICcuLi9zb3VyY2UvZ2VvanNvbl9zb3VyY2UnO1xuaW1wb3J0IHZpZGVvIGZyb20gJy4uL3NvdXJjZS92aWRlb19zb3VyY2UnO1xuaW1wb3J0IGltYWdlIGZyb20gJy4uL3NvdXJjZS9pbWFnZV9zb3VyY2UnO1xuaW1wb3J0IGNhbnZhcyBmcm9tICcuLi9zb3VyY2UvY2FudmFzX3NvdXJjZSc7XG5cbmltcG9ydCB0eXBlIHtTb3VyY2VTcGVjaWZpY2F0aW9ufSBmcm9tICcuLi9zdHlsZS1zcGVjL3R5cGVzJztcblxuY29uc3Qgc291cmNlVHlwZXMgPSB7XG4gICAgdmVjdG9yLFxuICAgIHJhc3RlcixcbiAgICAncmFzdGVyLWRlbSc6IHJhc3RlckRlbSxcbiAgICBnZW9qc29uLFxuICAgIHZpZGVvLFxuICAgIGltYWdlLFxuICAgIGNhbnZhc1xufTtcblxuLypcbiAqIENyZWF0ZXMgYSB0aWxlZCBkYXRhIHNvdXJjZSBpbnN0YW5jZSBnaXZlbiBhbiBvcHRpb25zIG9iamVjdC5cbiAqXG4gKiBAcGFyYW0gaWRcbiAqIEBwYXJhbSB7T2JqZWN0fSBzb3VyY2UgQSBzb3VyY2UgZGVmaW5pdGlvbiBvYmplY3QgY29tcGxpYW50IHdpdGhcbiAqIFtgbWFwYm94LWdsLXN0eWxlLXNwZWNgXShodHRwczovL3d3dy5tYXBib3guY29tL21hcGJveC1nbC1zdHlsZS1zcGVjLyNzb3VyY2VzKSBvciwgZm9yIGEgdGhpcmQtcGFydHkgc291cmNlIHR5cGUsXG4gICogd2l0aCB0aGF0IHR5cGUncyByZXF1aXJlbWVudHMuXG4gKiBAcGFyYW0ge0Rpc3BhdGNoZXJ9IGRpc3BhdGNoZXJcbiAqIEByZXR1cm5zIHtTb3VyY2V9XG4gKi9cbmV4cG9ydCBjb25zdCBjcmVhdGUgPSBmdW5jdGlvbihpZDogc3RyaW5nLCBzcGVjaWZpY2F0aW9uOiBTb3VyY2VTcGVjaWZpY2F0aW9uLCBkaXNwYXRjaGVyOiBEaXNwYXRjaGVyLCBldmVudGVkUGFyZW50OiBFdmVudGVkKSB7XG4gICAgY29uc3Qgc291cmNlID0gbmV3IHNvdXJjZVR5cGVzW3NwZWNpZmljYXRpb24udHlwZV0oaWQsIChzcGVjaWZpY2F0aW9uOiBhbnkpLCBkaXNwYXRjaGVyLCBldmVudGVkUGFyZW50KTtcblxuICAgIGlmIChzb3VyY2UuaWQgIT09IGlkKSB7XG4gICAgICAgIHRocm93IG5ldyBFcnJvcihgRXhwZWN0ZWQgU291cmNlIGlkIHRvIGJlICR7aWR9IGluc3RlYWQgb2YgJHtzb3VyY2UuaWR9YCk7XG4gICAgfVxuXG4gICAgYmluZEFsbChbJ2xvYWQnLCAnYWJvcnQnLCAndW5sb2FkJywgJ3NlcmlhbGl6ZScsICdwcmVwYXJlJ10sIHNvdXJjZSk7XG4gICAgcmV0dXJuIHNvdXJjZTtcbn07XG5cbmV4cG9ydCBjb25zdCBnZXRUeXBlID0gZnVuY3Rpb24gKG5hbWU6IHN0cmluZykge1xuICAgIHJldHVybiBzb3VyY2VUeXBlc1tuYW1lXTtcbn07XG5cbmV4cG9ydCBjb25zdCBzZXRUeXBlID0gZnVuY3Rpb24gKG5hbWU6IHN0cmluZywgdHlwZTogQ2xhc3M8U291cmNlPikge1xuICAgIHNvdXJjZVR5cGVzW25hbWVdID0gdHlwZTtcbn07XG5cbmV4cG9ydCBpbnRlcmZhY2UgQWN0b3Ige1xuICAgIHNlbmQodHlwZTogc3RyaW5nLCBkYXRhOiBPYmplY3QsIGNhbGxiYWNrOiBDYWxsYmFjazxhbnk+KTogdm9pZDtcbn1cbiIsIi8vIEBmbG93XG5cbmltcG9ydCB0eXBlIFNvdXJjZUNhY2hlIGZyb20gJy4vc291cmNlX2NhY2hlJztcbmltcG9ydCB0eXBlIFN0eWxlTGF5ZXIgZnJvbSAnLi4vc3R5bGUvc3R5bGVfbGF5ZXInO1xuaW1wb3J0IHR5cGUgQ29vcmRpbmF0ZSBmcm9tICcuLi9nZW8vY29vcmRpbmF0ZSc7XG5pbXBvcnQgdHlwZSBDb2xsaXNpb25JbmRleCBmcm9tICcuLi9zeW1ib2wvY29sbGlzaW9uX2luZGV4JztcbmltcG9ydCB0eXBlIFRyYW5zZm9ybSBmcm9tICcuLi9nZW8vdHJhbnNmb3JtJztcbmltcG9ydCB0eXBlIHsgUmV0YWluZWRRdWVyeURhdGEgfSBmcm9tICcuLi9zeW1ib2wvcGxhY2VtZW50JztcbmltcG9ydCB0eXBlIHtGaWx0ZXJTcGVjaWZpY2F0aW9ufSBmcm9tICcuLi9zdHlsZS1zcGVjL3R5cGVzJztcbmltcG9ydCBhc3NlcnQgZnJvbSAnYXNzZXJ0JztcblxuZXhwb3J0IGZ1bmN0aW9uIHF1ZXJ5UmVuZGVyZWRGZWF0dXJlcyhzb3VyY2VDYWNoZTogU291cmNlQ2FjaGUsXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgc3R5bGVMYXllcnM6IHtbc3RyaW5nXTogU3R5bGVMYXllcn0sXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgcXVlcnlHZW9tZXRyeTogQXJyYXk8Q29vcmRpbmF0ZT4sXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgcGFyYW1zOiB7IGZpbHRlcjogRmlsdGVyU3BlY2lmaWNhdGlvbiwgbGF5ZXJzOiBBcnJheTxzdHJpbmc+IH0sXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgdHJhbnNmb3JtOiBUcmFuc2Zvcm0pIHtcbiAgICBjb25zdCBtYXhQaXRjaFNjYWxlRmFjdG9yID0gdHJhbnNmb3JtLm1heFBpdGNoU2NhbGVGYWN0b3IoKTtcbiAgICBjb25zdCB0aWxlc0luID0gc291cmNlQ2FjaGUudGlsZXNJbihxdWVyeUdlb21ldHJ5LCBtYXhQaXRjaFNjYWxlRmFjdG9yKTtcblxuICAgIHRpbGVzSW4uc29ydChzb3J0VGlsZXNJbik7XG5cbiAgICBjb25zdCByZW5kZXJlZEZlYXR1cmVMYXllcnMgPSBbXTtcbiAgICBmb3IgKGNvbnN0IHRpbGVJbiBvZiB0aWxlc0luKSB7XG4gICAgICAgIHJlbmRlcmVkRmVhdHVyZUxheWVycy5wdXNoKHtcbiAgICAgICAgICAgIHdyYXBwZWRUaWxlSUQ6IHRpbGVJbi50aWxlSUQud3JhcHBlZCgpLmtleSxcbiAgICAgICAgICAgIHF1ZXJ5UmVzdWx0czogdGlsZUluLnRpbGUucXVlcnlSZW5kZXJlZEZlYXR1cmVzKFxuICAgICAgICAgICAgICAgIHN0eWxlTGF5ZXJzLFxuICAgICAgICAgICAgICAgIHNvdXJjZUNhY2hlLl9zdGF0ZSxcbiAgICAgICAgICAgICAgICB0aWxlSW4ucXVlcnlHZW9tZXRyeSxcbiAgICAgICAgICAgICAgICB0aWxlSW4uc2NhbGUsXG4gICAgICAgICAgICAgICAgcGFyYW1zLFxuICAgICAgICAgICAgICAgIHRyYW5zZm9ybSxcbiAgICAgICAgICAgICAgICBtYXhQaXRjaFNjYWxlRmFjdG9yLFxuICAgICAgICAgICAgICAgIHNvdXJjZUNhY2hlLnRyYW5zZm9ybS5jYWxjdWxhdGVQb3NNYXRyaXgodGlsZUluLnRpbGVJRC50b1Vud3JhcHBlZCgpKSlcbiAgICAgICAgfSk7XG4gICAgfVxuXG4gICAgY29uc3QgcmVzdWx0ID0gbWVyZ2VSZW5kZXJlZEZlYXR1cmVMYXllcnMocmVuZGVyZWRGZWF0dXJlTGF5ZXJzKTtcblxuICAgIC8vIE1lcmdlIHN0YXRlIGZyb20gU291cmNlQ2FjaGUgaW50byB0aGUgcmVzdWx0c1xuICAgIGZvciAoY29uc3QgbGF5ZXJJRCBpbiByZXN1bHQpIHtcbiAgICAgICAgcmVzdWx0W2xheWVySURdLmZvckVhY2goKGZlYXR1cmUpID0+IHtcbiAgICAgICAgICAgIGNvbnN0IHN0YXRlID0gc291cmNlQ2FjaGUuZ2V0RmVhdHVyZVN0YXRlKGZlYXR1cmUubGF5ZXJbJ3NvdXJjZS1sYXllciddLCBmZWF0dXJlLmlkKTtcbiAgICAgICAgICAgIGZlYXR1cmUuc291cmNlID0gZmVhdHVyZS5sYXllci5zb3VyY2U7XG4gICAgICAgICAgICBpZiAoZmVhdHVyZS5sYXllclsnc291cmNlLWxheWVyJ10pIHtcbiAgICAgICAgICAgICAgICBmZWF0dXJlLnNvdXJjZUxheWVyID0gZmVhdHVyZS5sYXllclsnc291cmNlLWxheWVyJ107XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBmZWF0dXJlLnN0YXRlID0gc3RhdGU7XG4gICAgICAgIH0pO1xuICAgIH1cbiAgICByZXR1cm4gcmVzdWx0O1xufVxuXG5leHBvcnQgZnVuY3Rpb24gcXVlcnlSZW5kZXJlZFN5bWJvbHMoc3R5bGVMYXllcnM6IHtbc3RyaW5nXTogU3R5bGVMYXllcn0sXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgc291cmNlQ2FjaGVzOiB7W3N0cmluZ106IFNvdXJjZUNhY2hlfSxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBxdWVyeUdlb21ldHJ5OiBBcnJheTxQb2ludD4sXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgcGFyYW1zOiB7IGZpbHRlcjogRmlsdGVyU3BlY2lmaWNhdGlvbiwgbGF5ZXJzOiBBcnJheTxzdHJpbmc+IH0sXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgY29sbGlzaW9uSW5kZXg6IENvbGxpc2lvbkluZGV4LFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHJldGFpbmVkUXVlcnlEYXRhOiB7W251bWJlcl06IFJldGFpbmVkUXVlcnlEYXRhfSkge1xuICAgIGNvbnN0IHJlc3VsdCA9IHt9O1xuICAgIGNvbnN0IHJlbmRlcmVkU3ltYm9scyA9IGNvbGxpc2lvbkluZGV4LnF1ZXJ5UmVuZGVyZWRTeW1ib2xzKHF1ZXJ5R2VvbWV0cnkpO1xuICAgIGNvbnN0IGJ1Y2tldFF1ZXJ5RGF0YSA9IFtdO1xuICAgIGZvciAoY29uc3QgYnVja2V0SW5zdGFuY2VJZCBvZiBPYmplY3Qua2V5cyhyZW5kZXJlZFN5bWJvbHMpLm1hcChOdW1iZXIpKSB7XG4gICAgICAgIGJ1Y2tldFF1ZXJ5RGF0YS5wdXNoKHJldGFpbmVkUXVlcnlEYXRhW2J1Y2tldEluc3RhbmNlSWRdKTtcbiAgICB9XG4gICAgYnVja2V0UXVlcnlEYXRhLnNvcnQoc29ydFRpbGVzSW4pO1xuXG4gICAgZm9yIChjb25zdCBxdWVyeURhdGEgb2YgYnVja2V0UXVlcnlEYXRhKSB7XG4gICAgICAgIGNvbnN0IGJ1Y2tldFN5bWJvbHMgPSBxdWVyeURhdGEuZmVhdHVyZUluZGV4Lmxvb2t1cFN5bWJvbEZlYXR1cmVzKFxuICAgICAgICAgICAgICAgIHJlbmRlcmVkU3ltYm9sc1txdWVyeURhdGEuYnVja2V0SW5zdGFuY2VJZF0sXG4gICAgICAgICAgICAgICAgcXVlcnlEYXRhLmJ1Y2tldEluZGV4LFxuICAgICAgICAgICAgICAgIHF1ZXJ5RGF0YS5zb3VyY2VMYXllckluZGV4LFxuICAgICAgICAgICAgICAgIHBhcmFtcy5maWx0ZXIsXG4gICAgICAgICAgICAgICAgcGFyYW1zLmxheWVycyxcbiAgICAgICAgICAgICAgICBzdHlsZUxheWVycyk7XG5cbiAgICAgICAgZm9yIChjb25zdCBsYXllcklEIGluIGJ1Y2tldFN5bWJvbHMpIHtcbiAgICAgICAgICAgIGNvbnN0IHJlc3VsdEZlYXR1cmVzID0gcmVzdWx0W2xheWVySURdID0gcmVzdWx0W2xheWVySURdIHx8IFtdO1xuICAgICAgICAgICAgY29uc3QgbGF5ZXJTeW1ib2xzID0gYnVja2V0U3ltYm9sc1tsYXllcklEXTtcbiAgICAgICAgICAgIGxheWVyU3ltYm9scy5zb3J0KChhLCBiKSA9PiB7XG4gICAgICAgICAgICAgICAgLy8gTWF0Y2ggdG9wRG93bkZlYXR1cmVDb21wYXJhdG9yIGZyb20gRmVhdHVyZUluZGV4LCBidXQgdXNpbmdcbiAgICAgICAgICAgICAgICAvLyBtb3N0IHJlY2VudCBzb3J0aW5nIG9mIGZlYXR1cmVzIGZyb20gYnVja2V0LnNvcnRGZWF0dXJlc1xuICAgICAgICAgICAgICAgIGNvbnN0IGZlYXR1cmVTb3J0T3JkZXIgPSBxdWVyeURhdGEuZmVhdHVyZVNvcnRPcmRlcjtcbiAgICAgICAgICAgICAgICBpZiAoZmVhdHVyZVNvcnRPcmRlcikge1xuICAgICAgICAgICAgICAgICAgICAvLyBxdWVyeVJlbmRlcmVkU3ltYm9scyBkb2N1bWVudGF0aW9uIHNheXMgd2UnbGwgcmV0dXJuIGZlYXR1cmVzIGluXG4gICAgICAgICAgICAgICAgICAgIC8vIFwidG9wLXRvLWJvdHRvbVwiIHJlbmRlcmluZyBvcmRlciAoYWthIGxhc3QtdG8tZmlyc3QpLlxuICAgICAgICAgICAgICAgICAgICAvLyBBY3R1YWxseSB0aGVyZSBjYW4gYmUgbXVsdGlwbGUgc3ltYm9sIGluc3RhbmNlcyBwZXIgZmVhdHVyZSwgc29cbiAgICAgICAgICAgICAgICAgICAgLy8gd2Ugc29ydCBlYWNoIGZlYXR1cmUgYmFzZWQgb24gdGhlIGZpcnN0IG1hdGNoaW5nIHN5bWJvbCBpbnN0YW5jZS5cbiAgICAgICAgICAgICAgICAgICAgY29uc3Qgc29ydGVkQSA9IGZlYXR1cmVTb3J0T3JkZXIuaW5kZXhPZihhLmZlYXR1cmVJbmRleCk7XG4gICAgICAgICAgICAgICAgICAgIGNvbnN0IHNvcnRlZEIgPSBmZWF0dXJlU29ydE9yZGVyLmluZGV4T2YoYi5mZWF0dXJlSW5kZXgpO1xuICAgICAgICAgICAgICAgICAgICBhc3NlcnQoc29ydGVkQSA+PSAwKTtcbiAgICAgICAgICAgICAgICAgICAgYXNzZXJ0KHNvcnRlZEIgPj0gMCk7XG4gICAgICAgICAgICAgICAgICAgIHJldHVybiBzb3J0ZWRCIC0gc29ydGVkQTtcbiAgICAgICAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgICAgICAgICAvLyBCdWNrZXQgaGFzbid0IGJlZW4gcmUtc29ydGVkIGJhc2VkIG9uIGFuZ2xlLCBzbyB1c2UgdGhlXG4gICAgICAgICAgICAgICAgICAgIC8vIHJldmVyc2Ugb2YgdGhlIG9yZGVyIHRoZSBmZWF0dXJlcyBhcHBlYXJlZCBpbiB0aGUgZGF0YS5cbiAgICAgICAgICAgICAgICAgICAgcmV0dXJuIGIuZmVhdHVyZUluZGV4IC0gYS5mZWF0dXJlSW5kZXg7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfSk7XG4gICAgICAgICAgICBmb3IgKGNvbnN0IHN5bWJvbEZlYXR1cmUgb2YgbGF5ZXJTeW1ib2xzKSB7XG4gICAgICAgICAgICAgICAgcmVzdWx0RmVhdHVyZXMucHVzaChzeW1ib2xGZWF0dXJlLmZlYXR1cmUpO1xuICAgICAgICAgICAgfVxuICAgICAgICB9XG4gICAgfVxuXG4gICAgLy8gTWVyZ2Ugc3RhdGUgZnJvbSBTb3VyY2VDYWNoZSBpbnRvIHRoZSByZXN1bHRzXG4gICAgZm9yIChjb25zdCBsYXllck5hbWUgaW4gcmVzdWx0KSB7XG4gICAgICAgIHJlc3VsdFtsYXllck5hbWVdLmZvckVhY2goKGZlYXR1cmUpID0+IHtcbiAgICAgICAgICAgIGNvbnN0IGxheWVyID0gc3R5bGVMYXllcnNbbGF5ZXJOYW1lXTtcbiAgICAgICAgICAgIGNvbnN0IHNvdXJjZUNhY2hlID0gc291cmNlQ2FjaGVzW2xheWVyLnNvdXJjZV07XG4gICAgICAgICAgICBjb25zdCBzdGF0ZSA9IHNvdXJjZUNhY2hlLmdldEZlYXR1cmVTdGF0ZShmZWF0dXJlLmxheWVyWydzb3VyY2UtbGF5ZXInXSwgZmVhdHVyZS5pZCk7XG4gICAgICAgICAgICBmZWF0dXJlLnNvdXJjZSA9IGZlYXR1cmUubGF5ZXIuc291cmNlO1xuICAgICAgICAgICAgaWYgKGZlYXR1cmUubGF5ZXJbJ3NvdXJjZS1sYXllciddKSB7XG4gICAgICAgICAgICAgICAgZmVhdHVyZS5zb3VyY2VMYXllciA9IGZlYXR1cmUubGF5ZXJbJ3NvdXJjZS1sYXllciddO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgZmVhdHVyZS5zdGF0ZSA9IHN0YXRlO1xuICAgICAgICB9KTtcbiAgICB9XG4gICAgcmV0dXJuIHJlc3VsdDtcbn1cblxuZXhwb3J0IGZ1bmN0aW9uIHF1ZXJ5U291cmNlRmVhdHVyZXMoc291cmNlQ2FjaGU6IFNvdXJjZUNhY2hlLCBwYXJhbXM6IGFueSkge1xuICAgIGNvbnN0IHRpbGVzID0gc291cmNlQ2FjaGUuZ2V0UmVuZGVyYWJsZUlkcygpLm1hcCgoaWQpID0+IHtcbiAgICAgICAgcmV0dXJuIHNvdXJjZUNhY2hlLmdldFRpbGVCeUlEKGlkKTtcbiAgICB9KTtcblxuICAgIGNvbnN0IHJlc3VsdCA9IFtdO1xuXG4gICAgY29uc3QgZGF0YVRpbGVzID0ge307XG4gICAgZm9yIChsZXQgaSA9IDA7IGkgPCB0aWxlcy5sZW5ndGg7IGkrKykge1xuICAgICAgICBjb25zdCB0aWxlID0gdGlsZXNbaV07XG4gICAgICAgIGNvbnN0IGRhdGFJRCA9IHRpbGUudGlsZUlELmNhbm9uaWNhbC5rZXk7XG4gICAgICAgIGlmICghZGF0YVRpbGVzW2RhdGFJRF0pIHtcbiAgICAgICAgICAgIGRhdGFUaWxlc1tkYXRhSURdID0gdHJ1ZTtcbiAgICAgICAgICAgIHRpbGUucXVlcnlTb3VyY2VGZWF0dXJlcyhyZXN1bHQsIHBhcmFtcyk7XG4gICAgICAgIH1cbiAgICB9XG5cbiAgICByZXR1cm4gcmVzdWx0O1xufVxuXG5mdW5jdGlvbiBzb3J0VGlsZXNJbihhLCBiKSB7XG4gICAgY29uc3QgaWRBID0gYS50aWxlSUQ7XG4gICAgY29uc3QgaWRCID0gYi50aWxlSUQ7XG4gICAgcmV0dXJuIChpZEEub3ZlcnNjYWxlZFogLSBpZEIub3ZlcnNjYWxlZFopIHx8IChpZEEuY2Fub25pY2FsLnkgLSBpZEIuY2Fub25pY2FsLnkpIHx8IChpZEEud3JhcCAtIGlkQi53cmFwKSB8fCAoaWRBLmNhbm9uaWNhbC54IC0gaWRCLmNhbm9uaWNhbC54KTtcbn1cblxuZnVuY3Rpb24gbWVyZ2VSZW5kZXJlZEZlYXR1cmVMYXllcnModGlsZXMpIHtcbiAgICAvLyBNZXJnZSByZXN1bHRzIGZyb20gYWxsIHRpbGVzLCBidXQgaWYgdHdvIHRpbGVzIHNoYXJlIHRoZSBzYW1lXG4gICAgLy8gd3JhcHBlZCBJRCwgZG9uJ3QgZHVwbGljYXRlIGZlYXR1cmVzIGJldHdlZW4gdGhlIHR3byB0aWxlc1xuICAgIGNvbnN0IHJlc3VsdCA9IHt9O1xuICAgIGNvbnN0IHdyYXBwZWRJRExheWVyTWFwID0ge307XG4gICAgZm9yIChjb25zdCB0aWxlIG9mIHRpbGVzKSB7XG4gICAgICAgIGNvbnN0IHF1ZXJ5UmVzdWx0cyA9IHRpbGUucXVlcnlSZXN1bHRzO1xuICAgICAgICBjb25zdCB3cmFwcGVkSUQgPSB0aWxlLndyYXBwZWRUaWxlSUQ7XG4gICAgICAgIGNvbnN0IHdyYXBwZWRJRExheWVycyA9IHdyYXBwZWRJRExheWVyTWFwW3dyYXBwZWRJRF0gPSB3cmFwcGVkSURMYXllck1hcFt3cmFwcGVkSURdIHx8IHt9O1xuICAgICAgICBmb3IgKGNvbnN0IGxheWVySUQgaW4gcXVlcnlSZXN1bHRzKSB7XG4gICAgICAgICAgICBjb25zdCB0aWxlRmVhdHVyZXMgPSBxdWVyeVJlc3VsdHNbbGF5ZXJJRF07XG4gICAgICAgICAgICBjb25zdCB3cmFwcGVkSURGZWF0dXJlcyA9IHdyYXBwZWRJRExheWVyc1tsYXllcklEXSA9IHdyYXBwZWRJRExheWVyc1tsYXllcklEXSB8fCB7fTtcbiAgICAgICAgICAgIGNvbnN0IHJlc3VsdEZlYXR1cmVzID0gcmVzdWx0W2xheWVySURdID0gcmVzdWx0W2xheWVySURdIHx8IFtdO1xuICAgICAgICAgICAgZm9yIChjb25zdCB0aWxlRmVhdHVyZSBvZiB0aWxlRmVhdHVyZXMpIHtcbiAgICAgICAgICAgICAgICBpZiAoIXdyYXBwZWRJREZlYXR1cmVzW3RpbGVGZWF0dXJlLmZlYXR1cmVJbmRleF0pIHtcbiAgICAgICAgICAgICAgICAgICAgd3JhcHBlZElERmVhdHVyZXNbdGlsZUZlYXR1cmUuZmVhdHVyZUluZGV4XSA9IHRydWU7XG4gICAgICAgICAgICAgICAgICAgIHJlc3VsdEZlYXR1cmVzLnB1c2godGlsZUZlYXR1cmUuZmVhdHVyZSk7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfVxuICAgICAgICB9XG4gICAgfVxuICAgIHJldHVybiByZXN1bHQ7XG59XG4iLCIvLyBAZmxvd1xuXG5pbXBvcnQgeyBPdmVyc2NhbGVkVGlsZUlEIH0gZnJvbSAnLi90aWxlX2lkJztcbmltcG9ydCB0eXBlIFRpbGUgZnJvbSAnLi90aWxlJztcblxuLyoqXG4gKiBBIFtsZWFzdC1yZWNlbnRseS11c2VkIGNhY2hlXShodHRwOi8vZW4ud2lraXBlZGlhLm9yZy93aWtpL0NhY2hlX2FsZ29yaXRobXMpXG4gKiB3aXRoIGhhc2ggbG9va3VwIG1hZGUgcG9zc2libGUgYnkga2VlcGluZyBhIGxpc3Qgb2Yga2V5cyBpbiBwYXJhbGxlbCB0b1xuICogYW4gYXJyYXkgb2YgZGljdGlvbmFyeSBvZiB2YWx1ZXNcbiAqXG4gKiBAcHJpdmF0ZVxuICovXG5jbGFzcyBUaWxlQ2FjaGUge1xuICAgIG1heDogbnVtYmVyO1xuICAgIGRhdGE6IHtba2V5OiBudW1iZXIgfCBzdHJpbmddOiBBcnJheTx7IHZhbHVlOiBUaWxlLCB0aW1lb3V0OiA/VGltZW91dElEfT59O1xuICAgIG9yZGVyOiBBcnJheTxudW1iZXI+O1xuICAgIG9uUmVtb3ZlOiAoZWxlbWVudDogVGlsZSkgPT4gdm9pZDtcbiAgICAvKipcbiAgICAgKiBAcGFyYW0ge251bWJlcn0gbWF4IG51bWJlciBvZiBwZXJtaXR0ZWQgdmFsdWVzXG4gICAgICogQHBhcmFtIHtGdW5jdGlvbn0gb25SZW1vdmUgY2FsbGJhY2sgY2FsbGVkIHdpdGggaXRlbXMgd2hlbiB0aGV5IGV4cGlyZVxuICAgICAqL1xuICAgIGNvbnN0cnVjdG9yKG1heDogbnVtYmVyLCBvblJlbW92ZTogKGVsZW1lbnQ6IFRpbGUpID0+IHZvaWQpIHtcbiAgICAgICAgdGhpcy5tYXggPSBtYXg7XG4gICAgICAgIHRoaXMub25SZW1vdmUgPSBvblJlbW92ZTtcbiAgICAgICAgdGhpcy5yZXNldCgpO1xuICAgIH1cblxuICAgIC8qKlxuICAgICAqIENsZWFyIHRoZSBjYWNoZVxuICAgICAqXG4gICAgICogQHJldHVybnMge1RpbGVDYWNoZX0gdGhpcyBjYWNoZVxuICAgICAqIEBwcml2YXRlXG4gICAgICovXG4gICAgcmVzZXQoKSB7XG4gICAgICAgIGZvciAoY29uc3Qga2V5IGluIHRoaXMuZGF0YSkge1xuICAgICAgICAgICAgZm9yIChjb25zdCByZW1vdmVkRGF0YSBvZiB0aGlzLmRhdGFba2V5XSkge1xuICAgICAgICAgICAgICAgIGlmIChyZW1vdmVkRGF0YS50aW1lb3V0KSBjbGVhclRpbWVvdXQocmVtb3ZlZERhdGEudGltZW91dCk7XG4gICAgICAgICAgICAgICAgdGhpcy5vblJlbW92ZShyZW1vdmVkRGF0YS52YWx1ZSk7XG4gICAgICAgICAgICB9XG4gICAgICAgIH1cblxuICAgICAgICB0aGlzLmRhdGEgPSB7fTtcbiAgICAgICAgdGhpcy5vcmRlciA9IFtdO1xuXG4gICAgICAgIHJldHVybiB0aGlzO1xuICAgIH1cblxuICAgIC8qKlxuICAgICAqIEFkZCBhIGtleSwgdmFsdWUgY29tYmluYXRpb24gdG8gdGhlIGNhY2hlLCB0cmltbWluZyBpdHMgc2l6ZSBpZiB0aGlzIHB1c2hlc1xuICAgICAqIGl0IG92ZXIgbWF4IGxlbmd0aC5cbiAgICAgKlxuICAgICAqIEBwYXJhbSB7T3ZlcnNjYWxlZFRpbGVJRH0gdGlsZUlEIGxvb2t1cCBrZXkgZm9yIHRoZSBpdGVtXG4gICAgICogQHBhcmFtIHsqfSBkYXRhIGFueSB2YWx1ZVxuICAgICAqXG4gICAgICogQHJldHVybnMge1RpbGVDYWNoZX0gdGhpcyBjYWNoZVxuICAgICAqIEBwcml2YXRlXG4gICAgICovXG4gICAgYWRkKHRpbGVJRDogT3ZlcnNjYWxlZFRpbGVJRCwgZGF0YTogVGlsZSwgZXhwaXJ5VGltZW91dDogbnVtYmVyIHwgdm9pZCkge1xuICAgICAgICBjb25zdCBrZXkgPSB0aWxlSUQud3JhcHBlZCgpLmtleTtcbiAgICAgICAgaWYgKHRoaXMuZGF0YVtrZXldID09PSB1bmRlZmluZWQpIHtcbiAgICAgICAgICAgIHRoaXMuZGF0YVtrZXldID0gW107XG4gICAgICAgIH1cblxuICAgICAgICBjb25zdCBkYXRhV3JhcHBlciA9IHtcbiAgICAgICAgICAgIHZhbHVlOiBkYXRhLFxuICAgICAgICAgICAgdGltZW91dDogdW5kZWZpbmVkXG4gICAgICAgIH07XG5cbiAgICAgICAgaWYgKGV4cGlyeVRpbWVvdXQgIT09IHVuZGVmaW5lZCkge1xuICAgICAgICAgICAgZGF0YVdyYXBwZXIudGltZW91dCA9IHNldFRpbWVvdXQoKCkgPT4ge1xuICAgICAgICAgICAgICAgIHRoaXMucmVtb3ZlKHRpbGVJRCwgZGF0YVdyYXBwZXIpO1xuICAgICAgICAgICAgfSwgZXhwaXJ5VGltZW91dCk7XG4gICAgICAgIH1cblxuICAgICAgICB0aGlzLmRhdGFba2V5XS5wdXNoKGRhdGFXcmFwcGVyKTtcbiAgICAgICAgdGhpcy5vcmRlci5wdXNoKGtleSk7XG5cbiAgICAgICAgaWYgKHRoaXMub3JkZXIubGVuZ3RoID4gdGhpcy5tYXgpIHtcbiAgICAgICAgICAgIGNvbnN0IHJlbW92ZWREYXRhID0gdGhpcy5fZ2V0QW5kUmVtb3ZlQnlLZXkodGhpcy5vcmRlclswXSk7XG4gICAgICAgICAgICBpZiAocmVtb3ZlZERhdGEpIHRoaXMub25SZW1vdmUocmVtb3ZlZERhdGEpO1xuICAgICAgICB9XG5cbiAgICAgICAgcmV0dXJuIHRoaXM7XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogRGV0ZXJtaW5lIHdoZXRoZXIgdGhlIHZhbHVlIGF0dGFjaGVkIHRvIGBrZXlgIGlzIHByZXNlbnRcbiAgICAgKlxuICAgICAqIEBwYXJhbSB7T3ZlcnNjYWxlZFRpbGVJRH0gdGlsZUlEIHRoZSBrZXkgdG8gYmUgbG9va2VkLXVwXG4gICAgICogQHJldHVybnMge2Jvb2xlYW59IHdoZXRoZXIgdGhlIGNhY2hlIGhhcyB0aGlzIHZhbHVlXG4gICAgICogQHByaXZhdGVcbiAgICAgKi9cbiAgICBoYXModGlsZUlEOiBPdmVyc2NhbGVkVGlsZUlEKTogYm9vbGVhbiB7XG4gICAgICAgIHJldHVybiB0aWxlSUQud3JhcHBlZCgpLmtleSBpbiB0aGlzLmRhdGE7XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogR2V0IHRoZSB2YWx1ZSBhdHRhY2hlZCB0byBhIHNwZWNpZmljIGtleSBhbmQgcmVtb3ZlIGRhdGEgZnJvbSBjYWNoZS5cbiAgICAgKiBJZiB0aGUga2V5IGlzIG5vdCBmb3VuZCwgcmV0dXJucyBgbnVsbGBcbiAgICAgKlxuICAgICAqIEBwYXJhbSB7T3ZlcnNjYWxlZFRpbGVJRH0gdGlsZUlEIHRoZSBrZXkgdG8gbG9vayB1cFxuICAgICAqIEByZXR1cm5zIHsqfSB0aGUgZGF0YSwgb3IgbnVsbCBpZiBpdCBpc24ndCBmb3VuZFxuICAgICAqIEBwcml2YXRlXG4gICAgICovXG4gICAgZ2V0QW5kUmVtb3ZlKHRpbGVJRDogT3ZlcnNjYWxlZFRpbGVJRCk6ID9UaWxlIHtcbiAgICAgICAgaWYgKCF0aGlzLmhhcyh0aWxlSUQpKSB7IHJldHVybiBudWxsOyB9XG4gICAgICAgIHJldHVybiB0aGlzLl9nZXRBbmRSZW1vdmVCeUtleSh0aWxlSUQud3JhcHBlZCgpLmtleSk7XG4gICAgfVxuXG4gICAgLypcbiAgICAgKiBHZXQgYW5kIHJlbW92ZSB0aGUgdmFsdWUgd2l0aCB0aGUgc3BlY2lmaWVkIGtleS5cbiAgICAgKi9cbiAgICBfZ2V0QW5kUmVtb3ZlQnlLZXkoa2V5OiBudW1iZXIpOiA/VGlsZSB7XG4gICAgICAgIGNvbnN0IGRhdGEgPSB0aGlzLmRhdGFba2V5XS5zaGlmdCgpO1xuICAgICAgICBpZiAoZGF0YS50aW1lb3V0KSBjbGVhclRpbWVvdXQoZGF0YS50aW1lb3V0KTtcblxuICAgICAgICBpZiAodGhpcy5kYXRhW2tleV0ubGVuZ3RoID09PSAwKSB7XG4gICAgICAgICAgICBkZWxldGUgdGhpcy5kYXRhW2tleV07XG4gICAgICAgIH1cbiAgICAgICAgdGhpcy5vcmRlci5zcGxpY2UodGhpcy5vcmRlci5pbmRleE9mKGtleSksIDEpO1xuXG4gICAgICAgIHJldHVybiBkYXRhLnZhbHVlO1xuICAgIH1cblxuICAgIC8qKlxuICAgICAqIEdldCB0aGUgdmFsdWUgYXR0YWNoZWQgdG8gYSBzcGVjaWZpYyBrZXkgd2l0aG91dCByZW1vdmluZyBkYXRhXG4gICAgICogZnJvbSB0aGUgY2FjaGUuIElmIHRoZSBrZXkgaXMgbm90IGZvdW5kLCByZXR1cm5zIGBudWxsYFxuICAgICAqXG4gICAgICogQHBhcmFtIHtPdmVyc2NhbGVkVGlsZUlEfSB0aWxlSUQgdGhlIGtleSB0byBsb29rIHVwXG4gICAgICogQHJldHVybnMgeyp9IHRoZSBkYXRhLCBvciBudWxsIGlmIGl0IGlzbid0IGZvdW5kXG4gICAgICogQHByaXZhdGVcbiAgICAgKi9cbiAgICBnZXQodGlsZUlEOiBPdmVyc2NhbGVkVGlsZUlEKTogP1RpbGUge1xuICAgICAgICBpZiAoIXRoaXMuaGFzKHRpbGVJRCkpIHsgcmV0dXJuIG51bGw7IH1cblxuICAgICAgICBjb25zdCBkYXRhID0gdGhpcy5kYXRhW3RpbGVJRC53cmFwcGVkKCkua2V5XVswXTtcbiAgICAgICAgcmV0dXJuIGRhdGEudmFsdWU7XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogUmVtb3ZlIGEga2V5L3ZhbHVlIGNvbWJpbmF0aW9uIGZyb20gdGhlIGNhY2hlLlxuICAgICAqXG4gICAgICogQHBhcmFtIHtPdmVyc2NhbGVkVGlsZUlEfSB0aWxlSUQgdGhlIGtleSBmb3IgdGhlIHBhaXIgdG8gZGVsZXRlXG4gICAgICogQHBhcmFtIHtUaWxlfSB2YWx1ZSBJZiBhIHZhbHVlIGlzIHByb3ZpZGVkLCByZW1vdmUgdGhhdCBleGFjdCB2ZXJzaW9uIG9mIHRoZSB2YWx1ZS5cbiAgICAgKiBAcmV0dXJucyB7VGlsZUNhY2hlfSB0aGlzIGNhY2hlXG4gICAgICogQHByaXZhdGVcbiAgICAgKi9cbiAgICByZW1vdmUodGlsZUlEOiBPdmVyc2NhbGVkVGlsZUlELCB2YWx1ZTogP3sgdmFsdWU6IFRpbGUsIHRpbWVvdXQ6ID9UaW1lb3V0SUR9KSB7XG4gICAgICAgIGlmICghdGhpcy5oYXModGlsZUlEKSkgeyByZXR1cm4gdGhpczsgfVxuICAgICAgICBjb25zdCBrZXkgPSB0aWxlSUQud3JhcHBlZCgpLmtleTtcblxuICAgICAgICBjb25zdCBkYXRhSW5kZXggPSB2YWx1ZSA9PT0gdW5kZWZpbmVkID8gMCA6IHRoaXMuZGF0YVtrZXldLmluZGV4T2YodmFsdWUpO1xuICAgICAgICBjb25zdCBkYXRhID0gdGhpcy5kYXRhW2tleV1bZGF0YUluZGV4XTtcbiAgICAgICAgdGhpcy5kYXRhW2tleV0uc3BsaWNlKGRhdGFJbmRleCwgMSk7XG4gICAgICAgIGlmIChkYXRhLnRpbWVvdXQpIGNsZWFyVGltZW91dChkYXRhLnRpbWVvdXQpO1xuICAgICAgICBpZiAodGhpcy5kYXRhW2tleV0ubGVuZ3RoID09PSAwKSB7XG4gICAgICAgICAgICBkZWxldGUgdGhpcy5kYXRhW2tleV07XG4gICAgICAgIH1cbiAgICAgICAgdGhpcy5vblJlbW92ZShkYXRhLnZhbHVlKTtcbiAgICAgICAgdGhpcy5vcmRlci5zcGxpY2UodGhpcy5vcmRlci5pbmRleE9mKGtleSksIDEpO1xuXG4gICAgICAgIHJldHVybiB0aGlzO1xuICAgIH1cblxuICAgIC8qKlxuICAgICAqIENoYW5nZSB0aGUgbWF4IHNpemUgb2YgdGhlIGNhY2hlLlxuICAgICAqXG4gICAgICogQHBhcmFtIHtudW1iZXJ9IG1heCB0aGUgbWF4IHNpemUgb2YgdGhlIGNhY2hlXG4gICAgICogQHJldHVybnMge1RpbGVDYWNoZX0gdGhpcyBjYWNoZVxuICAgICAqIEBwcml2YXRlXG4gICAgICovXG4gICAgc2V0TWF4U2l6ZShtYXg6IG51bWJlcik6IFRpbGVDYWNoZSB7XG4gICAgICAgIHRoaXMubWF4ID0gbWF4O1xuXG4gICAgICAgIHdoaWxlICh0aGlzLm9yZGVyLmxlbmd0aCA+IHRoaXMubWF4KSB7XG4gICAgICAgICAgICBjb25zdCByZW1vdmVkRGF0YSA9IHRoaXMuX2dldEFuZFJlbW92ZUJ5S2V5KHRoaXMub3JkZXJbMF0pO1xuICAgICAgICAgICAgaWYgKHJlbW92ZWREYXRhKSB0aGlzLm9uUmVtb3ZlKHJlbW92ZWREYXRhKTtcbiAgICAgICAgfVxuXG4gICAgICAgIHJldHVybiB0aGlzO1xuICAgIH1cbn1cblxuZXhwb3J0IGRlZmF1bHQgVGlsZUNhY2hlO1xuIiwiLy8gQGZsb3dcbmltcG9ydCBhc3NlcnQgZnJvbSAnYXNzZXJ0JztcblxuaW1wb3J0IHR5cGUge1N0cnVjdEFycmF5fSBmcm9tICcuLi91dGlsL3N0cnVjdF9hcnJheSc7XG5pbXBvcnQgdHlwZSB7VHJpYW5nbGVJbmRleEFycmF5LCBMaW5lSW5kZXhBcnJheSwgTGluZVN0cmlwSW5kZXhBcnJheX0gZnJvbSAnLi4vZGF0YS9pbmRleF9hcnJheV90eXBlJztcbmltcG9ydCB0eXBlIENvbnRleHQgZnJvbSAnLi4vZ2wvY29udGV4dCc7XG5cblxuY2xhc3MgSW5kZXhCdWZmZXIge1xuICAgIGNvbnRleHQ6IENvbnRleHQ7XG4gICAgYnVmZmVyOiBXZWJHTEJ1ZmZlcjtcbiAgICBkeW5hbWljRHJhdzogYm9vbGVhbjtcblxuICAgIGNvbnN0cnVjdG9yKGNvbnRleHQ6IENvbnRleHQsIGFycmF5OiBUcmlhbmdsZUluZGV4QXJyYXkgfCBMaW5lSW5kZXhBcnJheSB8IExpbmVTdHJpcEluZGV4QXJyYXksIGR5bmFtaWNEcmF3PzogYm9vbGVhbikge1xuICAgICAgICB0aGlzLmNvbnRleHQgPSBjb250ZXh0O1xuICAgICAgICBjb25zdCBnbCA9IGNvbnRleHQuZ2w7XG4gICAgICAgIHRoaXMuYnVmZmVyID0gZ2wuY3JlYXRlQnVmZmVyKCk7XG4gICAgICAgIHRoaXMuZHluYW1pY0RyYXcgPSBCb29sZWFuKGR5bmFtaWNEcmF3KTtcblxuICAgICAgICB0aGlzLnVuYmluZFZBTygpO1xuXG4gICAgICAgIGNvbnRleHQuYmluZEVsZW1lbnRCdWZmZXIuc2V0KHRoaXMuYnVmZmVyKTtcbiAgICAgICAgZ2wuYnVmZmVyRGF0YShnbC5FTEVNRU5UX0FSUkFZX0JVRkZFUiwgYXJyYXkuYXJyYXlCdWZmZXIsIHRoaXMuZHluYW1pY0RyYXcgPyBnbC5EWU5BTUlDX0RSQVcgOiBnbC5TVEFUSUNfRFJBVyk7XG5cbiAgICAgICAgaWYgKCF0aGlzLmR5bmFtaWNEcmF3KSB7XG4gICAgICAgICAgICBkZWxldGUgYXJyYXkuYXJyYXlCdWZmZXI7XG4gICAgICAgIH1cbiAgICB9XG5cbiAgICB1bmJpbmRWQU8oKSB7XG4gICAgICAgIC8vIFRoZSBib3VuZCBpbmRleCBidWZmZXIgaXMgcGFydCBvZiB2ZXJ0ZXggYXJyYXkgb2JqZWN0IHN0YXRlLiBXZSBkb24ndCB3YW50IHRvXG4gICAgICAgIC8vIG1vZGlmeSB3aGF0ZXZlciBWQU8gaGFwcGVucyB0byBiZSBjdXJyZW50bHkgYm91bmQsIHNvIG1ha2Ugc3VyZSB0aGUgZGVmYXVsdFxuICAgICAgICAvLyB2ZXJ0ZXggYXJyYXkgcHJvdmlkZWQgYnkgdGhlIGNvbnRleHQgaXMgYm91bmQgaW5zdGVhZC5cbiAgICAgICAgaWYgKHRoaXMuY29udGV4dC5leHRWZXJ0ZXhBcnJheU9iamVjdCkge1xuICAgICAgICAgICAgdGhpcy5jb250ZXh0LmJpbmRWZXJ0ZXhBcnJheU9FUy5zZXQobnVsbCk7XG4gICAgICAgIH1cbiAgICB9XG5cbiAgICBiaW5kKCkge1xuICAgICAgICB0aGlzLmNvbnRleHQuYmluZEVsZW1lbnRCdWZmZXIuc2V0KHRoaXMuYnVmZmVyKTtcbiAgICB9XG5cbiAgICB1cGRhdGVEYXRhKGFycmF5OiBTdHJ1Y3RBcnJheSkge1xuICAgICAgICBjb25zdCBnbCA9IHRoaXMuY29udGV4dC5nbDtcbiAgICAgICAgYXNzZXJ0KHRoaXMuZHluYW1pY0RyYXcpO1xuICAgICAgICAvLyBUaGUgcmlnaHQgVkFPIHdpbGwgZ2V0IHRoaXMgYnVmZmVyIHJlLWJvdW5kIGxhdGVyIGluIFZlcnRleEFycmF5T2JqZWN0I2JpbmRcbiAgICAgICAgLy8gU2VlIGh0dHBzOi8vZ2l0aHViLmNvbS9tYXBib3gvbWFwYm94LWdsLWpzL2lzc3Vlcy81NjIwXG4gICAgICAgIHRoaXMudW5iaW5kVkFPKCk7XG4gICAgICAgIHRoaXMuYmluZCgpO1xuICAgICAgICBnbC5idWZmZXJTdWJEYXRhKGdsLkVMRU1FTlRfQVJSQVlfQlVGRkVSLCAwLCBhcnJheS5hcnJheUJ1ZmZlcik7XG4gICAgfVxuXG4gICAgZGVzdHJveSgpIHtcbiAgICAgICAgY29uc3QgZ2wgPSB0aGlzLmNvbnRleHQuZ2w7XG4gICAgICAgIGlmICh0aGlzLmJ1ZmZlcikge1xuICAgICAgICAgICAgZ2wuZGVsZXRlQnVmZmVyKHRoaXMuYnVmZmVyKTtcbiAgICAgICAgICAgIGRlbGV0ZSB0aGlzLmJ1ZmZlcjtcbiAgICAgICAgfVxuICAgIH1cbn1cblxuZXhwb3J0IGRlZmF1bHQgSW5kZXhCdWZmZXI7XG4iLCIvLyBAZmxvd1xuXG5pbXBvcnQgYXNzZXJ0IGZyb20gJ2Fzc2VydCc7XG5cbmltcG9ydCB0eXBlIHtcbiAgICBTdHJ1Y3RBcnJheSxcbiAgICBTdHJ1Y3RBcnJheU1lbWJlclxufSBmcm9tICcuLi91dGlsL3N0cnVjdF9hcnJheSc7XG5cbmltcG9ydCB0eXBlIFByb2dyYW0gZnJvbSAnLi4vcmVuZGVyL3Byb2dyYW0nO1xuaW1wb3J0IHR5cGUgQ29udGV4dCBmcm9tICcuLi9nbC9jb250ZXh0JztcblxuLyoqXG4gKiBAZW51bSB7c3RyaW5nfSBBdHRyaWJ1dGVUeXBlXG4gKiBAcHJpdmF0ZVxuICogQHJlYWRvbmx5XG4gKi9cbmNvbnN0IEF0dHJpYnV0ZVR5cGUgPSB7XG4gICAgSW50ODogICAnQllURScsXG4gICAgVWludDg6ICAnVU5TSUdORURfQllURScsXG4gICAgSW50MTY6ICAnU0hPUlQnLFxuICAgIFVpbnQxNjogJ1VOU0lHTkVEX1NIT1JUJyxcbiAgICBJbnQzMjogICdJTlQnLFxuICAgIFVpbnQzMjogJ1VOU0lHTkVEX0lOVCcsXG4gICAgRmxvYXQzMjogJ0ZMT0FUJ1xufTtcblxuLyoqXG4gKiBUaGUgYFZlcnRleEJ1ZmZlcmAgY2xhc3MgdHVybnMgYSBgU3RydWN0QXJyYXlgIGludG8gYSBXZWJHTCBidWZmZXIuIEVhY2ggbWVtYmVyIG9mIHRoZSBTdHJ1Y3RBcnJheSdzXG4gKiBTdHJ1Y3QgdHlwZSBpcyBjb252ZXJ0ZWQgdG8gYSBXZWJHTCBhdHJpYnV0ZS5cbiAqIEBwcml2YXRlXG4gKi9cbmNsYXNzIFZlcnRleEJ1ZmZlciB7XG4gICAgbGVuZ3RoOiBudW1iZXI7XG4gICAgYXR0cmlidXRlczogJFJlYWRPbmx5QXJyYXk8U3RydWN0QXJyYXlNZW1iZXI+O1xuICAgIGl0ZW1TaXplOiBudW1iZXI7XG4gICAgZHluYW1pY0RyYXc6ID9ib29sZWFuO1xuICAgIGNvbnRleHQ6IENvbnRleHQ7XG4gICAgYnVmZmVyOiBXZWJHTEJ1ZmZlcjtcblxuICAgIC8qKlxuICAgICAqIEBwYXJhbSBkeW5hbWljRHJhdyBXaGV0aGVyIHRoaXMgYnVmZmVyIHdpbGwgYmUgcmVwZWF0ZWRseSB1cGRhdGVkLlxuICAgICAqL1xuICAgIGNvbnN0cnVjdG9yKGNvbnRleHQ6IENvbnRleHQsIGFycmF5OiBTdHJ1Y3RBcnJheSwgYXR0cmlidXRlczogJFJlYWRPbmx5QXJyYXk8U3RydWN0QXJyYXlNZW1iZXI+LCBkeW5hbWljRHJhdz86IGJvb2xlYW4pIHtcbiAgICAgICAgdGhpcy5sZW5ndGggPSBhcnJheS5sZW5ndGg7XG4gICAgICAgIHRoaXMuYXR0cmlidXRlcyA9IGF0dHJpYnV0ZXM7XG4gICAgICAgIHRoaXMuaXRlbVNpemUgPSBhcnJheS5ieXRlc1BlckVsZW1lbnQ7XG4gICAgICAgIHRoaXMuZHluYW1pY0RyYXcgPSBkeW5hbWljRHJhdztcblxuICAgICAgICB0aGlzLmNvbnRleHQgPSBjb250ZXh0O1xuICAgICAgICBjb25zdCBnbCA9IGNvbnRleHQuZ2w7XG4gICAgICAgIHRoaXMuYnVmZmVyID0gZ2wuY3JlYXRlQnVmZmVyKCk7XG4gICAgICAgIGNvbnRleHQuYmluZFZlcnRleEJ1ZmZlci5zZXQodGhpcy5idWZmZXIpO1xuICAgICAgICBnbC5idWZmZXJEYXRhKGdsLkFSUkFZX0JVRkZFUiwgYXJyYXkuYXJyYXlCdWZmZXIsIHRoaXMuZHluYW1pY0RyYXcgPyBnbC5EWU5BTUlDX0RSQVcgOiBnbC5TVEFUSUNfRFJBVyk7XG5cbiAgICAgICAgaWYgKCF0aGlzLmR5bmFtaWNEcmF3KSB7XG4gICAgICAgICAgICBkZWxldGUgYXJyYXkuYXJyYXlCdWZmZXI7XG4gICAgICAgIH1cbiAgICB9XG5cbiAgICBiaW5kKCkge1xuICAgICAgICB0aGlzLmNvbnRleHQuYmluZFZlcnRleEJ1ZmZlci5zZXQodGhpcy5idWZmZXIpO1xuICAgIH1cblxuICAgIHVwZGF0ZURhdGEoYXJyYXk6IFN0cnVjdEFycmF5KSB7XG4gICAgICAgIGFzc2VydChhcnJheS5sZW5ndGggPT09IHRoaXMubGVuZ3RoKTtcbiAgICAgICAgY29uc3QgZ2wgPSB0aGlzLmNvbnRleHQuZ2w7XG4gICAgICAgIHRoaXMuYmluZCgpO1xuICAgICAgICBnbC5idWZmZXJTdWJEYXRhKGdsLkFSUkFZX0JVRkZFUiwgMCwgYXJyYXkuYXJyYXlCdWZmZXIpO1xuICAgIH1cblxuICAgIGVuYWJsZUF0dHJpYnV0ZXMoZ2w6IFdlYkdMUmVuZGVyaW5nQ29udGV4dCwgcHJvZ3JhbTogUHJvZ3JhbTwqPikge1xuICAgICAgICBmb3IgKGxldCBqID0gMDsgaiA8IHRoaXMuYXR0cmlidXRlcy5sZW5ndGg7IGorKykge1xuICAgICAgICAgICAgY29uc3QgbWVtYmVyID0gdGhpcy5hdHRyaWJ1dGVzW2pdO1xuICAgICAgICAgICAgY29uc3QgYXR0cmliSW5kZXg6IG51bWJlciB8IHZvaWQgPSBwcm9ncmFtLmF0dHJpYnV0ZXNbbWVtYmVyLm5hbWVdO1xuICAgICAgICAgICAgaWYgKGF0dHJpYkluZGV4ICE9PSB1bmRlZmluZWQpIHtcbiAgICAgICAgICAgICAgICBnbC5lbmFibGVWZXJ0ZXhBdHRyaWJBcnJheShhdHRyaWJJbmRleCk7XG4gICAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBTZXQgdGhlIGF0dHJpYnV0ZSBwb2ludGVycyBpbiBhIFdlYkdMIGNvbnRleHRcbiAgICAgKiBAcGFyYW0gZ2wgVGhlIFdlYkdMIGNvbnRleHRcbiAgICAgKiBAcGFyYW0gcHJvZ3JhbSBUaGUgYWN0aXZlIFdlYkdMIHByb2dyYW1cbiAgICAgKiBAcGFyYW0gdmVydGV4T2Zmc2V0IEluZGV4IG9mIHRoZSBzdGFydGluZyB2ZXJ0ZXggb2YgdGhlIHNlZ21lbnRcbiAgICAgKi9cbiAgICBzZXRWZXJ0ZXhBdHRyaWJQb2ludGVycyhnbDogV2ViR0xSZW5kZXJpbmdDb250ZXh0LCBwcm9ncmFtOiBQcm9ncmFtPCo+LCB2ZXJ0ZXhPZmZzZXQ6ID9udW1iZXIpIHtcbiAgICAgICAgZm9yIChsZXQgaiA9IDA7IGogPCB0aGlzLmF0dHJpYnV0ZXMubGVuZ3RoOyBqKyspIHtcbiAgICAgICAgICAgIGNvbnN0IG1lbWJlciA9IHRoaXMuYXR0cmlidXRlc1tqXTtcbiAgICAgICAgICAgIGNvbnN0IGF0dHJpYkluZGV4OiBudW1iZXIgfCB2b2lkID0gcHJvZ3JhbS5hdHRyaWJ1dGVzW21lbWJlci5uYW1lXTtcblxuICAgICAgICAgICAgaWYgKGF0dHJpYkluZGV4ICE9PSB1bmRlZmluZWQpIHtcbiAgICAgICAgICAgICAgICBnbC52ZXJ0ZXhBdHRyaWJQb2ludGVyKFxuICAgICAgICAgICAgICAgICAgICBhdHRyaWJJbmRleCxcbiAgICAgICAgICAgICAgICAgICAgbWVtYmVyLmNvbXBvbmVudHMsXG4gICAgICAgICAgICAgICAgICAgIChnbDogYW55KVtBdHRyaWJ1dGVUeXBlW21lbWJlci50eXBlXV0sXG4gICAgICAgICAgICAgICAgICAgIGZhbHNlLFxuICAgICAgICAgICAgICAgICAgICB0aGlzLml0ZW1TaXplLFxuICAgICAgICAgICAgICAgICAgICBtZW1iZXIub2Zmc2V0ICsgKHRoaXMuaXRlbVNpemUgKiAodmVydGV4T2Zmc2V0IHx8IDApKVxuICAgICAgICAgICAgICAgICk7XG4gICAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBEZXN0cm95IHRoZSBHTCBidWZmZXIgYm91bmQgdG8gdGhlIGdpdmVuIFdlYkdMIGNvbnRleHRcbiAgICAgKi9cbiAgICBkZXN0cm95KCkge1xuICAgICAgICBjb25zdCBnbCA9IHRoaXMuY29udGV4dC5nbDtcbiAgICAgICAgaWYgKHRoaXMuYnVmZmVyKSB7XG4gICAgICAgICAgICBnbC5kZWxldGVCdWZmZXIodGhpcy5idWZmZXIpO1xuICAgICAgICAgICAgZGVsZXRlIHRoaXMuYnVmZmVyO1xuICAgICAgICB9XG4gICAgfVxufVxuXG5leHBvcnQgZGVmYXVsdCBWZXJ0ZXhCdWZmZXI7XG4iLCIvLyBAZmxvd1xuXG5pbXBvcnQgQ29sb3IgZnJvbSAnLi4vc3R5bGUtc3BlYy91dGlsL2NvbG9yJztcblxuaW1wb3J0IHR5cGUgQ29udGV4dCBmcm9tICcuL2NvbnRleHQnO1xuaW1wb3J0IHR5cGUge1xuICAgIEJsZW5kRnVuY1R5cGUsXG4gICAgQ29sb3JNYXNrVHlwZSxcbiAgICBEZXB0aFJhbmdlVHlwZSxcbiAgICBEZXB0aE1hc2tUeXBlLFxuICAgIFN0ZW5jaWxGdW5jVHlwZSxcbiAgICBTdGVuY2lsT3BUeXBlLFxuICAgIERlcHRoRnVuY1R5cGUsXG4gICAgVGV4dHVyZVVuaXRUeXBlLFxuICAgIFZpZXdwb3J0VHlwZSxcbn0gZnJvbSAnLi90eXBlcyc7XG5cbmV4cG9ydCBpbnRlcmZhY2UgVmFsdWU8VD4ge1xuICAgIGNvbnRleHQ6IENvbnRleHQ7XG4gICAgY3VycmVudDogVDtcbiAgICBnZXQoKTogVDtcbiAgICBzZXQodmFsdWU6IFQpOiB2b2lkO1xufVxuXG5leHBvcnQgY2xhc3MgQ2xlYXJDb2xvciBpbXBsZW1lbnRzIFZhbHVlPENvbG9yPiB7XG4gICAgY29udGV4dDogQ29udGV4dDtcbiAgICBjdXJyZW50OiBDb2xvcjtcblxuICAgIGNvbnN0cnVjdG9yKGNvbnRleHQ6IENvbnRleHQpIHtcbiAgICAgICAgdGhpcy5jb250ZXh0ID0gY29udGV4dDtcbiAgICAgICAgdGhpcy5jdXJyZW50ID0gQ29sb3IudHJhbnNwYXJlbnQ7XG4gICAgfVxuXG4gICAgZ2V0KCk6IENvbG9yIHsgcmV0dXJuIHRoaXMuY3VycmVudDsgfVxuXG4gICAgc2V0KHY6IENvbG9yKTogdm9pZCB7XG4gICAgICAgIGNvbnN0IGMgPSB0aGlzLmN1cnJlbnQ7XG4gICAgICAgIGlmICh2LnIgIT09IGMuciB8fCB2LmcgIT09IGMuZyB8fCB2LmIgIT09IGMuYiB8fCB2LmEgIT09IGMuYSkge1xuICAgICAgICAgICAgdGhpcy5jb250ZXh0LmdsLmNsZWFyQ29sb3Iodi5yLCB2LmcsIHYuYiwgdi5hKTtcbiAgICAgICAgICAgIHRoaXMuY3VycmVudCA9IHY7XG4gICAgICAgIH1cbiAgICB9XG59XG5cbmV4cG9ydCBjbGFzcyBDbGVhckRlcHRoIGltcGxlbWVudHMgVmFsdWU8bnVtYmVyPiB7XG4gICAgY29udGV4dDogQ29udGV4dDtcbiAgICBjdXJyZW50OiBudW1iZXI7XG5cbiAgICBjb25zdHJ1Y3Rvcihjb250ZXh0OiBDb250ZXh0KSB7XG4gICAgICAgIHRoaXMuY29udGV4dCA9IGNvbnRleHQ7XG4gICAgICAgIHRoaXMuY3VycmVudCA9IDE7XG4gICAgfVxuXG4gICAgZ2V0KCk6IG51bWJlciB7IHJldHVybiB0aGlzLmN1cnJlbnQ7IH1cblxuICAgIHNldCh2OiBudW1iZXIpOiB2b2lkIHtcbiAgICAgICAgaWYgKHRoaXMuY3VycmVudCAhPT0gdikge1xuICAgICAgICAgICAgdGhpcy5jb250ZXh0LmdsLmNsZWFyRGVwdGgodik7XG4gICAgICAgICAgICB0aGlzLmN1cnJlbnQgPSB2O1xuICAgICAgICB9XG4gICAgfVxufVxuXG5leHBvcnQgY2xhc3MgQ2xlYXJTdGVuY2lsIGltcGxlbWVudHMgVmFsdWU8bnVtYmVyPiB7XG4gICAgY29udGV4dDogQ29udGV4dDtcbiAgICBjdXJyZW50OiBudW1iZXI7XG5cbiAgICBjb25zdHJ1Y3Rvcihjb250ZXh0OiBDb250ZXh0KSB7XG4gICAgICAgIHRoaXMuY29udGV4dCA9IGNvbnRleHQ7XG4gICAgICAgIHRoaXMuY3VycmVudCA9IDA7XG4gICAgfVxuXG4gICAgZ2V0KCk6IG51bWJlciB7IHJldHVybiB0aGlzLmN1cnJlbnQ7IH1cblxuICAgIHNldCh2OiBudW1iZXIpOiB2b2lkIHtcbiAgICAgICAgaWYgKHRoaXMuY3VycmVudCAhPT0gdikge1xuICAgICAgICAgICAgdGhpcy5jb250ZXh0LmdsLmNsZWFyU3RlbmNpbCh2KTtcbiAgICAgICAgICAgIHRoaXMuY3VycmVudCA9IHY7XG4gICAgICAgIH1cbiAgICB9XG59XG5cbmV4cG9ydCBjbGFzcyBDb2xvck1hc2sgaW1wbGVtZW50cyBWYWx1ZTxDb2xvck1hc2tUeXBlPiB7XG4gICAgY29udGV4dDogQ29udGV4dDtcbiAgICBjdXJyZW50OiBDb2xvck1hc2tUeXBlO1xuXG4gICAgY29uc3RydWN0b3IoY29udGV4dDogQ29udGV4dCkge1xuICAgICAgICB0aGlzLmNvbnRleHQgPSBjb250ZXh0O1xuICAgICAgICB0aGlzLmN1cnJlbnQgPSBbdHJ1ZSwgdHJ1ZSwgdHJ1ZSwgdHJ1ZV07XG4gICAgfVxuXG4gICAgZ2V0KCk6IENvbG9yTWFza1R5cGUgeyByZXR1cm4gdGhpcy5jdXJyZW50OyB9XG5cbiAgICBzZXQodjogQ29sb3JNYXNrVHlwZSk6IHZvaWQge1xuICAgICAgICBjb25zdCBjID0gdGhpcy5jdXJyZW50O1xuICAgICAgICBpZiAodlswXSAhPT0gY1swXSB8fCB2WzFdICE9PSBjWzFdIHx8IHZbMl0gIT09IGNbMl0gfHwgdlszXSAhPT0gY1szXSkge1xuICAgICAgICAgICAgdGhpcy5jb250ZXh0LmdsLmNvbG9yTWFzayh2WzBdLCB2WzFdLCB2WzJdLCB2WzNdKTtcbiAgICAgICAgICAgIHRoaXMuY3VycmVudCA9IHY7XG4gICAgICAgIH1cbiAgICB9XG59XG5cbmV4cG9ydCBjbGFzcyBEZXB0aE1hc2sgaW1wbGVtZW50cyBWYWx1ZTxEZXB0aE1hc2tUeXBlPiB7XG4gICAgY29udGV4dDogQ29udGV4dDtcbiAgICBjdXJyZW50OiBEZXB0aE1hc2tUeXBlO1xuXG4gICAgY29uc3RydWN0b3IoY29udGV4dDogQ29udGV4dCkge1xuICAgICAgICB0aGlzLmNvbnRleHQgPSBjb250ZXh0O1xuICAgICAgICB0aGlzLmN1cnJlbnQgPSB0cnVlO1xuICAgIH1cblxuICAgIGdldCgpOiBEZXB0aE1hc2tUeXBlIHsgcmV0dXJuIHRoaXMuY3VycmVudDsgfVxuXG4gICAgc2V0KHY6IERlcHRoTWFza1R5cGUpOiB2b2lkIHtcbiAgICAgICAgaWYgKHRoaXMuY3VycmVudCAhPT0gdikge1xuICAgICAgICAgICAgdGhpcy5jb250ZXh0LmdsLmRlcHRoTWFzayh2KTtcbiAgICAgICAgICAgIHRoaXMuY3VycmVudCA9IHY7XG4gICAgICAgIH1cbiAgICB9XG59XG5cbmV4cG9ydCBjbGFzcyBTdGVuY2lsTWFzayBpbXBsZW1lbnRzIFZhbHVlPG51bWJlcj4ge1xuICAgIGNvbnRleHQ6IENvbnRleHQ7XG4gICAgY3VycmVudDogbnVtYmVyO1xuXG4gICAgY29uc3RydWN0b3IoY29udGV4dDogQ29udGV4dCkge1xuICAgICAgICB0aGlzLmNvbnRleHQgPSBjb250ZXh0O1xuICAgICAgICB0aGlzLmN1cnJlbnQgPSAweEZGO1xuICAgIH1cblxuICAgIGdldCgpOiBudW1iZXIgeyByZXR1cm4gdGhpcy5jdXJyZW50OyB9XG5cbiAgICBzZXQodjogbnVtYmVyKTogdm9pZCB7XG4gICAgICAgIGlmICh0aGlzLmN1cnJlbnQgIT09IHYpIHtcbiAgICAgICAgICAgIHRoaXMuY29udGV4dC5nbC5zdGVuY2lsTWFzayh2KTtcbiAgICAgICAgICAgIHRoaXMuY3VycmVudCA9IHY7XG4gICAgICAgIH1cbiAgICB9XG59XG5cbmV4cG9ydCBjbGFzcyBTdGVuY2lsRnVuYyBpbXBsZW1lbnRzIFZhbHVlPFN0ZW5jaWxGdW5jVHlwZT4ge1xuICAgIGNvbnRleHQ6IENvbnRleHQ7XG4gICAgY3VycmVudDogU3RlbmNpbEZ1bmNUeXBlO1xuXG4gICAgY29uc3RydWN0b3IoY29udGV4dDogQ29udGV4dCkge1xuICAgICAgICB0aGlzLmNvbnRleHQgPSBjb250ZXh0O1xuICAgICAgICB0aGlzLmN1cnJlbnQgPSB7XG4gICAgICAgICAgICBmdW5jOiBjb250ZXh0LmdsLkFMV0FZUyxcbiAgICAgICAgICAgIHJlZjogMCxcbiAgICAgICAgICAgIG1hc2s6IDB4RkZcbiAgICAgICAgfTtcbiAgICB9XG5cbiAgICBnZXQoKTogU3RlbmNpbEZ1bmNUeXBlIHsgcmV0dXJuIHRoaXMuY3VycmVudDsgfVxuXG4gICAgc2V0KHY6IFN0ZW5jaWxGdW5jVHlwZSk6IHZvaWQge1xuICAgICAgICBjb25zdCBjID0gdGhpcy5jdXJyZW50O1xuICAgICAgICBpZiAodi5mdW5jICE9PSBjLmZ1bmMgfHwgdi5yZWYgIT09IGMucmVmIHx8IHYubWFzayAhPT0gYy5tYXNrKSB7XG4gICAgICAgICAgICB0aGlzLmNvbnRleHQuZ2wuc3RlbmNpbEZ1bmModi5mdW5jLCB2LnJlZiwgdi5tYXNrKTtcbiAgICAgICAgICAgIHRoaXMuY3VycmVudCA9IHY7XG4gICAgICAgIH1cbiAgICB9XG59XG5cbmV4cG9ydCBjbGFzcyBTdGVuY2lsT3AgaW1wbGVtZW50cyBWYWx1ZTxTdGVuY2lsT3BUeXBlPiB7XG4gICAgY29udGV4dDogQ29udGV4dDtcbiAgICBjdXJyZW50OiBTdGVuY2lsT3BUeXBlO1xuXG4gICAgY29uc3RydWN0b3IoY29udGV4dDogQ29udGV4dCkge1xuICAgICAgICB0aGlzLmNvbnRleHQgPSBjb250ZXh0O1xuICAgICAgICBjb25zdCBnbCA9IHRoaXMuY29udGV4dC5nbDtcbiAgICAgICAgdGhpcy5jdXJyZW50ID0gW2dsLktFRVAsIGdsLktFRVAsIGdsLktFRVBdO1xuICAgIH1cblxuICAgIGdldCgpOiBTdGVuY2lsT3BUeXBlIHsgcmV0dXJuIHRoaXMuY3VycmVudDsgfVxuXG4gICAgc2V0KHY6IFN0ZW5jaWxPcFR5cGUpOiB2b2lkIHtcbiAgICAgICAgY29uc3QgYyA9IHRoaXMuY3VycmVudDtcbiAgICAgICAgaWYgKHZbMF0gIT09IGNbMF0gfHwgdlsxXSAhPT0gY1sxXSB8fCB2WzJdICE9PSBjWzJdKSB7XG4gICAgICAgICAgICB0aGlzLmNvbnRleHQuZ2wuc3RlbmNpbE9wKHZbMF0sIHZbMV0sIHZbMl0pO1xuICAgICAgICAgICAgdGhpcy5jdXJyZW50ID0gdjtcbiAgICAgICAgfVxuICAgIH1cbn1cblxuZXhwb3J0IGNsYXNzIFN0ZW5jaWxUZXN0IGltcGxlbWVudHMgVmFsdWU8Ym9vbGVhbj4ge1xuICAgIGNvbnRleHQ6IENvbnRleHQ7XG4gICAgY3VycmVudDogYm9vbGVhbjtcblxuICAgIGNvbnN0cnVjdG9yKGNvbnRleHQ6IENvbnRleHQpIHtcbiAgICAgICAgdGhpcy5jb250ZXh0ID0gY29udGV4dDtcbiAgICAgICAgdGhpcy5jdXJyZW50ID0gZmFsc2U7XG4gICAgfVxuXG4gICAgZ2V0KCk6IGJvb2xlYW4geyByZXR1cm4gdGhpcy5jdXJyZW50OyB9XG5cbiAgICBzZXQodjogYm9vbGVhbik6IHZvaWQge1xuICAgICAgICBpZiAodGhpcy5jdXJyZW50ICE9PSB2KSB7XG4gICAgICAgICAgICBjb25zdCBnbCA9IHRoaXMuY29udGV4dC5nbDtcbiAgICAgICAgICAgIGlmICh2KSB7XG4gICAgICAgICAgICAgICAgZ2wuZW5hYmxlKGdsLlNURU5DSUxfVEVTVCk7XG4gICAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgICAgIGdsLmRpc2FibGUoZ2wuU1RFTkNJTF9URVNUKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIHRoaXMuY3VycmVudCA9IHY7XG4gICAgICAgIH1cbiAgICB9XG59XG5cbmV4cG9ydCBjbGFzcyBEZXB0aFJhbmdlIGltcGxlbWVudHMgVmFsdWU8RGVwdGhSYW5nZVR5cGU+IHtcbiAgICBjb250ZXh0OiBDb250ZXh0O1xuICAgIGN1cnJlbnQ6IERlcHRoUmFuZ2VUeXBlO1xuXG4gICAgY29uc3RydWN0b3IoY29udGV4dDogQ29udGV4dCkge1xuICAgICAgICB0aGlzLmNvbnRleHQgPSBjb250ZXh0O1xuICAgICAgICB0aGlzLmN1cnJlbnQgPSBbMCwgMV07XG4gICAgfVxuXG4gICAgZ2V0KCk6IERlcHRoUmFuZ2VUeXBlIHsgcmV0dXJuIHRoaXMuY3VycmVudDsgfVxuXG4gICAgc2V0KHY6IERlcHRoUmFuZ2VUeXBlKTogdm9pZCB7XG4gICAgICAgIGNvbnN0IGMgPSB0aGlzLmN1cnJlbnQ7XG4gICAgICAgIGlmICh2WzBdICE9PSBjWzBdIHx8IHZbMV0gIT09IGNbMV0pIHtcbiAgICAgICAgICAgIHRoaXMuY29udGV4dC5nbC5kZXB0aFJhbmdlKHZbMF0sIHZbMV0pO1xuICAgICAgICAgICAgdGhpcy5jdXJyZW50ID0gdjtcbiAgICAgICAgfVxuICAgIH1cbn1cblxuZXhwb3J0IGNsYXNzIERlcHRoVGVzdCBpbXBsZW1lbnRzIFZhbHVlPGJvb2xlYW4+IHtcbiAgICBjb250ZXh0OiBDb250ZXh0O1xuICAgIGN1cnJlbnQ6IGJvb2xlYW47XG5cbiAgICBjb25zdHJ1Y3Rvcihjb250ZXh0OiBDb250ZXh0KSB7XG4gICAgICAgIHRoaXMuY29udGV4dCA9IGNvbnRleHQ7XG4gICAgICAgIHRoaXMuY3VycmVudCA9IGZhbHNlO1xuICAgIH1cblxuICAgIGdldCgpOiBib29sZWFuIHsgcmV0dXJuIHRoaXMuY3VycmVudDsgfVxuXG4gICAgc2V0KHY6IGJvb2xlYW4pOiB2b2lkIHtcbiAgICAgICAgaWYgKHRoaXMuY3VycmVudCAhPT0gdikge1xuICAgICAgICAgICAgY29uc3QgZ2wgPSB0aGlzLmNvbnRleHQuZ2w7XG4gICAgICAgICAgICBpZiAodikge1xuICAgICAgICAgICAgICAgIGdsLmVuYWJsZShnbC5ERVBUSF9URVNUKTtcbiAgICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICAgICAgZ2wuZGlzYWJsZShnbC5ERVBUSF9URVNUKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIHRoaXMuY3VycmVudCA9IHY7XG4gICAgICAgIH1cbiAgICB9XG59XG5cbmV4cG9ydCBjbGFzcyBEZXB0aEZ1bmMgaW1wbGVtZW50cyBWYWx1ZTxEZXB0aEZ1bmNUeXBlPiB7XG4gICAgY29udGV4dDogQ29udGV4dDtcbiAgICBjdXJyZW50OiBEZXB0aEZ1bmNUeXBlO1xuXG4gICAgY29uc3RydWN0b3IoY29udGV4dDogQ29udGV4dCkge1xuICAgICAgICB0aGlzLmNvbnRleHQgPSBjb250ZXh0O1xuICAgICAgICB0aGlzLmN1cnJlbnQgPSBjb250ZXh0LmdsLkxFU1M7XG4gICAgfVxuXG4gICAgZ2V0KCk6IERlcHRoRnVuY1R5cGUgeyByZXR1cm4gdGhpcy5jdXJyZW50OyB9XG5cbiAgICBzZXQodjogRGVwdGhGdW5jVHlwZSk6IHZvaWQge1xuICAgICAgICBpZiAodGhpcy5jdXJyZW50ICE9PSB2KSB7XG4gICAgICAgICAgICB0aGlzLmNvbnRleHQuZ2wuZGVwdGhGdW5jKHYpO1xuICAgICAgICAgICAgdGhpcy5jdXJyZW50ID0gdjtcbiAgICAgICAgfVxuICAgIH1cbn1cblxuZXhwb3J0IGNsYXNzIEJsZW5kIGltcGxlbWVudHMgVmFsdWU8Ym9vbGVhbj4ge1xuICAgIGNvbnRleHQ6IENvbnRleHQ7XG4gICAgY3VycmVudDogYm9vbGVhbjtcblxuICAgIGNvbnN0cnVjdG9yKGNvbnRleHQ6IENvbnRleHQpIHtcbiAgICAgICAgdGhpcy5jb250ZXh0ID0gY29udGV4dDtcbiAgICAgICAgdGhpcy5jdXJyZW50ID0gZmFsc2U7XG4gICAgfVxuXG4gICAgZ2V0KCk6IGJvb2xlYW4geyByZXR1cm4gdGhpcy5jdXJyZW50OyB9XG5cbiAgICBzZXQodjogYm9vbGVhbik6IHZvaWQge1xuICAgICAgICBpZiAodGhpcy5jdXJyZW50ICE9PSB2KSB7XG4gICAgICAgICAgICBjb25zdCBnbCA9IHRoaXMuY29udGV4dC5nbDtcbiAgICAgICAgICAgIGlmICh2KSB7XG4gICAgICAgICAgICAgICAgZ2wuZW5hYmxlKGdsLkJMRU5EKTtcbiAgICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICAgICAgZ2wuZGlzYWJsZShnbC5CTEVORCk7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICB0aGlzLmN1cnJlbnQgPSB2O1xuICAgICAgICB9XG4gICAgfVxufVxuXG5leHBvcnQgY2xhc3MgQmxlbmRGdW5jIGltcGxlbWVudHMgVmFsdWU8QmxlbmRGdW5jVHlwZT4ge1xuICAgIGNvbnRleHQ6IENvbnRleHQ7XG4gICAgY3VycmVudDogQmxlbmRGdW5jVHlwZTtcblxuICAgIGNvbnN0cnVjdG9yKGNvbnRleHQ6IENvbnRleHQpIHtcbiAgICAgICAgdGhpcy5jb250ZXh0ID0gY29udGV4dDtcbiAgICAgICAgY29uc3QgZ2wgPSB0aGlzLmNvbnRleHQuZ2w7XG4gICAgICAgIHRoaXMuY3VycmVudCA9IFtnbC5PTkUsIGdsLlpFUk9dO1xuICAgIH1cblxuICAgIGdldCgpOiBCbGVuZEZ1bmNUeXBlIHsgcmV0dXJuIHRoaXMuY3VycmVudDsgfVxuXG4gICAgc2V0KHY6IEJsZW5kRnVuY1R5cGUpOiB2b2lkIHtcbiAgICAgICAgY29uc3QgYyA9IHRoaXMuY3VycmVudDtcbiAgICAgICAgaWYgKHZbMF0gIT09IGNbMF0gfHwgdlsxXSAhPT0gY1sxXSkge1xuICAgICAgICAgICAgdGhpcy5jb250ZXh0LmdsLmJsZW5kRnVuYyh2WzBdLCB2WzFdKTtcbiAgICAgICAgICAgIHRoaXMuY3VycmVudCA9IHY7XG4gICAgICAgIH1cbiAgICB9XG59XG5cbmV4cG9ydCBjbGFzcyBCbGVuZENvbG9yIGltcGxlbWVudHMgVmFsdWU8Q29sb3I+IHtcbiAgICBjb250ZXh0OiBDb250ZXh0O1xuICAgIGN1cnJlbnQ6IENvbG9yO1xuXG4gICAgY29uc3RydWN0b3IoY29udGV4dDogQ29udGV4dCkge1xuICAgICAgICB0aGlzLmNvbnRleHQgPSBjb250ZXh0O1xuICAgICAgICB0aGlzLmN1cnJlbnQgPSBDb2xvci50cmFuc3BhcmVudDtcbiAgICB9XG5cbiAgICBnZXQoKTogQ29sb3IgeyByZXR1cm4gdGhpcy5jdXJyZW50OyB9XG5cbiAgICBzZXQodjogQ29sb3IpOiB2b2lkIHtcbiAgICAgICAgY29uc3QgYyA9IHRoaXMuY3VycmVudDtcbiAgICAgICAgaWYgKHYuciAhPT0gYy5yIHx8IHYuZyAhPT0gYy5nIHx8IHYuYiAhPT0gYy5iIHx8IHYuYSAhPT0gYy5hKSB7XG4gICAgICAgICAgICB0aGlzLmNvbnRleHQuZ2wuYmxlbmRDb2xvcih2LnIsIHYuZywgdi5iLCB2LmEpO1xuICAgICAgICAgICAgdGhpcy5jdXJyZW50ID0gdjtcbiAgICAgICAgfVxuICAgIH1cbn1cblxuZXhwb3J0IGNsYXNzIFByb2dyYW0gaW1wbGVtZW50cyBWYWx1ZTw/V2ViR0xQcm9ncmFtPiB7XG4gICAgY29udGV4dDogQ29udGV4dDtcbiAgICBjdXJyZW50OiA/V2ViR0xQcm9ncmFtO1xuXG4gICAgY29uc3RydWN0b3IoY29udGV4dDogQ29udGV4dCkge1xuICAgICAgICB0aGlzLmNvbnRleHQgPSBjb250ZXh0O1xuICAgICAgICB0aGlzLmN1cnJlbnQgPSBudWxsO1xuICAgIH1cblxuICAgIGdldCgpOiA/V2ViR0xQcm9ncmFtIHsgcmV0dXJuIHRoaXMuY3VycmVudDsgfVxuXG4gICAgc2V0KHY6ID9XZWJHTFByb2dyYW0pOiB2b2lkIHtcbiAgICAgICAgaWYgKHRoaXMuY3VycmVudCAhPT0gdikge1xuICAgICAgICAgICAgdGhpcy5jb250ZXh0LmdsLnVzZVByb2dyYW0odik7XG4gICAgICAgICAgICB0aGlzLmN1cnJlbnQgPSB2O1xuICAgICAgICB9XG4gICAgfVxufVxuXG5leHBvcnQgY2xhc3MgQWN0aXZlVGV4dHVyZVVuaXQgaW1wbGVtZW50cyBWYWx1ZTxUZXh0dXJlVW5pdFR5cGU+IHtcbiAgICBjb250ZXh0OiBDb250ZXh0O1xuICAgIGN1cnJlbnQ6IFRleHR1cmVVbml0VHlwZTtcblxuICAgIGNvbnN0cnVjdG9yKGNvbnRleHQ6IENvbnRleHQpIHtcbiAgICAgICAgdGhpcy5jb250ZXh0ID0gY29udGV4dDtcbiAgICAgICAgdGhpcy5jdXJyZW50ID0gY29udGV4dC5nbC5URVhUVVJFMDtcbiAgICB9XG5cbiAgICBnZXQoKTogVGV4dHVyZVVuaXRUeXBlIHsgcmV0dXJuIHRoaXMuY3VycmVudDsgfVxuXG4gICAgc2V0KHY6IFRleHR1cmVVbml0VHlwZSk6IHZvaWQge1xuICAgICAgICBpZiAodGhpcy5jdXJyZW50ICE9PSB2KSB7XG4gICAgICAgICAgICB0aGlzLmNvbnRleHQuZ2wuYWN0aXZlVGV4dHVyZSh2KTtcbiAgICAgICAgICAgIHRoaXMuY3VycmVudCA9IHY7XG4gICAgICAgIH1cbiAgICB9XG59XG5cbmV4cG9ydCBjbGFzcyBWaWV3cG9ydCBpbXBsZW1lbnRzIFZhbHVlPFZpZXdwb3J0VHlwZT4ge1xuICAgIGNvbnRleHQ6IENvbnRleHQ7XG4gICAgY3VycmVudDogVmlld3BvcnRUeXBlO1xuXG4gICAgY29uc3RydWN0b3IoY29udGV4dDogQ29udGV4dCkge1xuICAgICAgICB0aGlzLmNvbnRleHQgPSBjb250ZXh0O1xuICAgICAgICBjb25zdCBnbCA9IHRoaXMuY29udGV4dC5nbDtcbiAgICAgICAgdGhpcy5jdXJyZW50ID0gWzAsIDAsIGdsLmRyYXdpbmdCdWZmZXJXaWR0aCwgZ2wuZHJhd2luZ0J1ZmZlckhlaWdodF07XG4gICAgfVxuXG4gICAgZ2V0KCk6IFZpZXdwb3J0VHlwZSB7IHJldHVybiB0aGlzLmN1cnJlbnQ7IH1cblxuICAgIHNldCh2OiBWaWV3cG9ydFR5cGUpOiB2b2lkIHtcbiAgICAgICAgY29uc3QgYyA9IHRoaXMuY3VycmVudDtcbiAgICAgICAgaWYgKHZbMF0gIT09IGNbMF0gfHwgdlsxXSAhPT0gY1sxXSB8fCB2WzJdICE9PSBjWzJdIHx8IHZbM10gIT09IGNbM10pIHtcbiAgICAgICAgICAgIHRoaXMuY29udGV4dC5nbC52aWV3cG9ydCh2WzBdLCB2WzFdLCB2WzJdLCB2WzNdKTtcbiAgICAgICAgICAgIHRoaXMuY3VycmVudCA9IHY7XG4gICAgICAgIH1cbiAgICB9XG59XG5cbmV4cG9ydCBjbGFzcyBCaW5kRnJhbWVidWZmZXIgaW1wbGVtZW50cyBWYWx1ZTw/V2ViR0xGcmFtZWJ1ZmZlcj4ge1xuICAgIGNvbnRleHQ6IENvbnRleHQ7XG4gICAgY3VycmVudDogP1dlYkdMRnJhbWVidWZmZXI7XG5cbiAgICBjb25zdHJ1Y3Rvcihjb250ZXh0OiBDb250ZXh0KSB7XG4gICAgICAgIHRoaXMuY29udGV4dCA9IGNvbnRleHQ7XG4gICAgICAgIHRoaXMuY3VycmVudCA9IG51bGw7XG4gICAgfVxuXG4gICAgZ2V0KCk6ID9XZWJHTEZyYW1lYnVmZmVyIHsgcmV0dXJuIHRoaXMuY3VycmVudDsgfVxuXG4gICAgc2V0KHY6ID9XZWJHTEZyYW1lYnVmZmVyKTogdm9pZCB7XG4gICAgICAgIGlmICh0aGlzLmN1cnJlbnQgIT09IHYpIHtcbiAgICAgICAgICAgIGNvbnN0IGdsID0gdGhpcy5jb250ZXh0LmdsO1xuICAgICAgICAgICAgZ2wuYmluZEZyYW1lYnVmZmVyKGdsLkZSQU1FQlVGRkVSLCB2KTtcbiAgICAgICAgICAgIHRoaXMuY3VycmVudCA9IHY7XG4gICAgICAgIH1cbiAgICB9XG59XG5cbmV4cG9ydCBjbGFzcyBCaW5kUmVuZGVyYnVmZmVyIGltcGxlbWVudHMgVmFsdWU8P1dlYkdMUmVuZGVyYnVmZmVyPiB7XG4gICAgY29udGV4dDogQ29udGV4dDtcbiAgICBjdXJyZW50OiA/V2ViR0xSZW5kZXJidWZmZXI7XG5cbiAgICBjb25zdHJ1Y3Rvcihjb250ZXh0OiBDb250ZXh0KSB7XG4gICAgICAgIHRoaXMuY29udGV4dCA9IGNvbnRleHQ7XG4gICAgICAgIHRoaXMuY3VycmVudCA9IG51bGw7XG4gICAgfVxuXG4gICAgZ2V0KCk6ID9XZWJHTFJlbmRlcmJ1ZmZlciB7IHJldHVybiB0aGlzLmN1cnJlbnQ7IH1cblxuICAgIHNldCh2OiA/V2ViR0xSZW5kZXJidWZmZXIpOiB2b2lkIHtcbiAgICAgICAgaWYgKHRoaXMuY3VycmVudCAhPT0gdikge1xuICAgICAgICAgICAgY29uc3QgZ2wgPSB0aGlzLmNvbnRleHQuZ2w7XG4gICAgICAgICAgICBnbC5iaW5kUmVuZGVyYnVmZmVyKGdsLlJFTkRFUkJVRkZFUiwgdik7XG4gICAgICAgICAgICB0aGlzLmN1cnJlbnQgPSB2O1xuICAgICAgICB9XG4gICAgfVxufVxuXG5leHBvcnQgY2xhc3MgQmluZFRleHR1cmUgaW1wbGVtZW50cyBWYWx1ZTw/V2ViR0xUZXh0dXJlPiB7XG4gICAgY29udGV4dDogQ29udGV4dDtcbiAgICBjdXJyZW50OiA/V2ViR0xUZXh0dXJlO1xuXG4gICAgY29uc3RydWN0b3IoY29udGV4dDogQ29udGV4dCkge1xuICAgICAgICB0aGlzLmNvbnRleHQgPSBjb250ZXh0O1xuICAgICAgICB0aGlzLmN1cnJlbnQgPSBudWxsO1xuICAgIH1cblxuICAgIGdldCgpOiA/V2ViR0xUZXh0dXJlIHsgcmV0dXJuIHRoaXMuY3VycmVudDsgfVxuXG4gICAgc2V0KHY6ID9XZWJHTFRleHR1cmUpOiB2b2lkIHtcbiAgICAgICAgaWYgKHRoaXMuY3VycmVudCAhPT0gdikge1xuICAgICAgICAgICAgY29uc3QgZ2wgPSB0aGlzLmNvbnRleHQuZ2w7XG4gICAgICAgICAgICBnbC5iaW5kVGV4dHVyZShnbC5URVhUVVJFXzJELCB2KTtcbiAgICAgICAgICAgIHRoaXMuY3VycmVudCA9IHY7XG4gICAgICAgIH1cbiAgICB9XG59XG5cbmV4cG9ydCBjbGFzcyBCaW5kVmVydGV4QnVmZmVyIGltcGxlbWVudHMgVmFsdWU8P1dlYkdMQnVmZmVyPiB7XG4gICAgY29udGV4dDogQ29udGV4dDtcbiAgICBjdXJyZW50OiA/V2ViR0xCdWZmZXI7XG5cbiAgICBjb25zdHJ1Y3Rvcihjb250ZXh0OiBDb250ZXh0KSB7XG4gICAgICAgIHRoaXMuY29udGV4dCA9IGNvbnRleHQ7XG4gICAgICAgIHRoaXMuY3VycmVudCA9IG51bGw7XG4gICAgfVxuXG4gICAgZ2V0KCk6ID9XZWJHTEJ1ZmZlciB7IHJldHVybiB0aGlzLmN1cnJlbnQ7IH1cblxuICAgIHNldCh2OiA/V2ViR0xCdWZmZXIpOiB2b2lkIHtcbiAgICAgICAgaWYgKHRoaXMuY3VycmVudCAhPT0gdikge1xuICAgICAgICAgICAgY29uc3QgZ2wgPSB0aGlzLmNvbnRleHQuZ2w7XG4gICAgICAgICAgICBnbC5iaW5kQnVmZmVyKGdsLkFSUkFZX0JVRkZFUiwgdik7XG4gICAgICAgICAgICB0aGlzLmN1cnJlbnQgPSB2O1xuICAgICAgICB9XG4gICAgfVxufVxuXG5leHBvcnQgY2xhc3MgQmluZEVsZW1lbnRCdWZmZXIgaW1wbGVtZW50cyBWYWx1ZTw/V2ViR0xCdWZmZXI+IHtcbiAgICBjb250ZXh0OiBDb250ZXh0O1xuICAgIGN1cnJlbnQ6ID9XZWJHTEJ1ZmZlcjtcblxuICAgIGNvbnN0cnVjdG9yKGNvbnRleHQ6IENvbnRleHQpIHtcbiAgICAgICAgdGhpcy5jb250ZXh0ID0gY29udGV4dDtcbiAgICAgICAgdGhpcy5jdXJyZW50ID0gbnVsbDtcbiAgICB9XG5cbiAgICBnZXQoKTogP1dlYkdMQnVmZmVyIHsgcmV0dXJuIHRoaXMuY3VycmVudDsgfVxuXG4gICAgc2V0KHY6ID9XZWJHTEJ1ZmZlcik6IHZvaWQge1xuICAgICAgICAvLyBBbHdheXMgcmViaW5kXG4gICAgICAgIGNvbnN0IGdsID0gdGhpcy5jb250ZXh0LmdsO1xuICAgICAgICBnbC5iaW5kQnVmZmVyKGdsLkVMRU1FTlRfQVJSQVlfQlVGRkVSLCB2KTtcbiAgICAgICAgdGhpcy5jdXJyZW50ID0gdjtcbiAgICB9XG59XG5cbmV4cG9ydCBjbGFzcyBCaW5kVmVydGV4QXJyYXlPRVMgaW1wbGVtZW50cyBWYWx1ZTxhbnk+IHtcbiAgICBjb250ZXh0OiBDb250ZXh0O1xuICAgIGN1cnJlbnQ6IGFueTtcblxuICAgIGNvbnN0cnVjdG9yKGNvbnRleHQ6IENvbnRleHQpIHtcbiAgICAgICAgdGhpcy5jb250ZXh0ID0gY29udGV4dDtcbiAgICAgICAgdGhpcy5jdXJyZW50ID0gbnVsbDtcbiAgICB9XG5cbiAgICBnZXQoKTogYW55IHsgcmV0dXJuIHRoaXMuY3VycmVudDsgfVxuXG4gICAgc2V0KHY6IGFueSk6IHZvaWQge1xuICAgICAgICBpZiAodGhpcy5jdXJyZW50ICE9PSB2ICYmIHRoaXMuY29udGV4dC5leHRWZXJ0ZXhBcnJheU9iamVjdCkge1xuICAgICAgICAgICAgdGhpcy5jb250ZXh0LmV4dFZlcnRleEFycmF5T2JqZWN0LmJpbmRWZXJ0ZXhBcnJheU9FUyh2KTtcbiAgICAgICAgICAgIHRoaXMuY3VycmVudCA9IHY7XG4gICAgICAgIH1cbiAgICB9XG59XG5cbmV4cG9ydCBjbGFzcyBQaXhlbFN0b3JlVW5wYWNrIGltcGxlbWVudHMgVmFsdWU8bnVtYmVyPiB7XG4gICAgY29udGV4dDogQ29udGV4dDtcbiAgICBjdXJyZW50OiBudW1iZXI7XG5cbiAgICBjb25zdHJ1Y3Rvcihjb250ZXh0OiBDb250ZXh0KSB7XG4gICAgICAgIHRoaXMuY29udGV4dCA9IGNvbnRleHQ7XG4gICAgICAgIHRoaXMuY3VycmVudCA9IDQ7XG4gICAgfVxuXG4gICAgZ2V0KCk6IG51bWJlciB7IHJldHVybiB0aGlzLmN1cnJlbnQ7IH1cblxuICAgIHNldCh2OiBudW1iZXIpOiB2b2lkIHtcbiAgICAgICAgaWYgKHRoaXMuY3VycmVudCAhPT0gdikge1xuICAgICAgICAgICAgY29uc3QgZ2wgPSB0aGlzLmNvbnRleHQuZ2w7XG4gICAgICAgICAgICBnbC5waXhlbFN0b3JlaShnbC5VTlBBQ0tfQUxJR05NRU5ULCB2KTtcbiAgICAgICAgICAgIHRoaXMuY3VycmVudCA9IHY7XG4gICAgICAgIH1cbiAgICB9XG59XG5cbmV4cG9ydCBjbGFzcyBQaXhlbFN0b3JlVW5wYWNrUHJlbXVsdGlwbHlBbHBoYSBpbXBsZW1lbnRzIFZhbHVlPGJvb2xlYW4+IHtcbiAgICBjb250ZXh0OiBDb250ZXh0O1xuICAgIGN1cnJlbnQ6IGJvb2xlYW47XG5cbiAgICBjb25zdHJ1Y3Rvcihjb250ZXh0OiBDb250ZXh0KSB7XG4gICAgICAgIHRoaXMuY29udGV4dCA9IGNvbnRleHQ7XG4gICAgICAgIHRoaXMuY3VycmVudCA9IGZhbHNlO1xuICAgIH1cblxuICAgIGdldCgpOiBib29sZWFuIHsgcmV0dXJuIHRoaXMuY3VycmVudDsgfVxuXG4gICAgc2V0KHY6IGJvb2xlYW4pOiB2b2lkIHtcbiAgICAgICAgaWYgKHRoaXMuY3VycmVudCAhPT0gdikge1xuICAgICAgICAgICAgY29uc3QgZ2wgPSB0aGlzLmNvbnRleHQuZ2w7XG4gICAgICAgICAgICBnbC5waXhlbFN0b3JlaShnbC5VTlBBQ0tfUFJFTVVMVElQTFlfQUxQSEFfV0VCR0wsICh2OiBhbnkpKTtcbiAgICAgICAgICAgIHRoaXMuY3VycmVudCA9IHY7XG4gICAgICAgIH1cbiAgICB9XG59XG5cbi8qKlxuICogRnJhbWVidWZmZXIgdmFsdWVzXG4gKiBAcHJpdmF0ZVxuICovXG5leHBvcnQgY2xhc3MgRnJhbWVidWZmZXJWYWx1ZTxUPiB7XG4gICAgY29udGV4dDogQ29udGV4dDtcbiAgICBwYXJlbnQ6IFdlYkdMRnJhbWVidWZmZXI7XG4gICAgY3VycmVudDogP1Q7XG5cbiAgICBjb25zdHJ1Y3Rvcihjb250ZXh0OiBDb250ZXh0LCBwYXJlbnQ6IFdlYkdMRnJhbWVidWZmZXIpIHtcbiAgICAgICAgdGhpcy5jb250ZXh0ID0gY29udGV4dDtcbiAgICAgICAgdGhpcy5jdXJyZW50ID0gbnVsbDtcbiAgICAgICAgdGhpcy5wYXJlbnQgPSBwYXJlbnQ7XG4gICAgfVxuXG4gICAgZ2V0KCk6ID9UIHsgcmV0dXJuIHRoaXMuY3VycmVudDsgfVxufVxuXG5leHBvcnQgY2xhc3MgQ29sb3JBdHRhY2htZW50IGV4dGVuZHMgRnJhbWVidWZmZXJWYWx1ZTw/V2ViR0xUZXh0dXJlPiBpbXBsZW1lbnRzIFZhbHVlPD9XZWJHTFRleHR1cmU+IHtcbiAgICBkaXJ0eTogYm9vbGVhbjtcblxuICAgIGNvbnN0cnVjdG9yKGNvbnRleHQ6IENvbnRleHQsIHBhcmVudDogV2ViR0xGcmFtZWJ1ZmZlcikge1xuICAgICAgICBzdXBlcihjb250ZXh0LCBwYXJlbnQpO1xuICAgICAgICB0aGlzLmRpcnR5ID0gZmFsc2U7XG4gICAgfVxuXG4gICAgc2V0KHY6ID9XZWJHTFRleHR1cmUpOiB2b2lkIHtcbiAgICAgICAgaWYgKHRoaXMuZGlydHkgfHwgdGhpcy5jdXJyZW50ICE9PSB2KSB7XG4gICAgICAgICAgICBjb25zdCBnbCA9IHRoaXMuY29udGV4dC5nbDtcbiAgICAgICAgICAgIHRoaXMuY29udGV4dC5iaW5kRnJhbWVidWZmZXIuc2V0KHRoaXMucGFyZW50KTtcbiAgICAgICAgICAgIC8vIG5vdGU6IGl0J3MgcG9zc2libGUgdG8gYXR0YWNoIGEgcmVuZGVyYnVmZmVyIHRvIHRoZSBjb2xvclxuICAgICAgICAgICAgLy8gYXR0YWNobWVudCBwb2ludCwgYnV0IHRodXMgZmFyIE1CR0wgb25seSB1c2VzIHRleHR1cmVzIGZvciBjb2xvclxuICAgICAgICAgICAgZ2wuZnJhbWVidWZmZXJUZXh0dXJlMkQoZ2wuRlJBTUVCVUZGRVIsIGdsLkNPTE9SX0FUVEFDSE1FTlQwLCBnbC5URVhUVVJFXzJELCB2LCAwKTtcbiAgICAgICAgICAgIHRoaXMuY3VycmVudCA9IHY7XG4gICAgICAgICAgICB0aGlzLmRpcnR5ID0gZmFsc2U7XG4gICAgICAgIH1cbiAgICB9XG5cbiAgICBzZXREaXJ0eSgpIHtcbiAgICAgICAgdGhpcy5kaXJ0eSA9IHRydWU7XG4gICAgfVxufVxuXG5leHBvcnQgY2xhc3MgRGVwdGhBdHRhY2htZW50IGV4dGVuZHMgRnJhbWVidWZmZXJWYWx1ZTw/V2ViR0xSZW5kZXJidWZmZXI+IGltcGxlbWVudHMgVmFsdWU8P1dlYkdMUmVuZGVyYnVmZmVyPiB7XG4gICAgc2V0KHY6ID9XZWJHTFJlbmRlcmJ1ZmZlcik6IHZvaWQge1xuICAgICAgICBpZiAodGhpcy5jdXJyZW50ICE9PSB2KSB7XG4gICAgICAgICAgICBjb25zdCBnbCA9IHRoaXMuY29udGV4dC5nbDtcbiAgICAgICAgICAgIHRoaXMuY29udGV4dC5iaW5kRnJhbWVidWZmZXIuc2V0KHRoaXMucGFyZW50KTtcbiAgICAgICAgICAgIC8vIG5vdGU6IGl0J3MgcG9zc2libGUgdG8gYXR0YWNoIGEgdGV4dHVyZSB0byB0aGUgZGVwdGggYXR0YWNobWVudFxuICAgICAgICAgICAgLy8gcG9pbnQsIGJ1dCB0aHVzIGZhciBNQkdMIG9ubHkgdXNlcyByZW5kZXJidWZmZXJzIGZvciBkZXB0aFxuICAgICAgICAgICAgZ2wuZnJhbWVidWZmZXJSZW5kZXJidWZmZXIoZ2wuRlJBTUVCVUZGRVIsIGdsLkRFUFRIX0FUVEFDSE1FTlQsIGdsLlJFTkRFUkJVRkZFUiwgdik7XG4gICAgICAgICAgICB0aGlzLmN1cnJlbnQgPSB2O1xuICAgICAgICB9XG4gICAgfVxufVxuIiwiLy8gQGZsb3dcbmltcG9ydCB7IENvbG9yQXR0YWNobWVudCwgRGVwdGhBdHRhY2htZW50IH0gZnJvbSAnLi92YWx1ZSc7XG5cbmltcG9ydCB0eXBlIENvbnRleHQgZnJvbSAnLi9jb250ZXh0JztcblxuY2xhc3MgRnJhbWVidWZmZXIge1xuICAgIGNvbnRleHQ6IENvbnRleHQ7XG4gICAgd2lkdGg6IG51bWJlcjtcbiAgICBoZWlnaHQ6IG51bWJlcjtcbiAgICBmcmFtZWJ1ZmZlcjogV2ViR0xGcmFtZWJ1ZmZlcjtcbiAgICBjb2xvckF0dGFjaG1lbnQ6IENvbG9yQXR0YWNobWVudDtcbiAgICBkZXB0aEF0dGFjaG1lbnQ6IERlcHRoQXR0YWNobWVudDtcblxuICAgIGNvbnN0cnVjdG9yKGNvbnRleHQ6IENvbnRleHQsIHdpZHRoOiBudW1iZXIsIGhlaWdodDogbnVtYmVyKSB7XG4gICAgICAgIHRoaXMuY29udGV4dCA9IGNvbnRleHQ7XG4gICAgICAgIHRoaXMud2lkdGggPSB3aWR0aDtcbiAgICAgICAgdGhpcy5oZWlnaHQgPSBoZWlnaHQ7XG4gICAgICAgIGNvbnN0IGdsID0gY29udGV4dC5nbDtcbiAgICAgICAgY29uc3QgZmJvID0gdGhpcy5mcmFtZWJ1ZmZlciA9IGdsLmNyZWF0ZUZyYW1lYnVmZmVyKCk7XG5cbiAgICAgICAgdGhpcy5jb2xvckF0dGFjaG1lbnQgPSBuZXcgQ29sb3JBdHRhY2htZW50KGNvbnRleHQsIGZibyk7XG4gICAgICAgIHRoaXMuZGVwdGhBdHRhY2htZW50ID0gbmV3IERlcHRoQXR0YWNobWVudChjb250ZXh0LCBmYm8pO1xuICAgIH1cblxuICAgIGRlc3Ryb3koKSB7XG4gICAgICAgIGNvbnN0IGdsID0gdGhpcy5jb250ZXh0LmdsO1xuXG4gICAgICAgIGNvbnN0IHRleHR1cmUgPSB0aGlzLmNvbG9yQXR0YWNobWVudC5nZXQoKTtcbiAgICAgICAgaWYgKHRleHR1cmUpIGdsLmRlbGV0ZVRleHR1cmUodGV4dHVyZSk7XG5cbiAgICAgICAgY29uc3QgcmVuZGVyYnVmZmVyID0gdGhpcy5kZXB0aEF0dGFjaG1lbnQuZ2V0KCk7XG4gICAgICAgIGlmIChyZW5kZXJidWZmZXIpIGdsLmRlbGV0ZVJlbmRlcmJ1ZmZlcihyZW5kZXJidWZmZXIpO1xuXG4gICAgICAgIGdsLmRlbGV0ZUZyYW1lYnVmZmVyKHRoaXMuZnJhbWVidWZmZXIpO1xuICAgIH1cbn1cblxuZXhwb3J0IGRlZmF1bHQgRnJhbWVidWZmZXI7XG4iLCIvLyBAZmxvd1xuaW1wb3J0IHR5cGUgeyBEZXB0aEZ1bmNUeXBlLCBEZXB0aE1hc2tUeXBlLCBEZXB0aFJhbmdlVHlwZSB9IGZyb20gJy4vdHlwZXMnO1xuXG5jb25zdCBBTFdBWVMgPSAweDAyMDc7XG5cbmNsYXNzIERlcHRoTW9kZSB7XG4gICAgZnVuYzogRGVwdGhGdW5jVHlwZTtcbiAgICBtYXNrOiBEZXB0aE1hc2tUeXBlO1xuICAgIHJhbmdlOiBEZXB0aFJhbmdlVHlwZTtcblxuICAgIC8vIERlcHRoTWFzayBlbnVtc1xuICAgIHN0YXRpYyBSZWFkT25seTogYm9vbGVhbjtcbiAgICBzdGF0aWMgUmVhZFdyaXRlOiBib29sZWFuO1xuXG4gICAgY29uc3RydWN0b3IoZGVwdGhGdW5jOiBEZXB0aEZ1bmNUeXBlLCBkZXB0aE1hc2s6IERlcHRoTWFza1R5cGUsIGRlcHRoUmFuZ2U6IERlcHRoUmFuZ2VUeXBlKSB7XG4gICAgICAgIHRoaXMuZnVuYyA9IGRlcHRoRnVuYztcbiAgICAgICAgdGhpcy5tYXNrID0gZGVwdGhNYXNrO1xuICAgICAgICB0aGlzLnJhbmdlID0gZGVwdGhSYW5nZTtcbiAgICB9XG5cbiAgICBzdGF0aWMgZGlzYWJsZWQ6ICRSZWFkT25seTxEZXB0aE1vZGU+O1xufVxuXG5EZXB0aE1vZGUuUmVhZE9ubHkgPSBmYWxzZTtcbkRlcHRoTW9kZS5SZWFkV3JpdGUgPSB0cnVlO1xuXG5EZXB0aE1vZGUuZGlzYWJsZWQgPSBuZXcgRGVwdGhNb2RlKEFMV0FZUywgRGVwdGhNb2RlLlJlYWRPbmx5LCBbMCwgMV0pO1xuXG5leHBvcnQgZGVmYXVsdCBEZXB0aE1vZGU7XG4iLCIvLyBAZmxvd1xuaW1wb3J0IHR5cGUgeyBTdGVuY2lsT3BDb25zdGFudCwgU3RlbmNpbFRlc3QgfSBmcm9tICcuL3R5cGVzJztcblxuY29uc3QgQUxXQVlTID0gMHgwMjA3O1xuY29uc3QgS0VFUCA9IDB4MUUwMDtcblxuY2xhc3MgU3RlbmNpbE1vZGUge1xuICAgIHRlc3Q6IFN0ZW5jaWxUZXN0O1xuICAgIHJlZjogbnVtYmVyO1xuICAgIG1hc2s6IG51bWJlcjtcbiAgICBmYWlsOiBTdGVuY2lsT3BDb25zdGFudDtcbiAgICBkZXB0aEZhaWw6IFN0ZW5jaWxPcENvbnN0YW50O1xuICAgIHBhc3M6IFN0ZW5jaWxPcENvbnN0YW50O1xuXG4gICAgY29uc3RydWN0b3IodGVzdDogU3RlbmNpbFRlc3QsIHJlZjogbnVtYmVyLCBtYXNrOiBudW1iZXIsIGZhaWw6IFN0ZW5jaWxPcENvbnN0YW50LFxuICAgICAgICBkZXB0aEZhaWw6IFN0ZW5jaWxPcENvbnN0YW50LCBwYXNzOiBTdGVuY2lsT3BDb25zdGFudCkge1xuICAgICAgICB0aGlzLnRlc3QgPSB0ZXN0O1xuICAgICAgICB0aGlzLnJlZiA9IHJlZjtcbiAgICAgICAgdGhpcy5tYXNrID0gbWFzaztcbiAgICAgICAgdGhpcy5mYWlsID0gZmFpbDtcbiAgICAgICAgdGhpcy5kZXB0aEZhaWwgPSBkZXB0aEZhaWw7XG4gICAgICAgIHRoaXMucGFzcyA9IHBhc3M7XG4gICAgfVxuXG4gICAgc3RhdGljIGRpc2FibGVkOiAkUmVhZE9ubHk8U3RlbmNpbE1vZGU+O1xufVxuXG5TdGVuY2lsTW9kZS5kaXNhYmxlZCA9IG5ldyBTdGVuY2lsTW9kZSh7IGZ1bmM6IEFMV0FZUywgbWFzazogMCB9LCAwLCAwLCBLRUVQLCBLRUVQLCBLRUVQKTtcblxuZXhwb3J0IGRlZmF1bHQgU3RlbmNpbE1vZGU7XG4iLCIvLyBAZmxvd1xuaW1wb3J0IENvbG9yIGZyb20gJy4uL3N0eWxlLXNwZWMvdXRpbC9jb2xvcic7XG5cbmltcG9ydCB0eXBlIHtCbGVuZEZ1bmNUeXBlLCBDb2xvck1hc2tUeXBlfSBmcm9tICcuL3R5cGVzJztcblxuY29uc3QgWkVSTyA9IDB4MDAwMDtcbmNvbnN0IE9ORSA9IDB4MDAwMTtcbmNvbnN0IE9ORV9NSU5VU19TUkNfQUxQSEEgPSAweDAzMDM7XG5cbmNsYXNzIENvbG9yTW9kZSB7XG4gICAgYmxlbmRGdW5jdGlvbjogQmxlbmRGdW5jVHlwZTtcbiAgICBibGVuZENvbG9yOiBDb2xvcjtcbiAgICBtYXNrOiBDb2xvck1hc2tUeXBlO1xuXG4gICAgY29uc3RydWN0b3IoYmxlbmRGdW5jdGlvbjogQmxlbmRGdW5jVHlwZSwgYmxlbmRDb2xvcjogQ29sb3IsIG1hc2s6IENvbG9yTWFza1R5cGUpIHtcbiAgICAgICAgdGhpcy5ibGVuZEZ1bmN0aW9uID0gYmxlbmRGdW5jdGlvbjtcbiAgICAgICAgdGhpcy5ibGVuZENvbG9yID0gYmxlbmRDb2xvcjtcbiAgICAgICAgdGhpcy5tYXNrID0gbWFzaztcbiAgICB9XG5cbiAgICBzdGF0aWMgUmVwbGFjZTogQmxlbmRGdW5jVHlwZTtcblxuICAgIHN0YXRpYyBkaXNhYmxlZDogJFJlYWRPbmx5PENvbG9yTW9kZT47XG4gICAgc3RhdGljIHVuYmxlbmRlZDogJFJlYWRPbmx5PENvbG9yTW9kZT47XG4gICAgc3RhdGljIGFscGhhQmxlbmRlZDogJFJlYWRPbmx5PENvbG9yTW9kZT47XG59XG5cbkNvbG9yTW9kZS5SZXBsYWNlID0gW09ORSwgWkVST107XG5cbkNvbG9yTW9kZS5kaXNhYmxlZCA9IG5ldyBDb2xvck1vZGUoQ29sb3JNb2RlLlJlcGxhY2UsIENvbG9yLnRyYW5zcGFyZW50LCBbZmFsc2UsIGZhbHNlLCBmYWxzZSwgZmFsc2VdKTtcbkNvbG9yTW9kZS51bmJsZW5kZWQgPSBuZXcgQ29sb3JNb2RlKENvbG9yTW9kZS5SZXBsYWNlLCBDb2xvci50cmFuc3BhcmVudCwgW3RydWUsIHRydWUsIHRydWUsIHRydWVdKTtcbkNvbG9yTW9kZS5hbHBoYUJsZW5kZWQgPSBuZXcgQ29sb3JNb2RlKFtPTkUsIE9ORV9NSU5VU19TUkNfQUxQSEFdLCBDb2xvci50cmFuc3BhcmVudCwgW3RydWUsIHRydWUsIHRydWUsIHRydWVdKTtcblxuZXhwb3J0IGRlZmF1bHQgQ29sb3JNb2RlO1xuIiwiLy8gQGZsb3dcbmltcG9ydCBJbmRleEJ1ZmZlciBmcm9tICcuL2luZGV4X2J1ZmZlcic7XG5cbmltcG9ydCBWZXJ0ZXhCdWZmZXIgZnJvbSAnLi92ZXJ0ZXhfYnVmZmVyJztcbmltcG9ydCBGcmFtZWJ1ZmZlciBmcm9tICcuL2ZyYW1lYnVmZmVyJztcbmltcG9ydCBEZXB0aE1vZGUgZnJvbSAnLi9kZXB0aF9tb2RlJztcbmltcG9ydCBTdGVuY2lsTW9kZSBmcm9tICcuL3N0ZW5jaWxfbW9kZSc7XG5pbXBvcnQgQ29sb3JNb2RlIGZyb20gJy4vY29sb3JfbW9kZSc7XG5pbXBvcnQgeyBkZWVwRXF1YWwgfSBmcm9tICcuLi91dGlsL3V0aWwnO1xuaW1wb3J0IHsgQ2xlYXJDb2xvciwgQ2xlYXJEZXB0aCwgQ2xlYXJTdGVuY2lsLCBDb2xvck1hc2ssIERlcHRoTWFzaywgU3RlbmNpbE1hc2ssIFN0ZW5jaWxGdW5jLCBTdGVuY2lsT3AsIFN0ZW5jaWxUZXN0LCBEZXB0aFJhbmdlLCBEZXB0aFRlc3QsIERlcHRoRnVuYywgQmxlbmQsIEJsZW5kRnVuYywgQmxlbmRDb2xvciwgUHJvZ3JhbSwgQWN0aXZlVGV4dHVyZVVuaXQsIFZpZXdwb3J0LCBCaW5kRnJhbWVidWZmZXIsIEJpbmRSZW5kZXJidWZmZXIsIEJpbmRUZXh0dXJlLCBCaW5kVmVydGV4QnVmZmVyLCBCaW5kRWxlbWVudEJ1ZmZlciwgQmluZFZlcnRleEFycmF5T0VTLCBQaXhlbFN0b3JlVW5wYWNrLCBQaXhlbFN0b3JlVW5wYWNrUHJlbXVsdGlwbHlBbHBoYSB9IGZyb20gJy4vdmFsdWUnO1xuXG5cbmltcG9ydCB0eXBlIHtUcmlhbmdsZUluZGV4QXJyYXksIExpbmVJbmRleEFycmF5LCBMaW5lU3RyaXBJbmRleEFycmF5fSBmcm9tICcuLi9kYXRhL2luZGV4X2FycmF5X3R5cGUnO1xuaW1wb3J0IHR5cGUge1xuICAgIFN0cnVjdEFycmF5LFxuICAgIFN0cnVjdEFycmF5TWVtYmVyXG59IGZyb20gJy4uL3V0aWwvc3RydWN0X2FycmF5JztcbmltcG9ydCB0eXBlIENvbG9yIGZyb20gJy4uL3N0eWxlLXNwZWMvdXRpbC9jb2xvcic7XG5cbnR5cGUgQ2xlYXJBcmdzID0ge1xuICAgIGNvbG9yPzogQ29sb3IsXG4gICAgZGVwdGg/OiBudW1iZXIsXG4gICAgc3RlbmNpbD86IG51bWJlclxufTtcblxuXG5jbGFzcyBDb250ZXh0IHtcbiAgICBnbDogV2ViR0xSZW5kZXJpbmdDb250ZXh0O1xuICAgIGV4dFZlcnRleEFycmF5T2JqZWN0OiBhbnk7XG4gICAgY3VycmVudE51bUF0dHJpYnV0ZXM6ID9udW1iZXI7XG5cbiAgICBjbGVhckNvbG9yOiBDbGVhckNvbG9yO1xuICAgIGNsZWFyRGVwdGg6IENsZWFyRGVwdGg7XG4gICAgY2xlYXJTdGVuY2lsOiBDbGVhclN0ZW5jaWw7XG4gICAgY29sb3JNYXNrOiBDb2xvck1hc2s7XG4gICAgZGVwdGhNYXNrOiBEZXB0aE1hc2s7XG4gICAgc3RlbmNpbE1hc2s6IFN0ZW5jaWxNYXNrO1xuICAgIHN0ZW5jaWxGdW5jOiBTdGVuY2lsRnVuYztcbiAgICBzdGVuY2lsT3A6IFN0ZW5jaWxPcDtcbiAgICBzdGVuY2lsVGVzdDogU3RlbmNpbFRlc3Q7XG4gICAgZGVwdGhSYW5nZTogRGVwdGhSYW5nZTtcbiAgICBkZXB0aFRlc3Q6IERlcHRoVGVzdDtcbiAgICBkZXB0aEZ1bmM6IERlcHRoRnVuYztcbiAgICBibGVuZDogQmxlbmQ7XG4gICAgYmxlbmRGdW5jOiBCbGVuZEZ1bmM7XG4gICAgYmxlbmRDb2xvcjogQmxlbmRDb2xvcjtcbiAgICBwcm9ncmFtOiBQcm9ncmFtO1xuICAgIGFjdGl2ZVRleHR1cmU6IEFjdGl2ZVRleHR1cmVVbml0O1xuICAgIHZpZXdwb3J0OiBWaWV3cG9ydDtcbiAgICBiaW5kRnJhbWVidWZmZXI6IEJpbmRGcmFtZWJ1ZmZlcjtcbiAgICBiaW5kUmVuZGVyYnVmZmVyOiBCaW5kUmVuZGVyYnVmZmVyO1xuICAgIGJpbmRUZXh0dXJlOiBCaW5kVGV4dHVyZTtcbiAgICBiaW5kVmVydGV4QnVmZmVyOiBCaW5kVmVydGV4QnVmZmVyO1xuICAgIGJpbmRFbGVtZW50QnVmZmVyOiBCaW5kRWxlbWVudEJ1ZmZlcjtcbiAgICBiaW5kVmVydGV4QXJyYXlPRVM6IEJpbmRWZXJ0ZXhBcnJheU9FUztcbiAgICBwaXhlbFN0b3JlVW5wYWNrOiBQaXhlbFN0b3JlVW5wYWNrO1xuICAgIHBpeGVsU3RvcmVVbnBhY2tQcmVtdWx0aXBseUFscGhhOiBQaXhlbFN0b3JlVW5wYWNrUHJlbXVsdGlwbHlBbHBoYTtcblxuICAgIGV4dFRleHR1cmVGaWx0ZXJBbmlzb3Ryb3BpYzogYW55O1xuICAgIGV4dFRleHR1cmVGaWx0ZXJBbmlzb3Ryb3BpY01heDogYW55O1xuICAgIGV4dFRleHR1cmVIYWxmRmxvYXQ6IGFueTtcblxuICAgIGNvbnN0cnVjdG9yKGdsOiBXZWJHTFJlbmRlcmluZ0NvbnRleHQpIHtcbiAgICAgICAgdGhpcy5nbCA9IGdsO1xuICAgICAgICB0aGlzLmV4dFZlcnRleEFycmF5T2JqZWN0ID0gdGhpcy5nbC5nZXRFeHRlbnNpb24oJ09FU192ZXJ0ZXhfYXJyYXlfb2JqZWN0Jyk7XG5cbiAgICAgICAgdGhpcy5jbGVhckNvbG9yID0gbmV3IENsZWFyQ29sb3IodGhpcyk7XG4gICAgICAgIHRoaXMuY2xlYXJEZXB0aCA9IG5ldyBDbGVhckRlcHRoKHRoaXMpO1xuICAgICAgICB0aGlzLmNsZWFyU3RlbmNpbCA9IG5ldyBDbGVhclN0ZW5jaWwodGhpcyk7XG4gICAgICAgIHRoaXMuY29sb3JNYXNrID0gbmV3IENvbG9yTWFzayh0aGlzKTtcbiAgICAgICAgdGhpcy5kZXB0aE1hc2sgPSBuZXcgRGVwdGhNYXNrKHRoaXMpO1xuICAgICAgICB0aGlzLnN0ZW5jaWxNYXNrID0gbmV3IFN0ZW5jaWxNYXNrKHRoaXMpO1xuICAgICAgICB0aGlzLnN0ZW5jaWxGdW5jID0gbmV3IFN0ZW5jaWxGdW5jKHRoaXMpO1xuICAgICAgICB0aGlzLnN0ZW5jaWxPcCA9IG5ldyBTdGVuY2lsT3AodGhpcyk7XG4gICAgICAgIHRoaXMuc3RlbmNpbFRlc3QgPSBuZXcgU3RlbmNpbFRlc3QodGhpcyk7XG4gICAgICAgIHRoaXMuZGVwdGhSYW5nZSA9IG5ldyBEZXB0aFJhbmdlKHRoaXMpO1xuICAgICAgICB0aGlzLmRlcHRoVGVzdCA9IG5ldyBEZXB0aFRlc3QodGhpcyk7XG4gICAgICAgIHRoaXMuZGVwdGhGdW5jID0gbmV3IERlcHRoRnVuYyh0aGlzKTtcbiAgICAgICAgdGhpcy5ibGVuZCA9IG5ldyBCbGVuZCh0aGlzKTtcbiAgICAgICAgdGhpcy5ibGVuZEZ1bmMgPSBuZXcgQmxlbmRGdW5jKHRoaXMpO1xuICAgICAgICB0aGlzLmJsZW5kQ29sb3IgPSBuZXcgQmxlbmRDb2xvcih0aGlzKTtcbiAgICAgICAgdGhpcy5wcm9ncmFtID0gbmV3IFByb2dyYW0odGhpcyk7XG4gICAgICAgIHRoaXMuYWN0aXZlVGV4dHVyZSA9IG5ldyBBY3RpdmVUZXh0dXJlVW5pdCh0aGlzKTtcbiAgICAgICAgdGhpcy52aWV3cG9ydCA9IG5ldyBWaWV3cG9ydCh0aGlzKTtcbiAgICAgICAgdGhpcy5iaW5kRnJhbWVidWZmZXIgPSBuZXcgQmluZEZyYW1lYnVmZmVyKHRoaXMpO1xuICAgICAgICB0aGlzLmJpbmRSZW5kZXJidWZmZXIgPSBuZXcgQmluZFJlbmRlcmJ1ZmZlcih0aGlzKTtcbiAgICAgICAgdGhpcy5iaW5kVGV4dHVyZSA9IG5ldyBCaW5kVGV4dHVyZSh0aGlzKTtcbiAgICAgICAgdGhpcy5iaW5kVmVydGV4QnVmZmVyID0gbmV3IEJpbmRWZXJ0ZXhCdWZmZXIodGhpcyk7XG4gICAgICAgIHRoaXMuYmluZEVsZW1lbnRCdWZmZXIgPSBuZXcgQmluZEVsZW1lbnRCdWZmZXIodGhpcyk7XG4gICAgICAgIHRoaXMuYmluZFZlcnRleEFycmF5T0VTID0gdGhpcy5leHRWZXJ0ZXhBcnJheU9iamVjdCAmJiBuZXcgQmluZFZlcnRleEFycmF5T0VTKHRoaXMpO1xuICAgICAgICB0aGlzLnBpeGVsU3RvcmVVbnBhY2sgPSBuZXcgUGl4ZWxTdG9yZVVucGFjayh0aGlzKTtcbiAgICAgICAgdGhpcy5waXhlbFN0b3JlVW5wYWNrUHJlbXVsdGlwbHlBbHBoYSA9IG5ldyBQaXhlbFN0b3JlVW5wYWNrUHJlbXVsdGlwbHlBbHBoYSh0aGlzKTtcblxuICAgICAgICB0aGlzLmV4dFRleHR1cmVGaWx0ZXJBbmlzb3Ryb3BpYyA9IChcbiAgICAgICAgICAgIGdsLmdldEV4dGVuc2lvbignRVhUX3RleHR1cmVfZmlsdGVyX2FuaXNvdHJvcGljJykgfHxcbiAgICAgICAgICAgIGdsLmdldEV4dGVuc2lvbignTU9aX0VYVF90ZXh0dXJlX2ZpbHRlcl9hbmlzb3Ryb3BpYycpIHx8XG4gICAgICAgICAgICBnbC5nZXRFeHRlbnNpb24oJ1dFQktJVF9FWFRfdGV4dHVyZV9maWx0ZXJfYW5pc290cm9waWMnKVxuICAgICAgICApO1xuICAgICAgICBpZiAodGhpcy5leHRUZXh0dXJlRmlsdGVyQW5pc290cm9waWMpIHtcbiAgICAgICAgICAgIHRoaXMuZXh0VGV4dHVyZUZpbHRlckFuaXNvdHJvcGljTWF4ID0gZ2wuZ2V0UGFyYW1ldGVyKHRoaXMuZXh0VGV4dHVyZUZpbHRlckFuaXNvdHJvcGljLk1BWF9URVhUVVJFX01BWF9BTklTT1RST1BZX0VYVCk7XG4gICAgICAgIH1cblxuICAgICAgICB0aGlzLmV4dFRleHR1cmVIYWxmRmxvYXQgPSBnbC5nZXRFeHRlbnNpb24oJ09FU190ZXh0dXJlX2hhbGZfZmxvYXQnKTtcbiAgICAgICAgaWYgKHRoaXMuZXh0VGV4dHVyZUhhbGZGbG9hdCkge1xuICAgICAgICAgICAgZ2wuZ2V0RXh0ZW5zaW9uKCdPRVNfdGV4dHVyZV9oYWxmX2Zsb2F0X2xpbmVhcicpO1xuICAgICAgICB9XG5cbiAgICB9XG5cbiAgICBjcmVhdGVJbmRleEJ1ZmZlcihhcnJheTogVHJpYW5nbGVJbmRleEFycmF5IHwgTGluZUluZGV4QXJyYXkgfCBMaW5lU3RyaXBJbmRleEFycmF5LCBkeW5hbWljRHJhdz86IGJvb2xlYW4pIHtcbiAgICAgICAgcmV0dXJuIG5ldyBJbmRleEJ1ZmZlcih0aGlzLCBhcnJheSwgZHluYW1pY0RyYXcpO1xuICAgIH1cblxuICAgIGNyZWF0ZVZlcnRleEJ1ZmZlcihhcnJheTogU3RydWN0QXJyYXksIGF0dHJpYnV0ZXM6ICRSZWFkT25seUFycmF5PFN0cnVjdEFycmF5TWVtYmVyPiwgZHluYW1pY0RyYXc/OiBib29sZWFuKSB7XG4gICAgICAgIHJldHVybiBuZXcgVmVydGV4QnVmZmVyKHRoaXMsIGFycmF5LCBhdHRyaWJ1dGVzLCBkeW5hbWljRHJhdyk7XG4gICAgfVxuXG4gICAgY3JlYXRlUmVuZGVyYnVmZmVyKHN0b3JhZ2VGb3JtYXQ6IG51bWJlciwgd2lkdGg6IG51bWJlciwgaGVpZ2h0OiBudW1iZXIpIHtcbiAgICAgICAgY29uc3QgZ2wgPSB0aGlzLmdsO1xuXG4gICAgICAgIGNvbnN0IHJibyA9IGdsLmNyZWF0ZVJlbmRlcmJ1ZmZlcigpO1xuICAgICAgICB0aGlzLmJpbmRSZW5kZXJidWZmZXIuc2V0KHJibyk7XG4gICAgICAgIGdsLnJlbmRlcmJ1ZmZlclN0b3JhZ2UoZ2wuUkVOREVSQlVGRkVSLCBzdG9yYWdlRm9ybWF0LCB3aWR0aCwgaGVpZ2h0KTtcbiAgICAgICAgdGhpcy5iaW5kUmVuZGVyYnVmZmVyLnNldChudWxsKTtcblxuICAgICAgICByZXR1cm4gcmJvO1xuICAgIH1cblxuICAgIGNyZWF0ZUZyYW1lYnVmZmVyKHdpZHRoOiBudW1iZXIsIGhlaWdodDogbnVtYmVyKSB7XG4gICAgICAgIHJldHVybiBuZXcgRnJhbWVidWZmZXIodGhpcywgd2lkdGgsIGhlaWdodCk7XG4gICAgfVxuXG4gICAgY2xlYXIoe2NvbG9yLCBkZXB0aH06IENsZWFyQXJncykge1xuICAgICAgICBjb25zdCBnbCA9IHRoaXMuZ2w7XG4gICAgICAgIGxldCBtYXNrID0gMDtcblxuICAgICAgICBpZiAoY29sb3IpIHtcbiAgICAgICAgICAgIG1hc2sgfD0gZ2wuQ09MT1JfQlVGRkVSX0JJVDtcbiAgICAgICAgICAgIHRoaXMuY2xlYXJDb2xvci5zZXQoY29sb3IpO1xuICAgICAgICAgICAgdGhpcy5jb2xvck1hc2suc2V0KFt0cnVlLCB0cnVlLCB0cnVlLCB0cnVlXSk7XG4gICAgICAgIH1cblxuICAgICAgICBpZiAodHlwZW9mIGRlcHRoICE9PSAndW5kZWZpbmVkJykge1xuICAgICAgICAgICAgbWFzayB8PSBnbC5ERVBUSF9CVUZGRVJfQklUO1xuICAgICAgICAgICAgdGhpcy5jbGVhckRlcHRoLnNldChkZXB0aCk7XG4gICAgICAgICAgICB0aGlzLmRlcHRoTWFzay5zZXQodHJ1ZSk7XG4gICAgICAgIH1cblxuICAgICAgICAvLyBTZWUgbm90ZSBpbiBQYWludGVyI2NsZWFyU3RlbmNpbDogaW1wbGVtZW50IHRoaXMgdGhlIGVhc3kgd2F5IG9uY2UgR1BVIGJ1Zy93b3JrYXJvdW5kIGlzIGZpeGVkIHVwc3RyZWFtXG4gICAgICAgIC8vIGlmICh0eXBlb2Ygc3RlbmNpbCAhPT0gJ3VuZGVmaW5lZCcpIHtcbiAgICAgICAgLy8gICAgIG1hc2sgfD0gZ2wuU1RFTkNJTF9CVUZGRVJfQklUO1xuICAgICAgICAvLyAgICAgdGhpcy5jbGVhclN0ZW5jaWwuc2V0KHN0ZW5jaWwpO1xuICAgICAgICAvLyAgICAgdGhpcy5zdGVuY2lsTWFzay5zZXQoMHhGRik7XG4gICAgICAgIC8vIH1cblxuICAgICAgICBnbC5jbGVhcihtYXNrKTtcbiAgICB9XG5cbiAgICBzZXREZXB0aE1vZGUoZGVwdGhNb2RlOiAkUmVhZE9ubHk8RGVwdGhNb2RlPikge1xuICAgICAgICBpZiAoZGVwdGhNb2RlLmZ1bmMgPT09IHRoaXMuZ2wuQUxXQVlTICYmICFkZXB0aE1vZGUubWFzaykge1xuICAgICAgICAgICAgdGhpcy5kZXB0aFRlc3Quc2V0KGZhbHNlKTtcbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgIHRoaXMuZGVwdGhUZXN0LnNldCh0cnVlKTtcbiAgICAgICAgICAgIHRoaXMuZGVwdGhGdW5jLnNldChkZXB0aE1vZGUuZnVuYyk7XG4gICAgICAgICAgICB0aGlzLmRlcHRoTWFzay5zZXQoZGVwdGhNb2RlLm1hc2spO1xuICAgICAgICAgICAgdGhpcy5kZXB0aFJhbmdlLnNldChkZXB0aE1vZGUucmFuZ2UpO1xuICAgICAgICB9XG4gICAgfVxuXG4gICAgc2V0U3RlbmNpbE1vZGUoc3RlbmNpbE1vZGU6ICRSZWFkT25seTxTdGVuY2lsTW9kZT4pIHtcbiAgICAgICAgaWYgKHN0ZW5jaWxNb2RlLnRlc3QuZnVuYyA9PT0gdGhpcy5nbC5BTFdBWVMgJiYgIXN0ZW5jaWxNb2RlLm1hc2spIHtcbiAgICAgICAgICAgIHRoaXMuc3RlbmNpbFRlc3Quc2V0KGZhbHNlKTtcbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgIHRoaXMuc3RlbmNpbFRlc3Quc2V0KHRydWUpO1xuICAgICAgICAgICAgdGhpcy5zdGVuY2lsTWFzay5zZXQoc3RlbmNpbE1vZGUubWFzayk7XG4gICAgICAgICAgICB0aGlzLnN0ZW5jaWxPcC5zZXQoW3N0ZW5jaWxNb2RlLmZhaWwsIHN0ZW5jaWxNb2RlLmRlcHRoRmFpbCwgc3RlbmNpbE1vZGUucGFzc10pO1xuICAgICAgICAgICAgdGhpcy5zdGVuY2lsRnVuYy5zZXQoe1xuICAgICAgICAgICAgICAgIGZ1bmM6IHN0ZW5jaWxNb2RlLnRlc3QuZnVuYyxcbiAgICAgICAgICAgICAgICByZWY6IHN0ZW5jaWxNb2RlLnJlZixcbiAgICAgICAgICAgICAgICBtYXNrOiBzdGVuY2lsTW9kZS50ZXN0Lm1hc2tcbiAgICAgICAgICAgIH0pO1xuICAgICAgICB9XG4gICAgfVxuXG4gICAgc2V0Q29sb3JNb2RlKGNvbG9yTW9kZTogJFJlYWRPbmx5PENvbG9yTW9kZT4pIHtcbiAgICAgICAgaWYgKGRlZXBFcXVhbChjb2xvck1vZGUuYmxlbmRGdW5jdGlvbiwgQ29sb3JNb2RlLlJlcGxhY2UpKSB7XG4gICAgICAgICAgICB0aGlzLmJsZW5kLnNldChmYWxzZSk7XG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICB0aGlzLmJsZW5kLnNldCh0cnVlKTtcbiAgICAgICAgICAgIHRoaXMuYmxlbmRGdW5jLnNldChjb2xvck1vZGUuYmxlbmRGdW5jdGlvbik7XG4gICAgICAgICAgICB0aGlzLmJsZW5kQ29sb3Iuc2V0KGNvbG9yTW9kZS5ibGVuZENvbG9yKTtcbiAgICAgICAgfVxuXG4gICAgICAgIHRoaXMuY29sb3JNYXNrLnNldChjb2xvck1vZGUubWFzayk7XG4gICAgfVxufVxuXG5leHBvcnQgZGVmYXVsdCBDb250ZXh0O1xuIiwiLy8gQGZsb3dcblxuaW1wb3J0IHsgY3JlYXRlIGFzIGNyZWF0ZVNvdXJjZSB9IGZyb20gJy4vc291cmNlJztcblxuaW1wb3J0IFRpbGUgZnJvbSAnLi90aWxlJztcbmltcG9ydCB7IEV2ZW50LCBFcnJvckV2ZW50LCBFdmVudGVkIH0gZnJvbSAnLi4vdXRpbC9ldmVudGVkJztcbmltcG9ydCBUaWxlQ2FjaGUgZnJvbSAnLi90aWxlX2NhY2hlJztcbmltcG9ydCBDb29yZGluYXRlIGZyb20gJy4uL2dlby9jb29yZGluYXRlJztcbmltcG9ydCB7IGtleXNEaWZmZXJlbmNlIH0gZnJvbSAnLi4vdXRpbC91dGlsJztcbmltcG9ydCBFWFRFTlQgZnJvbSAnLi4vZGF0YS9leHRlbnQnO1xuaW1wb3J0IENvbnRleHQgZnJvbSAnLi4vZ2wvY29udGV4dCc7XG5pbXBvcnQgUG9pbnQgZnJvbSAnQG1hcGJveC9wb2ludC1nZW9tZXRyeSc7XG5pbXBvcnQgYnJvd3NlciBmcm9tICcuLi91dGlsL2Jyb3dzZXInO1xuaW1wb3J0IHsgT3ZlcnNjYWxlZFRpbGVJRCB9IGZyb20gJy4vdGlsZV9pZCc7XG5pbXBvcnQgYXNzZXJ0IGZyb20gJ2Fzc2VydCc7XG5pbXBvcnQgU291cmNlRmVhdHVyZVN0YXRlIGZyb20gJy4vc291cmNlX3N0YXRlJztcblxuaW1wb3J0IHR5cGUge1NvdXJjZX0gZnJvbSAnLi9zb3VyY2UnO1xuaW1wb3J0IHR5cGUgTWFwIGZyb20gJy4uL3VpL21hcCc7XG5pbXBvcnQgdHlwZSBTdHlsZSBmcm9tICcuLi9zdHlsZS9zdHlsZSc7XG5pbXBvcnQgdHlwZSBEaXNwYXRjaGVyIGZyb20gJy4uL3V0aWwvZGlzcGF0Y2hlcic7XG5pbXBvcnQgdHlwZSBUcmFuc2Zvcm0gZnJvbSAnLi4vZ2VvL3RyYW5zZm9ybSc7XG5pbXBvcnQgdHlwZSB7VGlsZVN0YXRlfSBmcm9tICcuL3RpbGUnO1xuaW1wb3J0IHR5cGUge0NhbGxiYWNrfSBmcm9tICcuLi90eXBlcy9jYWxsYmFjayc7XG5pbXBvcnQgdHlwZSB7U291cmNlU3BlY2lmaWNhdGlvbn0gZnJvbSAnLi4vc3R5bGUtc3BlYy90eXBlcyc7XG5cbi8qKlxuICogYFNvdXJjZUNhY2hlYCBpcyByZXNwb25zaWJsZSBmb3JcbiAqXG4gKiAgLSBjcmVhdGluZyBhbiBpbnN0YW5jZSBvZiBgU291cmNlYFxuICogIC0gZm9yd2FyZGluZyBldmVudHMgZnJvbSBgU291cmNlYFxuICogIC0gY2FjaGluZyB0aWxlcyBsb2FkZWQgZnJvbSBhbiBpbnN0YW5jZSBvZiBgU291cmNlYFxuICogIC0gbG9hZGluZyB0aGUgdGlsZXMgbmVlZGVkIHRvIHJlbmRlciBhIGdpdmVuIHZpZXdwb3J0XG4gKiAgLSB1bmxvYWRpbmcgdGhlIGNhY2hlZCB0aWxlcyBub3QgbmVlZGVkIHRvIHJlbmRlciBhIGdpdmVuIHZpZXdwb3J0XG4gKlxuICogQHByaXZhdGVcbiAqL1xuY2xhc3MgU291cmNlQ2FjaGUgZXh0ZW5kcyBFdmVudGVkIHtcbiAgICBpZDogc3RyaW5nO1xuICAgIGRpc3BhdGNoZXI6IERpc3BhdGNoZXI7XG4gICAgbWFwOiBNYXA7XG4gICAgc3R5bGU6IFN0eWxlO1xuXG4gICAgX3NvdXJjZTogU291cmNlO1xuICAgIF9zb3VyY2VMb2FkZWQ6IGJvb2xlYW47XG4gICAgX3NvdXJjZUVycm9yZWQ6IGJvb2xlYW47XG4gICAgX3RpbGVzOiB7W2FueV06IFRpbGV9O1xuICAgIF9wcmV2TG5nOiBudW1iZXIgfCB2b2lkO1xuICAgIF9jYWNoZTogVGlsZUNhY2hlO1xuICAgIF90aW1lcnM6IHtbYW55XTogVGltZW91dElEfTtcbiAgICBfY2FjaGVUaW1lcnM6IHtbYW55XTogVGltZW91dElEfTtcbiAgICBfbWF4VGlsZUNhY2hlU2l6ZTogP251bWJlcjtcbiAgICBfcGF1c2VkOiBib29sZWFuO1xuICAgIF9zaG91bGRSZWxvYWRPblJlc3VtZTogYm9vbGVhbjtcbiAgICBfY292ZXJlZFRpbGVzOiB7W2FueV06IGJvb2xlYW59O1xuICAgIHRyYW5zZm9ybTogVHJhbnNmb3JtO1xuICAgIF9pc0lkUmVuZGVyYWJsZTogKGlkOiBudW1iZXIsIHN5bWJvbExheWVyPzogYm9vbGVhbikgPT4gYm9vbGVhbjtcbiAgICB1c2VkOiBib29sZWFuO1xuICAgIF9zdGF0ZTogU291cmNlRmVhdHVyZVN0YXRlO1xuXG4gICAgc3RhdGljIG1heFVuZGVyem9vbWluZzogbnVtYmVyO1xuICAgIHN0YXRpYyBtYXhPdmVyem9vbWluZzogbnVtYmVyO1xuXG4gICAgY29uc3RydWN0b3IoaWQ6IHN0cmluZywgb3B0aW9uczogU291cmNlU3BlY2lmaWNhdGlvbiwgZGlzcGF0Y2hlcjogRGlzcGF0Y2hlcikge1xuICAgICAgICBzdXBlcigpO1xuICAgICAgICB0aGlzLmlkID0gaWQ7XG4gICAgICAgIHRoaXMuZGlzcGF0Y2hlciA9IGRpc3BhdGNoZXI7XG5cbiAgICAgICAgdGhpcy5vbignZGF0YScsIChlKSA9PiB7XG4gICAgICAgICAgICAvLyB0aGlzLl9zb3VyY2VMb2FkZWQgc2lnbmlmaWVzIHRoYXQgdGhlIFRpbGVKU09OIGlzIGxvYWRlZCBpZiBhcHBsaWNhYmxlLlxuICAgICAgICAgICAgLy8gaWYgdGhlIHNvdXJjZSB0eXBlIGRvZXMgbm90IGNvbWUgd2l0aCBhIFRpbGVKU09OLCB0aGUgZmxhZyBzaWduaWZpZXMgdGhlXG4gICAgICAgICAgICAvLyBzb3VyY2UgZGF0YSBoYXMgbG9hZGVkIChpLmUgZ2VvanNvbiBoYXMgYmVlbiB0aWxlZCBvbiB0aGUgd29ya2VyIGFuZCBpcyByZWFkeSlcbiAgICAgICAgICAgIGlmIChlLmRhdGFUeXBlID09PSAnc291cmNlJyAmJiBlLnNvdXJjZURhdGFUeXBlID09PSAnbWV0YWRhdGEnKSB0aGlzLl9zb3VyY2VMb2FkZWQgPSB0cnVlO1xuXG4gICAgICAgICAgICAvLyBmb3Igc291cmNlcyB3aXRoIG11dGFibGUgZGF0YSwgdGhpcyBldmVudCBmaXJlcyB3aGVuIHRoZSB1bmRlcmx5aW5nIGRhdGFcbiAgICAgICAgICAgIC8vIHRvIGEgc291cmNlIGlzIGNoYW5nZWQuIChpLmUuIEdlb0pTT05Tb3VyY2Ujc2V0RGF0YSBhbmQgSW1hZ2VTb3VyY2Ujc2VyQ29vcmRpbmF0ZXMpXG4gICAgICAgICAgICBpZiAodGhpcy5fc291cmNlTG9hZGVkICYmICF0aGlzLl9wYXVzZWQgJiYgZS5kYXRhVHlwZSA9PT0gXCJzb3VyY2VcIiAmJiBlLnNvdXJjZURhdGFUeXBlID09PSAnY29udGVudCcpIHtcbiAgICAgICAgICAgICAgICB0aGlzLnJlbG9hZCgpO1xuICAgICAgICAgICAgICAgIGlmICh0aGlzLnRyYW5zZm9ybSkge1xuICAgICAgICAgICAgICAgICAgICB0aGlzLnVwZGF0ZSh0aGlzLnRyYW5zZm9ybSk7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfVxuICAgICAgICB9KTtcblxuICAgICAgICB0aGlzLm9uKCdlcnJvcicsICgpID0+IHtcbiAgICAgICAgICAgIHRoaXMuX3NvdXJjZUVycm9yZWQgPSB0cnVlO1xuICAgICAgICB9KTtcblxuICAgICAgICB0aGlzLl9zb3VyY2UgPSBjcmVhdGVTb3VyY2UoaWQsIG9wdGlvbnMsIGRpc3BhdGNoZXIsIHRoaXMpO1xuXG4gICAgICAgIHRoaXMuX3RpbGVzID0ge307XG4gICAgICAgIHRoaXMuX2NhY2hlID0gbmV3IFRpbGVDYWNoZSgwLCB0aGlzLl91bmxvYWRUaWxlLmJpbmQodGhpcykpO1xuICAgICAgICB0aGlzLl90aW1lcnMgPSB7fTtcbiAgICAgICAgdGhpcy5fY2FjaGVUaW1lcnMgPSB7fTtcbiAgICAgICAgdGhpcy5fbWF4VGlsZUNhY2hlU2l6ZSA9IG51bGw7XG5cbiAgICAgICAgdGhpcy5fY292ZXJlZFRpbGVzID0ge307XG4gICAgICAgIHRoaXMuX3N0YXRlID0gbmV3IFNvdXJjZUZlYXR1cmVTdGF0ZSgpO1xuICAgIH1cblxuICAgIG9uQWRkKG1hcDogTWFwKSB7XG4gICAgICAgIHRoaXMubWFwID0gbWFwO1xuICAgICAgICB0aGlzLl9tYXhUaWxlQ2FjaGVTaXplID0gbWFwID8gbWFwLl9tYXhUaWxlQ2FjaGVTaXplIDogbnVsbDtcbiAgICAgICAgaWYgKHRoaXMuX3NvdXJjZSAmJiB0aGlzLl9zb3VyY2Uub25BZGQpIHtcbiAgICAgICAgICAgIHRoaXMuX3NvdXJjZS5vbkFkZChtYXApO1xuICAgICAgICB9XG4gICAgfVxuXG4gICAgb25SZW1vdmUobWFwOiBNYXApIHtcbiAgICAgICAgaWYgKHRoaXMuX3NvdXJjZSAmJiB0aGlzLl9zb3VyY2Uub25SZW1vdmUpIHtcbiAgICAgICAgICAgIHRoaXMuX3NvdXJjZS5vblJlbW92ZShtYXApO1xuICAgICAgICB9XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogUmV0dXJuIHRydWUgaWYgbm8gdGlsZSBkYXRhIGlzIHBlbmRpbmcsIHRpbGVzIHdpbGwgbm90IGNoYW5nZSB1bmxlc3NcbiAgICAgKiBhbiBhZGRpdGlvbmFsIEFQSSBjYWxsIGlzIHJlY2VpdmVkLlxuICAgICAqL1xuICAgIGxvYWRlZCgpOiBib29sZWFuIHtcbiAgICAgICAgaWYgKHRoaXMuX3NvdXJjZUVycm9yZWQpIHsgcmV0dXJuIHRydWU7IH1cbiAgICAgICAgaWYgKCF0aGlzLl9zb3VyY2VMb2FkZWQpIHsgcmV0dXJuIGZhbHNlOyB9XG4gICAgICAgIGZvciAoY29uc3QgdCBpbiB0aGlzLl90aWxlcykge1xuICAgICAgICAgICAgY29uc3QgdGlsZSA9IHRoaXMuX3RpbGVzW3RdO1xuICAgICAgICAgICAgaWYgKHRpbGUuc3RhdGUgIT09ICdsb2FkZWQnICYmIHRpbGUuc3RhdGUgIT09ICdlcnJvcmVkJylcbiAgICAgICAgICAgICAgICByZXR1cm4gZmFsc2U7XG4gICAgICAgIH1cbiAgICAgICAgcmV0dXJuIHRydWU7XG4gICAgfVxuXG4gICAgZ2V0U291cmNlKCk6IFNvdXJjZSB7XG4gICAgICAgIHJldHVybiB0aGlzLl9zb3VyY2U7XG4gICAgfVxuXG4gICAgcGF1c2UoKSB7XG4gICAgICAgIHRoaXMuX3BhdXNlZCA9IHRydWU7XG4gICAgfVxuXG4gICAgcmVzdW1lKCkge1xuICAgICAgICBpZiAoIXRoaXMuX3BhdXNlZCkgcmV0dXJuO1xuICAgICAgICBjb25zdCBzaG91bGRSZWxvYWQgPSB0aGlzLl9zaG91bGRSZWxvYWRPblJlc3VtZTtcbiAgICAgICAgdGhpcy5fcGF1c2VkID0gZmFsc2U7XG4gICAgICAgIHRoaXMuX3Nob3VsZFJlbG9hZE9uUmVzdW1lID0gZmFsc2U7XG4gICAgICAgIGlmIChzaG91bGRSZWxvYWQpIHRoaXMucmVsb2FkKCk7XG4gICAgICAgIGlmICh0aGlzLnRyYW5zZm9ybSkgdGhpcy51cGRhdGUodGhpcy50cmFuc2Zvcm0pO1xuICAgIH1cblxuICAgIF9sb2FkVGlsZSh0aWxlOiBUaWxlLCBjYWxsYmFjazogQ2FsbGJhY2s8dm9pZD4pIHtcbiAgICAgICAgcmV0dXJuIHRoaXMuX3NvdXJjZS5sb2FkVGlsZSh0aWxlLCBjYWxsYmFjayk7XG4gICAgfVxuXG4gICAgX3VubG9hZFRpbGUodGlsZTogVGlsZSkge1xuICAgICAgICBpZiAodGhpcy5fc291cmNlLnVubG9hZFRpbGUpXG4gICAgICAgICAgICByZXR1cm4gdGhpcy5fc291cmNlLnVubG9hZFRpbGUodGlsZSwgKCkgPT4ge30pO1xuICAgIH1cblxuICAgIF9hYm9ydFRpbGUodGlsZTogVGlsZSkge1xuICAgICAgICBpZiAodGhpcy5fc291cmNlLmFib3J0VGlsZSlcbiAgICAgICAgICAgIHJldHVybiB0aGlzLl9zb3VyY2UuYWJvcnRUaWxlKHRpbGUsICgpID0+IHt9KTtcbiAgICB9XG5cbiAgICBzZXJpYWxpemUoKSB7XG4gICAgICAgIHJldHVybiB0aGlzLl9zb3VyY2Uuc2VyaWFsaXplKCk7XG4gICAgfVxuXG4gICAgcHJlcGFyZShjb250ZXh0OiBDb250ZXh0KSB7XG4gICAgICAgIGlmICAodGhpcy5fc291cmNlLnByZXBhcmUpIHtcbiAgICAgICAgICAgIHRoaXMuX3NvdXJjZS5wcmVwYXJlKCk7XG4gICAgICAgIH1cblxuICAgICAgICB0aGlzLl9zdGF0ZS5jb2FsZXNjZUNoYW5nZXModGhpcy5fdGlsZXMsIHRoaXMubWFwID8gdGhpcy5tYXAucGFpbnRlciA6IG51bGwpO1xuICAgICAgICBmb3IgKGNvbnN0IGkgaW4gdGhpcy5fdGlsZXMpIHtcbiAgICAgICAgICAgIHRoaXMuX3RpbGVzW2ldLnVwbG9hZChjb250ZXh0KTtcbiAgICAgICAgfVxuICAgIH1cblxuICAgIC8qKlxuICAgICAqIFJldHVybiBhbGwgdGlsZSBpZHMgb3JkZXJlZCB3aXRoIHotb3JkZXIsIGFuZCBjYXN0IHRvIG51bWJlcnNcbiAgICAgKi9cbiAgICBnZXRJZHMoKTogQXJyYXk8bnVtYmVyPiB7XG4gICAgICAgIHJldHVybiBPYmplY3Qua2V5cyh0aGlzLl90aWxlcykubWFwKE51bWJlcikuc29ydChjb21wYXJlS2V5Wm9vbSk7XG4gICAgfVxuXG4gICAgZ2V0UmVuZGVyYWJsZUlkcyhzeW1ib2xMYXllcj86IGJvb2xlYW4pOiBBcnJheTxudW1iZXI+IHtcbiAgICAgICAgY29uc3QgaWRzID0gW107XG4gICAgICAgIGZvciAoY29uc3QgaWQgaW4gdGhpcy5fdGlsZXMpIHtcbiAgICAgICAgICAgIGlmICh0aGlzLl9pc0lkUmVuZGVyYWJsZSgraWQsIHN5bWJvbExheWVyKSkgaWRzLnB1c2goK2lkKTtcbiAgICAgICAgfVxuICAgICAgICBpZiAoc3ltYm9sTGF5ZXIpIHtcbiAgICAgICAgICAgIHJldHVybiBpZHMuc29ydCgoYV8sIGJfKSA9PiB7XG4gICAgICAgICAgICAgICAgY29uc3QgYSA9IHRoaXMuX3RpbGVzW2FfXS50aWxlSUQ7XG4gICAgICAgICAgICAgICAgY29uc3QgYiA9IHRoaXMuX3RpbGVzW2JfXS50aWxlSUQ7XG4gICAgICAgICAgICAgICAgY29uc3Qgcm90YXRlZEEgPSAobmV3IFBvaW50KGEuY2Fub25pY2FsLngsIGEuY2Fub25pY2FsLnkpKS5fcm90YXRlKHRoaXMudHJhbnNmb3JtLmFuZ2xlKTtcbiAgICAgICAgICAgICAgICBjb25zdCByb3RhdGVkQiA9IChuZXcgUG9pbnQoYi5jYW5vbmljYWwueCwgYi5jYW5vbmljYWwueSkpLl9yb3RhdGUodGhpcy50cmFuc2Zvcm0uYW5nbGUpO1xuICAgICAgICAgICAgICAgIHJldHVybiBhLm92ZXJzY2FsZWRaIC0gYi5vdmVyc2NhbGVkWiB8fCByb3RhdGVkQi55IC0gcm90YXRlZEEueSB8fCByb3RhdGVkQi54IC0gcm90YXRlZEEueDtcbiAgICAgICAgICAgIH0pO1xuICAgICAgICB9XG4gICAgICAgIHJldHVybiBpZHMuc29ydChjb21wYXJlS2V5Wm9vbSk7XG4gICAgfVxuXG4gICAgaGFzUmVuZGVyYWJsZVBhcmVudCh0aWxlSUQ6IE92ZXJzY2FsZWRUaWxlSUQpIHtcbiAgICAgICAgY29uc3QgcGFyZW50VGlsZSA9IHRoaXMuZmluZExvYWRlZFBhcmVudCh0aWxlSUQsIDApO1xuICAgICAgICBpZiAocGFyZW50VGlsZSkge1xuICAgICAgICAgICAgcmV0dXJuIHRoaXMuX2lzSWRSZW5kZXJhYmxlKHBhcmVudFRpbGUudGlsZUlELmtleSk7XG4gICAgICAgIH1cbiAgICAgICAgcmV0dXJuIGZhbHNlO1xuICAgIH1cblxuICAgIF9pc0lkUmVuZGVyYWJsZShpZDogbnVtYmVyLCBzeW1ib2xMYXllcj86IGJvb2xlYW4pIHtcbiAgICAgICAgcmV0dXJuIHRoaXMuX3RpbGVzW2lkXSAmJiB0aGlzLl90aWxlc1tpZF0uaGFzRGF0YSgpICYmXG4gICAgICAgICAgICAhdGhpcy5fY292ZXJlZFRpbGVzW2lkXSAmJiAoc3ltYm9sTGF5ZXIgfHwgIXRoaXMuX3RpbGVzW2lkXS5ob2xkaW5nRm9yRmFkZSgpKTtcbiAgICB9XG5cbiAgICByZWxvYWQoKSB7XG4gICAgICAgIGlmICh0aGlzLl9wYXVzZWQpIHtcbiAgICAgICAgICAgIHRoaXMuX3Nob3VsZFJlbG9hZE9uUmVzdW1lID0gdHJ1ZTtcbiAgICAgICAgICAgIHJldHVybjtcbiAgICAgICAgfVxuXG4gICAgICAgIHRoaXMuX2NhY2hlLnJlc2V0KCk7XG5cbiAgICAgICAgZm9yIChjb25zdCBpIGluIHRoaXMuX3RpbGVzKSB7XG4gICAgICAgICAgICBpZiAodGhpcy5fdGlsZXNbaV0uc3RhdGUgIT09IFwiZXJyb3JlZFwiKSB0aGlzLl9yZWxvYWRUaWxlKGksICdyZWxvYWRpbmcnKTtcbiAgICAgICAgfVxuICAgIH1cblxuICAgIF9yZWxvYWRUaWxlKGlkOiBzdHJpbmcgfCBudW1iZXIsIHN0YXRlOiBUaWxlU3RhdGUpIHtcbiAgICAgICAgY29uc3QgdGlsZSA9IHRoaXMuX3RpbGVzW2lkXTtcblxuICAgICAgICAvLyB0aGlzIHBvdGVudGlhbGx5IGRvZXMgbm90IGFkZHJlc3MgYWxsIHVuZGVybHlpbmdcbiAgICAgICAgLy8gaXNzdWVzIGh0dHBzOi8vZ2l0aHViLmNvbS9tYXBib3gvbWFwYm94LWdsLWpzL2lzc3Vlcy80MjUyXG4gICAgICAgIC8vIC0gaGFyZCB0byB0ZWxsIHdpdGhvdXQgcmVwcm8gc3RlcHNcbiAgICAgICAgaWYgKCF0aWxlKSByZXR1cm47XG5cbiAgICAgICAgLy8gVGhlIGRpZmZlcmVuY2UgYmV0d2VlbiBcImxvYWRpbmdcIiB0aWxlcyBhbmQgXCJyZWxvYWRpbmdcIiBvciBcImV4cGlyZWRcIlxuICAgICAgICAvLyB0aWxlcyBpcyB0aGF0IFwicmVsb2FkaW5nXCIvXCJleHBpcmVkXCIgdGlsZXMgYXJlIFwicmVuZGVyYWJsZVwiLlxuICAgICAgICAvLyBUaGVyZWZvcmUsIGEgXCJsb2FkaW5nXCIgdGlsZSBjYW5ub3QgYmVjb21lIGEgXCJyZWxvYWRpbmdcIiB0aWxlIHdpdGhvdXRcbiAgICAgICAgLy8gZmlyc3QgYmVjb21pbmcgYSBcImxvYWRlZFwiIHRpbGUuXG4gICAgICAgIGlmICh0aWxlLnN0YXRlICE9PSAnbG9hZGluZycpIHtcbiAgICAgICAgICAgIHRpbGUuc3RhdGUgPSBzdGF0ZTtcbiAgICAgICAgfVxuXG4gICAgICAgIHRoaXMuX2xvYWRUaWxlKHRpbGUsIHRoaXMuX3RpbGVMb2FkZWQuYmluZCh0aGlzLCB0aWxlLCBpZCwgc3RhdGUpKTtcbiAgICB9XG5cbiAgICBfdGlsZUxvYWRlZCh0aWxlOiBUaWxlLCBpZDogc3RyaW5nIHwgbnVtYmVyLCBwcmV2aW91c1N0YXRlOiBUaWxlU3RhdGUsIGVycjogP0Vycm9yKSB7XG4gICAgICAgIGlmIChlcnIpIHtcbiAgICAgICAgICAgIHRpbGUuc3RhdGUgPSAnZXJyb3JlZCc7XG4gICAgICAgICAgICBpZiAoKGVycjogYW55KS5zdGF0dXMgIT09IDQwNCkgdGhpcy5fc291cmNlLmZpcmUobmV3IEVycm9yRXZlbnQoZXJyLCB7dGlsZX0pKTtcbiAgICAgICAgICAgIC8vIGNvbnRpbnVlIHRvIHRyeSBsb2FkaW5nIHBhcmVudC9jaGlsZHJlbiB0aWxlcyBpZiBhIHRpbGUgZG9lc24ndCBleGlzdCAoNDA0KVxuICAgICAgICAgICAgZWxzZSB0aGlzLnVwZGF0ZSh0aGlzLnRyYW5zZm9ybSk7XG4gICAgICAgICAgICByZXR1cm47XG4gICAgICAgIH1cblxuICAgICAgICB0aWxlLnRpbWVBZGRlZCA9IGJyb3dzZXIubm93KCk7XG4gICAgICAgIGlmIChwcmV2aW91c1N0YXRlID09PSAnZXhwaXJlZCcpIHRpbGUucmVmcmVzaGVkVXBvbkV4cGlyYXRpb24gPSB0cnVlO1xuICAgICAgICB0aGlzLl9zZXRUaWxlUmVsb2FkVGltZXIoaWQsIHRpbGUpO1xuICAgICAgICBpZiAodGhpcy5nZXRTb3VyY2UoKS50eXBlID09PSAncmFzdGVyLWRlbScgJiYgdGlsZS5kZW0pIHRoaXMuX2JhY2tmaWxsREVNKHRpbGUpO1xuICAgICAgICB0aGlzLl9zdGF0ZS5pbml0aWFsaXplVGlsZVN0YXRlKHRpbGUsIHRoaXMubWFwID8gdGhpcy5tYXAucGFpbnRlciA6IG51bGwpO1xuXG4gICAgICAgIHRoaXMuX3NvdXJjZS5maXJlKG5ldyBFdmVudCgnZGF0YScsIHtkYXRhVHlwZTogJ3NvdXJjZScsIHRpbGU6IHRpbGUsIGNvb3JkOiB0aWxlLnRpbGVJRH0pKTtcbiAgICB9XG5cbiAgICAvKipcbiAgICAqIEZvciByYXN0ZXIgdGVycmFpbiBzb3VyY2UsIGJhY2tmaWxsIERFTSB0byBlbGltaW5hdGUgdmlzaWJsZSB0aWxlIGJvdW5kYXJpZXNcbiAgICAqIEBwcml2YXRlXG4gICAgKi9cbiAgICBfYmFja2ZpbGxERU0odGlsZTogVGlsZSkge1xuICAgICAgICBjb25zdCByZW5kZXJhYmxlcyA9IHRoaXMuZ2V0UmVuZGVyYWJsZUlkcygpO1xuICAgICAgICBmb3IgKGxldCBpID0gMDsgaSA8IHJlbmRlcmFibGVzLmxlbmd0aDsgaSsrKSB7XG4gICAgICAgICAgICBjb25zdCBib3JkZXJJZCA9IHJlbmRlcmFibGVzW2ldO1xuICAgICAgICAgICAgaWYgKHRpbGUubmVpZ2hib3JpbmdUaWxlcyAmJiB0aWxlLm5laWdoYm9yaW5nVGlsZXNbYm9yZGVySWRdKSB7XG4gICAgICAgICAgICAgICAgY29uc3QgYm9yZGVyVGlsZSA9IHRoaXMuZ2V0VGlsZUJ5SUQoYm9yZGVySWQpO1xuICAgICAgICAgICAgICAgIGZpbGxCb3JkZXIodGlsZSwgYm9yZGVyVGlsZSk7XG4gICAgICAgICAgICAgICAgZmlsbEJvcmRlcihib3JkZXJUaWxlLCB0aWxlKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfVxuXG4gICAgICAgIGZ1bmN0aW9uIGZpbGxCb3JkZXIodGlsZSwgYm9yZGVyVGlsZSkge1xuICAgICAgICAgICAgdGlsZS5uZWVkc0hpbGxzaGFkZVByZXBhcmUgPSB0cnVlO1xuICAgICAgICAgICAgbGV0IGR4ID0gYm9yZGVyVGlsZS50aWxlSUQuY2Fub25pY2FsLnggLSB0aWxlLnRpbGVJRC5jYW5vbmljYWwueDtcbiAgICAgICAgICAgIGNvbnN0IGR5ID0gYm9yZGVyVGlsZS50aWxlSUQuY2Fub25pY2FsLnkgLSB0aWxlLnRpbGVJRC5jYW5vbmljYWwueTtcbiAgICAgICAgICAgIGNvbnN0IGRpbSA9IE1hdGgucG93KDIsIHRpbGUudGlsZUlELmNhbm9uaWNhbC56KTtcbiAgICAgICAgICAgIGNvbnN0IGJvcmRlcklkID0gYm9yZGVyVGlsZS50aWxlSUQua2V5O1xuICAgICAgICAgICAgaWYgKGR4ID09PSAwICYmIGR5ID09PSAwKSByZXR1cm47XG5cbiAgICAgICAgICAgIGlmIChNYXRoLmFicyhkeSkgPiAxKSB7XG4gICAgICAgICAgICAgICAgcmV0dXJuO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgaWYgKE1hdGguYWJzKGR4KSA+IDEpIHtcbiAgICAgICAgICAgICAgICAvLyBBZGp1c3QgdGhlIGRlbHRhIGNvb3JkaW5hdGUgZm9yIHdvcmxkIHdyYXBhcm91bmQuXG4gICAgICAgICAgICAgICAgaWYgKE1hdGguYWJzKGR4ICsgZGltKSA9PT0gMSkge1xuICAgICAgICAgICAgICAgICAgICBkeCArPSBkaW07XG4gICAgICAgICAgICAgICAgfSBlbHNlIGlmIChNYXRoLmFicyhkeCAtIGRpbSkgPT09IDEpIHtcbiAgICAgICAgICAgICAgICAgICAgZHggLT0gZGltO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGlmICghYm9yZGVyVGlsZS5kZW0gfHwgIXRpbGUuZGVtKSByZXR1cm47XG4gICAgICAgICAgICB0aWxlLmRlbS5iYWNrZmlsbEJvcmRlcihib3JkZXJUaWxlLmRlbSwgZHgsIGR5KTtcbiAgICAgICAgICAgIGlmICh0aWxlLm5laWdoYm9yaW5nVGlsZXMgJiYgdGlsZS5uZWlnaGJvcmluZ1RpbGVzW2JvcmRlcklkXSlcbiAgICAgICAgICAgICAgICB0aWxlLm5laWdoYm9yaW5nVGlsZXNbYm9yZGVySWRdLmJhY2tmaWxsZWQgPSB0cnVlO1xuICAgICAgICB9XG4gICAgfVxuICAgIC8qKlxuICAgICAqIEdldCBhIHNwZWNpZmljIHRpbGUgYnkgVGlsZUlEXG4gICAgICovXG4gICAgZ2V0VGlsZSh0aWxlSUQ6IE92ZXJzY2FsZWRUaWxlSUQpOiBUaWxlIHtcbiAgICAgICAgcmV0dXJuIHRoaXMuZ2V0VGlsZUJ5SUQodGlsZUlELmtleSk7XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogR2V0IGEgc3BlY2lmaWMgdGlsZSBieSBpZFxuICAgICAqL1xuICAgIGdldFRpbGVCeUlEKGlkOiBzdHJpbmcgfCBudW1iZXIpOiBUaWxlIHtcbiAgICAgICAgcmV0dXJuIHRoaXMuX3RpbGVzW2lkXTtcbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBnZXQgdGhlIHpvb20gbGV2ZWwgYWRqdXN0ZWQgZm9yIHRoZSBkaWZmZXJlbmNlIGluIG1hcCBhbmQgc291cmNlIHRpbGVzaXplc1xuICAgICAqL1xuICAgIGdldFpvb20odHJhbnNmb3JtOiBUcmFuc2Zvcm0pOiBudW1iZXIge1xuICAgICAgICByZXR1cm4gdHJhbnNmb3JtLnpvb20gKyB0cmFuc2Zvcm0uc2NhbGVab29tKHRyYW5zZm9ybS50aWxlU2l6ZSAvIHRoaXMuX3NvdXJjZS50aWxlU2l6ZSk7XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogRm9yIGEgZ2l2ZW4gc2V0IG9mIHRpbGVzLCByZXRhaW4gY2hpbGRyZW4gdGhhdCBhcmUgbG9hZGVkIGFuZCBoYXZlIGEgem9vbVxuICAgICAqIGJldHdlZW4gYHpvb21gIChleGNsdXNpdmUpIGFuZCBgbWF4Q292ZXJpbmdab29tYCAoaW5jbHVzaXZlKVxuICAgICAqL1xuICAgIF9yZXRhaW5Mb2FkZWRDaGlsZHJlbihcbiAgICAgICAgaWRlYWxUaWxlczoge1thbnldOiBPdmVyc2NhbGVkVGlsZUlEfSxcbiAgICAgICAgem9vbTogbnVtYmVyLFxuICAgICAgICBtYXhDb3ZlcmluZ1pvb206IG51bWJlcixcbiAgICAgICAgcmV0YWluOiB7W2FueV06IE92ZXJzY2FsZWRUaWxlSUR9XG4gICAgKSB7XG4gICAgICAgIGZvciAoY29uc3QgaWQgaW4gdGhpcy5fdGlsZXMpIHtcbiAgICAgICAgICAgIGxldCB0aWxlID0gdGhpcy5fdGlsZXNbaWRdO1xuXG4gICAgICAgICAgICAvLyBvbmx5IGNvbnNpZGVyIHJlbmRlcmFibGUgdGlsZXMgdXAgdG8gbWF4Q292ZXJpbmdab29tXG4gICAgICAgICAgICBpZiAocmV0YWluW2lkXSB8fFxuICAgICAgICAgICAgICAgICF0aWxlLmhhc0RhdGEoKSB8fFxuICAgICAgICAgICAgICAgIHRpbGUudGlsZUlELm92ZXJzY2FsZWRaIDw9IHpvb20gfHxcbiAgICAgICAgICAgICAgICB0aWxlLnRpbGVJRC5vdmVyc2NhbGVkWiA+IG1heENvdmVyaW5nWm9vbVxuICAgICAgICAgICAgKSBjb250aW51ZTtcblxuICAgICAgICAgICAgLy8gbG9vcCB0aHJvdWdoIHBhcmVudHMgYW5kIHJldGFpbiB0aGUgdG9wbW9zdCBsb2FkZWQgb25lIGlmIGZvdW5kXG4gICAgICAgICAgICBsZXQgdG9wbW9zdExvYWRlZElEID0gdGlsZS50aWxlSUQ7XG4gICAgICAgICAgICB3aGlsZSAodGlsZSAmJiB0aWxlLnRpbGVJRC5vdmVyc2NhbGVkWiA+IHpvb20gKyAxKSB7XG4gICAgICAgICAgICAgICAgY29uc3QgcGFyZW50SUQgPSB0aWxlLnRpbGVJRC5zY2FsZWRUbyh0aWxlLnRpbGVJRC5vdmVyc2NhbGVkWiAtIDEpO1xuXG4gICAgICAgICAgICAgICAgdGlsZSA9IHRoaXMuX3RpbGVzW3BhcmVudElELmtleV07XG5cbiAgICAgICAgICAgICAgICBpZiAodGlsZSAmJiB0aWxlLmhhc0RhdGEoKSkge1xuICAgICAgICAgICAgICAgICAgICB0b3Btb3N0TG9hZGVkSUQgPSBwYXJlbnRJRDtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9XG5cbiAgICAgICAgICAgIC8vIGxvb3AgdGhyb3VnaCBhbmNlc3RvcnMgb2YgdGhlIHRvcG1vc3QgbG9hZGVkIGNoaWxkIHRvIHNlZSBpZiB0aGVyZSdzIG9uZSB0aGF0IG5lZWRlZCBpdFxuICAgICAgICAgICAgbGV0IHRpbGVJRCA9IHRvcG1vc3RMb2FkZWRJRDtcbiAgICAgICAgICAgIHdoaWxlICh0aWxlSUQub3ZlcnNjYWxlZFogPiB6b29tKSB7XG4gICAgICAgICAgICAgICAgdGlsZUlEID0gdGlsZUlELnNjYWxlZFRvKHRpbGVJRC5vdmVyc2NhbGVkWiAtIDEpO1xuXG4gICAgICAgICAgICAgICAgaWYgKGlkZWFsVGlsZXNbdGlsZUlELmtleV0pIHtcbiAgICAgICAgICAgICAgICAgICAgLy8gZm91bmQgYSBwYXJlbnQgdGhhdCBuZWVkZWQgYSBsb2FkZWQgY2hpbGQ7IHJldGFpbiB0aGF0IGNoaWxkXG4gICAgICAgICAgICAgICAgICAgIHJldGFpblt0b3Btb3N0TG9hZGVkSUQua2V5XSA9IHRvcG1vc3RMb2FkZWRJRDtcbiAgICAgICAgICAgICAgICAgICAgYnJlYWs7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfVxuICAgICAgICB9XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogRmluZCBhIGxvYWRlZCBwYXJlbnQgb2YgdGhlIGdpdmVuIHRpbGUgKHVwIHRvIG1pbkNvdmVyaW5nWm9vbSlcbiAgICAgKi9cbiAgICBmaW5kTG9hZGVkUGFyZW50KHRpbGVJRDogT3ZlcnNjYWxlZFRpbGVJRCwgbWluQ292ZXJpbmdab29tOiBudW1iZXIpOiA/VGlsZSB7XG4gICAgICAgIGZvciAobGV0IHogPSB0aWxlSUQub3ZlcnNjYWxlZFogLSAxOyB6ID49IG1pbkNvdmVyaW5nWm9vbTsgei0tKSB7XG4gICAgICAgICAgICBjb25zdCBwYXJlbnQgPSB0aWxlSUQuc2NhbGVkVG8oeik7XG4gICAgICAgICAgICBpZiAoIXBhcmVudCkgcmV0dXJuO1xuICAgICAgICAgICAgY29uc3QgaWQgPSBTdHJpbmcocGFyZW50LmtleSk7XG4gICAgICAgICAgICBjb25zdCB0aWxlID0gdGhpcy5fdGlsZXNbaWRdO1xuICAgICAgICAgICAgaWYgKHRpbGUgJiYgdGlsZS5oYXNEYXRhKCkpIHtcbiAgICAgICAgICAgICAgICByZXR1cm4gdGlsZTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGlmICh0aGlzLl9jYWNoZS5oYXMocGFyZW50KSkge1xuICAgICAgICAgICAgICAgIHJldHVybiB0aGlzLl9jYWNoZS5nZXQocGFyZW50KTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgIH1cblxuICAgIC8qKlxuICAgICAqIFJlc2l6ZXMgdGhlIHRpbGUgY2FjaGUgYmFzZWQgb24gdGhlIGN1cnJlbnQgdmlld3BvcnQncyBzaXplXG4gICAgICogb3IgdGhlIG1heFRpbGVDYWNoZVNpemUgb3B0aW9uIHBhc3NlZCBkdXJpbmcgbWFwIGNyZWF0aW9uXG4gICAgICpcbiAgICAgKiBMYXJnZXIgdmlld3BvcnRzIHVzZSBtb3JlIHRpbGVzIGFuZCBuZWVkIGxhcmdlciBjYWNoZXMuIExhcmdlciB2aWV3cG9ydHNcbiAgICAgKiBhcmUgbW9yZSBsaWtlbHkgdG8gYmUgZm91bmQgb24gZGV2aWNlcyB3aXRoIG1vcmUgbWVtb3J5IGFuZCBvbiBwYWdlcyB3aGVyZVxuICAgICAqIHRoZSBtYXAgaXMgbW9yZSBpbXBvcnRhbnQuXG4gICAgICovXG4gICAgdXBkYXRlQ2FjaGVTaXplKHRyYW5zZm9ybTogVHJhbnNmb3JtKSB7XG4gICAgICAgIGNvbnN0IHdpZHRoSW5UaWxlcyA9IE1hdGguY2VpbCh0cmFuc2Zvcm0ud2lkdGggLyB0aGlzLl9zb3VyY2UudGlsZVNpemUpICsgMTtcbiAgICAgICAgY29uc3QgaGVpZ2h0SW5UaWxlcyA9IE1hdGguY2VpbCh0cmFuc2Zvcm0uaGVpZ2h0IC8gdGhpcy5fc291cmNlLnRpbGVTaXplKSArIDE7XG4gICAgICAgIGNvbnN0IGFwcHJveFRpbGVzSW5WaWV3ID0gd2lkdGhJblRpbGVzICogaGVpZ2h0SW5UaWxlcztcbiAgICAgICAgY29uc3QgY29tbW9uWm9vbVJhbmdlID0gNTtcblxuICAgICAgICBjb25zdCB2aWV3RGVwZW5kZW50TWF4U2l6ZSA9IE1hdGguZmxvb3IoYXBwcm94VGlsZXNJblZpZXcgKiBjb21tb25ab29tUmFuZ2UpO1xuICAgICAgICBjb25zdCBtYXhTaXplID0gdHlwZW9mIHRoaXMuX21heFRpbGVDYWNoZVNpemUgPT09ICdudW1iZXInID8gTWF0aC5taW4odGhpcy5fbWF4VGlsZUNhY2hlU2l6ZSwgdmlld0RlcGVuZGVudE1heFNpemUpIDogdmlld0RlcGVuZGVudE1heFNpemU7XG5cbiAgICAgICAgdGhpcy5fY2FjaGUuc2V0TWF4U2l6ZShtYXhTaXplKTtcbiAgICB9XG5cbiAgICBoYW5kbGVXcmFwSnVtcChsbmc6IG51bWJlcikge1xuICAgICAgICAvLyBPbiB0b3Agb2YgdGhlIHJlZ3VsYXIgei94L3kgdmFsdWVzLCBUaWxlSURzIGhhdmUgYSBgd3JhcGAgdmFsdWUgdGhhdCBzcGVjaWZ5XG4gICAgICAgIC8vIHdoaWNoIGNwcHkgb2YgdGhlIHdvcmxkIHRoZSB0aWxlIGJlbG9uZ3MgdG8uIEZvciBleGFtcGxlLCBhdCBgbG5nOiAxMGAgeW91XG4gICAgICAgIC8vIG1pZ2h0IHJlbmRlciB6L3gveS8wIHdoaWxlIGF0IGBsbmc6IDM3MGAgeW91IHdvdWxkIHJlbmRlciB6L3gveS8xLlxuICAgICAgICAvL1xuICAgICAgICAvLyBXaGVuIGxuZyB2YWx1ZXMgZ2V0IHdyYXBwZWQgKGdvaW5nIGZyb20gYGxuZzogMzcwYCB0byBgbG9uZzogMTBgKSB5b3UgZXhwZWN0XG4gICAgICAgIC8vIHRvIHNlZSB0aGUgc2FtZSB0aGluZyBvbiB0aGUgc2NyZWVuICgzNzAgZGVncmVlcyBhbmQgMTAgZGVncmVlcyBpcyB0aGUgc2FtZVxuICAgICAgICAvLyBwbGFjZSBpbiB0aGUgd29ybGQpIGJ1dCBhbGwgdGhlIFRpbGVJRHMgd2lsbCBoYXZlIGRpZmZlcmVudCB3cmFwIHZhbHVlcy5cbiAgICAgICAgLy9cbiAgICAgICAgLy8gSW4gb3JkZXIgdG8gbWFrZSB0aGlzIHRyYW5zaXRpb24gc2VhbWxlc3MsIHdlIGNhbGN1bGF0ZSB0aGUgcm91bmRlZCBkaWZmZXJlbmNlIG9mXG4gICAgICAgIC8vIFwid29ybGRzXCIgYmV0d2VlbiB0aGUgbGFzdCBmcmFtZSBhbmQgdGhlIGN1cnJlbnQgZnJhbWUuIElmIHRoZSBtYXAgcGFubmVkIGJ5XG4gICAgICAgIC8vIGEgd29ybGQsIHRoZW4gd2UgY2FuIGFzc2lnbiBhbGwgdGhlIHRpbGVzIG5ldyBUaWxlSURzIHdpdGggdXBkYXRlZCB3cmFwIHZhbHVlcy5cbiAgICAgICAgLy8gRm9yIGV4YW1wbGUsIGFzc2lnbiB6L3gveS8xIGEgbmV3IGlkOiB6L3gveS8wLiBJdCBpcyB0aGUgc2FtZSB0aWxlLCBqdXN0IHJlbmRlcmVkXG4gICAgICAgIC8vIGluIGEgZGlmZmVyZW50IHBvc2l0aW9uLlxuICAgICAgICAvL1xuICAgICAgICAvLyBUaGlzIGVuYWJsZXMgdXMgdG8gcmV1c2UgdGhlIHRpbGVzIGF0IG1vcmUgaWRlYWwgbG9jYXRpb25zIGFuZCBwcmV2ZW50IGZsaWNrZXJpbmcuXG4gICAgICAgIGNvbnN0IHByZXZMbmcgPSB0aGlzLl9wcmV2TG5nID09PSB1bmRlZmluZWQgPyBsbmcgOiB0aGlzLl9wcmV2TG5nO1xuICAgICAgICBjb25zdCBsbmdEaWZmZXJlbmNlID0gbG5nIC0gcHJldkxuZztcbiAgICAgICAgY29uc3Qgd29ybGREaWZmZXJlbmNlID0gbG5nRGlmZmVyZW5jZSAvIDM2MDtcbiAgICAgICAgY29uc3Qgd3JhcERlbHRhID0gTWF0aC5yb3VuZCh3b3JsZERpZmZlcmVuY2UpO1xuICAgICAgICB0aGlzLl9wcmV2TG5nID0gbG5nO1xuXG4gICAgICAgIGlmICh3cmFwRGVsdGEpIHtcbiAgICAgICAgICAgIGNvbnN0IHRpbGVzID0ge307XG4gICAgICAgICAgICBmb3IgKGNvbnN0IGtleSBpbiB0aGlzLl90aWxlcykge1xuICAgICAgICAgICAgICAgIGNvbnN0IHRpbGUgPSB0aGlzLl90aWxlc1trZXldO1xuICAgICAgICAgICAgICAgIHRpbGUudGlsZUlEID0gdGlsZS50aWxlSUQudW53cmFwVG8odGlsZS50aWxlSUQud3JhcCArIHdyYXBEZWx0YSk7XG4gICAgICAgICAgICAgICAgdGlsZXNbdGlsZS50aWxlSUQua2V5XSA9IHRpbGU7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICB0aGlzLl90aWxlcyA9IHRpbGVzO1xuXG4gICAgICAgICAgICAvLyBSZXNldCB0aWxlIHJlbG9hZCB0aW1lcnNcbiAgICAgICAgICAgIGZvciAoY29uc3QgaWQgaW4gdGhpcy5fdGltZXJzKSB7XG4gICAgICAgICAgICAgICAgY2xlYXJUaW1lb3V0KHRoaXMuX3RpbWVyc1tpZF0pO1xuICAgICAgICAgICAgICAgIGRlbGV0ZSB0aGlzLl90aW1lcnNbaWRdO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgZm9yIChjb25zdCBpZCBpbiB0aGlzLl90aWxlcykge1xuICAgICAgICAgICAgICAgIGNvbnN0IHRpbGUgPSB0aGlzLl90aWxlc1tpZF07XG4gICAgICAgICAgICAgICAgdGhpcy5fc2V0VGlsZVJlbG9hZFRpbWVyKGlkLCB0aWxlKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgIH1cblxuICAgIC8qKlxuICAgICAqIFJlbW92ZXMgdGlsZXMgdGhhdCBhcmUgb3V0c2lkZSB0aGUgdmlld3BvcnQgYW5kIGFkZHMgbmV3IHRpbGVzIHRoYXRcbiAgICAgKiBhcmUgaW5zaWRlIHRoZSB2aWV3cG9ydC5cbiAgICAgKi9cbiAgICB1cGRhdGUodHJhbnNmb3JtOiBUcmFuc2Zvcm0pIHtcbiAgICAgICAgdGhpcy50cmFuc2Zvcm0gPSB0cmFuc2Zvcm07XG4gICAgICAgIGlmICghdGhpcy5fc291cmNlTG9hZGVkIHx8IHRoaXMuX3BhdXNlZCkgeyByZXR1cm47IH1cblxuICAgICAgICB0aGlzLnVwZGF0ZUNhY2hlU2l6ZSh0cmFuc2Zvcm0pO1xuICAgICAgICB0aGlzLmhhbmRsZVdyYXBKdW1wKHRoaXMudHJhbnNmb3JtLmNlbnRlci5sbmcpO1xuXG4gICAgICAgIC8vIENvdmVyZWQgaXMgYSBsaXN0IG9mIHJldGFpbmVkIHRpbGVzIHdobydzIGFyZWFzIGFyZSBmdWxseSBjb3ZlcmVkIGJ5IG90aGVyLFxuICAgICAgICAvLyBiZXR0ZXIsIHJldGFpbmVkIHRpbGVzLiBUaGV5IGFyZSBub3QgZHJhd24gc2VwYXJhdGVseS5cbiAgICAgICAgdGhpcy5fY292ZXJlZFRpbGVzID0ge307XG5cbiAgICAgICAgbGV0IGlkZWFsVGlsZUlEcztcbiAgICAgICAgaWYgKCF0aGlzLnVzZWQpIHtcbiAgICAgICAgICAgIGlkZWFsVGlsZUlEcyA9IFtdO1xuICAgICAgICB9IGVsc2UgaWYgKHRoaXMuX3NvdXJjZS50aWxlSUQpIHtcbiAgICAgICAgICAgIGlkZWFsVGlsZUlEcyA9IHRyYW5zZm9ybS5nZXRWaXNpYmxlVW53cmFwcGVkQ29vcmRpbmF0ZXModGhpcy5fc291cmNlLnRpbGVJRClcbiAgICAgICAgICAgICAgICAubWFwKCh1bndyYXBwZWQpID0+IG5ldyBPdmVyc2NhbGVkVGlsZUlEKHVud3JhcHBlZC5jYW5vbmljYWwueiwgdW53cmFwcGVkLndyYXAsIHVud3JhcHBlZC5jYW5vbmljYWwueiwgdW53cmFwcGVkLmNhbm9uaWNhbC54LCB1bndyYXBwZWQuY2Fub25pY2FsLnkpKTtcbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgIGlkZWFsVGlsZUlEcyA9IHRyYW5zZm9ybS5jb3ZlcmluZ1RpbGVzKHtcbiAgICAgICAgICAgICAgICB0aWxlU2l6ZTogdGhpcy5fc291cmNlLnRpbGVTaXplLFxuICAgICAgICAgICAgICAgIG1pbnpvb206IHRoaXMuX3NvdXJjZS5taW56b29tLFxuICAgICAgICAgICAgICAgIG1heHpvb206IHRoaXMuX3NvdXJjZS5tYXh6b29tLFxuICAgICAgICAgICAgICAgIHJvdW5kWm9vbTogdGhpcy5fc291cmNlLnJvdW5kWm9vbSxcbiAgICAgICAgICAgICAgICByZXBhcnNlT3ZlcnNjYWxlZDogdGhpcy5fc291cmNlLnJlcGFyc2VPdmVyc2NhbGVkXG4gICAgICAgICAgICB9KTtcblxuICAgICAgICAgICAgaWYgKHRoaXMuX3NvdXJjZS5oYXNUaWxlKSB7XG4gICAgICAgICAgICAgICAgaWRlYWxUaWxlSURzID0gaWRlYWxUaWxlSURzLmZpbHRlcigoY29vcmQpID0+ICh0aGlzLl9zb3VyY2UuaGFzVGlsZTogYW55KShjb29yZCkpO1xuICAgICAgICAgICAgfVxuICAgICAgICB9XG5cbiAgICAgICAgLy8gRGV0ZXJtaW5lIHRoZSBvdmVyem9vbWluZy91bmRlcnpvb21pbmcgYW1vdW50cy5cbiAgICAgICAgY29uc3Qgem9vbSA9ICh0aGlzLl9zb3VyY2Uucm91bmRab29tID8gTWF0aC5yb3VuZCA6IE1hdGguZmxvb3IpKHRoaXMuZ2V0Wm9vbSh0cmFuc2Zvcm0pKTtcbiAgICAgICAgY29uc3QgbWluQ292ZXJpbmdab29tID0gTWF0aC5tYXgoem9vbSAtIFNvdXJjZUNhY2hlLm1heE92ZXJ6b29taW5nLCB0aGlzLl9zb3VyY2UubWluem9vbSk7XG4gICAgICAgIGNvbnN0IG1heENvdmVyaW5nWm9vbSA9IE1hdGgubWF4KHpvb20gKyBTb3VyY2VDYWNoZS5tYXhVbmRlcnpvb21pbmcsICB0aGlzLl9zb3VyY2UubWluem9vbSk7XG5cbiAgICAgICAgLy8gUmV0YWluIGlzIGEgbGlzdCBvZiB0aWxlcyB0aGF0IHdlIHNob3VsZG4ndCBkZWxldGUsIGV2ZW4gaWYgdGhleSBhcmUgbm90XG4gICAgICAgIC8vIHRoZSBtb3N0IGlkZWFsIHRpbGUgZm9yIHRoZSBjdXJyZW50IHZpZXdwb3J0LiBUaGlzIG1heSBpbmNsdWRlIHRpbGVzIGxpa2VcbiAgICAgICAgLy8gcGFyZW50IG9yIGNoaWxkIHRpbGVzIHRoYXQgYXJlICphbHJlYWR5KiBsb2FkZWQuXG4gICAgICAgIGNvbnN0IHJldGFpbiA9IHRoaXMuX3VwZGF0ZVJldGFpbmVkVGlsZXMoaWRlYWxUaWxlSURzLCB6b29tKTtcblxuICAgICAgICBpZiAoaXNSYXN0ZXJUeXBlKHRoaXMuX3NvdXJjZS50eXBlKSkge1xuICAgICAgICAgICAgY29uc3QgcGFyZW50c0ZvckZhZGluZyA9IHt9O1xuICAgICAgICAgICAgY29uc3QgZmFkaW5nVGlsZXMgPSB7fTtcbiAgICAgICAgICAgIGNvbnN0IGlkcyA9IE9iamVjdC5rZXlzKHJldGFpbik7XG4gICAgICAgICAgICBmb3IgKGNvbnN0IGlkIG9mIGlkcykge1xuICAgICAgICAgICAgICAgIGNvbnN0IHRpbGVJRCA9IHJldGFpbltpZF07XG4gICAgICAgICAgICAgICAgYXNzZXJ0KHRpbGVJRC5rZXkgPT09ICtpZCk7XG5cbiAgICAgICAgICAgICAgICBjb25zdCB0aWxlID0gdGhpcy5fdGlsZXNbaWRdO1xuICAgICAgICAgICAgICAgIGlmICghdGlsZSB8fCB0aWxlLmZhZGVFbmRUaW1lICYmIHRpbGUuZmFkZUVuZFRpbWUgPD0gYnJvd3Nlci5ub3coKSkgY29udGludWU7XG5cbiAgICAgICAgICAgICAgICAvLyBpZiB0aGUgdGlsZSBpcyBsb2FkZWQgYnV0IHN0aWxsIGZhZGluZyBpbiwgZmluZCBwYXJlbnRzIHRvIGNyb3NzLWZhZGUgd2l0aCBpdFxuICAgICAgICAgICAgICAgIGNvbnN0IHBhcmVudFRpbGUgPSB0aGlzLmZpbmRMb2FkZWRQYXJlbnQodGlsZUlELCBtaW5Db3ZlcmluZ1pvb20pO1xuICAgICAgICAgICAgICAgIGlmIChwYXJlbnRUaWxlKSB7XG4gICAgICAgICAgICAgICAgICAgIHRoaXMuX2FkZFRpbGUocGFyZW50VGlsZS50aWxlSUQpO1xuICAgICAgICAgICAgICAgICAgICBwYXJlbnRzRm9yRmFkaW5nW3BhcmVudFRpbGUudGlsZUlELmtleV0gPSBwYXJlbnRUaWxlLnRpbGVJRDtcbiAgICAgICAgICAgICAgICB9XG5cbiAgICAgICAgICAgICAgICBmYWRpbmdUaWxlc1tpZF0gPSB0aWxlSUQ7XG4gICAgICAgICAgICB9XG5cbiAgICAgICAgICAgIC8vIGZvciB0aWxlcyB0aGF0IGFyZSBzdGlsbCBmYWRpbmcgaW4sIGFsc28gZmluZCBjaGlsZHJlbiB0byBjcm9zcy1mYWRlIHdpdGhcbiAgICAgICAgICAgIHRoaXMuX3JldGFpbkxvYWRlZENoaWxkcmVuKGZhZGluZ1RpbGVzLCB6b29tLCBtYXhDb3ZlcmluZ1pvb20sIHJldGFpbik7XG5cbiAgICAgICAgICAgIGZvciAoY29uc3QgaWQgaW4gcGFyZW50c0ZvckZhZGluZykge1xuICAgICAgICAgICAgICAgIGlmICghcmV0YWluW2lkXSkge1xuICAgICAgICAgICAgICAgICAgICAvLyBJZiBhIHRpbGUgaXMgb25seSBuZWVkZWQgZm9yIGZhZGluZywgbWFyayBpdCBhcyBjb3ZlcmVkIHNvIHRoYXQgaXQgaXNuJ3QgcmVuZGVyZWQgb24gaXQncyBvd24uXG4gICAgICAgICAgICAgICAgICAgIHRoaXMuX2NvdmVyZWRUaWxlc1tpZF0gPSB0cnVlO1xuICAgICAgICAgICAgICAgICAgICByZXRhaW5baWRdID0gcGFyZW50c0ZvckZhZGluZ1tpZF07XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfVxuICAgICAgICB9XG5cbiAgICAgICAgZm9yIChjb25zdCByZXRhaW5lZElkIGluIHJldGFpbikge1xuICAgICAgICAgICAgLy8gTWFrZSBzdXJlIHJldGFpbmVkIHRpbGVzIGFsd2F5cyBjbGVhciBhbnkgZXhpc3RpbmcgZmFkZSBob2xkc1xuICAgICAgICAgICAgLy8gc28gdGhhdCBpZiB0aGV5J3JlIHJlbW92ZWQgYWdhaW4gdGhlaXIgZmFkZSB0aW1lciBzdGFydHMgZnJlc2guXG4gICAgICAgICAgICB0aGlzLl90aWxlc1tyZXRhaW5lZElkXS5jbGVhckZhZGVIb2xkKCk7XG4gICAgICAgIH1cblxuICAgICAgICAvLyBSZW1vdmUgdGhlIHRpbGVzIHdlIGRvbid0IG5lZWQgYW55bW9yZS5cbiAgICAgICAgY29uc3QgcmVtb3ZlID0ga2V5c0RpZmZlcmVuY2UodGhpcy5fdGlsZXMsIHJldGFpbik7XG4gICAgICAgIGZvciAoY29uc3QgdGlsZUlEIG9mIHJlbW92ZSkge1xuICAgICAgICAgICAgY29uc3QgdGlsZSA9IHRoaXMuX3RpbGVzW3RpbGVJRF07XG4gICAgICAgICAgICBpZiAodGlsZS5oYXNTeW1ib2xCdWNrZXRzICYmICF0aWxlLmhvbGRpbmdGb3JGYWRlKCkpIHtcbiAgICAgICAgICAgICAgICB0aWxlLnNldEhvbGREdXJhdGlvbih0aGlzLm1hcC5fZmFkZUR1cmF0aW9uKTtcbiAgICAgICAgICAgIH0gZWxzZSBpZiAoIXRpbGUuaGFzU3ltYm9sQnVja2V0cyB8fCB0aWxlLnN5bWJvbEZhZGVGaW5pc2hlZCgpKSB7XG4gICAgICAgICAgICAgICAgdGhpcy5fcmVtb3ZlVGlsZSh0aWxlSUQpO1xuICAgICAgICAgICAgfVxuICAgICAgICB9XG4gICAgfVxuXG4gICAgcmVsZWFzZVN5bWJvbEZhZGVUaWxlcygpIHtcbiAgICAgICAgZm9yIChjb25zdCBpZCBpbiB0aGlzLl90aWxlcykge1xuICAgICAgICAgICAgaWYgKHRoaXMuX3RpbGVzW2lkXS5ob2xkaW5nRm9yRmFkZSgpKSB7XG4gICAgICAgICAgICAgICAgdGhpcy5fcmVtb3ZlVGlsZShpZCk7XG4gICAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICB9XG5cbiAgICBfdXBkYXRlUmV0YWluZWRUaWxlcyhpZGVhbFRpbGVJRHM6IEFycmF5PE92ZXJzY2FsZWRUaWxlSUQ+LCB6b29tOiBudW1iZXIpOiB7IFtzdHJpbmddOiBPdmVyc2NhbGVkVGlsZUlEfSB7XG4gICAgICAgIGNvbnN0IHJldGFpbiA9IHt9O1xuICAgICAgICBjb25zdCBjaGVja2VkOiB7W251bWJlcl06IGJvb2xlYW4gfSA9IHt9O1xuICAgICAgICBjb25zdCBtaW5Db3ZlcmluZ1pvb20gPSBNYXRoLm1heCh6b29tIC0gU291cmNlQ2FjaGUubWF4T3Zlcnpvb21pbmcsIHRoaXMuX3NvdXJjZS5taW56b29tKTtcbiAgICAgICAgY29uc3QgbWF4Q292ZXJpbmdab29tID0gTWF0aC5tYXgoem9vbSArIFNvdXJjZUNhY2hlLm1heFVuZGVyem9vbWluZywgIHRoaXMuX3NvdXJjZS5taW56b29tKTtcblxuICAgICAgICBjb25zdCBtaXNzaW5nVGlsZXMgPSB7fTtcbiAgICAgICAgZm9yIChjb25zdCB0aWxlSUQgb2YgaWRlYWxUaWxlSURzKSB7XG4gICAgICAgICAgICBjb25zdCB0aWxlID0gdGhpcy5fYWRkVGlsZSh0aWxlSUQpO1xuXG4gICAgICAgICAgICAvLyByZXRhaW4gdGhlIHRpbGUgZXZlbiBpZiBpdCdzIG5vdCBsb2FkZWQgYmVjYXVzZSBpdCdzIGFuIGlkZWFsIHRpbGUuXG4gICAgICAgICAgICByZXRhaW5bdGlsZUlELmtleV0gPSB0aWxlSUQ7XG5cbiAgICAgICAgICAgIGlmICh0aWxlLmhhc0RhdGEoKSkgY29udGludWU7XG5cbiAgICAgICAgICAgIGlmICh6b29tIDwgdGhpcy5fc291cmNlLm1heHpvb20pIHtcbiAgICAgICAgICAgICAgICAvLyBzYXZlIG1pc3NpbmcgdGlsZXMgdGhhdCBwb3RlbnRpYWxseSBoYXZlIGxvYWRlZCBjaGlsZHJlblxuICAgICAgICAgICAgICAgIG1pc3NpbmdUaWxlc1t0aWxlSUQua2V5XSA9IHRpbGVJRDtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfVxuXG4gICAgICAgIC8vIHJldGFpbiBhbnkgbG9hZGVkIGNoaWxkcmVuIG9mIGlkZWFsIHRpbGVzIHVwIHRvIG1heENvdmVyaW5nWm9vbVxuICAgICAgICB0aGlzLl9yZXRhaW5Mb2FkZWRDaGlsZHJlbihtaXNzaW5nVGlsZXMsIHpvb20sIG1heENvdmVyaW5nWm9vbSwgcmV0YWluKTtcblxuICAgICAgICBmb3IgKGNvbnN0IHRpbGVJRCBvZiBpZGVhbFRpbGVJRHMpIHtcbiAgICAgICAgICAgIGxldCB0aWxlID0gdGhpcy5fdGlsZXNbdGlsZUlELmtleV07XG5cbiAgICAgICAgICAgIGlmICh0aWxlLmhhc0RhdGEoKSkgY29udGludWU7XG5cbiAgICAgICAgICAgIC8vIFRoZSB0aWxlIHdlIHJlcXVpcmUgaXMgbm90IHlldCBsb2FkZWQgb3IgZG9lcyBub3QgZXhpc3Q7XG4gICAgICAgICAgICAvLyBBdHRlbXB0IHRvIGZpbmQgY2hpbGRyZW4gdGhhdCBmdWxseSBjb3ZlciBpdC5cblxuICAgICAgICAgICAgaWYgKHpvb20gKyAxID4gdGhpcy5fc291cmNlLm1heHpvb20pIHtcbiAgICAgICAgICAgICAgICAvLyBXZSdyZSBsb29raW5nIGZvciBhbiBvdmVyem9vbWVkIGNoaWxkIHRpbGUuXG4gICAgICAgICAgICAgICAgY29uc3QgY2hpbGRDb29yZCA9IHRpbGVJRC5jaGlsZHJlbih0aGlzLl9zb3VyY2UubWF4em9vbSlbMF07XG4gICAgICAgICAgICAgICAgY29uc3QgY2hpbGRUaWxlID0gdGhpcy5nZXRUaWxlKGNoaWxkQ29vcmQpO1xuICAgICAgICAgICAgICAgIGlmICghIWNoaWxkVGlsZSAmJiBjaGlsZFRpbGUuaGFzRGF0YSgpKSB7XG4gICAgICAgICAgICAgICAgICAgIHJldGFpbltjaGlsZENvb3JkLmtleV0gPSBjaGlsZENvb3JkO1xuICAgICAgICAgICAgICAgICAgICBjb250aW51ZTsgLy8gdGlsZSBpcyBjb3ZlcmVkIGJ5IG92ZXJ6b29tZWQgY2hpbGRcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgICAgIC8vIGNoZWNrIGlmIGFsbCA0IGltbWVkaWF0ZSBjaGlsZHJlbiBhcmUgbG9hZGVkIChpLmUuIHRoZSBtaXNzaW5nIGlkZWFsIHRpbGUgaXMgY292ZXJlZClcbiAgICAgICAgICAgICAgICBjb25zdCBjaGlsZHJlbiA9IHRpbGVJRC5jaGlsZHJlbih0aGlzLl9zb3VyY2UubWF4em9vbSk7XG5cbiAgICAgICAgICAgICAgICBpZiAocmV0YWluW2NoaWxkcmVuWzBdLmtleV0gJiZcbiAgICAgICAgICAgICAgICAgICAgcmV0YWluW2NoaWxkcmVuWzFdLmtleV0gJiZcbiAgICAgICAgICAgICAgICAgICAgcmV0YWluW2NoaWxkcmVuWzJdLmtleV0gJiZcbiAgICAgICAgICAgICAgICAgICAgcmV0YWluW2NoaWxkcmVuWzNdLmtleV0pIGNvbnRpbnVlOyAvLyB0aWxlIGlzIGNvdmVyZWQgYnkgY2hpbGRyZW5cbiAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgLy8gV2UgY291bGRuJ3QgZmluZCBjaGlsZCB0aWxlcyB0aGF0IGVudGlyZWx5IGNvdmVyIHRoZSBpZGVhbCB0aWxlOyBsb29rIGZvciBwYXJlbnRzIG5vdy5cblxuICAgICAgICAgICAgLy8gQXMgd2UgYXNjZW5kIHVwIHRoZSB0aWxlIHB5cmFtaWQgb2YgdGhlIGlkZWFsIHRpbGUsIHdlIGNoZWNrIHdoZXRoZXIgdGhlIHBhcmVudFxuICAgICAgICAgICAgLy8gdGlsZSBoYXMgYmVlbiBwcmV2aW91c2x5IHJlcXVlc3RlZCAoYW5kIGVycm9yZWQgYmVjYXVzZSB3ZSBvbmx5IGxvb3Agb3ZlciB0aWxlcyB3aXRoIG5vIGRhdGEpXG4gICAgICAgICAgICAvLyBpbiBvcmRlciB0byBkZXRlcm1pbmUgaWYgd2UgbmVlZCB0byByZXF1ZXN0IGl0cyBwYXJlbnQuXG4gICAgICAgICAgICBsZXQgcGFyZW50V2FzUmVxdWVzdGVkID0gdGlsZS53YXNSZXF1ZXN0ZWQoKTtcblxuICAgICAgICAgICAgZm9yIChsZXQgb3ZlcnNjYWxlZFogPSB0aWxlSUQub3ZlcnNjYWxlZFogLSAxOyBvdmVyc2NhbGVkWiA+PSBtaW5Db3ZlcmluZ1pvb207IC0tb3ZlcnNjYWxlZFopIHtcbiAgICAgICAgICAgICAgICBjb25zdCBwYXJlbnRJZCA9IHRpbGVJRC5zY2FsZWRUbyhvdmVyc2NhbGVkWik7XG5cbiAgICAgICAgICAgICAgICAvLyBCcmVhayBwYXJlbnQgdGlsZSBhc2NlbnQgaWYgdGhpcyByb3V0ZSBoYXMgYmVlbiBwcmV2aW91c2x5IGNoZWNrZWQgYnkgYW5vdGhlciBjaGlsZC5cbiAgICAgICAgICAgICAgICBpZiAoY2hlY2tlZFtwYXJlbnRJZC5rZXldKSBicmVhaztcbiAgICAgICAgICAgICAgICBjaGVja2VkW3BhcmVudElkLmtleV0gPSB0cnVlO1xuXG4gICAgICAgICAgICAgICAgdGlsZSA9IHRoaXMuZ2V0VGlsZShwYXJlbnRJZCk7XG4gICAgICAgICAgICAgICAgaWYgKCF0aWxlICYmIHBhcmVudFdhc1JlcXVlc3RlZCkge1xuICAgICAgICAgICAgICAgICAgICB0aWxlID0gdGhpcy5fYWRkVGlsZShwYXJlbnRJZCk7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIGlmICh0aWxlKSB7XG4gICAgICAgICAgICAgICAgICAgIHJldGFpbltwYXJlbnRJZC5rZXldID0gcGFyZW50SWQ7XG4gICAgICAgICAgICAgICAgICAgIC8vIFNhdmUgdGhlIGN1cnJlbnQgdmFsdWVzLCBzaW5jZSB0aGV5J3JlIHRoZSBwYXJlbnQgb2YgdGhlIG5leHQgaXRlcmF0aW9uXG4gICAgICAgICAgICAgICAgICAgIC8vIG9mIHRoZSBwYXJlbnQgdGlsZSBhc2NlbnQgbG9vcC5cbiAgICAgICAgICAgICAgICAgICAgcGFyZW50V2FzUmVxdWVzdGVkID0gdGlsZS53YXNSZXF1ZXN0ZWQoKTtcbiAgICAgICAgICAgICAgICAgICAgaWYgKHRpbGUuaGFzRGF0YSgpKSBicmVhaztcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9XG4gICAgICAgIH1cblxuICAgICAgICByZXR1cm4gcmV0YWluO1xuICAgIH1cblxuICAgIC8qKlxuICAgICAqIEFkZCBhIHRpbGUsIGdpdmVuIGl0cyBjb29yZGluYXRlLCB0byB0aGUgcHlyYW1pZC5cbiAgICAgKiBAcHJpdmF0ZVxuICAgICAqL1xuICAgIF9hZGRUaWxlKHRpbGVJRDogT3ZlcnNjYWxlZFRpbGVJRCk6IFRpbGUge1xuICAgICAgICBsZXQgdGlsZSA9IHRoaXMuX3RpbGVzW3RpbGVJRC5rZXldO1xuICAgICAgICBpZiAodGlsZSlcbiAgICAgICAgICAgIHJldHVybiB0aWxlO1xuXG5cbiAgICAgICAgdGlsZSA9IHRoaXMuX2NhY2hlLmdldEFuZFJlbW92ZSh0aWxlSUQpO1xuICAgICAgICBpZiAodGlsZSkge1xuICAgICAgICAgICAgdGhpcy5fc2V0VGlsZVJlbG9hZFRpbWVyKHRpbGVJRC5rZXksIHRpbGUpO1xuICAgICAgICAgICAgLy8gc2V0IHRoZSB0aWxlSUQgYmVjYXVzZSB0aGUgY2FjaGVkIHRpbGUgY291bGQgaGF2ZSBoYWQgYSBkaWZmZXJlbnQgd3JhcCB2YWx1ZVxuICAgICAgICAgICAgdGlsZS50aWxlSUQgPSB0aWxlSUQ7XG4gICAgICAgICAgICB0aGlzLl9zdGF0ZS5pbml0aWFsaXplVGlsZVN0YXRlKHRpbGUsIHRoaXMubWFwID8gdGhpcy5tYXAucGFpbnRlciA6IG51bGwpO1xuICAgICAgICAgICAgaWYgKHRoaXMuX2NhY2hlVGltZXJzW3RpbGVJRC5rZXldKSB7XG4gICAgICAgICAgICAgICAgY2xlYXJUaW1lb3V0KHRoaXMuX2NhY2hlVGltZXJzW3RpbGVJRC5rZXldKTtcbiAgICAgICAgICAgICAgICBkZWxldGUgdGhpcy5fY2FjaGVUaW1lcnNbdGlsZUlELmtleV07XG4gICAgICAgICAgICAgICAgdGhpcy5fc2V0VGlsZVJlbG9hZFRpbWVyKHRpbGVJRC5rZXksIHRpbGUpO1xuICAgICAgICAgICAgfVxuICAgICAgICB9XG5cbiAgICAgICAgY29uc3QgY2FjaGVkID0gQm9vbGVhbih0aWxlKTtcbiAgICAgICAgaWYgKCFjYWNoZWQpIHtcbiAgICAgICAgICAgIHRpbGUgPSBuZXcgVGlsZSh0aWxlSUQsIHRoaXMuX3NvdXJjZS50aWxlU2l6ZSAqIHRpbGVJRC5vdmVyc2NhbGVGYWN0b3IoKSk7XG4gICAgICAgICAgICB0aGlzLl9sb2FkVGlsZSh0aWxlLCB0aGlzLl90aWxlTG9hZGVkLmJpbmQodGhpcywgdGlsZSwgdGlsZUlELmtleSwgdGlsZS5zdGF0ZSkpO1xuICAgICAgICB9XG5cbiAgICAgICAgLy8gSW1wb3NzaWJsZSwgYnV0IHNpbGVuY2UgZmxvdy5cbiAgICAgICAgaWYgKCF0aWxlKSByZXR1cm4gKG51bGw6IGFueSk7XG5cbiAgICAgICAgdGlsZS51c2VzKys7XG4gICAgICAgIHRoaXMuX3RpbGVzW3RpbGVJRC5rZXldID0gdGlsZTtcbiAgICAgICAgaWYgKCFjYWNoZWQpIHRoaXMuX3NvdXJjZS5maXJlKG5ldyBFdmVudCgnZGF0YWxvYWRpbmcnLCB7dGlsZTogdGlsZSwgY29vcmQ6IHRpbGUudGlsZUlELCBkYXRhVHlwZTogJ3NvdXJjZSd9KSk7XG5cbiAgICAgICAgcmV0dXJuIHRpbGU7XG4gICAgfVxuXG4gICAgX3NldFRpbGVSZWxvYWRUaW1lcihpZDogc3RyaW5nIHwgbnVtYmVyLCB0aWxlOiBUaWxlKSB7XG4gICAgICAgIGlmIChpZCBpbiB0aGlzLl90aW1lcnMpIHtcbiAgICAgICAgICAgIGNsZWFyVGltZW91dCh0aGlzLl90aW1lcnNbaWRdKTtcbiAgICAgICAgICAgIGRlbGV0ZSB0aGlzLl90aW1lcnNbaWRdO1xuICAgICAgICB9XG5cbiAgICAgICAgY29uc3QgZXhwaXJ5VGltZW91dCA9IHRpbGUuZ2V0RXhwaXJ5VGltZW91dCgpO1xuICAgICAgICBpZiAoZXhwaXJ5VGltZW91dCkge1xuICAgICAgICAgICAgdGhpcy5fdGltZXJzW2lkXSA9IHNldFRpbWVvdXQoKCkgPT4ge1xuICAgICAgICAgICAgICAgIHRoaXMuX3JlbG9hZFRpbGUoaWQsICdleHBpcmVkJyk7XG4gICAgICAgICAgICAgICAgZGVsZXRlIHRoaXMuX3RpbWVyc1tpZF07XG4gICAgICAgICAgICB9LCBleHBpcnlUaW1lb3V0KTtcbiAgICAgICAgfVxuICAgIH1cblxuICAgIC8qKlxuICAgICAqIFJlbW92ZSBhIHRpbGUsIGdpdmVuIGl0cyBpZCwgZnJvbSB0aGUgcHlyYW1pZFxuICAgICAqIEBwcml2YXRlXG4gICAgICovXG4gICAgX3JlbW92ZVRpbGUoaWQ6IHN0cmluZyB8IG51bWJlcikge1xuICAgICAgICBjb25zdCB0aWxlID0gdGhpcy5fdGlsZXNbaWRdO1xuICAgICAgICBpZiAoIXRpbGUpXG4gICAgICAgICAgICByZXR1cm47XG5cbiAgICAgICAgdGlsZS51c2VzLS07XG4gICAgICAgIGRlbGV0ZSB0aGlzLl90aWxlc1tpZF07XG4gICAgICAgIGlmICh0aGlzLl90aW1lcnNbaWRdKSB7XG4gICAgICAgICAgICBjbGVhclRpbWVvdXQodGhpcy5fdGltZXJzW2lkXSk7XG4gICAgICAgICAgICBkZWxldGUgdGhpcy5fdGltZXJzW2lkXTtcbiAgICAgICAgfVxuXG4gICAgICAgIGlmICh0aWxlLnVzZXMgPiAwKVxuICAgICAgICAgICAgcmV0dXJuO1xuXG4gICAgICAgIGlmICh0aWxlLmhhc0RhdGEoKSkge1xuICAgICAgICAgICAgdGhpcy5fY2FjaGUuYWRkKHRpbGUudGlsZUlELCB0aWxlLCB0aWxlLmdldEV4cGlyeVRpbWVvdXQoKSk7XG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICB0aWxlLmFib3J0ZWQgPSB0cnVlO1xuICAgICAgICAgICAgdGhpcy5fYWJvcnRUaWxlKHRpbGUpO1xuICAgICAgICAgICAgdGhpcy5fdW5sb2FkVGlsZSh0aWxlKTtcbiAgICAgICAgfVxuICAgIH1cblxuICAgIC8qKlxuICAgICAqIFJlbW92ZSBhbGwgdGlsZXMgZnJvbSB0aGlzIHB5cmFtaWRcbiAgICAgKi9cbiAgICBjbGVhclRpbGVzKCkge1xuICAgICAgICB0aGlzLl9zaG91bGRSZWxvYWRPblJlc3VtZSA9IGZhbHNlO1xuICAgICAgICB0aGlzLl9wYXVzZWQgPSBmYWxzZTtcblxuICAgICAgICBmb3IgKGNvbnN0IGlkIGluIHRoaXMuX3RpbGVzKVxuICAgICAgICAgICAgdGhpcy5fcmVtb3ZlVGlsZShpZCk7XG5cbiAgICAgICAgdGhpcy5fY2FjaGUucmVzZXQoKTtcbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBTZWFyY2ggdGhyb3VnaCBvdXIgY3VycmVudCB0aWxlcyBhbmQgYXR0ZW1wdCB0byBmaW5kIHRoZSB0aWxlcyB0aGF0XG4gICAgICogY292ZXIgdGhlIGdpdmVuIGJvdW5kcy5cbiAgICAgKiBAcGFyYW0gcXVlcnlHZW9tZXRyeSBjb29yZGluYXRlcyBvZiB0aGUgY29ybmVycyBvZiBib3VuZGluZyByZWN0YW5nbGVcbiAgICAgKiBAcmV0dXJucyB7QXJyYXk8T2JqZWN0Pn0gcmVzdWx0IGl0ZW1zIGhhdmUge3RpbGUsIG1pblgsIG1heFgsIG1pblksIG1heFl9LCB3aGVyZSBtaW4vbWF4IGJvdW5kaW5nIHZhbHVlcyBhcmUgdGhlIGdpdmVuIGJvdW5kcyB0cmFuc2Zvcm1lZCBpbiBpbnRvIHRoZSBjb29yZGluYXRlIHNwYWNlIG9mIHRoaXMgdGlsZS5cbiAgICAgKi9cbiAgICB0aWxlc0luKHF1ZXJ5R2VvbWV0cnk6IEFycmF5PENvb3JkaW5hdGU+LCBtYXhQaXRjaFNjYWxlRmFjdG9yOiBudW1iZXIpIHtcbiAgICAgICAgY29uc3QgdGlsZVJlc3VsdHMgPSBbXTtcbiAgICAgICAgY29uc3QgaWRzID0gdGhpcy5nZXRJZHMoKTtcblxuICAgICAgICBsZXQgbWluWCA9IEluZmluaXR5O1xuICAgICAgICBsZXQgbWluWSA9IEluZmluaXR5O1xuICAgICAgICBsZXQgbWF4WCA9IC1JbmZpbml0eTtcbiAgICAgICAgbGV0IG1heFkgPSAtSW5maW5pdHk7XG4gICAgICAgIGNvbnN0IHogPSBxdWVyeUdlb21ldHJ5WzBdLnpvb207XG5cbiAgICAgICAgZm9yIChsZXQgayA9IDA7IGsgPCBxdWVyeUdlb21ldHJ5Lmxlbmd0aDsgaysrKSB7XG4gICAgICAgICAgICBjb25zdCBwID0gcXVlcnlHZW9tZXRyeVtrXTtcbiAgICAgICAgICAgIG1pblggPSBNYXRoLm1pbihtaW5YLCBwLmNvbHVtbik7XG4gICAgICAgICAgICBtaW5ZID0gTWF0aC5taW4obWluWSwgcC5yb3cpO1xuICAgICAgICAgICAgbWF4WCA9IE1hdGgubWF4KG1heFgsIHAuY29sdW1uKTtcbiAgICAgICAgICAgIG1heFkgPSBNYXRoLm1heChtYXhZLCBwLnJvdyk7XG4gICAgICAgIH1cblxuXG4gICAgICAgIGZvciAobGV0IGkgPSAwOyBpIDwgaWRzLmxlbmd0aDsgaSsrKSB7XG4gICAgICAgICAgICBjb25zdCB0aWxlID0gdGhpcy5fdGlsZXNbaWRzW2ldXTtcbiAgICAgICAgICAgIGlmICh0aWxlLmhvbGRpbmdGb3JGYWRlKCkpIHtcbiAgICAgICAgICAgICAgICAvLyBUaWxlcyBoZWxkIGZvciBmYWRpbmcgYXJlIGNvdmVyZWQgYnkgdGlsZXMgdGhhdCBhcmUgY2xvc2VyIHRvIGlkZWFsXG4gICAgICAgICAgICAgICAgY29udGludWU7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBjb25zdCB0aWxlSUQgPSB0aWxlLnRpbGVJRDtcbiAgICAgICAgICAgIGNvbnN0IHNjYWxlID0gTWF0aC5wb3coMiwgdGhpcy50cmFuc2Zvcm0uem9vbSAtIHRpbGUudGlsZUlELm92ZXJzY2FsZWRaKTtcbiAgICAgICAgICAgIGNvbnN0IHF1ZXJ5UGFkZGluZyA9IG1heFBpdGNoU2NhbGVGYWN0b3IgKiB0aWxlLnF1ZXJ5UGFkZGluZyAqIEVYVEVOVCAvIHRpbGUudGlsZVNpemUgLyBzY2FsZTtcblxuICAgICAgICAgICAgY29uc3QgdGlsZVNwYWNlQm91bmRzID0gW1xuICAgICAgICAgICAgICAgIGNvb3JkaW5hdGVUb1RpbGVQb2ludCh0aWxlSUQsIG5ldyBDb29yZGluYXRlKG1pblgsIG1pblksIHopKSxcbiAgICAgICAgICAgICAgICBjb29yZGluYXRlVG9UaWxlUG9pbnQodGlsZUlELCBuZXcgQ29vcmRpbmF0ZShtYXhYLCBtYXhZLCB6KSlcbiAgICAgICAgICAgIF07XG5cbiAgICAgICAgICAgIGlmICh0aWxlU3BhY2VCb3VuZHNbMF0ueCAtIHF1ZXJ5UGFkZGluZyA8IEVYVEVOVCAmJiB0aWxlU3BhY2VCb3VuZHNbMF0ueSAtIHF1ZXJ5UGFkZGluZyA8IEVYVEVOVCAmJlxuICAgICAgICAgICAgICAgIHRpbGVTcGFjZUJvdW5kc1sxXS54ICsgcXVlcnlQYWRkaW5nID49IDAgJiYgdGlsZVNwYWNlQm91bmRzWzFdLnkgKyBxdWVyeVBhZGRpbmcgPj0gMCkge1xuXG4gICAgICAgICAgICAgICAgY29uc3QgdGlsZVNwYWNlUXVlcnlHZW9tZXRyeSA9IFtdO1xuICAgICAgICAgICAgICAgIGZvciAobGV0IGogPSAwOyBqIDwgcXVlcnlHZW9tZXRyeS5sZW5ndGg7IGorKykge1xuICAgICAgICAgICAgICAgICAgICB0aWxlU3BhY2VRdWVyeUdlb21ldHJ5LnB1c2goY29vcmRpbmF0ZVRvVGlsZVBvaW50KHRpbGVJRCwgcXVlcnlHZW9tZXRyeVtqXSkpO1xuICAgICAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgICAgIHRpbGVSZXN1bHRzLnB1c2goe1xuICAgICAgICAgICAgICAgICAgICB0aWxlOiB0aWxlLFxuICAgICAgICAgICAgICAgICAgICB0aWxlSUQ6IHRpbGVJRCxcbiAgICAgICAgICAgICAgICAgICAgcXVlcnlHZW9tZXRyeTogW3RpbGVTcGFjZVF1ZXJ5R2VvbWV0cnldLFxuICAgICAgICAgICAgICAgICAgICBzY2FsZTogc2NhbGVcbiAgICAgICAgICAgICAgICB9KTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfVxuXG4gICAgICAgIHJldHVybiB0aWxlUmVzdWx0cztcbiAgICB9XG5cbiAgICBnZXRWaXNpYmxlQ29vcmRpbmF0ZXMoc3ltYm9sTGF5ZXI/OiBib29sZWFuKTogQXJyYXk8T3ZlcnNjYWxlZFRpbGVJRD4ge1xuICAgICAgICBjb25zdCBjb29yZHMgPSB0aGlzLmdldFJlbmRlcmFibGVJZHMoc3ltYm9sTGF5ZXIpLm1hcCgoaWQpID0+IHRoaXMuX3RpbGVzW2lkXS50aWxlSUQpO1xuICAgICAgICBmb3IgKGNvbnN0IGNvb3JkIG9mIGNvb3Jkcykge1xuICAgICAgICAgICAgY29vcmQucG9zTWF0cml4ID0gdGhpcy50cmFuc2Zvcm0uY2FsY3VsYXRlUG9zTWF0cml4KGNvb3JkLnRvVW53cmFwcGVkKCkpO1xuICAgICAgICB9XG4gICAgICAgIHJldHVybiBjb29yZHM7XG4gICAgfVxuXG4gICAgaGFzVHJhbnNpdGlvbigpIHtcbiAgICAgICAgaWYgKHRoaXMuX3NvdXJjZS5oYXNUcmFuc2l0aW9uKCkpIHtcbiAgICAgICAgICAgIHJldHVybiB0cnVlO1xuICAgICAgICB9XG5cbiAgICAgICAgaWYgKGlzUmFzdGVyVHlwZSh0aGlzLl9zb3VyY2UudHlwZSkpIHtcbiAgICAgICAgICAgIGZvciAoY29uc3QgaWQgaW4gdGhpcy5fdGlsZXMpIHtcbiAgICAgICAgICAgICAgICBjb25zdCB0aWxlID0gdGhpcy5fdGlsZXNbaWRdO1xuICAgICAgICAgICAgICAgIGlmICh0aWxlLmZhZGVFbmRUaW1lICE9PSB1bmRlZmluZWQgJiYgdGlsZS5mYWRlRW5kVGltZSA+PSBicm93c2VyLm5vdygpKSB7XG4gICAgICAgICAgICAgICAgICAgIHJldHVybiB0cnVlO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH1cbiAgICAgICAgfVxuXG4gICAgICAgIHJldHVybiBmYWxzZTtcbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBTZXQgdGhlIHZhbHVlIG9mIGEgcGFydGljdWxhciBzdGF0ZSBmb3IgYSBmZWF0dXJlXG4gICAgICogQHByaXZhdGVcbiAgICAgKi9cbiAgICBzZXRGZWF0dXJlU3RhdGUoc291cmNlTGF5ZXI/OiBzdHJpbmcsIGZlYXR1cmU6IG51bWJlciwgc3RhdGU6IE9iamVjdCkge1xuICAgICAgICBzb3VyY2VMYXllciA9IHNvdXJjZUxheWVyIHx8ICdfZ2VvanNvblRpbGVMYXllcic7XG4gICAgICAgIHRoaXMuX3N0YXRlLnVwZGF0ZVN0YXRlKHNvdXJjZUxheWVyLCBmZWF0dXJlLCBzdGF0ZSk7XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogR2V0IHRoZSBlbnRpcmUgc3RhdGUgb2JqZWN0IGZvciBhIGZlYXR1cmVcbiAgICAgKiBAcHJpdmF0ZVxuICAgICAqL1xuICAgIGdldEZlYXR1cmVTdGF0ZShzb3VyY2VMYXllcj86IHN0cmluZywgZmVhdHVyZTogbnVtYmVyKSB7XG4gICAgICAgIHNvdXJjZUxheWVyID0gc291cmNlTGF5ZXIgfHwgJ19nZW9qc29uVGlsZUxheWVyJztcbiAgICAgICAgcmV0dXJuIHRoaXMuX3N0YXRlLmdldFN0YXRlKHNvdXJjZUxheWVyLCBmZWF0dXJlKTtcbiAgICB9XG59XG5cblNvdXJjZUNhY2hlLm1heE92ZXJ6b29taW5nID0gMTA7XG5Tb3VyY2VDYWNoZS5tYXhVbmRlcnpvb21pbmcgPSAzO1xuXG4vKipcbiAqIENvbnZlcnQgYSBjb29yZGluYXRlIHRvIGEgcG9pbnQgaW4gYSB0aWxlJ3MgY29vcmRpbmF0ZSBzcGFjZS5cbiAqIEBwcml2YXRlXG4gKi9cbmZ1bmN0aW9uIGNvb3JkaW5hdGVUb1RpbGVQb2ludCh0aWxlSUQ6IE92ZXJzY2FsZWRUaWxlSUQsIGNvb3JkOiBDb29yZGluYXRlKTogUG9pbnQge1xuICAgIGNvbnN0IHpvb21lZENvb3JkID0gY29vcmQuem9vbVRvKHRpbGVJRC5jYW5vbmljYWwueik7XG4gICAgcmV0dXJuIG5ldyBQb2ludChcbiAgICAgICAgKHpvb21lZENvb3JkLmNvbHVtbiAtICh0aWxlSUQuY2Fub25pY2FsLnggKyB0aWxlSUQud3JhcCAqIE1hdGgucG93KDIsIHRpbGVJRC5jYW5vbmljYWwueikpKSAqIEVYVEVOVCxcbiAgICAgICAgKHpvb21lZENvb3JkLnJvdyAtIHRpbGVJRC5jYW5vbmljYWwueSkgKiBFWFRFTlRcbiAgICApO1xufVxuXG5mdW5jdGlvbiBjb21wYXJlS2V5Wm9vbShhLCBiKSB7XG4gICAgcmV0dXJuICgoYSAlIDMyKSAtIChiICUgMzIpKSB8fCAoYiAtIGEpO1xufVxuXG5mdW5jdGlvbiBpc1Jhc3RlclR5cGUodHlwZSkge1xuICAgIHJldHVybiB0eXBlID09PSAncmFzdGVyJyB8fCB0eXBlID09PSAnaW1hZ2UnIHx8IHR5cGUgPT09ICd2aWRlbyc7XG59XG5cbmV4cG9ydCBkZWZhdWx0IFNvdXJjZUNhY2hlO1xuIiwiLy8gQGZsb3dcblxuaW1wb3J0IFdlYldvcmtlciBmcm9tICcuL3dlYl93b3JrZXInO1xuaW1wb3J0IHR5cGUge1dvcmtlckludGVyZmFjZX0gZnJvbSAnLi93ZWJfd29ya2VyJztcbmltcG9ydCBicm93c2VyIGZyb20gJy4vYnJvd3Nlcic7XG5cbi8qKlxuICogQ29uc3RydWN0cyBhIHdvcmtlciBwb29sLlxuICogQHByaXZhdGVcbiAqL1xuZXhwb3J0IGRlZmF1bHQgY2xhc3MgV29ya2VyUG9vbCB7XG4gICAgc3RhdGljIHdvcmtlckNvdW50OiBudW1iZXI7XG5cbiAgICBhY3RpdmU6IHtbbnVtYmVyXTogYm9vbGVhbn07XG4gICAgd29ya2VyczogQXJyYXk8V29ya2VySW50ZXJmYWNlPjtcblxuICAgIGNvbnN0cnVjdG9yKCkge1xuICAgICAgICB0aGlzLmFjdGl2ZSA9IHt9O1xuICAgIH1cblxuICAgIGFjcXVpcmUobWFwSWQ6IG51bWJlcik6IEFycmF5PFdvcmtlckludGVyZmFjZT4ge1xuICAgICAgICBpZiAoIXRoaXMud29ya2Vycykge1xuICAgICAgICAgICAgLy8gTGF6aWx5IGxvb2sgdXAgdGhlIHZhbHVlIG9mIG1hcGJveGdsLndvcmtlckNvdW50IHNvIHRoYXRcbiAgICAgICAgICAgIC8vIGNsaWVudCBjb2RlIGhhcyBoYWQgYSBjaGFuY2UgdG8gc2V0IGl0LlxuICAgICAgICAgICAgdGhpcy53b3JrZXJzID0gW107XG4gICAgICAgICAgICB3aGlsZSAodGhpcy53b3JrZXJzLmxlbmd0aCA8IFdvcmtlclBvb2wud29ya2VyQ291bnQpIHtcbiAgICAgICAgICAgICAgICB0aGlzLndvcmtlcnMucHVzaChuZXcgV2ViV29ya2VyKCkpO1xuICAgICAgICAgICAgfVxuICAgICAgICB9XG5cbiAgICAgICAgdGhpcy5hY3RpdmVbbWFwSWRdID0gdHJ1ZTtcbiAgICAgICAgcmV0dXJuIHRoaXMud29ya2Vycy5zbGljZSgpO1xuICAgIH1cblxuICAgIHJlbGVhc2UobWFwSWQ6IG51bWJlcikge1xuICAgICAgICBkZWxldGUgdGhpcy5hY3RpdmVbbWFwSWRdO1xuICAgICAgICBpZiAoT2JqZWN0LmtleXModGhpcy5hY3RpdmUpLmxlbmd0aCA9PT0gMCkge1xuICAgICAgICAgICAgdGhpcy53b3JrZXJzLmZvckVhY2goKHcpID0+IHtcbiAgICAgICAgICAgICAgICB3LnRlcm1pbmF0ZSgpO1xuICAgICAgICAgICAgfSk7XG4gICAgICAgICAgICB0aGlzLndvcmtlcnMgPSAobnVsbDogYW55KTtcbiAgICAgICAgfVxuICAgIH1cbn1cblxuV29ya2VyUG9vbC53b3JrZXJDb3VudCA9IE1hdGgubWF4KE1hdGguZmxvb3IoYnJvd3Nlci5oYXJkd2FyZUNvbmN1cnJlbmN5IC8gMiksIDEpO1xuIiwiLy8gQGZsb3dcblxuaW1wb3J0IFdvcmtlclBvb2wgZnJvbSAnLi93b3JrZXJfcG9vbCc7XG5cbmxldCBnbG9iYWxXb3JrZXJQb29sO1xuXG4vKipcbiAqIENyZWF0ZXMgKGlmIG5lY2Vzc2FyeSkgYW5kIHJldHVybnMgdGhlIHNpbmdsZSwgZ2xvYmFsIFdvcmtlclBvb2wgaW5zdGFuY2VcbiAqIHRvIGJlIHNoYXJlZCBhY3Jvc3MgZWFjaCBNYXBcbiAqIEBwcml2YXRlXG4gKi9cbmV4cG9ydCBkZWZhdWx0IGZ1bmN0aW9uIGdldEdsb2JhbFdvcmtlclBvb2wgKCkge1xuICAgIGlmICghZ2xvYmFsV29ya2VyUG9vbCkge1xuICAgICAgICBnbG9iYWxXb3JrZXJQb29sID0gbmV3IFdvcmtlclBvb2woKTtcbiAgICB9XG4gICAgcmV0dXJuIGdsb2JhbFdvcmtlclBvb2w7XG59XG4iLCJcbmltcG9ydCByZWZQcm9wZXJ0aWVzIGZyb20gJy4vdXRpbC9yZWZfcHJvcGVydGllcyc7XG5cbmZ1bmN0aW9uIGRlcmVmKGxheWVyLCBwYXJlbnQpIHtcbiAgICBjb25zdCByZXN1bHQgPSB7fTtcblxuICAgIGZvciAoY29uc3QgayBpbiBsYXllcikge1xuICAgICAgICBpZiAoayAhPT0gJ3JlZicpIHtcbiAgICAgICAgICAgIHJlc3VsdFtrXSA9IGxheWVyW2tdO1xuICAgICAgICB9XG4gICAgfVxuXG4gICAgcmVmUHJvcGVydGllcy5mb3JFYWNoKChrKSA9PiB7XG4gICAgICAgIGlmIChrIGluIHBhcmVudCkge1xuICAgICAgICAgICAgcmVzdWx0W2tdID0gcGFyZW50W2tdO1xuICAgICAgICB9XG4gICAgfSk7XG5cbiAgICByZXR1cm4gcmVzdWx0O1xufVxuXG5leHBvcnQgZGVmYXVsdCBkZXJlZkxheWVycztcblxuLyoqXG4gKiBHaXZlbiBhbiBhcnJheSBvZiBsYXllcnMsIHNvbWUgb2Ygd2hpY2ggbWF5IGNvbnRhaW4gYHJlZmAgcHJvcGVydGllc1xuICogd2hvc2UgdmFsdWUgaXMgdGhlIGBpZGAgb2YgYW5vdGhlciBwcm9wZXJ0eSwgcmV0dXJuIGEgbmV3IGFycmF5IHdoZXJlXG4gKiBzdWNoIGxheWVycyBoYXZlIGJlZW4gYXVnbWVudGVkIHdpdGggdGhlICd0eXBlJywgJ3NvdXJjZScsIGV0Yy4gcHJvcGVydGllc1xuICogZnJvbSB0aGUgcGFyZW50IGxheWVyLCBhbmQgdGhlIGByZWZgIHByb3BlcnR5IGhhcyBiZWVuIHJlbW92ZWQuXG4gKlxuICogVGhlIGlucHV0IGlzIG5vdCBtb2RpZmllZC4gVGhlIG91dHB1dCBtYXkgY29udGFpbiByZWZlcmVuY2VzIHRvIHBvcnRpb25zXG4gKiBvZiB0aGUgaW5wdXQuXG4gKlxuICogQHByaXZhdGVcbiAqIEBwYXJhbSB7QXJyYXk8TGF5ZXI+fSBsYXllcnNcbiAqIEByZXR1cm5zIHtBcnJheTxMYXllcj59XG4gKi9cbmZ1bmN0aW9uIGRlcmVmTGF5ZXJzKGxheWVycykge1xuICAgIGxheWVycyA9IGxheWVycy5zbGljZSgpO1xuXG4gICAgY29uc3QgbWFwID0gT2JqZWN0LmNyZWF0ZShudWxsKTtcbiAgICBmb3IgKGxldCBpID0gMDsgaSA8IGxheWVycy5sZW5ndGg7IGkrKykge1xuICAgICAgICBtYXBbbGF5ZXJzW2ldLmlkXSA9IGxheWVyc1tpXTtcbiAgICB9XG5cbiAgICBmb3IgKGxldCBpID0gMDsgaSA8IGxheWVycy5sZW5ndGg7IGkrKykge1xuICAgICAgICBpZiAoJ3JlZicgaW4gbGF5ZXJzW2ldKSB7XG4gICAgICAgICAgICBsYXllcnNbaV0gPSBkZXJlZihsYXllcnNbaV0sIG1hcFtsYXllcnNbaV0ucmVmXSk7XG4gICAgICAgIH1cbiAgICB9XG5cbiAgICByZXR1cm4gbGF5ZXJzO1xufVxuIiwiXG5pbXBvcnQgaXNFcXVhbCBmcm9tICcuL3V0aWwvZGVlcF9lcXVhbCc7XG5cbmNvbnN0IG9wZXJhdGlvbnMgPSB7XG5cbiAgICAvKlxuICAgICAqIHsgY29tbWFuZDogJ3NldFN0eWxlJywgYXJnczogW3N0eWxlc2hlZXRdIH1cbiAgICAgKi9cbiAgICBzZXRTdHlsZTogJ3NldFN0eWxlJyxcblxuICAgIC8qXG4gICAgICogeyBjb21tYW5kOiAnYWRkTGF5ZXInLCBhcmdzOiBbbGF5ZXIsICdiZWZvcmVMYXllcklkJ10gfVxuICAgICAqL1xuICAgIGFkZExheWVyOiAnYWRkTGF5ZXInLFxuXG4gICAgLypcbiAgICAgKiB7IGNvbW1hbmQ6ICdyZW1vdmVMYXllcicsIGFyZ3M6IFsnbGF5ZXJJZCddIH1cbiAgICAgKi9cbiAgICByZW1vdmVMYXllcjogJ3JlbW92ZUxheWVyJyxcblxuICAgIC8qXG4gICAgICogeyBjb21tYW5kOiAnc2V0UGFpbnRQcm9wZXJ0eScsIGFyZ3M6IFsnbGF5ZXJJZCcsICdwcm9wJywgdmFsdWVdIH1cbiAgICAgKi9cbiAgICBzZXRQYWludFByb3BlcnR5OiAnc2V0UGFpbnRQcm9wZXJ0eScsXG5cbiAgICAvKlxuICAgICAqIHsgY29tbWFuZDogJ3NldExheW91dFByb3BlcnR5JywgYXJnczogWydsYXllcklkJywgJ3Byb3AnLCB2YWx1ZV0gfVxuICAgICAqL1xuICAgIHNldExheW91dFByb3BlcnR5OiAnc2V0TGF5b3V0UHJvcGVydHknLFxuXG4gICAgLypcbiAgICAgKiB7IGNvbW1hbmQ6ICdzZXRGaWx0ZXInLCBhcmdzOiBbJ2xheWVySWQnLCBmaWx0ZXJdIH1cbiAgICAgKi9cbiAgICBzZXRGaWx0ZXI6ICdzZXRGaWx0ZXInLFxuXG4gICAgLypcbiAgICAgKiB7IGNvbW1hbmQ6ICdhZGRTb3VyY2UnLCBhcmdzOiBbJ3NvdXJjZUlkJywgc291cmNlXSB9XG4gICAgICovXG4gICAgYWRkU291cmNlOiAnYWRkU291cmNlJyxcblxuICAgIC8qXG4gICAgICogeyBjb21tYW5kOiAncmVtb3ZlU291cmNlJywgYXJnczogWydzb3VyY2VJZCddIH1cbiAgICAgKi9cbiAgICByZW1vdmVTb3VyY2U6ICdyZW1vdmVTb3VyY2UnLFxuXG4gICAgLypcbiAgICAgKiB7IGNvbW1hbmQ6ICdzZXRHZW9KU09OU291cmNlRGF0YScsIGFyZ3M6IFsnc291cmNlSWQnLCBkYXRhXSB9XG4gICAgICovXG4gICAgc2V0R2VvSlNPTlNvdXJjZURhdGE6ICdzZXRHZW9KU09OU291cmNlRGF0YScsXG5cbiAgICAvKlxuICAgICAqIHsgY29tbWFuZDogJ3NldExheWVyWm9vbVJhbmdlJywgYXJnczogWydsYXllcklkJywgMCwgMjJdIH1cbiAgICAgKi9cbiAgICBzZXRMYXllclpvb21SYW5nZTogJ3NldExheWVyWm9vbVJhbmdlJyxcblxuICAgIC8qXG4gICAgICogeyBjb21tYW5kOiAnc2V0TGF5ZXJQcm9wZXJ0eScsIGFyZ3M6IFsnbGF5ZXJJZCcsICdwcm9wJywgdmFsdWVdIH1cbiAgICAgKi9cbiAgICBzZXRMYXllclByb3BlcnR5OiAnc2V0TGF5ZXJQcm9wZXJ0eScsXG5cbiAgICAvKlxuICAgICAqIHsgY29tbWFuZDogJ3NldENlbnRlcicsIGFyZ3M6IFtbbG9uLCBsYXRdXSB9XG4gICAgICovXG4gICAgc2V0Q2VudGVyOiAnc2V0Q2VudGVyJyxcblxuICAgIC8qXG4gICAgICogeyBjb21tYW5kOiAnc2V0Wm9vbScsIGFyZ3M6IFt6b29tXSB9XG4gICAgICovXG4gICAgc2V0Wm9vbTogJ3NldFpvb20nLFxuXG4gICAgLypcbiAgICAgKiB7IGNvbW1hbmQ6ICdzZXRCZWFyaW5nJywgYXJnczogW2JlYXJpbmddIH1cbiAgICAgKi9cbiAgICBzZXRCZWFyaW5nOiAnc2V0QmVhcmluZycsXG5cbiAgICAvKlxuICAgICAqIHsgY29tbWFuZDogJ3NldFBpdGNoJywgYXJnczogW3BpdGNoXSB9XG4gICAgICovXG4gICAgc2V0UGl0Y2g6ICdzZXRQaXRjaCcsXG5cbiAgICAvKlxuICAgICAqIHsgY29tbWFuZDogJ3NldFNwcml0ZScsIGFyZ3M6IFsnc3ByaXRlVXJsJ10gfVxuICAgICAqL1xuICAgIHNldFNwcml0ZTogJ3NldFNwcml0ZScsXG5cbiAgICAvKlxuICAgICAqIHsgY29tbWFuZDogJ3NldEdseXBocycsIGFyZ3M6IFsnZ2x5cGhzVXJsJ10gfVxuICAgICAqL1xuICAgIHNldEdseXBoczogJ3NldEdseXBocycsXG5cbiAgICAvKlxuICAgICAqIHsgY29tbWFuZDogJ3NldFRyYW5zaXRpb24nLCBhcmdzOiBbdHJhbnNpdGlvbl0gfVxuICAgICAqL1xuICAgIHNldFRyYW5zaXRpb246ICdzZXRUcmFuc2l0aW9uJyxcblxuICAgIC8qXG4gICAgICogeyBjb21tYW5kOiAnc2V0TGlnaHRpbmcnLCBhcmdzOiBbbGlnaHRQcm9wZXJ0aWVzXSB9XG4gICAgICovXG4gICAgc2V0TGlnaHQ6ICdzZXRMaWdodCdcblxufTtcblxuZnVuY3Rpb24gYWRkU291cmNlKHNvdXJjZUlkLCBhZnRlciwgY29tbWFuZHMpIHtcbiAgICBjb21tYW5kcy5wdXNoKHsgY29tbWFuZDogb3BlcmF0aW9ucy5hZGRTb3VyY2UsIGFyZ3M6IFtzb3VyY2VJZCwgYWZ0ZXJbc291cmNlSWRdXSB9KTtcbn1cblxuZnVuY3Rpb24gcmVtb3ZlU291cmNlKHNvdXJjZUlkLCBjb21tYW5kcywgc291cmNlc1JlbW92ZWQpIHtcbiAgICBjb21tYW5kcy5wdXNoKHsgY29tbWFuZDogb3BlcmF0aW9ucy5yZW1vdmVTb3VyY2UsIGFyZ3M6IFtzb3VyY2VJZF0gfSk7XG4gICAgc291cmNlc1JlbW92ZWRbc291cmNlSWRdID0gdHJ1ZTtcbn1cblxuZnVuY3Rpb24gdXBkYXRlU291cmNlKHNvdXJjZUlkLCBhZnRlciwgY29tbWFuZHMsIHNvdXJjZXNSZW1vdmVkKSB7XG4gICAgcmVtb3ZlU291cmNlKHNvdXJjZUlkLCBjb21tYW5kcywgc291cmNlc1JlbW92ZWQpO1xuICAgIGFkZFNvdXJjZShzb3VyY2VJZCwgYWZ0ZXIsIGNvbW1hbmRzKTtcbn1cblxuZnVuY3Rpb24gY2FuVXBkYXRlR2VvSlNPTihiZWZvcmUsIGFmdGVyLCBzb3VyY2VJZCkge1xuICAgIGxldCBwcm9wO1xuICAgIGZvciAocHJvcCBpbiBiZWZvcmVbc291cmNlSWRdKSB7XG4gICAgICAgIGlmICghYmVmb3JlW3NvdXJjZUlkXS5oYXNPd25Qcm9wZXJ0eShwcm9wKSkgY29udGludWU7XG4gICAgICAgIGlmIChwcm9wICE9PSAnZGF0YScgJiYgIWlzRXF1YWwoYmVmb3JlW3NvdXJjZUlkXVtwcm9wXSwgYWZ0ZXJbc291cmNlSWRdW3Byb3BdKSkge1xuICAgICAgICAgICAgcmV0dXJuIGZhbHNlO1xuICAgICAgICB9XG4gICAgfVxuICAgIGZvciAocHJvcCBpbiBhZnRlcltzb3VyY2VJZF0pIHtcbiAgICAgICAgaWYgKCFhZnRlcltzb3VyY2VJZF0uaGFzT3duUHJvcGVydHkocHJvcCkpIGNvbnRpbnVlO1xuICAgICAgICBpZiAocHJvcCAhPT0gJ2RhdGEnICYmICFpc0VxdWFsKGJlZm9yZVtzb3VyY2VJZF1bcHJvcF0sIGFmdGVyW3NvdXJjZUlkXVtwcm9wXSkpIHtcbiAgICAgICAgICAgIHJldHVybiBmYWxzZTtcbiAgICAgICAgfVxuICAgIH1cbiAgICByZXR1cm4gdHJ1ZTtcbn1cblxuZnVuY3Rpb24gZGlmZlNvdXJjZXMoYmVmb3JlLCBhZnRlciwgY29tbWFuZHMsIHNvdXJjZXNSZW1vdmVkKSB7XG4gICAgYmVmb3JlID0gYmVmb3JlIHx8IHt9O1xuICAgIGFmdGVyID0gYWZ0ZXIgfHwge307XG5cbiAgICBsZXQgc291cmNlSWQ7XG5cbiAgICAvLyBsb29rIGZvciBzb3VyY2VzIHRvIHJlbW92ZVxuICAgIGZvciAoc291cmNlSWQgaW4gYmVmb3JlKSB7XG4gICAgICAgIGlmICghYmVmb3JlLmhhc093blByb3BlcnR5KHNvdXJjZUlkKSkgY29udGludWU7XG4gICAgICAgIGlmICghYWZ0ZXIuaGFzT3duUHJvcGVydHkoc291cmNlSWQpKSB7XG4gICAgICAgICAgICByZW1vdmVTb3VyY2Uoc291cmNlSWQsIGNvbW1hbmRzLCBzb3VyY2VzUmVtb3ZlZCk7XG4gICAgICAgIH1cbiAgICB9XG5cbiAgICAvLyBsb29rIGZvciBzb3VyY2VzIHRvIGFkZC91cGRhdGVcbiAgICBmb3IgKHNvdXJjZUlkIGluIGFmdGVyKSB7XG4gICAgICAgIGlmICghYWZ0ZXIuaGFzT3duUHJvcGVydHkoc291cmNlSWQpKSBjb250aW51ZTtcbiAgICAgICAgaWYgKCFiZWZvcmUuaGFzT3duUHJvcGVydHkoc291cmNlSWQpKSB7XG4gICAgICAgICAgICBhZGRTb3VyY2Uoc291cmNlSWQsIGFmdGVyLCBjb21tYW5kcyk7XG4gICAgICAgIH0gZWxzZSBpZiAoIWlzRXF1YWwoYmVmb3JlW3NvdXJjZUlkXSwgYWZ0ZXJbc291cmNlSWRdKSkge1xuICAgICAgICAgICAgaWYgKGJlZm9yZVtzb3VyY2VJZF0udHlwZSA9PT0gJ2dlb2pzb24nICYmIGFmdGVyW3NvdXJjZUlkXS50eXBlID09PSAnZ2VvanNvbicgJiYgY2FuVXBkYXRlR2VvSlNPTihiZWZvcmUsIGFmdGVyLCBzb3VyY2VJZCkpIHtcbiAgICAgICAgICAgICAgICBjb21tYW5kcy5wdXNoKHsgY29tbWFuZDogb3BlcmF0aW9ucy5zZXRHZW9KU09OU291cmNlRGF0YSwgYXJnczogW3NvdXJjZUlkLCBhZnRlcltzb3VyY2VJZF0uZGF0YV0gfSk7XG4gICAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgICAgIC8vIG5vIHVwZGF0ZSBjb21tYW5kLCBtdXN0IHJlbW92ZSB0aGVuIGFkZFxuICAgICAgICAgICAgICAgIHVwZGF0ZVNvdXJjZShzb3VyY2VJZCwgYWZ0ZXIsIGNvbW1hbmRzLCBzb3VyY2VzUmVtb3ZlZCk7XG4gICAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICB9XG59XG5cbmZ1bmN0aW9uIGRpZmZMYXllclByb3BlcnR5Q2hhbmdlcyhiZWZvcmUsIGFmdGVyLCBjb21tYW5kcywgbGF5ZXJJZCwga2xhc3MsIGNvbW1hbmQpIHtcbiAgICBiZWZvcmUgPSBiZWZvcmUgfHwge307XG4gICAgYWZ0ZXIgPSBhZnRlciB8fCB7fTtcblxuICAgIGxldCBwcm9wO1xuXG4gICAgZm9yIChwcm9wIGluIGJlZm9yZSkge1xuICAgICAgICBpZiAoIWJlZm9yZS5oYXNPd25Qcm9wZXJ0eShwcm9wKSkgY29udGludWU7XG4gICAgICAgIGlmICghaXNFcXVhbChiZWZvcmVbcHJvcF0sIGFmdGVyW3Byb3BdKSkge1xuICAgICAgICAgICAgY29tbWFuZHMucHVzaCh7IGNvbW1hbmQ6IGNvbW1hbmQsIGFyZ3M6IFtsYXllcklkLCBwcm9wLCBhZnRlcltwcm9wXSwga2xhc3NdIH0pO1xuICAgICAgICB9XG4gICAgfVxuICAgIGZvciAocHJvcCBpbiBhZnRlcikge1xuICAgICAgICBpZiAoIWFmdGVyLmhhc093blByb3BlcnR5KHByb3ApIHx8IGJlZm9yZS5oYXNPd25Qcm9wZXJ0eShwcm9wKSkgY29udGludWU7XG4gICAgICAgIGlmICghaXNFcXVhbChiZWZvcmVbcHJvcF0sIGFmdGVyW3Byb3BdKSkge1xuICAgICAgICAgICAgY29tbWFuZHMucHVzaCh7IGNvbW1hbmQ6IGNvbW1hbmQsIGFyZ3M6IFtsYXllcklkLCBwcm9wLCBhZnRlcltwcm9wXSwga2xhc3NdIH0pO1xuICAgICAgICB9XG4gICAgfVxufVxuXG5mdW5jdGlvbiBwbHVja0lkKGxheWVyKSB7XG4gICAgcmV0dXJuIGxheWVyLmlkO1xufVxuZnVuY3Rpb24gaW5kZXhCeUlkKGdyb3VwLCBsYXllcikge1xuICAgIGdyb3VwW2xheWVyLmlkXSA9IGxheWVyO1xuICAgIHJldHVybiBncm91cDtcbn1cblxuZnVuY3Rpb24gZGlmZkxheWVycyhiZWZvcmUsIGFmdGVyLCBjb21tYW5kcykge1xuICAgIGJlZm9yZSA9IGJlZm9yZSB8fCBbXTtcbiAgICBhZnRlciA9IGFmdGVyIHx8IFtdO1xuXG4gICAgLy8gb3JkZXIgb2YgbGF5ZXJzIGJ5IGlkXG4gICAgY29uc3QgYmVmb3JlT3JkZXIgPSBiZWZvcmUubWFwKHBsdWNrSWQpO1xuICAgIGNvbnN0IGFmdGVyT3JkZXIgPSBhZnRlci5tYXAocGx1Y2tJZCk7XG5cbiAgICAvLyBpbmRleCBvZiBsYXllciBieSBpZFxuICAgIGNvbnN0IGJlZm9yZUluZGV4ID0gYmVmb3JlLnJlZHVjZShpbmRleEJ5SWQsIHt9KTtcbiAgICBjb25zdCBhZnRlckluZGV4ID0gYWZ0ZXIucmVkdWNlKGluZGV4QnlJZCwge30pO1xuXG4gICAgLy8gdHJhY2sgb3JkZXIgb2YgbGF5ZXJzIGFzIGlmIHRoZXkgaGF2ZSBiZWVuIG11dGF0ZWRcbiAgICBjb25zdCB0cmFja2VyID0gYmVmb3JlT3JkZXIuc2xpY2UoKTtcblxuICAgIC8vIGxheWVycyB0aGF0IGhhdmUgYmVlbiBhZGRlZCBkbyBub3QgbmVlZCB0byBiZSBkaWZmZWRcbiAgICBjb25zdCBjbGVhbiA9IE9iamVjdC5jcmVhdGUobnVsbCk7XG5cbiAgICBsZXQgaSwgZCwgbGF5ZXJJZCwgYmVmb3JlTGF5ZXIsIGFmdGVyTGF5ZXIsIGluc2VydEJlZm9yZUxheWVySWQsIHByb3A7XG5cbiAgICAvLyByZW1vdmUgbGF5ZXJzXG4gICAgZm9yIChpID0gMCwgZCA9IDA7IGkgPCBiZWZvcmVPcmRlci5sZW5ndGg7IGkrKykge1xuICAgICAgICBsYXllcklkID0gYmVmb3JlT3JkZXJbaV07XG4gICAgICAgIGlmICghYWZ0ZXJJbmRleC5oYXNPd25Qcm9wZXJ0eShsYXllcklkKSkge1xuICAgICAgICAgICAgY29tbWFuZHMucHVzaCh7IGNvbW1hbmQ6IG9wZXJhdGlvbnMucmVtb3ZlTGF5ZXIsIGFyZ3M6IFtsYXllcklkXSB9KTtcbiAgICAgICAgICAgIHRyYWNrZXIuc3BsaWNlKHRyYWNrZXIuaW5kZXhPZihsYXllcklkLCBkKSwgMSk7XG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICAvLyBsaW1pdCB3aGVyZSBpbiB0cmFja2VyIHdlIG5lZWQgdG8gbG9vayBmb3IgYSBtYXRjaFxuICAgICAgICAgICAgZCsrO1xuICAgICAgICB9XG4gICAgfVxuXG4gICAgLy8gYWRkL3Jlb3JkZXIgbGF5ZXJzXG4gICAgZm9yIChpID0gMCwgZCA9IDA7IGkgPCBhZnRlck9yZGVyLmxlbmd0aDsgaSsrKSB7XG4gICAgICAgIC8vIHdvcmsgYmFja3dhcmRzIGFzIGluc2VydCBpcyBiZWZvcmUgYW4gZXhpc3RpbmcgbGF5ZXJcbiAgICAgICAgbGF5ZXJJZCA9IGFmdGVyT3JkZXJbYWZ0ZXJPcmRlci5sZW5ndGggLSAxIC0gaV07XG5cbiAgICAgICAgaWYgKHRyYWNrZXJbdHJhY2tlci5sZW5ndGggLSAxIC0gaV0gPT09IGxheWVySWQpIGNvbnRpbnVlO1xuXG4gICAgICAgIGlmIChiZWZvcmVJbmRleC5oYXNPd25Qcm9wZXJ0eShsYXllcklkKSkge1xuICAgICAgICAgICAgLy8gcmVtb3ZlIHRoZSBsYXllciBiZWZvcmUgd2UgaW5zZXJ0IGF0IHRoZSBjb3JyZWN0IHBvc2l0aW9uXG4gICAgICAgICAgICBjb21tYW5kcy5wdXNoKHsgY29tbWFuZDogb3BlcmF0aW9ucy5yZW1vdmVMYXllciwgYXJnczogW2xheWVySWRdIH0pO1xuICAgICAgICAgICAgdHJhY2tlci5zcGxpY2UodHJhY2tlci5sYXN0SW5kZXhPZihsYXllcklkLCB0cmFja2VyLmxlbmd0aCAtIGQpLCAxKTtcbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgIC8vIGxpbWl0IHdoZXJlIGluIHRyYWNrZXIgd2UgbmVlZCB0byBsb29rIGZvciBhIG1hdGNoXG4gICAgICAgICAgICBkKys7XG4gICAgICAgIH1cblxuICAgICAgICAvLyBhZGQgbGF5ZXIgYXQgY29ycmVjdCBwb3NpdGlvblxuICAgICAgICBpbnNlcnRCZWZvcmVMYXllcklkID0gdHJhY2tlclt0cmFja2VyLmxlbmd0aCAtIGldO1xuICAgICAgICBjb21tYW5kcy5wdXNoKHsgY29tbWFuZDogb3BlcmF0aW9ucy5hZGRMYXllciwgYXJnczogW2FmdGVySW5kZXhbbGF5ZXJJZF0sIGluc2VydEJlZm9yZUxheWVySWRdIH0pO1xuICAgICAgICB0cmFja2VyLnNwbGljZSh0cmFja2VyLmxlbmd0aCAtIGksIDAsIGxheWVySWQpO1xuICAgICAgICBjbGVhbltsYXllcklkXSA9IHRydWU7XG4gICAgfVxuXG4gICAgLy8gdXBkYXRlIGxheWVyc1xuICAgIGZvciAoaSA9IDA7IGkgPCBhZnRlck9yZGVyLmxlbmd0aDsgaSsrKSB7XG4gICAgICAgIGxheWVySWQgPSBhZnRlck9yZGVyW2ldO1xuICAgICAgICBiZWZvcmVMYXllciA9IGJlZm9yZUluZGV4W2xheWVySWRdO1xuICAgICAgICBhZnRlckxheWVyID0gYWZ0ZXJJbmRleFtsYXllcklkXTtcblxuICAgICAgICAvLyBubyBuZWVkIHRvIHVwZGF0ZSBpZiBwcmV2aW91c2x5IGFkZGVkIChuZXcgb3IgbW92ZWQpXG4gICAgICAgIGlmIChjbGVhbltsYXllcklkXSB8fCBpc0VxdWFsKGJlZm9yZUxheWVyLCBhZnRlckxheWVyKSkgY29udGludWU7XG5cbiAgICAgICAgLy8gSWYgc291cmNlLCBzb3VyY2UtbGF5ZXIsIG9yIHR5cGUgaGF2ZSBjaGFuZ2VzLCB0aGVuIHJlbW92ZSB0aGUgbGF5ZXJcbiAgICAgICAgLy8gYW5kIGFkZCBpdCBiYWNrICdmcm9tIHNjcmF0Y2gnLlxuICAgICAgICBpZiAoIWlzRXF1YWwoYmVmb3JlTGF5ZXIuc291cmNlLCBhZnRlckxheWVyLnNvdXJjZSkgfHwgIWlzRXF1YWwoYmVmb3JlTGF5ZXJbJ3NvdXJjZS1sYXllciddLCBhZnRlckxheWVyWydzb3VyY2UtbGF5ZXInXSkgfHwgIWlzRXF1YWwoYmVmb3JlTGF5ZXIudHlwZSwgYWZ0ZXJMYXllci50eXBlKSkge1xuICAgICAgICAgICAgY29tbWFuZHMucHVzaCh7IGNvbW1hbmQ6IG9wZXJhdGlvbnMucmVtb3ZlTGF5ZXIsIGFyZ3M6IFtsYXllcklkXSB9KTtcbiAgICAgICAgICAgIC8vIHdlIGFkZCB0aGUgbGF5ZXIgYmFjayBhdCB0aGUgc2FtZSBwb3NpdGlvbiBpdCB3YXMgYWxyZWFkeSBpbiwgc29cbiAgICAgICAgICAgIC8vIHRoZXJlJ3Mgbm8gbmVlZCB0byB1cGRhdGUgdGhlIGB0cmFja2VyYFxuICAgICAgICAgICAgaW5zZXJ0QmVmb3JlTGF5ZXJJZCA9IHRyYWNrZXJbdHJhY2tlci5sYXN0SW5kZXhPZihsYXllcklkKSArIDFdO1xuICAgICAgICAgICAgY29tbWFuZHMucHVzaCh7IGNvbW1hbmQ6IG9wZXJhdGlvbnMuYWRkTGF5ZXIsIGFyZ3M6IFthZnRlckxheWVyLCBpbnNlcnRCZWZvcmVMYXllcklkXSB9KTtcbiAgICAgICAgICAgIGNvbnRpbnVlO1xuICAgICAgICB9XG5cbiAgICAgICAgLy8gbGF5b3V0LCBwYWludCwgZmlsdGVyLCBtaW56b29tLCBtYXh6b29tXG4gICAgICAgIGRpZmZMYXllclByb3BlcnR5Q2hhbmdlcyhiZWZvcmVMYXllci5sYXlvdXQsIGFmdGVyTGF5ZXIubGF5b3V0LCBjb21tYW5kcywgbGF5ZXJJZCwgbnVsbCwgb3BlcmF0aW9ucy5zZXRMYXlvdXRQcm9wZXJ0eSk7XG4gICAgICAgIGRpZmZMYXllclByb3BlcnR5Q2hhbmdlcyhiZWZvcmVMYXllci5wYWludCwgYWZ0ZXJMYXllci5wYWludCwgY29tbWFuZHMsIGxheWVySWQsIG51bGwsIG9wZXJhdGlvbnMuc2V0UGFpbnRQcm9wZXJ0eSk7XG4gICAgICAgIGlmICghaXNFcXVhbChiZWZvcmVMYXllci5maWx0ZXIsIGFmdGVyTGF5ZXIuZmlsdGVyKSkge1xuICAgICAgICAgICAgY29tbWFuZHMucHVzaCh7IGNvbW1hbmQ6IG9wZXJhdGlvbnMuc2V0RmlsdGVyLCBhcmdzOiBbbGF5ZXJJZCwgYWZ0ZXJMYXllci5maWx0ZXJdIH0pO1xuICAgICAgICB9XG4gICAgICAgIGlmICghaXNFcXVhbChiZWZvcmVMYXllci5taW56b29tLCBhZnRlckxheWVyLm1pbnpvb20pIHx8ICFpc0VxdWFsKGJlZm9yZUxheWVyLm1heHpvb20sIGFmdGVyTGF5ZXIubWF4em9vbSkpIHtcbiAgICAgICAgICAgIGNvbW1hbmRzLnB1c2goeyBjb21tYW5kOiBvcGVyYXRpb25zLnNldExheWVyWm9vbVJhbmdlLCBhcmdzOiBbbGF5ZXJJZCwgYWZ0ZXJMYXllci5taW56b29tLCBhZnRlckxheWVyLm1heHpvb21dIH0pO1xuICAgICAgICB9XG5cbiAgICAgICAgLy8gaGFuZGxlIGFsbCBvdGhlciBsYXllciBwcm9wcywgaW5jbHVkaW5nIHBhaW50LipcbiAgICAgICAgZm9yIChwcm9wIGluIGJlZm9yZUxheWVyKSB7XG4gICAgICAgICAgICBpZiAoIWJlZm9yZUxheWVyLmhhc093blByb3BlcnR5KHByb3ApKSBjb250aW51ZTtcbiAgICAgICAgICAgIGlmIChwcm9wID09PSAnbGF5b3V0JyB8fCBwcm9wID09PSAncGFpbnQnIHx8IHByb3AgPT09ICdmaWx0ZXInIHx8XG4gICAgICAgICAgICAgICAgcHJvcCA9PT0gJ21ldGFkYXRhJyB8fCBwcm9wID09PSAnbWluem9vbScgfHwgcHJvcCA9PT0gJ21heHpvb20nKSBjb250aW51ZTtcbiAgICAgICAgICAgIGlmIChwcm9wLmluZGV4T2YoJ3BhaW50LicpID09PSAwKSB7XG4gICAgICAgICAgICAgICAgZGlmZkxheWVyUHJvcGVydHlDaGFuZ2VzKGJlZm9yZUxheWVyW3Byb3BdLCBhZnRlckxheWVyW3Byb3BdLCBjb21tYW5kcywgbGF5ZXJJZCwgcHJvcC5zbGljZSg2KSwgb3BlcmF0aW9ucy5zZXRQYWludFByb3BlcnR5KTtcbiAgICAgICAgICAgIH0gZWxzZSBpZiAoIWlzRXF1YWwoYmVmb3JlTGF5ZXJbcHJvcF0sIGFmdGVyTGF5ZXJbcHJvcF0pKSB7XG4gICAgICAgICAgICAgICAgY29tbWFuZHMucHVzaCh7IGNvbW1hbmQ6IG9wZXJhdGlvbnMuc2V0TGF5ZXJQcm9wZXJ0eSwgYXJnczogW2xheWVySWQsIHByb3AsIGFmdGVyTGF5ZXJbcHJvcF1dIH0pO1xuICAgICAgICAgICAgfVxuICAgICAgICB9XG4gICAgICAgIGZvciAocHJvcCBpbiBhZnRlckxheWVyKSB7XG4gICAgICAgICAgICBpZiAoIWFmdGVyTGF5ZXIuaGFzT3duUHJvcGVydHkocHJvcCkgfHwgYmVmb3JlTGF5ZXIuaGFzT3duUHJvcGVydHkocHJvcCkpIGNvbnRpbnVlO1xuICAgICAgICAgICAgaWYgKHByb3AgPT09ICdsYXlvdXQnIHx8IHByb3AgPT09ICdwYWludCcgfHwgcHJvcCA9PT0gJ2ZpbHRlcicgfHxcbiAgICAgICAgICAgICAgICBwcm9wID09PSAnbWV0YWRhdGEnIHx8IHByb3AgPT09ICdtaW56b29tJyB8fCBwcm9wID09PSAnbWF4em9vbScpIGNvbnRpbnVlO1xuICAgICAgICAgICAgaWYgKHByb3AuaW5kZXhPZigncGFpbnQuJykgPT09IDApIHtcbiAgICAgICAgICAgICAgICBkaWZmTGF5ZXJQcm9wZXJ0eUNoYW5nZXMoYmVmb3JlTGF5ZXJbcHJvcF0sIGFmdGVyTGF5ZXJbcHJvcF0sIGNvbW1hbmRzLCBsYXllcklkLCBwcm9wLnNsaWNlKDYpLCBvcGVyYXRpb25zLnNldFBhaW50UHJvcGVydHkpO1xuICAgICAgICAgICAgfSBlbHNlIGlmICghaXNFcXVhbChiZWZvcmVMYXllcltwcm9wXSwgYWZ0ZXJMYXllcltwcm9wXSkpIHtcbiAgICAgICAgICAgICAgICBjb21tYW5kcy5wdXNoKHsgY29tbWFuZDogb3BlcmF0aW9ucy5zZXRMYXllclByb3BlcnR5LCBhcmdzOiBbbGF5ZXJJZCwgcHJvcCwgYWZ0ZXJMYXllcltwcm9wXV0gfSk7XG4gICAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICB9XG59XG5cbi8qKlxuICogRGlmZiB0d28gc3R5bGVzaGVldFxuICpcbiAqIENyZWF0ZXMgc2VtYW50aWNseSBhd2FyZSBkaWZmcyB0aGF0IGNhbiBlYXNpbHkgYmUgYXBwbGllZCBhdCBydW50aW1lLlxuICogT3BlcmF0aW9ucyBwcm9kdWNlZCBieSB0aGUgZGlmZiBjbG9zZWx5IHJlc2VtYmxlIHRoZSBtYXBib3gtZ2wtanMgQVBJLiBBbnlcbiAqIGVycm9yIGNyZWF0aW5nIHRoZSBkaWZmIHdpbGwgZmFsbCBiYWNrIHRvIHRoZSAnc2V0U3R5bGUnIG9wZXJhdGlvbi5cbiAqXG4gKiBFeGFtcGxlIGRpZmY6XG4gKiBbXG4gKiAgICAgeyBjb21tYW5kOiAnc2V0Q29uc3RhbnQnLCBhcmdzOiBbJ0B3YXRlcicsICcjMDAwMEZGJ10gfSxcbiAqICAgICB7IGNvbW1hbmQ6ICdzZXRQYWludFByb3BlcnR5JywgYXJnczogWydiYWNrZ3JvdW5kJywgJ2JhY2tncm91bmQtY29sb3InLCAnYmxhY2snXSB9XG4gKiBdXG4gKlxuICogQHByaXZhdGVcbiAqIEBwYXJhbSB7Kn0gW2JlZm9yZV0gc3R5bGVzaGVldCB0byBjb21wYXJlIGZyb21cbiAqIEBwYXJhbSB7Kn0gYWZ0ZXIgc3R5bGVzaGVldCB0byBjb21wYXJlIHRvXG4gKiBAcmV0dXJucyBBcnJheSBsaXN0IG9mIGNoYW5nZXNcbiAqL1xuZnVuY3Rpb24gZGlmZlN0eWxlcyhiZWZvcmUsIGFmdGVyKSB7XG4gICAgaWYgKCFiZWZvcmUpIHJldHVybiBbeyBjb21tYW5kOiBvcGVyYXRpb25zLnNldFN0eWxlLCBhcmdzOiBbYWZ0ZXJdIH1dO1xuXG4gICAgbGV0IGNvbW1hbmRzID0gW107XG5cbiAgICB0cnkge1xuICAgICAgICAvLyBIYW5kbGUgY2hhbmdlcyB0byB0b3AtbGV2ZWwgcHJvcGVydGllc1xuICAgICAgICBpZiAoIWlzRXF1YWwoYmVmb3JlLnZlcnNpb24sIGFmdGVyLnZlcnNpb24pKSB7XG4gICAgICAgICAgICByZXR1cm4gW3sgY29tbWFuZDogb3BlcmF0aW9ucy5zZXRTdHlsZSwgYXJnczogW2FmdGVyXSB9XTtcbiAgICAgICAgfVxuICAgICAgICBpZiAoIWlzRXF1YWwoYmVmb3JlLmNlbnRlciwgYWZ0ZXIuY2VudGVyKSkge1xuICAgICAgICAgICAgY29tbWFuZHMucHVzaCh7IGNvbW1hbmQ6IG9wZXJhdGlvbnMuc2V0Q2VudGVyLCBhcmdzOiBbYWZ0ZXIuY2VudGVyXSB9KTtcbiAgICAgICAgfVxuICAgICAgICBpZiAoIWlzRXF1YWwoYmVmb3JlLnpvb20sIGFmdGVyLnpvb20pKSB7XG4gICAgICAgICAgICBjb21tYW5kcy5wdXNoKHsgY29tbWFuZDogb3BlcmF0aW9ucy5zZXRab29tLCBhcmdzOiBbYWZ0ZXIuem9vbV0gfSk7XG4gICAgICAgIH1cbiAgICAgICAgaWYgKCFpc0VxdWFsKGJlZm9yZS5iZWFyaW5nLCBhZnRlci5iZWFyaW5nKSkge1xuICAgICAgICAgICAgY29tbWFuZHMucHVzaCh7IGNvbW1hbmQ6IG9wZXJhdGlvbnMuc2V0QmVhcmluZywgYXJnczogW2FmdGVyLmJlYXJpbmddIH0pO1xuICAgICAgICB9XG4gICAgICAgIGlmICghaXNFcXVhbChiZWZvcmUucGl0Y2gsIGFmdGVyLnBpdGNoKSkge1xuICAgICAgICAgICAgY29tbWFuZHMucHVzaCh7IGNvbW1hbmQ6IG9wZXJhdGlvbnMuc2V0UGl0Y2gsIGFyZ3M6IFthZnRlci5waXRjaF0gfSk7XG4gICAgICAgIH1cbiAgICAgICAgaWYgKCFpc0VxdWFsKGJlZm9yZS5zcHJpdGUsIGFmdGVyLnNwcml0ZSkpIHtcbiAgICAgICAgICAgIGNvbW1hbmRzLnB1c2goeyBjb21tYW5kOiBvcGVyYXRpb25zLnNldFNwcml0ZSwgYXJnczogW2FmdGVyLnNwcml0ZV0gfSk7XG4gICAgICAgIH1cbiAgICAgICAgaWYgKCFpc0VxdWFsKGJlZm9yZS5nbHlwaHMsIGFmdGVyLmdseXBocykpIHtcbiAgICAgICAgICAgIGNvbW1hbmRzLnB1c2goeyBjb21tYW5kOiBvcGVyYXRpb25zLnNldEdseXBocywgYXJnczogW2FmdGVyLmdseXBoc10gfSk7XG4gICAgICAgIH1cbiAgICAgICAgaWYgKCFpc0VxdWFsKGJlZm9yZS50cmFuc2l0aW9uLCBhZnRlci50cmFuc2l0aW9uKSkge1xuICAgICAgICAgICAgY29tbWFuZHMucHVzaCh7IGNvbW1hbmQ6IG9wZXJhdGlvbnMuc2V0VHJhbnNpdGlvbiwgYXJnczogW2FmdGVyLnRyYW5zaXRpb25dIH0pO1xuICAgICAgICB9XG4gICAgICAgIGlmICghaXNFcXVhbChiZWZvcmUubGlnaHQsIGFmdGVyLmxpZ2h0KSkge1xuICAgICAgICAgICAgY29tbWFuZHMucHVzaCh7IGNvbW1hbmQ6IG9wZXJhdGlvbnMuc2V0TGlnaHQsIGFyZ3M6IFthZnRlci5saWdodF0gfSk7XG4gICAgICAgIH1cblxuICAgICAgICAvLyBIYW5kbGUgY2hhbmdlcyB0byBgc291cmNlc2BcbiAgICAgICAgLy8gSWYgYSBzb3VyY2UgaXMgdG8gYmUgcmVtb3ZlZCwgd2UgYWxzby0tYmVmb3JlIHRoZSByZW1vdmVTb3VyY2VcbiAgICAgICAgLy8gY29tbWFuZC0tbmVlZCB0byByZW1vdmUgYWxsIHRoZSBzdHlsZSBsYXllcnMgdGhhdCBkZXBlbmQgb24gaXQuXG4gICAgICAgIGNvbnN0IHNvdXJjZXNSZW1vdmVkID0ge307XG5cbiAgICAgICAgLy8gRmlyc3QgY29sbGVjdCB0aGUge2FkZCxyZW1vdmV9U291cmNlIGNvbW1hbmRzXG4gICAgICAgIGNvbnN0IHJlbW92ZU9yQWRkU291cmNlQ29tbWFuZHMgPSBbXTtcbiAgICAgICAgZGlmZlNvdXJjZXMoYmVmb3JlLnNvdXJjZXMsIGFmdGVyLnNvdXJjZXMsIHJlbW92ZU9yQWRkU291cmNlQ29tbWFuZHMsIHNvdXJjZXNSZW1vdmVkKTtcblxuICAgICAgICAvLyBQdXNoIGEgcmVtb3ZlTGF5ZXIgY29tbWFuZCBmb3IgZWFjaCBzdHlsZSBsYXllciB0aGF0IGRlcGVuZHMgb24gYVxuICAgICAgICAvLyBzb3VyY2UgdGhhdCdzIGJlaW5nIHJlbW92ZWQuXG4gICAgICAgIC8vIEFsc28sIGV4Y2x1ZGUgYW55IHN1Y2ggbGF5ZXJzIHRoZW0gZnJvbSB0aGUgaW5wdXQgdG8gYGRpZmZMYXllcnNgXG4gICAgICAgIC8vIGJlbG93LCBzbyB0aGF0IGRpZmZMYXllcnMgcHJvZHVjZXMgdGhlIGFwcHJvcHJpYXRlIGBhZGRMYXllcnNgXG4gICAgICAgIC8vIGNvbW1hbmRcbiAgICAgICAgY29uc3QgYmVmb3JlTGF5ZXJzID0gW107XG4gICAgICAgIGlmIChiZWZvcmUubGF5ZXJzKSB7XG4gICAgICAgICAgICBiZWZvcmUubGF5ZXJzLmZvckVhY2goKGxheWVyKSA9PiB7XG4gICAgICAgICAgICAgICAgaWYgKHNvdXJjZXNSZW1vdmVkW2xheWVyLnNvdXJjZV0pIHtcbiAgICAgICAgICAgICAgICAgICAgY29tbWFuZHMucHVzaCh7IGNvbW1hbmQ6IG9wZXJhdGlvbnMucmVtb3ZlTGF5ZXIsIGFyZ3M6IFtsYXllci5pZF0gfSk7XG4gICAgICAgICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgICAgICAgICAgYmVmb3JlTGF5ZXJzLnB1c2gobGF5ZXIpO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH0pO1xuICAgICAgICB9XG4gICAgICAgIGNvbW1hbmRzID0gY29tbWFuZHMuY29uY2F0KHJlbW92ZU9yQWRkU291cmNlQ29tbWFuZHMpO1xuXG4gICAgICAgIC8vIEhhbmRsZSBjaGFuZ2VzIHRvIGBsYXllcnNgXG4gICAgICAgIGRpZmZMYXllcnMoYmVmb3JlTGF5ZXJzLCBhZnRlci5sYXllcnMsIGNvbW1hbmRzKTtcblxuICAgIH0gY2F0Y2ggKGUpIHtcbiAgICAgICAgLy8gZmFsbCBiYWNrIHRvIHNldFN0eWxlXG4gICAgICAgIGNvbnNvbGUud2FybignVW5hYmxlIHRvIGNvbXB1dGUgc3R5bGUgZGlmZjonLCBlKTtcbiAgICAgICAgY29tbWFuZHMgPSBbeyBjb21tYW5kOiBvcGVyYXRpb25zLnNldFN0eWxlLCBhcmdzOiBbYWZ0ZXJdIH1dO1xuICAgIH1cblxuICAgIHJldHVybiBjb21tYW5kcztcbn1cblxuZXhwb3J0IGRlZmF1bHQgZGlmZlN0eWxlcztcbmV4cG9ydCB7IG9wZXJhdGlvbnMgfTtcbiIsIi8vIEBmbG93XG5cbi8qKlxuICogR3JpZEluZGV4IGlzIGEgZGF0YSBzdHJ1Y3R1cmUgZm9yIHRlc3RpbmcgdGhlIGludGVyc2VjdGlvbiBvZlxuICogY2lyY2xlcyBhbmQgcmVjdGFuZ2xlcyBpbiBhIDJkIHBsYW5lLlxuICogSXQgaXMgb3B0aW1pemVkIGZvciByYXBpZCBpbnNlcnRpb24gYW5kIHF1ZXJ5aW5nLlxuICogR3JpZEluZGV4IHNwbGl0cyB0aGUgcGxhbmUgaW50byBhIHNldCBvZiBcImNlbGxzXCIgYW5kIGtlZXBzIHRyYWNrXG4gKiBvZiB3aGljaCBnZW9tZXRyaWVzIGludGVyc2VjdCB3aXRoIGVhY2ggY2VsbC4gQXQgcXVlcnkgdGltZSxcbiAqIGZ1bGwgZ2VvbWV0cnkgY29tcGFyaXNvbnMgYXJlIG9ubHkgZG9uZSBmb3IgaXRlbXMgdGhhdCBzaGFyZVxuICogYXQgbGVhc3Qgb25lIGNlbGwuIEFzIGxvbmcgYXMgdGhlIGdlb21ldHJpZXMgYXJlIHJlbGF0aXZlbHlcbiAqIHVuaWZvcm1seSBkaXN0cmlidXRlZCBhY3Jvc3MgdGhlIHBsYW5lLCB0aGlzIGdyZWF0bHkgcmVkdWNlc1xuICogdGhlIG51bWJlciBvZiBjb21wYXJpc29ucyBuZWNlc3NhcnkuXG4gKlxuICogQHByaXZhdGVcbiAqL1xuY2xhc3MgR3JpZEluZGV4IHtcbiAgICBjaXJjbGVLZXlzOiBBcnJheTxhbnk+O1xuICAgIGJveEtleXM6IEFycmF5PGFueT47XG4gICAgYm94Q2VsbHM6IEFycmF5PEFycmF5PG51bWJlcj4+O1xuICAgIGNpcmNsZUNlbGxzOiBBcnJheTxBcnJheTxudW1iZXI+PjtcbiAgICBiYm94ZXM6IEFycmF5PG51bWJlcj47XG4gICAgY2lyY2xlczogQXJyYXk8bnVtYmVyPjtcbiAgICB4Q2VsbENvdW50OiBudW1iZXI7XG4gICAgeUNlbGxDb3VudDogbnVtYmVyO1xuICAgIHdpZHRoOiBudW1iZXI7XG4gICAgaGVpZ2h0OiBudW1iZXI7XG4gICAgeFNjYWxlOiBudW1iZXI7XG4gICAgeVNjYWxlOiBudW1iZXI7XG4gICAgYm94VWlkOiBudW1iZXI7XG4gICAgY2lyY2xlVWlkOiBudW1iZXI7XG5cbiAgICBjb25zdHJ1Y3RvciAod2lkdGg6IG51bWJlciwgaGVpZ2h0OiBudW1iZXIsIGNlbGxTaXplOiBudW1iZXIpIHtcbiAgICAgICAgY29uc3QgYm94Q2VsbHMgPSB0aGlzLmJveENlbGxzID0gW107XG4gICAgICAgIGNvbnN0IGNpcmNsZUNlbGxzID0gdGhpcy5jaXJjbGVDZWxscyA9IFtdO1xuXG4gICAgICAgIC8vIE1vcmUgY2VsbHMgLT4gZmV3ZXIgZ2VvbWV0cmllcyB0byBjaGVjayBwZXIgY2VsbCwgYnV0IGl0ZW1zIHRlbmRcbiAgICAgICAgLy8gdG8gYmUgc3BsaXQgYWNyb3NzIG1vcmUgY2VsbHMuXG4gICAgICAgIC8vIFN3ZWV0IHNwb3QgYWxsb3dzIG1vc3Qgc21hbGwgaXRlbXMgdG8gZml0IGluIG9uZSBjZWxsXG4gICAgICAgIHRoaXMueENlbGxDb3VudCA9IE1hdGguY2VpbCh3aWR0aCAvIGNlbGxTaXplKTtcbiAgICAgICAgdGhpcy55Q2VsbENvdW50ID0gTWF0aC5jZWlsKGhlaWdodCAvIGNlbGxTaXplKTtcblxuICAgICAgICBmb3IgKGxldCBpID0gMDsgaSA8IHRoaXMueENlbGxDb3VudCAqIHRoaXMueUNlbGxDb3VudDsgaSsrKSB7XG4gICAgICAgICAgICBib3hDZWxscy5wdXNoKFtdKTtcbiAgICAgICAgICAgIGNpcmNsZUNlbGxzLnB1c2goW10pO1xuICAgICAgICB9XG4gICAgICAgIHRoaXMuY2lyY2xlS2V5cyA9IFtdO1xuICAgICAgICB0aGlzLmJveEtleXMgPSBbXTtcbiAgICAgICAgdGhpcy5iYm94ZXMgPSBbXTtcbiAgICAgICAgdGhpcy5jaXJjbGVzID0gW107XG5cbiAgICAgICAgdGhpcy53aWR0aCA9IHdpZHRoO1xuICAgICAgICB0aGlzLmhlaWdodCA9IGhlaWdodDtcbiAgICAgICAgdGhpcy54U2NhbGUgPSB0aGlzLnhDZWxsQ291bnQgLyB3aWR0aDtcbiAgICAgICAgdGhpcy55U2NhbGUgPSB0aGlzLnlDZWxsQ291bnQgLyBoZWlnaHQ7XG4gICAgICAgIHRoaXMuYm94VWlkID0gMDtcbiAgICAgICAgdGhpcy5jaXJjbGVVaWQgPSAwO1xuICAgIH1cblxuICAgIGtleXNMZW5ndGgoKSB7XG4gICAgICAgIHJldHVybiB0aGlzLmJveEtleXMubGVuZ3RoICsgdGhpcy5jaXJjbGVLZXlzLmxlbmd0aDtcbiAgICB9XG5cbiAgICBpbnNlcnQoa2V5OiBhbnksIHgxOiBudW1iZXIsIHkxOiBudW1iZXIsIHgyOiBudW1iZXIsIHkyOiBudW1iZXIpIHtcbiAgICAgICAgdGhpcy5fZm9yRWFjaENlbGwoeDEsIHkxLCB4MiwgeTIsIHRoaXMuX2luc2VydEJveENlbGwsIHRoaXMuYm94VWlkKyspO1xuICAgICAgICB0aGlzLmJveEtleXMucHVzaChrZXkpO1xuICAgICAgICB0aGlzLmJib3hlcy5wdXNoKHgxKTtcbiAgICAgICAgdGhpcy5iYm94ZXMucHVzaCh5MSk7XG4gICAgICAgIHRoaXMuYmJveGVzLnB1c2goeDIpO1xuICAgICAgICB0aGlzLmJib3hlcy5wdXNoKHkyKTtcbiAgICB9XG5cbiAgICBpbnNlcnRDaXJjbGUoa2V5OiBhbnksIHg6IG51bWJlciwgeTogbnVtYmVyLCByYWRpdXM6IG51bWJlcikge1xuICAgICAgICAvLyBJbnNlcnQgY2lyY2xlIGludG8gZ3JpZCBmb3IgYWxsIGNlbGxzIGluIHRoZSBjaXJjdW1zY3JpYmluZyBzcXVhcmVcbiAgICAgICAgLy8gSXQncyBtb3JlIHRoYW4gbmVjZXNzYXJ5IChieSBhIGZhY3RvciBvZiA0L1BJKSwgYnV0IGZhc3QgdG8gaW5zZXJ0XG4gICAgICAgIHRoaXMuX2ZvckVhY2hDZWxsKHggLSByYWRpdXMsIHkgLSByYWRpdXMsIHggKyByYWRpdXMsIHkgKyByYWRpdXMsIHRoaXMuX2luc2VydENpcmNsZUNlbGwsIHRoaXMuY2lyY2xlVWlkKyspO1xuICAgICAgICB0aGlzLmNpcmNsZUtleXMucHVzaChrZXkpO1xuICAgICAgICB0aGlzLmNpcmNsZXMucHVzaCh4KTtcbiAgICAgICAgdGhpcy5jaXJjbGVzLnB1c2goeSk7XG4gICAgICAgIHRoaXMuY2lyY2xlcy5wdXNoKHJhZGl1cyk7XG4gICAgfVxuXG4gICAgX2luc2VydEJveENlbGwoeDE6IG51bWJlciwgeTE6IG51bWJlciwgeDI6IG51bWJlciwgeTI6IG51bWJlciwgY2VsbEluZGV4OiBudW1iZXIsIHVpZDogbnVtYmVyKSB7XG4gICAgICAgIHRoaXMuYm94Q2VsbHNbY2VsbEluZGV4XS5wdXNoKHVpZCk7XG4gICAgfVxuXG4gICAgX2luc2VydENpcmNsZUNlbGwoeDE6IG51bWJlciwgeTE6IG51bWJlciwgeDI6IG51bWJlciwgeTI6IG51bWJlciwgY2VsbEluZGV4OiBudW1iZXIsIHVpZDogbnVtYmVyKSAge1xuICAgICAgICB0aGlzLmNpcmNsZUNlbGxzW2NlbGxJbmRleF0ucHVzaCh1aWQpO1xuICAgIH1cblxuICAgIF9xdWVyeSh4MTogbnVtYmVyLCB5MTogbnVtYmVyLCB4MjogbnVtYmVyLCB5MjogbnVtYmVyLCBoaXRUZXN0OiBib29sZWFuLCBwcmVkaWNhdGU/OiBhbnkpIHtcbiAgICAgICAgaWYgKHgyIDwgMCB8fCB4MSA+IHRoaXMud2lkdGggfHwgeTIgPCAwIHx8IHkxID4gdGhpcy5oZWlnaHQpIHtcbiAgICAgICAgICAgIHJldHVybiBoaXRUZXN0ID8gZmFsc2UgOiBbXTtcbiAgICAgICAgfVxuICAgICAgICBjb25zdCByZXN1bHQgPSBbXTtcbiAgICAgICAgaWYgKHgxIDw9IDAgJiYgeTEgPD0gMCAmJiB0aGlzLndpZHRoIDw9IHgyICYmIHRoaXMuaGVpZ2h0IDw9IHkyKSB7XG4gICAgICAgICAgICBpZiAoaGl0VGVzdCkge1xuICAgICAgICAgICAgICAgIHJldHVybiB0cnVlO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgZm9yIChsZXQgYm94VWlkID0gMDsgYm94VWlkIDwgdGhpcy5ib3hLZXlzLmxlbmd0aDsgYm94VWlkKyspIHtcbiAgICAgICAgICAgICAgICByZXN1bHQucHVzaCh7XG4gICAgICAgICAgICAgICAgICAgIGtleTogdGhpcy5ib3hLZXlzW2JveFVpZF0sXG4gICAgICAgICAgICAgICAgICAgIHgxOiB0aGlzLmJib3hlc1tib3hVaWQgKiA0XSxcbiAgICAgICAgICAgICAgICAgICAgeTE6IHRoaXMuYmJveGVzW2JveFVpZCAqIDQgKyAxXSxcbiAgICAgICAgICAgICAgICAgICAgeDI6IHRoaXMuYmJveGVzW2JveFVpZCAqIDQgKyAyXSxcbiAgICAgICAgICAgICAgICAgICAgeTI6IHRoaXMuYmJveGVzW2JveFVpZCAqIDQgKyAzXVxuICAgICAgICAgICAgICAgIH0pO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgZm9yIChsZXQgY2lyY2xlVWlkID0gMDsgY2lyY2xlVWlkIDwgdGhpcy5jaXJjbGVLZXlzLmxlbmd0aDsgY2lyY2xlVWlkKyspIHtcbiAgICAgICAgICAgICAgICBjb25zdCB4ID0gdGhpcy5jaXJjbGVzW2NpcmNsZVVpZCAqIDNdO1xuICAgICAgICAgICAgICAgIGNvbnN0IHkgPSB0aGlzLmNpcmNsZXNbY2lyY2xlVWlkICogMyArIDFdO1xuICAgICAgICAgICAgICAgIGNvbnN0IHJhZGl1cyA9IHRoaXMuY2lyY2xlc1tjaXJjbGVVaWQgKiAzICsgMl07XG4gICAgICAgICAgICAgICAgcmVzdWx0LnB1c2goe1xuICAgICAgICAgICAgICAgICAgICBrZXk6IHRoaXMuY2lyY2xlS2V5c1tjaXJjbGVVaWRdLFxuICAgICAgICAgICAgICAgICAgICB4MTogeCAtIHJhZGl1cyxcbiAgICAgICAgICAgICAgICAgICAgeTE6IHkgLSByYWRpdXMsXG4gICAgICAgICAgICAgICAgICAgIHgyOiB4ICsgcmFkaXVzLFxuICAgICAgICAgICAgICAgICAgICB5MjogeSArIHJhZGl1c1xuICAgICAgICAgICAgICAgIH0pO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgcmV0dXJuIHByZWRpY2F0ZSA/IHJlc3VsdC5maWx0ZXIocHJlZGljYXRlKSA6IHJlc3VsdDtcbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgIGNvbnN0IHF1ZXJ5QXJncyA9IHtcbiAgICAgICAgICAgICAgICBoaXRUZXN0LFxuICAgICAgICAgICAgICAgIHNlZW5VaWRzOiB7IGJveDoge30sIGNpcmNsZToge30gfVxuICAgICAgICAgICAgfTtcbiAgICAgICAgICAgIHRoaXMuX2ZvckVhY2hDZWxsKHgxLCB5MSwgeDIsIHkyLCB0aGlzLl9xdWVyeUNlbGwsIHJlc3VsdCwgcXVlcnlBcmdzLCBwcmVkaWNhdGUpO1xuICAgICAgICAgICAgcmV0dXJuIGhpdFRlc3QgPyByZXN1bHQubGVuZ3RoID4gMCA6IHJlc3VsdDtcbiAgICAgICAgfVxuICAgIH1cblxuICAgIF9xdWVyeUNpcmNsZSh4OiBudW1iZXIsIHk6IG51bWJlciwgcmFkaXVzOiBudW1iZXIsIGhpdFRlc3Q6IGJvb2xlYW4sIHByZWRpY2F0ZT86IGFueSkge1xuICAgICAgICAvLyBJbnNlcnQgY2lyY2xlIGludG8gZ3JpZCBmb3IgYWxsIGNlbGxzIGluIHRoZSBjaXJjdW1zY3JpYmluZyBzcXVhcmVcbiAgICAgICAgLy8gSXQncyBtb3JlIHRoYW4gbmVjZXNzYXJ5IChieSBhIGZhY3RvciBvZiA0L1BJKSwgYnV0IGZhc3QgdG8gaW5zZXJ0XG4gICAgICAgIGNvbnN0IHgxID0geCAtIHJhZGl1cztcbiAgICAgICAgY29uc3QgeDIgPSB4ICsgcmFkaXVzO1xuICAgICAgICBjb25zdCB5MSA9IHkgLSByYWRpdXM7XG4gICAgICAgIGNvbnN0IHkyID0geSArIHJhZGl1cztcbiAgICAgICAgaWYgKHgyIDwgMCB8fCB4MSA+IHRoaXMud2lkdGggfHwgeTIgPCAwIHx8IHkxID4gdGhpcy5oZWlnaHQpIHtcbiAgICAgICAgICAgIHJldHVybiBoaXRUZXN0ID8gZmFsc2UgOiBbXTtcbiAgICAgICAgfVxuXG4gICAgICAgIC8vIEJveCBxdWVyeSBlYXJseSBleGl0cyBpZiB0aGUgYm91bmRpbmcgYm94IGlzIGxhcmdlciB0aGFuIHRoZSBncmlkLCBidXQgd2UgZG9uJ3QgZG9cbiAgICAgICAgLy8gdGhlIGVxdWl2YWxlbnQgY2FsY3VsYXRpb24gZm9yIGNpcmNsZSBxdWVyaWVzIGJlY2F1c2UgZWFybHkgZXhpdCBpcyBsZXNzIGxpa2VseVxuICAgICAgICAvLyBhbmQgdGhlIGNhbGN1bGF0aW9uIGlzIG1vcmUgZXhwZW5zaXZlXG4gICAgICAgIGNvbnN0IHJlc3VsdCA9IFtdO1xuICAgICAgICBjb25zdCBxdWVyeUFyZ3MgPSB7XG4gICAgICAgICAgICBoaXRUZXN0LFxuICAgICAgICAgICAgY2lyY2xlOiB7IHg6IHgsIHk6IHksIHJhZGl1czogcmFkaXVzIH0sXG4gICAgICAgICAgICBzZWVuVWlkczogeyBib3g6IHt9LCBjaXJjbGU6IHt9IH1cbiAgICAgICAgfTtcbiAgICAgICAgdGhpcy5fZm9yRWFjaENlbGwoeDEsIHkxLCB4MiwgeTIsIHRoaXMuX3F1ZXJ5Q2VsbENpcmNsZSwgcmVzdWx0LCBxdWVyeUFyZ3MsIHByZWRpY2F0ZSk7XG4gICAgICAgIHJldHVybiBoaXRUZXN0ID8gcmVzdWx0Lmxlbmd0aCA+IDAgOiByZXN1bHQ7XG4gICAgfVxuXG4gICAgcXVlcnkoeDE6IG51bWJlciwgeTE6IG51bWJlciwgeDI6IG51bWJlciwgeTI6IG51bWJlciwgcHJlZGljYXRlPzogYW55KTogQXJyYXk8YW55PiB7XG4gICAgICAgIHJldHVybiAodGhpcy5fcXVlcnkoeDEsIHkxLCB4MiwgeTIsIGZhbHNlLCBwcmVkaWNhdGUpOiBhbnkpO1xuICAgIH1cblxuICAgIGhpdFRlc3QoeDE6IG51bWJlciwgeTE6IG51bWJlciwgeDI6IG51bWJlciwgeTI6IG51bWJlciwgcHJlZGljYXRlPzogYW55KTogYm9vbGVhbiAge1xuICAgICAgICByZXR1cm4gKHRoaXMuX3F1ZXJ5KHgxLCB5MSwgeDIsIHkyLCB0cnVlLCBwcmVkaWNhdGUpOiBhbnkpO1xuICAgIH1cblxuICAgIGhpdFRlc3RDaXJjbGUoeDogbnVtYmVyLCB5OiBudW1iZXIsIHJhZGl1czogbnVtYmVyLCBwcmVkaWNhdGU/OiBhbnkpOiBib29sZWFuIHtcbiAgICAgICAgcmV0dXJuICh0aGlzLl9xdWVyeUNpcmNsZSh4LCB5LCByYWRpdXMsIHRydWUsIHByZWRpY2F0ZSk6IGFueSk7XG4gICAgfVxuXG4gICAgX3F1ZXJ5Q2VsbCh4MTogbnVtYmVyLCB5MTogbnVtYmVyLCB4MjogbnVtYmVyLCB5MjogbnVtYmVyLCBjZWxsSW5kZXg6IG51bWJlciwgcmVzdWx0OiBhbnksIHF1ZXJ5QXJnczogYW55LCBwcmVkaWNhdGU/OiBhbnkpIHtcbiAgICAgICAgY29uc3Qgc2VlblVpZHMgPSBxdWVyeUFyZ3Muc2VlblVpZHM7XG4gICAgICAgIGNvbnN0IGJveENlbGwgPSB0aGlzLmJveENlbGxzW2NlbGxJbmRleF07XG4gICAgICAgIGlmIChib3hDZWxsICE9PSBudWxsKSB7XG4gICAgICAgICAgICBjb25zdCBiYm94ZXMgPSB0aGlzLmJib3hlcztcbiAgICAgICAgICAgIGZvciAoY29uc3QgYm94VWlkIG9mIGJveENlbGwpIHtcbiAgICAgICAgICAgICAgICBpZiAoIXNlZW5VaWRzLmJveFtib3hVaWRdKSB7XG4gICAgICAgICAgICAgICAgICAgIHNlZW5VaWRzLmJveFtib3hVaWRdID0gdHJ1ZTtcbiAgICAgICAgICAgICAgICAgICAgY29uc3Qgb2Zmc2V0ID0gYm94VWlkICogNDtcbiAgICAgICAgICAgICAgICAgICAgaWYgKCh4MSA8PSBiYm94ZXNbb2Zmc2V0ICsgMl0pICYmXG4gICAgICAgICAgICAgICAgICAgICAgICAoeTEgPD0gYmJveGVzW29mZnNldCArIDNdKSAmJlxuICAgICAgICAgICAgICAgICAgICAgICAgKHgyID49IGJib3hlc1tvZmZzZXQgKyAwXSkgJiZcbiAgICAgICAgICAgICAgICAgICAgICAgICh5MiA+PSBiYm94ZXNbb2Zmc2V0ICsgMV0pICYmXG4gICAgICAgICAgICAgICAgICAgICAgICAoIXByZWRpY2F0ZSB8fCBwcmVkaWNhdGUodGhpcy5ib3hLZXlzW2JveFVpZF0pKSkge1xuICAgICAgICAgICAgICAgICAgICAgICAgaWYgKHF1ZXJ5QXJncy5oaXRUZXN0KSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgcmVzdWx0LnB1c2godHJ1ZSk7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgcmV0dXJuIHRydWU7XG4gICAgICAgICAgICAgICAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHJlc3VsdC5wdXNoKHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAga2V5OiB0aGlzLmJveEtleXNbYm94VWlkXSxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgeDE6IGJib3hlc1tvZmZzZXRdLFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB5MTogYmJveGVzW29mZnNldCArIDFdLFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB4MjogYmJveGVzW29mZnNldCArIDJdLFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB5MjogYmJveGVzW29mZnNldCArIDNdXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgfSk7XG4gICAgICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICAgICAgY29uc3QgY2lyY2xlQ2VsbCA9IHRoaXMuY2lyY2xlQ2VsbHNbY2VsbEluZGV4XTtcbiAgICAgICAgaWYgKGNpcmNsZUNlbGwgIT09IG51bGwpIHtcbiAgICAgICAgICAgIGNvbnN0IGNpcmNsZXMgPSB0aGlzLmNpcmNsZXM7XG4gICAgICAgICAgICBmb3IgKGNvbnN0IGNpcmNsZVVpZCBvZiBjaXJjbGVDZWxsKSB7XG4gICAgICAgICAgICAgICAgaWYgKCFzZWVuVWlkcy5jaXJjbGVbY2lyY2xlVWlkXSkge1xuICAgICAgICAgICAgICAgICAgICBzZWVuVWlkcy5jaXJjbGVbY2lyY2xlVWlkXSA9IHRydWU7XG4gICAgICAgICAgICAgICAgICAgIGNvbnN0IG9mZnNldCA9IGNpcmNsZVVpZCAqIDM7XG4gICAgICAgICAgICAgICAgICAgIGlmICh0aGlzLl9jaXJjbGVBbmRSZWN0Q29sbGlkZShcbiAgICAgICAgICAgICAgICAgICAgICAgIGNpcmNsZXNbb2Zmc2V0XSxcbiAgICAgICAgICAgICAgICAgICAgICAgIGNpcmNsZXNbb2Zmc2V0ICsgMV0sXG4gICAgICAgICAgICAgICAgICAgICAgICBjaXJjbGVzW29mZnNldCArIDJdLFxuICAgICAgICAgICAgICAgICAgICAgICAgeDEsXG4gICAgICAgICAgICAgICAgICAgICAgICB5MSxcbiAgICAgICAgICAgICAgICAgICAgICAgIHgyLFxuICAgICAgICAgICAgICAgICAgICAgICAgeTIpICYmXG4gICAgICAgICAgICAgICAgICAgICAgICAoIXByZWRpY2F0ZSB8fCBwcmVkaWNhdGUodGhpcy5jaXJjbGVLZXlzW2NpcmNsZVVpZF0pKSkge1xuICAgICAgICAgICAgICAgICAgICAgICAgaWYgKHF1ZXJ5QXJncy5oaXRUZXN0KSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgcmVzdWx0LnB1c2godHJ1ZSk7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgcmV0dXJuIHRydWU7XG4gICAgICAgICAgICAgICAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGNvbnN0IHggPSBjaXJjbGVzW29mZnNldF07XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgY29uc3QgeSA9IGNpcmNsZXNbb2Zmc2V0ICsgMV07XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgY29uc3QgcmFkaXVzID0gY2lyY2xlc1tvZmZzZXQgKyAyXTtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICByZXN1bHQucHVzaCh7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGtleTogdGhpcy5jaXJjbGVLZXlzW2NpcmNsZVVpZF0sXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHgxOiB4IC0gcmFkaXVzLFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB5MTogeSAtIHJhZGl1cyxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgeDI6IHggKyByYWRpdXMsXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHkyOiB5ICsgcmFkaXVzXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgfSk7XG4gICAgICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICB9XG5cbiAgICBfcXVlcnlDZWxsQ2lyY2xlKHgxOiBudW1iZXIsIHkxOiBudW1iZXIsIHgyOiBudW1iZXIsIHkyOiBudW1iZXIsIGNlbGxJbmRleDogbnVtYmVyLCByZXN1bHQ6IGFueSwgcXVlcnlBcmdzOiBhbnksIHByZWRpY2F0ZT86IGFueSkge1xuICAgICAgICBjb25zdCBjaXJjbGUgPSBxdWVyeUFyZ3MuY2lyY2xlO1xuICAgICAgICBjb25zdCBzZWVuVWlkcyA9IHF1ZXJ5QXJncy5zZWVuVWlkcztcbiAgICAgICAgY29uc3QgYm94Q2VsbCA9IHRoaXMuYm94Q2VsbHNbY2VsbEluZGV4XTtcbiAgICAgICAgaWYgKGJveENlbGwgIT09IG51bGwpIHtcbiAgICAgICAgICAgIGNvbnN0IGJib3hlcyA9IHRoaXMuYmJveGVzO1xuICAgICAgICAgICAgZm9yIChjb25zdCBib3hVaWQgb2YgYm94Q2VsbCkge1xuICAgICAgICAgICAgICAgIGlmICghc2VlblVpZHMuYm94W2JveFVpZF0pIHtcbiAgICAgICAgICAgICAgICAgICAgc2VlblVpZHMuYm94W2JveFVpZF0gPSB0cnVlO1xuICAgICAgICAgICAgICAgICAgICBjb25zdCBvZmZzZXQgPSBib3hVaWQgKiA0O1xuICAgICAgICAgICAgICAgICAgICBpZiAodGhpcy5fY2lyY2xlQW5kUmVjdENvbGxpZGUoXG4gICAgICAgICAgICAgICAgICAgICAgICBjaXJjbGUueCxcbiAgICAgICAgICAgICAgICAgICAgICAgIGNpcmNsZS55LFxuICAgICAgICAgICAgICAgICAgICAgICAgY2lyY2xlLnJhZGl1cyxcbiAgICAgICAgICAgICAgICAgICAgICAgIGJib3hlc1tvZmZzZXQgKyAwXSxcbiAgICAgICAgICAgICAgICAgICAgICAgIGJib3hlc1tvZmZzZXQgKyAxXSxcbiAgICAgICAgICAgICAgICAgICAgICAgIGJib3hlc1tvZmZzZXQgKyAyXSxcbiAgICAgICAgICAgICAgICAgICAgICAgIGJib3hlc1tvZmZzZXQgKyAzXSkgJiZcbiAgICAgICAgICAgICAgICAgICAgICAgICghcHJlZGljYXRlIHx8IHByZWRpY2F0ZSh0aGlzLmJveEtleXNbYm94VWlkXSkpKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICByZXN1bHQucHVzaCh0cnVlKTtcbiAgICAgICAgICAgICAgICAgICAgICAgIHJldHVybiB0cnVlO1xuICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfVxuICAgICAgICB9XG5cbiAgICAgICAgY29uc3QgY2lyY2xlQ2VsbCA9IHRoaXMuY2lyY2xlQ2VsbHNbY2VsbEluZGV4XTtcbiAgICAgICAgaWYgKGNpcmNsZUNlbGwgIT09IG51bGwpIHtcbiAgICAgICAgICAgIGNvbnN0IGNpcmNsZXMgPSB0aGlzLmNpcmNsZXM7XG4gICAgICAgICAgICBmb3IgKGNvbnN0IGNpcmNsZVVpZCBvZiBjaXJjbGVDZWxsKSB7XG4gICAgICAgICAgICAgICAgaWYgKCFzZWVuVWlkcy5jaXJjbGVbY2lyY2xlVWlkXSkge1xuICAgICAgICAgICAgICAgICAgICBzZWVuVWlkcy5jaXJjbGVbY2lyY2xlVWlkXSA9IHRydWU7XG4gICAgICAgICAgICAgICAgICAgIGNvbnN0IG9mZnNldCA9IGNpcmNsZVVpZCAqIDM7XG4gICAgICAgICAgICAgICAgICAgIGlmICh0aGlzLl9jaXJjbGVzQ29sbGlkZShcbiAgICAgICAgICAgICAgICAgICAgICAgIGNpcmNsZXNbb2Zmc2V0XSxcbiAgICAgICAgICAgICAgICAgICAgICAgIGNpcmNsZXNbb2Zmc2V0ICsgMV0sXG4gICAgICAgICAgICAgICAgICAgICAgICBjaXJjbGVzW29mZnNldCArIDJdLFxuICAgICAgICAgICAgICAgICAgICAgICAgY2lyY2xlLngsXG4gICAgICAgICAgICAgICAgICAgICAgICBjaXJjbGUueSxcbiAgICAgICAgICAgICAgICAgICAgICAgIGNpcmNsZS5yYWRpdXMpICYmXG4gICAgICAgICAgICAgICAgICAgICAgICAoIXByZWRpY2F0ZSB8fCBwcmVkaWNhdGUodGhpcy5jaXJjbGVLZXlzW2NpcmNsZVVpZF0pKSkge1xuICAgICAgICAgICAgICAgICAgICAgICAgcmVzdWx0LnB1c2godHJ1ZSk7XG4gICAgICAgICAgICAgICAgICAgICAgICByZXR1cm4gdHJ1ZTtcbiAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgIH1cblxuICAgIF9mb3JFYWNoQ2VsbCh4MTogbnVtYmVyLCB5MTogbnVtYmVyLCB4MjogbnVtYmVyLCB5MjogbnVtYmVyLCBmbjogYW55LCBhcmcxOiBhbnksIGFyZzI/OiBhbnksIHByZWRpY2F0ZT86IGFueSkge1xuICAgICAgICBjb25zdCBjeDEgPSB0aGlzLl9jb252ZXJ0VG9YQ2VsbENvb3JkKHgxKTtcbiAgICAgICAgY29uc3QgY3kxID0gdGhpcy5fY29udmVydFRvWUNlbGxDb29yZCh5MSk7XG4gICAgICAgIGNvbnN0IGN4MiA9IHRoaXMuX2NvbnZlcnRUb1hDZWxsQ29vcmQoeDIpO1xuICAgICAgICBjb25zdCBjeTIgPSB0aGlzLl9jb252ZXJ0VG9ZQ2VsbENvb3JkKHkyKTtcblxuICAgICAgICBmb3IgKGxldCB4ID0gY3gxOyB4IDw9IGN4MjsgeCsrKSB7XG4gICAgICAgICAgICBmb3IgKGxldCB5ID0gY3kxOyB5IDw9IGN5MjsgeSsrKSB7XG4gICAgICAgICAgICAgICAgY29uc3QgY2VsbEluZGV4ID0gdGhpcy54Q2VsbENvdW50ICogeSArIHg7XG4gICAgICAgICAgICAgICAgaWYgKGZuLmNhbGwodGhpcywgeDEsIHkxLCB4MiwgeTIsIGNlbGxJbmRleCwgYXJnMSwgYXJnMiwgcHJlZGljYXRlKSkgcmV0dXJuO1xuICAgICAgICAgICAgfVxuICAgICAgICB9XG4gICAgfVxuXG4gICAgX2NvbnZlcnRUb1hDZWxsQ29vcmQoeDogbnVtYmVyKSB7XG4gICAgICAgIHJldHVybiBNYXRoLm1heCgwLCBNYXRoLm1pbih0aGlzLnhDZWxsQ291bnQgLSAxLCBNYXRoLmZsb29yKHggKiB0aGlzLnhTY2FsZSkpKTtcbiAgICB9XG5cbiAgICBfY29udmVydFRvWUNlbGxDb29yZCh5OiBudW1iZXIpIHtcbiAgICAgICAgcmV0dXJuIE1hdGgubWF4KDAsIE1hdGgubWluKHRoaXMueUNlbGxDb3VudCAtIDEsIE1hdGguZmxvb3IoeSAqIHRoaXMueVNjYWxlKSkpO1xuICAgIH1cblxuICAgIF9jaXJjbGVzQ29sbGlkZSh4MTogbnVtYmVyLCB5MTogbnVtYmVyLCByMTogbnVtYmVyLCB4MjogbnVtYmVyLCB5MjogbnVtYmVyLCByMjogbnVtYmVyKTogYm9vbGVhbiB7XG4gICAgICAgIGNvbnN0IGR4ID0geDIgLSB4MTtcbiAgICAgICAgY29uc3QgZHkgPSB5MiAtIHkxO1xuICAgICAgICBjb25zdCBib3RoUmFkaWkgPSByMSArIHIyO1xuICAgICAgICByZXR1cm4gKGJvdGhSYWRpaSAqIGJvdGhSYWRpaSkgPiAoZHggKiBkeCArIGR5ICogZHkpO1xuICAgIH1cblxuICAgIF9jaXJjbGVBbmRSZWN0Q29sbGlkZShjaXJjbGVYOiBudW1iZXIsIGNpcmNsZVk6IG51bWJlciwgcmFkaXVzOiBudW1iZXIsIHgxOiBudW1iZXIsIHkxOiBudW1iZXIsIHgyOiBudW1iZXIsIHkyOiBudW1iZXIpOiBib29sZWFuIHtcbiAgICAgICAgY29uc3QgaGFsZlJlY3RXaWR0aCA9ICh4MiAtIHgxKSAvIDI7XG4gICAgICAgIGNvbnN0IGRpc3RYID0gTWF0aC5hYnMoY2lyY2xlWCAtICh4MSArIGhhbGZSZWN0V2lkdGgpKTtcbiAgICAgICAgaWYgKGRpc3RYID4gKGhhbGZSZWN0V2lkdGggKyByYWRpdXMpKSB7XG4gICAgICAgICAgICByZXR1cm4gZmFsc2U7XG4gICAgICAgIH1cblxuICAgICAgICBjb25zdCBoYWxmUmVjdEhlaWdodCA9ICh5MiAtIHkxKSAvIDI7XG4gICAgICAgIGNvbnN0IGRpc3RZID0gTWF0aC5hYnMoY2lyY2xlWSAtICh5MSArIGhhbGZSZWN0SGVpZ2h0KSk7XG4gICAgICAgIGlmIChkaXN0WSA+IChoYWxmUmVjdEhlaWdodCArIHJhZGl1cykpIHtcbiAgICAgICAgICAgIHJldHVybiBmYWxzZTtcbiAgICAgICAgfVxuXG4gICAgICAgIGlmIChkaXN0WCA8PSBoYWxmUmVjdFdpZHRoIHx8IGRpc3RZIDw9IGhhbGZSZWN0SGVpZ2h0KSB7XG4gICAgICAgICAgICByZXR1cm4gdHJ1ZTtcbiAgICAgICAgfVxuXG4gICAgICAgIGNvbnN0IGR4ID0gZGlzdFggLSBoYWxmUmVjdFdpZHRoO1xuICAgICAgICBjb25zdCBkeSA9IGRpc3RZIC0gaGFsZlJlY3RIZWlnaHQ7XG4gICAgICAgIHJldHVybiAoZHggKiBkeCArIGR5ICogZHkgPD0gKHJhZGl1cyAqIHJhZGl1cykpO1xuICAgIH1cbn1cblxuZXhwb3J0IGRlZmF1bHQgR3JpZEluZGV4O1xuIiwiLy8gQGZsb3dcblxuaW1wb3J0IFBvaW50IGZyb20gJ0BtYXBib3gvcG9pbnQtZ2VvbWV0cnknO1xuXG5pbXBvcnQgeyBtYXQ0LCB2ZWM0IH0gZnJvbSAnZ2wtbWF0cml4JztcbmltcG9ydCAqIGFzIHN5bWJvbFNpemUgZnJvbSAnLi9zeW1ib2xfc2l6ZSc7XG5pbXBvcnQgeyBhZGREeW5hbWljQXR0cmlidXRlcyB9IGZyb20gJy4uL2RhdGEvYnVja2V0L3N5bWJvbF9idWNrZXQnO1xuaW1wb3J0IHByb3BlcnRpZXMgZnJvbSAnLi4vc3R5bGUvc3R5bGVfbGF5ZXIvc3ltYm9sX3N0eWxlX2xheWVyX3Byb3BlcnRpZXMnO1xuY29uc3Qgc3ltYm9sTGF5b3V0UHJvcGVydGllcyA9IHByb3BlcnRpZXMubGF5b3V0O1xuXG5pbXBvcnQgdHlwZSBQYWludGVyIGZyb20gJy4uL3JlbmRlci9wYWludGVyJztcbmltcG9ydCB0eXBlIFRyYW5zZm9ybSBmcm9tICcuLi9nZW8vdHJhbnNmb3JtJztcbmltcG9ydCB0eXBlIFN5bWJvbEJ1Y2tldCBmcm9tICcuLi9kYXRhL2J1Y2tldC9zeW1ib2xfYnVja2V0JztcbmltcG9ydCB0eXBlIHtcbiAgICBHbHlwaE9mZnNldEFycmF5LFxuICAgIFN5bWJvbExpbmVWZXJ0ZXhBcnJheSxcbiAgICBTeW1ib2xEeW5hbWljTGF5b3V0QXJyYXlcbn0gZnJvbSAnLi4vZGF0YS9hcnJheV90eXBlcyc7XG5pbXBvcnQgeyBXcml0aW5nTW9kZSB9IGZyb20gJy4uL3N5bWJvbC9zaGFwaW5nJztcblxuZXhwb3J0IHsgdXBkYXRlTGluZUxhYmVscywgZ2V0TGFiZWxQbGFuZU1hdHJpeCwgZ2V0R2xDb29yZE1hdHJpeCwgcHJvamVjdCwgcGxhY2VGaXJzdEFuZExhc3RHbHlwaCwgeHlUcmFuc2Zvcm1NYXQ0IH07XG5cbi8qXG4gKiAjIE92ZXJ2aWV3IG9mIGNvb3JkaW5hdGUgc3BhY2VzXG4gKlxuICogIyMgVGlsZSBjb29yZGluYXRlIHNwYWNlc1xuICogRWFjaCBsYWJlbCBoYXMgYW4gYW5jaG9yLiBTb21lIGxhYmVscyBoYXZlIGNvcnJlc3BvbmRpbmcgbGluZSBnZW9tZXRyaWVzLlxuICogVGhlIHBvaW50cyBmb3IgYm90aCBhbmNob3JzIGFuZCBsaW5lcyBhcmUgc3RvcmVkIGluIHRpbGUgdW5pdHMuIEVhY2ggdGlsZSBoYXMgaXQncyBvd25cbiAqIGNvb3JkaW5hdGUgc3BhY2UgZ29pbmcgZnJvbSAoMCwgMCkgYXQgdGhlIHRvcCBsZWZ0IHRvIChFWFRFTlQsIEVYVEVOVCkgYXQgdGhlIGJvdHRvbSByaWdodC5cbiAqXG4gKiAjIyBHTCBjb29yZGluYXRlIHNwYWNlXG4gKiBBdCB0aGUgZW5kIG9mIGV2ZXJ5dGhpbmcsIHRoZSB2ZXJ0ZXggc2hhZGVyIG5lZWRzIHRvIHByb2R1Y2UgYSBwb3NpdGlvbiBpbiBHTCBjb29yZGluYXRlIHNwYWNlLFxuICogd2hpY2ggaXMgKC0xLCAxKSBhdCB0aGUgdG9wIGxlZnQgYW5kICgxLCAtMSkgaW4gdGhlIGJvdHRvbSByaWdodC5cbiAqXG4gKiAjIyBNYXAgcGl4ZWwgY29vcmRpbmF0ZSBzcGFjZXNcbiAqIEVhY2ggdGlsZSBoYXMgYSBwaXhlbCBjb29yZGluYXRlIHNwYWNlLiBJdCdzIGp1c3QgdGhlIHRpbGUgdW5pdHMgc2NhbGVkIHNvIHRoYXQgb25lIHVuaXQgaXNcbiAqIHdoYXRldmVyIGNvdW50cyBhcyAxIHBpeGVsIGF0IHRoZSBjdXJyZW50IHpvb20uXG4gKiBUaGlzIHNwYWNlIGlzIHVzZWQgZm9yIHBpdGNoLWFsaWdubWVudD1tYXAsIHJvdGF0aW9uLWFsaWdubWVudD1tYXBcbiAqXG4gKiAjIyBSb3RhdGVkIG1hcCBwaXhlbCBjb29yZGluYXRlIHNwYWNlc1xuICogTGlrZSB0aGUgYWJvdmUsIGJ1dCByb3RhdGVkIHNvIGF4aXMgb2YgdGhlIHNwYWNlIGFyZSBhbGlnbmVkIHdpdGggdGhlIHZpZXdwb3J0IGluc3RlYWQgb2YgdGhlIHRpbGUuXG4gKiBUaGlzIHNwYWNlIGlzIHVzZWQgZm9yIHBpdGNoLWFsaWdubWVudD1tYXAsIHJvdGF0aW9uLWFsaWdubWVudD12aWV3cG9ydFxuICpcbiAqICMjIFZpZXdwb3J0IHBpeGVsIGNvb3JkaW5hdGUgc3BhY2VcbiAqICgwLCAwKSBpcyBhdCB0aGUgdG9wIGxlZnQgb2YgdGhlIGNhbnZhcyBhbmQgKHBpeGVsV2lkdGgsIHBpeGVsSGVpZ2h0KSBpcyBhdCB0aGUgYm90dG9tIHJpZ2h0IGNvcm5lclxuICogb2YgdGhlIGNhbnZhcy4gVGhpcyBzcGFjZSBpcyB1c2VkIGZvciBwaXRjaC1hbGlnbm1lbnQ9dmlld3BvcnRcbiAqXG4gKlxuICogIyBWZXJ0ZXggcHJvamVjdGlvblxuICogSXQgZ29lcyByb3VnaGx5IGxpa2UgdGhpczpcbiAqIDEuIHByb2plY3QgdGhlIGFuY2hvciBhbmQgbGluZSBmcm9tIHRpbGUgdW5pdHMgaW50byB0aGUgY29ycmVjdCBsYWJlbCBjb29yZGluYXRlIHNwYWNlXG4gKiAgICAgIC0gbWFwIHBpeGVsIHNwYWNlICAgICAgICAgICBwaXRjaC1hbGlnbm1lbnQ9bWFwICAgICAgICAgcm90YXRpb24tYWxpZ25tZW50PW1hcFxuICogICAgICAtIHJvdGF0ZWQgbWFwIHBpeGVsIHNwYWNlICAgcGl0Y2gtYWxpZ25tZW50PW1hcCAgICAgICAgIHJvdGF0aW9uLWFsaWdubWVudD12aWV3cG9ydFxuICogICAgICAtIHZpZXdwb3J0IHBpeGVsIHNwYWNlICAgICAgcGl0Y2gtYWxpZ25tZW50PXZpZXdwb3J0ICAgIHJvdGF0aW9uLWFsaWdubWVudD0qXG4gKiAyLiBpZiB0aGUgbGFiZWwgZm9sbG93cyBhIGxpbmUsIGZpbmQgdGhlIHBvaW50IGFsb25nIHRoZSBsaW5lIHRoYXQgaXMgdGhlIGNvcnJlY3QgZGlzdGFuY2UgZnJvbSB0aGUgYW5jaG9yLlxuICogMy4gYWRkIHRoZSBnbHlwaCdzIGNvcm5lciBvZmZzZXQgdG8gdGhlIHBvaW50IGZyb20gc3RlcCAzXG4gKiA0LiBjb252ZXJ0IGZyb20gdGhlIGxhYmVsIGNvb3JkaW5hdGUgc3BhY2UgdG8gZ2wgY29vcmRpbmF0ZXNcbiAqXG4gKiBGb3IgaG9yaXpvbnRhbCBsYWJlbHMgd2Ugd2FudCB0byBkbyBzdGVwIDEgaW4gdGhlIHNoYWRlciBmb3IgcGVyZm9ybWFuY2UgcmVhc29ucyAobm8gY3B1IHdvcmspLlxuICogICAgICBUaGlzIGlzIHdoYXQgYHVfbGFiZWxfcGxhbmVfbWF0cml4YCBpcyB1c2VkIGZvci5cbiAqIEZvciBsYWJlbHMgYWxpZ25lZCB3aXRoIGxpbmVzIHdlIGhhdmUgdG8gc3RlcHMgMSBhbmQgMiBvbiB0aGUgY3B1IHNpbmNlIHdlIG5lZWQgYWNjZXNzIHRvIHRoZSBsaW5lIGdlb21ldHJ5LlxuICogICAgICBUaGlzIGlzIHdoYXQgYHVwZGF0ZUxpbmVMYWJlbHMoLi4uKWAgZG9lcy5cbiAqICAgICAgU2luY2UgdGhlIGNvbnZlcnNpb24gaXMgaGFuZGxlZCBvbiB0aGUgY3B1IHdlIGp1c3Qgc2V0IGB1X2xhYmVsX3BsYW5lX21hdHJpeGAgdG8gYW4gaWRlbnRpdHkgbWF0cml4LlxuICpcbiAqIFN0ZXBzIDMgYW5kIDQgYXJlIGRvbmUgaW4gdGhlIHNoYWRlcnMgZm9yIGFsbCBsYWJlbHMuXG4gKi9cblxuLypcbiAqIFJldHVybnMgYSBtYXRyaXggZm9yIGNvbnZlcnRpbmcgZnJvbSB0aWxlIHVuaXRzIHRvIHRoZSBjb3JyZWN0IGxhYmVsIGNvb3JkaW5hdGUgc3BhY2UuXG4gKi9cbmZ1bmN0aW9uIGdldExhYmVsUGxhbmVNYXRyaXgocG9zTWF0cml4OiBtYXQ0LFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICBwaXRjaFdpdGhNYXA6IGJvb2xlYW4sXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgIHJvdGF0ZVdpdGhNYXA6IGJvb2xlYW4sXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgIHRyYW5zZm9ybTogVHJhbnNmb3JtLFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICBwaXhlbHNUb1RpbGVVbml0czogbnVtYmVyKSB7XG4gICAgY29uc3QgbSA9IG1hdDQuaWRlbnRpdHkobmV3IEZsb2F0MzJBcnJheSgxNikpO1xuICAgIGlmIChwaXRjaFdpdGhNYXApIHtcbiAgICAgICAgbWF0NC5pZGVudGl0eShtKTtcbiAgICAgICAgbWF0NC5zY2FsZShtLCBtLCBbMSAvIHBpeGVsc1RvVGlsZVVuaXRzLCAxIC8gcGl4ZWxzVG9UaWxlVW5pdHMsIDFdKTtcbiAgICAgICAgaWYgKCFyb3RhdGVXaXRoTWFwKSB7XG4gICAgICAgICAgICBtYXQ0LnJvdGF0ZVoobSwgbSwgdHJhbnNmb3JtLmFuZ2xlKTtcbiAgICAgICAgfVxuICAgIH0gZWxzZSB7XG4gICAgICAgIG1hdDQuc2NhbGUobSwgbSwgW3RyYW5zZm9ybS53aWR0aCAvIDIsIC10cmFuc2Zvcm0uaGVpZ2h0IC8gMiwgMV0pO1xuICAgICAgICBtYXQ0LnRyYW5zbGF0ZShtLCBtLCBbMSwgLTEsIDBdKTtcbiAgICAgICAgbWF0NC5tdWx0aXBseShtLCBtLCBwb3NNYXRyaXgpO1xuICAgIH1cbiAgICByZXR1cm4gbTtcbn1cblxuLypcbiAqIFJldHVybnMgYSBtYXRyaXggZm9yIGNvbnZlcnRpbmcgZnJvbSB0aGUgY29ycmVjdCBsYWJlbCBjb29yZGluYXRlIHNwYWNlIHRvIGdsIGNvb3Jkcy5cbiAqL1xuZnVuY3Rpb24gZ2V0R2xDb29yZE1hdHJpeChwb3NNYXRyaXg6IG1hdDQsXG4gICAgICAgICAgICAgICAgICAgICAgICAgIHBpdGNoV2l0aE1hcDogYm9vbGVhbixcbiAgICAgICAgICAgICAgICAgICAgICAgICAgcm90YXRlV2l0aE1hcDogYm9vbGVhbixcbiAgICAgICAgICAgICAgICAgICAgICAgICAgdHJhbnNmb3JtOiBUcmFuc2Zvcm0sXG4gICAgICAgICAgICAgICAgICAgICAgICAgIHBpeGVsc1RvVGlsZVVuaXRzOiBudW1iZXIpIHtcbiAgICBjb25zdCBtID0gbWF0NC5pZGVudGl0eShuZXcgRmxvYXQzMkFycmF5KDE2KSk7XG4gICAgaWYgKHBpdGNoV2l0aE1hcCkge1xuICAgICAgICBtYXQ0Lm11bHRpcGx5KG0sIG0sIHBvc01hdHJpeCk7XG4gICAgICAgIG1hdDQuc2NhbGUobSwgbSwgW3BpeGVsc1RvVGlsZVVuaXRzLCBwaXhlbHNUb1RpbGVVbml0cywgMV0pO1xuICAgICAgICBpZiAoIXJvdGF0ZVdpdGhNYXApIHtcbiAgICAgICAgICAgIG1hdDQucm90YXRlWihtLCBtLCAtdHJhbnNmb3JtLmFuZ2xlKTtcbiAgICAgICAgfVxuICAgIH0gZWxzZSB7XG4gICAgICAgIG1hdDQuc2NhbGUobSwgbSwgWzEsIC0xLCAxXSk7XG4gICAgICAgIG1hdDQudHJhbnNsYXRlKG0sIG0sIFstMSwgLTEsIDBdKTtcbiAgICAgICAgbWF0NC5zY2FsZShtLCBtLCBbMiAvIHRyYW5zZm9ybS53aWR0aCwgMiAvIHRyYW5zZm9ybS5oZWlnaHQsIDFdKTtcbiAgICB9XG4gICAgcmV0dXJuIG07XG59XG5cbmZ1bmN0aW9uIHByb2plY3QocG9pbnQ6IFBvaW50LCBtYXRyaXg6IG1hdDQpIHtcbiAgICBjb25zdCBwb3MgPSBbcG9pbnQueCwgcG9pbnQueSwgMCwgMV07XG4gICAgeHlUcmFuc2Zvcm1NYXQ0KHBvcywgcG9zLCBtYXRyaXgpO1xuICAgIGNvbnN0IHcgPSBwb3NbM107XG4gICAgcmV0dXJuIHtcbiAgICAgICAgcG9pbnQ6IG5ldyBQb2ludChwb3NbMF0gLyB3LCBwb3NbMV0gLyB3KSxcbiAgICAgICAgc2lnbmVkRGlzdGFuY2VGcm9tQ2FtZXJhOiB3XG4gICAgfTtcbn1cblxuZnVuY3Rpb24gaXNWaXNpYmxlKGFuY2hvclBvczogW251bWJlciwgbnVtYmVyLCBudW1iZXIsIG51bWJlcl0sXG4gICAgICAgICAgICAgICAgICAgY2xpcHBpbmdCdWZmZXI6IFtudW1iZXIsIG51bWJlcl0pIHtcbiAgICBjb25zdCB4ID0gYW5jaG9yUG9zWzBdIC8gYW5jaG9yUG9zWzNdO1xuICAgIGNvbnN0IHkgPSBhbmNob3JQb3NbMV0gLyBhbmNob3JQb3NbM107XG4gICAgY29uc3QgaW5QYWRkZWRWaWV3cG9ydCA9IChcbiAgICAgICAgeCA+PSAtY2xpcHBpbmdCdWZmZXJbMF0gJiZcbiAgICAgICAgeCA8PSBjbGlwcGluZ0J1ZmZlclswXSAmJlxuICAgICAgICB5ID49IC1jbGlwcGluZ0J1ZmZlclsxXSAmJlxuICAgICAgICB5IDw9IGNsaXBwaW5nQnVmZmVyWzFdKTtcbiAgICByZXR1cm4gaW5QYWRkZWRWaWV3cG9ydDtcbn1cblxuLypcbiAqICBVcGRhdGUgdGhlIGBkeW5hbWljTGF5b3V0VmVydGV4QnVmZmVyYCBmb3IgdGhlIGJ1ZmZlciB3aXRoIHRoZSBjb3JyZWN0IGdseXBoIHBvc2l0aW9ucyBmb3IgdGhlIGN1cnJlbnQgbWFwIHZpZXcuXG4gKiAgVGhpcyBpcyBvbmx5IHJ1biBvbiBsYWJlbHMgdGhhdCBhcmUgYWxpZ25lZCB3aXRoIGxpbmVzLiBIb3Jpem9udGFsIGxhYmVscyBhcmUgaGFuZGxlZCBlbnRpcmVseSBpbiB0aGUgc2hhZGVyLlxuICovXG5mdW5jdGlvbiB1cGRhdGVMaW5lTGFiZWxzKGJ1Y2tldDogU3ltYm9sQnVja2V0LFxuICAgICAgICAgICAgICAgICAgICAgICAgICBwb3NNYXRyaXg6IG1hdDQsXG4gICAgICAgICAgICAgICAgICAgICAgICAgIHBhaW50ZXI6IFBhaW50ZXIsXG4gICAgICAgICAgICAgICAgICAgICAgICAgIGlzVGV4dDogYm9vbGVhbixcbiAgICAgICAgICAgICAgICAgICAgICAgICAgbGFiZWxQbGFuZU1hdHJpeDogbWF0NCxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgZ2xDb29yZE1hdHJpeDogbWF0NCxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgcGl0Y2hXaXRoTWFwOiBib29sZWFuLFxuICAgICAgICAgICAgICAgICAgICAgICAgICBrZWVwVXByaWdodDogYm9vbGVhbikge1xuXG4gICAgY29uc3Qgc2l6ZURhdGEgPSBpc1RleHQgPyBidWNrZXQudGV4dFNpemVEYXRhIDogYnVja2V0Lmljb25TaXplRGF0YTtcbiAgICBjb25zdCBwYXJ0aWFsbHlFdmFsdWF0ZWRTaXplID0gc3ltYm9sU2l6ZS5ldmFsdWF0ZVNpemVGb3Jab29tKHNpemVEYXRhLCBwYWludGVyLnRyYW5zZm9ybS56b29tLFxuICAgICAgICBzeW1ib2xMYXlvdXRQcm9wZXJ0aWVzLnByb3BlcnRpZXNbaXNUZXh0ID8gJ3RleHQtc2l6ZScgOiAnaWNvbi1zaXplJ10pO1xuXG4gICAgY29uc3QgY2xpcHBpbmdCdWZmZXIgPSBbMjU2IC8gcGFpbnRlci53aWR0aCAqIDIgKyAxLCAyNTYgLyBwYWludGVyLmhlaWdodCAqIDIgKyAxXTtcblxuICAgIGNvbnN0IGR5bmFtaWNMYXlvdXRWZXJ0ZXhBcnJheSA9IGlzVGV4dCA/XG4gICAgICAgIGJ1Y2tldC50ZXh0LmR5bmFtaWNMYXlvdXRWZXJ0ZXhBcnJheSA6XG4gICAgICAgIGJ1Y2tldC5pY29uLmR5bmFtaWNMYXlvdXRWZXJ0ZXhBcnJheTtcbiAgICBkeW5hbWljTGF5b3V0VmVydGV4QXJyYXkuY2xlYXIoKTtcblxuICAgIGNvbnN0IGxpbmVWZXJ0ZXhBcnJheSA9IGJ1Y2tldC5saW5lVmVydGV4QXJyYXk7XG4gICAgY29uc3QgcGxhY2VkU3ltYm9scyA9IGlzVGV4dCA/IGJ1Y2tldC50ZXh0LnBsYWNlZFN5bWJvbEFycmF5IDogYnVja2V0Lmljb24ucGxhY2VkU3ltYm9sQXJyYXk7XG5cbiAgICBjb25zdCBhc3BlY3RSYXRpbyA9IHBhaW50ZXIudHJhbnNmb3JtLndpZHRoIC8gcGFpbnRlci50cmFuc2Zvcm0uaGVpZ2h0O1xuXG4gICAgbGV0IHVzZVZlcnRpY2FsID0gZmFsc2U7XG5cbiAgICBmb3IgKGxldCBzID0gMDsgcyA8IHBsYWNlZFN5bWJvbHMubGVuZ3RoOyBzKyspIHtcbiAgICAgICAgY29uc3Qgc3ltYm9sOiBhbnkgPSBwbGFjZWRTeW1ib2xzLmdldChzKTtcbiAgICAgICAgLy8gRG9uJ3QgZG8gY2FsY3VsYXRpb25zIGZvciB2ZXJ0aWNhbCBnbHlwaHMgdW5sZXNzIHRoZSBwcmV2aW91cyBzeW1ib2wgd2FzIGhvcml6b250YWxcbiAgICAgICAgLy8gYW5kIHdlIGRldGVybWluZWQgdGhhdCB2ZXJ0aWNhbCBnbHlwaHMgd2VyZSBuZWNlc3NhcnkuXG4gICAgICAgIC8vIEFsc28gZG9uJ3QgZG8gY2FsY3VsYXRpb25zIGZvciBzeW1ib2xzIHRoYXQgYXJlIGNvbGxpZGVkIGFuZCBmdWxseSBmYWRlZCBvdXRcbiAgICAgICAgaWYgKHN5bWJvbC5oaWRkZW4gfHwgc3ltYm9sLndyaXRpbmdNb2RlID09PSBXcml0aW5nTW9kZS52ZXJ0aWNhbCAmJiAhdXNlVmVydGljYWwpIHtcbiAgICAgICAgICAgIGhpZGVHbHlwaHMoc3ltYm9sLm51bUdseXBocywgZHluYW1pY0xheW91dFZlcnRleEFycmF5KTtcbiAgICAgICAgICAgIGNvbnRpbnVlO1xuICAgICAgICB9XG4gICAgICAgIC8vIEF3a3dhcmQuLi4gYnV0IHdlJ3JlIGNvdW50aW5nIG9uIHRoZSBwYWlyZWQgXCJ2ZXJ0aWNhbFwiIHN5bWJvbCBjb21pbmcgaW1tZWRpYXRlbHkgYWZ0ZXIgaXRzIGhvcml6b250YWwgY291bnRlcnBhcnRcbiAgICAgICAgdXNlVmVydGljYWwgPSBmYWxzZTtcblxuICAgICAgICBjb25zdCBhbmNob3JQb3MgPSBbc3ltYm9sLmFuY2hvclgsIHN5bWJvbC5hbmNob3JZLCAwLCAxXTtcbiAgICAgICAgdmVjNC50cmFuc2Zvcm1NYXQ0KGFuY2hvclBvcywgYW5jaG9yUG9zLCBwb3NNYXRyaXgpO1xuXG4gICAgICAgIC8vIERvbid0IGJvdGhlciBjYWxjdWxhdGluZyB0aGUgY29ycmVjdCBwb2ludCBmb3IgaW52aXNpYmxlIGxhYmVscy5cbiAgICAgICAgaWYgKCFpc1Zpc2libGUoYW5jaG9yUG9zLCBjbGlwcGluZ0J1ZmZlcikpIHtcbiAgICAgICAgICAgIGhpZGVHbHlwaHMoc3ltYm9sLm51bUdseXBocywgZHluYW1pY0xheW91dFZlcnRleEFycmF5KTtcbiAgICAgICAgICAgIGNvbnRpbnVlO1xuICAgICAgICB9XG5cbiAgICAgICAgY29uc3QgY2FtZXJhVG9BbmNob3JEaXN0YW5jZSA9IGFuY2hvclBvc1szXTtcbiAgICAgICAgY29uc3QgcGVyc3BlY3RpdmVSYXRpbyA9IDAuNSArIDAuNSAqIChjYW1lcmFUb0FuY2hvckRpc3RhbmNlIC8gcGFpbnRlci50cmFuc2Zvcm0uY2FtZXJhVG9DZW50ZXJEaXN0YW5jZSk7XG5cbiAgICAgICAgY29uc3QgZm9udFNpemUgPSBzeW1ib2xTaXplLmV2YWx1YXRlU2l6ZUZvckZlYXR1cmUoc2l6ZURhdGEsIHBhcnRpYWxseUV2YWx1YXRlZFNpemUsIHN5bWJvbCk7XG4gICAgICAgIGNvbnN0IHBpdGNoU2NhbGVkRm9udFNpemUgPSBwaXRjaFdpdGhNYXAgP1xuICAgICAgICAgICAgZm9udFNpemUgKiBwZXJzcGVjdGl2ZVJhdGlvIDpcbiAgICAgICAgICAgIGZvbnRTaXplIC8gcGVyc3BlY3RpdmVSYXRpbztcblxuICAgICAgICBjb25zdCB0aWxlQW5jaG9yUG9pbnQgPSBuZXcgUG9pbnQoc3ltYm9sLmFuY2hvclgsIHN5bWJvbC5hbmNob3JZKTtcbiAgICAgICAgY29uc3QgYW5jaG9yUG9pbnQgPSBwcm9qZWN0KHRpbGVBbmNob3JQb2ludCwgbGFiZWxQbGFuZU1hdHJpeCkucG9pbnQ7XG4gICAgICAgIGNvbnN0IHByb2plY3Rpb25DYWNoZSA9IHt9O1xuXG4gICAgICAgIGNvbnN0IHBsYWNlVW5mbGlwcGVkOiBhbnkgPSBwbGFjZUdseXBoc0Fsb25nTGluZShzeW1ib2wsIHBpdGNoU2NhbGVkRm9udFNpemUsIGZhbHNlIC8qdW5mbGlwcGVkKi8sIGtlZXBVcHJpZ2h0LCBwb3NNYXRyaXgsIGxhYmVsUGxhbmVNYXRyaXgsIGdsQ29vcmRNYXRyaXgsXG4gICAgICAgICAgICBidWNrZXQuZ2x5cGhPZmZzZXRBcnJheSwgbGluZVZlcnRleEFycmF5LCBkeW5hbWljTGF5b3V0VmVydGV4QXJyYXksIGFuY2hvclBvaW50LCB0aWxlQW5jaG9yUG9pbnQsIHByb2plY3Rpb25DYWNoZSwgYXNwZWN0UmF0aW8pO1xuXG4gICAgICAgIHVzZVZlcnRpY2FsID0gcGxhY2VVbmZsaXBwZWQudXNlVmVydGljYWw7XG5cbiAgICAgICAgaWYgKHBsYWNlVW5mbGlwcGVkLm5vdEVub3VnaFJvb20gfHwgdXNlVmVydGljYWwgfHxcbiAgICAgICAgICAgIChwbGFjZVVuZmxpcHBlZC5uZWVkc0ZsaXBwaW5nICYmXG4gICAgICAgICAgICAgcGxhY2VHbHlwaHNBbG9uZ0xpbmUoc3ltYm9sLCBwaXRjaFNjYWxlZEZvbnRTaXplLCB0cnVlIC8qZmxpcHBlZCovLCBrZWVwVXByaWdodCwgcG9zTWF0cml4LCBsYWJlbFBsYW5lTWF0cml4LCBnbENvb3JkTWF0cml4LFxuICAgICAgICAgICAgICAgICBidWNrZXQuZ2x5cGhPZmZzZXRBcnJheSwgbGluZVZlcnRleEFycmF5LCBkeW5hbWljTGF5b3V0VmVydGV4QXJyYXksIGFuY2hvclBvaW50LCB0aWxlQW5jaG9yUG9pbnQsIHByb2plY3Rpb25DYWNoZSwgYXNwZWN0UmF0aW8pLm5vdEVub3VnaFJvb20pKSB7XG4gICAgICAgICAgICBoaWRlR2x5cGhzKHN5bWJvbC5udW1HbHlwaHMsIGR5bmFtaWNMYXlvdXRWZXJ0ZXhBcnJheSk7XG4gICAgICAgIH1cbiAgICB9XG5cbiAgICBpZiAoaXNUZXh0KSB7XG4gICAgICAgIGJ1Y2tldC50ZXh0LmR5bmFtaWNMYXlvdXRWZXJ0ZXhCdWZmZXIudXBkYXRlRGF0YShkeW5hbWljTGF5b3V0VmVydGV4QXJyYXkpO1xuICAgIH0gZWxzZSB7XG4gICAgICAgIGJ1Y2tldC5pY29uLmR5bmFtaWNMYXlvdXRWZXJ0ZXhCdWZmZXIudXBkYXRlRGF0YShkeW5hbWljTGF5b3V0VmVydGV4QXJyYXkpO1xuICAgIH1cbn1cblxuZnVuY3Rpb24gcGxhY2VGaXJzdEFuZExhc3RHbHlwaChmb250U2NhbGU6IG51bWJlciwgZ2x5cGhPZmZzZXRBcnJheTogR2x5cGhPZmZzZXRBcnJheSwgbGluZU9mZnNldFg6IG51bWJlciwgbGluZU9mZnNldFk6IG51bWJlciwgZmxpcDogYm9vbGVhbiwgYW5jaG9yUG9pbnQ6IFBvaW50LCB0aWxlQW5jaG9yUG9pbnQ6IFBvaW50LCBzeW1ib2w6IGFueSwgbGluZVZlcnRleEFycmF5OiBTeW1ib2xMaW5lVmVydGV4QXJyYXksIGxhYmVsUGxhbmVNYXRyaXg6IG1hdDQsIHByb2plY3Rpb25DYWNoZTogYW55LCByZXR1cm5UaWxlRGlzdGFuY2U6IGJvb2xlYW4pIHtcbiAgICBjb25zdCBnbHlwaEVuZEluZGV4ID0gc3ltYm9sLmdseXBoU3RhcnRJbmRleCArIHN5bWJvbC5udW1HbHlwaHM7XG4gICAgY29uc3QgbGluZVN0YXJ0SW5kZXggPSBzeW1ib2wubGluZVN0YXJ0SW5kZXg7XG4gICAgY29uc3QgbGluZUVuZEluZGV4ID0gc3ltYm9sLmxpbmVTdGFydEluZGV4ICsgc3ltYm9sLmxpbmVMZW5ndGg7XG5cbiAgICBjb25zdCBmaXJzdEdseXBoT2Zmc2V0ID0gZ2x5cGhPZmZzZXRBcnJheS5nZXRvZmZzZXRYKHN5bWJvbC5nbHlwaFN0YXJ0SW5kZXgpO1xuICAgIGNvbnN0IGxhc3RHbHlwaE9mZnNldCA9IGdseXBoT2Zmc2V0QXJyYXkuZ2V0b2Zmc2V0WChnbHlwaEVuZEluZGV4IC0gMSk7XG5cbiAgICBjb25zdCBmaXJzdFBsYWNlZEdseXBoID0gcGxhY2VHbHlwaEFsb25nTGluZShmb250U2NhbGUgKiBmaXJzdEdseXBoT2Zmc2V0LCBsaW5lT2Zmc2V0WCwgbGluZU9mZnNldFksIGZsaXAsIGFuY2hvclBvaW50LCB0aWxlQW5jaG9yUG9pbnQsIHN5bWJvbC5zZWdtZW50LFxuICAgICAgICBsaW5lU3RhcnRJbmRleCwgbGluZUVuZEluZGV4LCBsaW5lVmVydGV4QXJyYXksIGxhYmVsUGxhbmVNYXRyaXgsIHByb2plY3Rpb25DYWNoZSwgcmV0dXJuVGlsZURpc3RhbmNlKTtcbiAgICBpZiAoIWZpcnN0UGxhY2VkR2x5cGgpXG4gICAgICAgIHJldHVybiBudWxsO1xuXG4gICAgY29uc3QgbGFzdFBsYWNlZEdseXBoID0gcGxhY2VHbHlwaEFsb25nTGluZShmb250U2NhbGUgKiBsYXN0R2x5cGhPZmZzZXQsIGxpbmVPZmZzZXRYLCBsaW5lT2Zmc2V0WSwgZmxpcCwgYW5jaG9yUG9pbnQsIHRpbGVBbmNob3JQb2ludCwgc3ltYm9sLnNlZ21lbnQsXG4gICAgICAgIGxpbmVTdGFydEluZGV4LCBsaW5lRW5kSW5kZXgsIGxpbmVWZXJ0ZXhBcnJheSwgbGFiZWxQbGFuZU1hdHJpeCwgcHJvamVjdGlvbkNhY2hlLCByZXR1cm5UaWxlRGlzdGFuY2UpO1xuICAgIGlmICghbGFzdFBsYWNlZEdseXBoKVxuICAgICAgICByZXR1cm4gbnVsbDtcblxuICAgIHJldHVybiB7IGZpcnN0OiBmaXJzdFBsYWNlZEdseXBoLCBsYXN0OiBsYXN0UGxhY2VkR2x5cGggfTtcbn1cblxuZnVuY3Rpb24gcmVxdWlyZXNPcmllbnRhdGlvbkNoYW5nZSh3cml0aW5nTW9kZSwgZmlyc3RQb2ludCwgbGFzdFBvaW50LCBhc3BlY3RSYXRpbykge1xuICAgIGlmICh3cml0aW5nTW9kZSA9PT0gV3JpdGluZ01vZGUuaG9yaXpvbnRhbCkge1xuICAgICAgICAvLyBPbiB0b3Agb2YgY2hvb3Npbmcgd2hldGhlciB0byBmbGlwLCBjaG9vc2Ugd2hldGhlciB0byByZW5kZXIgdGhpcyB2ZXJzaW9uIG9mIHRoZSBnbHlwaHMgb3IgdGhlIGFsdGVybmF0ZVxuICAgICAgICAvLyB2ZXJ0aWNhbCBnbHlwaHMuIFdlIGNhbid0IGp1c3QgZmlsdGVyIG91dCB2ZXJ0aWNhbCBnbHlwaHMgaW4gdGhlIGhvcml6b250YWwgcmFuZ2UgYmVjYXVzZSB0aGUgaG9yaXpvbnRhbFxuICAgICAgICAvLyBhbmQgdmVydGljYWwgdmVyc2lvbnMgY2FuIGhhdmUgc2xpZ2h0bHkgZGlmZmVyZW50IHByb2plY3Rpb25zIHdoaWNoIGNvdWxkIGxlYWQgdG8gYW5nbGVzIHdoZXJlIGJvdGggb3JcbiAgICAgICAgLy8gbmVpdGhlciBzaG93ZWQuXG4gICAgICAgIGNvbnN0IHJpc2UgPSBNYXRoLmFicyhsYXN0UG9pbnQueSAtIGZpcnN0UG9pbnQueSk7XG4gICAgICAgIGNvbnN0IHJ1biA9IE1hdGguYWJzKGxhc3RQb2ludC54IC0gZmlyc3RQb2ludC54KSAqIGFzcGVjdFJhdGlvO1xuICAgICAgICBpZiAocmlzZSA+IHJ1bikge1xuICAgICAgICAgICAgcmV0dXJuIHsgdXNlVmVydGljYWw6IHRydWUgfTtcbiAgICAgICAgfVxuICAgIH1cblxuICAgIGlmICh3cml0aW5nTW9kZSA9PT0gV3JpdGluZ01vZGUudmVydGljYWwgPyBmaXJzdFBvaW50LnkgPCBsYXN0UG9pbnQueSA6IGZpcnN0UG9pbnQueCA+IGxhc3RQb2ludC54KSB7XG4gICAgICAgIC8vIEluY2x1ZGVzIFwiaG9yaXpvbnRhbE9ubHlcIiBjYXNlIGZvciBsYWJlbHMgd2l0aG91dCB2ZXJ0aWNhbCBnbHlwaHNcbiAgICAgICAgcmV0dXJuIHsgbmVlZHNGbGlwcGluZzogdHJ1ZSB9O1xuICAgIH1cblxuICAgIHJldHVybiBudWxsO1xufVxuXG5mdW5jdGlvbiBwbGFjZUdseXBoc0Fsb25nTGluZShzeW1ib2wsIGZvbnRTaXplLCBmbGlwLCBrZWVwVXByaWdodCwgcG9zTWF0cml4LCBsYWJlbFBsYW5lTWF0cml4LCBnbENvb3JkTWF0cml4LCBnbHlwaE9mZnNldEFycmF5LCBsaW5lVmVydGV4QXJyYXksIGR5bmFtaWNMYXlvdXRWZXJ0ZXhBcnJheSwgYW5jaG9yUG9pbnQsIHRpbGVBbmNob3JQb2ludCwgcHJvamVjdGlvbkNhY2hlLCBhc3BlY3RSYXRpbykge1xuICAgIGNvbnN0IGZvbnRTY2FsZSA9IGZvbnRTaXplIC8gMjQ7XG4gICAgY29uc3QgbGluZU9mZnNldFggPSBzeW1ib2wubGluZU9mZnNldFggKiBmb250U2l6ZTtcbiAgICBjb25zdCBsaW5lT2Zmc2V0WSA9IHN5bWJvbC5saW5lT2Zmc2V0WSAqIGZvbnRTaXplO1xuXG4gICAgbGV0IHBsYWNlZEdseXBocztcbiAgICBpZiAoc3ltYm9sLm51bUdseXBocyA+IDEpIHtcbiAgICAgICAgY29uc3QgZ2x5cGhFbmRJbmRleCA9IHN5bWJvbC5nbHlwaFN0YXJ0SW5kZXggKyBzeW1ib2wubnVtR2x5cGhzO1xuICAgICAgICBjb25zdCBsaW5lU3RhcnRJbmRleCA9IHN5bWJvbC5saW5lU3RhcnRJbmRleDtcbiAgICAgICAgY29uc3QgbGluZUVuZEluZGV4ID0gc3ltYm9sLmxpbmVTdGFydEluZGV4ICsgc3ltYm9sLmxpbmVMZW5ndGg7XG5cbiAgICAgICAgLy8gUGxhY2UgdGhlIGZpcnN0IGFuZCB0aGUgbGFzdCBnbHlwaCBpbiB0aGUgbGFiZWwgZmlyc3QsIHNvIHdlIGNhbiBmaWd1cmUgb3V0XG4gICAgICAgIC8vIHRoZSBvdmVyYWxsIG9yaWVudGF0aW9uIG9mIHRoZSBsYWJlbCBhbmQgZGV0ZXJtaW5lIHdoZXRoZXIgaXQgbmVlZHMgdG8gYmUgZmxpcHBlZCBpbiBrZWVwVXByaWdodCBtb2RlXG4gICAgICAgIGNvbnN0IGZpcnN0QW5kTGFzdEdseXBoID0gcGxhY2VGaXJzdEFuZExhc3RHbHlwaChmb250U2NhbGUsIGdseXBoT2Zmc2V0QXJyYXksIGxpbmVPZmZzZXRYLCBsaW5lT2Zmc2V0WSwgZmxpcCwgYW5jaG9yUG9pbnQsIHRpbGVBbmNob3JQb2ludCwgc3ltYm9sLCBsaW5lVmVydGV4QXJyYXksIGxhYmVsUGxhbmVNYXRyaXgsIHByb2plY3Rpb25DYWNoZSwgZmFsc2UpO1xuICAgICAgICBpZiAoIWZpcnN0QW5kTGFzdEdseXBoKSB7XG4gICAgICAgICAgICByZXR1cm4geyBub3RFbm91Z2hSb29tOiB0cnVlIH07XG4gICAgICAgIH1cbiAgICAgICAgY29uc3QgZmlyc3RQb2ludCA9IHByb2plY3QoZmlyc3RBbmRMYXN0R2x5cGguZmlyc3QucG9pbnQsIGdsQ29vcmRNYXRyaXgpLnBvaW50O1xuICAgICAgICBjb25zdCBsYXN0UG9pbnQgPSBwcm9qZWN0KGZpcnN0QW5kTGFzdEdseXBoLmxhc3QucG9pbnQsIGdsQ29vcmRNYXRyaXgpLnBvaW50O1xuXG4gICAgICAgIGlmIChrZWVwVXByaWdodCAmJiAhZmxpcCkge1xuICAgICAgICAgICAgY29uc3Qgb3JpZW50YXRpb25DaGFuZ2UgPSByZXF1aXJlc09yaWVudGF0aW9uQ2hhbmdlKHN5bWJvbC53cml0aW5nTW9kZSwgZmlyc3RQb2ludCwgbGFzdFBvaW50LCBhc3BlY3RSYXRpbyk7XG4gICAgICAgICAgICBpZiAob3JpZW50YXRpb25DaGFuZ2UpIHtcbiAgICAgICAgICAgICAgICByZXR1cm4gb3JpZW50YXRpb25DaGFuZ2U7XG4gICAgICAgICAgICB9XG4gICAgICAgIH1cblxuICAgICAgICBwbGFjZWRHbHlwaHMgPSBbZmlyc3RBbmRMYXN0R2x5cGguZmlyc3RdO1xuICAgICAgICBmb3IgKGxldCBnbHlwaEluZGV4ID0gc3ltYm9sLmdseXBoU3RhcnRJbmRleCArIDE7IGdseXBoSW5kZXggPCBnbHlwaEVuZEluZGV4IC0gMTsgZ2x5cGhJbmRleCsrKSB7XG4gICAgICAgICAgICAvLyBTaW5jZSBmaXJzdCBhbmQgbGFzdCBnbHlwaCBmaXQgb24gdGhlIGxpbmUsIHdlJ3JlIHN1cmUgdGhhdCB0aGUgcmVzdCBvZiB0aGUgZ2x5cGhzIGNhbiBiZSBwbGFjZWRcbiAgICAgICAgICAgIC8vICRGbG93Rml4TWVcbiAgICAgICAgICAgIHBsYWNlZEdseXBocy5wdXNoKHBsYWNlR2x5cGhBbG9uZ0xpbmUoZm9udFNjYWxlICogZ2x5cGhPZmZzZXRBcnJheS5nZXRvZmZzZXRYKGdseXBoSW5kZXgpLCBsaW5lT2Zmc2V0WCwgbGluZU9mZnNldFksIGZsaXAsIGFuY2hvclBvaW50LCB0aWxlQW5jaG9yUG9pbnQsIHN5bWJvbC5zZWdtZW50LFxuICAgICAgICAgICAgICAgIGxpbmVTdGFydEluZGV4LCBsaW5lRW5kSW5kZXgsIGxpbmVWZXJ0ZXhBcnJheSwgbGFiZWxQbGFuZU1hdHJpeCwgcHJvamVjdGlvbkNhY2hlLCBmYWxzZSkpO1xuICAgICAgICB9XG4gICAgICAgIHBsYWNlZEdseXBocy5wdXNoKGZpcnN0QW5kTGFzdEdseXBoLmxhc3QpO1xuICAgIH0gZWxzZSB7XG4gICAgICAgIC8vIE9ubHkgYSBzaW5nbGUgZ2x5cGggdG8gcGxhY2VcbiAgICAgICAgLy8gU28sIGRldGVybWluZSB3aGV0aGVyIHRvIGZsaXAgYmFzZWQgb24gcHJvamVjdGVkIGFuZ2xlIG9mIHRoZSBsaW5lIHNlZ21lbnQgaXQncyBvblxuICAgICAgICBpZiAoa2VlcFVwcmlnaHQgJiYgIWZsaXApIHtcbiAgICAgICAgICAgIGNvbnN0IGEgPSBwcm9qZWN0KHRpbGVBbmNob3JQb2ludCwgcG9zTWF0cml4KS5wb2ludDtcbiAgICAgICAgICAgIGNvbnN0IHRpbGVWZXJ0ZXhJbmRleCA9IChzeW1ib2wubGluZVN0YXJ0SW5kZXggKyBzeW1ib2wuc2VnbWVudCArIDEpO1xuICAgICAgICAgICAgLy8gJEZsb3dGaXhNZVxuICAgICAgICAgICAgY29uc3QgdGlsZVNlZ21lbnRFbmQgPSBuZXcgUG9pbnQobGluZVZlcnRleEFycmF5LmdldHgodGlsZVZlcnRleEluZGV4KSwgbGluZVZlcnRleEFycmF5LmdldHkodGlsZVZlcnRleEluZGV4KSk7XG4gICAgICAgICAgICBjb25zdCBwcm9qZWN0ZWRWZXJ0ZXggPSBwcm9qZWN0KHRpbGVTZWdtZW50RW5kLCBwb3NNYXRyaXgpO1xuICAgICAgICAgICAgLy8gV2Uga25vdyB0aGUgYW5jaG9yIHdpbGwgYmUgaW4gdGhlIHZpZXdwb3J0LCBidXQgdGhlIGVuZCBvZiB0aGUgbGluZSBzZWdtZW50IG1heSBiZVxuICAgICAgICAgICAgLy8gYmVoaW5kIHRoZSBwbGFuZSBvZiB0aGUgY2FtZXJhLCBpbiB3aGljaCBjYXNlIHdlIGNhbiB1c2UgYSBwb2ludCBhdCBhbnkgYXJiaXRyYXJ5IChjbG9zZXIpXG4gICAgICAgICAgICAvLyBwb2ludCBvbiB0aGUgc2VnbWVudC5cbiAgICAgICAgICAgIGNvbnN0IGIgPSAocHJvamVjdGVkVmVydGV4LnNpZ25lZERpc3RhbmNlRnJvbUNhbWVyYSA+IDApID9cbiAgICAgICAgICAgICAgICBwcm9qZWN0ZWRWZXJ0ZXgucG9pbnQgOlxuICAgICAgICAgICAgICAgIHByb2plY3RUcnVuY2F0ZWRMaW5lU2VnbWVudCh0aWxlQW5jaG9yUG9pbnQsIHRpbGVTZWdtZW50RW5kLCBhLCAxLCBwb3NNYXRyaXgpO1xuXG5cbiAgICAgICAgICAgIGNvbnN0IG9yaWVudGF0aW9uQ2hhbmdlID0gcmVxdWlyZXNPcmllbnRhdGlvbkNoYW5nZShzeW1ib2wud3JpdGluZ01vZGUsIGEsIGIsIGFzcGVjdFJhdGlvKTtcbiAgICAgICAgICAgIGlmIChvcmllbnRhdGlvbkNoYW5nZSkge1xuICAgICAgICAgICAgICAgIHJldHVybiBvcmllbnRhdGlvbkNoYW5nZTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgICAgICAvLyAkRmxvd0ZpeE1lXG4gICAgICAgIGNvbnN0IHNpbmdsZUdseXBoID0gcGxhY2VHbHlwaEFsb25nTGluZShmb250U2NhbGUgKiBnbHlwaE9mZnNldEFycmF5LmdldG9mZnNldFgoc3ltYm9sLmdseXBoU3RhcnRJbmRleCksIGxpbmVPZmZzZXRYLCBsaW5lT2Zmc2V0WSwgZmxpcCwgYW5jaG9yUG9pbnQsIHRpbGVBbmNob3JQb2ludCwgc3ltYm9sLnNlZ21lbnQsXG4gICAgICAgICAgICBzeW1ib2wubGluZVN0YXJ0SW5kZXgsIHN5bWJvbC5saW5lU3RhcnRJbmRleCArIHN5bWJvbC5saW5lTGVuZ3RoLCBsaW5lVmVydGV4QXJyYXksIGxhYmVsUGxhbmVNYXRyaXgsIHByb2plY3Rpb25DYWNoZSwgZmFsc2UpO1xuICAgICAgICBpZiAoIXNpbmdsZUdseXBoKVxuICAgICAgICAgICAgcmV0dXJuIHsgbm90RW5vdWdoUm9vbTogdHJ1ZSB9O1xuXG4gICAgICAgIHBsYWNlZEdseXBocyA9IFtzaW5nbGVHbHlwaF07XG4gICAgfVxuXG4gICAgZm9yIChjb25zdCBnbHlwaDogYW55IG9mIHBsYWNlZEdseXBocykge1xuICAgICAgICBhZGREeW5hbWljQXR0cmlidXRlcyhkeW5hbWljTGF5b3V0VmVydGV4QXJyYXksIGdseXBoLnBvaW50LCBnbHlwaC5hbmdsZSk7XG4gICAgfVxuICAgIHJldHVybiB7fTtcbn1cblxuZnVuY3Rpb24gcHJvamVjdFRydW5jYXRlZExpbmVTZWdtZW50KHByZXZpb3VzVGlsZVBvaW50OiBQb2ludCwgY3VycmVudFRpbGVQb2ludDogUG9pbnQsIHByZXZpb3VzUHJvamVjdGVkUG9pbnQ6IFBvaW50LCBtaW5pbXVtTGVuZ3RoOiBudW1iZXIsIHByb2plY3Rpb25NYXRyaXg6IG1hdDQpIHtcbiAgICAvLyBXZSBhcmUgYXNzdW1pbmcgXCJwcmV2aW91c1RpbGVQb2ludFwiIHdvbid0IHByb2plY3QgdG8gYSBwb2ludCB3aXRoaW4gb25lIHVuaXQgb2YgdGhlIGNhbWVyYSBwbGFuZVxuICAgIC8vIElmIGl0IGRpZCwgdGhhdCB3b3VsZCBtZWFuIG91ciBsYWJlbCBleHRlbmRlZCBhbGwgdGhlIHdheSBvdXQgZnJvbSB3aXRoaW4gdGhlIHZpZXdwb3J0IHRvIGEgKHZlcnkgZGlzdGFudClcbiAgICAvLyBwb2ludCBuZWFyIHRoZSBwbGFuZSBvZiB0aGUgY2FtZXJhLiBXZSB3b3VsZG4ndCBiZSBhYmxlIHRvIHJlbmRlciB0aGUgbGFiZWwgYW55d2F5IG9uY2UgaXQgY3Jvc3NlZCB0aGVcbiAgICAvLyBwbGFuZSBvZiB0aGUgY2FtZXJhLlxuICAgIGNvbnN0IHByb2plY3RlZFVuaXRWZXJ0ZXggPSBwcm9qZWN0KHByZXZpb3VzVGlsZVBvaW50LmFkZChwcmV2aW91c1RpbGVQb2ludC5zdWIoY3VycmVudFRpbGVQb2ludCkuX3VuaXQoKSksIHByb2plY3Rpb25NYXRyaXgpLnBvaW50O1xuICAgIGNvbnN0IHByb2plY3RlZFVuaXRTZWdtZW50ID0gcHJldmlvdXNQcm9qZWN0ZWRQb2ludC5zdWIocHJvamVjdGVkVW5pdFZlcnRleCk7XG5cbiAgICByZXR1cm4gcHJldmlvdXNQcm9qZWN0ZWRQb2ludC5hZGQocHJvamVjdGVkVW5pdFNlZ21lbnQuX211bHQobWluaW11bUxlbmd0aCAvIHByb2plY3RlZFVuaXRTZWdtZW50Lm1hZygpKSk7XG59XG5cbmZ1bmN0aW9uIHBsYWNlR2x5cGhBbG9uZ0xpbmUob2Zmc2V0WDogbnVtYmVyLFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICBsaW5lT2Zmc2V0WDogbnVtYmVyLFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICBsaW5lT2Zmc2V0WTogbnVtYmVyLFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICBmbGlwOiBib29sZWFuLFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICBhbmNob3JQb2ludDogUG9pbnQsXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgIHRpbGVBbmNob3JQb2ludDogUG9pbnQsXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgIGFuY2hvclNlZ21lbnQ6IG51bWJlcixcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgbGluZVN0YXJ0SW5kZXg6IG51bWJlcixcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgbGluZUVuZEluZGV4OiBudW1iZXIsXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgIGxpbmVWZXJ0ZXhBcnJheTogU3ltYm9sTGluZVZlcnRleEFycmF5LFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICBsYWJlbFBsYW5lTWF0cml4OiBtYXQ0LFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICBwcm9qZWN0aW9uQ2FjaGU6IHtbbnVtYmVyXTogUG9pbnR9LFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICByZXR1cm5UaWxlRGlzdGFuY2U6IGJvb2xlYW4pIHtcblxuICAgIGNvbnN0IGNvbWJpbmVkT2Zmc2V0WCA9IGZsaXAgP1xuICAgICAgICBvZmZzZXRYIC0gbGluZU9mZnNldFggOlxuICAgICAgICBvZmZzZXRYICsgbGluZU9mZnNldFg7XG5cbiAgICBsZXQgZGlyID0gY29tYmluZWRPZmZzZXRYID4gMCA/IDEgOiAtMTtcblxuICAgIGxldCBhbmdsZSA9IDA7XG4gICAgaWYgKGZsaXApIHtcbiAgICAgICAgLy8gVGhlIGxhYmVsIG5lZWRzIHRvIGJlIGZsaXBwZWQgdG8ga2VlcCB0ZXh0IHVwcmlnaHQuXG4gICAgICAgIC8vIEl0ZXJhdGUgaW4gdGhlIHJldmVyc2UgZGlyZWN0aW9uLlxuICAgICAgICBkaXIgKj0gLTE7XG4gICAgICAgIGFuZ2xlID0gTWF0aC5QSTtcbiAgICB9XG5cbiAgICBpZiAoZGlyIDwgMCkgYW5nbGUgKz0gTWF0aC5QSTtcblxuICAgIGxldCBjdXJyZW50SW5kZXggPSBkaXIgPiAwID9cbiAgICAgICAgbGluZVN0YXJ0SW5kZXggKyBhbmNob3JTZWdtZW50IDpcbiAgICAgICAgbGluZVN0YXJ0SW5kZXggKyBhbmNob3JTZWdtZW50ICsgMTtcblxuICAgIGNvbnN0IGluaXRpYWxJbmRleCA9IGN1cnJlbnRJbmRleDtcbiAgICBsZXQgY3VycmVudCA9IGFuY2hvclBvaW50O1xuICAgIGxldCBwcmV2ID0gYW5jaG9yUG9pbnQ7XG4gICAgbGV0IGRpc3RhbmNlVG9QcmV2ID0gMDtcbiAgICBsZXQgY3VycmVudFNlZ21lbnREaXN0YW5jZSA9IDA7XG4gICAgY29uc3QgYWJzT2Zmc2V0WCA9IE1hdGguYWJzKGNvbWJpbmVkT2Zmc2V0WCk7XG5cbiAgICB3aGlsZSAoZGlzdGFuY2VUb1ByZXYgKyBjdXJyZW50U2VnbWVudERpc3RhbmNlIDw9IGFic09mZnNldFgpIHtcbiAgICAgICAgY3VycmVudEluZGV4ICs9IGRpcjtcblxuICAgICAgICAvLyBvZmZzZXQgZG9lcyBub3QgZml0IG9uIHRoZSBwcm9qZWN0ZWQgbGluZVxuICAgICAgICBpZiAoY3VycmVudEluZGV4IDwgbGluZVN0YXJ0SW5kZXggfHwgY3VycmVudEluZGV4ID49IGxpbmVFbmRJbmRleClcbiAgICAgICAgICAgIHJldHVybiBudWxsO1xuXG4gICAgICAgIHByZXYgPSBjdXJyZW50O1xuXG4gICAgICAgIGN1cnJlbnQgPSBwcm9qZWN0aW9uQ2FjaGVbY3VycmVudEluZGV4XTtcbiAgICAgICAgaWYgKGN1cnJlbnQgPT09IHVuZGVmaW5lZCkge1xuICAgICAgICAgICAgY29uc3QgY3VycmVudFZlcnRleCA9IG5ldyBQb2ludChsaW5lVmVydGV4QXJyYXkuZ2V0eChjdXJyZW50SW5kZXgpLCBsaW5lVmVydGV4QXJyYXkuZ2V0eShjdXJyZW50SW5kZXgpKTtcbiAgICAgICAgICAgIGNvbnN0IHByb2plY3Rpb24gPSBwcm9qZWN0KGN1cnJlbnRWZXJ0ZXgsIGxhYmVsUGxhbmVNYXRyaXgpO1xuICAgICAgICAgICAgaWYgKHByb2plY3Rpb24uc2lnbmVkRGlzdGFuY2VGcm9tQ2FtZXJhID4gMCkge1xuICAgICAgICAgICAgICAgIGN1cnJlbnQgPSBwcm9qZWN0aW9uQ2FjaGVbY3VycmVudEluZGV4XSA9IHByb2plY3Rpb24ucG9pbnQ7XG4gICAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgICAgIC8vIFRoZSB2ZXJ0ZXggaXMgYmVoaW5kIHRoZSBwbGFuZSBvZiB0aGUgY2FtZXJhLCBzbyB3ZSBjYW4ndCBwcm9qZWN0IGl0XG4gICAgICAgICAgICAgICAgLy8gSW5zdGVhZCwgd2UnbGwgY3JlYXRlIGEgdmVydGV4IGFsb25nIHRoZSBsaW5lIHRoYXQncyBmYXIgZW5vdWdoIHRvIGluY2x1ZGUgdGhlIGdseXBoXG4gICAgICAgICAgICAgICAgY29uc3QgcHJldmlvdXNMaW5lVmVydGV4SW5kZXggPSBjdXJyZW50SW5kZXggLSBkaXI7XG4gICAgICAgICAgICAgICAgY29uc3QgcHJldmlvdXNUaWxlUG9pbnQgPSBkaXN0YW5jZVRvUHJldiA9PT0gMCA/XG4gICAgICAgICAgICAgICAgICAgIHRpbGVBbmNob3JQb2ludCA6XG4gICAgICAgICAgICAgICAgICAgIG5ldyBQb2ludChsaW5lVmVydGV4QXJyYXkuZ2V0eChwcmV2aW91c0xpbmVWZXJ0ZXhJbmRleCksIGxpbmVWZXJ0ZXhBcnJheS5nZXR5KHByZXZpb3VzTGluZVZlcnRleEluZGV4KSk7XG4gICAgICAgICAgICAgICAgLy8gRG9uJ3QgY2FjaGUgYmVjYXVzZSB0aGUgbmV3IHZlcnRleCBtaWdodCBub3QgYmUgZmFyIGVub3VnaCBvdXQgZm9yIGZ1dHVyZSBnbHlwaHMgb24gdGhlIHNhbWUgc2VnbWVudFxuICAgICAgICAgICAgICAgIGN1cnJlbnQgPSBwcm9qZWN0VHJ1bmNhdGVkTGluZVNlZ21lbnQocHJldmlvdXNUaWxlUG9pbnQsIGN1cnJlbnRWZXJ0ZXgsIHByZXYsIGFic09mZnNldFggLSBkaXN0YW5jZVRvUHJldiArIDEsIGxhYmVsUGxhbmVNYXRyaXgpO1xuICAgICAgICAgICAgfVxuICAgICAgICB9XG5cbiAgICAgICAgZGlzdGFuY2VUb1ByZXYgKz0gY3VycmVudFNlZ21lbnREaXN0YW5jZTtcbiAgICAgICAgY3VycmVudFNlZ21lbnREaXN0YW5jZSA9IHByZXYuZGlzdChjdXJyZW50KTtcbiAgICB9XG5cbiAgICAvLyBUaGUgcG9pbnQgaXMgb24gdGhlIGN1cnJlbnQgc2VnbWVudC4gSW50ZXJwb2xhdGUgdG8gZmluZCBpdC5cbiAgICBjb25zdCBzZWdtZW50SW50ZXJwb2xhdGlvblQgPSAoYWJzT2Zmc2V0WCAtIGRpc3RhbmNlVG9QcmV2KSAvIGN1cnJlbnRTZWdtZW50RGlzdGFuY2U7XG4gICAgY29uc3QgcHJldlRvQ3VycmVudCA9IGN1cnJlbnQuc3ViKHByZXYpO1xuICAgIGNvbnN0IHAgPSBwcmV2VG9DdXJyZW50Lm11bHQoc2VnbWVudEludGVycG9sYXRpb25UKS5fYWRkKHByZXYpO1xuXG4gICAgLy8gb2Zmc2V0IHRoZSBwb2ludCBmcm9tIHRoZSBsaW5lIHRvIHRleHQtb2Zmc2V0IGFuZCBpY29uLW9mZnNldFxuICAgIHAuX2FkZChwcmV2VG9DdXJyZW50Ll91bml0KCkuX3BlcnAoKS5fbXVsdChsaW5lT2Zmc2V0WSAqIGRpcikpO1xuXG4gICAgY29uc3Qgc2VnbWVudEFuZ2xlID0gYW5nbGUgKyBNYXRoLmF0YW4yKGN1cnJlbnQueSAtIHByZXYueSwgY3VycmVudC54IC0gcHJldi54KTtcblxuICAgIHJldHVybiB7XG4gICAgICAgIHBvaW50OiBwLFxuICAgICAgICBhbmdsZTogc2VnbWVudEFuZ2xlLFxuICAgICAgICB0aWxlRGlzdGFuY2U6IHJldHVyblRpbGVEaXN0YW5jZSA/XG4gICAgICAgICAgICB7XG4gICAgICAgICAgICAgICAgcHJldlRpbGVEaXN0YW5jZTogKGN1cnJlbnRJbmRleCAtIGRpcikgPT09IGluaXRpYWxJbmRleCA/IDAgOiBsaW5lVmVydGV4QXJyYXkuZ2V0dGlsZVVuaXREaXN0YW5jZUZyb21BbmNob3IoY3VycmVudEluZGV4IC0gZGlyKSxcbiAgICAgICAgICAgICAgICBsYXN0U2VnbWVudFZpZXdwb3J0RGlzdGFuY2U6IGFic09mZnNldFggLSBkaXN0YW5jZVRvUHJldlxuICAgICAgICAgICAgfSA6IG51bGxcbiAgICB9O1xufVxuXG5jb25zdCBoaWRkZW5HbHlwaEF0dHJpYnV0ZXMgPSBuZXcgRmxvYXQzMkFycmF5KFstSW5maW5pdHksIC1JbmZpbml0eSwgMCwgLUluZmluaXR5LCAtSW5maW5pdHksIDAsIC1JbmZpbml0eSwgLUluZmluaXR5LCAwLCAtSW5maW5pdHksIC1JbmZpbml0eSwgMF0pO1xuXG4vLyBIaWRlIHRoZW0gYnkgbW92aW5nIHRoZW0gb2Zmc2NyZWVuLiBXZSBzdGlsbCBuZWVkIHRvIGFkZCB0aGVtIHRvIHRoZSBidWZmZXJcbi8vIGJlY2F1c2UgdGhlIGR5bmFtaWMgYnVmZmVyIGlzIHBhaXJlZCB3aXRoIGEgc3RhdGljIGJ1ZmZlciB0aGF0IGRvZXNuJ3QgZ2V0IHVwZGF0ZWQuXG5mdW5jdGlvbiBoaWRlR2x5cGhzKG51bTogbnVtYmVyLCBkeW5hbWljTGF5b3V0VmVydGV4QXJyYXk6IFN5bWJvbER5bmFtaWNMYXlvdXRBcnJheSkge1xuICAgIGZvciAobGV0IGkgPSAwOyBpIDwgbnVtOyBpKyspIHtcbiAgICAgICAgY29uc3Qgb2Zmc2V0ID0gZHluYW1pY0xheW91dFZlcnRleEFycmF5Lmxlbmd0aDtcbiAgICAgICAgZHluYW1pY0xheW91dFZlcnRleEFycmF5LnJlc2l6ZShvZmZzZXQgKyA0KTtcbiAgICAgICAgLy8gU2luY2UgYWxsIGhpZGRlbiBnbHlwaHMgaGF2ZSB0aGUgc2FtZSBhdHRyaWJ1dGVzLCB3ZSBjYW4gYnVpbGQgdXAgdGhlIGFycmF5IGZhc3RlciB3aXRoIGEgc2luZ2xlIGNhbGwgdG8gRmxvYXQzMkFycmF5LnNldFxuICAgICAgICAvLyBmb3IgZWFjaCBzZXQgb2YgZm91ciB2ZXJ0aWNlcywgaW5zdGVhZCBvZiBjYWxsaW5nIGFkZER5bmFtaWNBdHRyaWJ1dGVzIGZvciBlYWNoIHZlcnRleC5cbiAgICAgICAgZHluYW1pY0xheW91dFZlcnRleEFycmF5LmZsb2F0MzIuc2V0KGhpZGRlbkdseXBoQXR0cmlidXRlcywgb2Zmc2V0ICogMyk7XG4gICAgfVxufVxuXG4vLyBGb3IgbGluZSBsYWJlbCBsYXlvdXQsIHdlJ3JlIG5vdCB1c2luZyB6IG91dHB1dCBhbmQgb3VyIHcgaW5wdXQgaXMgYWx3YXlzIDFcbi8vIFRoaXMgY3VzdG9tIG1hdHJpeCB0cmFuc2Zvcm1hdGlvbiBpZ25vcmVzIHRob3NlIGNvbXBvbmVudHMgdG8gbWFrZSBwcm9qZWN0aW9uIGZhc3RlclxuZnVuY3Rpb24geHlUcmFuc2Zvcm1NYXQ0KG91dDogdmVjNCwgYTogdmVjNCwgbTogbWF0NCkge1xuICAgIGNvbnN0IHggPSBhWzBdLCB5ID0gYVsxXTtcbiAgICBvdXRbMF0gPSBtWzBdICogeCArIG1bNF0gKiB5ICsgbVsxMl07XG4gICAgb3V0WzFdID0gbVsxXSAqIHggKyBtWzVdICogeSArIG1bMTNdO1xuICAgIG91dFszXSA9IG1bM10gKiB4ICsgbVs3XSAqIHkgKyBtWzE1XTtcbiAgICByZXR1cm4gb3V0O1xufVxuIiwiLy8gQGZsb3dcblxuaW1wb3J0IFBvaW50IGZyb20gJ0BtYXBib3gvcG9pbnQtZ2VvbWV0cnknO1xuXG5pbXBvcnQgKiBhcyBpbnRlcnNlY3Rpb25UZXN0cyBmcm9tICcuLi91dGlsL2ludGVyc2VjdGlvbl90ZXN0cyc7XG5pbXBvcnQgR3JpZCBmcm9tICcuL2dyaWRfaW5kZXgnO1xuaW1wb3J0IHsgbWF0NCB9IGZyb20gJ2dsLW1hdHJpeCc7XG5cbmltcG9ydCAqIGFzIHByb2plY3Rpb24gZnJvbSAnLi4vc3ltYm9sL3Byb2plY3Rpb24nO1xuXG5pbXBvcnQgdHlwZSBUcmFuc2Zvcm0gZnJvbSAnLi4vZ2VvL3RyYW5zZm9ybSc7XG5pbXBvcnQgdHlwZSB7U2luZ2xlQ29sbGlzaW9uQm94fSBmcm9tICcuLi9kYXRhL2J1Y2tldC9zeW1ib2xfYnVja2V0JztcbmltcG9ydCB0eXBlIHtcbiAgICBHbHlwaE9mZnNldEFycmF5LFxuICAgIFN5bWJvbExpbmVWZXJ0ZXhBcnJheVxufSBmcm9tICcuLi9kYXRhL2FycmF5X3R5cGVzJztcblxuLy8gV2hlbiBhIHN5bWJvbCBjcm9zc2VzIHRoZSBlZGdlIHRoYXQgY2F1c2VzIGl0IHRvIGJlIGluY2x1ZGVkIGluXG4vLyBjb2xsaXNpb24gZGV0ZWN0aW9uLCBpdCB3aWxsIGNhdXNlIGNoYW5nZXMgaW4gdGhlIHN5bWJvbHMgYXJvdW5kXG4vLyBpdC4gVGhpcyBjb25zdGFudCBzcGVjaWZpZXMgaG93IG1hbnkgcGl4ZWxzIHRvIHBhZCB0aGUgZWRnZSBvZlxuLy8gdGhlIHZpZXdwb3J0IGZvciBjb2xsaXNpb24gZGV0ZWN0aW9uIHNvIHRoYXQgdGhlIGJ1bGsgb2YgdGhlIGNoYW5nZXNcbi8vIG9jY3VyIG9mZnNjcmVlbi4gTWFraW5nIHRoaXMgY29uc3RhbnQgZ3JlYXRlciBpbmNyZWFzZXMgbGFiZWxcbi8vIHN0YWJpbGl0eSwgYnV0IGl0J3MgZXhwZW5zaXZlLlxuY29uc3Qgdmlld3BvcnRQYWRkaW5nID0gMTAwO1xuXG4vKipcbiAqIEEgY29sbGlzaW9uIGluZGV4IHVzZWQgdG8gcHJldmVudCBzeW1ib2xzIGZyb20gb3ZlcmxhcHBpbmcuIEl0IGtlZXAgdHJhY2tzIG9mXG4gKiB3aGVyZSBwcmV2aW91cyBzeW1ib2xzIGhhdmUgYmVlbiBwbGFjZWQgYW5kIGlzIHVzZWQgdG8gY2hlY2sgaWYgYSBuZXdcbiAqIHN5bWJvbCBvdmVybGFwcyB3aXRoIGFueSBwcmV2aW91c2x5IGFkZGVkIHN5bWJvbHMuXG4gKlxuICogVGhlcmUgYXJlIHR3byBzdGVwcyB0byBpbnNlcnRpb246IGZpcnN0IHBsYWNlQ29sbGlzaW9uQm94L0NpcmNsZXMgY2hlY2tzIGlmXG4gKiB0aGVyZSdzIHJvb20gZm9yIGEgc3ltYm9sLCB0aGVuIGluc2VydENvbGxpc2lvbkJveC9DaXJjbGVzIGFjdHVhbGx5IHB1dHMgdGhlXG4gKiBzeW1ib2wgaW4gdGhlIGluZGV4LiBUaGUgdHdvIHN0ZXAgcHJvY2VzcyBhbGxvd3MgcGFpcmVkIHN5bWJvbHMgdG8gYmUgaW5zZXJ0ZWRcbiAqIHRvZ2V0aGVyIGV2ZW4gaWYgdGhleSBvdmVybGFwLlxuICpcbiAqIEBwcml2YXRlXG4gKi9cbmNsYXNzIENvbGxpc2lvbkluZGV4IHtcbiAgICBncmlkOiBHcmlkO1xuICAgIGlnbm9yZWRHcmlkOiBHcmlkO1xuICAgIHRyYW5zZm9ybTogVHJhbnNmb3JtO1xuICAgIHBpdGNoZmFjdG9yOiBudW1iZXI7XG4gICAgc2NyZWVuUmlnaHRCb3VuZGFyeTogbnVtYmVyO1xuICAgIHNjcmVlbkJvdHRvbUJvdW5kYXJ5OiBudW1iZXI7XG4gICAgZ3JpZFJpZ2h0Qm91bmRhcnk6IG51bWJlcjtcbiAgICBncmlkQm90dG9tQm91bmRhcnk6IG51bWJlcjtcblxuICAgIGNvbnN0cnVjdG9yKFxuICAgICAgICB0cmFuc2Zvcm06IFRyYW5zZm9ybSxcbiAgICAgICAgZ3JpZDogR3JpZCA9IG5ldyBHcmlkKHRyYW5zZm9ybS53aWR0aCArIDIgKiB2aWV3cG9ydFBhZGRpbmcsIHRyYW5zZm9ybS5oZWlnaHQgKyAyICogdmlld3BvcnRQYWRkaW5nLCAyNSksXG4gICAgICAgIGlnbm9yZWRHcmlkOiBHcmlkID0gbmV3IEdyaWQodHJhbnNmb3JtLndpZHRoICsgMiAqIHZpZXdwb3J0UGFkZGluZywgdHJhbnNmb3JtLmhlaWdodCArIDIgKiB2aWV3cG9ydFBhZGRpbmcsIDI1KVxuICAgICkge1xuICAgICAgICB0aGlzLnRyYW5zZm9ybSA9IHRyYW5zZm9ybTtcblxuICAgICAgICB0aGlzLmdyaWQgPSBncmlkO1xuICAgICAgICB0aGlzLmlnbm9yZWRHcmlkID0gaWdub3JlZEdyaWQ7XG4gICAgICAgIHRoaXMucGl0Y2hmYWN0b3IgPSBNYXRoLmNvcyh0cmFuc2Zvcm0uX3BpdGNoKSAqIHRyYW5zZm9ybS5jYW1lcmFUb0NlbnRlckRpc3RhbmNlO1xuXG4gICAgICAgIHRoaXMuc2NyZWVuUmlnaHRCb3VuZGFyeSA9IHRyYW5zZm9ybS53aWR0aCArIHZpZXdwb3J0UGFkZGluZztcbiAgICAgICAgdGhpcy5zY3JlZW5Cb3R0b21Cb3VuZGFyeSA9IHRyYW5zZm9ybS5oZWlnaHQgKyB2aWV3cG9ydFBhZGRpbmc7XG4gICAgICAgIHRoaXMuZ3JpZFJpZ2h0Qm91bmRhcnkgPSB0cmFuc2Zvcm0ud2lkdGggKyAyICogdmlld3BvcnRQYWRkaW5nO1xuICAgICAgICB0aGlzLmdyaWRCb3R0b21Cb3VuZGFyeSA9IHRyYW5zZm9ybS5oZWlnaHQgKyAyICogdmlld3BvcnRQYWRkaW5nO1xuICAgIH1cblxuICAgIHBsYWNlQ29sbGlzaW9uQm94KGNvbGxpc2lvbkJveDogU2luZ2xlQ29sbGlzaW9uQm94LCBhbGxvd092ZXJsYXA6IGJvb2xlYW4sIHRleHRQaXhlbFJhdGlvOiBudW1iZXIsIHBvc01hdHJpeDogbWF0NCwgY29sbGlzaW9uR3JvdXBQcmVkaWNhdGU/OiBhbnkpOiB7IGJveDogQXJyYXk8bnVtYmVyPiwgb2Zmc2NyZWVuOiBib29sZWFuIH0ge1xuICAgICAgICBjb25zdCBwcm9qZWN0ZWRQb2ludCA9IHRoaXMucHJvamVjdEFuZEdldFBlcnNwZWN0aXZlUmF0aW8ocG9zTWF0cml4LCBjb2xsaXNpb25Cb3guYW5jaG9yUG9pbnRYLCBjb2xsaXNpb25Cb3guYW5jaG9yUG9pbnRZKTtcbiAgICAgICAgY29uc3QgdGlsZVRvVmlld3BvcnQgPSB0ZXh0UGl4ZWxSYXRpbyAqIHByb2plY3RlZFBvaW50LnBlcnNwZWN0aXZlUmF0aW87XG4gICAgICAgIGNvbnN0IHRsWCA9IGNvbGxpc2lvbkJveC54MSAqIHRpbGVUb1ZpZXdwb3J0ICsgcHJvamVjdGVkUG9pbnQucG9pbnQueDtcbiAgICAgICAgY29uc3QgdGxZID0gY29sbGlzaW9uQm94LnkxICogdGlsZVRvVmlld3BvcnQgKyBwcm9qZWN0ZWRQb2ludC5wb2ludC55O1xuICAgICAgICBjb25zdCBiclggPSBjb2xsaXNpb25Cb3gueDIgKiB0aWxlVG9WaWV3cG9ydCArIHByb2plY3RlZFBvaW50LnBvaW50Lng7XG4gICAgICAgIGNvbnN0IGJyWSA9IGNvbGxpc2lvbkJveC55MiAqIHRpbGVUb1ZpZXdwb3J0ICsgcHJvamVjdGVkUG9pbnQucG9pbnQueTtcblxuICAgICAgICBpZiAoIXRoaXMuaXNJbnNpZGVHcmlkKHRsWCwgdGxZLCBiclgsIGJyWSkgfHxcbiAgICAgICAgICAgICghYWxsb3dPdmVybGFwICYmIHRoaXMuZ3JpZC5oaXRUZXN0KHRsWCwgdGxZLCBiclgsIGJyWSwgY29sbGlzaW9uR3JvdXBQcmVkaWNhdGUpKSkge1xuICAgICAgICAgICAgcmV0dXJuIHtcbiAgICAgICAgICAgICAgICBib3g6IFtdLFxuICAgICAgICAgICAgICAgIG9mZnNjcmVlbjogZmFsc2VcbiAgICAgICAgICAgIH07XG4gICAgICAgIH1cblxuICAgICAgICByZXR1cm4ge1xuICAgICAgICAgICAgYm94OiBbdGxYLCB0bFksIGJyWCwgYnJZXSxcbiAgICAgICAgICAgIG9mZnNjcmVlbjogdGhpcy5pc09mZnNjcmVlbih0bFgsIHRsWSwgYnJYLCBiclkpXG4gICAgICAgIH07XG4gICAgfVxuXG4gICAgYXBwcm94aW1hdGVUaWxlRGlzdGFuY2UodGlsZURpc3RhbmNlOiBhbnksIGxhc3RTZWdtZW50QW5nbGU6IG51bWJlciwgcGl4ZWxzVG9UaWxlVW5pdHM6IG51bWJlciwgY2FtZXJhVG9BbmNob3JEaXN0YW5jZTogbnVtYmVyLCBwaXRjaFdpdGhNYXA6IGJvb2xlYW4pOiBudW1iZXIge1xuICAgICAgICAvLyBUaGlzIGlzIGEgcXVpY2sgYW5kIGRpcnR5IHNvbHV0aW9uIGZvciBjaG9zaW5nIHdoaWNoIGNvbGxpc2lvbiBjaXJjbGVzIHRvIHVzZSAoc2luY2UgY29sbGlzaW9uIGNpcmNsZXMgYXJlXG4gICAgICAgIC8vIGxhaWQgb3V0IGluIHRpbGUgdW5pdHMpLiBJZGVhbGx5LCBJIHRoaW5rIHdlIHNob3VsZCBnZW5lcmF0ZSBjb2xsaXNpb24gY2lyY2xlcyBvbiB0aGUgZmx5IGluIHZpZXdwb3J0IGNvb3JkaW5hdGVzXG4gICAgICAgIC8vIGF0IHRoZSB0aW1lIHdlIGRvIGNvbGxpc2lvbiBkZXRlY3Rpb24uXG4gICAgICAgIC8vIFNlZSBodHRwczovL2dpdGh1Yi5jb20vbWFwYm94L21hcGJveC1nbC1qcy9pc3N1ZXMvNTQ3NFxuXG4gICAgICAgIC8vIGluY2lkZW5jZVN0cmV0Y2ggaXMgdGhlIHJhdGlvIG9mIGhvdyBtdWNoIHkgc3BhY2UgYSBsYWJlbCB0YWtlcyB1cCBvbiBhIHRpbGUgd2hpbGUgZHJhd24gcGVycGVuZGljdWxhciB0byB0aGUgdmlld3BvcnQgdnNcbiAgICAgICAgLy8gIGhvdyBtdWNoIHNwYWNlIGl0IHdvdWxkIHRha2UgdXAgaWYgaXQgd2VyZSBkcmF3biBmbGF0IG9uIHRoZSB0aWxlXG4gICAgICAgIC8vIFVzaW5nIGxhdyBvZiBzaW5lcywgY2FtZXJhX3RvX2FuY2hvci9zaW4oZ3JvdW5kX2FuZ2xlKSA9IGNhbWVyYV90b19jZW50ZXIvc2luKGluY2lkZW5jZV9hbmdsZSlcbiAgICAgICAgLy8gSW5jaWRlbmNlIGFuZ2xlIDkwIC0+IGhlYWQgb24sIHNpbihpbmNpZGVuY2VfYW5nbGUpID0gMSwgbm8gc3RyZXRjaFxuICAgICAgICAvLyBJbmNpZGVuY2UgYW5nbGUgMSAtPiB2ZXJ5IG9ibGlxdWUsIHNpbihpbmNpZGVuY2VfYW5nbGUpID1+IDAsIGxvdHMgb2Ygc3RyZXRjaFxuICAgICAgICAvLyBncm91bmRfYW5nbGUgPSB1X3BpdGNoICsgUEkvMiAtPiBzaW4oZ3JvdW5kX2FuZ2xlKSA9IGNvcyh1X3BpdGNoKVxuICAgICAgICAvLyBpbmNpZGVuY2VTdHJldGNoID0gMSAvIHNpbihpbmNpZGVuY2VBbmdsZSlcblxuICAgICAgICBjb25zdCBpbmNpZGVuY2VTdHJldGNoID0gcGl0Y2hXaXRoTWFwID8gMSA6IGNhbWVyYVRvQW5jaG9yRGlzdGFuY2UgLyB0aGlzLnBpdGNoZmFjdG9yO1xuICAgICAgICBjb25zdCBsYXN0U2VnbWVudFRpbGUgPSB0aWxlRGlzdGFuY2UubGFzdFNlZ21lbnRWaWV3cG9ydERpc3RhbmNlICogcGl4ZWxzVG9UaWxlVW5pdHM7XG4gICAgICAgIHJldHVybiB0aWxlRGlzdGFuY2UucHJldlRpbGVEaXN0YW5jZSArXG4gICAgICAgICAgICBsYXN0U2VnbWVudFRpbGUgK1xuICAgICAgICAgICAgKGluY2lkZW5jZVN0cmV0Y2ggLSAxKSAqIGxhc3RTZWdtZW50VGlsZSAqIE1hdGguYWJzKE1hdGguc2luKGxhc3RTZWdtZW50QW5nbGUpKTtcbiAgICB9XG5cbiAgICBwbGFjZUNvbGxpc2lvbkNpcmNsZXMoY29sbGlzaW9uQ2lyY2xlczogQXJyYXk8bnVtYmVyPixcbiAgICAgICAgICAgICAgICAgICAgICAgICAgYWxsb3dPdmVybGFwOiBib29sZWFuLFxuICAgICAgICAgICAgICAgICAgICAgICAgICBzY2FsZTogbnVtYmVyLFxuICAgICAgICAgICAgICAgICAgICAgICAgICB0ZXh0UGl4ZWxSYXRpbzogbnVtYmVyLFxuICAgICAgICAgICAgICAgICAgICAgICAgICBzeW1ib2w6IGFueSxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgbGluZVZlcnRleEFycmF5OiBTeW1ib2xMaW5lVmVydGV4QXJyYXksXG4gICAgICAgICAgICAgICAgICAgICAgICAgIGdseXBoT2Zmc2V0QXJyYXk6IEdseXBoT2Zmc2V0QXJyYXksXG4gICAgICAgICAgICAgICAgICAgICAgICAgIGZvbnRTaXplOiBudW1iZXIsXG4gICAgICAgICAgICAgICAgICAgICAgICAgIHBvc01hdHJpeDogbWF0NCxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgbGFiZWxQbGFuZU1hdHJpeDogbWF0NCxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgc2hvd0NvbGxpc2lvbkNpcmNsZXM6IGJvb2xlYW4sXG4gICAgICAgICAgICAgICAgICAgICAgICAgIHBpdGNoV2l0aE1hcDogYm9vbGVhbixcbiAgICAgICAgICAgICAgICAgICAgICAgICAgY29sbGlzaW9uR3JvdXBQcmVkaWNhdGU/OiBhbnkpOiB7IGNpcmNsZXM6IEFycmF5PG51bWJlcj4sIG9mZnNjcmVlbjogYm9vbGVhbiB9IHtcbiAgICAgICAgY29uc3QgcGxhY2VkQ29sbGlzaW9uQ2lyY2xlcyA9IFtdO1xuXG4gICAgICAgIGNvbnN0IHByb2plY3RlZEFuY2hvciA9IHRoaXMucHJvamVjdEFuY2hvcihwb3NNYXRyaXgsIHN5bWJvbC5hbmNob3JYLCBzeW1ib2wuYW5jaG9yWSk7XG5cbiAgICAgICAgY29uc3QgcHJvamVjdGlvbkNhY2hlID0ge307XG4gICAgICAgIGNvbnN0IGZvbnRTY2FsZSA9IGZvbnRTaXplIC8gMjQ7XG4gICAgICAgIGNvbnN0IGxpbmVPZmZzZXRYID0gc3ltYm9sLmxpbmVPZmZzZXRYICogZm9udFNpemU7XG4gICAgICAgIGNvbnN0IGxpbmVPZmZzZXRZID0gc3ltYm9sLmxpbmVPZmZzZXRZICogZm9udFNpemU7XG5cbiAgICAgICAgY29uc3QgdGlsZVVuaXRBbmNob3JQb2ludCA9IG5ldyBQb2ludChzeW1ib2wuYW5jaG9yWCwgc3ltYm9sLmFuY2hvclkpO1xuICAgICAgICAvLyBwcm9qZWN0aW9uLnByb2plY3QgZ2VuZXJhdGVzIE5EQyBjb29yZGluYXRlcywgYXMgb3Bwb3NlZCB0byB0aGVcbiAgICAgICAgLy8gcGl4ZWwtYmFzZWQgZ3JpZCBjb29yZGluYXRlcyBnZW5lcmF0ZWQgYnkgdGhpcy5wcm9qZWN0UG9pbnRcbiAgICAgICAgY29uc3QgbGFiZWxQbGFuZUFuY2hvclBvaW50ID1cbiAgICAgICAgICAgIHByb2plY3Rpb24ucHJvamVjdCh0aWxlVW5pdEFuY2hvclBvaW50LCBsYWJlbFBsYW5lTWF0cml4KS5wb2ludDtcbiAgICAgICAgY29uc3QgZmlyc3RBbmRMYXN0R2x5cGggPSBwcm9qZWN0aW9uLnBsYWNlRmlyc3RBbmRMYXN0R2x5cGgoXG4gICAgICAgICAgICBmb250U2NhbGUsXG4gICAgICAgICAgICBnbHlwaE9mZnNldEFycmF5LFxuICAgICAgICAgICAgbGluZU9mZnNldFgsXG4gICAgICAgICAgICBsaW5lT2Zmc2V0WSxcbiAgICAgICAgICAgIC8qZmxpcCovIGZhbHNlLFxuICAgICAgICAgICAgbGFiZWxQbGFuZUFuY2hvclBvaW50LFxuICAgICAgICAgICAgdGlsZVVuaXRBbmNob3JQb2ludCxcbiAgICAgICAgICAgIHN5bWJvbCxcbiAgICAgICAgICAgIGxpbmVWZXJ0ZXhBcnJheSxcbiAgICAgICAgICAgIGxhYmVsUGxhbmVNYXRyaXgsXG4gICAgICAgICAgICBwcm9qZWN0aW9uQ2FjaGUsXG4gICAgICAgICAgICAvKnJldHVybiB0aWxlIGRpc3RhbmNlKi8gdHJ1ZSk7XG5cbiAgICAgICAgbGV0IGNvbGxpc2lvbkRldGVjdGVkID0gZmFsc2U7XG4gICAgICAgIGxldCBpbkdyaWQgPSBmYWxzZTtcbiAgICAgICAgbGV0IGVudGlyZWx5T2Zmc2NyZWVuID0gdHJ1ZTtcblxuICAgICAgICBjb25zdCB0aWxlVG9WaWV3cG9ydCA9IHByb2plY3RlZEFuY2hvci5wZXJzcGVjdGl2ZVJhdGlvICogdGV4dFBpeGVsUmF0aW87XG4gICAgICAgIC8vIHBpeGVsc1RvVGlsZVVuaXRzIGlzIHVzZWQgZm9yIHRyYW5zbGF0aW5nIGxpbmUgZ2VvbWV0cnkgdG8gdGlsZSB1bml0c1xuICAgICAgICAvLyAuLi4gc28gd2UgY2FyZSBhYm91dCAnc2NhbGUnIGJ1dCBub3QgJ3BlcnNwZWN0aXZlUmF0aW8nXG4gICAgICAgIC8vIGVxdWl2YWxlbnQgdG8gcGl4ZWxfdG9fdGlsZV91bml0c1xuICAgICAgICBjb25zdCBwaXhlbHNUb1RpbGVVbml0cyA9IDEgLyAodGV4dFBpeGVsUmF0aW8gKiBzY2FsZSk7XG5cbiAgICAgICAgbGV0IGZpcnN0VGlsZURpc3RhbmNlID0gMCwgbGFzdFRpbGVEaXN0YW5jZSA9IDA7XG4gICAgICAgIGlmIChmaXJzdEFuZExhc3RHbHlwaCkge1xuICAgICAgICAgICAgZmlyc3RUaWxlRGlzdGFuY2UgPSB0aGlzLmFwcHJveGltYXRlVGlsZURpc3RhbmNlKGZpcnN0QW5kTGFzdEdseXBoLmZpcnN0LnRpbGVEaXN0YW5jZSwgZmlyc3RBbmRMYXN0R2x5cGguZmlyc3QuYW5nbGUsIHBpeGVsc1RvVGlsZVVuaXRzLCBwcm9qZWN0ZWRBbmNob3IuY2FtZXJhRGlzdGFuY2UsIHBpdGNoV2l0aE1hcCk7XG4gICAgICAgICAgICBsYXN0VGlsZURpc3RhbmNlID0gdGhpcy5hcHByb3hpbWF0ZVRpbGVEaXN0YW5jZShmaXJzdEFuZExhc3RHbHlwaC5sYXN0LnRpbGVEaXN0YW5jZSwgZmlyc3RBbmRMYXN0R2x5cGgubGFzdC5hbmdsZSwgcGl4ZWxzVG9UaWxlVW5pdHMsIHByb2plY3RlZEFuY2hvci5jYW1lcmFEaXN0YW5jZSwgcGl0Y2hXaXRoTWFwKTtcbiAgICAgICAgfVxuXG4gICAgICAgIGZvciAobGV0IGsgPSAwOyBrIDwgY29sbGlzaW9uQ2lyY2xlcy5sZW5ndGg7IGsgKz0gNSkge1xuICAgICAgICAgICAgY29uc3QgYW5jaG9yUG9pbnRYID0gY29sbGlzaW9uQ2lyY2xlc1trXTtcbiAgICAgICAgICAgIGNvbnN0IGFuY2hvclBvaW50WSA9IGNvbGxpc2lvbkNpcmNsZXNbayArIDFdO1xuICAgICAgICAgICAgY29uc3QgdGlsZVVuaXRSYWRpdXMgPSBjb2xsaXNpb25DaXJjbGVzW2sgKyAyXTtcbiAgICAgICAgICAgIGNvbnN0IGJveFNpZ25lZERpc3RhbmNlRnJvbUFuY2hvciA9IGNvbGxpc2lvbkNpcmNsZXNbayArIDNdO1xuICAgICAgICAgICAgaWYgKCFmaXJzdEFuZExhc3RHbHlwaCB8fFxuICAgICAgICAgICAgICAgIChib3hTaWduZWREaXN0YW5jZUZyb21BbmNob3IgPCAtZmlyc3RUaWxlRGlzdGFuY2UpIHx8XG4gICAgICAgICAgICAgICAgKGJveFNpZ25lZERpc3RhbmNlRnJvbUFuY2hvciA+IGxhc3RUaWxlRGlzdGFuY2UpKSB7XG4gICAgICAgICAgICAgICAgLy8gVGhlIGxhYmVsIGVpdGhlciBkb2Vzbid0IGZpdCBvbiBpdHMgbGluZSBvciB3ZVxuICAgICAgICAgICAgICAgIC8vIGRvbid0IG5lZWQgdG8gdXNlIHRoaXMgY2lyY2xlIGJlY2F1c2UgdGhlIGxhYmVsXG4gICAgICAgICAgICAgICAgLy8gZG9lc24ndCBleHRlbmQgdGhpcyBmYXIuIEVpdGhlciB3YXksIG1hcmsgdGhlIGNpcmNsZSB1bnVzZWQuXG4gICAgICAgICAgICAgICAgbWFya0NvbGxpc2lvbkNpcmNsZVVzZWQoY29sbGlzaW9uQ2lyY2xlcywgaywgZmFsc2UpO1xuICAgICAgICAgICAgICAgIGNvbnRpbnVlO1xuICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICBjb25zdCBwcm9qZWN0ZWRQb2ludCA9IHRoaXMucHJvamVjdFBvaW50KHBvc01hdHJpeCwgYW5jaG9yUG9pbnRYLCBhbmNob3JQb2ludFkpO1xuICAgICAgICAgICAgY29uc3QgcmFkaXVzID0gdGlsZVVuaXRSYWRpdXMgKiB0aWxlVG9WaWV3cG9ydDtcblxuICAgICAgICAgICAgY29uc3QgYXRMZWFzdE9uZUNpcmNsZVBsYWNlZCA9IHBsYWNlZENvbGxpc2lvbkNpcmNsZXMubGVuZ3RoID4gMDtcbiAgICAgICAgICAgIGlmIChhdExlYXN0T25lQ2lyY2xlUGxhY2VkKSB7XG4gICAgICAgICAgICAgICAgY29uc3QgZHggPSBwcm9qZWN0ZWRQb2ludC54IC0gcGxhY2VkQ29sbGlzaW9uQ2lyY2xlc1twbGFjZWRDb2xsaXNpb25DaXJjbGVzLmxlbmd0aCAtIDRdO1xuICAgICAgICAgICAgICAgIGNvbnN0IGR5ID0gcHJvamVjdGVkUG9pbnQueSAtIHBsYWNlZENvbGxpc2lvbkNpcmNsZXNbcGxhY2VkQ29sbGlzaW9uQ2lyY2xlcy5sZW5ndGggLSAzXTtcbiAgICAgICAgICAgICAgICAvLyBUaGUgY2lyY2xlIGVkZ2VzIHRvdWNoIHdoZW4gdGhlIGRpc3RhbmNlIGJldHdlZW4gdGhlaXIgY2VudGVycyBpcyAyeCB0aGUgcmFkaXVzXG4gICAgICAgICAgICAgICAgLy8gV2hlbiB0aGUgZGlzdGFuY2UgaXMgMXggdGhlIHJhZGl1cywgdGhleSdyZSBkb3VibGVkIHVwLCBhbmQgd2UgY291bGQgcmVtb3ZlXG4gICAgICAgICAgICAgICAgLy8gZXZlcnkgb3RoZXIgY2lyY2xlIHdoaWxlIGtlZXBpbmcgdGhlbSBhbGwgaW4gdG91Y2guXG4gICAgICAgICAgICAgICAgLy8gV2UgYWN0dWFsbHkgc3RhcnQgcmVtb3ZpbmcgY2lyY2xlcyB3aGVuIHRoZSBkaXN0YW5jZSBpcyDiiJoyeCB0aGUgcmFkaXVzOlxuICAgICAgICAgICAgICAgIC8vICB0aGlubmluZyB0aGUgbnVtYmVyIG9mIGNpcmNsZXMgYXMgbXVjaCBhcyBwb3NzaWJsZSBpcyBhIG1ham9yIHBlcmZvcm1hbmNlIHdpbixcbiAgICAgICAgICAgICAgICAvLyAgYW5kIHRoZSBzbWFsbCBnYXBzIGludHJvZHVjZWQgZG9uJ3QgbWFrZSBhIHZlcnkgbm90aWNlYWJsZSBkaWZmZXJlbmNlLlxuICAgICAgICAgICAgICAgIGNvbnN0IHBsYWNlZFRvb0RlbnNlbHkgPSByYWRpdXMgKiByYWRpdXMgKiAyID4gZHggKiBkeCArIGR5ICogZHk7XG4gICAgICAgICAgICAgICAgaWYgKHBsYWNlZFRvb0RlbnNlbHkpIHtcbiAgICAgICAgICAgICAgICAgICAgY29uc3QgYXRMZWFzdE9uZU1vcmVDaXJjbGUgPSAoayArIDgpIDwgY29sbGlzaW9uQ2lyY2xlcy5sZW5ndGg7XG4gICAgICAgICAgICAgICAgICAgIGlmIChhdExlYXN0T25lTW9yZUNpcmNsZSkge1xuICAgICAgICAgICAgICAgICAgICAgICAgY29uc3QgbmV4dEJveERpc3RhbmNlVG9BbmNob3IgPSBjb2xsaXNpb25DaXJjbGVzW2sgKyA4XTtcbiAgICAgICAgICAgICAgICAgICAgICAgIGlmICgobmV4dEJveERpc3RhbmNlVG9BbmNob3IgPiAtZmlyc3RUaWxlRGlzdGFuY2UpICYmXG4gICAgICAgICAgICAgICAgICAgICAgICAobmV4dEJveERpc3RhbmNlVG9BbmNob3IgPCBsYXN0VGlsZURpc3RhbmNlKSkge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIC8vIEhpZGUgc2lnbmlmaWNhbnRseSBvdmVybGFwcGluZyBjaXJjbGVzLCB1bmxlc3MgdGhpcyBpcyB0aGUgbGFzdCBvbmUgd2UgY2FuXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgLy8gdXNlLCBpbiB3aGljaCBjYXNlIHdlIHdhbnQgdG8ga2VlcCBpdCBpbiBwbGFjZSBldmVuIGlmIGl0J3MgdGlnaHRseSBwYWNrZWRcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAvLyB3aXRoIHRoZSBvbmUgYmVmb3JlIGl0LlxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIG1hcmtDb2xsaXNpb25DaXJjbGVVc2VkKGNvbGxpc2lvbkNpcmNsZXMsIGssIGZhbHNlKTtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBjb250aW51ZTtcbiAgICAgICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGNvbnN0IGNvbGxpc2lvbkJveEFycmF5SW5kZXggPSBrIC8gNTtcbiAgICAgICAgICAgIHBsYWNlZENvbGxpc2lvbkNpcmNsZXMucHVzaChwcm9qZWN0ZWRQb2ludC54LCBwcm9qZWN0ZWRQb2ludC55LCByYWRpdXMsIGNvbGxpc2lvbkJveEFycmF5SW5kZXgpO1xuICAgICAgICAgICAgbWFya0NvbGxpc2lvbkNpcmNsZVVzZWQoY29sbGlzaW9uQ2lyY2xlcywgaywgdHJ1ZSk7XG5cbiAgICAgICAgICAgIGNvbnN0IHgxID0gcHJvamVjdGVkUG9pbnQueCAtIHJhZGl1cztcbiAgICAgICAgICAgIGNvbnN0IHkxID0gcHJvamVjdGVkUG9pbnQueSAtIHJhZGl1cztcbiAgICAgICAgICAgIGNvbnN0IHgyID0gcHJvamVjdGVkUG9pbnQueCArIHJhZGl1cztcbiAgICAgICAgICAgIGNvbnN0IHkyID0gcHJvamVjdGVkUG9pbnQueSArIHJhZGl1cztcbiAgICAgICAgICAgIGVudGlyZWx5T2Zmc2NyZWVuID0gZW50aXJlbHlPZmZzY3JlZW4gJiYgdGhpcy5pc09mZnNjcmVlbih4MSwgeTEsIHgyLCB5Mik7XG4gICAgICAgICAgICBpbkdyaWQgPSBpbkdyaWQgfHwgdGhpcy5pc0luc2lkZUdyaWQoeDEsIHkxLCB4MiwgeTIpO1xuXG4gICAgICAgICAgICBpZiAoIWFsbG93T3ZlcmxhcCkge1xuICAgICAgICAgICAgICAgIGlmICh0aGlzLmdyaWQuaGl0VGVzdENpcmNsZShwcm9qZWN0ZWRQb2ludC54LCBwcm9qZWN0ZWRQb2ludC55LCByYWRpdXMsIGNvbGxpc2lvbkdyb3VwUHJlZGljYXRlKSkge1xuICAgICAgICAgICAgICAgICAgICBpZiAoIXNob3dDb2xsaXNpb25DaXJjbGVzKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICByZXR1cm4ge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGNpcmNsZXM6IFtdLFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIG9mZnNjcmVlbjogZmFsc2VcbiAgICAgICAgICAgICAgICAgICAgICAgIH07XG4gICAgICAgICAgICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAvLyBEb24ndCBlYXJseSBleGl0IGlmIHdlJ3JlIHNob3dpbmcgdGhlIGRlYnVnIGNpcmNsZXMgYmVjYXVzZSB3ZSBzdGlsbCB3YW50IHRvIGNhbGN1bGF0ZVxuICAgICAgICAgICAgICAgICAgICAgICAgLy8gd2hpY2ggY2lyY2xlcyBhcmUgaW4gdXNlXG4gICAgICAgICAgICAgICAgICAgICAgICBjb2xsaXNpb25EZXRlY3RlZCA9IHRydWU7XG4gICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9XG4gICAgICAgIH1cblxuICAgICAgICByZXR1cm4ge1xuICAgICAgICAgICAgY2lyY2xlczogKGNvbGxpc2lvbkRldGVjdGVkIHx8ICFpbkdyaWQpID8gW10gOiBwbGFjZWRDb2xsaXNpb25DaXJjbGVzLFxuICAgICAgICAgICAgb2Zmc2NyZWVuOiBlbnRpcmVseU9mZnNjcmVlblxuICAgICAgICB9O1xuICAgIH1cblxuICAgIC8qKlxuICAgICAqIEJlY2F1c2UgdGhlIGdlb21ldHJpZXMgaW4gdGhlIENvbGxpc2lvbkluZGV4IGFyZSBhbiBhcHByb3hpbWF0aW9uIG9mIHRoZSBzaGFwZSBvZlxuICAgICAqIHN5bWJvbHMgb24gdGhlIG1hcCwgd2UgdXNlIHRoZSBDb2xsaXNpb25JbmRleCB0byBsb29rIHVwIHRoZSBzeW1ib2wgcGFydCBvZlxuICAgICAqIGBxdWVyeVJlbmRlcmVkRmVhdHVyZXNgLlxuICAgICAqXG4gICAgICogQHByaXZhdGVcbiAgICAgKi9cbiAgICBxdWVyeVJlbmRlcmVkU3ltYm9scyh2aWV3cG9ydFF1ZXJ5R2VvbWV0cnk6IEFycmF5PFBvaW50Pikge1xuICAgICAgICBpZiAodmlld3BvcnRRdWVyeUdlb21ldHJ5Lmxlbmd0aCA9PT0gMCB8fCAodGhpcy5ncmlkLmtleXNMZW5ndGgoKSA9PT0gMCAmJiB0aGlzLmlnbm9yZWRHcmlkLmtleXNMZW5ndGgoKSA9PT0gMCkpIHtcbiAgICAgICAgICAgIHJldHVybiB7fTtcbiAgICAgICAgfVxuXG4gICAgICAgIGNvbnN0IHF1ZXJ5ID0gW107XG4gICAgICAgIGxldCBtaW5YID0gSW5maW5pdHk7XG4gICAgICAgIGxldCBtaW5ZID0gSW5maW5pdHk7XG4gICAgICAgIGxldCBtYXhYID0gLUluZmluaXR5O1xuICAgICAgICBsZXQgbWF4WSA9IC1JbmZpbml0eTtcbiAgICAgICAgZm9yIChjb25zdCBwb2ludCBvZiB2aWV3cG9ydFF1ZXJ5R2VvbWV0cnkpIHtcbiAgICAgICAgICAgIGNvbnN0IGdyaWRQb2ludCA9IG5ldyBQb2ludChwb2ludC54ICsgdmlld3BvcnRQYWRkaW5nLCBwb2ludC55ICsgdmlld3BvcnRQYWRkaW5nKTtcbiAgICAgICAgICAgIG1pblggPSBNYXRoLm1pbihtaW5YLCBncmlkUG9pbnQueCk7XG4gICAgICAgICAgICBtaW5ZID0gTWF0aC5taW4obWluWSwgZ3JpZFBvaW50LnkpO1xuICAgICAgICAgICAgbWF4WCA9IE1hdGgubWF4KG1heFgsIGdyaWRQb2ludC54KTtcbiAgICAgICAgICAgIG1heFkgPSBNYXRoLm1heChtYXhZLCBncmlkUG9pbnQueSk7XG4gICAgICAgICAgICBxdWVyeS5wdXNoKGdyaWRQb2ludCk7XG4gICAgICAgIH1cblxuICAgICAgICBjb25zdCBmZWF0dXJlcyA9IHRoaXMuZ3JpZC5xdWVyeShtaW5YLCBtaW5ZLCBtYXhYLCBtYXhZKVxuICAgICAgICAgICAgLmNvbmNhdCh0aGlzLmlnbm9yZWRHcmlkLnF1ZXJ5KG1pblgsIG1pblksIG1heFgsIG1heFkpKTtcblxuICAgICAgICBjb25zdCBzZWVuRmVhdHVyZXMgPSB7fTtcbiAgICAgICAgY29uc3QgcmVzdWx0ID0ge307XG5cbiAgICAgICAgZm9yIChjb25zdCBmZWF0dXJlIG9mIGZlYXR1cmVzKSB7XG4gICAgICAgICAgICBjb25zdCBmZWF0dXJlS2V5ID0gZmVhdHVyZS5rZXk7XG4gICAgICAgICAgICAvLyBTa2lwIGFscmVhZHkgc2VlbiBmZWF0dXJlcy5cbiAgICAgICAgICAgIGlmIChzZWVuRmVhdHVyZXNbZmVhdHVyZUtleS5idWNrZXRJbnN0YW5jZUlkXSA9PT0gdW5kZWZpbmVkKSB7XG4gICAgICAgICAgICAgICAgc2VlbkZlYXR1cmVzW2ZlYXR1cmVLZXkuYnVja2V0SW5zdGFuY2VJZF0gPSB7fTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGlmIChzZWVuRmVhdHVyZXNbZmVhdHVyZUtleS5idWNrZXRJbnN0YW5jZUlkXVtmZWF0dXJlS2V5LmZlYXR1cmVJbmRleF0pIHtcbiAgICAgICAgICAgICAgICBjb250aW51ZTtcbiAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgLy8gQ2hlY2sgaWYgcXVlcnkgaW50ZXJzZWN0cyB3aXRoIHRoZSBmZWF0dXJlIGJveFxuICAgICAgICAgICAgLy8gXCJDb2xsaXNpb24gQ2lyY2xlc1wiIGZvciBsaW5lIGxhYmVscyBhcmUgdHJlYXRlZCBhcyBib3hlcyBoZXJlXG4gICAgICAgICAgICAvLyBTaW5jZSB0aGVyZSdzIG5vIGFjdHVhbCBjb2xsaXNpb24gdGFraW5nIHBsYWNlLCB0aGUgY2lyY2xlIHZzLiBzcXVhcmVcbiAgICAgICAgICAgIC8vIGRpc3RpbmN0aW9uIGRvZXNuJ3QgbWF0dGVyIGFzIG11Y2gsIGFuZCBib3ggZ2VvbWV0cnkgaXMgZWFzaWVyXG4gICAgICAgICAgICAvLyB0byB3b3JrIHdpdGguXG4gICAgICAgICAgICBjb25zdCBiYm94ID0gW1xuICAgICAgICAgICAgICAgIG5ldyBQb2ludChmZWF0dXJlLngxLCBmZWF0dXJlLnkxKSxcbiAgICAgICAgICAgICAgICBuZXcgUG9pbnQoZmVhdHVyZS54MiwgZmVhdHVyZS55MSksXG4gICAgICAgICAgICAgICAgbmV3IFBvaW50KGZlYXR1cmUueDIsIGZlYXR1cmUueTIpLFxuICAgICAgICAgICAgICAgIG5ldyBQb2ludChmZWF0dXJlLngxLCBmZWF0dXJlLnkyKVxuICAgICAgICAgICAgXTtcbiAgICAgICAgICAgIGlmICghaW50ZXJzZWN0aW9uVGVzdHMucG9seWdvbkludGVyc2VjdHNQb2x5Z29uKHF1ZXJ5LCBiYm94KSkge1xuICAgICAgICAgICAgICAgIGNvbnRpbnVlO1xuICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICBzZWVuRmVhdHVyZXNbZmVhdHVyZUtleS5idWNrZXRJbnN0YW5jZUlkXVtmZWF0dXJlS2V5LmZlYXR1cmVJbmRleF0gPSB0cnVlO1xuICAgICAgICAgICAgaWYgKHJlc3VsdFtmZWF0dXJlS2V5LmJ1Y2tldEluc3RhbmNlSWRdID09PSB1bmRlZmluZWQpIHtcbiAgICAgICAgICAgICAgICByZXN1bHRbZmVhdHVyZUtleS5idWNrZXRJbnN0YW5jZUlkXSA9IFtdO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgcmVzdWx0W2ZlYXR1cmVLZXkuYnVja2V0SW5zdGFuY2VJZF0ucHVzaChmZWF0dXJlS2V5LmZlYXR1cmVJbmRleCk7XG4gICAgICAgIH1cblxuICAgICAgICByZXR1cm4gcmVzdWx0O1xuICAgIH1cblxuICAgIGluc2VydENvbGxpc2lvbkJveChjb2xsaXNpb25Cb3g6IEFycmF5PG51bWJlcj4sIGlnbm9yZVBsYWNlbWVudDogYm9vbGVhbiwgYnVja2V0SW5zdGFuY2VJZDogbnVtYmVyLCBmZWF0dXJlSW5kZXg6IG51bWJlciwgY29sbGlzaW9uR3JvdXBJRDogbnVtYmVyKSB7XG4gICAgICAgIGNvbnN0IGdyaWQgPSBpZ25vcmVQbGFjZW1lbnQgPyB0aGlzLmlnbm9yZWRHcmlkIDogdGhpcy5ncmlkO1xuXG4gICAgICAgIGNvbnN0IGtleSA9IHsgYnVja2V0SW5zdGFuY2VJZDogYnVja2V0SW5zdGFuY2VJZCwgZmVhdHVyZUluZGV4OiBmZWF0dXJlSW5kZXgsIGNvbGxpc2lvbkdyb3VwSUQ6IGNvbGxpc2lvbkdyb3VwSUQgfTtcbiAgICAgICAgZ3JpZC5pbnNlcnQoa2V5LCBjb2xsaXNpb25Cb3hbMF0sIGNvbGxpc2lvbkJveFsxXSwgY29sbGlzaW9uQm94WzJdLCBjb2xsaXNpb25Cb3hbM10pO1xuICAgIH1cblxuICAgIGluc2VydENvbGxpc2lvbkNpcmNsZXMoY29sbGlzaW9uQ2lyY2xlczogQXJyYXk8bnVtYmVyPiwgaWdub3JlUGxhY2VtZW50OiBib29sZWFuLCBidWNrZXRJbnN0YW5jZUlkOiBudW1iZXIsIGZlYXR1cmVJbmRleDogbnVtYmVyLCBjb2xsaXNpb25Hcm91cElEOiBudW1iZXIpIHtcbiAgICAgICAgY29uc3QgZ3JpZCA9IGlnbm9yZVBsYWNlbWVudCA/IHRoaXMuaWdub3JlZEdyaWQgOiB0aGlzLmdyaWQ7XG5cbiAgICAgICAgY29uc3Qga2V5ID0geyBidWNrZXRJbnN0YW5jZUlkOiBidWNrZXRJbnN0YW5jZUlkLCBmZWF0dXJlSW5kZXg6IGZlYXR1cmVJbmRleCwgY29sbGlzaW9uR3JvdXBJRDogY29sbGlzaW9uR3JvdXBJRCB9O1xuICAgICAgICBmb3IgKGxldCBrID0gMDsgayA8IGNvbGxpc2lvbkNpcmNsZXMubGVuZ3RoOyBrICs9IDQpIHtcbiAgICAgICAgICAgIGdyaWQuaW5zZXJ0Q2lyY2xlKGtleSwgY29sbGlzaW9uQ2lyY2xlc1trXSwgY29sbGlzaW9uQ2lyY2xlc1trICsgMV0sIGNvbGxpc2lvbkNpcmNsZXNbayArIDJdKTtcbiAgICAgICAgfVxuICAgIH1cblxuICAgIHByb2plY3RBbmNob3IocG9zTWF0cml4OiBtYXQ0LCB4OiBudW1iZXIsIHk6IG51bWJlcikge1xuICAgICAgICBjb25zdCBwID0gW3gsIHksIDAsIDFdO1xuICAgICAgICBwcm9qZWN0aW9uLnh5VHJhbnNmb3JtTWF0NChwLCBwLCBwb3NNYXRyaXgpO1xuICAgICAgICByZXR1cm4ge1xuICAgICAgICAgICAgcGVyc3BlY3RpdmVSYXRpbzogMC41ICsgMC41ICogKHRoaXMudHJhbnNmb3JtLmNhbWVyYVRvQ2VudGVyRGlzdGFuY2UgLyBwWzNdKSxcbiAgICAgICAgICAgIGNhbWVyYURpc3RhbmNlOiBwWzNdXG4gICAgICAgIH07XG4gICAgfVxuXG4gICAgcHJvamVjdFBvaW50KHBvc01hdHJpeDogbWF0NCwgeDogbnVtYmVyLCB5OiBudW1iZXIpIHtcbiAgICAgICAgY29uc3QgcCA9IFt4LCB5LCAwLCAxXTtcbiAgICAgICAgcHJvamVjdGlvbi54eVRyYW5zZm9ybU1hdDQocCwgcCwgcG9zTWF0cml4KTtcbiAgICAgICAgcmV0dXJuIG5ldyBQb2ludChcbiAgICAgICAgICAgICgoKHBbMF0gLyBwWzNdICsgMSkgLyAyKSAqIHRoaXMudHJhbnNmb3JtLndpZHRoKSArIHZpZXdwb3J0UGFkZGluZyxcbiAgICAgICAgICAgICgoKC1wWzFdIC8gcFszXSArIDEpIC8gMikgKiB0aGlzLnRyYW5zZm9ybS5oZWlnaHQpICsgdmlld3BvcnRQYWRkaW5nXG4gICAgICAgICk7XG4gICAgfVxuXG4gICAgcHJvamVjdEFuZEdldFBlcnNwZWN0aXZlUmF0aW8ocG9zTWF0cml4OiBtYXQ0LCB4OiBudW1iZXIsIHk6IG51bWJlcikge1xuICAgICAgICBjb25zdCBwID0gW3gsIHksIDAsIDFdO1xuICAgICAgICBwcm9qZWN0aW9uLnh5VHJhbnNmb3JtTWF0NChwLCBwLCBwb3NNYXRyaXgpO1xuICAgICAgICBjb25zdCBhID0gbmV3IFBvaW50KFxuICAgICAgICAgICAgKCgocFswXSAvIHBbM10gKyAxKSAvIDIpICogdGhpcy50cmFuc2Zvcm0ud2lkdGgpICsgdmlld3BvcnRQYWRkaW5nLFxuICAgICAgICAgICAgKCgoLXBbMV0gLyBwWzNdICsgMSkgLyAyKSAqIHRoaXMudHJhbnNmb3JtLmhlaWdodCkgKyB2aWV3cG9ydFBhZGRpbmdcbiAgICAgICAgKTtcbiAgICAgICAgcmV0dXJuIHtcbiAgICAgICAgICAgIHBvaW50OiBhLFxuICAgICAgICAgICAgLy8gU2VlIHBlcnNwZWN0aXZlIHJhdGlvIGNvbW1lbnQgaW4gc3ltYm9sX3NkZi52ZXJ0ZXhcbiAgICAgICAgICAgIC8vIFdlJ3JlIGRvaW5nIGNvbGxpc2lvbiBkZXRlY3Rpb24gaW4gdmlld3BvcnQgc3BhY2Ugc28gd2UgbmVlZFxuICAgICAgICAgICAgLy8gdG8gc2NhbGUgZG93biBib3hlcyBpbiB0aGUgZGlzdGFuY2VcbiAgICAgICAgICAgIHBlcnNwZWN0aXZlUmF0aW86IDAuNSArIDAuNSAqICh0aGlzLnRyYW5zZm9ybS5jYW1lcmFUb0NlbnRlckRpc3RhbmNlIC8gcFszXSlcbiAgICAgICAgfTtcbiAgICB9XG5cbiAgICBpc09mZnNjcmVlbih4MTogbnVtYmVyLCB5MTogbnVtYmVyLCB4MjogbnVtYmVyLCB5MjogbnVtYmVyKSB7XG4gICAgICAgIHJldHVybiB4MiA8IHZpZXdwb3J0UGFkZGluZyB8fCB4MSA+PSB0aGlzLnNjcmVlblJpZ2h0Qm91bmRhcnkgfHwgeTIgPCB2aWV3cG9ydFBhZGRpbmcgfHwgeTEgPiB0aGlzLnNjcmVlbkJvdHRvbUJvdW5kYXJ5O1xuICAgIH1cblxuICAgIGlzSW5zaWRlR3JpZCh4MTogbnVtYmVyLCB5MTogbnVtYmVyLCB4MjogbnVtYmVyLCB5MjogbnVtYmVyKSB7XG4gICAgICAgIHJldHVybiB4MiA+PSAwICYmIHgxIDwgdGhpcy5ncmlkUmlnaHRCb3VuZGFyeSAmJiB5MiA+PSAwICYmIHkxIDwgdGhpcy5ncmlkQm90dG9tQm91bmRhcnk7XG4gICAgfVxufVxuXG5mdW5jdGlvbiBtYXJrQ29sbGlzaW9uQ2lyY2xlVXNlZChjb2xsaXNpb25DaXJjbGVzOiBBcnJheTxudW1iZXI+LCBpbmRleDogbnVtYmVyLCB1c2VkOiBib29sZWFuKSB7XG4gICAgY29sbGlzaW9uQ2lyY2xlc1tpbmRleCArIDRdID0gdXNlZCA/IDEgOiAwO1xufVxuXG5leHBvcnQgZGVmYXVsdCBDb2xsaXNpb25JbmRleDtcbiIsIi8vIEBmbG93XG5cbmltcG9ydCBDb2xsaXNpb25JbmRleCBmcm9tICcuL2NvbGxpc2lvbl9pbmRleCc7XG5cbmltcG9ydCBFWFRFTlQgZnJvbSAnLi4vZGF0YS9leHRlbnQnO1xuaW1wb3J0ICogYXMgc3ltYm9sU2l6ZSBmcm9tICcuL3N5bWJvbF9zaXplJztcbmltcG9ydCAqIGFzIHByb2plY3Rpb24gZnJvbSAnLi9wcm9qZWN0aW9uJztcbmltcG9ydCBzeW1ib2xMYXllclByb3BlcnRpZXMgZnJvbSAnLi4vc3R5bGUvc3R5bGVfbGF5ZXIvc3ltYm9sX3N0eWxlX2xheWVyX3Byb3BlcnRpZXMnO1xuaW1wb3J0IGFzc2VydCBmcm9tICdhc3NlcnQnO1xuaW1wb3J0IHBpeGVsc1RvVGlsZVVuaXRzIGZyb20gJy4uL3NvdXJjZS9waXhlbHNfdG9fdGlsZV91bml0cyc7XG5cbmltcG9ydCB0eXBlIFRyYW5zZm9ybSBmcm9tICcuLi9nZW8vdHJhbnNmb3JtJztcbmltcG9ydCB0eXBlIFN0eWxlTGF5ZXIgZnJvbSAnLi4vc3R5bGUvc3R5bGVfbGF5ZXInO1xuaW1wb3J0IHR5cGUgVGlsZSBmcm9tICcuLi9zb3VyY2UvdGlsZSc7XG5pbXBvcnQgdHlwZSBTeW1ib2xCdWNrZXQgZnJvbSAnLi4vZGF0YS9idWNrZXQvc3ltYm9sX2J1Y2tldCc7XG5pbXBvcnQgdHlwZSB7bWF0NH0gZnJvbSAnZ2wtbWF0cml4JztcbmltcG9ydCB0eXBlIHtDb2xsaXNpb25Cb3hBcnJheSwgQ29sbGlzaW9uVmVydGV4QXJyYXl9IGZyb20gJy4uL2RhdGEvYXJyYXlfdHlwZXMnO1xuaW1wb3J0IHR5cGUgRmVhdHVyZUluZGV4IGZyb20gJy4uL2RhdGEvZmVhdHVyZV9pbmRleCc7XG5pbXBvcnQgdHlwZSB7T3ZlcnNjYWxlZFRpbGVJRH0gZnJvbSAnLi4vc291cmNlL3RpbGVfaWQnO1xuXG5jbGFzcyBPcGFjaXR5U3RhdGUge1xuICAgIG9wYWNpdHk6IG51bWJlcjtcbiAgICBwbGFjZWQ6IGJvb2xlYW47XG4gICAgY29uc3RydWN0b3IocHJldlN0YXRlOiA/T3BhY2l0eVN0YXRlLCBpbmNyZW1lbnQ6IG51bWJlciwgcGxhY2VkOiBib29sZWFuLCBza2lwRmFkZTogP2Jvb2xlYW4pIHtcbiAgICAgICAgaWYgKHByZXZTdGF0ZSkge1xuICAgICAgICAgICAgdGhpcy5vcGFjaXR5ID0gTWF0aC5tYXgoMCwgTWF0aC5taW4oMSwgcHJldlN0YXRlLm9wYWNpdHkgKyAocHJldlN0YXRlLnBsYWNlZCA/IGluY3JlbWVudCA6IC1pbmNyZW1lbnQpKSk7XG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICB0aGlzLm9wYWNpdHkgPSAoc2tpcEZhZGUgJiYgcGxhY2VkKSA/IDEgOiAwO1xuICAgICAgICB9XG4gICAgICAgIHRoaXMucGxhY2VkID0gcGxhY2VkO1xuICAgIH1cbiAgICBpc0hpZGRlbigpIHtcbiAgICAgICAgcmV0dXJuIHRoaXMub3BhY2l0eSA9PT0gMCAmJiAhdGhpcy5wbGFjZWQ7XG4gICAgfVxufVxuXG5jbGFzcyBKb2ludE9wYWNpdHlTdGF0ZSB7XG4gICAgdGV4dDogT3BhY2l0eVN0YXRlO1xuICAgIGljb246IE9wYWNpdHlTdGF0ZTtcbiAgICBjb25zdHJ1Y3RvcihwcmV2U3RhdGU6ID9Kb2ludE9wYWNpdHlTdGF0ZSwgaW5jcmVtZW50OiBudW1iZXIsIHBsYWNlZFRleHQ6IGJvb2xlYW4sIHBsYWNlZEljb246IGJvb2xlYW4sIHNraXBGYWRlOiA/Ym9vbGVhbikge1xuICAgICAgICB0aGlzLnRleHQgPSBuZXcgT3BhY2l0eVN0YXRlKHByZXZTdGF0ZSA/IHByZXZTdGF0ZS50ZXh0IDogbnVsbCwgaW5jcmVtZW50LCBwbGFjZWRUZXh0LCBza2lwRmFkZSk7XG4gICAgICAgIHRoaXMuaWNvbiA9IG5ldyBPcGFjaXR5U3RhdGUocHJldlN0YXRlID8gcHJldlN0YXRlLmljb24gOiBudWxsLCBpbmNyZW1lbnQsIHBsYWNlZEljb24sIHNraXBGYWRlKTtcbiAgICB9XG4gICAgaXNIaWRkZW4oKSB7XG4gICAgICAgIHJldHVybiB0aGlzLnRleHQuaXNIaWRkZW4oKSAmJiB0aGlzLmljb24uaXNIaWRkZW4oKTtcbiAgICB9XG59XG5cbmNsYXNzIEpvaW50UGxhY2VtZW50IHtcbiAgICB0ZXh0OiBib29sZWFuO1xuICAgIGljb246IGJvb2xlYW47XG4gICAgLy8gc2tpcEZhZGUgPSBvdXRzaWRlIHZpZXdwb3J0LCBidXQgd2l0aGluIENvbGxpc2lvbkluZGV4Ojp2aWV3cG9ydFBhZGRpbmcgcHggb2YgdGhlIGVkZ2VcbiAgICAvLyBCZWNhdXNlIHRoZXNlIHN5bWJvbHMgYXJlbid0IG9uc2NyZWVuIHlldCwgd2UgY2FuIHNraXAgdGhlIFwiZmFkZSBpblwiIGFuaW1hdGlvbixcbiAgICAvLyBhbmQgaWYgYSBzdWJzZXF1ZW50IHZpZXdwb3J0IGNoYW5nZSBicmluZ3MgdGhlbSBpbnRvIHZpZXcsIHRoZXknbGwgYmUgZnVsbHlcbiAgICAvLyB2aXNpYmxlIHJpZ2h0IGF3YXkuXG4gICAgc2tpcEZhZGU6IGJvb2xlYW47XG4gICAgY29uc3RydWN0b3IodGV4dDogYm9vbGVhbiwgaWNvbjogYm9vbGVhbiwgc2tpcEZhZGU6IGJvb2xlYW4pIHtcbiAgICAgICAgdGhpcy50ZXh0ID0gdGV4dDtcbiAgICAgICAgdGhpcy5pY29uID0gaWNvbjtcbiAgICAgICAgdGhpcy5za2lwRmFkZSA9IHNraXBGYWRlO1xuICAgIH1cbn1cblxuZXhwb3J0IGNsYXNzIFJldGFpbmVkUXVlcnlEYXRhIHtcbiAgICBidWNrZXRJbnN0YW5jZUlkOiBudW1iZXI7XG4gICAgZmVhdHVyZUluZGV4OiBGZWF0dXJlSW5kZXg7XG4gICAgc291cmNlTGF5ZXJJbmRleDogbnVtYmVyO1xuICAgIGJ1Y2tldEluZGV4OiBudW1iZXI7XG4gICAgdGlsZUlEOiBPdmVyc2NhbGVkVGlsZUlEO1xuICAgIGZlYXR1cmVTb3J0T3JkZXI6ID9BcnJheTxudW1iZXI+XG4gICAgY29uc3RydWN0b3IoYnVja2V0SW5zdGFuY2VJZDogbnVtYmVyLFxuICAgICAgICAgICAgICAgIGZlYXR1cmVJbmRleDogRmVhdHVyZUluZGV4LFxuICAgICAgICAgICAgICAgIHNvdXJjZUxheWVySW5kZXg6IG51bWJlcixcbiAgICAgICAgICAgICAgICBidWNrZXRJbmRleDogbnVtYmVyLFxuICAgICAgICAgICAgICAgIHRpbGVJRDogT3ZlcnNjYWxlZFRpbGVJRCkge1xuICAgICAgICB0aGlzLmJ1Y2tldEluc3RhbmNlSWQgPSBidWNrZXRJbnN0YW5jZUlkO1xuICAgICAgICB0aGlzLmZlYXR1cmVJbmRleCA9IGZlYXR1cmVJbmRleDtcbiAgICAgICAgdGhpcy5zb3VyY2VMYXllckluZGV4ID0gc291cmNlTGF5ZXJJbmRleDtcbiAgICAgICAgdGhpcy5idWNrZXRJbmRleCA9IGJ1Y2tldEluZGV4O1xuICAgICAgICB0aGlzLnRpbGVJRCA9IHRpbGVJRDtcbiAgICB9XG59XG5cbmNsYXNzIENvbGxpc2lvbkdyb3VwcyB7XG4gICAgY29sbGlzaW9uR3JvdXBzOiB7IFtncm91cE5hbWU6IHN0cmluZ106IHsgSUQ6IG51bWJlciwgcHJlZGljYXRlPzogYW55IH19O1xuICAgIG1heEdyb3VwSUQ6IG51bWJlcjtcbiAgICBjcm9zc1NvdXJjZUNvbGxpc2lvbnM6IGJvb2xlYW47XG5cbiAgICBjb25zdHJ1Y3Rvcihjcm9zc1NvdXJjZUNvbGxpc2lvbnM6IGJvb2xlYW4pIHtcbiAgICAgICAgdGhpcy5jcm9zc1NvdXJjZUNvbGxpc2lvbnMgPSBjcm9zc1NvdXJjZUNvbGxpc2lvbnM7XG4gICAgICAgIHRoaXMubWF4R3JvdXBJRCA9IDA7XG4gICAgICAgIHRoaXMuY29sbGlzaW9uR3JvdXBzID0ge307XG4gICAgfVxuXG4gICAgZ2V0KHNvdXJjZUlEOiBzdHJpbmcpIHtcbiAgICAgICAgLy8gVGhlIHByZWRpY2F0ZS9ncm91cElEIG1lY2hhbmlzbSBhbGxvd3MgZm9yIGFyYml0cmFyeSBncm91cGluZyxcbiAgICAgICAgLy8gYnV0IHRoZSBjdXJyZW50IGludGVyZmFjZSBkZWZpbmVzIG9uZSBzb3VyY2UgPT0gb25lIGdyb3VwIHdoZW5cbiAgICAgICAgLy8gY3Jvc3NTb3VyY2VDb2xsaXNpb25zID09IHRydWUuXG4gICAgICAgIGlmICghdGhpcy5jcm9zc1NvdXJjZUNvbGxpc2lvbnMpIHtcbiAgICAgICAgICAgIGlmICghdGhpcy5jb2xsaXNpb25Hcm91cHNbc291cmNlSURdKSB7XG4gICAgICAgICAgICAgICAgY29uc3QgbmV4dEdyb3VwSUQgPSArK3RoaXMubWF4R3JvdXBJRDtcbiAgICAgICAgICAgICAgICB0aGlzLmNvbGxpc2lvbkdyb3Vwc1tzb3VyY2VJRF0gPSB7XG4gICAgICAgICAgICAgICAgICAgIElEOiBuZXh0R3JvdXBJRCxcbiAgICAgICAgICAgICAgICAgICAgcHJlZGljYXRlOiAoa2V5KSA9PiB7XG4gICAgICAgICAgICAgICAgICAgICAgICByZXR1cm4ga2V5LmNvbGxpc2lvbkdyb3VwSUQgPT09IG5leHRHcm91cElEO1xuICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgfTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIHJldHVybiB0aGlzLmNvbGxpc2lvbkdyb3Vwc1tzb3VyY2VJRF07XG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICByZXR1cm4geyBJRDogMCwgcHJlZGljYXRlOiBudWxsIH07XG4gICAgICAgIH1cbiAgICB9XG59XG5cblxuZXhwb3J0IGNsYXNzIFBsYWNlbWVudCB7XG4gICAgdHJhbnNmb3JtOiBUcmFuc2Zvcm07XG4gICAgY29sbGlzaW9uSW5kZXg6IENvbGxpc2lvbkluZGV4O1xuICAgIHBsYWNlbWVudHM6IHsgW3N0cmluZyB8IG51bWJlcl06IEpvaW50UGxhY2VtZW50IH07XG4gICAgb3BhY2l0aWVzOiB7IFtzdHJpbmcgfCBudW1iZXJdOiBKb2ludE9wYWNpdHlTdGF0ZSB9O1xuICAgIGNvbW1pdFRpbWU6IG51bWJlcjtcbiAgICBsYXN0UGxhY2VtZW50Q2hhbmdlVGltZTogbnVtYmVyO1xuICAgIHN0YWxlOiBib29sZWFuO1xuICAgIGZhZGVEdXJhdGlvbjogbnVtYmVyO1xuICAgIHJldGFpbmVkUXVlcnlEYXRhOiB7W251bWJlcl06IFJldGFpbmVkUXVlcnlEYXRhfTtcbiAgICBjb2xsaXNpb25Hcm91cHM6IENvbGxpc2lvbkdyb3VwcztcblxuICAgIGNvbnN0cnVjdG9yKHRyYW5zZm9ybTogVHJhbnNmb3JtLCBmYWRlRHVyYXRpb246IG51bWJlciwgY3Jvc3NTb3VyY2VDb2xsaXNpb25zOiBib29sZWFuKSB7XG4gICAgICAgIHRoaXMudHJhbnNmb3JtID0gdHJhbnNmb3JtLmNsb25lKCk7XG4gICAgICAgIHRoaXMuY29sbGlzaW9uSW5kZXggPSBuZXcgQ29sbGlzaW9uSW5kZXgodGhpcy50cmFuc2Zvcm0pO1xuICAgICAgICB0aGlzLnBsYWNlbWVudHMgPSB7fTtcbiAgICAgICAgdGhpcy5vcGFjaXRpZXMgPSB7fTtcbiAgICAgICAgdGhpcy5zdGFsZSA9IGZhbHNlO1xuICAgICAgICB0aGlzLmZhZGVEdXJhdGlvbiA9IGZhZGVEdXJhdGlvbjtcbiAgICAgICAgdGhpcy5yZXRhaW5lZFF1ZXJ5RGF0YSA9IHt9O1xuICAgICAgICB0aGlzLmNvbGxpc2lvbkdyb3VwcyA9IG5ldyBDb2xsaXNpb25Hcm91cHMoY3Jvc3NTb3VyY2VDb2xsaXNpb25zKTtcbiAgICB9XG5cbiAgICBwbGFjZUxheWVyVGlsZShzdHlsZUxheWVyOiBTdHlsZUxheWVyLCB0aWxlOiBUaWxlLCBzaG93Q29sbGlzaW9uQm94ZXM6IGJvb2xlYW4sIHNlZW5Dcm9zc1RpbGVJRHM6IHsgW3N0cmluZyB8IG51bWJlcl06IGJvb2xlYW4gfSkge1xuICAgICAgICBjb25zdCBzeW1ib2xCdWNrZXQgPSAoKHRpbGUuZ2V0QnVja2V0KHN0eWxlTGF5ZXIpOiBhbnkpOiBTeW1ib2xCdWNrZXQpO1xuICAgICAgICBjb25zdCBidWNrZXRGZWF0dXJlSW5kZXggPSB0aWxlLmxhdGVzdEZlYXR1cmVJbmRleDtcbiAgICAgICAgaWYgKCFzeW1ib2xCdWNrZXQgfHwgIWJ1Y2tldEZlYXR1cmVJbmRleCB8fCBzdHlsZUxheWVyLmlkICE9PSBzeW1ib2xCdWNrZXQubGF5ZXJJZHNbMF0pXG4gICAgICAgICAgICByZXR1cm47XG5cbiAgICAgICAgY29uc3QgY29sbGlzaW9uQm94QXJyYXkgPSB0aWxlLmNvbGxpc2lvbkJveEFycmF5O1xuXG4gICAgICAgIGNvbnN0IGxheW91dCA9IHN5bWJvbEJ1Y2tldC5sYXllcnNbMF0ubGF5b3V0O1xuXG4gICAgICAgIGNvbnN0IHNjYWxlID0gTWF0aC5wb3coMiwgdGhpcy50cmFuc2Zvcm0uem9vbSAtIHRpbGUudGlsZUlELm92ZXJzY2FsZWRaKTtcbiAgICAgICAgY29uc3QgdGV4dFBpeGVsUmF0aW8gPSB0aWxlLnRpbGVTaXplIC8gRVhURU5UO1xuXG4gICAgICAgIGNvbnN0IHBvc01hdHJpeCA9IHRoaXMudHJhbnNmb3JtLmNhbGN1bGF0ZVBvc01hdHJpeCh0aWxlLnRpbGVJRC50b1Vud3JhcHBlZCgpKTtcblxuICAgICAgICBjb25zdCB0ZXh0TGFiZWxQbGFuZU1hdHJpeCA9IHByb2plY3Rpb24uZ2V0TGFiZWxQbGFuZU1hdHJpeChwb3NNYXRyaXgsXG4gICAgICAgICAgICAgICAgbGF5b3V0LmdldCgndGV4dC1waXRjaC1hbGlnbm1lbnQnKSA9PT0gJ21hcCcsXG4gICAgICAgICAgICAgICAgbGF5b3V0LmdldCgndGV4dC1yb3RhdGlvbi1hbGlnbm1lbnQnKSA9PT0gJ21hcCcsXG4gICAgICAgICAgICAgICAgdGhpcy50cmFuc2Zvcm0sXG4gICAgICAgICAgICAgICAgcGl4ZWxzVG9UaWxlVW5pdHModGlsZSwgMSwgdGhpcy50cmFuc2Zvcm0uem9vbSkpO1xuXG4gICAgICAgIGNvbnN0IGljb25MYWJlbFBsYW5lTWF0cml4ID0gcHJvamVjdGlvbi5nZXRMYWJlbFBsYW5lTWF0cml4KHBvc01hdHJpeCxcbiAgICAgICAgICAgICAgICBsYXlvdXQuZ2V0KCdpY29uLXBpdGNoLWFsaWdubWVudCcpID09PSAnbWFwJyxcbiAgICAgICAgICAgICAgICBsYXlvdXQuZ2V0KCdpY29uLXJvdGF0aW9uLWFsaWdubWVudCcpID09PSAnbWFwJyxcbiAgICAgICAgICAgICAgICB0aGlzLnRyYW5zZm9ybSxcbiAgICAgICAgICAgICAgICBwaXhlbHNUb1RpbGVVbml0cyh0aWxlLCAxLCB0aGlzLnRyYW5zZm9ybS56b29tKSk7XG5cbiAgICAgICAgLy8gQXMgbG9uZyBhcyB0aGlzIHBsYWNlbWVudCBsaXZlcywgd2UgaGF2ZSB0byBob2xkIG9udG8gdGhpcyBidWNrZXQnc1xuICAgICAgICAvLyBtYXRjaGluZyBGZWF0dXJlSW5kZXgvZGF0YSBmb3IgcXVlcnlpbmcgcHVycG9zZXNcbiAgICAgICAgdGhpcy5yZXRhaW5lZFF1ZXJ5RGF0YVtzeW1ib2xCdWNrZXQuYnVja2V0SW5zdGFuY2VJZF0gPSBuZXcgUmV0YWluZWRRdWVyeURhdGEoXG4gICAgICAgICAgICBzeW1ib2xCdWNrZXQuYnVja2V0SW5zdGFuY2VJZCxcbiAgICAgICAgICAgIGJ1Y2tldEZlYXR1cmVJbmRleCxcbiAgICAgICAgICAgIHN5bWJvbEJ1Y2tldC5zb3VyY2VMYXllckluZGV4LFxuICAgICAgICAgICAgc3ltYm9sQnVja2V0LmluZGV4LFxuICAgICAgICAgICAgdGlsZS50aWxlSURcbiAgICAgICAgKTtcblxuICAgICAgICB0aGlzLnBsYWNlTGF5ZXJCdWNrZXQoc3ltYm9sQnVja2V0LCBwb3NNYXRyaXgsIHRleHRMYWJlbFBsYW5lTWF0cml4LCBpY29uTGFiZWxQbGFuZU1hdHJpeCwgc2NhbGUsIHRleHRQaXhlbFJhdGlvLFxuICAgICAgICAgICAgICAgIHNob3dDb2xsaXNpb25Cb3hlcywgdGlsZS5ob2xkaW5nRm9yRmFkZSgpLCBzZWVuQ3Jvc3NUaWxlSURzLCBjb2xsaXNpb25Cb3hBcnJheSk7XG4gICAgfVxuXG4gICAgcGxhY2VMYXllckJ1Y2tldChidWNrZXQ6IFN5bWJvbEJ1Y2tldCwgcG9zTWF0cml4OiBtYXQ0LCB0ZXh0TGFiZWxQbGFuZU1hdHJpeDogbWF0NCwgaWNvbkxhYmVsUGxhbmVNYXRyaXg6IG1hdDQsXG4gICAgICAgICAgICBzY2FsZTogbnVtYmVyLCB0ZXh0UGl4ZWxSYXRpbzogbnVtYmVyLCBzaG93Q29sbGlzaW9uQm94ZXM6IGJvb2xlYW4sIGhvbGRpbmdGb3JGYWRlOiBib29sZWFuLCBzZWVuQ3Jvc3NUaWxlSURzOiB7IFtzdHJpbmcgfCBudW1iZXJdOiBib29sZWFuIH0sXG4gICAgICAgICAgICBjb2xsaXNpb25Cb3hBcnJheTogP0NvbGxpc2lvbkJveEFycmF5KSB7XG4gICAgICAgIGNvbnN0IGxheW91dCA9IGJ1Y2tldC5sYXllcnNbMF0ubGF5b3V0O1xuXG4gICAgICAgIGNvbnN0IHBhcnRpYWxseUV2YWx1YXRlZFRleHRTaXplID0gc3ltYm9sU2l6ZS5ldmFsdWF0ZVNpemVGb3Jab29tKGJ1Y2tldC50ZXh0U2l6ZURhdGEsIHRoaXMudHJhbnNmb3JtLnpvb20sIHN5bWJvbExheWVyUHJvcGVydGllcy5sYXlvdXQucHJvcGVydGllc1sndGV4dC1zaXplJ10pO1xuXG4gICAgICAgIGNvbnN0IHRleHRPcHRpb25hbCA9IGxheW91dC5nZXQoJ3RleHQtb3B0aW9uYWwnKTtcbiAgICAgICAgY29uc3QgaWNvbk9wdGlvbmFsID0gbGF5b3V0LmdldCgnaWNvbi1vcHRpb25hbCcpO1xuXG4gICAgICAgIGNvbnN0IGNvbGxpc2lvbkdyb3VwID0gdGhpcy5jb2xsaXNpb25Hcm91cHMuZ2V0KGJ1Y2tldC5zb3VyY2VJRCk7XG5cbiAgICAgICAgaWYgKCFidWNrZXQuY29sbGlzaW9uQXJyYXlzICYmIGNvbGxpc2lvbkJveEFycmF5KSB7XG4gICAgICAgICAgICBidWNrZXQuZGVzZXJpYWxpemVDb2xsaXNpb25Cb3hlcyhjb2xsaXNpb25Cb3hBcnJheSk7XG4gICAgICAgIH1cblxuICAgICAgICBmb3IgKGxldCBpID0gMDsgaSA8IGJ1Y2tldC5zeW1ib2xJbnN0YW5jZXMubGVuZ3RoOyBpKyspIHtcbiAgICAgICAgICAgIGNvbnN0IHN5bWJvbEluc3RhbmNlID0gYnVja2V0LnN5bWJvbEluc3RhbmNlcy5nZXQoaSk7XG4gICAgICAgICAgICBpZiAoIXNlZW5Dcm9zc1RpbGVJRHNbc3ltYm9sSW5zdGFuY2UuY3Jvc3NUaWxlSURdKSB7XG4gICAgICAgICAgICAgICAgaWYgKGhvbGRpbmdGb3JGYWRlKSB7XG4gICAgICAgICAgICAgICAgICAgIC8vIE1hcmsgYWxsIHN5bWJvbHMgZnJvbSB0aGlzIHRpbGUgYXMgXCJub3QgcGxhY2VkXCIsIGJ1dCBkb24ndCBhZGQgdG8gc2VlbkNyb3NzVGlsZUlEcywgYmVjYXVzZSB3ZSBkb24ndFxuICAgICAgICAgICAgICAgICAgICAvLyBrbm93IHlldCBpZiB3ZSBoYXZlIGEgZHVwbGljYXRlIGluIGEgcGFyZW50IHRpbGUgdGhhdCBfc2hvdWxkXyBiZSBwbGFjZWQuXG4gICAgICAgICAgICAgICAgICAgIHRoaXMucGxhY2VtZW50c1tzeW1ib2xJbnN0YW5jZS5jcm9zc1RpbGVJRF0gPSBuZXcgSm9pbnRQbGFjZW1lbnQoZmFsc2UsIGZhbHNlLCBmYWxzZSk7XG4gICAgICAgICAgICAgICAgICAgIGNvbnRpbnVlO1xuICAgICAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgICAgIGxldCBwbGFjZVRleHQgPSBmYWxzZTtcbiAgICAgICAgICAgICAgICBsZXQgcGxhY2VJY29uID0gZmFsc2U7XG4gICAgICAgICAgICAgICAgbGV0IG9mZnNjcmVlbiA9IHRydWU7XG5cbiAgICAgICAgICAgICAgICBsZXQgcGxhY2VkR2x5cGhCb3hlcyA9IG51bGw7XG4gICAgICAgICAgICAgICAgbGV0IHBsYWNlZEdseXBoQ2lyY2xlcyA9IG51bGw7XG4gICAgICAgICAgICAgICAgbGV0IHBsYWNlZEljb25Cb3hlcyA9IG51bGw7XG5cbiAgICAgICAgICAgICAgICBsZXQgdGV4dEZlYXR1cmVJbmRleCA9IDA7XG4gICAgICAgICAgICAgICAgbGV0IGljb25GZWF0dXJlSW5kZXggPSAwO1xuXG4gICAgICAgICAgICAgICAgY29uc3QgY29sbGlzaW9uQXJyYXlzID0gYnVja2V0LmNvbGxpc2lvbkFycmF5c1tpXTtcblxuICAgICAgICAgICAgICAgIGlmIChjb2xsaXNpb25BcnJheXMudGV4dEZlYXR1cmVJbmRleCkge1xuICAgICAgICAgICAgICAgICAgICB0ZXh0RmVhdHVyZUluZGV4ID0gY29sbGlzaW9uQXJyYXlzLnRleHRGZWF0dXJlSW5kZXg7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIGlmIChjb2xsaXNpb25BcnJheXMudGV4dEJveCkge1xuICAgICAgICAgICAgICAgICAgICBwbGFjZWRHbHlwaEJveGVzID0gdGhpcy5jb2xsaXNpb25JbmRleC5wbGFjZUNvbGxpc2lvbkJveChjb2xsaXNpb25BcnJheXMudGV4dEJveCxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBsYXlvdXQuZ2V0KCd0ZXh0LWFsbG93LW92ZXJsYXAnKSwgdGV4dFBpeGVsUmF0aW8sIHBvc01hdHJpeCwgY29sbGlzaW9uR3JvdXAucHJlZGljYXRlKTtcbiAgICAgICAgICAgICAgICAgICAgcGxhY2VUZXh0ID0gcGxhY2VkR2x5cGhCb3hlcy5ib3gubGVuZ3RoID4gMDtcbiAgICAgICAgICAgICAgICAgICAgb2Zmc2NyZWVuID0gb2Zmc2NyZWVuICYmIHBsYWNlZEdseXBoQm94ZXMub2Zmc2NyZWVuO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICBjb25zdCB0ZXh0Q2lyY2xlcyA9IGNvbGxpc2lvbkFycmF5cy50ZXh0Q2lyY2xlcztcbiAgICAgICAgICAgICAgICBpZiAodGV4dENpcmNsZXMpIHtcbiAgICAgICAgICAgICAgICAgICAgY29uc3QgcGxhY2VkU3ltYm9sID0gYnVja2V0LnRleHQucGxhY2VkU3ltYm9sQXJyYXkuZ2V0KHN5bWJvbEluc3RhbmNlLmhvcml6b250YWxQbGFjZWRUZXh0U3ltYm9sSW5kZXgpO1xuICAgICAgICAgICAgICAgICAgICBjb25zdCBmb250U2l6ZSA9IHN5bWJvbFNpemUuZXZhbHVhdGVTaXplRm9yRmVhdHVyZShidWNrZXQudGV4dFNpemVEYXRhLCBwYXJ0aWFsbHlFdmFsdWF0ZWRUZXh0U2l6ZSwgcGxhY2VkU3ltYm9sKTtcbiAgICAgICAgICAgICAgICAgICAgcGxhY2VkR2x5cGhDaXJjbGVzID0gdGhpcy5jb2xsaXNpb25JbmRleC5wbGFjZUNvbGxpc2lvbkNpcmNsZXModGV4dENpcmNsZXMsXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgbGF5b3V0LmdldCgndGV4dC1hbGxvdy1vdmVybGFwJyksXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgc2NhbGUsXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgdGV4dFBpeGVsUmF0aW8sXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgcGxhY2VkU3ltYm9sLFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGJ1Y2tldC5saW5lVmVydGV4QXJyYXksXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgYnVja2V0LmdseXBoT2Zmc2V0QXJyYXksXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgZm9udFNpemUsXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgcG9zTWF0cml4LFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHRleHRMYWJlbFBsYW5lTWF0cml4LFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHNob3dDb2xsaXNpb25Cb3hlcyxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBsYXlvdXQuZ2V0KCd0ZXh0LXBpdGNoLWFsaWdubWVudCcpID09PSAnbWFwJyxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBjb2xsaXNpb25Hcm91cC5wcmVkaWNhdGUpO1xuICAgICAgICAgICAgICAgICAgICAvLyBJZiB0ZXh0LWFsbG93LW92ZXJsYXAgaXMgc2V0LCBmb3JjZSBcInBsYWNlZENpcmNsZXNcIiB0byB0cnVlXG4gICAgICAgICAgICAgICAgICAgIC8vIEluIHRoZW9yeSB0aGVyZSBzaG91bGQgYWx3YXlzIGJlIGF0IGxlYXN0IG9uZSBjaXJjbGUgcGxhY2VkXG4gICAgICAgICAgICAgICAgICAgIC8vIGluIHRoaXMgY2FzZSwgYnV0IGZvciBub3cgcXVpcmtzIGluIHRleHQtYW5jaG9yXG4gICAgICAgICAgICAgICAgICAgIC8vIGFuZCB0ZXh0LW9mZnNldCBtYXkgcHJldmVudCB0aGF0IGZyb20gYmVpbmcgdHJ1ZS5cbiAgICAgICAgICAgICAgICAgICAgcGxhY2VUZXh0ID0gbGF5b3V0LmdldCgndGV4dC1hbGxvdy1vdmVybGFwJykgfHwgcGxhY2VkR2x5cGhDaXJjbGVzLmNpcmNsZXMubGVuZ3RoID4gMDtcbiAgICAgICAgICAgICAgICAgICAgb2Zmc2NyZWVuID0gb2Zmc2NyZWVuICYmIHBsYWNlZEdseXBoQ2lyY2xlcy5vZmZzY3JlZW47XG4gICAgICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICAgICAgaWYgKGNvbGxpc2lvbkFycmF5cy5pY29uRmVhdHVyZUluZGV4KSB7XG4gICAgICAgICAgICAgICAgICAgIGljb25GZWF0dXJlSW5kZXggPSBjb2xsaXNpb25BcnJheXMuaWNvbkZlYXR1cmVJbmRleDtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgaWYgKGNvbGxpc2lvbkFycmF5cy5pY29uQm94KSB7XG4gICAgICAgICAgICAgICAgICAgIHBsYWNlZEljb25Cb3hlcyA9IHRoaXMuY29sbGlzaW9uSW5kZXgucGxhY2VDb2xsaXNpb25Cb3goY29sbGlzaW9uQXJyYXlzLmljb25Cb3gsXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgbGF5b3V0LmdldCgnaWNvbi1hbGxvdy1vdmVybGFwJyksIHRleHRQaXhlbFJhdGlvLCBwb3NNYXRyaXgsIGNvbGxpc2lvbkdyb3VwLnByZWRpY2F0ZSk7XG4gICAgICAgICAgICAgICAgICAgIHBsYWNlSWNvbiA9IHBsYWNlZEljb25Cb3hlcy5ib3gubGVuZ3RoID4gMDtcbiAgICAgICAgICAgICAgICAgICAgb2Zmc2NyZWVuID0gb2Zmc2NyZWVuICYmIHBsYWNlZEljb25Cb3hlcy5vZmZzY3JlZW47XG4gICAgICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICAgICAgY29uc3QgaWNvbldpdGhvdXRUZXh0ID0gdGV4dE9wdGlvbmFsIHx8IChzeW1ib2xJbnN0YW5jZS5udW1HbHlwaFZlcnRpY2VzID09PSAwICYmIHN5bWJvbEluc3RhbmNlLm51bVZlcnRpY2FsR2x5cGhWZXJ0aWNlcyA9PT0gMCk7XG4gICAgICAgICAgICAgICAgY29uc3QgdGV4dFdpdGhvdXRJY29uID0gaWNvbk9wdGlvbmFsIHx8IHN5bWJvbEluc3RhbmNlLm51bUljb25WZXJ0aWNlcyA9PT0gMDtcblxuICAgICAgICAgICAgICAgIC8vIENvbWJpbmUgdGhlIHNjYWxlcyBmb3IgaWNvbnMgYW5kIHRleHQuXG4gICAgICAgICAgICAgICAgaWYgKCFpY29uV2l0aG91dFRleHQgJiYgIXRleHRXaXRob3V0SWNvbikge1xuICAgICAgICAgICAgICAgICAgICBwbGFjZUljb24gPSBwbGFjZVRleHQgPSBwbGFjZUljb24gJiYgcGxhY2VUZXh0O1xuICAgICAgICAgICAgICAgIH0gZWxzZSBpZiAoIXRleHRXaXRob3V0SWNvbikge1xuICAgICAgICAgICAgICAgICAgICBwbGFjZVRleHQgPSBwbGFjZUljb24gJiYgcGxhY2VUZXh0O1xuICAgICAgICAgICAgICAgIH0gZWxzZSBpZiAoIWljb25XaXRob3V0VGV4dCkge1xuICAgICAgICAgICAgICAgICAgICBwbGFjZUljb24gPSBwbGFjZUljb24gJiYgcGxhY2VUZXh0O1xuICAgICAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgICAgIGlmIChwbGFjZVRleHQgJiYgcGxhY2VkR2x5cGhCb3hlcykge1xuICAgICAgICAgICAgICAgICAgICB0aGlzLmNvbGxpc2lvbkluZGV4Lmluc2VydENvbGxpc2lvbkJveChwbGFjZWRHbHlwaEJveGVzLmJveCwgbGF5b3V0LmdldCgndGV4dC1pZ25vcmUtcGxhY2VtZW50JyksXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgYnVja2V0LmJ1Y2tldEluc3RhbmNlSWQsIHRleHRGZWF0dXJlSW5kZXgsIGNvbGxpc2lvbkdyb3VwLklEKTtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgaWYgKHBsYWNlSWNvbiAmJiBwbGFjZWRJY29uQm94ZXMpIHtcbiAgICAgICAgICAgICAgICAgICAgdGhpcy5jb2xsaXNpb25JbmRleC5pbnNlcnRDb2xsaXNpb25Cb3gocGxhY2VkSWNvbkJveGVzLmJveCwgbGF5b3V0LmdldCgnaWNvbi1pZ25vcmUtcGxhY2VtZW50JyksXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgYnVja2V0LmJ1Y2tldEluc3RhbmNlSWQsIGljb25GZWF0dXJlSW5kZXgsIGNvbGxpc2lvbkdyb3VwLklEKTtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgaWYgKHBsYWNlVGV4dCAmJiBwbGFjZWRHbHlwaENpcmNsZXMpIHtcbiAgICAgICAgICAgICAgICAgICAgdGhpcy5jb2xsaXNpb25JbmRleC5pbnNlcnRDb2xsaXNpb25DaXJjbGVzKHBsYWNlZEdseXBoQ2lyY2xlcy5jaXJjbGVzLCBsYXlvdXQuZ2V0KCd0ZXh0LWlnbm9yZS1wbGFjZW1lbnQnKSxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBidWNrZXQuYnVja2V0SW5zdGFuY2VJZCwgdGV4dEZlYXR1cmVJbmRleCwgY29sbGlzaW9uR3JvdXAuSUQpO1xuICAgICAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgICAgIGFzc2VydChzeW1ib2xJbnN0YW5jZS5jcm9zc1RpbGVJRCAhPT0gMCk7XG4gICAgICAgICAgICAgICAgYXNzZXJ0KGJ1Y2tldC5idWNrZXRJbnN0YW5jZUlkICE9PSAwKTtcblxuICAgICAgICAgICAgICAgIHRoaXMucGxhY2VtZW50c1tzeW1ib2xJbnN0YW5jZS5jcm9zc1RpbGVJRF0gPSBuZXcgSm9pbnRQbGFjZW1lbnQocGxhY2VUZXh0LCBwbGFjZUljb24sIG9mZnNjcmVlbiB8fCBidWNrZXQuanVzdFJlbG9hZGVkKTtcbiAgICAgICAgICAgICAgICBzZWVuQ3Jvc3NUaWxlSURzW3N5bWJvbEluc3RhbmNlLmNyb3NzVGlsZUlEXSA9IHRydWU7XG4gICAgICAgICAgICB9XG4gICAgICAgIH1cblxuICAgICAgICBidWNrZXQuanVzdFJlbG9hZGVkID0gZmFsc2U7XG4gICAgfVxuXG4gICAgY29tbWl0KHByZXZQbGFjZW1lbnQ6ID9QbGFjZW1lbnQsIG5vdzogbnVtYmVyKTogdm9pZCB7XG4gICAgICAgIHRoaXMuY29tbWl0VGltZSA9IG5vdztcblxuICAgICAgICBsZXQgcGxhY2VtZW50Q2hhbmdlZCA9IGZhbHNlO1xuXG4gICAgICAgIGNvbnN0IGluY3JlbWVudCA9IChwcmV2UGxhY2VtZW50ICYmIHRoaXMuZmFkZUR1cmF0aW9uICE9PSAwKSA/XG4gICAgICAgICAgICAodGhpcy5jb21taXRUaW1lIC0gcHJldlBsYWNlbWVudC5jb21taXRUaW1lKSAvIHRoaXMuZmFkZUR1cmF0aW9uIDpcbiAgICAgICAgICAgIDE7XG5cbiAgICAgICAgY29uc3QgcHJldk9wYWNpdGllcyA9IHByZXZQbGFjZW1lbnQgPyBwcmV2UGxhY2VtZW50Lm9wYWNpdGllcyA6IHt9O1xuXG4gICAgICAgIC8vIGFkZCB0aGUgb3BhY2l0aWVzIGZyb20gdGhlIGN1cnJlbnQgcGxhY2VtZW50LCBhbmQgY29weSB0aGVpciBjdXJyZW50IHZhbHVlcyBmcm9tIHRoZSBwcmV2aW91cyBwbGFjZW1lbnRcbiAgICAgICAgZm9yIChjb25zdCBjcm9zc1RpbGVJRCBpbiB0aGlzLnBsYWNlbWVudHMpIHtcbiAgICAgICAgICAgIGNvbnN0IGpvaW50UGxhY2VtZW50ID0gdGhpcy5wbGFjZW1lbnRzW2Nyb3NzVGlsZUlEXTtcbiAgICAgICAgICAgIGNvbnN0IHByZXZPcGFjaXR5ID0gcHJldk9wYWNpdGllc1tjcm9zc1RpbGVJRF07XG4gICAgICAgICAgICBpZiAocHJldk9wYWNpdHkpIHtcbiAgICAgICAgICAgICAgICB0aGlzLm9wYWNpdGllc1tjcm9zc1RpbGVJRF0gPSBuZXcgSm9pbnRPcGFjaXR5U3RhdGUocHJldk9wYWNpdHksIGluY3JlbWVudCwgam9pbnRQbGFjZW1lbnQudGV4dCwgam9pbnRQbGFjZW1lbnQuaWNvbik7XG4gICAgICAgICAgICAgICAgcGxhY2VtZW50Q2hhbmdlZCA9IHBsYWNlbWVudENoYW5nZWQgfHxcbiAgICAgICAgICAgICAgICAgICAgam9pbnRQbGFjZW1lbnQudGV4dCAhPT0gcHJldk9wYWNpdHkudGV4dC5wbGFjZWQgfHxcbiAgICAgICAgICAgICAgICAgICAgam9pbnRQbGFjZW1lbnQuaWNvbiAhPT0gcHJldk9wYWNpdHkuaWNvbi5wbGFjZWQ7XG4gICAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgICAgIHRoaXMub3BhY2l0aWVzW2Nyb3NzVGlsZUlEXSA9IG5ldyBKb2ludE9wYWNpdHlTdGF0ZShudWxsLCBpbmNyZW1lbnQsIGpvaW50UGxhY2VtZW50LnRleHQsIGpvaW50UGxhY2VtZW50Lmljb24sIGpvaW50UGxhY2VtZW50LnNraXBGYWRlKTtcbiAgICAgICAgICAgICAgICBwbGFjZW1lbnRDaGFuZ2VkID0gcGxhY2VtZW50Q2hhbmdlZCB8fCBqb2ludFBsYWNlbWVudC50ZXh0IHx8IGpvaW50UGxhY2VtZW50Lmljb247XG4gICAgICAgICAgICB9XG4gICAgICAgIH1cblxuICAgICAgICAvLyBjb3B5IGFuZCB1cGRhdGUgdmFsdWVzIGZyb20gdGhlIHByZXZpb3VzIHBsYWNlbWVudCB0aGF0IGFyZW4ndCBpbiB0aGUgY3VycmVudCBwbGFjZW1lbnQgYnV0IGhhdmVuJ3QgZmluaXNoZWQgZmFkaW5nXG4gICAgICAgIGZvciAoY29uc3QgY3Jvc3NUaWxlSUQgaW4gcHJldk9wYWNpdGllcykge1xuICAgICAgICAgICAgY29uc3QgcHJldk9wYWNpdHkgPSBwcmV2T3BhY2l0aWVzW2Nyb3NzVGlsZUlEXTtcbiAgICAgICAgICAgIGlmICghdGhpcy5vcGFjaXRpZXNbY3Jvc3NUaWxlSURdKSB7XG4gICAgICAgICAgICAgICAgY29uc3Qgam9pbnRPcGFjaXR5ID0gbmV3IEpvaW50T3BhY2l0eVN0YXRlKHByZXZPcGFjaXR5LCBpbmNyZW1lbnQsIGZhbHNlLCBmYWxzZSk7XG4gICAgICAgICAgICAgICAgaWYgKCFqb2ludE9wYWNpdHkuaXNIaWRkZW4oKSkge1xuICAgICAgICAgICAgICAgICAgICB0aGlzLm9wYWNpdGllc1tjcm9zc1RpbGVJRF0gPSBqb2ludE9wYWNpdHk7XG4gICAgICAgICAgICAgICAgICAgIHBsYWNlbWVudENoYW5nZWQgPSBwbGFjZW1lbnRDaGFuZ2VkIHx8IHByZXZPcGFjaXR5LnRleHQucGxhY2VkIHx8IHByZXZPcGFjaXR5Lmljb24ucGxhY2VkO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH1cbiAgICAgICAgfVxuXG4gICAgICAgIC8vIHRoaXMubGFzdFBsYWNlbWVudENoYW5nZVRpbWUgaXMgdGhlIHRpbWUgb2YgdGhlIGxhc3QgY29tbWl0KCkgdGhhdFxuICAgICAgICAvLyByZXN1bHRlZCBpbiBhIHBsYWNlbWVudCBjaGFuZ2UgLS0gaW4gb3RoZXIgd29yZHMsIHRoZSBzdGFydCB0aW1lIG9mXG4gICAgICAgIC8vIHRoZSBsYXN0IHN5bWJvbCBmYWRlIGFuaW1hdGlvblxuICAgICAgICBhc3NlcnQoIXByZXZQbGFjZW1lbnQgfHwgcHJldlBsYWNlbWVudC5sYXN0UGxhY2VtZW50Q2hhbmdlVGltZSAhPT0gdW5kZWZpbmVkKTtcbiAgICAgICAgaWYgKHBsYWNlbWVudENoYW5nZWQpIHtcbiAgICAgICAgICAgIHRoaXMubGFzdFBsYWNlbWVudENoYW5nZVRpbWUgPSBub3c7XG4gICAgICAgIH0gZWxzZSBpZiAodHlwZW9mIHRoaXMubGFzdFBsYWNlbWVudENoYW5nZVRpbWUgIT09ICdudW1iZXInKSB7XG4gICAgICAgICAgICB0aGlzLmxhc3RQbGFjZW1lbnRDaGFuZ2VUaW1lID0gcHJldlBsYWNlbWVudCA/IHByZXZQbGFjZW1lbnQubGFzdFBsYWNlbWVudENoYW5nZVRpbWUgOiBub3c7XG4gICAgICAgIH1cbiAgICB9XG5cbiAgICB1cGRhdGVMYXllck9wYWNpdGllcyhzdHlsZUxheWVyOiBTdHlsZUxheWVyLCB0aWxlczogQXJyYXk8VGlsZT4pIHtcbiAgICAgICAgY29uc3Qgc2VlbkNyb3NzVGlsZUlEcyA9IHt9O1xuXG4gICAgICAgIGZvciAoY29uc3QgdGlsZSBvZiB0aWxlcykge1xuICAgICAgICAgICAgY29uc3Qgc3ltYm9sQnVja2V0ID0gKCh0aWxlLmdldEJ1Y2tldChzdHlsZUxheWVyKTogYW55KTogU3ltYm9sQnVja2V0KTtcbiAgICAgICAgICAgIGlmIChzeW1ib2xCdWNrZXQgJiYgdGlsZS5sYXRlc3RGZWF0dXJlSW5kZXggJiYgc3R5bGVMYXllci5pZCA9PT0gc3ltYm9sQnVja2V0LmxheWVySWRzWzBdKSB7XG4gICAgICAgICAgICAgICAgdGhpcy51cGRhdGVCdWNrZXRPcGFjaXRpZXMoc3ltYm9sQnVja2V0LCBzZWVuQ3Jvc3NUaWxlSURzLCB0aWxlLmNvbGxpc2lvbkJveEFycmF5KTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgIH1cblxuICAgIHVwZGF0ZUJ1Y2tldE9wYWNpdGllcyhidWNrZXQ6IFN5bWJvbEJ1Y2tldCwgc2VlbkNyb3NzVGlsZUlEczogeyBbc3RyaW5nIHwgbnVtYmVyXTogYm9vbGVhbiB9LCBjb2xsaXNpb25Cb3hBcnJheTogP0NvbGxpc2lvbkJveEFycmF5KSB7XG4gICAgICAgIGlmIChidWNrZXQuaGFzVGV4dERhdGEoKSkgYnVja2V0LnRleHQub3BhY2l0eVZlcnRleEFycmF5LmNsZWFyKCk7XG4gICAgICAgIGlmIChidWNrZXQuaGFzSWNvbkRhdGEoKSkgYnVja2V0Lmljb24ub3BhY2l0eVZlcnRleEFycmF5LmNsZWFyKCk7XG4gICAgICAgIGlmIChidWNrZXQuaGFzQ29sbGlzaW9uQm94RGF0YSgpKSBidWNrZXQuY29sbGlzaW9uQm94LmNvbGxpc2lvblZlcnRleEFycmF5LmNsZWFyKCk7XG4gICAgICAgIGlmIChidWNrZXQuaGFzQ29sbGlzaW9uQ2lyY2xlRGF0YSgpKSBidWNrZXQuY29sbGlzaW9uQ2lyY2xlLmNvbGxpc2lvblZlcnRleEFycmF5LmNsZWFyKCk7XG5cbiAgICAgICAgY29uc3QgbGF5b3V0ID0gYnVja2V0LmxheWVyc1swXS5sYXlvdXQ7XG4gICAgICAgIGNvbnN0IGR1cGxpY2F0ZU9wYWNpdHlTdGF0ZSA9IG5ldyBKb2ludE9wYWNpdHlTdGF0ZShudWxsLCAwLCBmYWxzZSwgZmFsc2UsIHRydWUpO1xuICAgICAgICBjb25zdCB0ZXh0QWxsb3dPdmVybGFwID0gbGF5b3V0LmdldCgndGV4dC1hbGxvdy1vdmVybGFwJyk7XG4gICAgICAgIGNvbnN0IGljb25BbGxvd092ZXJsYXAgPSBsYXlvdXQuZ2V0KCdpY29uLWFsbG93LW92ZXJsYXAnKTtcbiAgICAgICAgLy8gSWYgYWxsb3ctb3ZlcmxhcCBpcyB0cnVlLCB3ZSBjYW4gc2hvdyBzeW1ib2xzIGJlZm9yZSBwbGFjZW1lbnQgcnVucyBvbiB0aGVtXG4gICAgICAgIC8vIEJ1dCB3ZSBoYXZlIHRvIHdhaXQgZm9yIHBsYWNlbWVudCBpZiB3ZSBwb3RlbnRpYWxseSBkZXBlbmQgb24gYSBwYWlyZWQgaWNvbi90ZXh0XG4gICAgICAgIC8vIHdpdGggYWxsb3ctb3ZlcmxhcDogZmFsc2UuXG4gICAgICAgIC8vIFNlZSBodHRwczovL2dpdGh1Yi5jb20vbWFwYm94L21hcGJveC1nbC1qcy9pc3N1ZXMvNzAzMlxuICAgICAgICBjb25zdCBkZWZhdWx0T3BhY2l0eVN0YXRlID0gbmV3IEpvaW50T3BhY2l0eVN0YXRlKG51bGwsIDAsXG4gICAgICAgICAgICAgICAgdGV4dEFsbG93T3ZlcmxhcCAmJiAoaWNvbkFsbG93T3ZlcmxhcCB8fCAhYnVja2V0Lmhhc0ljb25EYXRhKCkgfHwgbGF5b3V0LmdldCgnaWNvbi1vcHRpb25hbCcpKSxcbiAgICAgICAgICAgICAgICBpY29uQWxsb3dPdmVybGFwICYmICh0ZXh0QWxsb3dPdmVybGFwIHx8ICFidWNrZXQuaGFzVGV4dERhdGEoKSB8fCBsYXlvdXQuZ2V0KCd0ZXh0LW9wdGlvbmFsJykpLFxuICAgICAgICAgICAgICAgIHRydWUpO1xuXG4gICAgICAgIGlmICghYnVja2V0LmNvbGxpc2lvbkFycmF5cyAmJiBjb2xsaXNpb25Cb3hBcnJheSAmJiAoYnVja2V0Lmhhc0NvbGxpc2lvbkJveERhdGEoKSB8fCBidWNrZXQuaGFzQ29sbGlzaW9uQ2lyY2xlRGF0YSgpKSkge1xuICAgICAgICAgICAgYnVja2V0LmRlc2VyaWFsaXplQ29sbGlzaW9uQm94ZXMoY29sbGlzaW9uQm94QXJyYXkpO1xuICAgICAgICB9XG5cbiAgICAgICAgZm9yIChsZXQgcyA9IDA7IHMgPCBidWNrZXQuc3ltYm9sSW5zdGFuY2VzLmxlbmd0aDsgcysrKSB7XG4gICAgICAgICAgICBjb25zdCBzeW1ib2xJbnN0YW5jZSA9IGJ1Y2tldC5zeW1ib2xJbnN0YW5jZXMuZ2V0KHMpO1xuICAgICAgICAgICAgY29uc3QgaXNEdXBsaWNhdGUgPSBzZWVuQ3Jvc3NUaWxlSURzW3N5bWJvbEluc3RhbmNlLmNyb3NzVGlsZUlEXTtcblxuICAgICAgICAgICAgbGV0IG9wYWNpdHlTdGF0ZSA9IHRoaXMub3BhY2l0aWVzW3N5bWJvbEluc3RhbmNlLmNyb3NzVGlsZUlEXTtcbiAgICAgICAgICAgIGlmIChpc0R1cGxpY2F0ZSkge1xuICAgICAgICAgICAgICAgIG9wYWNpdHlTdGF0ZSA9IGR1cGxpY2F0ZU9wYWNpdHlTdGF0ZTtcbiAgICAgICAgICAgIH0gZWxzZSBpZiAoIW9wYWNpdHlTdGF0ZSkge1xuICAgICAgICAgICAgICAgIG9wYWNpdHlTdGF0ZSA9IGRlZmF1bHRPcGFjaXR5U3RhdGU7XG4gICAgICAgICAgICAgICAgLy8gc3RvcmUgdGhlIHN0YXRlIHNvIHRoYXQgZnV0dXJlIHBsYWNlbWVudHMgdXNlIGl0IGFzIGEgc3RhcnRpbmcgcG9pbnRcbiAgICAgICAgICAgICAgICB0aGlzLm9wYWNpdGllc1tzeW1ib2xJbnN0YW5jZS5jcm9zc1RpbGVJRF0gPSBvcGFjaXR5U3RhdGU7XG4gICAgICAgICAgICB9XG5cbiAgICAgICAgICAgIHNlZW5Dcm9zc1RpbGVJRHNbc3ltYm9sSW5zdGFuY2UuY3Jvc3NUaWxlSURdID0gdHJ1ZTtcblxuICAgICAgICAgICAgY29uc3QgaGFzVGV4dCA9IHN5bWJvbEluc3RhbmNlLm51bUdseXBoVmVydGljZXMgPiAwIHx8IHN5bWJvbEluc3RhbmNlLm51bVZlcnRpY2FsR2x5cGhWZXJ0aWNlcyA+IDA7XG4gICAgICAgICAgICBjb25zdCBoYXNJY29uID0gc3ltYm9sSW5zdGFuY2UubnVtSWNvblZlcnRpY2VzID4gMDtcblxuICAgICAgICAgICAgaWYgKGhhc1RleHQpIHtcbiAgICAgICAgICAgICAgICBjb25zdCBwYWNrZWRPcGFjaXR5ID0gcGFja09wYWNpdHkob3BhY2l0eVN0YXRlLnRleHQpO1xuICAgICAgICAgICAgICAgIC8vIFZlcnRpY2FsIHRleHQgZmFkZXMgaW4vb3V0IG9uIGNvbGxpc2lvbiB0aGUgc2FtZSB3YXkgYXMgY29ycmVzcG9uZGluZ1xuICAgICAgICAgICAgICAgIC8vIGhvcml6b250YWwgdGV4dC4gU3dpdGNoIGJldHdlZW4gdmVydGljYWwvaG9yaXpvbnRhbCBzaG91bGQgYmUgaW5zdGFudGFuZW91c1xuICAgICAgICAgICAgICAgIGNvbnN0IG9wYWNpdHlFbnRyeUNvdW50ID0gKHN5bWJvbEluc3RhbmNlLm51bUdseXBoVmVydGljZXMgKyBzeW1ib2xJbnN0YW5jZS5udW1WZXJ0aWNhbEdseXBoVmVydGljZXMpIC8gNDtcbiAgICAgICAgICAgICAgICBmb3IgKGxldCBpID0gMDsgaSA8IG9wYWNpdHlFbnRyeUNvdW50OyBpKyspIHtcbiAgICAgICAgICAgICAgICAgICAgYnVja2V0LnRleHQub3BhY2l0eVZlcnRleEFycmF5LmVtcGxhY2VCYWNrKHBhY2tlZE9wYWNpdHkpO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAvLyBJZiB0aGlzIGxhYmVsIGlzIGNvbXBsZXRlbHkgZmFkZWQsIG1hcmsgaXQgc28gdGhhdCB3ZSBkb24ndCBoYXZlIHRvIGNhbGN1bGF0ZVxuICAgICAgICAgICAgICAgIC8vIGl0cyBwb3NpdGlvbiBhdCByZW5kZXIgdGltZVxuICAgICAgICAgICAgICAgIGJ1Y2tldC50ZXh0LnBsYWNlZFN5bWJvbEFycmF5LmdldChzeW1ib2xJbnN0YW5jZS5ob3Jpem9udGFsUGxhY2VkVGV4dFN5bWJvbEluZGV4KS5oaWRkZW4gPVxuICAgICAgICAgICAgICAgICAgICAob3BhY2l0eVN0YXRlLnRleHQuaXNIaWRkZW4oKTogYW55KTtcblxuICAgICAgICAgICAgICAgIGlmIChzeW1ib2xJbnN0YW5jZS52ZXJ0aWNhbFBsYWNlZFRleHRTeW1ib2xJbmRleCA+PSAwKSB7XG4gICAgICAgICAgICAgICAgICAgIGJ1Y2tldC50ZXh0LnBsYWNlZFN5bWJvbEFycmF5LmdldChzeW1ib2xJbnN0YW5jZS52ZXJ0aWNhbFBsYWNlZFRleHRTeW1ib2xJbmRleCkuaGlkZGVuID1cbiAgICAgICAgICAgICAgICAgICAgICAgIChvcGFjaXR5U3RhdGUudGV4dC5pc0hpZGRlbigpOiBhbnkpO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgaWYgKGhhc0ljb24pIHtcbiAgICAgICAgICAgICAgICBjb25zdCBwYWNrZWRPcGFjaXR5ID0gcGFja09wYWNpdHkob3BhY2l0eVN0YXRlLmljb24pO1xuICAgICAgICAgICAgICAgIGZvciAobGV0IGkgPSAwOyBpIDwgc3ltYm9sSW5zdGFuY2UubnVtSWNvblZlcnRpY2VzIC8gNDsgaSsrKSB7XG4gICAgICAgICAgICAgICAgICAgIGJ1Y2tldC5pY29uLm9wYWNpdHlWZXJ0ZXhBcnJheS5lbXBsYWNlQmFjayhwYWNrZWRPcGFjaXR5KTtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgYnVja2V0Lmljb24ucGxhY2VkU3ltYm9sQXJyYXkuZ2V0KHMpLmhpZGRlbiA9XG4gICAgICAgICAgICAgICAgICAgIChvcGFjaXR5U3RhdGUuaWNvbi5pc0hpZGRlbigpOiBhbnkpO1xuICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICBpZiAoYnVja2V0Lmhhc0NvbGxpc2lvbkJveERhdGEoKSB8fCBidWNrZXQuaGFzQ29sbGlzaW9uQ2lyY2xlRGF0YSgpKSB7XG4gICAgICAgICAgICAgICAgY29uc3QgY29sbGlzaW9uQXJyYXlzID0gYnVja2V0LmNvbGxpc2lvbkFycmF5c1tzXTtcbiAgICAgICAgICAgICAgICBpZiAoY29sbGlzaW9uQXJyYXlzKSB7XG4gICAgICAgICAgICAgICAgICAgIGlmIChjb2xsaXNpb25BcnJheXMudGV4dEJveCkge1xuICAgICAgICAgICAgICAgICAgICAgICAgdXBkYXRlQ29sbGlzaW9uVmVydGljZXMoYnVja2V0LmNvbGxpc2lvbkJveC5jb2xsaXNpb25WZXJ0ZXhBcnJheSwgb3BhY2l0eVN0YXRlLnRleHQucGxhY2VkLCBmYWxzZSk7XG4gICAgICAgICAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgICAgICAgICBpZiAoY29sbGlzaW9uQXJyYXlzLmljb25Cb3gpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIHVwZGF0ZUNvbGxpc2lvblZlcnRpY2VzKGJ1Y2tldC5jb2xsaXNpb25Cb3guY29sbGlzaW9uVmVydGV4QXJyYXksIG9wYWNpdHlTdGF0ZS5pY29uLnBsYWNlZCwgZmFsc2UpO1xuICAgICAgICAgICAgICAgICAgICB9XG5cbiAgICAgICAgICAgICAgICAgICAgY29uc3QgdGV4dENpcmNsZXMgPSBjb2xsaXNpb25BcnJheXMudGV4dENpcmNsZXM7XG4gICAgICAgICAgICAgICAgICAgIGlmICh0ZXh0Q2lyY2xlcyAmJiBidWNrZXQuaGFzQ29sbGlzaW9uQ2lyY2xlRGF0YSgpKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICBmb3IgKGxldCBrID0gMDsgayA8IHRleHRDaXJjbGVzLmxlbmd0aDsgayArPSA1KSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgY29uc3Qgbm90VXNlZCA9IGlzRHVwbGljYXRlIHx8IHRleHRDaXJjbGVzW2sgKyA0XSA9PT0gMDtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB1cGRhdGVDb2xsaXNpb25WZXJ0aWNlcyhidWNrZXQuY29sbGlzaW9uQ2lyY2xlLmNvbGxpc2lvblZlcnRleEFycmF5LCBvcGFjaXR5U3RhdGUudGV4dC5wbGFjZWQsIG5vdFVzZWQpO1xuICAgICAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfVxuICAgICAgICB9XG5cbiAgICAgICAgYnVja2V0LnNvcnRGZWF0dXJlcyh0aGlzLnRyYW5zZm9ybS5hbmdsZSk7XG4gICAgICAgIGlmICh0aGlzLnJldGFpbmVkUXVlcnlEYXRhW2J1Y2tldC5idWNrZXRJbnN0YW5jZUlkXSkge1xuICAgICAgICAgICAgdGhpcy5yZXRhaW5lZFF1ZXJ5RGF0YVtidWNrZXQuYnVja2V0SW5zdGFuY2VJZF0uZmVhdHVyZVNvcnRPcmRlciA9IGJ1Y2tldC5mZWF0dXJlU29ydE9yZGVyO1xuICAgICAgICB9XG5cbiAgICAgICAgaWYgKGJ1Y2tldC5oYXNUZXh0RGF0YSgpICYmIGJ1Y2tldC50ZXh0Lm9wYWNpdHlWZXJ0ZXhCdWZmZXIpIHtcbiAgICAgICAgICAgIGJ1Y2tldC50ZXh0Lm9wYWNpdHlWZXJ0ZXhCdWZmZXIudXBkYXRlRGF0YShidWNrZXQudGV4dC5vcGFjaXR5VmVydGV4QXJyYXkpO1xuICAgICAgICB9XG4gICAgICAgIGlmIChidWNrZXQuaGFzSWNvbkRhdGEoKSAmJiBidWNrZXQuaWNvbi5vcGFjaXR5VmVydGV4QnVmZmVyKSB7XG4gICAgICAgICAgICBidWNrZXQuaWNvbi5vcGFjaXR5VmVydGV4QnVmZmVyLnVwZGF0ZURhdGEoYnVja2V0Lmljb24ub3BhY2l0eVZlcnRleEFycmF5KTtcbiAgICAgICAgfVxuICAgICAgICBpZiAoYnVja2V0Lmhhc0NvbGxpc2lvbkJveERhdGEoKSAmJiBidWNrZXQuY29sbGlzaW9uQm94LmNvbGxpc2lvblZlcnRleEJ1ZmZlcikge1xuICAgICAgICAgICAgYnVja2V0LmNvbGxpc2lvbkJveC5jb2xsaXNpb25WZXJ0ZXhCdWZmZXIudXBkYXRlRGF0YShidWNrZXQuY29sbGlzaW9uQm94LmNvbGxpc2lvblZlcnRleEFycmF5KTtcbiAgICAgICAgfVxuICAgICAgICBpZiAoYnVja2V0Lmhhc0NvbGxpc2lvbkNpcmNsZURhdGEoKSAmJiBidWNrZXQuY29sbGlzaW9uQ2lyY2xlLmNvbGxpc2lvblZlcnRleEJ1ZmZlcikge1xuICAgICAgICAgICAgYnVja2V0LmNvbGxpc2lvbkNpcmNsZS5jb2xsaXNpb25WZXJ0ZXhCdWZmZXIudXBkYXRlRGF0YShidWNrZXQuY29sbGlzaW9uQ2lyY2xlLmNvbGxpc2lvblZlcnRleEFycmF5KTtcbiAgICAgICAgfVxuXG4gICAgICAgIGFzc2VydChidWNrZXQudGV4dC5vcGFjaXR5VmVydGV4QXJyYXkubGVuZ3RoID09PSBidWNrZXQudGV4dC5sYXlvdXRWZXJ0ZXhBcnJheS5sZW5ndGggLyA0KTtcbiAgICAgICAgYXNzZXJ0KGJ1Y2tldC5pY29uLm9wYWNpdHlWZXJ0ZXhBcnJheS5sZW5ndGggPT09IGJ1Y2tldC5pY29uLmxheW91dFZlcnRleEFycmF5Lmxlbmd0aCAvIDQpO1xuICAgIH1cblxuICAgIHN5bWJvbEZhZGVDaGFuZ2Uobm93OiBudW1iZXIpIHtcbiAgICAgICAgcmV0dXJuIHRoaXMuZmFkZUR1cmF0aW9uID09PSAwID9cbiAgICAgICAgICAgIDEgOlxuICAgICAgICAgICAgKG5vdyAtIHRoaXMuY29tbWl0VGltZSkgLyB0aGlzLmZhZGVEdXJhdGlvbjtcbiAgICB9XG5cbiAgICBoYXNUcmFuc2l0aW9ucyhub3c6IG51bWJlcikge1xuICAgICAgICByZXR1cm4gdGhpcy5zdGFsZSB8fFxuICAgICAgICAgICAgbm93IC0gdGhpcy5sYXN0UGxhY2VtZW50Q2hhbmdlVGltZSA8IHRoaXMuZmFkZUR1cmF0aW9uO1xuICAgIH1cblxuICAgIHN0aWxsUmVjZW50KG5vdzogbnVtYmVyKSB7XG4gICAgICAgIHJldHVybiB0aGlzLmNvbW1pdFRpbWUgIT09ICd1bmRlZmluZWQnICYmXG4gICAgICAgICAgICB0aGlzLmNvbW1pdFRpbWUgKyB0aGlzLmZhZGVEdXJhdGlvbiA+IG5vdztcbiAgICB9XG5cbiAgICBzZXRTdGFsZSgpIHtcbiAgICAgICAgdGhpcy5zdGFsZSA9IHRydWU7XG4gICAgfVxufVxuXG5mdW5jdGlvbiB1cGRhdGVDb2xsaXNpb25WZXJ0aWNlcyhjb2xsaXNpb25WZXJ0ZXhBcnJheTogQ29sbGlzaW9uVmVydGV4QXJyYXksIHBsYWNlZDogYm9vbGVhbiwgbm90VXNlZDogYm9vbGVhbikge1xuICAgIGNvbGxpc2lvblZlcnRleEFycmF5LmVtcGxhY2VCYWNrKHBsYWNlZCA/IDEgOiAwLCBub3RVc2VkID8gMSA6IDApO1xuICAgIGNvbGxpc2lvblZlcnRleEFycmF5LmVtcGxhY2VCYWNrKHBsYWNlZCA/IDEgOiAwLCBub3RVc2VkID8gMSA6IDApO1xuICAgIGNvbGxpc2lvblZlcnRleEFycmF5LmVtcGxhY2VCYWNrKHBsYWNlZCA/IDEgOiAwLCBub3RVc2VkID8gMSA6IDApO1xuICAgIGNvbGxpc2lvblZlcnRleEFycmF5LmVtcGxhY2VCYWNrKHBsYWNlZCA/IDEgOiAwLCBub3RVc2VkID8gMSA6IDApO1xufVxuXG4vLyBBbGwgZm91ciB2ZXJ0aWNlcyBmb3IgYSBnbHlwaCB3aWxsIGhhdmUgdGhlIHNhbWUgb3BhY2l0eSBzdGF0ZVxuLy8gU28gd2UgcGFjayB0aGUgb3BhY2l0eSBpbnRvIGEgdWludDgsIGFuZCB0aGVuIHJlcGVhdCBpdCBmb3VyIHRpbWVzXG4vLyB0byBtYWtlIGEgc2luZ2xlIHVpbnQzMiB0aGF0IHdlIGNhbiB1cGxvYWQgZm9yIGVhY2ggZ2x5cGggaW4gdGhlXG4vLyBsYWJlbC5cbmNvbnN0IHNoaWZ0MjUgPSBNYXRoLnBvdygyLCAyNSk7XG5jb25zdCBzaGlmdDI0ID0gTWF0aC5wb3coMiwgMjQpO1xuY29uc3Qgc2hpZnQxNyA9IE1hdGgucG93KDIsIDE3KTtcbmNvbnN0IHNoaWZ0MTYgPSBNYXRoLnBvdygyLCAxNik7XG5jb25zdCBzaGlmdDkgPSBNYXRoLnBvdygyLCA5KTtcbmNvbnN0IHNoaWZ0OCA9IE1hdGgucG93KDIsIDgpO1xuY29uc3Qgc2hpZnQxID0gTWF0aC5wb3coMiwgMSk7XG5mdW5jdGlvbiBwYWNrT3BhY2l0eShvcGFjaXR5U3RhdGU6IE9wYWNpdHlTdGF0ZSk6IG51bWJlciB7XG4gICAgaWYgKG9wYWNpdHlTdGF0ZS5vcGFjaXR5ID09PSAwICYmICFvcGFjaXR5U3RhdGUucGxhY2VkKSB7XG4gICAgICAgIHJldHVybiAwO1xuICAgIH0gZWxzZSBpZiAob3BhY2l0eVN0YXRlLm9wYWNpdHkgPT09IDEgJiYgb3BhY2l0eVN0YXRlLnBsYWNlZCkge1xuICAgICAgICByZXR1cm4gNDI5NDk2NzI5NTtcbiAgICB9XG4gICAgY29uc3QgdGFyZ2V0Qml0ID0gb3BhY2l0eVN0YXRlLnBsYWNlZCA/IDEgOiAwO1xuICAgIGNvbnN0IG9wYWNpdHlCaXRzID0gTWF0aC5mbG9vcihvcGFjaXR5U3RhdGUub3BhY2l0eSAqIDEyNyk7XG4gICAgcmV0dXJuIG9wYWNpdHlCaXRzICogc2hpZnQyNSArIHRhcmdldEJpdCAqIHNoaWZ0MjQgK1xuICAgICAgICBvcGFjaXR5Qml0cyAqIHNoaWZ0MTcgKyB0YXJnZXRCaXQgKiBzaGlmdDE2ICtcbiAgICAgICAgb3BhY2l0eUJpdHMgKiBzaGlmdDkgKyB0YXJnZXRCaXQgKiBzaGlmdDggK1xuICAgICAgICBvcGFjaXR5Qml0cyAqIHNoaWZ0MSArIHRhcmdldEJpdDtcbn1cbiIsIi8vIEBmbG93XG5cbmltcG9ydCBicm93c2VyIGZyb20gJy4uL3V0aWwvYnJvd3Nlcic7XG5cbmltcG9ydCB7IFBsYWNlbWVudCB9IGZyb20gJy4uL3N5bWJvbC9wbGFjZW1lbnQnO1xuXG5pbXBvcnQgdHlwZSBUcmFuc2Zvcm0gZnJvbSAnLi4vZ2VvL3RyYW5zZm9ybSc7XG5pbXBvcnQgdHlwZSBTdHlsZUxheWVyIGZyb20gJy4vc3R5bGVfbGF5ZXInO1xuaW1wb3J0IHR5cGUgVGlsZSBmcm9tICcuLi9zb3VyY2UvdGlsZSc7XG5cbmNsYXNzIExheWVyUGxhY2VtZW50IHtcbiAgICBfY3VycmVudFRpbGVJbmRleDogbnVtYmVyO1xuICAgIF90aWxlczogQXJyYXk8VGlsZT47XG4gICAgX3NlZW5Dcm9zc1RpbGVJRHM6IHsgW3N0cmluZyB8IG51bWJlcl06IGJvb2xlYW4gfTtcblxuICAgIGNvbnN0cnVjdG9yKCkge1xuICAgICAgICB0aGlzLl9jdXJyZW50VGlsZUluZGV4ID0gMDtcbiAgICAgICAgdGhpcy5fc2VlbkNyb3NzVGlsZUlEcyA9IHt9O1xuICAgIH1cblxuICAgIGNvbnRpbnVlUGxhY2VtZW50KHRpbGVzOiBBcnJheTxUaWxlPiwgcGxhY2VtZW50OiBQbGFjZW1lbnQsIHNob3dDb2xsaXNpb25Cb3hlczogYm9vbGVhbiwgc3R5bGVMYXllcjogU3R5bGVMYXllciwgc2hvdWxkUGF1c2VQbGFjZW1lbnQpIHtcbiAgICAgICAgd2hpbGUgKHRoaXMuX2N1cnJlbnRUaWxlSW5kZXggPCB0aWxlcy5sZW5ndGgpIHtcbiAgICAgICAgICAgIGNvbnN0IHRpbGUgPSB0aWxlc1t0aGlzLl9jdXJyZW50VGlsZUluZGV4XTtcbiAgICAgICAgICAgIHBsYWNlbWVudC5wbGFjZUxheWVyVGlsZShzdHlsZUxheWVyLCB0aWxlLCBzaG93Q29sbGlzaW9uQm94ZXMsIHRoaXMuX3NlZW5Dcm9zc1RpbGVJRHMpO1xuXG4gICAgICAgICAgICB0aGlzLl9jdXJyZW50VGlsZUluZGV4Kys7XG4gICAgICAgICAgICBpZiAoc2hvdWxkUGF1c2VQbGFjZW1lbnQoKSkge1xuICAgICAgICAgICAgICAgIHJldHVybiB0cnVlO1xuICAgICAgICAgICAgfVxuICAgICAgICB9XG4gICAgfVxufVxuXG5jbGFzcyBQYXVzZWFibGVQbGFjZW1lbnQge1xuICAgIHBsYWNlbWVudDogUGxhY2VtZW50O1xuICAgIF9kb25lOiBib29sZWFuO1xuICAgIF9jdXJyZW50UGxhY2VtZW50SW5kZXg6IG51bWJlcjtcbiAgICBfZm9yY2VGdWxsUGxhY2VtZW50OiBib29sZWFuO1xuICAgIF9zaG93Q29sbGlzaW9uQm94ZXM6IGJvb2xlYW47XG4gICAgX2luUHJvZ3Jlc3NMYXllcjogP0xheWVyUGxhY2VtZW50O1xuXG4gICAgY29uc3RydWN0b3IodHJhbnNmb3JtOiBUcmFuc2Zvcm0sIG9yZGVyOiBBcnJheTxzdHJpbmc+LFxuICAgICAgICAgICAgICAgIGZvcmNlRnVsbFBsYWNlbWVudDogYm9vbGVhbixcbiAgICAgICAgICAgICAgICBzaG93Q29sbGlzaW9uQm94ZXM6IGJvb2xlYW4sXG4gICAgICAgICAgICAgICAgZmFkZUR1cmF0aW9uOiBudW1iZXIsXG4gICAgICAgICAgICAgICAgY3Jvc3NTb3VyY2VDb2xsaXNpb25zOiBib29sZWFuKSB7XG5cbiAgICAgICAgdGhpcy5wbGFjZW1lbnQgPSBuZXcgUGxhY2VtZW50KHRyYW5zZm9ybSwgZmFkZUR1cmF0aW9uLCBjcm9zc1NvdXJjZUNvbGxpc2lvbnMpO1xuICAgICAgICB0aGlzLl9jdXJyZW50UGxhY2VtZW50SW5kZXggPSBvcmRlci5sZW5ndGggLSAxO1xuICAgICAgICB0aGlzLl9mb3JjZUZ1bGxQbGFjZW1lbnQgPSBmb3JjZUZ1bGxQbGFjZW1lbnQ7XG4gICAgICAgIHRoaXMuX3Nob3dDb2xsaXNpb25Cb3hlcyA9IHNob3dDb2xsaXNpb25Cb3hlcztcbiAgICAgICAgdGhpcy5fZG9uZSA9IGZhbHNlO1xuICAgIH1cblxuICAgIGlzRG9uZSgpOiBib29sZWFuIHtcbiAgICAgICAgcmV0dXJuIHRoaXMuX2RvbmU7XG4gICAgfVxuXG4gICAgY29udGludWVQbGFjZW1lbnQob3JkZXI6IEFycmF5PHN0cmluZz4sIGxheWVyczoge1tzdHJpbmddOiBTdHlsZUxheWVyfSwgbGF5ZXJUaWxlczoge1tzdHJpbmddOiBBcnJheTxUaWxlPn0pIHtcbiAgICAgICAgY29uc3Qgc3RhcnRUaW1lID0gYnJvd3Nlci5ub3coKTtcblxuICAgICAgICBjb25zdCBzaG91bGRQYXVzZVBsYWNlbWVudCA9ICgpID0+IHtcbiAgICAgICAgICAgIGNvbnN0IGVsYXBzZWRUaW1lID0gYnJvd3Nlci5ub3coKSAtIHN0YXJ0VGltZTtcbiAgICAgICAgICAgIHJldHVybiB0aGlzLl9mb3JjZUZ1bGxQbGFjZW1lbnQgPyBmYWxzZSA6IGVsYXBzZWRUaW1lID4gMjtcbiAgICAgICAgfTtcblxuICAgICAgICB3aGlsZSAodGhpcy5fY3VycmVudFBsYWNlbWVudEluZGV4ID49IDApIHtcbiAgICAgICAgICAgIGNvbnN0IGxheWVySWQgPSBvcmRlclt0aGlzLl9jdXJyZW50UGxhY2VtZW50SW5kZXhdO1xuICAgICAgICAgICAgY29uc3QgbGF5ZXIgPSBsYXllcnNbbGF5ZXJJZF07XG4gICAgICAgICAgICBjb25zdCBwbGFjZW1lbnRab29tID0gdGhpcy5wbGFjZW1lbnQuY29sbGlzaW9uSW5kZXgudHJhbnNmb3JtLnpvb207XG4gICAgICAgICAgICBpZiAobGF5ZXIudHlwZSA9PT0gJ3N5bWJvbCcgJiZcbiAgICAgICAgICAgICAgICAoIWxheWVyLm1pbnpvb20gfHwgbGF5ZXIubWluem9vbSA8PSBwbGFjZW1lbnRab29tKSAmJlxuICAgICAgICAgICAgICAgICghbGF5ZXIubWF4em9vbSB8fCBsYXllci5tYXh6b29tID4gcGxhY2VtZW50Wm9vbSkpIHtcblxuICAgICAgICAgICAgICAgIGlmICghdGhpcy5faW5Qcm9ncmVzc0xheWVyKSB7XG4gICAgICAgICAgICAgICAgICAgIHRoaXMuX2luUHJvZ3Jlc3NMYXllciA9IG5ldyBMYXllclBsYWNlbWVudCgpO1xuICAgICAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgICAgIGNvbnN0IHBhdXNlUGxhY2VtZW50ID0gdGhpcy5faW5Qcm9ncmVzc0xheWVyLmNvbnRpbnVlUGxhY2VtZW50KGxheWVyVGlsZXNbbGF5ZXIuc291cmNlXSwgdGhpcy5wbGFjZW1lbnQsIHRoaXMuX3Nob3dDb2xsaXNpb25Cb3hlcywgbGF5ZXIsIHNob3VsZFBhdXNlUGxhY2VtZW50KTtcblxuICAgICAgICAgICAgICAgIGlmIChwYXVzZVBsYWNlbWVudCkge1xuICAgICAgICAgICAgICAgICAgICAvLyBXZSBkaWRuJ3QgZmluaXNoIHBsYWNpbmcgYWxsIGxheWVycyB3aXRoaW4gMm1zLFxuICAgICAgICAgICAgICAgICAgICAvLyBidXQgd2UgY2FuIGtlZXAgcmVuZGVyaW5nIHdpdGggYSBwYXJ0aWFsIHBsYWNlbWVudFxuICAgICAgICAgICAgICAgICAgICAvLyBXZSdsbCByZXN1bWUgaGVyZSBvbiB0aGUgbmV4dCBmcmFtZVxuICAgICAgICAgICAgICAgICAgICByZXR1cm47XG4gICAgICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICAgICAgZGVsZXRlIHRoaXMuX2luUHJvZ3Jlc3NMYXllcjtcbiAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgdGhpcy5fY3VycmVudFBsYWNlbWVudEluZGV4LS07XG4gICAgICAgIH1cblxuICAgICAgICB0aGlzLl9kb25lID0gdHJ1ZTtcbiAgICB9XG5cbiAgICBjb21taXQocHJldmlvdXNQbGFjZW1lbnQ6ID9QbGFjZW1lbnQsIG5vdzogbnVtYmVyKSB7XG4gICAgICAgIHRoaXMucGxhY2VtZW50LmNvbW1pdChwcmV2aW91c1BsYWNlbWVudCwgbm93KTtcbiAgICAgICAgcmV0dXJuIHRoaXMucGxhY2VtZW50O1xuICAgIH1cbn1cblxuZXhwb3J0IGRlZmF1bHQgUGF1c2VhYmxlUGxhY2VtZW50O1xuIiwiLy8gQGZsb3dcblxuaW1wb3J0IEVYVEVOVCBmcm9tICcuLi9kYXRhL2V4dGVudCc7XG5cbmltcG9ydCB7IFN5bWJvbEluc3RhbmNlQXJyYXkgfSBmcm9tICcuLi9kYXRhL2FycmF5X3R5cGVzJztcblxuaW1wb3J0IHR5cGUgeyBTeW1ib2xJbnN0YW5jZSB9IGZyb20gJy4uL2RhdGEvYXJyYXlfdHlwZXMnO1xuaW1wb3J0IHR5cGUge092ZXJzY2FsZWRUaWxlSUR9IGZyb20gJy4uL3NvdXJjZS90aWxlX2lkJztcbmltcG9ydCB0eXBlIFN5bWJvbEJ1Y2tldCBmcm9tICcuLi9kYXRhL2J1Y2tldC9zeW1ib2xfYnVja2V0JztcbmltcG9ydCB0eXBlIFN0eWxlTGF5ZXIgZnJvbSAnLi4vc3R5bGUvc3R5bGVfbGF5ZXInO1xuaW1wb3J0IHR5cGUgVGlsZSBmcm9tICcuLi9zb3VyY2UvdGlsZSc7XG5cbi8qXG4gICAgVGhlIENyb3NzVGlsZVN5bWJvbEluZGV4IGdlbmVyYWxseSB3b3JrcyBvbiB0aGUgYXNzdW1wdGlvbiB0aGF0XG4gICAgYSBjb25jZXB0dWFsIFwidW5pcXVlIHN5bWJvbFwiIGNhbiBiZSBpZGVudGlmaWVkIGJ5IHRoZSB0ZXh0IG9mXG4gICAgdGhlIGxhYmVsIGNvbWJpbmVkIHdpdGggdGhlIGFuY2hvciBwb2ludC4gVGhlIGdvYWwgaXMgdG8gYXNzaWduXG4gICAgdGhlc2UgY29uY2VwdHVhbCBcInVuaXF1ZSBzeW1ib2xzXCIgYSBzaGFyZWQgY3Jvc3NUaWxlSUQgdGhhdCBjYW4gYmVcbiAgICB1c2VkIGJ5IFBsYWNlbWVudCB0byBrZWVwIGZhZGluZyBvcGFjaXR5IHN0YXRlcyBjb25zaXN0ZW50IGFuZCB0b1xuICAgIGRlZHVwbGljYXRlIGxhYmVscy5cblxuICAgIFRoZSBDcm9zc1RpbGVTeW1ib2xJbmRleCBpbmRleGVzIGFsbCB0aGUgY3VycmVudCBzeW1ib2wgaW5zdGFuY2VzIGFuZFxuICAgIHRoZWlyIGNyb3NzVGlsZUlEcy4gV2hlbiBhIHN5bWJvbCBidWNrZXQgZ2V0cyBhZGRlZCBvciB1cGRhdGVkLCB0aGVcbiAgICBpbmRleCBhc3NpZ25zIGEgY3Jvc3NUaWxlSUQgdG8gZWFjaCBvZiBpdCdzIHN5bWJvbCBpbnN0YW5jZXMgYnkgZWl0aGVyXG4gICAgbWF0Y2hpbmcgaXQgd2l0aCBhbiBleGlzdGluZyBpZCBvciBhc3NpZ25pbmcgYSBuZXcgb25lLlxuKi9cblxuLy8gUm91bmQgYW5jaG9yIHBvc2l0aW9ucyB0byByb3VnaGx5IDQgcGl4ZWwgZ3JpZFxuY29uc3Qgcm91bmRpbmdGYWN0b3IgPSA1MTIgLyBFWFRFTlQgLyAyO1xuXG5jbGFzcyBUaWxlTGF5ZXJJbmRleCB7XG4gICAgdGlsZUlEOiBPdmVyc2NhbGVkVGlsZUlEO1xuICAgIGluZGV4ZWRTeW1ib2xJbnN0YW5jZXM6IHtbbnVtYmVyXTogQXJyYXk8e1xuICAgICAgICBjcm9zc1RpbGVJRDogbnVtYmVyLFxuICAgICAgICBjb29yZDoge1xuICAgICAgICAgICAgeDogbnVtYmVyLFxuICAgICAgICAgICAgeTogbnVtYmVyXG4gICAgICAgIH1cbiAgICB9Pn07XG4gICAgYnVja2V0SW5zdGFuY2VJZDogbnVtYmVyO1xuXG4gICAgY29uc3RydWN0b3IodGlsZUlEOiBPdmVyc2NhbGVkVGlsZUlELCBzeW1ib2xJbnN0YW5jZXM6IFN5bWJvbEluc3RhbmNlQXJyYXksIGJ1Y2tldEluc3RhbmNlSWQ6IG51bWJlcikge1xuICAgICAgICB0aGlzLnRpbGVJRCA9IHRpbGVJRDtcbiAgICAgICAgdGhpcy5pbmRleGVkU3ltYm9sSW5zdGFuY2VzID0ge307XG4gICAgICAgIHRoaXMuYnVja2V0SW5zdGFuY2VJZCA9IGJ1Y2tldEluc3RhbmNlSWQ7XG5cbiAgICAgICAgZm9yIChsZXQgaSA9IDA7IGkgPCBzeW1ib2xJbnN0YW5jZXMubGVuZ3RoOyBpKyspIHtcbiAgICAgICAgICAgIGNvbnN0IHN5bWJvbEluc3RhbmNlID0gc3ltYm9sSW5zdGFuY2VzLmdldChpKTtcbiAgICAgICAgICAgIGNvbnN0IGtleSA9IHN5bWJvbEluc3RhbmNlLmtleTtcbiAgICAgICAgICAgIGlmICghdGhpcy5pbmRleGVkU3ltYm9sSW5zdGFuY2VzW2tleV0pIHtcbiAgICAgICAgICAgICAgICB0aGlzLmluZGV4ZWRTeW1ib2xJbnN0YW5jZXNba2V5XSA9IFtdO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgLy8gVGhpcyB0aWxlIG1heSBoYXZlIG11bHRpcGxlIHN5bWJvbCBpbnN0YW5jZXMgd2l0aCB0aGUgc2FtZSBrZXlcbiAgICAgICAgICAgIC8vIFN0b3JlIGVhY2ggb25lIGFsb25nIHdpdGggaXRzIGNvb3JkaW5hdGVzXG4gICAgICAgICAgICB0aGlzLmluZGV4ZWRTeW1ib2xJbnN0YW5jZXNba2V5XS5wdXNoKHtcbiAgICAgICAgICAgICAgICBjcm9zc1RpbGVJRDogc3ltYm9sSW5zdGFuY2UuY3Jvc3NUaWxlSUQsXG4gICAgICAgICAgICAgICAgY29vcmQ6IHRoaXMuZ2V0U2NhbGVkQ29vcmRpbmF0ZXMoc3ltYm9sSW5zdGFuY2UsIHRpbGVJRClcbiAgICAgICAgICAgIH0pO1xuICAgICAgICB9XG4gICAgfVxuXG4gICAgLy8gQ29udmVydHMgdGhlIGNvb3JkaW5hdGVzIG9mIHRoZSBpbnB1dCBzeW1ib2wgaW5zdGFuY2UgaW50byBjb29yZGluYXRlcyB0aGF0IGJlIGNhbiBjb21wYXJlZFxuICAgIC8vIGFnYWluc3Qgb3RoZXIgc3ltYm9scyBpbiB0aGlzIGluZGV4LiBDb29yZGluYXRlcyBhcmU6XG4gICAgLy8gKDEpIHdvcmxkLWJhc2VkIChzbyBhZnRlciBjb252ZXJzaW9uIHRoZSBzb3VyY2UgdGlsZSBpcyBpcnJlbGV2YW50KVxuICAgIC8vICgyKSBjb252ZXJ0ZWQgdG8gdGhlIHotc2NhbGUgb2YgdGhpcyBUaWxlTGF5ZXJJbmRleFxuICAgIC8vICgzKSBkb3duLXNhbXBsZWQgYnkgXCJyb3VuZGluZ0ZhY3RvclwiIGZyb20gdGlsZSBjb29yZGluYXRlIHByZWNpc2lvbiBpbiBvcmRlciB0byBiZVxuICAgIC8vICAgICBtb3JlIHRvbGVyYW50IG9mIHNtYWxsIGRpZmZlcmVuY2VzIGJldHdlZW4gdGlsZXMuXG4gICAgZ2V0U2NhbGVkQ29vcmRpbmF0ZXMoc3ltYm9sSW5zdGFuY2U6IFN5bWJvbEluc3RhbmNlLCBjaGlsZFRpbGVJRDogT3ZlcnNjYWxlZFRpbGVJRCkge1xuICAgICAgICBjb25zdCB6RGlmZmVyZW5jZSA9IGNoaWxkVGlsZUlELmNhbm9uaWNhbC56IC0gdGhpcy50aWxlSUQuY2Fub25pY2FsLno7XG4gICAgICAgIGNvbnN0IHNjYWxlID0gcm91bmRpbmdGYWN0b3IgLyBNYXRoLnBvdygyLCB6RGlmZmVyZW5jZSk7XG4gICAgICAgIHJldHVybiB7XG4gICAgICAgICAgICB4OiBNYXRoLmZsb29yKChjaGlsZFRpbGVJRC5jYW5vbmljYWwueCAqIEVYVEVOVCArIHN5bWJvbEluc3RhbmNlLmFuY2hvclgpICogc2NhbGUpLFxuICAgICAgICAgICAgeTogTWF0aC5mbG9vcigoY2hpbGRUaWxlSUQuY2Fub25pY2FsLnkgKiBFWFRFTlQgKyBzeW1ib2xJbnN0YW5jZS5hbmNob3JZKSAqIHNjYWxlKVxuICAgICAgICB9O1xuICAgIH1cblxuICAgIGZpbmRNYXRjaGVzKHN5bWJvbEluc3RhbmNlczogU3ltYm9sSW5zdGFuY2VBcnJheSwgbmV3VGlsZUlEOiBPdmVyc2NhbGVkVGlsZUlELCB6b29tQ3Jvc3NUaWxlSURzOiB7W2Nyb3NzVGlsZUlEOiBudW1iZXJdOiBib29sZWFufSkge1xuICAgICAgICBjb25zdCB0b2xlcmFuY2UgPSB0aGlzLnRpbGVJRC5jYW5vbmljYWwueiA8IG5ld1RpbGVJRC5jYW5vbmljYWwueiA/IDEgOiBNYXRoLnBvdygyLCB0aGlzLnRpbGVJRC5jYW5vbmljYWwueiAtIG5ld1RpbGVJRC5jYW5vbmljYWwueik7XG5cbiAgICAgICAgZm9yIChsZXQgaSA9IDA7IGkgPCBzeW1ib2xJbnN0YW5jZXMubGVuZ3RoOyBpKyspIHtcbiAgICAgICAgICAgIGNvbnN0IHN5bWJvbEluc3RhbmNlID0gc3ltYm9sSW5zdGFuY2VzLmdldChpKTtcbiAgICAgICAgICAgIGlmIChzeW1ib2xJbnN0YW5jZS5jcm9zc1RpbGVJRCkge1xuICAgICAgICAgICAgICAgIC8vIGFscmVhZHkgaGFzIGEgbWF0Y2gsIHNraXBcbiAgICAgICAgICAgICAgICBjb250aW51ZTtcbiAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgY29uc3QgaW5kZXhlZEluc3RhbmNlcyA9IHRoaXMuaW5kZXhlZFN5bWJvbEluc3RhbmNlc1tzeW1ib2xJbnN0YW5jZS5rZXldO1xuICAgICAgICAgICAgaWYgKCFpbmRleGVkSW5zdGFuY2VzKSB7XG4gICAgICAgICAgICAgICAgLy8gTm8gc3ltYm9sIHdpdGggdGhpcyBrZXkgaW4gdGhpcyBidWNrZXRcbiAgICAgICAgICAgICAgICBjb250aW51ZTtcbiAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgY29uc3Qgc2NhbGVkU3ltYm9sQ29vcmQgPSB0aGlzLmdldFNjYWxlZENvb3JkaW5hdGVzKHN5bWJvbEluc3RhbmNlLCBuZXdUaWxlSUQpO1xuXG4gICAgICAgICAgICBmb3IgKGNvbnN0IHRoaXNUaWxlU3ltYm9sIG9mIGluZGV4ZWRJbnN0YW5jZXMpIHtcbiAgICAgICAgICAgICAgICAvLyBSZXR1cm4gYW55IHN5bWJvbCB3aXRoIHRoZSBzYW1lIGtleXMgd2hvc2UgY29vcmRpbmF0ZXMgYXJlIHdpdGhpbiAxXG4gICAgICAgICAgICAgICAgLy8gZ3JpZCB1bml0LiAod2l0aCBhIDRweCBncmlkLCB0aGlzIGNvdmVycyBhIDEycHggYnkgMTJweCBhcmVhKVxuICAgICAgICAgICAgICAgIGlmIChNYXRoLmFicyh0aGlzVGlsZVN5bWJvbC5jb29yZC54IC0gc2NhbGVkU3ltYm9sQ29vcmQueCkgPD0gdG9sZXJhbmNlICYmXG4gICAgICAgICAgICAgICAgICAgIE1hdGguYWJzKHRoaXNUaWxlU3ltYm9sLmNvb3JkLnkgLSBzY2FsZWRTeW1ib2xDb29yZC55KSA8PSB0b2xlcmFuY2UgJiZcbiAgICAgICAgICAgICAgICAgICAgIXpvb21Dcm9zc1RpbGVJRHNbdGhpc1RpbGVTeW1ib2wuY3Jvc3NUaWxlSURdKSB7XG4gICAgICAgICAgICAgICAgICAgIC8vIE9uY2Ugd2UndmUgbWFya2VkIG91cnNlbHZlcyBkdXBsaWNhdGUgYWdhaW5zdCB0aGlzIHBhcmVudCBzeW1ib2wsXG4gICAgICAgICAgICAgICAgICAgIC8vIGRvbid0IGxldCBhbnkgb3RoZXIgc3ltYm9scyBhdCB0aGUgc2FtZSB6b29tIGxldmVsIGR1cGxpY2F0ZSBhZ2FpbnN0XG4gICAgICAgICAgICAgICAgICAgIC8vIHRoZSBzYW1lIHBhcmVudCAoc2VlIGlzc3VlICM1OTkzKVxuICAgICAgICAgICAgICAgICAgICB6b29tQ3Jvc3NUaWxlSURzW3RoaXNUaWxlU3ltYm9sLmNyb3NzVGlsZUlEXSA9IHRydWU7XG4gICAgICAgICAgICAgICAgICAgIHN5bWJvbEluc3RhbmNlLmNyb3NzVGlsZUlEID0gdGhpc1RpbGVTeW1ib2wuY3Jvc3NUaWxlSUQ7XG4gICAgICAgICAgICAgICAgICAgIGJyZWFrO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgIH1cbn1cblxuY2xhc3MgQ3Jvc3NUaWxlSURzIHtcbiAgICBtYXhDcm9zc1RpbGVJRDogbnVtYmVyO1xuICAgIGNvbnN0cnVjdG9yKCkge1xuICAgICAgICB0aGlzLm1heENyb3NzVGlsZUlEID0gMDtcbiAgICB9XG4gICAgZ2VuZXJhdGUoKSB7XG4gICAgICAgIHJldHVybiArK3RoaXMubWF4Q3Jvc3NUaWxlSUQ7XG4gICAgfVxufVxuXG5jbGFzcyBDcm9zc1RpbGVTeW1ib2xMYXllckluZGV4IHtcbiAgICBpbmRleGVzOiB7W3pvb206IHN0cmluZyB8IG51bWJlcl06IHtbdGlsZUlkOiBzdHJpbmcgfCBudW1iZXJdOiBUaWxlTGF5ZXJJbmRleH19O1xuICAgIHVzZWRDcm9zc1RpbGVJRHM6IHtbem9vbTogc3RyaW5nIHwgbnVtYmVyXToge1tjcm9zc1RpbGVJRDogbnVtYmVyXTogYm9vbGVhbn19O1xuICAgIGxuZzogbnVtYmVyO1xuXG4gICAgY29uc3RydWN0b3IoKSB7XG4gICAgICAgIHRoaXMuaW5kZXhlcyA9IHt9O1xuICAgICAgICB0aGlzLnVzZWRDcm9zc1RpbGVJRHMgPSB7fTtcbiAgICAgICAgdGhpcy5sbmcgPSAwO1xuICAgIH1cblxuICAgIC8qXG4gICAgICogU29tZXRpbWVzIHdoZW4gYSB1c2VyIHBhbnMgYWNyb3NzIHRoZSBhbnRpbWVyaWRpYW4gdGhlIGxvbmdpdHVkZSB2YWx1ZSBnZXRzIHdyYXBwZWQuXG4gICAgICogVG8gcHJldmVudCBsYWJlbHMgZnJvbSBmbGFzaGluZyBvdXQgYW5kIGluIHdlIGFkanVzdCB0aGUgdGlsZUlEIHZhbHVlcyBpbiB0aGUgaW5kZXhlc1xuICAgICAqIHNvIHRoYXQgdGhleSBtYXRjaCB0aGUgbmV3IHdyYXBwZWQgdmVyc2lvbiBvZiB0aGUgbWFwLlxuICAgICAqL1xuICAgIGhhbmRsZVdyYXBKdW1wKGxuZzogbnVtYmVyKSB7XG4gICAgICAgIGNvbnN0IHdyYXBEZWx0YSA9IE1hdGgucm91bmQoKGxuZyAtIHRoaXMubG5nKSAvIDM2MCk7XG4gICAgICAgIGlmICh3cmFwRGVsdGEgIT09IDApIHtcbiAgICAgICAgICAgIGZvciAoY29uc3Qgem9vbSBpbiB0aGlzLmluZGV4ZXMpIHtcbiAgICAgICAgICAgICAgICBjb25zdCB6b29tSW5kZXhlcyA9IHRoaXMuaW5kZXhlc1t6b29tXTtcbiAgICAgICAgICAgICAgICBjb25zdCBuZXdab29tSW5kZXggPSB7fTtcbiAgICAgICAgICAgICAgICBmb3IgKGNvbnN0IGtleSBpbiB6b29tSW5kZXhlcykge1xuICAgICAgICAgICAgICAgICAgICAvLyBjaGFuZ2UgdGhlIHRpbGVJRCdzIHdyYXAgYW5kIGFkZCBpdCB0byBhIG5ldyBpbmRleFxuICAgICAgICAgICAgICAgICAgICBjb25zdCBpbmRleCA9IHpvb21JbmRleGVzW2tleV07XG4gICAgICAgICAgICAgICAgICAgIGluZGV4LnRpbGVJRCA9IGluZGV4LnRpbGVJRC51bndyYXBUbyhpbmRleC50aWxlSUQud3JhcCArIHdyYXBEZWx0YSk7XG4gICAgICAgICAgICAgICAgICAgIG5ld1pvb21JbmRleFtpbmRleC50aWxlSUQua2V5XSA9IGluZGV4O1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICB0aGlzLmluZGV4ZXNbem9vbV0gPSBuZXdab29tSW5kZXg7XG4gICAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICAgICAgdGhpcy5sbmcgPSBsbmc7XG4gICAgfVxuXG4gICAgYWRkQnVja2V0KHRpbGVJRDogT3ZlcnNjYWxlZFRpbGVJRCwgYnVja2V0OiBTeW1ib2xCdWNrZXQsIGNyb3NzVGlsZUlEczogQ3Jvc3NUaWxlSURzKSB7XG4gICAgICAgIGlmICh0aGlzLmluZGV4ZXNbdGlsZUlELm92ZXJzY2FsZWRaXSAmJlxuICAgICAgICAgICAgdGhpcy5pbmRleGVzW3RpbGVJRC5vdmVyc2NhbGVkWl1bdGlsZUlELmtleV0pIHtcbiAgICAgICAgICAgIGlmICh0aGlzLmluZGV4ZXNbdGlsZUlELm92ZXJzY2FsZWRaXVt0aWxlSUQua2V5XS5idWNrZXRJbnN0YW5jZUlkID09PVxuICAgICAgICAgICAgICAgIGJ1Y2tldC5idWNrZXRJbnN0YW5jZUlkKSB7XG4gICAgICAgICAgICAgICAgcmV0dXJuIGZhbHNlO1xuICAgICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgICAgICAvLyBXZSdyZSByZXBsYWNpbmcgdGhpcyBidWNrZXQgd2l0aCBhbiB1cGRhdGVkIHZlcnNpb25cbiAgICAgICAgICAgICAgICAvLyBSZW1vdmUgdGhlIG9sZCBidWNrZXQncyBcInVzZWQgY3Jvc3NUaWxlSURzXCIgbm93IHNvIHRoYXRcbiAgICAgICAgICAgICAgICAvLyB0aGUgbmV3IGJ1Y2tldCBjYW4gY2xhaW0gdGhlbS5cbiAgICAgICAgICAgICAgICAvLyBUaGUgb2xkIGluZGV4IGVudHJpZXMgdGhlbXNlbHZlcyBzdGljayBhcm91bmQgdW50aWxcbiAgICAgICAgICAgICAgICAvLyAncmVtb3ZlU3RhbGVCdWNrZXRzJyBpcyBjYWxsZWQuXG4gICAgICAgICAgICAgICAgdGhpcy5yZW1vdmVCdWNrZXRDcm9zc1RpbGVJRHModGlsZUlELm92ZXJzY2FsZWRaLFxuICAgICAgICAgICAgICAgICAgICB0aGlzLmluZGV4ZXNbdGlsZUlELm92ZXJzY2FsZWRaXVt0aWxlSUQua2V5XSk7XG4gICAgICAgICAgICB9XG4gICAgICAgIH1cblxuICAgICAgICBmb3IgKGxldCBpID0gMDsgaSA8IGJ1Y2tldC5zeW1ib2xJbnN0YW5jZXMubGVuZ3RoOyBpKyspIHtcbiAgICAgICAgICAgIGNvbnN0IHN5bWJvbEluc3RhbmNlID0gYnVja2V0LnN5bWJvbEluc3RhbmNlcy5nZXQoaSk7XG4gICAgICAgICAgICBzeW1ib2xJbnN0YW5jZS5jcm9zc1RpbGVJRCA9IDA7XG4gICAgICAgIH1cblxuICAgICAgICBpZiAoIXRoaXMudXNlZENyb3NzVGlsZUlEc1t0aWxlSUQub3ZlcnNjYWxlZFpdKSB7XG4gICAgICAgICAgICB0aGlzLnVzZWRDcm9zc1RpbGVJRHNbdGlsZUlELm92ZXJzY2FsZWRaXSA9IHt9O1xuICAgICAgICB9XG4gICAgICAgIGNvbnN0IHpvb21Dcm9zc1RpbGVJRHMgPSB0aGlzLnVzZWRDcm9zc1RpbGVJRHNbdGlsZUlELm92ZXJzY2FsZWRaXTtcblxuICAgICAgICBmb3IgKGNvbnN0IHpvb20gaW4gdGhpcy5pbmRleGVzKSB7XG4gICAgICAgICAgICBjb25zdCB6b29tSW5kZXhlcyA9IHRoaXMuaW5kZXhlc1t6b29tXTtcbiAgICAgICAgICAgIGlmIChOdW1iZXIoem9vbSkgPiB0aWxlSUQub3ZlcnNjYWxlZFopIHtcbiAgICAgICAgICAgICAgICBmb3IgKGNvbnN0IGlkIGluIHpvb21JbmRleGVzKSB7XG4gICAgICAgICAgICAgICAgICAgIGNvbnN0IGNoaWxkSW5kZXggPSB6b29tSW5kZXhlc1tpZF07XG4gICAgICAgICAgICAgICAgICAgIGlmIChjaGlsZEluZGV4LnRpbGVJRC5pc0NoaWxkT2YodGlsZUlEKSkge1xuICAgICAgICAgICAgICAgICAgICAgICAgY2hpbGRJbmRleC5maW5kTWF0Y2hlcyhidWNrZXQuc3ltYm9sSW5zdGFuY2VzLCB0aWxlSUQsIHpvb21Dcm9zc1RpbGVJRHMpO1xuICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgICAgICBjb25zdCBwYXJlbnRDb29yZCA9IHRpbGVJRC5zY2FsZWRUbyhOdW1iZXIoem9vbSkpO1xuICAgICAgICAgICAgICAgIGNvbnN0IHBhcmVudEluZGV4ID0gem9vbUluZGV4ZXNbcGFyZW50Q29vcmQua2V5XTtcbiAgICAgICAgICAgICAgICBpZiAocGFyZW50SW5kZXgpIHtcbiAgICAgICAgICAgICAgICAgICAgcGFyZW50SW5kZXguZmluZE1hdGNoZXMoYnVja2V0LnN5bWJvbEluc3RhbmNlcywgdGlsZUlELCB6b29tQ3Jvc3NUaWxlSURzKTtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9XG4gICAgICAgIH1cblxuICAgICAgICBmb3IgKGxldCBpID0gMDsgaSA8IGJ1Y2tldC5zeW1ib2xJbnN0YW5jZXMubGVuZ3RoOyBpKyspIHtcbiAgICAgICAgICAgIGNvbnN0IHN5bWJvbEluc3RhbmNlID0gYnVja2V0LnN5bWJvbEluc3RhbmNlcy5nZXQoaSk7XG4gICAgICAgICAgICBpZiAoIXN5bWJvbEluc3RhbmNlLmNyb3NzVGlsZUlEKSB7XG4gICAgICAgICAgICAgICAgLy8gc3ltYm9sIGRpZCBub3QgbWF0Y2ggYW55IGtub3duIHN5bWJvbCwgYXNzaWduIGEgbmV3IGlkXG4gICAgICAgICAgICAgICAgc3ltYm9sSW5zdGFuY2UuY3Jvc3NUaWxlSUQgPSBjcm9zc1RpbGVJRHMuZ2VuZXJhdGUoKTtcbiAgICAgICAgICAgICAgICB6b29tQ3Jvc3NUaWxlSURzW3N5bWJvbEluc3RhbmNlLmNyb3NzVGlsZUlEXSA9IHRydWU7XG4gICAgICAgICAgICB9XG4gICAgICAgIH1cblxuICAgICAgICBpZiAodGhpcy5pbmRleGVzW3RpbGVJRC5vdmVyc2NhbGVkWl0gPT09IHVuZGVmaW5lZCkge1xuICAgICAgICAgICAgdGhpcy5pbmRleGVzW3RpbGVJRC5vdmVyc2NhbGVkWl0gPSB7fTtcbiAgICAgICAgfVxuICAgICAgICB0aGlzLmluZGV4ZXNbdGlsZUlELm92ZXJzY2FsZWRaXVt0aWxlSUQua2V5XSA9IG5ldyBUaWxlTGF5ZXJJbmRleCh0aWxlSUQsIGJ1Y2tldC5zeW1ib2xJbnN0YW5jZXMsIGJ1Y2tldC5idWNrZXRJbnN0YW5jZUlkKTtcblxuICAgICAgICByZXR1cm4gdHJ1ZTtcbiAgICB9XG5cbiAgICByZW1vdmVCdWNrZXRDcm9zc1RpbGVJRHMoem9vbTogc3RyaW5nIHwgbnVtYmVyLCByZW1vdmVkQnVja2V0OiBUaWxlTGF5ZXJJbmRleCkge1xuICAgICAgICBmb3IgKGNvbnN0IGtleSBpbiByZW1vdmVkQnVja2V0LmluZGV4ZWRTeW1ib2xJbnN0YW5jZXMpIHtcbiAgICAgICAgICAgIGZvciAoY29uc3Qgc3ltYm9sSW5zdGFuY2Ugb2YgcmVtb3ZlZEJ1Y2tldC5pbmRleGVkU3ltYm9sSW5zdGFuY2VzWyhrZXk6IGFueSldKSB7XG4gICAgICAgICAgICAgICAgZGVsZXRlIHRoaXMudXNlZENyb3NzVGlsZUlEc1t6b29tXVtzeW1ib2xJbnN0YW5jZS5jcm9zc1RpbGVJRF07XG4gICAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICB9XG5cbiAgICByZW1vdmVTdGFsZUJ1Y2tldHMoY3VycmVudElEczogeyBbc3RyaW5nIHwgbnVtYmVyXTogYm9vbGVhbiB9KSB7XG4gICAgICAgIGxldCB0aWxlc0NoYW5nZWQgPSBmYWxzZTtcbiAgICAgICAgZm9yIChjb25zdCB6IGluIHRoaXMuaW5kZXhlcykge1xuICAgICAgICAgICAgY29uc3Qgem9vbUluZGV4ZXMgPSB0aGlzLmluZGV4ZXNbel07XG4gICAgICAgICAgICBmb3IgKGNvbnN0IHRpbGVLZXkgaW4gem9vbUluZGV4ZXMpIHtcbiAgICAgICAgICAgICAgICBpZiAoIWN1cnJlbnRJRHNbem9vbUluZGV4ZXNbdGlsZUtleV0uYnVja2V0SW5zdGFuY2VJZF0pIHtcbiAgICAgICAgICAgICAgICAgICAgdGhpcy5yZW1vdmVCdWNrZXRDcm9zc1RpbGVJRHMoeiwgem9vbUluZGV4ZXNbdGlsZUtleV0pO1xuICAgICAgICAgICAgICAgICAgICBkZWxldGUgem9vbUluZGV4ZXNbdGlsZUtleV07XG4gICAgICAgICAgICAgICAgICAgIHRpbGVzQ2hhbmdlZCA9IHRydWU7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfVxuICAgICAgICB9XG4gICAgICAgIHJldHVybiB0aWxlc0NoYW5nZWQ7XG4gICAgfVxufVxuXG5jbGFzcyBDcm9zc1RpbGVTeW1ib2xJbmRleCB7XG4gICAgbGF5ZXJJbmRleGVzOiB7W2xheWVySWQ6IHN0cmluZ106IENyb3NzVGlsZVN5bWJvbExheWVySW5kZXh9O1xuICAgIGNyb3NzVGlsZUlEczogQ3Jvc3NUaWxlSURzO1xuICAgIG1heEJ1Y2tldEluc3RhbmNlSWQ6IG51bWJlcjtcbiAgICBidWNrZXRzSW5DdXJyZW50UGxhY2VtZW50OiB7W251bWJlcl06IGJvb2xlYW59O1xuXG4gICAgY29uc3RydWN0b3IoKSB7XG4gICAgICAgIHRoaXMubGF5ZXJJbmRleGVzID0ge307XG4gICAgICAgIHRoaXMuY3Jvc3NUaWxlSURzID0gbmV3IENyb3NzVGlsZUlEcygpO1xuICAgICAgICB0aGlzLm1heEJ1Y2tldEluc3RhbmNlSWQgPSAwO1xuICAgICAgICB0aGlzLmJ1Y2tldHNJbkN1cnJlbnRQbGFjZW1lbnQgPSB7fTtcbiAgICB9XG5cbiAgICBhZGRMYXllcihzdHlsZUxheWVyOiBTdHlsZUxheWVyLCB0aWxlczogQXJyYXk8VGlsZT4sIGxuZzogbnVtYmVyKSB7XG4gICAgICAgIGxldCBsYXllckluZGV4ID0gdGhpcy5sYXllckluZGV4ZXNbc3R5bGVMYXllci5pZF07XG4gICAgICAgIGlmIChsYXllckluZGV4ID09PSB1bmRlZmluZWQpIHtcbiAgICAgICAgICAgIGxheWVySW5kZXggPSB0aGlzLmxheWVySW5kZXhlc1tzdHlsZUxheWVyLmlkXSA9IG5ldyBDcm9zc1RpbGVTeW1ib2xMYXllckluZGV4KCk7XG4gICAgICAgIH1cblxuICAgICAgICBsZXQgc3ltYm9sQnVja2V0c0NoYW5nZWQgPSBmYWxzZTtcbiAgICAgICAgY29uc3QgY3VycmVudEJ1Y2tldElEcyA9IHt9O1xuXG4gICAgICAgIGxheWVySW5kZXguaGFuZGxlV3JhcEp1bXAobG5nKTtcblxuICAgICAgICBmb3IgKGNvbnN0IHRpbGUgb2YgdGlsZXMpIHtcbiAgICAgICAgICAgIGNvbnN0IHN5bWJvbEJ1Y2tldCA9ICgodGlsZS5nZXRCdWNrZXQoc3R5bGVMYXllcik6IGFueSk6IFN5bWJvbEJ1Y2tldCk7XG4gICAgICAgICAgICBpZiAoIXN5bWJvbEJ1Y2tldCB8fCBzdHlsZUxheWVyLmlkICE9PSBzeW1ib2xCdWNrZXQubGF5ZXJJZHNbMF0pXG4gICAgICAgICAgICAgICAgY29udGludWU7XG5cbiAgICAgICAgICAgIGlmICghc3ltYm9sQnVja2V0LmJ1Y2tldEluc3RhbmNlSWQpIHtcbiAgICAgICAgICAgICAgICBzeW1ib2xCdWNrZXQuYnVja2V0SW5zdGFuY2VJZCA9ICsrdGhpcy5tYXhCdWNrZXRJbnN0YW5jZUlkO1xuICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICBpZiAobGF5ZXJJbmRleC5hZGRCdWNrZXQodGlsZS50aWxlSUQsIHN5bWJvbEJ1Y2tldCwgdGhpcy5jcm9zc1RpbGVJRHMpKSB7XG4gICAgICAgICAgICAgICAgc3ltYm9sQnVja2V0c0NoYW5nZWQgPSB0cnVlO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgY3VycmVudEJ1Y2tldElEc1tzeW1ib2xCdWNrZXQuYnVja2V0SW5zdGFuY2VJZF0gPSB0cnVlO1xuICAgICAgICB9XG5cbiAgICAgICAgaWYgKGxheWVySW5kZXgucmVtb3ZlU3RhbGVCdWNrZXRzKGN1cnJlbnRCdWNrZXRJRHMpKSB7XG4gICAgICAgICAgICBzeW1ib2xCdWNrZXRzQ2hhbmdlZCA9IHRydWU7XG4gICAgICAgIH1cblxuICAgICAgICByZXR1cm4gc3ltYm9sQnVja2V0c0NoYW5nZWQ7XG4gICAgfVxuXG4gICAgcHJ1bmVVbnVzZWRMYXllcnModXNlZExheWVyczogQXJyYXk8c3RyaW5nPikge1xuICAgICAgICBjb25zdCB1c2VkTGF5ZXJNYXAgPSB7fTtcbiAgICAgICAgdXNlZExheWVycy5mb3JFYWNoKCh1c2VkTGF5ZXIpID0+IHtcbiAgICAgICAgICAgIHVzZWRMYXllck1hcFt1c2VkTGF5ZXJdID0gdHJ1ZTtcbiAgICAgICAgfSk7XG4gICAgICAgIGZvciAoY29uc3QgbGF5ZXJJZCBpbiB0aGlzLmxheWVySW5kZXhlcykge1xuICAgICAgICAgICAgaWYgKCF1c2VkTGF5ZXJNYXBbbGF5ZXJJZF0pIHtcbiAgICAgICAgICAgICAgICBkZWxldGUgdGhpcy5sYXllckluZGV4ZXNbbGF5ZXJJZF07XG4gICAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICB9XG59XG5cbmV4cG9ydCBkZWZhdWx0IENyb3NzVGlsZVN5bWJvbEluZGV4O1xuIiwiLy8gQGZsb3dcblxuaW1wb3J0IGFzc2VydCBmcm9tICdhc3NlcnQnO1xuXG5pbXBvcnQgeyBFdmVudCwgRXJyb3JFdmVudCwgRXZlbnRlZCB9IGZyb20gJy4uL3V0aWwvZXZlbnRlZCc7XG5pbXBvcnQgU3R5bGVMYXllciBmcm9tICcuL3N0eWxlX2xheWVyJztcbmltcG9ydCBjcmVhdGVTdHlsZUxheWVyIGZyb20gJy4vY3JlYXRlX3N0eWxlX2xheWVyJztcbmltcG9ydCBsb2FkU3ByaXRlIGZyb20gJy4vbG9hZF9zcHJpdGUnO1xuaW1wb3J0IEltYWdlTWFuYWdlciBmcm9tICcuLi9yZW5kZXIvaW1hZ2VfbWFuYWdlcic7XG5pbXBvcnQgR2x5cGhNYW5hZ2VyIGZyb20gJy4uL3JlbmRlci9nbHlwaF9tYW5hZ2VyJztcbmltcG9ydCBMaWdodCBmcm9tICcuL2xpZ2h0JztcbmltcG9ydCBMaW5lQXRsYXMgZnJvbSAnLi4vcmVuZGVyL2xpbmVfYXRsYXMnO1xuaW1wb3J0IHsgcGljaywgY2xvbmUsIGV4dGVuZCwgZGVlcEVxdWFsLCBmaWx0ZXJPYmplY3QsIG1hcE9iamVjdCB9IGZyb20gJy4uL3V0aWwvdXRpbCc7XG5pbXBvcnQgeyBnZXRKU09OLCBSZXNvdXJjZVR5cGUgfSBmcm9tICcuLi91dGlsL2FqYXgnO1xuaW1wb3J0IHsgaXNNYXBib3hVUkwsIG5vcm1hbGl6ZVN0eWxlVVJMIH0gZnJvbSAnLi4vdXRpbC9tYXBib3gnO1xuaW1wb3J0IGJyb3dzZXIgZnJvbSAnLi4vdXRpbC9icm93c2VyJztcbmltcG9ydCBEaXNwYXRjaGVyIGZyb20gJy4uL3V0aWwvZGlzcGF0Y2hlcic7XG5pbXBvcnQgeyB2YWxpZGF0ZVN0eWxlLCBlbWl0VmFsaWRhdGlvbkVycm9ycyBhcyBfZW1pdFZhbGlkYXRpb25FcnJvcnMgfSBmcm9tICcuL3ZhbGlkYXRlX3N0eWxlJztcbmltcG9ydCB7XG4gICAgZ2V0VHlwZSBhcyBnZXRTb3VyY2VUeXBlLFxuICAgIHNldFR5cGUgYXMgc2V0U291cmNlVHlwZSxcbiAgICB0eXBlIFNvdXJjZUNsYXNzXG59IGZyb20gJy4uL3NvdXJjZS9zb3VyY2UnO1xuaW1wb3J0IHsgcXVlcnlSZW5kZXJlZEZlYXR1cmVzLCBxdWVyeVJlbmRlcmVkU3ltYm9scywgcXVlcnlTb3VyY2VGZWF0dXJlcyB9IGZyb20gJy4uL3NvdXJjZS9xdWVyeV9mZWF0dXJlcyc7XG5pbXBvcnQgU291cmNlQ2FjaGUgZnJvbSAnLi4vc291cmNlL3NvdXJjZV9jYWNoZSc7XG5pbXBvcnQgR2VvSlNPTlNvdXJjZSBmcm9tICcuLi9zb3VyY2UvZ2VvanNvbl9zb3VyY2UnO1xuaW1wb3J0IHN0eWxlU3BlYyBmcm9tICcuLi9zdHlsZS1zcGVjL3JlZmVyZW5jZS9sYXRlc3QnO1xuaW1wb3J0IGdldFdvcmtlclBvb2wgZnJvbSAnLi4vdXRpbC9nbG9iYWxfd29ya2VyX3Bvb2wnO1xuaW1wb3J0IGRlcmVmIGZyb20gJy4uL3N0eWxlLXNwZWMvZGVyZWYnO1xuaW1wb3J0IGRpZmZTdHlsZXMsIHtvcGVyYXRpb25zIGFzIGRpZmZPcGVyYXRpb25zfSBmcm9tICcuLi9zdHlsZS1zcGVjL2RpZmYnO1xuaW1wb3J0IHtcbiAgICByZWdpc3RlckZvclBsdWdpbkF2YWlsYWJpbGl0eSxcbiAgICBldmVudGVkIGFzIHJ0bFRleHRQbHVnaW5FdmVudGVkXG59IGZyb20gJy4uL3NvdXJjZS9ydGxfdGV4dF9wbHVnaW4nO1xuaW1wb3J0IFBhdXNlYWJsZVBsYWNlbWVudCBmcm9tICcuL3BhdXNlYWJsZV9wbGFjZW1lbnQnO1xuaW1wb3J0IFpvb21IaXN0b3J5IGZyb20gJy4vem9vbV9oaXN0b3J5JztcbmltcG9ydCBDcm9zc1RpbGVTeW1ib2xJbmRleCBmcm9tICcuLi9zeW1ib2wvY3Jvc3NfdGlsZV9zeW1ib2xfaW5kZXgnO1xuXG4vLyBXZSdyZSBza2lwcGluZyB2YWxpZGF0aW9uIGVycm9ycyB3aXRoIHRoZSBgc291cmNlLmNhbnZhc2AgaWRlbnRpZmllciBpbiBvcmRlclxuLy8gdG8gY29udGludWUgdG8gYWxsb3cgY2FudmFzIHNvdXJjZXMgdG8gYmUgYWRkZWQgYXQgcnVudGltZS91cGRhdGVkIGluXG4vLyBzbWFydCBzZXRTdHlsZSAoc2VlIGh0dHBzOi8vZ2l0aHViLmNvbS9tYXBib3gvbWFwYm94LWdsLWpzL3B1bGwvNjQyNCk6XG5jb25zdCBlbWl0VmFsaWRhdGlvbkVycm9ycyA9IChldmVudGVkOiBFdmVudGVkLCBlcnJvcnM6ID8kUmVhZE9ubHlBcnJheTx7bWVzc2FnZTogc3RyaW5nLCBpZGVudGlmaWVyPzogc3RyaW5nfT4pID0+XG4gICAgX2VtaXRWYWxpZGF0aW9uRXJyb3JzKGV2ZW50ZWQsIGVycm9ycyAmJiBlcnJvcnMuZmlsdGVyKGVycm9yID0+IGVycm9yLmlkZW50aWZpZXIgIT09ICdzb3VyY2UuY2FudmFzJykpO1xuXG5pbXBvcnQgdHlwZSBNYXAgZnJvbSAnLi4vdWkvbWFwJztcbmltcG9ydCB0eXBlIFRyYW5zZm9ybSBmcm9tICcuLi9nZW8vdHJhbnNmb3JtJztcbmltcG9ydCB0eXBlIHtTdHlsZUltYWdlfSBmcm9tICcuL3N0eWxlX2ltYWdlJztcbmltcG9ydCB0eXBlIHtTdHlsZUdseXBofSBmcm9tICcuL3N0eWxlX2dseXBoJztcbmltcG9ydCB0eXBlIHtDYWxsYmFja30gZnJvbSAnLi4vdHlwZXMvY2FsbGJhY2snO1xuaW1wb3J0IHR5cGUgRXZhbHVhdGlvblBhcmFtZXRlcnMgZnJvbSAnLi9ldmFsdWF0aW9uX3BhcmFtZXRlcnMnO1xuaW1wb3J0IHR5cGUge1BsYWNlbWVudH0gZnJvbSAnLi4vc3ltYm9sL3BsYWNlbWVudCc7XG5pbXBvcnQgdHlwZSB7Q2FuY2VsYWJsZX0gZnJvbSAnLi4vdHlwZXMvY2FuY2VsYWJsZSc7XG5pbXBvcnQgdHlwZSB7R2VvSlNPTn0gZnJvbSAnQG1hcGJveC9nZW9qc29uLXR5cGVzJztcbmltcG9ydCB0eXBlIHtcbiAgICBMYXllclNwZWNpZmljYXRpb24sXG4gICAgRmlsdGVyU3BlY2lmaWNhdGlvbixcbiAgICBTdHlsZVNwZWNpZmljYXRpb24sXG4gICAgTGlnaHRTcGVjaWZpY2F0aW9uLFxuICAgIFNvdXJjZVNwZWNpZmljYXRpb25cbn0gZnJvbSAnLi4vc3R5bGUtc3BlYy90eXBlcyc7XG5cbmNvbnN0IHN1cHBvcnRlZERpZmZPcGVyYXRpb25zID0gcGljayhkaWZmT3BlcmF0aW9ucywgW1xuICAgICdhZGRMYXllcicsXG4gICAgJ3JlbW92ZUxheWVyJyxcbiAgICAnc2V0UGFpbnRQcm9wZXJ0eScsXG4gICAgJ3NldExheW91dFByb3BlcnR5JyxcbiAgICAnc2V0RmlsdGVyJyxcbiAgICAnYWRkU291cmNlJyxcbiAgICAncmVtb3ZlU291cmNlJyxcbiAgICAnc2V0TGF5ZXJab29tUmFuZ2UnLFxuICAgICdzZXRMaWdodCcsXG4gICAgJ3NldFRyYW5zaXRpb24nLFxuICAgICdzZXRHZW9KU09OU291cmNlRGF0YSdcbiAgICAvLyAnc2V0R2x5cGhzJyxcbiAgICAvLyAnc2V0U3ByaXRlJyxcbl0pO1xuXG5jb25zdCBpZ25vcmVkRGlmZk9wZXJhdGlvbnMgPSBwaWNrKGRpZmZPcGVyYXRpb25zLCBbXG4gICAgJ3NldENlbnRlcicsXG4gICAgJ3NldFpvb20nLFxuICAgICdzZXRCZWFyaW5nJyxcbiAgICAnc2V0UGl0Y2gnXG5dKTtcblxuZXhwb3J0IHR5cGUgU3R5bGVPcHRpb25zID0ge1xuICAgIHZhbGlkYXRlPzogYm9vbGVhbixcbiAgICBsb2NhbElkZW9ncmFwaEZvbnRGYW1pbHk/OiBzdHJpbmdcbn07XG5cbi8qKlxuICogQHByaXZhdGVcbiAqL1xuY2xhc3MgU3R5bGUgZXh0ZW5kcyBFdmVudGVkIHtcbiAgICBtYXA6IE1hcDtcbiAgICBzdHlsZXNoZWV0OiBTdHlsZVNwZWNpZmljYXRpb247XG4gICAgZGlzcGF0Y2hlcjogRGlzcGF0Y2hlcjtcbiAgICBpbWFnZU1hbmFnZXI6IEltYWdlTWFuYWdlcjtcbiAgICBnbHlwaE1hbmFnZXI6IEdseXBoTWFuYWdlcjtcbiAgICBsaW5lQXRsYXM6IExpbmVBdGxhcztcbiAgICBsaWdodDogTGlnaHQ7XG5cbiAgICBfcmVxdWVzdDogP0NhbmNlbGFibGU7XG4gICAgX3Nwcml0ZVJlcXVlc3Q6ID9DYW5jZWxhYmxlO1xuICAgIF9sYXllcnM6IHtbc3RyaW5nXTogU3R5bGVMYXllcn07XG4gICAgX29yZGVyOiBBcnJheTxzdHJpbmc+O1xuICAgIHNvdXJjZUNhY2hlczoge1tzdHJpbmddOiBTb3VyY2VDYWNoZX07XG4gICAgem9vbUhpc3Rvcnk6IFpvb21IaXN0b3J5O1xuICAgIF9sb2FkZWQ6IGJvb2xlYW47XG4gICAgX3J0bFRleHRQbHVnaW5DYWxsYmFjazogRnVuY3Rpb247XG4gICAgX2NoYW5nZWQ6IGJvb2xlYW47XG4gICAgX3VwZGF0ZWRTb3VyY2VzOiB7W3N0cmluZ106ICdjbGVhcicgfCAncmVsb2FkJ307XG4gICAgX3VwZGF0ZWRMYXllcnM6IHtbc3RyaW5nXTogdHJ1ZX07XG4gICAgX3JlbW92ZWRMYXllcnM6IHtbc3RyaW5nXTogU3R5bGVMYXllcn07XG4gICAgX3VwZGF0ZWRQYWludFByb3BzOiB7W2xheWVyOiBzdHJpbmddOiB0cnVlfTtcbiAgICBfbGF5ZXJPcmRlckNoYW5nZWQ6IGJvb2xlYW47XG5cbiAgICBjcm9zc1RpbGVTeW1ib2xJbmRleDogQ3Jvc3NUaWxlU3ltYm9sSW5kZXg7XG4gICAgcGF1c2VhYmxlUGxhY2VtZW50OiBQYXVzZWFibGVQbGFjZW1lbnQ7XG4gICAgcGxhY2VtZW50OiBQbGFjZW1lbnQ7XG4gICAgejogbnVtYmVyO1xuXG4gICAgLy8gZXhwb3NlZCB0byBhbGxvdyBzdHViYmluZyBieSB1bml0IHRlc3RzXG4gICAgc3RhdGljIGdldFNvdXJjZVR5cGU6IHR5cGVvZiBnZXRTb3VyY2VUeXBlO1xuICAgIHN0YXRpYyBzZXRTb3VyY2VUeXBlOiB0eXBlb2Ygc2V0U291cmNlVHlwZTtcbiAgICBzdGF0aWMgcmVnaXN0ZXJGb3JQbHVnaW5BdmFpbGFiaWxpdHk6IHR5cGVvZiByZWdpc3RlckZvclBsdWdpbkF2YWlsYWJpbGl0eTtcblxuICAgIGNvbnN0cnVjdG9yKG1hcDogTWFwLCBvcHRpb25zOiBTdHlsZU9wdGlvbnMgPSB7fSkge1xuICAgICAgICBzdXBlcigpO1xuXG4gICAgICAgIHRoaXMubWFwID0gbWFwO1xuICAgICAgICB0aGlzLmRpc3BhdGNoZXIgPSBuZXcgRGlzcGF0Y2hlcihnZXRXb3JrZXJQb29sKCksIHRoaXMpO1xuICAgICAgICB0aGlzLmltYWdlTWFuYWdlciA9IG5ldyBJbWFnZU1hbmFnZXIoKTtcbiAgICAgICAgdGhpcy5nbHlwaE1hbmFnZXIgPSBuZXcgR2x5cGhNYW5hZ2VyKG1hcC5fdHJhbnNmb3JtUmVxdWVzdCwgb3B0aW9ucy5sb2NhbElkZW9ncmFwaEZvbnRGYW1pbHkpO1xuICAgICAgICB0aGlzLmxpbmVBdGxhcyA9IG5ldyBMaW5lQXRsYXMoMjU2LCA1MTIpO1xuICAgICAgICB0aGlzLmNyb3NzVGlsZVN5bWJvbEluZGV4ID0gbmV3IENyb3NzVGlsZVN5bWJvbEluZGV4KCk7XG5cbiAgICAgICAgdGhpcy5fbGF5ZXJzID0ge307XG4gICAgICAgIHRoaXMuX29yZGVyICA9IFtdO1xuICAgICAgICB0aGlzLnNvdXJjZUNhY2hlcyA9IHt9O1xuICAgICAgICB0aGlzLnpvb21IaXN0b3J5ID0gbmV3IFpvb21IaXN0b3J5KCk7XG4gICAgICAgIHRoaXMuX2xvYWRlZCA9IGZhbHNlO1xuXG4gICAgICAgIHRoaXMuX3Jlc2V0VXBkYXRlcygpO1xuXG4gICAgICAgIGNvbnN0IHNlbGYgPSB0aGlzO1xuICAgICAgICB0aGlzLl9ydGxUZXh0UGx1Z2luQ2FsbGJhY2sgPSBTdHlsZS5yZWdpc3RlckZvclBsdWdpbkF2YWlsYWJpbGl0eSgoYXJncykgPT4ge1xuICAgICAgICAgICAgc2VsZi5kaXNwYXRjaGVyLmJyb2FkY2FzdCgnbG9hZFJUTFRleHRQbHVnaW4nLCBhcmdzLnBsdWdpblVSTCwgYXJncy5jb21wbGV0aW9uQ2FsbGJhY2spO1xuICAgICAgICAgICAgZm9yIChjb25zdCBpZCBpbiBzZWxmLnNvdXJjZUNhY2hlcykge1xuICAgICAgICAgICAgICAgIHNlbGYuc291cmNlQ2FjaGVzW2lkXS5yZWxvYWQoKTsgLy8gU2hvdWxkIGJlIGEgbm8tb3AgaWYgdGhlIHBsdWdpbiBsb2FkcyBiZWZvcmUgYW55IHRpbGVzIGxvYWRcbiAgICAgICAgICAgIH1cbiAgICAgICAgfSk7XG5cbiAgICAgICAgdGhpcy5vbignZGF0YScsIChldmVudCkgPT4ge1xuICAgICAgICAgICAgaWYgKGV2ZW50LmRhdGFUeXBlICE9PSAnc291cmNlJyB8fCBldmVudC5zb3VyY2VEYXRhVHlwZSAhPT0gJ21ldGFkYXRhJykge1xuICAgICAgICAgICAgICAgIHJldHVybjtcbiAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgY29uc3Qgc291cmNlQ2FjaGUgPSB0aGlzLnNvdXJjZUNhY2hlc1tldmVudC5zb3VyY2VJZF07XG4gICAgICAgICAgICBpZiAoIXNvdXJjZUNhY2hlKSB7XG4gICAgICAgICAgICAgICAgcmV0dXJuO1xuICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICBjb25zdCBzb3VyY2UgPSBzb3VyY2VDYWNoZS5nZXRTb3VyY2UoKTtcbiAgICAgICAgICAgIGlmICghc291cmNlIHx8ICFzb3VyY2UudmVjdG9yTGF5ZXJJZHMpIHtcbiAgICAgICAgICAgICAgICByZXR1cm47XG4gICAgICAgICAgICB9XG5cbiAgICAgICAgICAgIGZvciAoY29uc3QgbGF5ZXJJZCBpbiB0aGlzLl9sYXllcnMpIHtcbiAgICAgICAgICAgICAgICBjb25zdCBsYXllciA9IHRoaXMuX2xheWVyc1tsYXllcklkXTtcbiAgICAgICAgICAgICAgICBpZiAobGF5ZXIuc291cmNlID09PSBzb3VyY2UuaWQpIHtcbiAgICAgICAgICAgICAgICAgICAgdGhpcy5fdmFsaWRhdGVMYXllcihsYXllcik7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfVxuICAgICAgICB9KTtcbiAgICB9XG5cbiAgICBsb2FkVVJMKHVybDogc3RyaW5nLCBvcHRpb25zOiB7XG4gICAgICAgIHZhbGlkYXRlPzogYm9vbGVhbixcbiAgICAgICAgYWNjZXNzVG9rZW4/OiBzdHJpbmdcbiAgICB9ID0ge30pIHtcbiAgICAgICAgdGhpcy5maXJlKG5ldyBFdmVudCgnZGF0YWxvYWRpbmcnLCB7ZGF0YVR5cGU6ICdzdHlsZSd9KSk7XG5cbiAgICAgICAgY29uc3QgdmFsaWRhdGUgPSB0eXBlb2Ygb3B0aW9ucy52YWxpZGF0ZSA9PT0gJ2Jvb2xlYW4nID9cbiAgICAgICAgICAgIG9wdGlvbnMudmFsaWRhdGUgOiAhaXNNYXBib3hVUkwodXJsKTtcblxuICAgICAgICB1cmwgPSBub3JtYWxpemVTdHlsZVVSTCh1cmwsIG9wdGlvbnMuYWNjZXNzVG9rZW4pO1xuICAgICAgICBjb25zdCByZXF1ZXN0ID0gdGhpcy5tYXAuX3RyYW5zZm9ybVJlcXVlc3QodXJsLCBSZXNvdXJjZVR5cGUuU3R5bGUpO1xuXG4gICAgICAgIHRoaXMuX3JlcXVlc3QgPSBnZXRKU09OKHJlcXVlc3QsIChlcnJvciwganNvbikgPT4ge1xuICAgICAgICAgICAgdGhpcy5fcmVxdWVzdCA9IG51bGw7XG4gICAgICAgICAgICBpZiAoZXJyb3IpIHtcbiAgICAgICAgICAgICAgICB0aGlzLmZpcmUobmV3IEVycm9yRXZlbnQoZXJyb3IpKTtcbiAgICAgICAgICAgIH0gZWxzZSBpZiAoanNvbikge1xuICAgICAgICAgICAgICAgIHRoaXMuX2xvYWQoKGpzb246IGFueSksIHZhbGlkYXRlKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfSk7XG4gICAgfVxuXG4gICAgbG9hZEpTT04oanNvbjogU3R5bGVTcGVjaWZpY2F0aW9uLCBvcHRpb25zOiB7XG4gICAgICAgIHZhbGlkYXRlPzogYm9vbGVhblxuICAgIH0gPSB7fSkge1xuICAgICAgICB0aGlzLmZpcmUobmV3IEV2ZW50KCdkYXRhbG9hZGluZycsIHtkYXRhVHlwZTogJ3N0eWxlJ30pKTtcblxuICAgICAgICB0aGlzLl9yZXF1ZXN0ID0gYnJvd3Nlci5mcmFtZSgoKSA9PiB7XG4gICAgICAgICAgICB0aGlzLl9yZXF1ZXN0ID0gbnVsbDtcbiAgICAgICAgICAgIHRoaXMuX2xvYWQoanNvbiwgb3B0aW9ucy52YWxpZGF0ZSAhPT0gZmFsc2UpO1xuICAgICAgICB9KTtcbiAgICB9XG5cbiAgICBfbG9hZChqc29uOiBTdHlsZVNwZWNpZmljYXRpb24sIHZhbGlkYXRlOiBib29sZWFuKSB7XG4gICAgICAgIGlmICh2YWxpZGF0ZSAmJiBlbWl0VmFsaWRhdGlvbkVycm9ycyh0aGlzLCB2YWxpZGF0ZVN0eWxlKGpzb24pKSkge1xuICAgICAgICAgICAgcmV0dXJuO1xuICAgICAgICB9XG5cbiAgICAgICAgdGhpcy5fbG9hZGVkID0gdHJ1ZTtcbiAgICAgICAgdGhpcy5zdHlsZXNoZWV0ID0ganNvbjtcblxuICAgICAgICBmb3IgKGNvbnN0IGlkIGluIGpzb24uc291cmNlcykge1xuICAgICAgICAgICAgdGhpcy5hZGRTb3VyY2UoaWQsIGpzb24uc291cmNlc1tpZF0sIHt2YWxpZGF0ZTogZmFsc2V9KTtcbiAgICAgICAgfVxuXG4gICAgICAgIGlmIChqc29uLnNwcml0ZSkge1xuICAgICAgICAgICAgdGhpcy5fc3ByaXRlUmVxdWVzdCA9IGxvYWRTcHJpdGUoanNvbi5zcHJpdGUsIHRoaXMubWFwLl90cmFuc2Zvcm1SZXF1ZXN0LCAoZXJyLCBpbWFnZXMpID0+IHtcbiAgICAgICAgICAgICAgICB0aGlzLl9zcHJpdGVSZXF1ZXN0ID0gbnVsbDtcbiAgICAgICAgICAgICAgICBpZiAoZXJyKSB7XG4gICAgICAgICAgICAgICAgICAgIHRoaXMuZmlyZShuZXcgRXJyb3JFdmVudChlcnIpKTtcbiAgICAgICAgICAgICAgICB9IGVsc2UgaWYgKGltYWdlcykge1xuICAgICAgICAgICAgICAgICAgICBmb3IgKGNvbnN0IGlkIGluIGltYWdlcykge1xuICAgICAgICAgICAgICAgICAgICAgICAgdGhpcy5pbWFnZU1hbmFnZXIuYWRkSW1hZ2UoaWQsIGltYWdlc1tpZF0pO1xuICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICAgICAgdGhpcy5pbWFnZU1hbmFnZXIuc2V0TG9hZGVkKHRydWUpO1xuICAgICAgICAgICAgICAgIHRoaXMuZmlyZShuZXcgRXZlbnQoJ2RhdGEnLCB7ZGF0YVR5cGU6ICdzdHlsZSd9KSk7XG4gICAgICAgICAgICB9KTtcbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgIHRoaXMuaW1hZ2VNYW5hZ2VyLnNldExvYWRlZCh0cnVlKTtcbiAgICAgICAgfVxuXG4gICAgICAgIHRoaXMuZ2x5cGhNYW5hZ2VyLnNldFVSTChqc29uLmdseXBocyk7XG5cbiAgICAgICAgY29uc3QgbGF5ZXJzID0gZGVyZWYodGhpcy5zdHlsZXNoZWV0LmxheWVycyk7XG5cbiAgICAgICAgdGhpcy5fb3JkZXIgPSBsYXllcnMubWFwKChsYXllcikgPT4gbGF5ZXIuaWQpO1xuXG4gICAgICAgIHRoaXMuX2xheWVycyA9IHt9O1xuICAgICAgICBmb3IgKGxldCBsYXllciBvZiBsYXllcnMpIHtcbiAgICAgICAgICAgIGxheWVyID0gY3JlYXRlU3R5bGVMYXllcihsYXllcik7XG4gICAgICAgICAgICBsYXllci5zZXRFdmVudGVkUGFyZW50KHRoaXMsIHtsYXllcjoge2lkOiBsYXllci5pZH19KTtcbiAgICAgICAgICAgIHRoaXMuX2xheWVyc1tsYXllci5pZF0gPSBsYXllcjtcbiAgICAgICAgfVxuXG4gICAgICAgIHRoaXMuZGlzcGF0Y2hlci5icm9hZGNhc3QoJ3NldExheWVycycsIHRoaXMuX3NlcmlhbGl6ZUxheWVycyh0aGlzLl9vcmRlcikpO1xuXG4gICAgICAgIHRoaXMubGlnaHQgPSBuZXcgTGlnaHQodGhpcy5zdHlsZXNoZWV0LmxpZ2h0KTtcblxuICAgICAgICB0aGlzLmZpcmUobmV3IEV2ZW50KCdkYXRhJywge2RhdGFUeXBlOiAnc3R5bGUnfSkpO1xuICAgICAgICB0aGlzLmZpcmUobmV3IEV2ZW50KCdzdHlsZS5sb2FkJykpO1xuICAgIH1cblxuICAgIF92YWxpZGF0ZUxheWVyKGxheWVyOiBTdHlsZUxheWVyKSB7XG4gICAgICAgIGNvbnN0IHNvdXJjZUNhY2hlID0gdGhpcy5zb3VyY2VDYWNoZXNbbGF5ZXIuc291cmNlXTtcbiAgICAgICAgaWYgKCFzb3VyY2VDYWNoZSkge1xuICAgICAgICAgICAgcmV0dXJuO1xuICAgICAgICB9XG5cbiAgICAgICAgY29uc3Qgc291cmNlTGF5ZXIgPSBsYXllci5zb3VyY2VMYXllcjtcbiAgICAgICAgaWYgKCFzb3VyY2VMYXllcikge1xuICAgICAgICAgICAgcmV0dXJuO1xuICAgICAgICB9XG5cbiAgICAgICAgY29uc3Qgc291cmNlID0gc291cmNlQ2FjaGUuZ2V0U291cmNlKCk7XG4gICAgICAgIGlmIChzb3VyY2UudHlwZSA9PT0gJ2dlb2pzb24nIHx8IChzb3VyY2UudmVjdG9yTGF5ZXJJZHMgJiYgc291cmNlLnZlY3RvckxheWVySWRzLmluZGV4T2Yoc291cmNlTGF5ZXIpID09PSAtMSkpIHtcbiAgICAgICAgICAgIHRoaXMuZmlyZShuZXcgRXJyb3JFdmVudChuZXcgRXJyb3IoXG4gICAgICAgICAgICAgICAgYFNvdXJjZSBsYXllciBcIiR7c291cmNlTGF5ZXJ9XCIgYCArXG4gICAgICAgICAgICAgICAgYGRvZXMgbm90IGV4aXN0IG9uIHNvdXJjZSBcIiR7c291cmNlLmlkfVwiIGAgK1xuICAgICAgICAgICAgICAgIGBhcyBzcGVjaWZpZWQgYnkgc3R5bGUgbGF5ZXIgXCIke2xheWVyLmlkfVwiYFxuICAgICAgICAgICAgKSkpO1xuICAgICAgICB9XG4gICAgfVxuXG4gICAgbG9hZGVkKCkge1xuICAgICAgICBpZiAoIXRoaXMuX2xvYWRlZClcbiAgICAgICAgICAgIHJldHVybiBmYWxzZTtcblxuICAgICAgICBpZiAoT2JqZWN0LmtleXModGhpcy5fdXBkYXRlZFNvdXJjZXMpLmxlbmd0aClcbiAgICAgICAgICAgIHJldHVybiBmYWxzZTtcblxuICAgICAgICBmb3IgKGNvbnN0IGlkIGluIHRoaXMuc291cmNlQ2FjaGVzKVxuICAgICAgICAgICAgaWYgKCF0aGlzLnNvdXJjZUNhY2hlc1tpZF0ubG9hZGVkKCkpXG4gICAgICAgICAgICAgICAgcmV0dXJuIGZhbHNlO1xuXG4gICAgICAgIGlmICghdGhpcy5pbWFnZU1hbmFnZXIuaXNMb2FkZWQoKSlcbiAgICAgICAgICAgIHJldHVybiBmYWxzZTtcblxuICAgICAgICByZXR1cm4gdHJ1ZTtcbiAgICB9XG5cbiAgICBfc2VyaWFsaXplTGF5ZXJzKGlkczogQXJyYXk8c3RyaW5nPik6IEFycmF5PE9iamVjdD4ge1xuICAgICAgICByZXR1cm4gaWRzLm1hcCgoaWQpID0+IHRoaXMuX2xheWVyc1tpZF0uc2VyaWFsaXplKCkpO1xuICAgIH1cblxuICAgIGhhc1RyYW5zaXRpb25zKCkge1xuICAgICAgICBpZiAodGhpcy5saWdodCAmJiB0aGlzLmxpZ2h0Lmhhc1RyYW5zaXRpb24oKSkge1xuICAgICAgICAgICAgcmV0dXJuIHRydWU7XG4gICAgICAgIH1cblxuICAgICAgICBmb3IgKGNvbnN0IGlkIGluIHRoaXMuc291cmNlQ2FjaGVzKSB7XG4gICAgICAgICAgICBpZiAodGhpcy5zb3VyY2VDYWNoZXNbaWRdLmhhc1RyYW5zaXRpb24oKSkge1xuICAgICAgICAgICAgICAgIHJldHVybiB0cnVlO1xuICAgICAgICAgICAgfVxuICAgICAgICB9XG5cbiAgICAgICAgZm9yIChjb25zdCBpZCBpbiB0aGlzLl9sYXllcnMpIHtcbiAgICAgICAgICAgIGlmICh0aGlzLl9sYXllcnNbaWRdLmhhc1RyYW5zaXRpb24oKSkge1xuICAgICAgICAgICAgICAgIHJldHVybiB0cnVlO1xuICAgICAgICAgICAgfVxuICAgICAgICB9XG5cbiAgICAgICAgcmV0dXJuIGZhbHNlO1xuICAgIH1cblxuICAgIF9jaGVja0xvYWRlZCgpIHtcbiAgICAgICAgaWYgKCF0aGlzLl9sb2FkZWQpIHtcbiAgICAgICAgICAgIHRocm93IG5ldyBFcnJvcignU3R5bGUgaXMgbm90IGRvbmUgbG9hZGluZycpO1xuICAgICAgICB9XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogQXBwbHkgcXVldWVkIHN0eWxlIHVwZGF0ZXMgaW4gYSBiYXRjaCBhbmQgcmVjYWxjdWxhdGUgem9vbS1kZXBlbmRlbnQgcGFpbnQgcHJvcGVydGllcy5cbiAgICAgKi9cbiAgICB1cGRhdGUocGFyYW1ldGVyczogRXZhbHVhdGlvblBhcmFtZXRlcnMpIHtcbiAgICAgICAgaWYgKCF0aGlzLl9sb2FkZWQpIHtcbiAgICAgICAgICAgIHJldHVybjtcbiAgICAgICAgfVxuXG4gICAgICAgIGlmICh0aGlzLl9jaGFuZ2VkKSB7XG4gICAgICAgICAgICBjb25zdCB1cGRhdGVkSWRzID0gT2JqZWN0LmtleXModGhpcy5fdXBkYXRlZExheWVycyk7XG4gICAgICAgICAgICBjb25zdCByZW1vdmVkSWRzID0gT2JqZWN0LmtleXModGhpcy5fcmVtb3ZlZExheWVycyk7XG5cbiAgICAgICAgICAgIGlmICh1cGRhdGVkSWRzLmxlbmd0aCB8fCByZW1vdmVkSWRzLmxlbmd0aCkge1xuICAgICAgICAgICAgICAgIHRoaXMuX3VwZGF0ZVdvcmtlckxheWVycyh1cGRhdGVkSWRzLCByZW1vdmVkSWRzKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGZvciAoY29uc3QgaWQgaW4gdGhpcy5fdXBkYXRlZFNvdXJjZXMpIHtcbiAgICAgICAgICAgICAgICBjb25zdCBhY3Rpb24gPSB0aGlzLl91cGRhdGVkU291cmNlc1tpZF07XG4gICAgICAgICAgICAgICAgYXNzZXJ0KGFjdGlvbiA9PT0gJ3JlbG9hZCcgfHwgYWN0aW9uID09PSAnY2xlYXInKTtcbiAgICAgICAgICAgICAgICBpZiAoYWN0aW9uID09PSAncmVsb2FkJykge1xuICAgICAgICAgICAgICAgICAgICB0aGlzLl9yZWxvYWRTb3VyY2UoaWQpO1xuICAgICAgICAgICAgICAgIH0gZWxzZSBpZiAoYWN0aW9uID09PSAnY2xlYXInKSB7XG4gICAgICAgICAgICAgICAgICAgIHRoaXMuX2NsZWFyU291cmNlKGlkKTtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9XG5cbiAgICAgICAgICAgIGZvciAoY29uc3QgaWQgaW4gdGhpcy5fdXBkYXRlZFBhaW50UHJvcHMpIHtcbiAgICAgICAgICAgICAgICB0aGlzLl9sYXllcnNbaWRdLnVwZGF0ZVRyYW5zaXRpb25zKHBhcmFtZXRlcnMpO1xuICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICB0aGlzLmxpZ2h0LnVwZGF0ZVRyYW5zaXRpb25zKHBhcmFtZXRlcnMpO1xuXG4gICAgICAgICAgICB0aGlzLl9yZXNldFVwZGF0ZXMoKTtcblxuICAgICAgICAgICAgdGhpcy5maXJlKG5ldyBFdmVudCgnZGF0YScsIHtkYXRhVHlwZTogJ3N0eWxlJ30pKTtcbiAgICAgICAgfVxuXG4gICAgICAgIGZvciAoY29uc3Qgc291cmNlSWQgaW4gdGhpcy5zb3VyY2VDYWNoZXMpIHtcbiAgICAgICAgICAgIHRoaXMuc291cmNlQ2FjaGVzW3NvdXJjZUlkXS51c2VkID0gZmFsc2U7XG4gICAgICAgIH1cblxuICAgICAgICBmb3IgKGNvbnN0IGxheWVySWQgb2YgdGhpcy5fb3JkZXIpIHtcbiAgICAgICAgICAgIGNvbnN0IGxheWVyID0gdGhpcy5fbGF5ZXJzW2xheWVySWRdO1xuXG4gICAgICAgICAgICBsYXllci5yZWNhbGN1bGF0ZShwYXJhbWV0ZXJzKTtcbiAgICAgICAgICAgIGlmICghbGF5ZXIuaXNIaWRkZW4ocGFyYW1ldGVycy56b29tKSAmJiBsYXllci5zb3VyY2UpIHtcbiAgICAgICAgICAgICAgICB0aGlzLnNvdXJjZUNhY2hlc1tsYXllci5zb3VyY2VdLnVzZWQgPSB0cnVlO1xuICAgICAgICAgICAgfVxuICAgICAgICB9XG5cbiAgICAgICAgdGhpcy5saWdodC5yZWNhbGN1bGF0ZShwYXJhbWV0ZXJzKTtcbiAgICAgICAgdGhpcy56ID0gcGFyYW1ldGVycy56b29tO1xuICAgIH1cblxuICAgIF91cGRhdGVXb3JrZXJMYXllcnModXBkYXRlZElkczogQXJyYXk8c3RyaW5nPiwgcmVtb3ZlZElkczogQXJyYXk8c3RyaW5nPikge1xuICAgICAgICB0aGlzLmRpc3BhdGNoZXIuYnJvYWRjYXN0KCd1cGRhdGVMYXllcnMnLCB7XG4gICAgICAgICAgICBsYXllcnM6IHRoaXMuX3NlcmlhbGl6ZUxheWVycyh1cGRhdGVkSWRzKSxcbiAgICAgICAgICAgIHJlbW92ZWRJZHM6IHJlbW92ZWRJZHNcbiAgICAgICAgfSk7XG4gICAgfVxuXG4gICAgX3Jlc2V0VXBkYXRlcygpIHtcbiAgICAgICAgdGhpcy5fY2hhbmdlZCA9IGZhbHNlO1xuXG4gICAgICAgIHRoaXMuX3VwZGF0ZWRMYXllcnMgPSB7fTtcbiAgICAgICAgdGhpcy5fcmVtb3ZlZExheWVycyA9IHt9O1xuXG4gICAgICAgIHRoaXMuX3VwZGF0ZWRTb3VyY2VzID0ge307XG4gICAgICAgIHRoaXMuX3VwZGF0ZWRQYWludFByb3BzID0ge307XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogVXBkYXRlIHRoaXMgc3R5bGUncyBzdGF0ZSB0byBtYXRjaCB0aGUgZ2l2ZW4gc3R5bGUgSlNPTiwgcGVyZm9ybWluZyBvbmx5XG4gICAgICogdGhlIG5lY2Vzc2FyeSBtdXRhdGlvbnMuXG4gICAgICpcbiAgICAgKiBNYXkgdGhyb3cgYW4gRXJyb3IgKCdVbmltcGxlbWVudGVkOiBNRVRIT0QnKSBpZiB0aGUgbWFwYm94LWdsLXN0eWxlLXNwZWNcbiAgICAgKiBkaWZmIGFsZ29yaXRobSBwcm9kdWNlcyBhbiBvcGVyYXRpb24gdGhhdCBpcyBub3Qgc3VwcG9ydGVkLlxuICAgICAqXG4gICAgICogQHJldHVybnMge2Jvb2xlYW59IHRydWUgaWYgYW55IGNoYW5nZXMgd2VyZSBtYWRlOyBmYWxzZSBvdGhlcndpc2VcbiAgICAgKiBAcHJpdmF0ZVxuICAgICAqL1xuICAgIHNldFN0YXRlKG5leHRTdGF0ZTogU3R5bGVTcGVjaWZpY2F0aW9uKSB7XG4gICAgICAgIHRoaXMuX2NoZWNrTG9hZGVkKCk7XG5cbiAgICAgICAgaWYgKGVtaXRWYWxpZGF0aW9uRXJyb3JzKHRoaXMsIHZhbGlkYXRlU3R5bGUobmV4dFN0YXRlKSkpIHJldHVybiBmYWxzZTtcblxuICAgICAgICBuZXh0U3RhdGUgPSBjbG9uZShuZXh0U3RhdGUpO1xuICAgICAgICBuZXh0U3RhdGUubGF5ZXJzID0gZGVyZWYobmV4dFN0YXRlLmxheWVycyk7XG5cbiAgICAgICAgY29uc3QgY2hhbmdlcyA9IGRpZmZTdHlsZXModGhpcy5zZXJpYWxpemUoKSwgbmV4dFN0YXRlKVxuICAgICAgICAgICAgLmZpbHRlcihvcCA9PiAhKG9wLmNvbW1hbmQgaW4gaWdub3JlZERpZmZPcGVyYXRpb25zKSk7XG5cbiAgICAgICAgaWYgKGNoYW5nZXMubGVuZ3RoID09PSAwKSB7XG4gICAgICAgICAgICByZXR1cm4gZmFsc2U7XG4gICAgICAgIH1cblxuICAgICAgICBjb25zdCB1bmltcGxlbWVudGVkT3BzID0gY2hhbmdlcy5maWx0ZXIob3AgPT4gIShvcC5jb21tYW5kIGluIHN1cHBvcnRlZERpZmZPcGVyYXRpb25zKSk7XG4gICAgICAgIGlmICh1bmltcGxlbWVudGVkT3BzLmxlbmd0aCA+IDApIHtcbiAgICAgICAgICAgIHRocm93IG5ldyBFcnJvcihgVW5pbXBsZW1lbnRlZDogJHt1bmltcGxlbWVudGVkT3BzLm1hcChvcCA9PiBvcC5jb21tYW5kKS5qb2luKCcsICcpfS5gKTtcbiAgICAgICAgfVxuXG4gICAgICAgIGNoYW5nZXMuZm9yRWFjaCgob3ApID0+IHtcbiAgICAgICAgICAgIGlmIChvcC5jb21tYW5kID09PSAnc2V0VHJhbnNpdGlvbicpIHtcbiAgICAgICAgICAgICAgICAvLyBgdHJhbnNpdGlvbmAgaXMgYWx3YXlzIHJlYWQgZGlyZWN0bHkgb2ZmIG9mXG4gICAgICAgICAgICAgICAgLy8gYHRoaXMuc3R5bGVzaGVldGAsIHdoaWNoIHdlIHVwZGF0ZSBiZWxvd1xuICAgICAgICAgICAgICAgIHJldHVybjtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgICh0aGlzOiBhbnkpW29wLmNvbW1hbmRdLmFwcGx5KHRoaXMsIG9wLmFyZ3MpO1xuICAgICAgICB9KTtcblxuICAgICAgICB0aGlzLnN0eWxlc2hlZXQgPSBuZXh0U3RhdGU7XG5cbiAgICAgICAgcmV0dXJuIHRydWU7XG4gICAgfVxuXG4gICAgYWRkSW1hZ2UoaWQ6IHN0cmluZywgaW1hZ2U6IFN0eWxlSW1hZ2UpIHtcbiAgICAgICAgaWYgKHRoaXMuZ2V0SW1hZ2UoaWQpKSB7XG4gICAgICAgICAgICByZXR1cm4gdGhpcy5maXJlKG5ldyBFcnJvckV2ZW50KG5ldyBFcnJvcignQW4gaW1hZ2Ugd2l0aCB0aGlzIG5hbWUgYWxyZWFkeSBleGlzdHMuJykpKTtcbiAgICAgICAgfVxuICAgICAgICB0aGlzLmltYWdlTWFuYWdlci5hZGRJbWFnZShpZCwgaW1hZ2UpO1xuICAgICAgICB0aGlzLmZpcmUobmV3IEV2ZW50KCdkYXRhJywge2RhdGFUeXBlOiAnc3R5bGUnfSkpO1xuICAgIH1cblxuICAgIGdldEltYWdlKGlkOiBzdHJpbmcpOiA/U3R5bGVJbWFnZSB7XG4gICAgICAgIHJldHVybiB0aGlzLmltYWdlTWFuYWdlci5nZXRJbWFnZShpZCk7XG4gICAgfVxuXG4gICAgcmVtb3ZlSW1hZ2UoaWQ6IHN0cmluZykge1xuICAgICAgICBpZiAoIXRoaXMuZ2V0SW1hZ2UoaWQpKSB7XG4gICAgICAgICAgICByZXR1cm4gdGhpcy5maXJlKG5ldyBFcnJvckV2ZW50KG5ldyBFcnJvcignTm8gaW1hZ2Ugd2l0aCB0aGlzIG5hbWUgZXhpc3RzLicpKSk7XG4gICAgICAgIH1cbiAgICAgICAgdGhpcy5pbWFnZU1hbmFnZXIucmVtb3ZlSW1hZ2UoaWQpO1xuICAgICAgICB0aGlzLmZpcmUobmV3IEV2ZW50KCdkYXRhJywge2RhdGFUeXBlOiAnc3R5bGUnfSkpO1xuICAgIH1cblxuICAgIGxpc3RJbWFnZXMoKSB7XG4gICAgICAgIHRoaXMuX2NoZWNrTG9hZGVkKCk7XG5cbiAgICAgICAgcmV0dXJuIHRoaXMuaW1hZ2VNYW5hZ2VyLmxpc3RJbWFnZXMoKTtcbiAgICB9XG5cbiAgICBhZGRTb3VyY2UoaWQ6IHN0cmluZywgc291cmNlOiBTb3VyY2VTcGVjaWZpY2F0aW9uLCBvcHRpb25zPzoge3ZhbGlkYXRlPzogYm9vbGVhbn0pIHtcbiAgICAgICAgdGhpcy5fY2hlY2tMb2FkZWQoKTtcblxuICAgICAgICBpZiAodGhpcy5zb3VyY2VDYWNoZXNbaWRdICE9PSB1bmRlZmluZWQpIHtcbiAgICAgICAgICAgIHRocm93IG5ldyBFcnJvcignVGhlcmUgaXMgYWxyZWFkeSBhIHNvdXJjZSB3aXRoIHRoaXMgSUQnKTtcbiAgICAgICAgfVxuXG4gICAgICAgIGlmICghc291cmNlLnR5cGUpIHtcbiAgICAgICAgICAgIHRocm93IG5ldyBFcnJvcihgVGhlIHR5cGUgcHJvcGVydHkgbXVzdCBiZSBkZWZpbmVkLCBidXQgdGhlIG9ubHkgdGhlIGZvbGxvd2luZyBwcm9wZXJ0aWVzIHdlcmUgZ2l2ZW46ICR7T2JqZWN0LmtleXMoc291cmNlKS5qb2luKCcsICcpfS5gKTtcbiAgICAgICAgfVxuXG4gICAgICAgIGNvbnN0IGJ1aWx0SW5zID0gWyd2ZWN0b3InLCAncmFzdGVyJywgJ2dlb2pzb24nLCAndmlkZW8nLCAnaW1hZ2UnXTtcbiAgICAgICAgY29uc3Qgc2hvdWxkVmFsaWRhdGUgPSBidWlsdElucy5pbmRleE9mKHNvdXJjZS50eXBlKSA+PSAwO1xuICAgICAgICBpZiAoc2hvdWxkVmFsaWRhdGUgJiYgdGhpcy5fdmFsaWRhdGUodmFsaWRhdGVTdHlsZS5zb3VyY2UsIGBzb3VyY2VzLiR7aWR9YCwgc291cmNlLCBudWxsLCBvcHRpb25zKSkgcmV0dXJuO1xuXG4gICAgICAgIGlmICh0aGlzLm1hcCAmJiB0aGlzLm1hcC5fY29sbGVjdFJlc291cmNlVGltaW5nKSAoc291cmNlOiBhbnkpLmNvbGxlY3RSZXNvdXJjZVRpbWluZyA9IHRydWU7XG4gICAgICAgIGNvbnN0IHNvdXJjZUNhY2hlID0gdGhpcy5zb3VyY2VDYWNoZXNbaWRdID0gbmV3IFNvdXJjZUNhY2hlKGlkLCBzb3VyY2UsIHRoaXMuZGlzcGF0Y2hlcik7XG4gICAgICAgIHNvdXJjZUNhY2hlLnN0eWxlID0gdGhpcztcbiAgICAgICAgc291cmNlQ2FjaGUuc2V0RXZlbnRlZFBhcmVudCh0aGlzLCAoKSA9PiAoe1xuICAgICAgICAgICAgaXNTb3VyY2VMb2FkZWQ6IHRoaXMubG9hZGVkKCksXG4gICAgICAgICAgICBzb3VyY2U6IHNvdXJjZUNhY2hlLnNlcmlhbGl6ZSgpLFxuICAgICAgICAgICAgc291cmNlSWQ6IGlkXG4gICAgICAgIH0pKTtcblxuICAgICAgICBzb3VyY2VDYWNoZS5vbkFkZCh0aGlzLm1hcCk7XG4gICAgICAgIHRoaXMuX2NoYW5nZWQgPSB0cnVlO1xuICAgIH1cblxuICAgIC8qKlxuICAgICAqIFJlbW92ZSBhIHNvdXJjZSBmcm9tIHRoaXMgc3R5bGVzaGVldCwgZ2l2ZW4gaXRzIGlkLlxuICAgICAqIEBwYXJhbSB7c3RyaW5nfSBpZCBpZCBvZiB0aGUgc291cmNlIHRvIHJlbW92ZVxuICAgICAqIEB0aHJvd3Mge0Vycm9yfSBpZiBubyBzb3VyY2UgaXMgZm91bmQgd2l0aCB0aGUgZ2l2ZW4gSURcbiAgICAgKi9cbiAgICByZW1vdmVTb3VyY2UoaWQ6IHN0cmluZykge1xuICAgICAgICB0aGlzLl9jaGVja0xvYWRlZCgpO1xuXG4gICAgICAgIGlmICh0aGlzLnNvdXJjZUNhY2hlc1tpZF0gPT09IHVuZGVmaW5lZCkge1xuICAgICAgICAgICAgdGhyb3cgbmV3IEVycm9yKCdUaGVyZSBpcyBubyBzb3VyY2Ugd2l0aCB0aGlzIElEJyk7XG4gICAgICAgIH1cbiAgICAgICAgZm9yIChjb25zdCBsYXllcklkIGluIHRoaXMuX2xheWVycykge1xuICAgICAgICAgICAgaWYgKHRoaXMuX2xheWVyc1tsYXllcklkXS5zb3VyY2UgPT09IGlkKSB7XG4gICAgICAgICAgICAgICAgcmV0dXJuIHRoaXMuZmlyZShuZXcgRXJyb3JFdmVudChuZXcgRXJyb3IoYFNvdXJjZSBcIiR7aWR9XCIgY2Fubm90IGJlIHJlbW92ZWQgd2hpbGUgbGF5ZXIgXCIke2xheWVySWR9XCIgaXMgdXNpbmcgaXQuYCkpKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfVxuXG4gICAgICAgIGNvbnN0IHNvdXJjZUNhY2hlID0gdGhpcy5zb3VyY2VDYWNoZXNbaWRdO1xuICAgICAgICBkZWxldGUgdGhpcy5zb3VyY2VDYWNoZXNbaWRdO1xuICAgICAgICBkZWxldGUgdGhpcy5fdXBkYXRlZFNvdXJjZXNbaWRdO1xuICAgICAgICBzb3VyY2VDYWNoZS5maXJlKG5ldyBFdmVudCgnZGF0YScsIHtzb3VyY2VEYXRhVHlwZTogJ21ldGFkYXRhJywgZGF0YVR5cGU6J3NvdXJjZScsIHNvdXJjZUlkOiBpZH0pKTtcbiAgICAgICAgc291cmNlQ2FjaGUuc2V0RXZlbnRlZFBhcmVudChudWxsKTtcbiAgICAgICAgc291cmNlQ2FjaGUuY2xlYXJUaWxlcygpO1xuXG4gICAgICAgIGlmIChzb3VyY2VDYWNoZS5vblJlbW92ZSkgc291cmNlQ2FjaGUub25SZW1vdmUodGhpcy5tYXApO1xuICAgICAgICB0aGlzLl9jaGFuZ2VkID0gdHJ1ZTtcbiAgICB9XG5cbiAgICAvKipcbiAgICAqIFNldCB0aGUgZGF0YSBvZiBhIEdlb0pTT04gc291cmNlLCBnaXZlbiBpdHMgaWQuXG4gICAgKiBAcGFyYW0ge3N0cmluZ30gaWQgaWQgb2YgdGhlIHNvdXJjZVxuICAgICogQHBhcmFtIHtHZW9KU09OfHN0cmluZ30gZGF0YSBHZW9KU09OIHNvdXJjZVxuICAgICovXG4gICAgc2V0R2VvSlNPTlNvdXJjZURhdGEoaWQ6IHN0cmluZywgZGF0YTogR2VvSlNPTiB8IHN0cmluZykge1xuICAgICAgICB0aGlzLl9jaGVja0xvYWRlZCgpO1xuXG4gICAgICAgIGFzc2VydCh0aGlzLnNvdXJjZUNhY2hlc1tpZF0gIT09IHVuZGVmaW5lZCwgJ1RoZXJlIGlzIG5vIHNvdXJjZSB3aXRoIHRoaXMgSUQnKTtcbiAgICAgICAgY29uc3QgZ2VvanNvblNvdXJjZTogR2VvSlNPTlNvdXJjZSA9ICh0aGlzLnNvdXJjZUNhY2hlc1tpZF0uZ2V0U291cmNlKCk6IGFueSk7XG4gICAgICAgIGFzc2VydChnZW9qc29uU291cmNlLnR5cGUgPT09ICdnZW9qc29uJyk7XG5cbiAgICAgICAgZ2VvanNvblNvdXJjZS5zZXREYXRhKGRhdGEpO1xuICAgICAgICB0aGlzLl9jaGFuZ2VkID0gdHJ1ZTtcbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBHZXQgYSBzb3VyY2UgYnkgaWQuXG4gICAgICogQHBhcmFtIHtzdHJpbmd9IGlkIGlkIG9mIHRoZSBkZXNpcmVkIHNvdXJjZVxuICAgICAqIEByZXR1cm5zIHtPYmplY3R9IHNvdXJjZVxuICAgICAqL1xuICAgIGdldFNvdXJjZShpZDogc3RyaW5nKTogT2JqZWN0IHtcbiAgICAgICAgcmV0dXJuIHRoaXMuc291cmNlQ2FjaGVzW2lkXSAmJiB0aGlzLnNvdXJjZUNhY2hlc1tpZF0uZ2V0U291cmNlKCk7XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogQWRkIGEgbGF5ZXIgdG8gdGhlIG1hcCBzdHlsZS4gVGhlIGxheWVyIHdpbGwgYmUgaW5zZXJ0ZWQgYmVmb3JlIHRoZSBsYXllciB3aXRoXG4gICAgICogSUQgYGJlZm9yZWAsIG9yIGFwcGVuZGVkIGlmIGBiZWZvcmVgIGlzIG9taXR0ZWQuXG4gICAgICogQHBhcmFtIHtzdHJpbmd9IFtiZWZvcmVdIElEIG9mIGFuIGV4aXN0aW5nIGxheWVyIHRvIGluc2VydCBiZWZvcmVcbiAgICAgKi9cbiAgICBhZGRMYXllcihsYXllck9iamVjdDogTGF5ZXJTcGVjaWZpY2F0aW9uLCBiZWZvcmU/OiBzdHJpbmcsIG9wdGlvbnM/OiB7dmFsaWRhdGU/OiBib29sZWFufSkge1xuICAgICAgICB0aGlzLl9jaGVja0xvYWRlZCgpO1xuXG4gICAgICAgIGNvbnN0IGlkID0gbGF5ZXJPYmplY3QuaWQ7XG5cbiAgICAgICAgaWYgKHRoaXMuZ2V0TGF5ZXIoaWQpKSB7XG4gICAgICAgICAgICB0aGlzLmZpcmUobmV3IEVycm9yRXZlbnQobmV3IEVycm9yKGBMYXllciB3aXRoIGlkIFwiJHtpZH1cIiBhbHJlYWR5IGV4aXN0cyBvbiB0aGlzIG1hcGApKSk7XG4gICAgICAgICAgICByZXR1cm47XG4gICAgICAgIH1cblxuICAgICAgICBpZiAodHlwZW9mIGxheWVyT2JqZWN0LnNvdXJjZSA9PT0gJ29iamVjdCcpIHtcbiAgICAgICAgICAgIHRoaXMuYWRkU291cmNlKGlkLCBsYXllck9iamVjdC5zb3VyY2UpO1xuICAgICAgICAgICAgbGF5ZXJPYmplY3QgPSBjbG9uZShsYXllck9iamVjdCk7XG4gICAgICAgICAgICBsYXllck9iamVjdCA9IChleHRlbmQobGF5ZXJPYmplY3QsIHtzb3VyY2U6IGlkfSk6IGFueSk7XG4gICAgICAgIH1cblxuICAgICAgICAvLyB0aGlzIGxheWVyIGlzIG5vdCBpbiB0aGUgc3R5bGUubGF5ZXJzIGFycmF5LCBzbyB3ZSBwYXNzIGFuIGltcG9zc2libGUgYXJyYXkgaW5kZXhcbiAgICAgICAgaWYgKHRoaXMuX3ZhbGlkYXRlKHZhbGlkYXRlU3R5bGUubGF5ZXIsXG4gICAgICAgICAgICBgbGF5ZXJzLiR7aWR9YCwgbGF5ZXJPYmplY3QsIHthcnJheUluZGV4OiAtMX0sIG9wdGlvbnMpKSByZXR1cm47XG5cbiAgICAgICAgY29uc3QgbGF5ZXIgPSBjcmVhdGVTdHlsZUxheWVyKGxheWVyT2JqZWN0KTtcbiAgICAgICAgdGhpcy5fdmFsaWRhdGVMYXllcihsYXllcik7XG5cbiAgICAgICAgbGF5ZXIuc2V0RXZlbnRlZFBhcmVudCh0aGlzLCB7bGF5ZXI6IHtpZDogaWR9fSk7XG5cblxuICAgICAgICBjb25zdCBpbmRleCA9IGJlZm9yZSA/IHRoaXMuX29yZGVyLmluZGV4T2YoYmVmb3JlKSA6IHRoaXMuX29yZGVyLmxlbmd0aDtcbiAgICAgICAgaWYgKGJlZm9yZSAmJiBpbmRleCA9PT0gLTEpIHtcbiAgICAgICAgICAgIHRoaXMuZmlyZShuZXcgRXJyb3JFdmVudChuZXcgRXJyb3IoYExheWVyIHdpdGggaWQgXCIke2JlZm9yZX1cIiBkb2VzIG5vdCBleGlzdCBvbiB0aGlzIG1hcC5gKSkpO1xuICAgICAgICAgICAgcmV0dXJuO1xuICAgICAgICB9XG5cbiAgICAgICAgdGhpcy5fb3JkZXIuc3BsaWNlKGluZGV4LCAwLCBpZCk7XG4gICAgICAgIHRoaXMuX2xheWVyT3JkZXJDaGFuZ2VkID0gdHJ1ZTtcblxuICAgICAgICB0aGlzLl9sYXllcnNbaWRdID0gbGF5ZXI7XG5cbiAgICAgICAgaWYgKHRoaXMuX3JlbW92ZWRMYXllcnNbaWRdICYmIGxheWVyLnNvdXJjZSkge1xuICAgICAgICAgICAgLy8gSWYsIGluIHRoZSBjdXJyZW50IGJhdGNoLCB3ZSBoYXZlIGFscmVhZHkgcmVtb3ZlZCB0aGlzIGxheWVyXG4gICAgICAgICAgICAvLyBhbmQgd2UgYXJlIG5vdyByZS1hZGRpbmcgaXQgd2l0aCBhIGRpZmZlcmVudCBgdHlwZWAsIHRoZW4gd2VcbiAgICAgICAgICAgIC8vIG5lZWQgdG8gY2xlYXIgKHJhdGhlciB0aGFuIGp1c3QgcmVsb2FkKSB0aGUgdW5kZXJ5bGluZyBzb3VyY2Unc1xuICAgICAgICAgICAgLy8gdGlsZXMuICBPdGhlcndpc2UsIHRpbGVzIG1hcmtlZCAncmVsb2FkaW5nJyB3aWxsIGhhdmUgYnVja2V0cyAvXG4gICAgICAgICAgICAvLyBidWZmZXJzIHRoYXQgYXJlIHNldCB1cCBmb3IgdGhlIF9wcmV2aW91c18gdmVyc2lvbiBvZiB0aGlzXG4gICAgICAgICAgICAvLyBsYXllciwgY2F1c2luZywgZS5nLjpcbiAgICAgICAgICAgIC8vIGh0dHBzOi8vZ2l0aHViLmNvbS9tYXBib3gvbWFwYm94LWdsLWpzL2lzc3Vlcy8zNjMzXG4gICAgICAgICAgICBjb25zdCByZW1vdmVkID0gdGhpcy5fcmVtb3ZlZExheWVyc1tpZF07XG4gICAgICAgICAgICBkZWxldGUgdGhpcy5fcmVtb3ZlZExheWVyc1tpZF07XG4gICAgICAgICAgICBpZiAocmVtb3ZlZC50eXBlICE9PSBsYXllci50eXBlKSB7XG4gICAgICAgICAgICAgICAgdGhpcy5fdXBkYXRlZFNvdXJjZXNbbGF5ZXIuc291cmNlXSA9ICdjbGVhcic7XG4gICAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgICAgIHRoaXMuX3VwZGF0ZWRTb3VyY2VzW2xheWVyLnNvdXJjZV0gPSAncmVsb2FkJztcbiAgICAgICAgICAgICAgICB0aGlzLnNvdXJjZUNhY2hlc1tsYXllci5zb3VyY2VdLnBhdXNlKCk7XG4gICAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICAgICAgdGhpcy5fdXBkYXRlTGF5ZXIobGF5ZXIpO1xuICAgIH1cblxuICAgIC8qKlxuICAgICAqIE1vdmVzIGEgbGF5ZXIgdG8gYSBkaWZmZXJlbnQgei1wb3NpdGlvbi4gVGhlIGxheWVyIHdpbGwgYmUgaW5zZXJ0ZWQgYmVmb3JlIHRoZSBsYXllciB3aXRoXG4gICAgICogSUQgYGJlZm9yZWAsIG9yIGFwcGVuZGVkIGlmIGBiZWZvcmVgIGlzIG9taXR0ZWQuXG4gICAgICogQHBhcmFtIHtzdHJpbmd9IGlkICBJRCBvZiB0aGUgbGF5ZXIgdG8gbW92ZVxuICAgICAqIEBwYXJhbSB7c3RyaW5nfSBbYmVmb3JlXSBJRCBvZiBhbiBleGlzdGluZyBsYXllciB0byBpbnNlcnQgYmVmb3JlXG4gICAgICovXG4gICAgbW92ZUxheWVyKGlkOiBzdHJpbmcsIGJlZm9yZT86IHN0cmluZykge1xuICAgICAgICB0aGlzLl9jaGVja0xvYWRlZCgpO1xuICAgICAgICB0aGlzLl9jaGFuZ2VkID0gdHJ1ZTtcblxuICAgICAgICBjb25zdCBsYXllciA9IHRoaXMuX2xheWVyc1tpZF07XG4gICAgICAgIGlmICghbGF5ZXIpIHtcbiAgICAgICAgICAgIHRoaXMuZmlyZShuZXcgRXJyb3JFdmVudChuZXcgRXJyb3IoYFRoZSBsYXllciAnJHtpZH0nIGRvZXMgbm90IGV4aXN0IGluIHRoZSBtYXAncyBzdHlsZSBhbmQgY2Fubm90IGJlIG1vdmVkLmApKSk7XG4gICAgICAgICAgICByZXR1cm47XG4gICAgICAgIH1cblxuICAgICAgICBpZiAoaWQgPT09IGJlZm9yZSkge1xuICAgICAgICAgICAgcmV0dXJuO1xuICAgICAgICB9XG5cbiAgICAgICAgY29uc3QgaW5kZXggPSB0aGlzLl9vcmRlci5pbmRleE9mKGlkKTtcbiAgICAgICAgdGhpcy5fb3JkZXIuc3BsaWNlKGluZGV4LCAxKTtcblxuICAgICAgICBjb25zdCBuZXdJbmRleCA9IGJlZm9yZSA/IHRoaXMuX29yZGVyLmluZGV4T2YoYmVmb3JlKSA6IHRoaXMuX29yZGVyLmxlbmd0aDtcbiAgICAgICAgaWYgKGJlZm9yZSAmJiBuZXdJbmRleCA9PT0gLTEpIHtcbiAgICAgICAgICAgIHRoaXMuZmlyZShuZXcgRXJyb3JFdmVudChuZXcgRXJyb3IoYExheWVyIHdpdGggaWQgXCIke2JlZm9yZX1cIiBkb2VzIG5vdCBleGlzdCBvbiB0aGlzIG1hcC5gKSkpO1xuICAgICAgICAgICAgcmV0dXJuO1xuICAgICAgICB9XG4gICAgICAgIHRoaXMuX29yZGVyLnNwbGljZShuZXdJbmRleCwgMCwgaWQpO1xuXG4gICAgICAgIHRoaXMuX2xheWVyT3JkZXJDaGFuZ2VkID0gdHJ1ZTtcbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBSZW1vdmUgdGhlIGxheWVyIHdpdGggdGhlIGdpdmVuIGlkIGZyb20gdGhlIHN0eWxlLlxuICAgICAqXG4gICAgICogSWYgbm8gc3VjaCBsYXllciBleGlzdHMsIGFuIGBlcnJvcmAgZXZlbnQgaXMgZmlyZWQuXG4gICAgICpcbiAgICAgKiBAcGFyYW0ge3N0cmluZ30gaWQgaWQgb2YgdGhlIGxheWVyIHRvIHJlbW92ZVxuICAgICAqIEBmaXJlcyBlcnJvclxuICAgICAqL1xuICAgIHJlbW92ZUxheWVyKGlkOiBzdHJpbmcpIHtcbiAgICAgICAgdGhpcy5fY2hlY2tMb2FkZWQoKTtcblxuICAgICAgICBjb25zdCBsYXllciA9IHRoaXMuX2xheWVyc1tpZF07XG4gICAgICAgIGlmICghbGF5ZXIpIHtcbiAgICAgICAgICAgIHRoaXMuZmlyZShuZXcgRXJyb3JFdmVudChuZXcgRXJyb3IoYFRoZSBsYXllciAnJHtpZH0nIGRvZXMgbm90IGV4aXN0IGluIHRoZSBtYXAncyBzdHlsZSBhbmQgY2Fubm90IGJlIHJlbW92ZWQuYCkpKTtcbiAgICAgICAgICAgIHJldHVybjtcbiAgICAgICAgfVxuXG4gICAgICAgIGxheWVyLnNldEV2ZW50ZWRQYXJlbnQobnVsbCk7XG5cbiAgICAgICAgY29uc3QgaW5kZXggPSB0aGlzLl9vcmRlci5pbmRleE9mKGlkKTtcbiAgICAgICAgdGhpcy5fb3JkZXIuc3BsaWNlKGluZGV4LCAxKTtcblxuICAgICAgICB0aGlzLl9sYXllck9yZGVyQ2hhbmdlZCA9IHRydWU7XG4gICAgICAgIHRoaXMuX2NoYW5nZWQgPSB0cnVlO1xuICAgICAgICB0aGlzLl9yZW1vdmVkTGF5ZXJzW2lkXSA9IGxheWVyO1xuICAgICAgICBkZWxldGUgdGhpcy5fbGF5ZXJzW2lkXTtcbiAgICAgICAgZGVsZXRlIHRoaXMuX3VwZGF0ZWRMYXllcnNbaWRdO1xuICAgICAgICBkZWxldGUgdGhpcy5fdXBkYXRlZFBhaW50UHJvcHNbaWRdO1xuICAgIH1cblxuICAgIC8qKlxuICAgICAqIFJldHVybiB0aGUgc3R5bGUgbGF5ZXIgb2JqZWN0IHdpdGggdGhlIGdpdmVuIGBpZGAuXG4gICAgICpcbiAgICAgKiBAcGFyYW0ge3N0cmluZ30gaWQgLSBpZCBvZiB0aGUgZGVzaXJlZCBsYXllclxuICAgICAqIEByZXR1cm5zIHs/T2JqZWN0fSBhIGxheWVyLCBpZiBvbmUgd2l0aCB0aGUgZ2l2ZW4gYGlkYCBleGlzdHNcbiAgICAgKi9cbiAgICBnZXRMYXllcihpZDogc3RyaW5nKTogT2JqZWN0IHtcbiAgICAgICAgcmV0dXJuIHRoaXMuX2xheWVyc1tpZF07XG4gICAgfVxuXG4gICAgc2V0TGF5ZXJab29tUmFuZ2UobGF5ZXJJZDogc3RyaW5nLCBtaW56b29tOiA/bnVtYmVyLCBtYXh6b29tOiA/bnVtYmVyKSB7XG4gICAgICAgIHRoaXMuX2NoZWNrTG9hZGVkKCk7XG5cbiAgICAgICAgY29uc3QgbGF5ZXIgPSB0aGlzLmdldExheWVyKGxheWVySWQpO1xuICAgICAgICBpZiAoIWxheWVyKSB7XG4gICAgICAgICAgICB0aGlzLmZpcmUobmV3IEVycm9yRXZlbnQobmV3IEVycm9yKGBUaGUgbGF5ZXIgJyR7bGF5ZXJJZH0nIGRvZXMgbm90IGV4aXN0IGluIHRoZSBtYXAncyBzdHlsZSBhbmQgY2Fubm90IGhhdmUgem9vbSBleHRlbnQuYCkpKTtcbiAgICAgICAgICAgIHJldHVybjtcbiAgICAgICAgfVxuXG4gICAgICAgIGlmIChsYXllci5taW56b29tID09PSBtaW56b29tICYmIGxheWVyLm1heHpvb20gPT09IG1heHpvb20pIHJldHVybjtcblxuICAgICAgICBpZiAobWluem9vbSAhPSBudWxsKSB7XG4gICAgICAgICAgICBsYXllci5taW56b29tID0gbWluem9vbTtcbiAgICAgICAgfVxuICAgICAgICBpZiAobWF4em9vbSAhPSBudWxsKSB7XG4gICAgICAgICAgICBsYXllci5tYXh6b29tID0gbWF4em9vbTtcbiAgICAgICAgfVxuICAgICAgICB0aGlzLl91cGRhdGVMYXllcihsYXllcik7XG4gICAgfVxuXG4gICAgc2V0RmlsdGVyKGxheWVySWQ6IHN0cmluZywgZmlsdGVyOiA/RmlsdGVyU3BlY2lmaWNhdGlvbikge1xuICAgICAgICB0aGlzLl9jaGVja0xvYWRlZCgpO1xuXG4gICAgICAgIGNvbnN0IGxheWVyID0gdGhpcy5nZXRMYXllcihsYXllcklkKTtcbiAgICAgICAgaWYgKCFsYXllcikge1xuICAgICAgICAgICAgdGhpcy5maXJlKG5ldyBFcnJvckV2ZW50KG5ldyBFcnJvcihgVGhlIGxheWVyICcke2xheWVySWR9JyBkb2VzIG5vdCBleGlzdCBpbiB0aGUgbWFwJ3Mgc3R5bGUgYW5kIGNhbm5vdCBiZSBmaWx0ZXJlZC5gKSkpO1xuICAgICAgICAgICAgcmV0dXJuO1xuICAgICAgICB9XG5cbiAgICAgICAgaWYgKGRlZXBFcXVhbChsYXllci5maWx0ZXIsIGZpbHRlcikpIHtcbiAgICAgICAgICAgIHJldHVybjtcbiAgICAgICAgfVxuXG4gICAgICAgIGlmIChmaWx0ZXIgPT09IG51bGwgfHwgZmlsdGVyID09PSB1bmRlZmluZWQpIHtcbiAgICAgICAgICAgIGxheWVyLmZpbHRlciA9IHVuZGVmaW5lZDtcbiAgICAgICAgICAgIHRoaXMuX3VwZGF0ZUxheWVyKGxheWVyKTtcbiAgICAgICAgICAgIHJldHVybjtcbiAgICAgICAgfVxuXG4gICAgICAgIGlmICh0aGlzLl92YWxpZGF0ZSh2YWxpZGF0ZVN0eWxlLmZpbHRlciwgYGxheWVycy4ke2xheWVyLmlkfS5maWx0ZXJgLCBmaWx0ZXIpKSB7XG4gICAgICAgICAgICByZXR1cm47XG4gICAgICAgIH1cblxuICAgICAgICBsYXllci5maWx0ZXIgPSBjbG9uZShmaWx0ZXIpO1xuICAgICAgICB0aGlzLl91cGRhdGVMYXllcihsYXllcik7XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogR2V0IGEgbGF5ZXIncyBmaWx0ZXIgb2JqZWN0XG4gICAgICogQHBhcmFtIHtzdHJpbmd9IGxheWVyIHRoZSBsYXllciB0byBpbnNwZWN0XG4gICAgICogQHJldHVybnMgeyp9IHRoZSBsYXllcidzIGZpbHRlciwgaWYgYW55XG4gICAgICovXG4gICAgZ2V0RmlsdGVyKGxheWVyOiBzdHJpbmcpIHtcbiAgICAgICAgcmV0dXJuIGNsb25lKHRoaXMuZ2V0TGF5ZXIobGF5ZXIpLmZpbHRlcik7XG4gICAgfVxuXG4gICAgc2V0TGF5b3V0UHJvcGVydHkobGF5ZXJJZDogc3RyaW5nLCBuYW1lOiBzdHJpbmcsIHZhbHVlOiBhbnkpIHtcbiAgICAgICAgdGhpcy5fY2hlY2tMb2FkZWQoKTtcblxuICAgICAgICBjb25zdCBsYXllciA9IHRoaXMuZ2V0TGF5ZXIobGF5ZXJJZCk7XG4gICAgICAgIGlmICghbGF5ZXIpIHtcbiAgICAgICAgICAgIHRoaXMuZmlyZShuZXcgRXJyb3JFdmVudChuZXcgRXJyb3IoYFRoZSBsYXllciAnJHtsYXllcklkfScgZG9lcyBub3QgZXhpc3QgaW4gdGhlIG1hcCdzIHN0eWxlIGFuZCBjYW5ub3QgYmUgc3R5bGVkLmApKSk7XG4gICAgICAgICAgICByZXR1cm47XG4gICAgICAgIH1cblxuICAgICAgICBpZiAoZGVlcEVxdWFsKGxheWVyLmdldExheW91dFByb3BlcnR5KG5hbWUpLCB2YWx1ZSkpIHJldHVybjtcblxuICAgICAgICBsYXllci5zZXRMYXlvdXRQcm9wZXJ0eShuYW1lLCB2YWx1ZSk7XG4gICAgICAgIHRoaXMuX3VwZGF0ZUxheWVyKGxheWVyKTtcbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBHZXQgYSBsYXlvdXQgcHJvcGVydHkncyB2YWx1ZSBmcm9tIGEgZ2l2ZW4gbGF5ZXJcbiAgICAgKiBAcGFyYW0ge3N0cmluZ30gbGF5ZXIgdGhlIGxheWVyIHRvIGluc3BlY3RcbiAgICAgKiBAcGFyYW0ge3N0cmluZ30gbmFtZSB0aGUgbmFtZSBvZiB0aGUgbGF5b3V0IHByb3BlcnR5XG4gICAgICogQHJldHVybnMgeyp9IHRoZSBwcm9wZXJ0eSB2YWx1ZVxuICAgICAqL1xuICAgIGdldExheW91dFByb3BlcnR5KGxheWVyOiBzdHJpbmcsIG5hbWU6IHN0cmluZykge1xuICAgICAgICByZXR1cm4gdGhpcy5nZXRMYXllcihsYXllcikuZ2V0TGF5b3V0UHJvcGVydHkobmFtZSk7XG4gICAgfVxuXG4gICAgc2V0UGFpbnRQcm9wZXJ0eShsYXllcklkOiBzdHJpbmcsIG5hbWU6IHN0cmluZywgdmFsdWU6IGFueSkge1xuICAgICAgICB0aGlzLl9jaGVja0xvYWRlZCgpO1xuXG4gICAgICAgIGNvbnN0IGxheWVyID0gdGhpcy5nZXRMYXllcihsYXllcklkKTtcbiAgICAgICAgaWYgKCFsYXllcikge1xuICAgICAgICAgICAgdGhpcy5maXJlKG5ldyBFcnJvckV2ZW50KG5ldyBFcnJvcihgVGhlIGxheWVyICcke2xheWVySWR9JyBkb2VzIG5vdCBleGlzdCBpbiB0aGUgbWFwJ3Mgc3R5bGUgYW5kIGNhbm5vdCBiZSBzdHlsZWQuYCkpKTtcbiAgICAgICAgICAgIHJldHVybjtcbiAgICAgICAgfVxuXG4gICAgICAgIGlmIChkZWVwRXF1YWwobGF5ZXIuZ2V0UGFpbnRQcm9wZXJ0eShuYW1lKSwgdmFsdWUpKSByZXR1cm47XG5cbiAgICAgICAgY29uc3QgcmVxdWlyZXNSZWxheW91dCA9IGxheWVyLnNldFBhaW50UHJvcGVydHkobmFtZSwgdmFsdWUpO1xuICAgICAgICBpZiAocmVxdWlyZXNSZWxheW91dCkge1xuICAgICAgICAgICAgdGhpcy5fdXBkYXRlTGF5ZXIobGF5ZXIpO1xuICAgICAgICB9XG5cbiAgICAgICAgdGhpcy5fY2hhbmdlZCA9IHRydWU7XG4gICAgICAgIHRoaXMuX3VwZGF0ZWRQYWludFByb3BzW2xheWVySWRdID0gdHJ1ZTtcbiAgICB9XG5cbiAgICBnZXRQYWludFByb3BlcnR5KGxheWVyOiBzdHJpbmcsIG5hbWU6IHN0cmluZykge1xuICAgICAgICByZXR1cm4gdGhpcy5nZXRMYXllcihsYXllcikuZ2V0UGFpbnRQcm9wZXJ0eShuYW1lKTtcbiAgICB9XG5cbiAgICBzZXRGZWF0dXJlU3RhdGUoZmVhdHVyZTogeyBzb3VyY2U6IHN0cmluZzsgc291cmNlTGF5ZXI/OiBzdHJpbmc7IGlkOiBzdHJpbmcgfCBudW1iZXI7IH0sIHN0YXRlOiBPYmplY3QpIHtcbiAgICAgICAgdGhpcy5fY2hlY2tMb2FkZWQoKTtcbiAgICAgICAgY29uc3Qgc291cmNlSWQgPSBmZWF0dXJlLnNvdXJjZTtcbiAgICAgICAgY29uc3Qgc291cmNlTGF5ZXIgPSBmZWF0dXJlLnNvdXJjZUxheWVyO1xuICAgICAgICBjb25zdCBzb3VyY2VDYWNoZSA9IHRoaXMuc291cmNlQ2FjaGVzW3NvdXJjZUlkXTtcbiAgICAgICAgY29uc3QgZmVhdHVyZUlkID0gcGFyc2VJbnQoZmVhdHVyZS5pZCwgMTApO1xuXG4gICAgICAgIGlmIChzb3VyY2VDYWNoZSA9PT0gdW5kZWZpbmVkKSB7XG4gICAgICAgICAgICB0aGlzLmZpcmUobmV3IEVycm9yRXZlbnQobmV3IEVycm9yKGBUaGUgc291cmNlICcke3NvdXJjZUlkfScgZG9lcyBub3QgZXhpc3QgaW4gdGhlIG1hcCdzIHN0eWxlLmApKSk7XG4gICAgICAgICAgICByZXR1cm47XG4gICAgICAgIH1cbiAgICAgICAgY29uc3Qgc291cmNlVHlwZSA9IHNvdXJjZUNhY2hlLmdldFNvdXJjZSgpLnR5cGU7XG4gICAgICAgIGlmIChzb3VyY2VUeXBlID09PSAndmVjdG9yJyAmJiAhc291cmNlTGF5ZXIpIHtcbiAgICAgICAgICAgIHRoaXMuZmlyZShuZXcgRXJyb3JFdmVudChuZXcgRXJyb3IoYFRoZSBzb3VyY2VMYXllciBwYXJhbWV0ZXIgbXVzdCBiZSBwcm92aWRlZCBmb3IgdmVjdG9yIHNvdXJjZSB0eXBlcy5gKSkpO1xuICAgICAgICAgICAgcmV0dXJuO1xuICAgICAgICB9XG4gICAgICAgIGlmIChpc05hTihmZWF0dXJlSWQpIHx8IGZlYXR1cmVJZCA8IDApIHtcbiAgICAgICAgICAgIHRoaXMuZmlyZShuZXcgRXJyb3JFdmVudChuZXcgRXJyb3IoYFRoZSBmZWF0dXJlIGlkIHBhcmFtZXRlciBtdXN0IGJlIHByb3ZpZGVkIGFuZCBub24tbmVnYXRpdmUuYCkpKTtcbiAgICAgICAgICAgIHJldHVybjtcbiAgICAgICAgfVxuXG4gICAgICAgIHNvdXJjZUNhY2hlLnNldEZlYXR1cmVTdGF0ZShzb3VyY2VMYXllciwgZmVhdHVyZUlkLCBzdGF0ZSk7XG4gICAgfVxuXG4gICAgZ2V0RmVhdHVyZVN0YXRlKGZlYXR1cmU6IHsgc291cmNlOiBzdHJpbmc7IHNvdXJjZUxheWVyPzogc3RyaW5nOyBpZDogc3RyaW5nIHwgbnVtYmVyOyB9KSB7XG4gICAgICAgIHRoaXMuX2NoZWNrTG9hZGVkKCk7XG4gICAgICAgIGNvbnN0IHNvdXJjZUlkID0gZmVhdHVyZS5zb3VyY2U7XG4gICAgICAgIGNvbnN0IHNvdXJjZUxheWVyID0gZmVhdHVyZS5zb3VyY2VMYXllcjtcbiAgICAgICAgY29uc3Qgc291cmNlQ2FjaGUgPSB0aGlzLnNvdXJjZUNhY2hlc1tzb3VyY2VJZF07XG4gICAgICAgIGNvbnN0IGZlYXR1cmVJZCA9IHBhcnNlSW50KGZlYXR1cmUuaWQsIDEwKTtcblxuICAgICAgICBpZiAoc291cmNlQ2FjaGUgPT09IHVuZGVmaW5lZCkge1xuICAgICAgICAgICAgdGhpcy5maXJlKG5ldyBFcnJvckV2ZW50KG5ldyBFcnJvcihgVGhlIHNvdXJjZSAnJHtzb3VyY2VJZH0nIGRvZXMgbm90IGV4aXN0IGluIHRoZSBtYXAncyBzdHlsZS5gKSkpO1xuICAgICAgICAgICAgcmV0dXJuO1xuICAgICAgICB9XG4gICAgICAgIGNvbnN0IHNvdXJjZVR5cGUgPSBzb3VyY2VDYWNoZS5nZXRTb3VyY2UoKS50eXBlO1xuICAgICAgICBpZiAoc291cmNlVHlwZSA9PT0gJ3ZlY3RvcicgJiYgIXNvdXJjZUxheWVyKSB7XG4gICAgICAgICAgICB0aGlzLmZpcmUobmV3IEVycm9yRXZlbnQobmV3IEVycm9yKGBUaGUgc291cmNlTGF5ZXIgcGFyYW1ldGVyIG11c3QgYmUgcHJvdmlkZWQgZm9yIHZlY3RvciBzb3VyY2UgdHlwZXMuYCkpKTtcbiAgICAgICAgICAgIHJldHVybjtcbiAgICAgICAgfVxuICAgICAgICBpZiAoaXNOYU4oZmVhdHVyZUlkKSB8fCBmZWF0dXJlSWQgPCAwKSB7XG4gICAgICAgICAgICB0aGlzLmZpcmUobmV3IEVycm9yRXZlbnQobmV3IEVycm9yKGBUaGUgZmVhdHVyZSBpZCBwYXJhbWV0ZXIgbXVzdCBiZSBwcm92aWRlZCBhbmQgbm9uLW5lZ2F0aXZlLmApKSk7XG4gICAgICAgICAgICByZXR1cm47XG4gICAgICAgIH1cblxuICAgICAgICByZXR1cm4gc291cmNlQ2FjaGUuZ2V0RmVhdHVyZVN0YXRlKHNvdXJjZUxheWVyLCBmZWF0dXJlSWQpO1xuICAgIH1cblxuICAgIGdldFRyYW5zaXRpb24oKSB7XG4gICAgICAgIHJldHVybiBleHRlbmQoeyBkdXJhdGlvbjogMzAwLCBkZWxheTogMCB9LCB0aGlzLnN0eWxlc2hlZXQgJiYgdGhpcy5zdHlsZXNoZWV0LnRyYW5zaXRpb24pO1xuICAgIH1cblxuICAgIHNlcmlhbGl6ZSgpIHtcbiAgICAgICAgcmV0dXJuIGZpbHRlck9iamVjdCh7XG4gICAgICAgICAgICB2ZXJzaW9uOiB0aGlzLnN0eWxlc2hlZXQudmVyc2lvbixcbiAgICAgICAgICAgIG5hbWU6IHRoaXMuc3R5bGVzaGVldC5uYW1lLFxuICAgICAgICAgICAgbWV0YWRhdGE6IHRoaXMuc3R5bGVzaGVldC5tZXRhZGF0YSxcbiAgICAgICAgICAgIGxpZ2h0OiB0aGlzLnN0eWxlc2hlZXQubGlnaHQsXG4gICAgICAgICAgICBjZW50ZXI6IHRoaXMuc3R5bGVzaGVldC5jZW50ZXIsXG4gICAgICAgICAgICB6b29tOiB0aGlzLnN0eWxlc2hlZXQuem9vbSxcbiAgICAgICAgICAgIGJlYXJpbmc6IHRoaXMuc3R5bGVzaGVldC5iZWFyaW5nLFxuICAgICAgICAgICAgcGl0Y2g6IHRoaXMuc3R5bGVzaGVldC5waXRjaCxcbiAgICAgICAgICAgIHNwcml0ZTogdGhpcy5zdHlsZXNoZWV0LnNwcml0ZSxcbiAgICAgICAgICAgIGdseXBoczogdGhpcy5zdHlsZXNoZWV0LmdseXBocyxcbiAgICAgICAgICAgIHRyYW5zaXRpb246IHRoaXMuc3R5bGVzaGVldC50cmFuc2l0aW9uLFxuICAgICAgICAgICAgc291cmNlczogbWFwT2JqZWN0KHRoaXMuc291cmNlQ2FjaGVzLCAoc291cmNlKSA9PiBzb3VyY2Uuc2VyaWFsaXplKCkpLFxuICAgICAgICAgICAgbGF5ZXJzOiB0aGlzLl9vcmRlci5tYXAoKGlkKSA9PiB0aGlzLl9sYXllcnNbaWRdLnNlcmlhbGl6ZSgpKVxuICAgICAgICB9LCAodmFsdWUpID0+IHsgcmV0dXJuIHZhbHVlICE9PSB1bmRlZmluZWQ7IH0pO1xuICAgIH1cblxuICAgIF91cGRhdGVMYXllcihsYXllcjogU3R5bGVMYXllcikge1xuICAgICAgICB0aGlzLl91cGRhdGVkTGF5ZXJzW2xheWVyLmlkXSA9IHRydWU7XG4gICAgICAgIGlmIChsYXllci5zb3VyY2UgJiYgIXRoaXMuX3VwZGF0ZWRTb3VyY2VzW2xheWVyLnNvdXJjZV0pIHtcbiAgICAgICAgICAgIHRoaXMuX3VwZGF0ZWRTb3VyY2VzW2xheWVyLnNvdXJjZV0gPSAncmVsb2FkJztcbiAgICAgICAgICAgIHRoaXMuc291cmNlQ2FjaGVzW2xheWVyLnNvdXJjZV0ucGF1c2UoKTtcbiAgICAgICAgfVxuICAgICAgICB0aGlzLl9jaGFuZ2VkID0gdHJ1ZTtcbiAgICB9XG5cbiAgICBfZmxhdHRlblJlbmRlcmVkRmVhdHVyZXMoc291cmNlUmVzdWx0czogQXJyYXk8YW55Pikge1xuICAgICAgICBjb25zdCBmZWF0dXJlcyA9IFtdO1xuICAgICAgICBmb3IgKGxldCBsID0gdGhpcy5fb3JkZXIubGVuZ3RoIC0gMTsgbCA+PSAwOyBsLS0pIHtcbiAgICAgICAgICAgIGNvbnN0IGxheWVySWQgPSB0aGlzLl9vcmRlcltsXTtcbiAgICAgICAgICAgIGZvciAoY29uc3Qgc291cmNlUmVzdWx0IG9mIHNvdXJjZVJlc3VsdHMpIHtcbiAgICAgICAgICAgICAgICBjb25zdCBsYXllckZlYXR1cmVzID0gc291cmNlUmVzdWx0W2xheWVySWRdO1xuICAgICAgICAgICAgICAgIGlmIChsYXllckZlYXR1cmVzKSB7XG4gICAgICAgICAgICAgICAgICAgIGZvciAoY29uc3QgZmVhdHVyZSBvZiBsYXllckZlYXR1cmVzKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICBmZWF0dXJlcy5wdXNoKGZlYXR1cmUpO1xuICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfVxuICAgICAgICB9XG4gICAgICAgIHJldHVybiBmZWF0dXJlcztcbiAgICB9XG5cbiAgICBxdWVyeVJlbmRlcmVkRmVhdHVyZXMocXVlcnlHZW9tZXRyeTogYW55LCBwYXJhbXM6IGFueSwgdHJhbnNmb3JtOiBUcmFuc2Zvcm0pIHtcbiAgICAgICAgaWYgKHBhcmFtcyAmJiBwYXJhbXMuZmlsdGVyKSB7XG4gICAgICAgICAgICB0aGlzLl92YWxpZGF0ZSh2YWxpZGF0ZVN0eWxlLmZpbHRlciwgJ3F1ZXJ5UmVuZGVyZWRGZWF0dXJlcy5maWx0ZXInLCBwYXJhbXMuZmlsdGVyKTtcbiAgICAgICAgfVxuXG4gICAgICAgIGNvbnN0IGluY2x1ZGVkU291cmNlcyA9IHt9O1xuICAgICAgICBpZiAocGFyYW1zICYmIHBhcmFtcy5sYXllcnMpIHtcbiAgICAgICAgICAgIGlmICghQXJyYXkuaXNBcnJheShwYXJhbXMubGF5ZXJzKSkge1xuICAgICAgICAgICAgICAgIHRoaXMuZmlyZShuZXcgRXJyb3JFdmVudChuZXcgRXJyb3IoJ3BhcmFtZXRlcnMubGF5ZXJzIG11c3QgYmUgYW4gQXJyYXkuJykpKTtcbiAgICAgICAgICAgICAgICByZXR1cm4gW107XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBmb3IgKGNvbnN0IGxheWVySWQgb2YgcGFyYW1zLmxheWVycykge1xuICAgICAgICAgICAgICAgIGNvbnN0IGxheWVyID0gdGhpcy5fbGF5ZXJzW2xheWVySWRdO1xuICAgICAgICAgICAgICAgIGlmICghbGF5ZXIpIHtcbiAgICAgICAgICAgICAgICAgICAgLy8gdGhpcyBsYXllciBpcyBub3QgaW4gdGhlIHN0eWxlLmxheWVycyBhcnJheVxuICAgICAgICAgICAgICAgICAgICB0aGlzLmZpcmUobmV3IEVycm9yRXZlbnQobmV3IEVycm9yKGBUaGUgbGF5ZXIgJyR7bGF5ZXJJZH0nIGRvZXMgbm90IGV4aXN0IGluIHRoZSBtYXAncyBzdHlsZSBhbmQgY2Fubm90IGJlIHF1ZXJpZWQgZm9yIGZlYXR1cmVzLmApKSk7XG4gICAgICAgICAgICAgICAgICAgIHJldHVybiBbXTtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgaW5jbHVkZWRTb3VyY2VzW2xheWVyLnNvdXJjZV0gPSB0cnVlO1xuICAgICAgICAgICAgfVxuICAgICAgICB9XG5cbiAgICAgICAgY29uc3Qgc291cmNlUmVzdWx0cyA9IFtdO1xuICAgICAgICBjb25zdCBxdWVyeUNvb3JkaW5hdGVzID0gcXVlcnlHZW9tZXRyeS5tYXAoKHApID0+IHRyYW5zZm9ybS5wb2ludENvb3JkaW5hdGUocCkpO1xuXG4gICAgICAgIGZvciAoY29uc3QgaWQgaW4gdGhpcy5zb3VyY2VDYWNoZXMpIHtcbiAgICAgICAgICAgIGlmIChwYXJhbXMubGF5ZXJzICYmICFpbmNsdWRlZFNvdXJjZXNbaWRdKSBjb250aW51ZTtcbiAgICAgICAgICAgIHNvdXJjZVJlc3VsdHMucHVzaChcbiAgICAgICAgICAgICAgICBxdWVyeVJlbmRlcmVkRmVhdHVyZXMoXG4gICAgICAgICAgICAgICAgICAgIHRoaXMuc291cmNlQ2FjaGVzW2lkXSxcbiAgICAgICAgICAgICAgICAgICAgdGhpcy5fbGF5ZXJzLFxuICAgICAgICAgICAgICAgICAgICBxdWVyeUNvb3JkaW5hdGVzLFxuICAgICAgICAgICAgICAgICAgICBwYXJhbXMsXG4gICAgICAgICAgICAgICAgICAgIHRyYW5zZm9ybSlcbiAgICAgICAgICAgICk7XG4gICAgICAgIH1cblxuICAgICAgICBpZiAodGhpcy5wbGFjZW1lbnQpIHtcbiAgICAgICAgICAgIC8vIElmIGEgcGxhY2VtZW50IGhhcyBydW4sIHF1ZXJ5IGFnYWluc3QgaXRzIENvbGxpc2lvbkluZGV4XG4gICAgICAgICAgICAvLyBmb3Igc3ltYm9sIHJlc3VsdHMsIGFuZCB0cmVhdCBpdCBhcyBhbiBleHRyYSBzb3VyY2UgdG8gbWVyZ2VcbiAgICAgICAgICAgIHNvdXJjZVJlc3VsdHMucHVzaChcbiAgICAgICAgICAgICAgICBxdWVyeVJlbmRlcmVkU3ltYm9scyhcbiAgICAgICAgICAgICAgICAgICAgdGhpcy5fbGF5ZXJzLFxuICAgICAgICAgICAgICAgICAgICB0aGlzLnNvdXJjZUNhY2hlcyxcbiAgICAgICAgICAgICAgICAgICAgcXVlcnlHZW9tZXRyeSxcbiAgICAgICAgICAgICAgICAgICAgcGFyYW1zLFxuICAgICAgICAgICAgICAgICAgICB0aGlzLnBsYWNlbWVudC5jb2xsaXNpb25JbmRleCxcbiAgICAgICAgICAgICAgICAgICAgdGhpcy5wbGFjZW1lbnQucmV0YWluZWRRdWVyeURhdGEpXG4gICAgICAgICAgICApO1xuICAgICAgICB9XG4gICAgICAgIHJldHVybiB0aGlzLl9mbGF0dGVuUmVuZGVyZWRGZWF0dXJlcyhzb3VyY2VSZXN1bHRzKTtcbiAgICB9XG5cbiAgICBxdWVyeVNvdXJjZUZlYXR1cmVzKHNvdXJjZUlEOiBzdHJpbmcsIHBhcmFtczogP3tzb3VyY2VMYXllcjogP3N0cmluZywgZmlsdGVyOiA/QXJyYXk8YW55Pn0pIHtcbiAgICAgICAgaWYgKHBhcmFtcyAmJiBwYXJhbXMuZmlsdGVyKSB7XG4gICAgICAgICAgICB0aGlzLl92YWxpZGF0ZSh2YWxpZGF0ZVN0eWxlLmZpbHRlciwgJ3F1ZXJ5U291cmNlRmVhdHVyZXMuZmlsdGVyJywgcGFyYW1zLmZpbHRlcik7XG4gICAgICAgIH1cbiAgICAgICAgY29uc3Qgc291cmNlQ2FjaGUgPSB0aGlzLnNvdXJjZUNhY2hlc1tzb3VyY2VJRF07XG4gICAgICAgIHJldHVybiBzb3VyY2VDYWNoZSA/IHF1ZXJ5U291cmNlRmVhdHVyZXMoc291cmNlQ2FjaGUsIHBhcmFtcykgOiBbXTtcbiAgICB9XG5cbiAgICBhZGRTb3VyY2VUeXBlKG5hbWU6IHN0cmluZywgU291cmNlVHlwZTogU291cmNlQ2xhc3MsIGNhbGxiYWNrOiBDYWxsYmFjazx2b2lkPikge1xuICAgICAgICBpZiAoU3R5bGUuZ2V0U291cmNlVHlwZShuYW1lKSkge1xuICAgICAgICAgICAgcmV0dXJuIGNhbGxiYWNrKG5ldyBFcnJvcihgQSBzb3VyY2UgdHlwZSBjYWxsZWQgXCIke25hbWV9XCIgYWxyZWFkeSBleGlzdHMuYCkpO1xuICAgICAgICB9XG5cbiAgICAgICAgU3R5bGUuc2V0U291cmNlVHlwZShuYW1lLCBTb3VyY2VUeXBlKTtcblxuICAgICAgICBpZiAoIVNvdXJjZVR5cGUud29ya2VyU291cmNlVVJMKSB7XG4gICAgICAgICAgICByZXR1cm4gY2FsbGJhY2sobnVsbCwgbnVsbCk7XG4gICAgICAgIH1cblxuICAgICAgICB0aGlzLmRpc3BhdGNoZXIuYnJvYWRjYXN0KCdsb2FkV29ya2VyU291cmNlJywge1xuICAgICAgICAgICAgbmFtZTogbmFtZSxcbiAgICAgICAgICAgIHVybDogU291cmNlVHlwZS53b3JrZXJTb3VyY2VVUkxcbiAgICAgICAgfSwgY2FsbGJhY2spO1xuICAgIH1cblxuICAgIGdldExpZ2h0KCkge1xuICAgICAgICByZXR1cm4gdGhpcy5saWdodC5nZXRMaWdodCgpO1xuICAgIH1cblxuICAgIHNldExpZ2h0KGxpZ2h0T3B0aW9uczogTGlnaHRTcGVjaWZpY2F0aW9uKSB7XG4gICAgICAgIHRoaXMuX2NoZWNrTG9hZGVkKCk7XG5cbiAgICAgICAgY29uc3QgbGlnaHQgPSB0aGlzLmxpZ2h0LmdldExpZ2h0KCk7XG4gICAgICAgIGxldCBfdXBkYXRlID0gZmFsc2U7XG4gICAgICAgIGZvciAoY29uc3Qga2V5IGluIGxpZ2h0T3B0aW9ucykge1xuICAgICAgICAgICAgaWYgKCFkZWVwRXF1YWwobGlnaHRPcHRpb25zW2tleV0sIGxpZ2h0W2tleV0pKSB7XG4gICAgICAgICAgICAgICAgX3VwZGF0ZSA9IHRydWU7XG4gICAgICAgICAgICAgICAgYnJlYWs7XG4gICAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICAgICAgaWYgKCFfdXBkYXRlKSByZXR1cm47XG5cbiAgICAgICAgY29uc3QgcGFyYW1ldGVycyA9IHtcbiAgICAgICAgICAgIG5vdzogYnJvd3Nlci5ub3coKSxcbiAgICAgICAgICAgIHRyYW5zaXRpb246IGV4dGVuZCh7XG4gICAgICAgICAgICAgICAgZHVyYXRpb246IDMwMCxcbiAgICAgICAgICAgICAgICBkZWxheTogMFxuICAgICAgICAgICAgfSwgdGhpcy5zdHlsZXNoZWV0LnRyYW5zaXRpb24pXG4gICAgICAgIH07XG5cbiAgICAgICAgdGhpcy5saWdodC5zZXRMaWdodChsaWdodE9wdGlvbnMpO1xuICAgICAgICB0aGlzLmxpZ2h0LnVwZGF0ZVRyYW5zaXRpb25zKHBhcmFtZXRlcnMpO1xuICAgIH1cblxuICAgIF92YWxpZGF0ZSh2YWxpZGF0ZTogKHt9KSA9PiB2b2lkLCBrZXk6IHN0cmluZywgdmFsdWU6IGFueSwgcHJvcHM6IGFueSwgb3B0aW9ucz86IHt2YWxpZGF0ZT86IGJvb2xlYW59KSB7XG4gICAgICAgIGlmIChvcHRpb25zICYmIG9wdGlvbnMudmFsaWRhdGUgPT09IGZhbHNlKSB7XG4gICAgICAgICAgICByZXR1cm4gZmFsc2U7XG4gICAgICAgIH1cbiAgICAgICAgcmV0dXJuIGVtaXRWYWxpZGF0aW9uRXJyb3JzKHRoaXMsIHZhbGlkYXRlLmNhbGwodmFsaWRhdGVTdHlsZSwgZXh0ZW5kKHtcbiAgICAgICAgICAgIGtleToga2V5LFxuICAgICAgICAgICAgc3R5bGU6IHRoaXMuc2VyaWFsaXplKCksXG4gICAgICAgICAgICB2YWx1ZTogdmFsdWUsXG4gICAgICAgICAgICBzdHlsZVNwZWM6IHN0eWxlU3BlY1xuICAgICAgICB9LCBwcm9wcykpKTtcbiAgICB9XG5cbiAgICBfcmVtb3ZlKCkge1xuICAgICAgICBpZiAodGhpcy5fcmVxdWVzdCkge1xuICAgICAgICAgICAgdGhpcy5fcmVxdWVzdC5jYW5jZWwoKTtcbiAgICAgICAgICAgIHRoaXMuX3JlcXVlc3QgPSBudWxsO1xuICAgICAgICB9XG4gICAgICAgIGlmICh0aGlzLl9zcHJpdGVSZXF1ZXN0KSB7XG4gICAgICAgICAgICB0aGlzLl9zcHJpdGVSZXF1ZXN0LmNhbmNlbCgpO1xuICAgICAgICAgICAgdGhpcy5fc3ByaXRlUmVxdWVzdCA9IG51bGw7XG4gICAgICAgIH1cbiAgICAgICAgcnRsVGV4dFBsdWdpbkV2ZW50ZWQub2ZmKCdwbHVnaW5BdmFpbGFibGUnLCB0aGlzLl9ydGxUZXh0UGx1Z2luQ2FsbGJhY2spO1xuICAgICAgICBmb3IgKGNvbnN0IGlkIGluIHRoaXMuc291cmNlQ2FjaGVzKSB7XG4gICAgICAgICAgICB0aGlzLnNvdXJjZUNhY2hlc1tpZF0uY2xlYXJUaWxlcygpO1xuICAgICAgICB9XG4gICAgICAgIHRoaXMuZGlzcGF0Y2hlci5yZW1vdmUoKTtcbiAgICB9XG5cbiAgICBfY2xlYXJTb3VyY2UoaWQ6IHN0cmluZykge1xuICAgICAgICB0aGlzLnNvdXJjZUNhY2hlc1tpZF0uY2xlYXJUaWxlcygpO1xuICAgIH1cblxuICAgIF9yZWxvYWRTb3VyY2UoaWQ6IHN0cmluZykge1xuICAgICAgICB0aGlzLnNvdXJjZUNhY2hlc1tpZF0ucmVzdW1lKCk7XG4gICAgICAgIHRoaXMuc291cmNlQ2FjaGVzW2lkXS5yZWxvYWQoKTtcbiAgICB9XG5cbiAgICBfdXBkYXRlU291cmNlcyh0cmFuc2Zvcm06IFRyYW5zZm9ybSkge1xuICAgICAgICBmb3IgKGNvbnN0IGlkIGluIHRoaXMuc291cmNlQ2FjaGVzKSB7XG4gICAgICAgICAgICB0aGlzLnNvdXJjZUNhY2hlc1tpZF0udXBkYXRlKHRyYW5zZm9ybSk7XG4gICAgICAgIH1cbiAgICB9XG5cbiAgICBfZ2VuZXJhdGVDb2xsaXNpb25Cb3hlcygpIHtcbiAgICAgICAgZm9yIChjb25zdCBpZCBpbiB0aGlzLnNvdXJjZUNhY2hlcykge1xuICAgICAgICAgICAgdGhpcy5fcmVsb2FkU291cmNlKGlkKTtcbiAgICAgICAgfVxuICAgIH1cblxuICAgIF91cGRhdGVQbGFjZW1lbnQodHJhbnNmb3JtOiBUcmFuc2Zvcm0sIHNob3dDb2xsaXNpb25Cb3hlczogYm9vbGVhbiwgZmFkZUR1cmF0aW9uOiBudW1iZXIsIGNyb3NzU291cmNlQ29sbGlzaW9uczogYm9vbGVhbikge1xuICAgICAgICBsZXQgc3ltYm9sQnVja2V0c0NoYW5nZWQgPSBmYWxzZTtcbiAgICAgICAgbGV0IHBsYWNlbWVudENvbW1pdHRlZCA9IGZhbHNlO1xuXG4gICAgICAgIGNvbnN0IGxheWVyVGlsZXMgPSB7fTtcblxuICAgICAgICBmb3IgKGNvbnN0IGxheWVySUQgb2YgdGhpcy5fb3JkZXIpIHtcbiAgICAgICAgICAgIGNvbnN0IHN0eWxlTGF5ZXIgPSB0aGlzLl9sYXllcnNbbGF5ZXJJRF07XG4gICAgICAgICAgICBpZiAoc3R5bGVMYXllci50eXBlICE9PSAnc3ltYm9sJykgY29udGludWU7XG5cbiAgICAgICAgICAgIGlmICghbGF5ZXJUaWxlc1tzdHlsZUxheWVyLnNvdXJjZV0pIHtcbiAgICAgICAgICAgICAgICBjb25zdCBzb3VyY2VDYWNoZSA9IHRoaXMuc291cmNlQ2FjaGVzW3N0eWxlTGF5ZXIuc291cmNlXTtcbiAgICAgICAgICAgICAgICBsYXllclRpbGVzW3N0eWxlTGF5ZXIuc291cmNlXSA9IHNvdXJjZUNhY2hlLmdldFJlbmRlcmFibGVJZHModHJ1ZSlcbiAgICAgICAgICAgICAgICAgICAgLm1hcCgoaWQpID0+IHNvdXJjZUNhY2hlLmdldFRpbGVCeUlEKGlkKSlcbiAgICAgICAgICAgICAgICAgICAgLnNvcnQoKGEsIGIpID0+IChiLnRpbGVJRC5vdmVyc2NhbGVkWiAtIGEudGlsZUlELm92ZXJzY2FsZWRaKSB8fCAoYS50aWxlSUQuaXNMZXNzVGhhbihiLnRpbGVJRCkgPyAtMSA6IDEpKTtcbiAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgY29uc3QgbGF5ZXJCdWNrZXRzQ2hhbmdlZCA9IHRoaXMuY3Jvc3NUaWxlU3ltYm9sSW5kZXguYWRkTGF5ZXIoc3R5bGVMYXllciwgbGF5ZXJUaWxlc1tzdHlsZUxheWVyLnNvdXJjZV0sIHRyYW5zZm9ybS5jZW50ZXIubG5nKTtcbiAgICAgICAgICAgIHN5bWJvbEJ1Y2tldHNDaGFuZ2VkID0gc3ltYm9sQnVja2V0c0NoYW5nZWQgfHwgbGF5ZXJCdWNrZXRzQ2hhbmdlZDtcbiAgICAgICAgfVxuICAgICAgICB0aGlzLmNyb3NzVGlsZVN5bWJvbEluZGV4LnBydW5lVW51c2VkTGF5ZXJzKHRoaXMuX29yZGVyKTtcblxuICAgICAgICAvLyBBbnl0aGluZyB0aGF0IGNoYW5nZXMgb3VyIFwiaW4gcHJvZ3Jlc3NcIiBsYXllciBhbmQgdGlsZSBpbmRpY2VzIHJlcXVpcmVzIHVzXG4gICAgICAgIC8vIHRvIHN0YXJ0IG92ZXIuIFdoZW4gd2Ugc3RhcnQgb3Zlciwgd2UgZG8gYSBmdWxsIHBsYWNlbWVudCBpbnN0ZWFkIG9mIGluY3JlbWVudGFsXG4gICAgICAgIC8vIHRvIHByZXZlbnQgc3RhcnZhdGlvbi5cbiAgICAgICAgLy8gV2UgbmVlZCB0byByZXN0YXJ0IHBsYWNlbWVudCB0byBrZWVwIGxheWVyIGluZGljZXMgaW4gc3luYy5cbiAgICAgICAgY29uc3QgZm9yY2VGdWxsUGxhY2VtZW50ID0gdGhpcy5fbGF5ZXJPcmRlckNoYW5nZWQ7XG5cbiAgICAgICAgaWYgKGZvcmNlRnVsbFBsYWNlbWVudCB8fCAhdGhpcy5wYXVzZWFibGVQbGFjZW1lbnQgfHwgKHRoaXMucGF1c2VhYmxlUGxhY2VtZW50LmlzRG9uZSgpICYmICF0aGlzLnBsYWNlbWVudC5zdGlsbFJlY2VudChicm93c2VyLm5vdygpKSkpIHtcbiAgICAgICAgICAgIHRoaXMucGF1c2VhYmxlUGxhY2VtZW50ID0gbmV3IFBhdXNlYWJsZVBsYWNlbWVudCh0cmFuc2Zvcm0sIHRoaXMuX29yZGVyLCBmb3JjZUZ1bGxQbGFjZW1lbnQsIHNob3dDb2xsaXNpb25Cb3hlcywgZmFkZUR1cmF0aW9uLCBjcm9zc1NvdXJjZUNvbGxpc2lvbnMpO1xuICAgICAgICAgICAgdGhpcy5fbGF5ZXJPcmRlckNoYW5nZWQgPSBmYWxzZTtcbiAgICAgICAgfVxuXG4gICAgICAgIGlmICh0aGlzLnBhdXNlYWJsZVBsYWNlbWVudC5pc0RvbmUoKSkge1xuICAgICAgICAgICAgLy8gdGhlIGxhc3QgcGxhY2VtZW50IGZpbmlzaGVkIHJ1bm5pbmcsIGJ1dCB0aGUgbmV4dCBvbmUgaGFzbuKAmXRcbiAgICAgICAgICAgIC8vIHN0YXJ0ZWQgeWV0IGJlY2F1c2Ugb2YgdGhlIGBzdGlsbFJlY2VudGAgY2hlY2sgaW1tZWRpYXRlbHlcbiAgICAgICAgICAgIC8vIGFib3ZlLCBzbyBtYXJrIGl0IHN0YWxlIHRvIGVuc3VyZSB0aGF0IHdlIHJlcXVlc3QgYW5vdGhlclxuICAgICAgICAgICAgLy8gcmVuZGVyIGZyYW1lXG4gICAgICAgICAgICB0aGlzLnBsYWNlbWVudC5zZXRTdGFsZSgpO1xuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgdGhpcy5wYXVzZWFibGVQbGFjZW1lbnQuY29udGludWVQbGFjZW1lbnQodGhpcy5fb3JkZXIsIHRoaXMuX2xheWVycywgbGF5ZXJUaWxlcyk7XG5cbiAgICAgICAgICAgIGlmICh0aGlzLnBhdXNlYWJsZVBsYWNlbWVudC5pc0RvbmUoKSkge1xuICAgICAgICAgICAgICAgIHRoaXMucGxhY2VtZW50ID0gdGhpcy5wYXVzZWFibGVQbGFjZW1lbnQuY29tbWl0KHRoaXMucGxhY2VtZW50LCBicm93c2VyLm5vdygpKTtcbiAgICAgICAgICAgICAgICBwbGFjZW1lbnRDb21taXR0ZWQgPSB0cnVlO1xuICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICBpZiAoc3ltYm9sQnVja2V0c0NoYW5nZWQpIHtcbiAgICAgICAgICAgICAgICAvLyBzaW5jZSB0aGUgcGxhY2VtZW50IGdldHMgc3BsaXQgb3ZlciBtdWx0aXBsZSBmcmFtZXMgaXQgaXMgcG9zc2libGVcbiAgICAgICAgICAgICAgICAvLyB0aGVzZSBidWNrZXRzIHdlcmUgcHJvY2Vzc2VkIGJlZm9yZSB0aGV5IHdlcmUgY2hhbmdlZCBhbmQgc28gdGhlXG4gICAgICAgICAgICAgICAgLy8gcGxhY2VtZW50IGlzIGFscmVhZHkgc3RhbGUgd2hpbGUgaXQgaXMgaW4gcHJvZ3Jlc3NcbiAgICAgICAgICAgICAgICB0aGlzLnBhdXNlYWJsZVBsYWNlbWVudC5wbGFjZW1lbnQuc2V0U3RhbGUoKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfVxuXG4gICAgICAgIGlmIChwbGFjZW1lbnRDb21taXR0ZWQgfHwgc3ltYm9sQnVja2V0c0NoYW5nZWQpIHtcbiAgICAgICAgICAgIGZvciAoY29uc3QgbGF5ZXJJRCBvZiB0aGlzLl9vcmRlcikge1xuICAgICAgICAgICAgICAgIGNvbnN0IHN0eWxlTGF5ZXIgPSB0aGlzLl9sYXllcnNbbGF5ZXJJRF07XG4gICAgICAgICAgICAgICAgaWYgKHN0eWxlTGF5ZXIudHlwZSAhPT0gJ3N5bWJvbCcpIGNvbnRpbnVlO1xuICAgICAgICAgICAgICAgIHRoaXMucGxhY2VtZW50LnVwZGF0ZUxheWVyT3BhY2l0aWVzKHN0eWxlTGF5ZXIsIGxheWVyVGlsZXNbc3R5bGVMYXllci5zb3VyY2VdKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfVxuXG4gICAgICAgIC8vIG5lZWRzUmVuZGVyIGlzIGZhbHNlIHdoZW4gd2UgaGF2ZSBqdXN0IGZpbmlzaGVkIGEgcGxhY2VtZW50IHRoYXQgZGlkbid0IGNoYW5nZSB0aGUgdmlzaWJpbGl0eSBvZiBhbnkgc3ltYm9sc1xuICAgICAgICBjb25zdCBuZWVkc1JlcmVuZGVyID0gIXRoaXMucGF1c2VhYmxlUGxhY2VtZW50LmlzRG9uZSgpIHx8IHRoaXMucGxhY2VtZW50Lmhhc1RyYW5zaXRpb25zKGJyb3dzZXIubm93KCkpO1xuICAgICAgICByZXR1cm4gbmVlZHNSZXJlbmRlcjtcbiAgICB9XG5cbiAgICBfcmVsZWFzZVN5bWJvbEZhZGVUaWxlcygpIHtcbiAgICAgICAgZm9yIChjb25zdCBpZCBpbiB0aGlzLnNvdXJjZUNhY2hlcykge1xuICAgICAgICAgICAgdGhpcy5zb3VyY2VDYWNoZXNbaWRdLnJlbGVhc2VTeW1ib2xGYWRlVGlsZXMoKTtcbiAgICAgICAgfVxuICAgIH1cblxuICAgIC8vIENhbGxiYWNrcyBmcm9tIHdlYiB3b3JrZXJzXG5cbiAgICBnZXRJbWFnZXMobWFwSWQ6IHN0cmluZywgcGFyYW1zOiB7aWNvbnM6IEFycmF5PHN0cmluZz59LCBjYWxsYmFjazogQ2FsbGJhY2s8e1tzdHJpbmddOiBTdHlsZUltYWdlfT4pIHtcbiAgICAgICAgdGhpcy5pbWFnZU1hbmFnZXIuZ2V0SW1hZ2VzKHBhcmFtcy5pY29ucywgY2FsbGJhY2spO1xuICAgIH1cblxuICAgIGdldEdseXBocyhtYXBJZDogc3RyaW5nLCBwYXJhbXM6IHtzdGFja3M6IHtbc3RyaW5nXTogQXJyYXk8bnVtYmVyPn19LCBjYWxsYmFjazogQ2FsbGJhY2s8e1tzdHJpbmddOiB7W251bWJlcl06ID9TdHlsZUdseXBofX0+KSB7XG4gICAgICAgIHRoaXMuZ2x5cGhNYW5hZ2VyLmdldEdseXBocyhwYXJhbXMuc3RhY2tzLCBjYWxsYmFjayk7XG4gICAgfVxufVxuXG5TdHlsZS5nZXRTb3VyY2VUeXBlID0gZ2V0U291cmNlVHlwZTtcblN0eWxlLnNldFNvdXJjZVR5cGUgPSBzZXRTb3VyY2VUeXBlO1xuU3R5bGUucmVnaXN0ZXJGb3JQbHVnaW5BdmFpbGFiaWxpdHkgPSByZWdpc3RlckZvclBsdWdpbkF2YWlsYWJpbGl0eTtcblxuZXhwb3J0IGRlZmF1bHQgU3R5bGU7XG4iLCIvLyBAZmxvd1xuaW1wb3J0IHsgY3JlYXRlTGF5b3V0IH0gZnJvbSAnLi4vdXRpbC9zdHJ1Y3RfYXJyYXknO1xuXG5leHBvcnQgZGVmYXVsdCBjcmVhdGVMYXlvdXQoW1xuICAgIHsgbmFtZTogJ2FfcG9zJywgdHlwZTogJ0ludDE2JywgY29tcG9uZW50czogMiB9XG5dKTtcbiIsIi8vIEBmbG93XG5cbmltcG9ydCBhc3NlcnQgZnJvbSAnYXNzZXJ0JztcblxuaW1wb3J0IHR5cGUgUHJvZ3JhbSBmcm9tICcuL3Byb2dyYW0nO1xuaW1wb3J0IHR5cGUgVmVydGV4QnVmZmVyIGZyb20gJy4uL2dsL3ZlcnRleF9idWZmZXInO1xuaW1wb3J0IHR5cGUgSW5kZXhCdWZmZXIgZnJvbSAnLi4vZ2wvaW5kZXhfYnVmZmVyJztcbmltcG9ydCB0eXBlIENvbnRleHQgZnJvbSAnLi4vZ2wvY29udGV4dCc7XG5cbmNsYXNzIFZlcnRleEFycmF5T2JqZWN0IHtcbiAgICBjb250ZXh0OiBDb250ZXh0O1xuICAgIGJvdW5kUHJvZ3JhbTogP1Byb2dyYW08Kj47XG4gICAgYm91bmRMYXlvdXRWZXJ0ZXhCdWZmZXI6ID9WZXJ0ZXhCdWZmZXI7XG4gICAgYm91bmRQYWludFZlcnRleEJ1ZmZlcnM6IEFycmF5PFZlcnRleEJ1ZmZlcj47XG4gICAgYm91bmRJbmRleEJ1ZmZlcjogP0luZGV4QnVmZmVyO1xuICAgIGJvdW5kVmVydGV4T2Zmc2V0OiA/bnVtYmVyO1xuICAgIGJvdW5kRHluYW1pY1ZlcnRleEJ1ZmZlcjogP1ZlcnRleEJ1ZmZlcjtcbiAgICBib3VuZER5bmFtaWNWZXJ0ZXhCdWZmZXIyOiA/VmVydGV4QnVmZmVyO1xuICAgIHZhbzogYW55O1xuXG4gICAgY29uc3RydWN0b3IoKSB7XG4gICAgICAgIHRoaXMuYm91bmRQcm9ncmFtID0gbnVsbDtcbiAgICAgICAgdGhpcy5ib3VuZExheW91dFZlcnRleEJ1ZmZlciA9IG51bGw7XG4gICAgICAgIHRoaXMuYm91bmRQYWludFZlcnRleEJ1ZmZlcnMgPSBbXTtcbiAgICAgICAgdGhpcy5ib3VuZEluZGV4QnVmZmVyID0gbnVsbDtcbiAgICAgICAgdGhpcy5ib3VuZFZlcnRleE9mZnNldCA9IG51bGw7XG4gICAgICAgIHRoaXMuYm91bmREeW5hbWljVmVydGV4QnVmZmVyID0gbnVsbDtcbiAgICAgICAgdGhpcy52YW8gPSBudWxsO1xuICAgIH1cblxuICAgIGJpbmQoY29udGV4dDogQ29udGV4dCxcbiAgICAgICAgIHByb2dyYW06IFByb2dyYW08Kj4sXG4gICAgICAgICBsYXlvdXRWZXJ0ZXhCdWZmZXI6IFZlcnRleEJ1ZmZlcixcbiAgICAgICAgIHBhaW50VmVydGV4QnVmZmVyczogQXJyYXk8VmVydGV4QnVmZmVyPixcbiAgICAgICAgIGluZGV4QnVmZmVyOiA/SW5kZXhCdWZmZXIsXG4gICAgICAgICB2ZXJ0ZXhPZmZzZXQ6ID9udW1iZXIsXG4gICAgICAgICBkeW5hbWljVmVydGV4QnVmZmVyOiA/VmVydGV4QnVmZmVyLFxuICAgICAgICAgZHluYW1pY1ZlcnRleEJ1ZmZlcjI6ID9WZXJ0ZXhCdWZmZXIpIHtcblxuICAgICAgICB0aGlzLmNvbnRleHQgPSBjb250ZXh0O1xuXG4gICAgICAgIGxldCBwYWludEJ1ZmZlcnNEaWZmZXIgPSB0aGlzLmJvdW5kUGFpbnRWZXJ0ZXhCdWZmZXJzLmxlbmd0aCAhPT0gcGFpbnRWZXJ0ZXhCdWZmZXJzLmxlbmd0aDtcbiAgICAgICAgZm9yIChsZXQgaSA9IDA7ICFwYWludEJ1ZmZlcnNEaWZmZXIgJiYgaSA8IHBhaW50VmVydGV4QnVmZmVycy5sZW5ndGg7IGkrKykge1xuICAgICAgICAgICAgaWYgKHRoaXMuYm91bmRQYWludFZlcnRleEJ1ZmZlcnNbaV0gIT09IHBhaW50VmVydGV4QnVmZmVyc1tpXSkge1xuICAgICAgICAgICAgICAgIHBhaW50QnVmZmVyc0RpZmZlciA9IHRydWU7XG4gICAgICAgICAgICB9XG4gICAgICAgIH1cblxuICAgICAgICBjb25zdCBpc0ZyZXNoQmluZFJlcXVpcmVkID0gKFxuICAgICAgICAgICAgIXRoaXMudmFvIHx8XG4gICAgICAgICAgICB0aGlzLmJvdW5kUHJvZ3JhbSAhPT0gcHJvZ3JhbSB8fFxuICAgICAgICAgICAgdGhpcy5ib3VuZExheW91dFZlcnRleEJ1ZmZlciAhPT0gbGF5b3V0VmVydGV4QnVmZmVyIHx8XG4gICAgICAgICAgICBwYWludEJ1ZmZlcnNEaWZmZXIgfHxcbiAgICAgICAgICAgIHRoaXMuYm91bmRJbmRleEJ1ZmZlciAhPT0gaW5kZXhCdWZmZXIgfHxcbiAgICAgICAgICAgIHRoaXMuYm91bmRWZXJ0ZXhPZmZzZXQgIT09IHZlcnRleE9mZnNldCB8fFxuICAgICAgICAgICAgdGhpcy5ib3VuZER5bmFtaWNWZXJ0ZXhCdWZmZXIgIT09IGR5bmFtaWNWZXJ0ZXhCdWZmZXIgfHxcbiAgICAgICAgICAgIHRoaXMuYm91bmREeW5hbWljVmVydGV4QnVmZmVyMiAhPT0gZHluYW1pY1ZlcnRleEJ1ZmZlcjJcbiAgICAgICAgKTtcblxuICAgICAgICBpZiAoIWNvbnRleHQuZXh0VmVydGV4QXJyYXlPYmplY3QgfHwgaXNGcmVzaEJpbmRSZXF1aXJlZCkge1xuICAgICAgICAgICAgdGhpcy5mcmVzaEJpbmQocHJvZ3JhbSwgbGF5b3V0VmVydGV4QnVmZmVyLCBwYWludFZlcnRleEJ1ZmZlcnMsIGluZGV4QnVmZmVyLCB2ZXJ0ZXhPZmZzZXQsIGR5bmFtaWNWZXJ0ZXhCdWZmZXIsIGR5bmFtaWNWZXJ0ZXhCdWZmZXIyKTtcbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgIGNvbnRleHQuYmluZFZlcnRleEFycmF5T0VTLnNldCh0aGlzLnZhbyk7XG5cbiAgICAgICAgICAgIGlmIChkeW5hbWljVmVydGV4QnVmZmVyKSB7XG4gICAgICAgICAgICAgICAgLy8gVGhlIGJ1ZmZlciBtYXkgaGF2ZSBiZWVuIHVwZGF0ZWQuIFJlYmluZCB0byB1cGxvYWQgZGF0YS5cbiAgICAgICAgICAgICAgICBkeW5hbWljVmVydGV4QnVmZmVyLmJpbmQoKTtcbiAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgaWYgKGluZGV4QnVmZmVyICYmIGluZGV4QnVmZmVyLmR5bmFtaWNEcmF3KSB7XG4gICAgICAgICAgICAgICAgaW5kZXhCdWZmZXIuYmluZCgpO1xuICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICBpZiAoZHluYW1pY1ZlcnRleEJ1ZmZlcjIpIHtcbiAgICAgICAgICAgICAgICBkeW5hbWljVmVydGV4QnVmZmVyMi5iaW5kKCk7XG4gICAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICB9XG5cbiAgICBmcmVzaEJpbmQocHJvZ3JhbTogUHJvZ3JhbTwqPixcbiAgICAgICAgICAgICAgbGF5b3V0VmVydGV4QnVmZmVyOiBWZXJ0ZXhCdWZmZXIsXG4gICAgICAgICAgICAgIHBhaW50VmVydGV4QnVmZmVyczogQXJyYXk8VmVydGV4QnVmZmVyPixcbiAgICAgICAgICAgICAgaW5kZXhCdWZmZXI6ID9JbmRleEJ1ZmZlcixcbiAgICAgICAgICAgICAgdmVydGV4T2Zmc2V0OiA/bnVtYmVyLFxuICAgICAgICAgICAgICBkeW5hbWljVmVydGV4QnVmZmVyOiA/VmVydGV4QnVmZmVyLFxuICAgICAgICAgICAgICBkeW5hbWljVmVydGV4QnVmZmVyMjogP1ZlcnRleEJ1ZmZlcikge1xuICAgICAgICBsZXQgbnVtUHJldkF0dHJpYnV0ZXM7XG4gICAgICAgIGNvbnN0IG51bU5leHRBdHRyaWJ1dGVzID0gcHJvZ3JhbS5udW1BdHRyaWJ1dGVzO1xuXG4gICAgICAgIGNvbnN0IGNvbnRleHQgPSB0aGlzLmNvbnRleHQ7XG4gICAgICAgIGNvbnN0IGdsID0gY29udGV4dC5nbDtcblxuICAgICAgICBpZiAoY29udGV4dC5leHRWZXJ0ZXhBcnJheU9iamVjdCkge1xuICAgICAgICAgICAgaWYgKHRoaXMudmFvKSB0aGlzLmRlc3Ryb3koKTtcbiAgICAgICAgICAgIHRoaXMudmFvID0gY29udGV4dC5leHRWZXJ0ZXhBcnJheU9iamVjdC5jcmVhdGVWZXJ0ZXhBcnJheU9FUygpO1xuICAgICAgICAgICAgY29udGV4dC5iaW5kVmVydGV4QXJyYXlPRVMuc2V0KHRoaXMudmFvKTtcbiAgICAgICAgICAgIG51bVByZXZBdHRyaWJ1dGVzID0gMDtcblxuICAgICAgICAgICAgLy8gc3RvcmUgdGhlIGFyZ3VtZW50cyBzbyB0aGF0IHdlIGNhbiB2ZXJpZnkgdGhlbSB3aGVuIHRoZSB2YW8gaXMgYm91bmQgYWdhaW5cbiAgICAgICAgICAgIHRoaXMuYm91bmRQcm9ncmFtID0gcHJvZ3JhbTtcbiAgICAgICAgICAgIHRoaXMuYm91bmRMYXlvdXRWZXJ0ZXhCdWZmZXIgPSBsYXlvdXRWZXJ0ZXhCdWZmZXI7XG4gICAgICAgICAgICB0aGlzLmJvdW5kUGFpbnRWZXJ0ZXhCdWZmZXJzID0gcGFpbnRWZXJ0ZXhCdWZmZXJzO1xuICAgICAgICAgICAgdGhpcy5ib3VuZEluZGV4QnVmZmVyID0gaW5kZXhCdWZmZXI7XG4gICAgICAgICAgICB0aGlzLmJvdW5kVmVydGV4T2Zmc2V0ID0gdmVydGV4T2Zmc2V0O1xuICAgICAgICAgICAgdGhpcy5ib3VuZER5bmFtaWNWZXJ0ZXhCdWZmZXIgPSBkeW5hbWljVmVydGV4QnVmZmVyO1xuICAgICAgICAgICAgdGhpcy5ib3VuZER5bmFtaWNWZXJ0ZXhCdWZmZXIyID0gZHluYW1pY1ZlcnRleEJ1ZmZlcjI7XG5cbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgIG51bVByZXZBdHRyaWJ1dGVzID0gY29udGV4dC5jdXJyZW50TnVtQXR0cmlidXRlcyB8fCAwO1xuXG4gICAgICAgICAgICAvLyBEaXNhYmxlIGFsbCBhdHRyaWJ1dGVzIGZyb20gdGhlIHByZXZpb3VzIHByb2dyYW0gdGhhdCBhcmVuJ3QgdXNlZCBpblxuICAgICAgICAgICAgLy8gdGhlIG5ldyBwcm9ncmFtLiBOb3RlOiBhdHRyaWJ1dGUgaW5kaWNlcyBhcmUgKm5vdCogcHJvZ3JhbSBzcGVjaWZpYyFcbiAgICAgICAgICAgIGZvciAobGV0IGkgPSBudW1OZXh0QXR0cmlidXRlczsgaSA8IG51bVByZXZBdHRyaWJ1dGVzOyBpKyspIHtcbiAgICAgICAgICAgICAgICAvLyBXZWJHTCBicmVha3MgaWYgeW91IGRpc2FibGUgYXR0cmlidXRlIDAuXG4gICAgICAgICAgICAgICAgLy8gaHR0cDovL3N0YWNrb3ZlcmZsb3cuY29tL3F1ZXN0aW9ucy8yMDMwNTIzMVxuICAgICAgICAgICAgICAgIGFzc2VydChpICE9PSAwKTtcbiAgICAgICAgICAgICAgICBnbC5kaXNhYmxlVmVydGV4QXR0cmliQXJyYXkoaSk7XG4gICAgICAgICAgICB9XG4gICAgICAgIH1cblxuICAgICAgICBsYXlvdXRWZXJ0ZXhCdWZmZXIuZW5hYmxlQXR0cmlidXRlcyhnbCwgcHJvZ3JhbSk7XG4gICAgICAgIGZvciAoY29uc3QgdmVydGV4QnVmZmVyIG9mIHBhaW50VmVydGV4QnVmZmVycykge1xuICAgICAgICAgICAgdmVydGV4QnVmZmVyLmVuYWJsZUF0dHJpYnV0ZXMoZ2wsIHByb2dyYW0pO1xuICAgICAgICB9XG5cbiAgICAgICAgaWYgKGR5bmFtaWNWZXJ0ZXhCdWZmZXIpIHtcbiAgICAgICAgICAgIGR5bmFtaWNWZXJ0ZXhCdWZmZXIuZW5hYmxlQXR0cmlidXRlcyhnbCwgcHJvZ3JhbSk7XG4gICAgICAgIH1cbiAgICAgICAgaWYgKGR5bmFtaWNWZXJ0ZXhCdWZmZXIyKSB7XG4gICAgICAgICAgICBkeW5hbWljVmVydGV4QnVmZmVyMi5lbmFibGVBdHRyaWJ1dGVzKGdsLCBwcm9ncmFtKTtcbiAgICAgICAgfVxuXG4gICAgICAgIGxheW91dFZlcnRleEJ1ZmZlci5iaW5kKCk7XG4gICAgICAgIGxheW91dFZlcnRleEJ1ZmZlci5zZXRWZXJ0ZXhBdHRyaWJQb2ludGVycyhnbCwgcHJvZ3JhbSwgdmVydGV4T2Zmc2V0KTtcbiAgICAgICAgZm9yIChjb25zdCB2ZXJ0ZXhCdWZmZXIgb2YgcGFpbnRWZXJ0ZXhCdWZmZXJzKSB7XG4gICAgICAgICAgICB2ZXJ0ZXhCdWZmZXIuYmluZCgpO1xuICAgICAgICAgICAgdmVydGV4QnVmZmVyLnNldFZlcnRleEF0dHJpYlBvaW50ZXJzKGdsLCBwcm9ncmFtLCB2ZXJ0ZXhPZmZzZXQpO1xuICAgICAgICB9XG5cbiAgICAgICAgaWYgKGR5bmFtaWNWZXJ0ZXhCdWZmZXIpIHtcbiAgICAgICAgICAgIGR5bmFtaWNWZXJ0ZXhCdWZmZXIuYmluZCgpO1xuICAgICAgICAgICAgZHluYW1pY1ZlcnRleEJ1ZmZlci5zZXRWZXJ0ZXhBdHRyaWJQb2ludGVycyhnbCwgcHJvZ3JhbSwgdmVydGV4T2Zmc2V0KTtcbiAgICAgICAgfVxuICAgICAgICBpZiAoaW5kZXhCdWZmZXIpIHtcbiAgICAgICAgICAgIGluZGV4QnVmZmVyLmJpbmQoKTtcbiAgICAgICAgfVxuICAgICAgICBpZiAoZHluYW1pY1ZlcnRleEJ1ZmZlcjIpIHtcbiAgICAgICAgICAgIGR5bmFtaWNWZXJ0ZXhCdWZmZXIyLmJpbmQoKTtcbiAgICAgICAgICAgIGR5bmFtaWNWZXJ0ZXhCdWZmZXIyLnNldFZlcnRleEF0dHJpYlBvaW50ZXJzKGdsLCBwcm9ncmFtLCB2ZXJ0ZXhPZmZzZXQpO1xuICAgICAgICB9XG5cbiAgICAgICAgY29udGV4dC5jdXJyZW50TnVtQXR0cmlidXRlcyA9IG51bU5leHRBdHRyaWJ1dGVzO1xuICAgIH1cblxuICAgIGRlc3Ryb3koKSB7XG4gICAgICAgIGlmICh0aGlzLnZhbykge1xuICAgICAgICAgICAgdGhpcy5jb250ZXh0LmV4dFZlcnRleEFycmF5T2JqZWN0LmRlbGV0ZVZlcnRleEFycmF5T0VTKHRoaXMudmFvKTtcbiAgICAgICAgICAgIHRoaXMudmFvID0gbnVsbDtcbiAgICAgICAgfVxuICAgIH1cbn1cblxuZXhwb3J0IGRlZmF1bHQgVmVydGV4QXJyYXlPYmplY3Q7XG4iLCIvLyBAZmxvd1xuXG5pbXBvcnQgYnJvd3NlciBmcm9tICcuLi91dGlsL2Jyb3dzZXInO1xuXG5pbXBvcnQgc2hhZGVycyBmcm9tICcuLi9zaGFkZXJzJztcbmltcG9ydCBhc3NlcnQgZnJvbSAnYXNzZXJ0JztcbmltcG9ydCBQcm9ncmFtQ29uZmlndXJhdGlvbiBmcm9tICcuLi9kYXRhL3Byb2dyYW1fY29uZmlndXJhdGlvbic7XG5pbXBvcnQgVmVydGV4QXJyYXlPYmplY3QgZnJvbSAnLi92ZXJ0ZXhfYXJyYXlfb2JqZWN0JztcbmltcG9ydCBDb250ZXh0IGZyb20gJy4uL2dsL2NvbnRleHQnO1xuXG5pbXBvcnQgdHlwZSBTZWdtZW50VmVjdG9yIGZyb20gJy4uL2RhdGEvc2VnbWVudCc7XG5pbXBvcnQgdHlwZSBWZXJ0ZXhCdWZmZXIgZnJvbSAnLi4vZ2wvdmVydGV4X2J1ZmZlcic7XG5pbXBvcnQgdHlwZSBJbmRleEJ1ZmZlciBmcm9tICcuLi9nbC9pbmRleF9idWZmZXInO1xuaW1wb3J0IHR5cGUgRGVwdGhNb2RlIGZyb20gJy4uL2dsL2RlcHRoX21vZGUnO1xuaW1wb3J0IHR5cGUgU3RlbmNpbE1vZGUgZnJvbSAnLi4vZ2wvc3RlbmNpbF9tb2RlJztcbmltcG9ydCB0eXBlIENvbG9yTW9kZSBmcm9tICcuLi9nbC9jb2xvcl9tb2RlJztcbmltcG9ydCB0eXBlIHtVbmlmb3JtQmluZGluZ3MsIFVuaWZvcm1WYWx1ZXMsIFVuaWZvcm1Mb2NhdGlvbnN9IGZyb20gJy4vdW5pZm9ybV9iaW5kaW5nJztcblxuZXhwb3J0IHR5cGUgRHJhd01vZGUgPVxuICAgIHwgJFByb3BlcnR5VHlwZTxXZWJHTFJlbmRlcmluZ0NvbnRleHQsICdMSU5FUyc+XG4gICAgfCAkUHJvcGVydHlUeXBlPFdlYkdMUmVuZGVyaW5nQ29udGV4dCwgJ1RSSUFOR0xFUyc+XG4gICAgfCAkUHJvcGVydHlUeXBlPFdlYkdMUmVuZGVyaW5nQ29udGV4dCwgJ0xJTkVfU1RSSVAnPjtcblxuY2xhc3MgUHJvZ3JhbTxVczogVW5pZm9ybUJpbmRpbmdzPiB7XG4gICAgcHJvZ3JhbTogV2ViR0xQcm9ncmFtO1xuICAgIGF0dHJpYnV0ZXM6IHtbc3RyaW5nXTogbnVtYmVyfTtcbiAgICBudW1BdHRyaWJ1dGVzOiBudW1iZXI7XG4gICAgZml4ZWRVbmlmb3JtczogVXM7XG4gICAgYmluZGVyVW5pZm9ybXM6IFVuaWZvcm1CaW5kaW5ncztcblxuICAgIGNvbnN0cnVjdG9yKGNvbnRleHQ6IENvbnRleHQsXG4gICAgICAgICAgICAgICAgc291cmNlOiB7ZnJhZ21lbnRTb3VyY2U6IHN0cmluZywgdmVydGV4U291cmNlOiBzdHJpbmd9LFxuICAgICAgICAgICAgICAgIGNvbmZpZ3VyYXRpb246IFByb2dyYW1Db25maWd1cmF0aW9uLFxuICAgICAgICAgICAgICAgIGZpeGVkVW5pZm9ybXM6IChDb250ZXh0LCBVbmlmb3JtTG9jYXRpb25zKSA9PiBVcyxcbiAgICAgICAgICAgICAgICBzaG93T3ZlcmRyYXdJbnNwZWN0b3I6IGJvb2xlYW4pIHtcbiAgICAgICAgY29uc3QgZ2wgPSBjb250ZXh0LmdsO1xuICAgICAgICB0aGlzLnByb2dyYW0gPSBnbC5jcmVhdGVQcm9ncmFtKCk7XG5cbiAgICAgICAgY29uc3QgZGVmaW5lcyA9IGNvbmZpZ3VyYXRpb24uZGVmaW5lcygpLmNvbmNhdChcbiAgICAgICAgICAgIGAjZGVmaW5lIERFVklDRV9QSVhFTF9SQVRJTyAke2Jyb3dzZXIuZGV2aWNlUGl4ZWxSYXRpby50b0ZpeGVkKDEpfWApO1xuICAgICAgICBpZiAoc2hvd092ZXJkcmF3SW5zcGVjdG9yKSB7XG4gICAgICAgICAgICBkZWZpbmVzLnB1c2goJyNkZWZpbmUgT1ZFUkRSQVdfSU5TUEVDVE9SOycpO1xuICAgICAgICB9XG5cbiAgICAgICAgY29uc3QgZnJhZ21lbnRTb3VyY2UgPSBkZWZpbmVzLmNvbmNhdChzaGFkZXJzLnByZWx1ZGUuZnJhZ21lbnRTb3VyY2UsIHNvdXJjZS5mcmFnbWVudFNvdXJjZSkuam9pbignXFxuJyk7XG4gICAgICAgIGNvbnN0IHZlcnRleFNvdXJjZSA9IGRlZmluZXMuY29uY2F0KHNoYWRlcnMucHJlbHVkZS52ZXJ0ZXhTb3VyY2UsIHNvdXJjZS52ZXJ0ZXhTb3VyY2UpLmpvaW4oJ1xcbicpO1xuICAgICAgICBjb25zdCBmcmFnbWVudFNoYWRlciA9IGdsLmNyZWF0ZVNoYWRlcihnbC5GUkFHTUVOVF9TSEFERVIpO1xuICAgICAgICBnbC5zaGFkZXJTb3VyY2UoZnJhZ21lbnRTaGFkZXIsIGZyYWdtZW50U291cmNlKTtcbiAgICAgICAgZ2wuY29tcGlsZVNoYWRlcihmcmFnbWVudFNoYWRlcik7XG4gICAgICAgIGFzc2VydChnbC5nZXRTaGFkZXJQYXJhbWV0ZXIoZnJhZ21lbnRTaGFkZXIsIGdsLkNPTVBJTEVfU1RBVFVTKSwgKGdsLmdldFNoYWRlckluZm9Mb2coZnJhZ21lbnRTaGFkZXIpOiBhbnkpKTtcbiAgICAgICAgZ2wuYXR0YWNoU2hhZGVyKHRoaXMucHJvZ3JhbSwgZnJhZ21lbnRTaGFkZXIpO1xuXG4gICAgICAgIGNvbnN0IHZlcnRleFNoYWRlciA9IGdsLmNyZWF0ZVNoYWRlcihnbC5WRVJURVhfU0hBREVSKTtcbiAgICAgICAgZ2wuc2hhZGVyU291cmNlKHZlcnRleFNoYWRlciwgdmVydGV4U291cmNlKTtcbiAgICAgICAgZ2wuY29tcGlsZVNoYWRlcih2ZXJ0ZXhTaGFkZXIpO1xuICAgICAgICBhc3NlcnQoZ2wuZ2V0U2hhZGVyUGFyYW1ldGVyKHZlcnRleFNoYWRlciwgZ2wuQ09NUElMRV9TVEFUVVMpLCAoZ2wuZ2V0U2hhZGVySW5mb0xvZyh2ZXJ0ZXhTaGFkZXIpOiBhbnkpKTtcbiAgICAgICAgZ2wuYXR0YWNoU2hhZGVyKHRoaXMucHJvZ3JhbSwgdmVydGV4U2hhZGVyKTtcblxuICAgICAgICAvLyBNYW51YWxseSBiaW5kIGxheW91dCBhdHRyaWJ1dGVzIGluIHRoZSBvcmRlciBkZWZpbmVkIGJ5IHRoZWlyXG4gICAgICAgIC8vIFByb2dyYW1JbnRlcmZhY2Ugc28gdGhhdCB3ZSBkb24ndCBkeW5hbWljYWxseSBsaW5rIGFuIHVudXNlZFxuICAgICAgICAvLyBhdHRyaWJ1dGUgYXQgcG9zaXRpb24gMCwgd2hpY2ggY2FuIGNhdXNlIHJlbmRlcmluZyB0byBmYWlsIGZvciBhblxuICAgICAgICAvLyBlbnRpcmUgbGF5ZXIgKHNlZSAjNDYwNywgIzQ3MjgpXG4gICAgICAgIGNvbnN0IGxheW91dEF0dHJpYnV0ZXMgPSBjb25maWd1cmF0aW9uLmxheW91dEF0dHJpYnV0ZXMgfHwgW107XG4gICAgICAgIGZvciAobGV0IGkgPSAwOyBpIDwgbGF5b3V0QXR0cmlidXRlcy5sZW5ndGg7IGkrKykge1xuICAgICAgICAgICAgZ2wuYmluZEF0dHJpYkxvY2F0aW9uKHRoaXMucHJvZ3JhbSwgaSwgbGF5b3V0QXR0cmlidXRlc1tpXS5uYW1lKTtcbiAgICAgICAgfVxuXG4gICAgICAgIGdsLmxpbmtQcm9ncmFtKHRoaXMucHJvZ3JhbSk7XG4gICAgICAgIGFzc2VydChnbC5nZXRQcm9ncmFtUGFyYW1ldGVyKHRoaXMucHJvZ3JhbSwgZ2wuTElOS19TVEFUVVMpLCAoZ2wuZ2V0UHJvZ3JhbUluZm9Mb2codGhpcy5wcm9ncmFtKTogYW55KSk7XG5cbiAgICAgICAgdGhpcy5udW1BdHRyaWJ1dGVzID0gZ2wuZ2V0UHJvZ3JhbVBhcmFtZXRlcih0aGlzLnByb2dyYW0sIGdsLkFDVElWRV9BVFRSSUJVVEVTKTtcblxuICAgICAgICB0aGlzLmF0dHJpYnV0ZXMgPSB7fTtcbiAgICAgICAgY29uc3QgdW5pZm9ybUxvY2F0aW9ucyA9IHt9O1xuXG4gICAgICAgIGZvciAobGV0IGkgPSAwOyBpIDwgdGhpcy5udW1BdHRyaWJ1dGVzOyBpKyspIHtcbiAgICAgICAgICAgIGNvbnN0IGF0dHJpYnV0ZSA9IGdsLmdldEFjdGl2ZUF0dHJpYih0aGlzLnByb2dyYW0sIGkpO1xuICAgICAgICAgICAgaWYgKGF0dHJpYnV0ZSkge1xuICAgICAgICAgICAgICAgIHRoaXMuYXR0cmlidXRlc1thdHRyaWJ1dGUubmFtZV0gPSBnbC5nZXRBdHRyaWJMb2NhdGlvbih0aGlzLnByb2dyYW0sIGF0dHJpYnV0ZS5uYW1lKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfVxuXG4gICAgICAgIGNvbnN0IG51bVVuaWZvcm1zID0gZ2wuZ2V0UHJvZ3JhbVBhcmFtZXRlcih0aGlzLnByb2dyYW0sIGdsLkFDVElWRV9VTklGT1JNUyk7XG4gICAgICAgIGZvciAobGV0IGkgPSAwOyBpIDwgbnVtVW5pZm9ybXM7IGkrKykge1xuICAgICAgICAgICAgY29uc3QgdW5pZm9ybSA9IGdsLmdldEFjdGl2ZVVuaWZvcm0odGhpcy5wcm9ncmFtLCBpKTtcbiAgICAgICAgICAgIGlmICh1bmlmb3JtKSB7XG4gICAgICAgICAgICAgICAgdW5pZm9ybUxvY2F0aW9uc1t1bmlmb3JtLm5hbWVdID0gZ2wuZ2V0VW5pZm9ybUxvY2F0aW9uKHRoaXMucHJvZ3JhbSwgdW5pZm9ybS5uYW1lKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfVxuXG4gICAgICAgIHRoaXMuZml4ZWRVbmlmb3JtcyA9IGZpeGVkVW5pZm9ybXMoY29udGV4dCwgdW5pZm9ybUxvY2F0aW9ucyk7XG4gICAgICAgIHRoaXMuYmluZGVyVW5pZm9ybXMgPSBjb25maWd1cmF0aW9uLmdldFVuaWZvcm1zKGNvbnRleHQsIHVuaWZvcm1Mb2NhdGlvbnMpO1xuICAgIH1cblxuICAgIGRyYXcoY29udGV4dDogQ29udGV4dCxcbiAgICAgICAgIGRyYXdNb2RlOiBEcmF3TW9kZSxcbiAgICAgICAgIGRlcHRoTW9kZTogJFJlYWRPbmx5PERlcHRoTW9kZT4sXG4gICAgICAgICBzdGVuY2lsTW9kZTogJFJlYWRPbmx5PFN0ZW5jaWxNb2RlPixcbiAgICAgICAgIGNvbG9yTW9kZTogJFJlYWRPbmx5PENvbG9yTW9kZT4sXG4gICAgICAgICB1bmlmb3JtVmFsdWVzOiBVbmlmb3JtVmFsdWVzPFVzPixcbiAgICAgICAgIGxheWVySUQ6IHN0cmluZyxcbiAgICAgICAgIGxheW91dFZlcnRleEJ1ZmZlcjogVmVydGV4QnVmZmVyLFxuICAgICAgICAgaW5kZXhCdWZmZXI6IEluZGV4QnVmZmVyLFxuICAgICAgICAgc2VnbWVudHM6IFNlZ21lbnRWZWN0b3IsXG4gICAgICAgICBjdXJyZW50UHJvcGVydGllczogYW55LFxuICAgICAgICAgem9vbTogP251bWJlcixcbiAgICAgICAgIGNvbmZpZ3VyYXRpb246ID9Qcm9ncmFtQ29uZmlndXJhdGlvbixcbiAgICAgICAgIGR5bmFtaWNMYXlvdXRCdWZmZXI6ID9WZXJ0ZXhCdWZmZXIsXG4gICAgICAgICBkeW5hbWljTGF5b3V0QnVmZmVyMjogP1ZlcnRleEJ1ZmZlcikge1xuXG4gICAgICAgIGNvbnN0IGdsID0gY29udGV4dC5nbDtcblxuICAgICAgICBjb250ZXh0LnByb2dyYW0uc2V0KHRoaXMucHJvZ3JhbSk7XG4gICAgICAgIGNvbnRleHQuc2V0RGVwdGhNb2RlKGRlcHRoTW9kZSk7XG4gICAgICAgIGNvbnRleHQuc2V0U3RlbmNpbE1vZGUoc3RlbmNpbE1vZGUpO1xuICAgICAgICBjb250ZXh0LnNldENvbG9yTW9kZShjb2xvck1vZGUpO1xuXG4gICAgICAgIGZvciAoY29uc3QgbmFtZSBpbiB0aGlzLmZpeGVkVW5pZm9ybXMpIHtcbiAgICAgICAgICAgIHRoaXMuZml4ZWRVbmlmb3Jtc1tuYW1lXS5zZXQodW5pZm9ybVZhbHVlc1tuYW1lXSk7XG4gICAgICAgIH1cblxuICAgICAgICBpZiAoY29uZmlndXJhdGlvbikge1xuICAgICAgICAgICAgY29uZmlndXJhdGlvbi5zZXRVbmlmb3Jtcyhjb250ZXh0LCB0aGlzLmJpbmRlclVuaWZvcm1zLCBjdXJyZW50UHJvcGVydGllcywge3pvb206ICh6b29tOiBhbnkpfSk7XG4gICAgICAgIH1cblxuICAgICAgICBjb25zdCBwcmltaXRpdmVTaXplID0ge1xuICAgICAgICAgICAgW2dsLkxJTkVTXTogMixcbiAgICAgICAgICAgIFtnbC5UUklBTkdMRVNdOiAzLFxuICAgICAgICAgICAgW2dsLkxJTkVfU1RSSVBdOiAxXG4gICAgICAgIH1bZHJhd01vZGVdO1xuXG4gICAgICAgIGZvciAoY29uc3Qgc2VnbWVudCBvZiBzZWdtZW50cy5nZXQoKSkge1xuICAgICAgICAgICAgY29uc3QgdmFvcyA9IHNlZ21lbnQudmFvcyB8fCAoc2VnbWVudC52YW9zID0ge30pO1xuICAgICAgICAgICAgY29uc3QgdmFvOiBWZXJ0ZXhBcnJheU9iamVjdCA9IHZhb3NbbGF5ZXJJRF0gfHwgKHZhb3NbbGF5ZXJJRF0gPSBuZXcgVmVydGV4QXJyYXlPYmplY3QoKSk7XG5cbiAgICAgICAgICAgIHZhby5iaW5kKFxuICAgICAgICAgICAgICAgIGNvbnRleHQsXG4gICAgICAgICAgICAgICAgdGhpcyxcbiAgICAgICAgICAgICAgICBsYXlvdXRWZXJ0ZXhCdWZmZXIsXG4gICAgICAgICAgICAgICAgY29uZmlndXJhdGlvbiA/IGNvbmZpZ3VyYXRpb24uZ2V0UGFpbnRWZXJ0ZXhCdWZmZXJzKCkgOiBbXSxcbiAgICAgICAgICAgICAgICBpbmRleEJ1ZmZlcixcbiAgICAgICAgICAgICAgICBzZWdtZW50LnZlcnRleE9mZnNldCxcbiAgICAgICAgICAgICAgICBkeW5hbWljTGF5b3V0QnVmZmVyLFxuICAgICAgICAgICAgICAgIGR5bmFtaWNMYXlvdXRCdWZmZXIyXG4gICAgICAgICAgICApO1xuXG4gICAgICAgICAgICBnbC5kcmF3RWxlbWVudHMoXG4gICAgICAgICAgICAgICAgZHJhd01vZGUsXG4gICAgICAgICAgICAgICAgc2VnbWVudC5wcmltaXRpdmVMZW5ndGggKiBwcmltaXRpdmVTaXplLFxuICAgICAgICAgICAgICAgIGdsLlVOU0lHTkVEX1NIT1JULFxuICAgICAgICAgICAgICAgIHNlZ21lbnQucHJpbWl0aXZlT2Zmc2V0ICogcHJpbWl0aXZlU2l6ZSAqIDIpO1xuICAgICAgICB9XG4gICAgfVxufVxuXG5leHBvcnQgZGVmYXVsdCBQcm9ncmFtO1xuIiwiLy8gQGZsb3dcblxuaW1wb3J0IGFzc2VydCBmcm9tICdhc3NlcnQnO1xuaW1wb3J0IHtcbiAgICBVbmlmb3JtMWksXG4gICAgVW5pZm9ybTFmLFxuICAgIFVuaWZvcm0yZixcbiAgICBVbmlmb3JtNGZcbn0gZnJvbSAnLi4vdW5pZm9ybV9iaW5kaW5nJztcbmltcG9ydCBwaXhlbHNUb1RpbGVVbml0cyBmcm9tICcuLi8uLi9zb3VyY2UvcGl4ZWxzX3RvX3RpbGVfdW5pdHMnO1xuaW1wb3J0IGJyb3dzZXIgZnJvbSAnLi4vLi4vdXRpbC9icm93c2VyJztcblxuaW1wb3J0IHR5cGUgUGFpbnRlciBmcm9tICcuLi9wYWludGVyJztcbmltcG9ydCB0eXBlIHtPdmVyc2NhbGVkVGlsZUlEfSBmcm9tICcuLi8uLi9zb3VyY2UvdGlsZV9pZCc7XG5pbXBvcnQgdHlwZSB7Q3Jvc3NGYWRlZH0gZnJvbSAnLi4vLi4vc3R5bGUvcHJvcGVydGllcyc7XG5pbXBvcnQgdHlwZSB7Q3Jvc3NmYWRlUGFyYW1ldGVyc30gZnJvbSAnLi4vLi4vc3R5bGUvZXZhbHVhdGlvbl9wYXJhbWV0ZXJzJztcbmltcG9ydCB0eXBlIHtVbmlmb3JtVmFsdWVzfSBmcm9tICcuLi91bmlmb3JtX2JpbmRpbmcnO1xuaW1wb3J0IHR5cGUgVGlsZSBmcm9tICcuLi8uLi9zb3VyY2UvdGlsZSc7XG5cbnR5cGUgQmFja2dyb3VuZFBhdHRlcm5Vbmlmb3Jtc1R5cGUgPSB7fFxuICAgICd1X2ltYWdlJzogVW5pZm9ybTFpLFxuICAgICd1X3BhdHRlcm5fdGxfYSc6IFVuaWZvcm0yZixcbiAgICAndV9wYXR0ZXJuX2JyX2EnOiBVbmlmb3JtMmYsXG4gICAgJ3VfcGF0dGVybl90bF9iJzogVW5pZm9ybTJmLFxuICAgICd1X3BhdHRlcm5fYnJfYic6IFVuaWZvcm0yZixcbiAgICAndV90ZXhzaXplJzogVW5pZm9ybTJmLFxuICAgICd1X21peCc6IFVuaWZvcm0xZixcbiAgICAndV9wYXR0ZXJuX3NpemVfYSc6IFVuaWZvcm0yZixcbiAgICAndV9wYXR0ZXJuX3NpemVfYic6IFVuaWZvcm0yZixcbiAgICAndV9zY2FsZV9hJzogVW5pZm9ybTFmLFxuICAgICd1X3NjYWxlX2InOiBVbmlmb3JtMWYsXG4gICAgJ3VfcGl4ZWxfY29vcmRfdXBwZXInOiBVbmlmb3JtMmYsXG4gICAgJ3VfcGl4ZWxfY29vcmRfbG93ZXInOiBVbmlmb3JtMmYsXG4gICAgJ3VfdGlsZV91bml0c190b19waXhlbHMnOiBVbmlmb3JtMWZcbnx9O1xuXG5leHBvcnQgdHlwZSBQYXR0ZXJuVW5pZm9ybXNUeXBlID0ge3xcbiAgICAvLyBwYXR0ZXJuIHVuaWZvcm1zOlxuICAgICd1X2ltYWdlJzogVW5pZm9ybTFpLFxuICAgICd1X3RleHNpemUnOiBVbmlmb3JtMmYsXG4gICAgJ3Vfc2NhbGUnOiBVbmlmb3JtNGYsXG4gICAgJ3VfZmFkZSc6IFVuaWZvcm0xZixcbiAgICAndV9waXhlbF9jb29yZF91cHBlcic6IFVuaWZvcm0yZixcbiAgICAndV9waXhlbF9jb29yZF9sb3dlcic6IFVuaWZvcm0yZlxufH07XG5cbmZ1bmN0aW9uIHBhdHRlcm5Vbmlmb3JtVmFsdWVzKGNyb3NzZmFkZTogQ3Jvc3NmYWRlUGFyYW1ldGVycywgcGFpbnRlcjogUGFpbnRlcixcbiAgICAgICAgdGlsZTogVGlsZVxuKTogVW5pZm9ybVZhbHVlczxQYXR0ZXJuVW5pZm9ybXNUeXBlPiB7XG5cbiAgICBjb25zdCB0aWxlUmF0aW8gPSAxIC8gcGl4ZWxzVG9UaWxlVW5pdHModGlsZSwgMSwgcGFpbnRlci50cmFuc2Zvcm0udGlsZVpvb20pO1xuXG4gICAgY29uc3QgbnVtVGlsZXMgPSBNYXRoLnBvdygyLCB0aWxlLnRpbGVJRC5vdmVyc2NhbGVkWik7XG4gICAgY29uc3QgdGlsZVNpemVBdE5lYXJlc3Rab29tID0gdGlsZS50aWxlU2l6ZSAqIE1hdGgucG93KDIsIHBhaW50ZXIudHJhbnNmb3JtLnRpbGVab29tKSAvIG51bVRpbGVzO1xuXG4gICAgY29uc3QgcGl4ZWxYID0gdGlsZVNpemVBdE5lYXJlc3Rab29tICogKHRpbGUudGlsZUlELmNhbm9uaWNhbC54ICsgdGlsZS50aWxlSUQud3JhcCAqIG51bVRpbGVzKTtcbiAgICBjb25zdCBwaXhlbFkgPSB0aWxlU2l6ZUF0TmVhcmVzdFpvb20gKiB0aWxlLnRpbGVJRC5jYW5vbmljYWwueTtcblxuICAgIHJldHVybiB7XG4gICAgICAgICd1X2ltYWdlJzogMCxcbiAgICAgICAgJ3VfdGV4c2l6ZSc6IHRpbGUuaW1hZ2VBdGxhc1RleHR1cmUuc2l6ZSxcbiAgICAgICAgLy8gdGhpcyBhc3N1bWVzIGFsbCBpbWFnZXMgaW4gdGhlIGljb24gYXRsYXMgdGV4dHVyZSBoYXZlIHRoZSBzYW1lIHBpeGVsIHJhdGlvXG4gICAgICAgICd1X3NjYWxlJzogW2Jyb3dzZXIuZGV2aWNlUGl4ZWxSYXRpbywgdGlsZVJhdGlvLCBjcm9zc2ZhZGUuZnJvbVNjYWxlLCBjcm9zc2ZhZGUudG9TY2FsZV0sXG4gICAgICAgICd1X2ZhZGUnOiBjcm9zc2ZhZGUudCxcbiAgICAgICAgLy8gc3BsaXQgdGhlIHBpeGVsIGNvb3JkIGludG8gdHdvIHBhaXJzIG9mIDE2IGJpdCBudW1iZXJzLiBUaGUgZ2xzbCBzcGVjIG9ubHkgZ3VhcmFudGVlcyAxNiBiaXRzIG9mIHByZWNpc2lvbi5cbiAgICAgICAgJ3VfcGl4ZWxfY29vcmRfdXBwZXInOiBbcGl4ZWxYID4+IDE2LCBwaXhlbFkgPj4gMTZdLFxuICAgICAgICAndV9waXhlbF9jb29yZF9sb3dlcic6IFtwaXhlbFggJiAweEZGRkYsIHBpeGVsWSAmIDB4RkZGRl1cbiAgICB9O1xufVxuXG5mdW5jdGlvbiBiZ1BhdHRlcm5Vbmlmb3JtVmFsdWVzKGltYWdlOiBDcm9zc0ZhZGVkPHN0cmluZz4sIGNyb3NzZmFkZTogQ3Jvc3NmYWRlUGFyYW1ldGVycywgcGFpbnRlcjogUGFpbnRlcixcbiAgICAgICAgdGlsZToge3RpbGVJRDogT3ZlcnNjYWxlZFRpbGVJRCwgdGlsZVNpemU6IG51bWJlcn1cbik6IFVuaWZvcm1WYWx1ZXM8QmFja2dyb3VuZFBhdHRlcm5Vbmlmb3Jtc1R5cGU+IHtcbiAgICBjb25zdCBpbWFnZVBvc0EgPSBwYWludGVyLmltYWdlTWFuYWdlci5nZXRQYXR0ZXJuKGltYWdlLmZyb20pO1xuICAgIGNvbnN0IGltYWdlUG9zQiA9IHBhaW50ZXIuaW1hZ2VNYW5hZ2VyLmdldFBhdHRlcm4oaW1hZ2UudG8pO1xuICAgIGFzc2VydChpbWFnZVBvc0EgJiYgaW1hZ2VQb3NCKTtcbiAgICBjb25zdCB7d2lkdGgsIGhlaWdodH0gPSBwYWludGVyLmltYWdlTWFuYWdlci5nZXRQaXhlbFNpemUoKTtcblxuICAgIGNvbnN0IG51bVRpbGVzID0gTWF0aC5wb3coMiwgdGlsZS50aWxlSUQub3ZlcnNjYWxlZFopO1xuICAgIGNvbnN0IHRpbGVTaXplQXROZWFyZXN0Wm9vbSA9IHRpbGUudGlsZVNpemUgKiBNYXRoLnBvdygyLCBwYWludGVyLnRyYW5zZm9ybS50aWxlWm9vbSkgLyBudW1UaWxlcztcblxuICAgIGNvbnN0IHBpeGVsWCA9IHRpbGVTaXplQXROZWFyZXN0Wm9vbSAqICh0aWxlLnRpbGVJRC5jYW5vbmljYWwueCArIHRpbGUudGlsZUlELndyYXAgKiBudW1UaWxlcyk7XG4gICAgY29uc3QgcGl4ZWxZID0gdGlsZVNpemVBdE5lYXJlc3Rab29tICogdGlsZS50aWxlSUQuY2Fub25pY2FsLnk7XG5cbiAgICByZXR1cm4ge1xuICAgICAgICAndV9pbWFnZSc6IDAsXG4gICAgICAgICd1X3BhdHRlcm5fdGxfYSc6IChpbWFnZVBvc0E6IGFueSkudGwsXG4gICAgICAgICd1X3BhdHRlcm5fYnJfYSc6IChpbWFnZVBvc0E6IGFueSkuYnIsXG4gICAgICAgICd1X3BhdHRlcm5fdGxfYic6IChpbWFnZVBvc0I6IGFueSkudGwsXG4gICAgICAgICd1X3BhdHRlcm5fYnJfYic6IChpbWFnZVBvc0I6IGFueSkuYnIsXG4gICAgICAgICd1X3RleHNpemUnOiBbd2lkdGgsIGhlaWdodF0sXG4gICAgICAgICd1X21peCc6IGNyb3NzZmFkZS50LFxuICAgICAgICAndV9wYXR0ZXJuX3NpemVfYSc6IChpbWFnZVBvc0E6IGFueSkuZGlzcGxheVNpemUsXG4gICAgICAgICd1X3BhdHRlcm5fc2l6ZV9iJzogKGltYWdlUG9zQjogYW55KS5kaXNwbGF5U2l6ZSxcbiAgICAgICAgJ3Vfc2NhbGVfYSc6IGNyb3NzZmFkZS5mcm9tU2NhbGUsXG4gICAgICAgICd1X3NjYWxlX2InOiBjcm9zc2ZhZGUudG9TY2FsZSxcbiAgICAgICAgJ3VfdGlsZV91bml0c190b19waXhlbHMnOiAxIC8gcGl4ZWxzVG9UaWxlVW5pdHModGlsZSwgMSwgcGFpbnRlci50cmFuc2Zvcm0udGlsZVpvb20pLFxuICAgICAgICAvLyBzcGxpdCB0aGUgcGl4ZWwgY29vcmQgaW50byB0d28gcGFpcnMgb2YgMTYgYml0IG51bWJlcnMuIFRoZSBnbHNsIHNwZWMgb25seSBndWFyYW50ZWVzIDE2IGJpdHMgb2YgcHJlY2lzaW9uLlxuICAgICAgICAndV9waXhlbF9jb29yZF91cHBlcic6IFtwaXhlbFggPj4gMTYsIHBpeGVsWSA+PiAxNl0sXG4gICAgICAgICd1X3BpeGVsX2Nvb3JkX2xvd2VyJzogW3BpeGVsWCAmIDB4RkZGRiwgcGl4ZWxZICYgMHhGRkZGXVxuICAgIH07XG59XG5leHBvcnQgeyBiZ1BhdHRlcm5Vbmlmb3JtVmFsdWVzLCBwYXR0ZXJuVW5pZm9ybVZhbHVlcyB9O1xuIiwiLy8gQGZsb3dcblxuaW1wb3J0IHsgcGF0dGVyblVuaWZvcm1WYWx1ZXMgfSBmcm9tICcuL3BhdHRlcm4nO1xuaW1wb3J0IHtcbiAgICBVbmlmb3JtMWksXG4gICAgVW5pZm9ybTFmLFxuICAgIFVuaWZvcm0yZixcbiAgICBVbmlmb3JtM2YsXG4gICAgVW5pZm9ybTRmLFxuICAgIFVuaWZvcm1NYXRyaXg0ZlxufSBmcm9tICcuLi91bmlmb3JtX2JpbmRpbmcnO1xuXG5pbXBvcnQge21hdDMsIHZlYzMsIG1hdDR9IGZyb20gJ2dsLW1hdHJpeCc7XG5pbXBvcnQgeyBleHRlbmQgfSBmcm9tICcuLi8uLi91dGlsL3V0aWwnO1xuXG5pbXBvcnQgdHlwZSBDb250ZXh0IGZyb20gJy4uLy4uL2dsL2NvbnRleHQnO1xuaW1wb3J0IHR5cGUgUGFpbnRlciBmcm9tICcuLi9wYWludGVyJztcbmltcG9ydCB0eXBlIHtPdmVyc2NhbGVkVGlsZUlEfSBmcm9tICcuLi8uLi9zb3VyY2UvdGlsZV9pZCc7XG5pbXBvcnQgdHlwZSB7VW5pZm9ybVZhbHVlcywgVW5pZm9ybUxvY2F0aW9uc30gZnJvbSAnLi4vdW5pZm9ybV9iaW5kaW5nJztcbmltcG9ydCB0eXBlIEZpbGxFeHRydXNpb25TdHlsZUxheWVyIGZyb20gJy4uLy4uL3N0eWxlL3N0eWxlX2xheWVyL2ZpbGxfZXh0cnVzaW9uX3N0eWxlX2xheWVyJztcbmltcG9ydCB0eXBlIHtDcm9zc2ZhZGVQYXJhbWV0ZXJzfSBmcm9tICcuLi8uLi9zdHlsZS9ldmFsdWF0aW9uX3BhcmFtZXRlcnMnO1xuaW1wb3J0IHR5cGUgVGlsZSBmcm9tICcuLi8uLi9zb3VyY2UvdGlsZSc7XG5cbmV4cG9ydCB0eXBlIEZpbGxFeHRydXNpb25Vbmlmb3Jtc1R5cGUgPSB7fFxuICAgICd1X21hdHJpeCc6IFVuaWZvcm1NYXRyaXg0ZixcbiAgICAndV9saWdodHBvcyc6IFVuaWZvcm0zZixcbiAgICAndV9saWdodGludGVuc2l0eSc6IFVuaWZvcm0xZixcbiAgICAndV9saWdodGNvbG9yJzogVW5pZm9ybTNmXG58fTtcblxuZXhwb3J0IHR5cGUgRmlsbEV4dHJ1c2lvblBhdHRlcm5Vbmlmb3Jtc1R5cGUgPSB7fFxuICAgICd1X21hdHJpeCc6IFVuaWZvcm1NYXRyaXg0ZixcbiAgICAndV9saWdodHBvcyc6IFVuaWZvcm0zZixcbiAgICAndV9saWdodGludGVuc2l0eSc6IFVuaWZvcm0xZixcbiAgICAndV9saWdodGNvbG9yJzogVW5pZm9ybTNmLFxuICAgICd1X2hlaWdodF9mYWN0b3InOiBVbmlmb3JtMWYsXG4gICAgLy8gcGF0dGVybiB1bmlmb3JtczpcbiAgICAndV90ZXhzaXplJzogVW5pZm9ybTJmLFxuICAgICd1X2ltYWdlJzogVW5pZm9ybTFpLFxuICAgICd1X3BpeGVsX2Nvb3JkX3VwcGVyJzogVW5pZm9ybTJmLFxuICAgICd1X3BpeGVsX2Nvb3JkX2xvd2VyJzogVW5pZm9ybTJmLFxuICAgICd1X3NjYWxlJzogVW5pZm9ybTRmLFxuICAgICd1X2ZhZGUnOiBVbmlmb3JtMWZcbnx9O1xuXG5leHBvcnQgdHlwZSBFeHRydXNpb25UZXh0dXJlVW5pZm9ybXNUeXBlID0ge3xcbiAgICAndV9tYXRyaXgnOiBVbmlmb3JtTWF0cml4NGYsXG4gICAgJ3Vfd29ybGQnOiBVbmlmb3JtMmYsXG4gICAgJ3VfaW1hZ2UnOiBVbmlmb3JtMWksXG4gICAgJ3Vfb3BhY2l0eSc6IFVuaWZvcm0xZlxufH07XG5cbmNvbnN0IGZpbGxFeHRydXNpb25Vbmlmb3JtcyA9IChjb250ZXh0OiBDb250ZXh0LCBsb2NhdGlvbnM6IFVuaWZvcm1Mb2NhdGlvbnMpOiBGaWxsRXh0cnVzaW9uVW5pZm9ybXNUeXBlID0+ICh7XG4gICAgJ3VfbWF0cml4JzogbmV3IFVuaWZvcm1NYXRyaXg0Zihjb250ZXh0LCBsb2NhdGlvbnMudV9tYXRyaXgpLFxuICAgICd1X2xpZ2h0cG9zJzogbmV3IFVuaWZvcm0zZihjb250ZXh0LCBsb2NhdGlvbnMudV9saWdodHBvcyksXG4gICAgJ3VfbGlnaHRpbnRlbnNpdHknOiBuZXcgVW5pZm9ybTFmKGNvbnRleHQsIGxvY2F0aW9ucy51X2xpZ2h0aW50ZW5zaXR5KSxcbiAgICAndV9saWdodGNvbG9yJzogbmV3IFVuaWZvcm0zZihjb250ZXh0LCBsb2NhdGlvbnMudV9saWdodGNvbG9yKVxufSk7XG5cbmNvbnN0IGZpbGxFeHRydXNpb25QYXR0ZXJuVW5pZm9ybXMgPSAoY29udGV4dDogQ29udGV4dCwgbG9jYXRpb25zOiBVbmlmb3JtTG9jYXRpb25zKTogRmlsbEV4dHJ1c2lvblBhdHRlcm5Vbmlmb3Jtc1R5cGUgPT4gKHtcbiAgICAndV9tYXRyaXgnOiBuZXcgVW5pZm9ybU1hdHJpeDRmKGNvbnRleHQsIGxvY2F0aW9ucy51X21hdHJpeCksXG4gICAgJ3VfbGlnaHRwb3MnOiBuZXcgVW5pZm9ybTNmKGNvbnRleHQsIGxvY2F0aW9ucy51X2xpZ2h0cG9zKSxcbiAgICAndV9saWdodGludGVuc2l0eSc6IG5ldyBVbmlmb3JtMWYoY29udGV4dCwgbG9jYXRpb25zLnVfbGlnaHRpbnRlbnNpdHkpLFxuICAgICd1X2xpZ2h0Y29sb3InOiBuZXcgVW5pZm9ybTNmKGNvbnRleHQsIGxvY2F0aW9ucy51X2xpZ2h0Y29sb3IpLFxuICAgICd1X2hlaWdodF9mYWN0b3InOiBuZXcgVW5pZm9ybTFmKGNvbnRleHQsIGxvY2F0aW9ucy51X2hlaWdodF9mYWN0b3IpLFxuICAgIC8vIHBhdHRlcm4gdW5pZm9ybXNcbiAgICAndV9pbWFnZSc6IG5ldyBVbmlmb3JtMWkoY29udGV4dCwgbG9jYXRpb25zLnVfaW1hZ2UpLFxuICAgICd1X3RleHNpemUnOiBuZXcgVW5pZm9ybTJmKGNvbnRleHQsIGxvY2F0aW9ucy51X3RleHNpemUpLFxuICAgICd1X3BpeGVsX2Nvb3JkX3VwcGVyJzogbmV3IFVuaWZvcm0yZihjb250ZXh0LCBsb2NhdGlvbnMudV9waXhlbF9jb29yZF91cHBlciksXG4gICAgJ3VfcGl4ZWxfY29vcmRfbG93ZXInOiBuZXcgVW5pZm9ybTJmKGNvbnRleHQsIGxvY2F0aW9ucy51X3BpeGVsX2Nvb3JkX2xvd2VyKSxcbiAgICAndV9zY2FsZSc6IG5ldyBVbmlmb3JtNGYoY29udGV4dCwgbG9jYXRpb25zLnVfc2NhbGUpLFxuICAgICd1X2ZhZGUnOiBuZXcgVW5pZm9ybTFmKGNvbnRleHQsIGxvY2F0aW9ucy51X2ZhZGUpXG59KTtcblxuY29uc3QgZXh0cnVzaW9uVGV4dHVyZVVuaWZvcm1zID0gKGNvbnRleHQ6IENvbnRleHQsIGxvY2F0aW9uczogVW5pZm9ybUxvY2F0aW9ucyk6IEV4dHJ1c2lvblRleHR1cmVVbmlmb3Jtc1R5cGUgPT4gKHtcbiAgICAndV9tYXRyaXgnOiBuZXcgVW5pZm9ybU1hdHJpeDRmKGNvbnRleHQsIGxvY2F0aW9ucy51X21hdHJpeCksXG4gICAgJ3Vfd29ybGQnOiBuZXcgVW5pZm9ybTJmKGNvbnRleHQsIGxvY2F0aW9ucy51X3dvcmxkKSxcbiAgICAndV9pbWFnZSc6IG5ldyBVbmlmb3JtMWkoY29udGV4dCwgbG9jYXRpb25zLnVfaW1hZ2UpLFxuICAgICd1X29wYWNpdHknOiBuZXcgVW5pZm9ybTFmKGNvbnRleHQsIGxvY2F0aW9ucy51X29wYWNpdHkpXG59KTtcblxuY29uc3QgZmlsbEV4dHJ1c2lvblVuaWZvcm1WYWx1ZXMgPSAoXG4gICAgbWF0cml4OiBGbG9hdDMyQXJyYXksXG4gICAgcGFpbnRlcjogUGFpbnRlclxuKTogVW5pZm9ybVZhbHVlczxGaWxsRXh0cnVzaW9uVW5pZm9ybXNUeXBlPiA9PiB7XG4gICAgY29uc3QgbGlnaHQgPSBwYWludGVyLnN0eWxlLmxpZ2h0O1xuICAgIGNvbnN0IF9scCA9IGxpZ2h0LnByb3BlcnRpZXMuZ2V0KCdwb3NpdGlvbicpO1xuICAgIGNvbnN0IGxpZ2h0UG9zID0gW19scC54LCBfbHAueSwgX2xwLnpdO1xuICAgIGNvbnN0IGxpZ2h0TWF0ID0gbWF0My5jcmVhdGUoKTtcbiAgICBpZiAobGlnaHQucHJvcGVydGllcy5nZXQoJ2FuY2hvcicpID09PSAndmlld3BvcnQnKSB7XG4gICAgICAgIG1hdDMuZnJvbVJvdGF0aW9uKGxpZ2h0TWF0LCAtcGFpbnRlci50cmFuc2Zvcm0uYW5nbGUpO1xuICAgIH1cbiAgICB2ZWMzLnRyYW5zZm9ybU1hdDMobGlnaHRQb3MsIGxpZ2h0UG9zLCBsaWdodE1hdCk7XG5cbiAgICBjb25zdCBsaWdodENvbG9yID0gbGlnaHQucHJvcGVydGllcy5nZXQoJ2NvbG9yJyk7XG5cbiAgICByZXR1cm4ge1xuICAgICAgICAndV9tYXRyaXgnOiBtYXRyaXgsXG4gICAgICAgICd1X2xpZ2h0cG9zJzogbGlnaHRQb3MsXG4gICAgICAgICd1X2xpZ2h0aW50ZW5zaXR5JzogbGlnaHQucHJvcGVydGllcy5nZXQoJ2ludGVuc2l0eScpLFxuICAgICAgICAndV9saWdodGNvbG9yJzogW2xpZ2h0Q29sb3IuciwgbGlnaHRDb2xvci5nLCBsaWdodENvbG9yLmJdXG4gICAgfTtcbn07XG5cbmNvbnN0IGZpbGxFeHRydXNpb25QYXR0ZXJuVW5pZm9ybVZhbHVlcyA9IChcbiAgICBtYXRyaXg6IEZsb2F0MzJBcnJheSxcbiAgICBwYWludGVyOiBQYWludGVyLFxuICAgIGNvb3JkOiBPdmVyc2NhbGVkVGlsZUlELFxuICAgIGNyb3NzZmFkZTogQ3Jvc3NmYWRlUGFyYW1ldGVycyxcbiAgICB0aWxlOiBUaWxlXG4pOiBVbmlmb3JtVmFsdWVzPEZpbGxFeHRydXNpb25QYXR0ZXJuVW5pZm9ybXNUeXBlPiA9PiB7XG4gICAgcmV0dXJuIGV4dGVuZChmaWxsRXh0cnVzaW9uVW5pZm9ybVZhbHVlcyhtYXRyaXgsIHBhaW50ZXIpLFxuICAgICAgICBwYXR0ZXJuVW5pZm9ybVZhbHVlcyhjcm9zc2ZhZGUsIHBhaW50ZXIsIHRpbGUpLFxuICAgICAgICB7XG4gICAgICAgICAgICAndV9oZWlnaHRfZmFjdG9yJzogLU1hdGgucG93KDIsIGNvb3JkLm92ZXJzY2FsZWRaKSAvIHRpbGUudGlsZVNpemUgLyA4XG4gICAgICAgIH0pO1xufTtcblxuY29uc3QgZXh0cnVzaW9uVGV4dHVyZVVuaWZvcm1WYWx1ZXMgPSAoXG4gICAgcGFpbnRlcjogUGFpbnRlcixcbiAgICBsYXllcjogRmlsbEV4dHJ1c2lvblN0eWxlTGF5ZXIsXG4gICAgdGV4dHVyZVVuaXQ6IG51bWJlclxuKTogVW5pZm9ybVZhbHVlczxFeHRydXNpb25UZXh0dXJlVW5pZm9ybXNUeXBlPiA9PiB7XG4gICAgY29uc3QgbWF0cml4ID0gbWF0NC5jcmVhdGUoKTtcbiAgICBtYXQ0Lm9ydGhvKG1hdHJpeCwgMCwgcGFpbnRlci53aWR0aCwgcGFpbnRlci5oZWlnaHQsIDAsIDAsIDEpO1xuXG4gICAgY29uc3QgZ2wgPSBwYWludGVyLmNvbnRleHQuZ2w7XG5cbiAgICByZXR1cm4ge1xuICAgICAgICAndV9tYXRyaXgnOiBtYXRyaXgsXG4gICAgICAgICd1X3dvcmxkJzogW2dsLmRyYXdpbmdCdWZmZXJXaWR0aCwgZ2wuZHJhd2luZ0J1ZmZlckhlaWdodF0sXG4gICAgICAgICd1X2ltYWdlJzogdGV4dHVyZVVuaXQsXG4gICAgICAgICd1X29wYWNpdHknOiBsYXllci5wYWludC5nZXQoJ2ZpbGwtZXh0cnVzaW9uLW9wYWNpdHknKVxuICAgIH07XG59O1xuXG5leHBvcnQge1xuICAgIGZpbGxFeHRydXNpb25Vbmlmb3JtcyxcbiAgICBmaWxsRXh0cnVzaW9uUGF0dGVyblVuaWZvcm1zLFxuICAgIGV4dHJ1c2lvblRleHR1cmVVbmlmb3JtcyxcbiAgICBmaWxsRXh0cnVzaW9uVW5pZm9ybVZhbHVlcyxcbiAgICBmaWxsRXh0cnVzaW9uUGF0dGVyblVuaWZvcm1WYWx1ZXMsXG4gICAgZXh0cnVzaW9uVGV4dHVyZVVuaWZvcm1WYWx1ZXNcbn07XG4iLCIvLyBAZmxvd1xuXG5pbXBvcnQge3BhdHRlcm5Vbmlmb3JtVmFsdWVzfSBmcm9tICcuL3BhdHRlcm4nO1xuaW1wb3J0IHtcbiAgICBVbmlmb3JtMWksXG4gICAgVW5pZm9ybTFmLFxuICAgIFVuaWZvcm0yZixcbiAgICBVbmlmb3JtNGYsXG4gICAgVW5pZm9ybU1hdHJpeDRmXG59IGZyb20gJy4uL3VuaWZvcm1fYmluZGluZyc7XG5pbXBvcnQgeyBleHRlbmQgfSBmcm9tICcuLi8uLi91dGlsL3V0aWwnO1xuXG5pbXBvcnQgdHlwZSBQYWludGVyIGZyb20gJy4uL3BhaW50ZXInO1xuaW1wb3J0IHR5cGUge1VuaWZvcm1WYWx1ZXMsIFVuaWZvcm1Mb2NhdGlvbnN9IGZyb20gJy4uL3VuaWZvcm1fYmluZGluZyc7XG5pbXBvcnQgdHlwZSBDb250ZXh0IGZyb20gJy4uLy4uL2dsL2NvbnRleHQnO1xuaW1wb3J0IHR5cGUge0Nyb3NzZmFkZVBhcmFtZXRlcnN9IGZyb20gJy4uLy4uL3N0eWxlL2V2YWx1YXRpb25fcGFyYW1ldGVycyc7XG5pbXBvcnQgdHlwZSBUaWxlIGZyb20gJy4uLy4uL3NvdXJjZS90aWxlJztcblxuZXhwb3J0IHR5cGUgRmlsbFVuaWZvcm1zVHlwZSA9IHt8XG4gICAgJ3VfbWF0cml4JzogVW5pZm9ybU1hdHJpeDRmXG58fTtcblxuZXhwb3J0IHR5cGUgRmlsbE91dGxpbmVVbmlmb3Jtc1R5cGUgPSB7fFxuICAgICd1X21hdHJpeCc6IFVuaWZvcm1NYXRyaXg0ZixcbiAgICAndV93b3JsZCc6IFVuaWZvcm0yZlxufH07XG5cbmV4cG9ydCB0eXBlIEZpbGxQYXR0ZXJuVW5pZm9ybXNUeXBlID0ge3xcbiAgICAndV9tYXRyaXgnOiBVbmlmb3JtTWF0cml4NGYsXG4gICAgLy8gcGF0dGVybiB1bmlmb3JtczpcbiAgICAndV90ZXhzaXplJzogVW5pZm9ybTJmLFxuICAgICd1X2ltYWdlJzogVW5pZm9ybTFpLFxuICAgICd1X3BpeGVsX2Nvb3JkX3VwcGVyJzogVW5pZm9ybTJmLFxuICAgICd1X3BpeGVsX2Nvb3JkX2xvd2VyJzogVW5pZm9ybTJmLFxuICAgICd1X3NjYWxlJzogVW5pZm9ybTRmLFxuICAgICd1X2ZhZGUnOiBVbmlmb3JtMWZcbnx9O1xuXG5leHBvcnQgdHlwZSBGaWxsT3V0bGluZVBhdHRlcm5Vbmlmb3Jtc1R5cGUgPSB7fFxuICAgICd1X21hdHJpeCc6IFVuaWZvcm1NYXRyaXg0ZixcbiAgICAndV93b3JsZCc6IFVuaWZvcm0yZixcbiAgICAvLyBwYXR0ZXJuIHVuaWZvcm1zOlxuICAgICd1X3RleHNpemUnOiBVbmlmb3JtMmYsXG4gICAgJ3VfaW1hZ2UnOiBVbmlmb3JtMWksXG4gICAgJ3VfcGl4ZWxfY29vcmRfdXBwZXInOiBVbmlmb3JtMmYsXG4gICAgJ3VfcGl4ZWxfY29vcmRfbG93ZXInOiBVbmlmb3JtMmYsXG4gICAgJ3Vfc2NhbGUnOiBVbmlmb3JtNGYsXG4gICAgJ3VfZmFkZSc6IFVuaWZvcm0xZlxufH07XG5cbmNvbnN0IGZpbGxVbmlmb3JtcyA9IChjb250ZXh0OiBDb250ZXh0LCBsb2NhdGlvbnM6IFVuaWZvcm1Mb2NhdGlvbnMpOiBGaWxsVW5pZm9ybXNUeXBlID0+ICh7XG4gICAgJ3VfbWF0cml4JzogbmV3IFVuaWZvcm1NYXRyaXg0Zihjb250ZXh0LCBsb2NhdGlvbnMudV9tYXRyaXgpXG59KTtcblxuY29uc3QgZmlsbFBhdHRlcm5Vbmlmb3JtcyA9IChjb250ZXh0OiBDb250ZXh0LCBsb2NhdGlvbnM6IFVuaWZvcm1Mb2NhdGlvbnMpOiBGaWxsUGF0dGVyblVuaWZvcm1zVHlwZSA9PiAoe1xuICAgICd1X21hdHJpeCc6IG5ldyBVbmlmb3JtTWF0cml4NGYoY29udGV4dCwgbG9jYXRpb25zLnVfbWF0cml4KSxcbiAgICAndV9pbWFnZSc6IG5ldyBVbmlmb3JtMWkoY29udGV4dCwgbG9jYXRpb25zLnVfaW1hZ2UpLFxuICAgICd1X3RleHNpemUnOiBuZXcgVW5pZm9ybTJmKGNvbnRleHQsIGxvY2F0aW9ucy51X3RleHNpemUpLFxuICAgICd1X3BpeGVsX2Nvb3JkX3VwcGVyJzogbmV3IFVuaWZvcm0yZihjb250ZXh0LCBsb2NhdGlvbnMudV9waXhlbF9jb29yZF91cHBlciksXG4gICAgJ3VfcGl4ZWxfY29vcmRfbG93ZXInOiBuZXcgVW5pZm9ybTJmKGNvbnRleHQsIGxvY2F0aW9ucy51X3BpeGVsX2Nvb3JkX2xvd2VyKSxcbiAgICAndV9zY2FsZSc6IG5ldyBVbmlmb3JtNGYoY29udGV4dCwgbG9jYXRpb25zLnVfc2NhbGUpLFxuICAgICd1X2ZhZGUnOiBuZXcgVW5pZm9ybTFmKGNvbnRleHQsIGxvY2F0aW9ucy51X2ZhZGUpXG5cbn0pO1xuXG5jb25zdCBmaWxsT3V0bGluZVVuaWZvcm1zID0gKGNvbnRleHQ6IENvbnRleHQsIGxvY2F0aW9uczogVW5pZm9ybUxvY2F0aW9ucyk6IEZpbGxPdXRsaW5lVW5pZm9ybXNUeXBlID0+ICh7XG4gICAgJ3VfbWF0cml4JzogbmV3IFVuaWZvcm1NYXRyaXg0Zihjb250ZXh0LCBsb2NhdGlvbnMudV9tYXRyaXgpLFxuICAgICd1X3dvcmxkJzogbmV3IFVuaWZvcm0yZihjb250ZXh0LCBsb2NhdGlvbnMudV93b3JsZClcbn0pO1xuXG5jb25zdCBmaWxsT3V0bGluZVBhdHRlcm5Vbmlmb3JtcyA9IChjb250ZXh0OiBDb250ZXh0LCBsb2NhdGlvbnM6IFVuaWZvcm1Mb2NhdGlvbnMpOiBGaWxsT3V0bGluZVBhdHRlcm5Vbmlmb3Jtc1R5cGUgPT4gKHtcbiAgICAndV9tYXRyaXgnOiBuZXcgVW5pZm9ybU1hdHJpeDRmKGNvbnRleHQsIGxvY2F0aW9ucy51X21hdHJpeCksXG4gICAgJ3Vfd29ybGQnOiBuZXcgVW5pZm9ybTJmKGNvbnRleHQsIGxvY2F0aW9ucy51X3dvcmxkKSxcbiAgICAndV9pbWFnZSc6IG5ldyBVbmlmb3JtMWkoY29udGV4dCwgbG9jYXRpb25zLnVfaW1hZ2UpLFxuICAgICd1X3RleHNpemUnOiBuZXcgVW5pZm9ybTJmKGNvbnRleHQsIGxvY2F0aW9ucy51X3RleHNpemUpLFxuICAgICd1X3BpeGVsX2Nvb3JkX3VwcGVyJzogbmV3IFVuaWZvcm0yZihjb250ZXh0LCBsb2NhdGlvbnMudV9waXhlbF9jb29yZF91cHBlciksXG4gICAgJ3VfcGl4ZWxfY29vcmRfbG93ZXInOiBuZXcgVW5pZm9ybTJmKGNvbnRleHQsIGxvY2F0aW9ucy51X3BpeGVsX2Nvb3JkX2xvd2VyKSxcbiAgICAndV9zY2FsZSc6IG5ldyBVbmlmb3JtNGYoY29udGV4dCwgbG9jYXRpb25zLnVfc2NhbGUpLFxuICAgICd1X2ZhZGUnOiBuZXcgVW5pZm9ybTFmKGNvbnRleHQsIGxvY2F0aW9ucy51X2ZhZGUpXG59KTtcblxuY29uc3QgZmlsbFVuaWZvcm1WYWx1ZXMgPSAobWF0cml4OiBGbG9hdDMyQXJyYXkpOiBVbmlmb3JtVmFsdWVzPEZpbGxVbmlmb3Jtc1R5cGU+ID0+ICh7XG4gICAgJ3VfbWF0cml4JzogbWF0cml4XG59KTtcblxuY29uc3QgZmlsbFBhdHRlcm5Vbmlmb3JtVmFsdWVzID0gKFxuICAgIG1hdHJpeDogRmxvYXQzMkFycmF5LFxuICAgIHBhaW50ZXI6IFBhaW50ZXIsXG4gICAgY3Jvc3NmYWRlOiBDcm9zc2ZhZGVQYXJhbWV0ZXJzLFxuICAgIHRpbGU6IFRpbGVcbik6IFVuaWZvcm1WYWx1ZXM8RmlsbFBhdHRlcm5Vbmlmb3Jtc1R5cGU+ID0+IGV4dGVuZChcbiAgICBmaWxsVW5pZm9ybVZhbHVlcyhtYXRyaXgpLFxuICAgIHBhdHRlcm5Vbmlmb3JtVmFsdWVzKGNyb3NzZmFkZSwgcGFpbnRlciwgdGlsZSlcbik7XG5cbmNvbnN0IGZpbGxPdXRsaW5lVW5pZm9ybVZhbHVlcyA9IChcbiAgICBtYXRyaXg6IEZsb2F0MzJBcnJheSxcbiAgICBkcmF3aW5nQnVmZmVyU2l6ZTogW251bWJlciwgbnVtYmVyXVxuKTogVW5pZm9ybVZhbHVlczxGaWxsT3V0bGluZVVuaWZvcm1zVHlwZT4gPT4gKHtcbiAgICAndV9tYXRyaXgnOiBtYXRyaXgsXG4gICAgJ3Vfd29ybGQnOiBkcmF3aW5nQnVmZmVyU2l6ZVxufSk7XG5cbmNvbnN0IGZpbGxPdXRsaW5lUGF0dGVyblVuaWZvcm1WYWx1ZXMgPSAoXG4gICAgbWF0cml4OiBGbG9hdDMyQXJyYXksXG4gICAgcGFpbnRlcjogUGFpbnRlcixcbiAgICBjcm9zc2ZhZGU6IENyb3NzZmFkZVBhcmFtZXRlcnMsXG4gICAgdGlsZTogVGlsZSxcbiAgICBkcmF3aW5nQnVmZmVyU2l6ZTogW251bWJlciwgbnVtYmVyXVxuKTogVW5pZm9ybVZhbHVlczxGaWxsT3V0bGluZVBhdHRlcm5Vbmlmb3Jtc1R5cGU+ID0+IGV4dGVuZChcbiAgICBmaWxsUGF0dGVyblVuaWZvcm1WYWx1ZXMobWF0cml4LCBwYWludGVyLCBjcm9zc2ZhZGUsIHRpbGUpLFxuICAgIHtcbiAgICAgICAgJ3Vfd29ybGQnOiBkcmF3aW5nQnVmZmVyU2l6ZVxuICAgIH1cbik7XG5cbmV4cG9ydCB7XG4gICAgZmlsbFVuaWZvcm1zLFxuICAgIGZpbGxQYXR0ZXJuVW5pZm9ybXMsXG4gICAgZmlsbE91dGxpbmVVbmlmb3JtcyxcbiAgICBmaWxsT3V0bGluZVBhdHRlcm5Vbmlmb3JtcyxcbiAgICBmaWxsVW5pZm9ybVZhbHVlcyxcbiAgICBmaWxsUGF0dGVyblVuaWZvcm1WYWx1ZXMsXG4gICAgZmlsbE91dGxpbmVVbmlmb3JtVmFsdWVzLFxuICAgIGZpbGxPdXRsaW5lUGF0dGVyblVuaWZvcm1WYWx1ZXNcbn07XG4iLCIvLyBAZmxvd1xuXG5pbXBvcnQge1xuICAgIFVuaWZvcm0xaSxcbiAgICBVbmlmb3JtMWYsXG4gICAgVW5pZm9ybTJmLFxuICAgIFVuaWZvcm1NYXRyaXg0ZlxufSBmcm9tICcuLi91bmlmb3JtX2JpbmRpbmcnO1xuaW1wb3J0IHBpeGVsc1RvVGlsZVVuaXRzIGZyb20gJy4uLy4uL3NvdXJjZS9waXhlbHNfdG9fdGlsZV91bml0cyc7XG5cbmltcG9ydCB0eXBlIENvbnRleHQgZnJvbSAnLi4vLi4vZ2wvY29udGV4dCc7XG5pbXBvcnQgdHlwZSB7VW5pZm9ybVZhbHVlcywgVW5pZm9ybUxvY2F0aW9uc30gZnJvbSAnLi4vdW5pZm9ybV9iaW5kaW5nJztcbmltcG9ydCB0eXBlIHtPdmVyc2NhbGVkVGlsZUlEfSBmcm9tICcuLi8uLi9zb3VyY2UvdGlsZV9pZCc7XG5pbXBvcnQgdHlwZSBUaWxlIGZyb20gJy4uLy4uL3NvdXJjZS90aWxlJztcbmltcG9ydCB0eXBlIENpcmNsZVN0eWxlTGF5ZXIgZnJvbSAnLi4vLi4vc3R5bGUvc3R5bGVfbGF5ZXIvY2lyY2xlX3N0eWxlX2xheWVyJztcbmltcG9ydCB0eXBlIFBhaW50ZXIgZnJvbSAnLi4vcGFpbnRlcic7XG5cbmV4cG9ydCB0eXBlIENpcmNsZVVuaWZvcm1zVHlwZSA9IHt8XG4gICAgJ3VfY2FtZXJhX3RvX2NlbnRlcl9kaXN0YW5jZSc6IFVuaWZvcm0xZixcbiAgICAndV9zY2FsZV93aXRoX21hcCc6IFVuaWZvcm0xaSxcbiAgICAndV9waXRjaF93aXRoX21hcCc6IFVuaWZvcm0xaSxcbiAgICAndV9leHRydWRlX3NjYWxlJzogVW5pZm9ybTJmLFxuICAgICd1X21hdHJpeCc6IFVuaWZvcm1NYXRyaXg0ZlxufH07XG5cbmNvbnN0IGNpcmNsZVVuaWZvcm1zID0gKGNvbnRleHQ6IENvbnRleHQsIGxvY2F0aW9uczogVW5pZm9ybUxvY2F0aW9ucyk6IENpcmNsZVVuaWZvcm1zVHlwZSA9PiAoe1xuICAgICd1X2NhbWVyYV90b19jZW50ZXJfZGlzdGFuY2UnOiBuZXcgVW5pZm9ybTFmKGNvbnRleHQsIGxvY2F0aW9ucy51X2NhbWVyYV90b19jZW50ZXJfZGlzdGFuY2UpLFxuICAgICd1X3NjYWxlX3dpdGhfbWFwJzogbmV3IFVuaWZvcm0xaShjb250ZXh0LCBsb2NhdGlvbnMudV9zY2FsZV93aXRoX21hcCksXG4gICAgJ3VfcGl0Y2hfd2l0aF9tYXAnOiBuZXcgVW5pZm9ybTFpKGNvbnRleHQsIGxvY2F0aW9ucy51X3BpdGNoX3dpdGhfbWFwKSxcbiAgICAndV9leHRydWRlX3NjYWxlJzogbmV3IFVuaWZvcm0yZihjb250ZXh0LCBsb2NhdGlvbnMudV9leHRydWRlX3NjYWxlKSxcbiAgICAndV9tYXRyaXgnOiBuZXcgVW5pZm9ybU1hdHJpeDRmKGNvbnRleHQsIGxvY2F0aW9ucy51X21hdHJpeClcbn0pO1xuXG5jb25zdCBjaXJjbGVVbmlmb3JtVmFsdWVzID0gKFxuICAgIHBhaW50ZXI6IFBhaW50ZXIsXG4gICAgY29vcmQ6IE92ZXJzY2FsZWRUaWxlSUQsXG4gICAgdGlsZTogVGlsZSxcbiAgICBsYXllcjogQ2lyY2xlU3R5bGVMYXllclxuKTogVW5pZm9ybVZhbHVlczxDaXJjbGVVbmlmb3Jtc1R5cGU+ID0+IHtcbiAgICBjb25zdCB0cmFuc2Zvcm0gPSBwYWludGVyLnRyYW5zZm9ybTtcblxuICAgIGxldCBwaXRjaFdpdGhNYXA6IGJvb2xlYW4sIGV4dHJ1ZGVTY2FsZTogW251bWJlciwgbnVtYmVyXTtcbiAgICBpZiAobGF5ZXIucGFpbnQuZ2V0KCdjaXJjbGUtcGl0Y2gtYWxpZ25tZW50JykgPT09ICdtYXAnKSB7XG4gICAgICAgIGNvbnN0IHBpeGVsUmF0aW8gPSBwaXhlbHNUb1RpbGVVbml0cyh0aWxlLCAxLCB0cmFuc2Zvcm0uem9vbSk7XG4gICAgICAgIHBpdGNoV2l0aE1hcCA9IHRydWU7XG4gICAgICAgIGV4dHJ1ZGVTY2FsZSA9IFtwaXhlbFJhdGlvLCBwaXhlbFJhdGlvXTtcbiAgICB9IGVsc2Uge1xuICAgICAgICBwaXRjaFdpdGhNYXAgPSBmYWxzZTtcbiAgICAgICAgZXh0cnVkZVNjYWxlID0gdHJhbnNmb3JtLnBpeGVsc1RvR0xVbml0cztcbiAgICB9XG5cbiAgICByZXR1cm4ge1xuICAgICAgICAndV9jYW1lcmFfdG9fY2VudGVyX2Rpc3RhbmNlJzogdHJhbnNmb3JtLmNhbWVyYVRvQ2VudGVyRGlzdGFuY2UsXG4gICAgICAgICd1X3NjYWxlX3dpdGhfbWFwJzogKyhsYXllci5wYWludC5nZXQoJ2NpcmNsZS1waXRjaC1zY2FsZScpID09PSAnbWFwJyksXG4gICAgICAgICd1X21hdHJpeCc6IHBhaW50ZXIudHJhbnNsYXRlUG9zTWF0cml4KFxuICAgICAgICAgICAgY29vcmQucG9zTWF0cml4LFxuICAgICAgICAgICAgdGlsZSxcbiAgICAgICAgICAgIGxheWVyLnBhaW50LmdldCgnY2lyY2xlLXRyYW5zbGF0ZScpLFxuICAgICAgICAgICAgbGF5ZXIucGFpbnQuZ2V0KCdjaXJjbGUtdHJhbnNsYXRlLWFuY2hvcicpKSxcbiAgICAgICAgJ3VfcGl0Y2hfd2l0aF9tYXAnOiArKHBpdGNoV2l0aE1hcCksXG4gICAgICAgICd1X2V4dHJ1ZGVfc2NhbGUnOiBleHRydWRlU2NhbGVcbiAgICB9O1xufTtcblxuZXhwb3J0IHsgY2lyY2xlVW5pZm9ybXMsIGNpcmNsZVVuaWZvcm1WYWx1ZXMgfTtcbiIsIi8vIEBmbG93XG5cbmltcG9ydCB7XG4gICAgVW5pZm9ybTFmLFxuICAgIFVuaWZvcm0yZixcbiAgICBVbmlmb3JtTWF0cml4NGZcbn0gZnJvbSAnLi4vdW5pZm9ybV9iaW5kaW5nJztcbmltcG9ydCBwaXhlbHNUb1RpbGVVbml0cyBmcm9tICcuLi8uLi9zb3VyY2UvcGl4ZWxzX3RvX3RpbGVfdW5pdHMnO1xuXG5pbXBvcnQgdHlwZSBDb250ZXh0IGZyb20gJy4uLy4uL2dsL2NvbnRleHQnO1xuaW1wb3J0IHR5cGUge1VuaWZvcm1WYWx1ZXMsIFVuaWZvcm1Mb2NhdGlvbnN9IGZyb20gJy4uL3VuaWZvcm1fYmluZGluZyc7XG5pbXBvcnQgdHlwZSBUcmFuc2Zvcm0gZnJvbSAnLi4vLi4vZ2VvL3RyYW5zZm9ybSc7XG5pbXBvcnQgdHlwZSBUaWxlIGZyb20gJy4uLy4uL3NvdXJjZS90aWxlJztcblxuZXhwb3J0IHR5cGUgQ29sbGlzaW9uVW5pZm9ybXNUeXBlID0ge3xcbiAgICAndV9tYXRyaXgnOiBVbmlmb3JtTWF0cml4NGYsXG4gICAgJ3VfY2FtZXJhX3RvX2NlbnRlcl9kaXN0YW5jZSc6IFVuaWZvcm0xZixcbiAgICAndV9waXhlbHNfdG9fdGlsZV91bml0cyc6IFVuaWZvcm0xZixcbiAgICAndV9leHRydWRlX3NjYWxlJzogVW5pZm9ybTJmLFxuICAgICd1X292ZXJzY2FsZV9mYWN0b3InOiBVbmlmb3JtMWZcbnx9O1xuXG5jb25zdCBjb2xsaXNpb25Vbmlmb3JtcyA9IChjb250ZXh0OiBDb250ZXh0LCBsb2NhdGlvbnM6IFVuaWZvcm1Mb2NhdGlvbnMpOiBDb2xsaXNpb25Vbmlmb3Jtc1R5cGUgPT4gKHtcbiAgICAndV9tYXRyaXgnOiBuZXcgVW5pZm9ybU1hdHJpeDRmKGNvbnRleHQsIGxvY2F0aW9ucy51X21hdHJpeCksXG4gICAgJ3VfY2FtZXJhX3RvX2NlbnRlcl9kaXN0YW5jZSc6IG5ldyBVbmlmb3JtMWYoY29udGV4dCwgbG9jYXRpb25zLnVfY2FtZXJhX3RvX2NlbnRlcl9kaXN0YW5jZSksXG4gICAgJ3VfcGl4ZWxzX3RvX3RpbGVfdW5pdHMnOiBuZXcgVW5pZm9ybTFmKGNvbnRleHQsIGxvY2F0aW9ucy51X3BpeGVsc190b190aWxlX3VuaXRzKSxcbiAgICAndV9leHRydWRlX3NjYWxlJzogbmV3IFVuaWZvcm0yZihjb250ZXh0LCBsb2NhdGlvbnMudV9leHRydWRlX3NjYWxlKSxcbiAgICAndV9vdmVyc2NhbGVfZmFjdG9yJzogbmV3IFVuaWZvcm0xZihjb250ZXh0LCBsb2NhdGlvbnMudV9vdmVyc2NhbGVfZmFjdG9yKVxufSk7XG5cbmNvbnN0IGNvbGxpc2lvblVuaWZvcm1WYWx1ZXMgPSAoXG4gICAgbWF0cml4OiBGbG9hdDMyQXJyYXksXG4gICAgdHJhbnNmb3JtOiBUcmFuc2Zvcm0sXG4gICAgdGlsZTogVGlsZVxuKTogVW5pZm9ybVZhbHVlczxDb2xsaXNpb25Vbmlmb3Jtc1R5cGU+ID0+IHtcbiAgICBjb25zdCBwaXhlbFJhdGlvID0gcGl4ZWxzVG9UaWxlVW5pdHModGlsZSwgMSwgdHJhbnNmb3JtLnpvb20pO1xuICAgIGNvbnN0IHNjYWxlID0gTWF0aC5wb3coMiwgdHJhbnNmb3JtLnpvb20gLSB0aWxlLnRpbGVJRC5vdmVyc2NhbGVkWik7XG4gICAgY29uc3Qgb3ZlcnNjYWxlRmFjdG9yID0gdGlsZS50aWxlSUQub3ZlcnNjYWxlRmFjdG9yKCk7XG4gICAgcmV0dXJuIHtcbiAgICAgICAgJ3VfbWF0cml4JzogbWF0cml4LFxuICAgICAgICAndV9jYW1lcmFfdG9fY2VudGVyX2Rpc3RhbmNlJzogdHJhbnNmb3JtLmNhbWVyYVRvQ2VudGVyRGlzdGFuY2UsXG4gICAgICAgICd1X3BpeGVsc190b190aWxlX3VuaXRzJzogcGl4ZWxSYXRpbyxcbiAgICAgICAgJ3VfZXh0cnVkZV9zY2FsZSc6IFt0cmFuc2Zvcm0ucGl4ZWxzVG9HTFVuaXRzWzBdIC8gKHBpeGVsUmF0aW8gKiBzY2FsZSksXG4gICAgICAgICAgICB0cmFuc2Zvcm0ucGl4ZWxzVG9HTFVuaXRzWzFdIC8gKHBpeGVsUmF0aW8gKiBzY2FsZSldLFxuICAgICAgICAndV9vdmVyc2NhbGVfZmFjdG9yJzogb3ZlcnNjYWxlRmFjdG9yXG4gICAgfTtcbn07XG5cbmV4cG9ydCB7IGNvbGxpc2lvblVuaWZvcm1zLCBjb2xsaXNpb25Vbmlmb3JtVmFsdWVzIH07XG4iLCIvLyBAZmxvd1xuXG5pbXBvcnQge1xuICAgIFVuaWZvcm1Db2xvcixcbiAgICBVbmlmb3JtTWF0cml4NGZcbn0gZnJvbSAnLi4vdW5pZm9ybV9iaW5kaW5nJztcblxuaW1wb3J0IHR5cGUgQ29udGV4dCBmcm9tICcuLi8uLi9nbC9jb250ZXh0JztcbmltcG9ydCB0eXBlIHtVbmlmb3JtVmFsdWVzLCBVbmlmb3JtTG9jYXRpb25zfSBmcm9tICcuLi91bmlmb3JtX2JpbmRpbmcnO1xuaW1wb3J0IHR5cGUgQ29sb3IgZnJvbSAnLi4vLi4vc3R5bGUtc3BlYy91dGlsL2NvbG9yJztcblxuZXhwb3J0IHR5cGUgRGVidWdVbmlmb3Jtc1R5cGUgPSB7fFxuICAgICd1X2NvbG9yJzogVW5pZm9ybUNvbG9yLFxuICAgICd1X21hdHJpeCc6IFVuaWZvcm1NYXRyaXg0ZlxufH07XG5cbmNvbnN0IGRlYnVnVW5pZm9ybXMgPSAoY29udGV4dDogQ29udGV4dCwgbG9jYXRpb25zOiBVbmlmb3JtTG9jYXRpb25zKTogRGVidWdVbmlmb3Jtc1R5cGUgPT4gKHtcbiAgICAndV9jb2xvcic6IG5ldyBVbmlmb3JtQ29sb3IoY29udGV4dCwgbG9jYXRpb25zLnVfY29sb3IpLFxuICAgICd1X21hdHJpeCc6IG5ldyBVbmlmb3JtTWF0cml4NGYoY29udGV4dCwgbG9jYXRpb25zLnVfbWF0cml4KVxufSk7XG5cbmNvbnN0IGRlYnVnVW5pZm9ybVZhbHVlcyA9IChtYXRyaXg6IEZsb2F0MzJBcnJheSwgY29sb3I6IENvbG9yKTogVW5pZm9ybVZhbHVlczxEZWJ1Z1VuaWZvcm1zVHlwZT4gPT4gKHtcbiAgICAndV9tYXRyaXgnOiBtYXRyaXgsXG4gICAgJ3VfY29sb3InOiBjb2xvclxufSk7XG5cbmV4cG9ydCB7IGRlYnVnVW5pZm9ybXMsIGRlYnVnVW5pZm9ybVZhbHVlcyB9O1xuIiwiLy8gQGZsb3dcblxuaW1wb3J0IHsgVW5pZm9ybU1hdHJpeDRmIH0gZnJvbSAnLi4vdW5pZm9ybV9iaW5kaW5nJztcblxuaW1wb3J0IHR5cGUgQ29udGV4dCBmcm9tICcuLi8uLi9nbC9jb250ZXh0JztcbmltcG9ydCB0eXBlIHtVbmlmb3JtVmFsdWVzLCBVbmlmb3JtTG9jYXRpb25zfSBmcm9tICcuLi91bmlmb3JtX2JpbmRpbmcnO1xuXG5leHBvcnQgdHlwZSBDbGlwcGluZ01hc2tVbmlmb3Jtc1R5cGUgPSB7fFxuICAgICd1X21hdHJpeCc6IFVuaWZvcm1NYXRyaXg0ZlxufH07XG5cbmNvbnN0IGNsaXBwaW5nTWFza1VuaWZvcm1zID0gKGNvbnRleHQ6IENvbnRleHQsIGxvY2F0aW9uczogVW5pZm9ybUxvY2F0aW9ucyk6IENsaXBwaW5nTWFza1VuaWZvcm1zVHlwZSA9PiAoe1xuICAgICd1X21hdHJpeCc6IG5ldyBVbmlmb3JtTWF0cml4NGYoY29udGV4dCwgbG9jYXRpb25zLnVfbWF0cml4KVxufSk7XG5cbmNvbnN0IGNsaXBwaW5nTWFza1VuaWZvcm1WYWx1ZXMgPSAobWF0cml4OiBGbG9hdDMyQXJyYXkpOiBVbmlmb3JtVmFsdWVzPENsaXBwaW5nTWFza1VuaWZvcm1zVHlwZT4gPT4gKHtcbiAgICAndV9tYXRyaXgnOiBtYXRyaXhcbn0pO1xuXG5leHBvcnQgeyBjbGlwcGluZ01hc2tVbmlmb3JtcywgY2xpcHBpbmdNYXNrVW5pZm9ybVZhbHVlcyB9O1xuIiwiLy8gQGZsb3dcblxuaW1wb3J0IHsgbWF0NCB9IGZyb20gJ2dsLW1hdHJpeCc7XG5cbmltcG9ydCB7XG4gICAgVW5pZm9ybTFpLFxuICAgIFVuaWZvcm0xZixcbiAgICBVbmlmb3JtMmYsXG4gICAgVW5pZm9ybU1hdHJpeDRmXG59IGZyb20gJy4uL3VuaWZvcm1fYmluZGluZyc7XG5pbXBvcnQgcGl4ZWxzVG9UaWxlVW5pdHMgZnJvbSAnLi4vLi4vc291cmNlL3BpeGVsc190b190aWxlX3VuaXRzJztcblxuaW1wb3J0IHR5cGUgQ29udGV4dCBmcm9tICcuLi8uLi9nbC9jb250ZXh0JztcbmltcG9ydCB0eXBlIFRpbGUgZnJvbSAnLi4vLi4vc291cmNlL3RpbGUnO1xuaW1wb3J0IHR5cGUge1VuaWZvcm1WYWx1ZXMsIFVuaWZvcm1Mb2NhdGlvbnN9IGZyb20gJy4uL3VuaWZvcm1fYmluZGluZyc7XG5pbXBvcnQgdHlwZSBQYWludGVyIGZyb20gJy4uL3BhaW50ZXInO1xuaW1wb3J0IHR5cGUgSGVhdG1hcFN0eWxlTGF5ZXIgZnJvbSAnLi4vLi4vc3R5bGUvc3R5bGVfbGF5ZXIvaGVhdG1hcF9zdHlsZV9sYXllcic7XG5cbmV4cG9ydCB0eXBlIEhlYXRtYXBVbmlmb3Jtc1R5cGUgPSB7fFxuICAgICd1X2V4dHJ1ZGVfc2NhbGUnOiBVbmlmb3JtMWYsXG4gICAgJ3VfaW50ZW5zaXR5JzogVW5pZm9ybTFmLFxuICAgICd1X21hdHJpeCc6IFVuaWZvcm1NYXRyaXg0ZlxufH07XG5cbmV4cG9ydCB0eXBlIEhlYXRtYXBUZXh0dXJlVW5pZm9ybXNUeXBlID0ge3xcbiAgICAndV9tYXRyaXgnOiBVbmlmb3JtTWF0cml4NGYsXG4gICAgJ3Vfd29ybGQnOiBVbmlmb3JtMmYsXG4gICAgJ3VfaW1hZ2UnOiBVbmlmb3JtMWksXG4gICAgJ3VfY29sb3JfcmFtcCc6IFVuaWZvcm0xaSxcbiAgICAndV9vcGFjaXR5JzogVW5pZm9ybTFmXG58fTtcblxuY29uc3QgaGVhdG1hcFVuaWZvcm1zID0gKGNvbnRleHQ6IENvbnRleHQsIGxvY2F0aW9uczogVW5pZm9ybUxvY2F0aW9ucyk6IEhlYXRtYXBVbmlmb3Jtc1R5cGUgPT4gKHtcbiAgICAndV9leHRydWRlX3NjYWxlJzogbmV3IFVuaWZvcm0xZihjb250ZXh0LCBsb2NhdGlvbnMudV9leHRydWRlX3NjYWxlKSxcbiAgICAndV9pbnRlbnNpdHknOiBuZXcgVW5pZm9ybTFmKGNvbnRleHQsIGxvY2F0aW9ucy51X2ludGVuc2l0eSksXG4gICAgJ3VfbWF0cml4JzogbmV3IFVuaWZvcm1NYXRyaXg0Zihjb250ZXh0LCBsb2NhdGlvbnMudV9tYXRyaXgpXG59KTtcblxuY29uc3QgaGVhdG1hcFRleHR1cmVVbmlmb3JtcyA9IChjb250ZXh0OiBDb250ZXh0LCBsb2NhdGlvbnM6IFVuaWZvcm1Mb2NhdGlvbnMpOiBIZWF0bWFwVGV4dHVyZVVuaWZvcm1zVHlwZSA9PiAoe1xuICAgICd1X21hdHJpeCc6IG5ldyBVbmlmb3JtTWF0cml4NGYoY29udGV4dCwgbG9jYXRpb25zLnVfbWF0cml4KSxcbiAgICAndV93b3JsZCc6IG5ldyBVbmlmb3JtMmYoY29udGV4dCwgbG9jYXRpb25zLnVfd29ybGQpLFxuICAgICd1X2ltYWdlJzogbmV3IFVuaWZvcm0xaShjb250ZXh0LCBsb2NhdGlvbnMudV9pbWFnZSksXG4gICAgJ3VfY29sb3JfcmFtcCc6IG5ldyBVbmlmb3JtMWkoY29udGV4dCwgbG9jYXRpb25zLnVfY29sb3JfcmFtcCksXG4gICAgJ3Vfb3BhY2l0eSc6IG5ldyBVbmlmb3JtMWYoY29udGV4dCwgbG9jYXRpb25zLnVfb3BhY2l0eSlcbn0pO1xuXG5jb25zdCBoZWF0bWFwVW5pZm9ybVZhbHVlcyA9IChcbiAgICBtYXRyaXg6IEZsb2F0MzJBcnJheSxcbiAgICB0aWxlOiBUaWxlLFxuICAgIHpvb206IG51bWJlcixcbiAgICBpbnRlbnNpdHk6IG51bWJlclxuKTogVW5pZm9ybVZhbHVlczxIZWF0bWFwVW5pZm9ybXNUeXBlPiA9PiAoe1xuICAgICd1X21hdHJpeCc6IG1hdHJpeCxcbiAgICAndV9leHRydWRlX3NjYWxlJzogcGl4ZWxzVG9UaWxlVW5pdHModGlsZSwgMSwgem9vbSksXG4gICAgJ3VfaW50ZW5zaXR5JzogaW50ZW5zaXR5XG59KTtcblxuY29uc3QgaGVhdG1hcFRleHR1cmVVbmlmb3JtVmFsdWVzID0gKFxuICAgIHBhaW50ZXI6IFBhaW50ZXIsXG4gICAgbGF5ZXI6IEhlYXRtYXBTdHlsZUxheWVyLFxuICAgIHRleHR1cmVVbml0OiBudW1iZXIsXG4gICAgY29sb3JSYW1wVW5pdDogbnVtYmVyXG4pOiBVbmlmb3JtVmFsdWVzPEhlYXRtYXBUZXh0dXJlVW5pZm9ybXNUeXBlPiA9PiB7XG4gICAgY29uc3QgbWF0cml4ID0gbWF0NC5jcmVhdGUoKTtcbiAgICBtYXQ0Lm9ydGhvKG1hdHJpeCwgMCwgcGFpbnRlci53aWR0aCwgcGFpbnRlci5oZWlnaHQsIDAsIDAsIDEpO1xuXG4gICAgY29uc3QgZ2wgPSBwYWludGVyLmNvbnRleHQuZ2w7XG5cbiAgICByZXR1cm4ge1xuICAgICAgICAndV9tYXRyaXgnOiBtYXRyaXgsXG4gICAgICAgICd1X3dvcmxkJzogW2dsLmRyYXdpbmdCdWZmZXJXaWR0aCwgZ2wuZHJhd2luZ0J1ZmZlckhlaWdodF0sXG4gICAgICAgICd1X2ltYWdlJzogdGV4dHVyZVVuaXQsXG4gICAgICAgICd1X2NvbG9yX3JhbXAnOiBjb2xvclJhbXBVbml0LFxuICAgICAgICAndV9vcGFjaXR5JzogbGF5ZXIucGFpbnQuZ2V0KCdoZWF0bWFwLW9wYWNpdHknKVxuICAgIH07XG59O1xuXG5leHBvcnQge1xuICAgIGhlYXRtYXBVbmlmb3JtcyxcbiAgICBoZWF0bWFwVGV4dHVyZVVuaWZvcm1zLFxuICAgIGhlYXRtYXBVbmlmb3JtVmFsdWVzLFxuICAgIGhlYXRtYXBUZXh0dXJlVW5pZm9ybVZhbHVlc1xufTtcbiIsIi8vIEBmbG93XG5cbmltcG9ydCBhc3NlcnQgZnJvbSAnYXNzZXJ0JztcbmltcG9ydCB7IG1hdDQgfSBmcm9tICdnbC1tYXRyaXgnO1xuXG5pbXBvcnQge1xuICAgIFVuaWZvcm0xaSxcbiAgICBVbmlmb3JtMWYsXG4gICAgVW5pZm9ybTJmLFxuICAgIFVuaWZvcm1Db2xvcixcbiAgICBVbmlmb3JtTWF0cml4NGZcbn0gZnJvbSAnLi4vdW5pZm9ybV9iaW5kaW5nJztcbmltcG9ydCBFWFRFTlQgZnJvbSAnLi4vLi4vZGF0YS9leHRlbnQnO1xuaW1wb3J0IENvb3JkaW5hdGUgZnJvbSAnLi4vLi4vZ2VvL2Nvb3JkaW5hdGUnO1xuXG5pbXBvcnQgdHlwZSBDb250ZXh0IGZyb20gJy4uLy4uL2dsL2NvbnRleHQnO1xuaW1wb3J0IHR5cGUge1VuaWZvcm1WYWx1ZXMsIFVuaWZvcm1Mb2NhdGlvbnN9IGZyb20gJy4uL3VuaWZvcm1fYmluZGluZyc7XG5pbXBvcnQgdHlwZSBUaWxlIGZyb20gJy4uLy4uL3NvdXJjZS90aWxlJztcbmltcG9ydCB0eXBlIFBhaW50ZXIgZnJvbSAnLi4vcGFpbnRlcic7XG5pbXBvcnQgdHlwZSBIaWxsc2hhZGVTdHlsZUxheWVyIGZyb20gJy4uLy4uL3N0eWxlL3N0eWxlX2xheWVyL2hpbGxzaGFkZV9zdHlsZV9sYXllcic7XG5pbXBvcnQgdHlwZSBERU1EYXRhIGZyb20gJy4uLy4uL2RhdGEvZGVtX2RhdGEnO1xuaW1wb3J0IHR5cGUge092ZXJzY2FsZWRUaWxlSUR9IGZyb20gJy4uLy4uL3NvdXJjZS90aWxlX2lkJztcblxuZXhwb3J0IHR5cGUgSGlsbHNoYWRlVW5pZm9ybXNUeXBlID0ge3xcbiAgICAndV9tYXRyaXgnOiBVbmlmb3JtTWF0cml4NGYsXG4gICAgJ3VfaW1hZ2UnOiBVbmlmb3JtMWksXG4gICAgJ3VfbGF0cmFuZ2UnOiBVbmlmb3JtMmYsXG4gICAgJ3VfbGlnaHQnOiBVbmlmb3JtMmYsXG4gICAgJ3Vfc2hhZG93JzogVW5pZm9ybUNvbG9yLFxuICAgICd1X2hpZ2hsaWdodCc6IFVuaWZvcm1Db2xvcixcbiAgICAndV9hY2NlbnQnOiBVbmlmb3JtQ29sb3Jcbnx9O1xuXG5leHBvcnQgdHlwZSBIaWxsc2hhZGVQcmVwYXJlVW5pZm9ybXNUeXBlID0ge3xcbiAgICAndV9tYXRyaXgnOiBVbmlmb3JtTWF0cml4NGYsXG4gICAgJ3VfaW1hZ2UnOiBVbmlmb3JtMWksXG4gICAgJ3VfZGltZW5zaW9uJzogVW5pZm9ybTJmLFxuICAgICd1X3pvb20nOiBVbmlmb3JtMWYsXG4gICAgJ3VfbWF4em9vbSc6IFVuaWZvcm0xZlxufH07XG5cbmNvbnN0IGhpbGxzaGFkZVVuaWZvcm1zID0gKGNvbnRleHQ6IENvbnRleHQsIGxvY2F0aW9uczogVW5pZm9ybUxvY2F0aW9ucyk6IEhpbGxzaGFkZVVuaWZvcm1zVHlwZSA9PiAoe1xuICAgICd1X21hdHJpeCc6IG5ldyBVbmlmb3JtTWF0cml4NGYoY29udGV4dCwgbG9jYXRpb25zLnVfbWF0cml4KSxcbiAgICAndV9pbWFnZSc6IG5ldyBVbmlmb3JtMWkoY29udGV4dCwgbG9jYXRpb25zLnVfaW1hZ2UpLFxuICAgICd1X2xhdHJhbmdlJzogbmV3IFVuaWZvcm0yZihjb250ZXh0LCBsb2NhdGlvbnMudV9sYXRyYW5nZSksXG4gICAgJ3VfbGlnaHQnOiBuZXcgVW5pZm9ybTJmKGNvbnRleHQsIGxvY2F0aW9ucy51X2xpZ2h0KSxcbiAgICAndV9zaGFkb3cnOiBuZXcgVW5pZm9ybUNvbG9yKGNvbnRleHQsIGxvY2F0aW9ucy51X3NoYWRvdyksXG4gICAgJ3VfaGlnaGxpZ2h0JzogbmV3IFVuaWZvcm1Db2xvcihjb250ZXh0LCBsb2NhdGlvbnMudV9oaWdobGlnaHQpLFxuICAgICd1X2FjY2VudCc6IG5ldyBVbmlmb3JtQ29sb3IoY29udGV4dCwgbG9jYXRpb25zLnVfYWNjZW50KVxufSk7XG5cbmNvbnN0IGhpbGxzaGFkZVByZXBhcmVVbmlmb3JtcyA9IChjb250ZXh0OiBDb250ZXh0LCBsb2NhdGlvbnM6IFVuaWZvcm1Mb2NhdGlvbnMpOiBIaWxsc2hhZGVQcmVwYXJlVW5pZm9ybXNUeXBlID0+ICh7XG4gICAgJ3VfbWF0cml4JzogbmV3IFVuaWZvcm1NYXRyaXg0Zihjb250ZXh0LCBsb2NhdGlvbnMudV9tYXRyaXgpLFxuICAgICd1X2ltYWdlJzogbmV3IFVuaWZvcm0xaShjb250ZXh0LCBsb2NhdGlvbnMudV9pbWFnZSksXG4gICAgJ3VfZGltZW5zaW9uJzogbmV3IFVuaWZvcm0yZihjb250ZXh0LCBsb2NhdGlvbnMudV9kaW1lbnNpb24pLFxuICAgICd1X3pvb20nOiBuZXcgVW5pZm9ybTFmKGNvbnRleHQsIGxvY2F0aW9ucy51X3pvb20pLFxuICAgICd1X21heHpvb20nOiBuZXcgVW5pZm9ybTFmKGNvbnRleHQsIGxvY2F0aW9ucy51X21heHpvb20pXG59KTtcblxuY29uc3QgaGlsbHNoYWRlVW5pZm9ybVZhbHVlcyA9IChcbiAgICBwYWludGVyOiBQYWludGVyLFxuICAgIHRpbGU6IFRpbGUsXG4gICAgbGF5ZXI6IEhpbGxzaGFkZVN0eWxlTGF5ZXJcbik6IFVuaWZvcm1WYWx1ZXM8SGlsbHNoYWRlVW5pZm9ybXNUeXBlPiA9PiB7XG4gICAgY29uc3Qgc2hhZG93ID0gbGF5ZXIucGFpbnQuZ2V0KFwiaGlsbHNoYWRlLXNoYWRvdy1jb2xvclwiKTtcbiAgICBjb25zdCBoaWdobGlnaHQgPSBsYXllci5wYWludC5nZXQoXCJoaWxsc2hhZGUtaGlnaGxpZ2h0LWNvbG9yXCIpO1xuICAgIGNvbnN0IGFjY2VudCA9IGxheWVyLnBhaW50LmdldChcImhpbGxzaGFkZS1hY2NlbnQtY29sb3JcIik7XG5cbiAgICBsZXQgYXppbXV0aGFsID0gbGF5ZXIucGFpbnQuZ2V0KCdoaWxsc2hhZGUtaWxsdW1pbmF0aW9uLWRpcmVjdGlvbicpICogKE1hdGguUEkgLyAxODApO1xuICAgIC8vIG1vZGlmeSBhemltdXRoYWwgYW5nbGUgYnkgbWFwIHJvdGF0aW9uIGlmIGxpZ2h0IGlzIGFuY2hvcmVkIGF0IHRoZSB2aWV3cG9ydFxuICAgIGlmIChsYXllci5wYWludC5nZXQoJ2hpbGxzaGFkZS1pbGx1bWluYXRpb24tYW5jaG9yJykgPT09ICd2aWV3cG9ydCcpIHtcbiAgICAgICAgYXppbXV0aGFsIC09IHBhaW50ZXIudHJhbnNmb3JtLmFuZ2xlO1xuICAgIH1cblxuICAgIHJldHVybiB7XG4gICAgICAgICd1X21hdHJpeCc6IHBhaW50ZXIudHJhbnNmb3JtLmNhbGN1bGF0ZVBvc01hdHJpeCh0aWxlLnRpbGVJRC50b1Vud3JhcHBlZCgpLCB0cnVlKSxcbiAgICAgICAgJ3VfaW1hZ2UnOiAwLFxuICAgICAgICAndV9sYXRyYW5nZSc6IGdldFRpbGVMYXRSYW5nZShwYWludGVyLCB0aWxlLnRpbGVJRCksXG4gICAgICAgICd1X2xpZ2h0JzogW2xheWVyLnBhaW50LmdldCgnaGlsbHNoYWRlLWV4YWdnZXJhdGlvbicpLCBhemltdXRoYWxdLFxuICAgICAgICAndV9zaGFkb3cnOiBzaGFkb3csXG4gICAgICAgICd1X2hpZ2hsaWdodCc6IGhpZ2hsaWdodCxcbiAgICAgICAgJ3VfYWNjZW50JzogYWNjZW50XG4gICAgfTtcbn07XG5cbmNvbnN0IGhpbGxzaGFkZVVuaWZvcm1QcmVwYXJlVmFsdWVzID0gKFxuICAgIHRpbGU6IHtkZW06ID9ERU1EYXRhLCB0aWxlSUQ6IE92ZXJzY2FsZWRUaWxlSUR9LCBtYXh6b29tOiBudW1iZXJcbik6IFVuaWZvcm1WYWx1ZXM8SGlsbHNoYWRlUHJlcGFyZVVuaWZvcm1zVHlwZT4gPT4ge1xuICAgIGFzc2VydCh0aWxlLmRlbSk7XG4gICAgY29uc3QgdGlsZVNpemUgPSAoKHRpbGUuZGVtOiBhbnkpOiBERU1EYXRhKS5kaW07XG4gICAgY29uc3QgbWF0cml4ID0gbWF0NC5jcmVhdGUoKTtcbiAgICAvLyBGbGlwIHJlbmRlcmluZyBhdCB5IGF4aXMuXG4gICAgbWF0NC5vcnRobyhtYXRyaXgsIDAsIEVYVEVOVCwgLUVYVEVOVCwgMCwgMCwgMSk7XG4gICAgbWF0NC50cmFuc2xhdGUobWF0cml4LCBtYXRyaXgsIFswLCAtRVhURU5ULCAwXSk7XG5cbiAgICByZXR1cm4ge1xuICAgICAgICAndV9tYXRyaXgnOiBtYXRyaXgsXG4gICAgICAgICd1X2ltYWdlJzogMSxcbiAgICAgICAgJ3VfZGltZW5zaW9uJzogW3RpbGVTaXplICogMiwgdGlsZVNpemUgKiAyXSxcbiAgICAgICAgJ3Vfem9vbSc6IHRpbGUudGlsZUlELm92ZXJzY2FsZWRaLFxuICAgICAgICAndV9tYXh6b29tJzogbWF4em9vbVxuICAgIH07XG59O1xuXG5mdW5jdGlvbiBnZXRUaWxlTGF0UmFuZ2UocGFpbnRlcjogUGFpbnRlciwgdGlsZUlEOiBPdmVyc2NhbGVkVGlsZUlEKSB7XG4gICAgLy8gZm9yIHNjYWxpbmcgdGhlIG1hZ25pdHVkZSBvZiBhIHBvaW50cyBzbG9wZSBieSBpdHMgbGF0aXR1ZGVcbiAgICBjb25zdCBjb29yZGluYXRlMCA9IHRpbGVJRC50b0Nvb3JkaW5hdGUoKTtcbiAgICBjb25zdCBjb29yZGluYXRlMSA9IG5ldyBDb29yZGluYXRlKFxuICAgICAgICBjb29yZGluYXRlMC5jb2x1bW4sIGNvb3JkaW5hdGUwLnJvdyArIDEsIGNvb3JkaW5hdGUwLnpvb20pO1xuICAgIHJldHVybiBbXG4gICAgICAgIHBhaW50ZXIudHJhbnNmb3JtLmNvb3JkaW5hdGVMb2NhdGlvbihjb29yZGluYXRlMCkubGF0LFxuICAgICAgICBwYWludGVyLnRyYW5zZm9ybS5jb29yZGluYXRlTG9jYXRpb24oY29vcmRpbmF0ZTEpLmxhdFxuICAgIF07XG59XG5cbmV4cG9ydCB7XG4gICAgaGlsbHNoYWRlVW5pZm9ybXMsXG4gICAgaGlsbHNoYWRlUHJlcGFyZVVuaWZvcm1zLFxuICAgIGhpbGxzaGFkZVVuaWZvcm1WYWx1ZXMsXG4gICAgaGlsbHNoYWRlVW5pZm9ybVByZXBhcmVWYWx1ZXNcbn07XG4iLCIvLyBAZmxvd1xuXG5pbXBvcnQge1xuICAgIFVuaWZvcm0xaSxcbiAgICBVbmlmb3JtMWYsXG4gICAgVW5pZm9ybTJmLFxuICAgIFVuaWZvcm00ZixcbiAgICBVbmlmb3JtTWF0cml4NGZcbn0gZnJvbSAnLi4vdW5pZm9ybV9iaW5kaW5nJztcbmltcG9ydCBwaXhlbHNUb1RpbGVVbml0cyBmcm9tICcuLi8uLi9zb3VyY2UvcGl4ZWxzX3RvX3RpbGVfdW5pdHMnO1xuaW1wb3J0IHsgZXh0ZW5kIH0gZnJvbSAnLi4vLi4vdXRpbC91dGlsJztcbmltcG9ydCBicm93c2VyIGZyb20gJy4uLy4uL3V0aWwvYnJvd3Nlcic7XG5cbmltcG9ydCB0eXBlIENvbnRleHQgZnJvbSAnLi4vLi4vZ2wvY29udGV4dCc7XG5pbXBvcnQgdHlwZSB7VW5pZm9ybVZhbHVlcywgVW5pZm9ybUxvY2F0aW9uc30gZnJvbSAnLi4vdW5pZm9ybV9iaW5kaW5nJztcbmltcG9ydCB0eXBlIFRyYW5zZm9ybSBmcm9tICcuLi8uLi9nZW8vdHJhbnNmb3JtJztcbmltcG9ydCB0eXBlIFRpbGUgZnJvbSAnLi4vLi4vc291cmNlL3RpbGUnO1xuaW1wb3J0IHR5cGUge0Nyb3NzRmFkZWR9IGZyb20gJy4uLy4uL3N0eWxlL3Byb3BlcnRpZXMnO1xuaW1wb3J0IHR5cGUgTGluZVN0eWxlTGF5ZXIgZnJvbSAnLi4vLi4vc3R5bGUvc3R5bGVfbGF5ZXIvbGluZV9zdHlsZV9sYXllcic7XG5pbXBvcnQgdHlwZSBQYWludGVyIGZyb20gJy4uL3BhaW50ZXInO1xuaW1wb3J0IHR5cGUge0Nyb3NzZmFkZVBhcmFtZXRlcnN9IGZyb20gJy4uLy4uL3N0eWxlL2V2YWx1YXRpb25fcGFyYW1ldGVycyc7XG5cbmV4cG9ydCB0eXBlIExpbmVVbmlmb3Jtc1R5cGUgPSB7fFxuICAgICd1X21hdHJpeCc6IFVuaWZvcm1NYXRyaXg0ZixcbiAgICAndV9yYXRpbyc6IFVuaWZvcm0xZixcbiAgICAndV9nbF91bml0c190b19waXhlbHMnOiBVbmlmb3JtMmZcbnx9O1xuXG5leHBvcnQgdHlwZSBMaW5lR3JhZGllbnRVbmlmb3Jtc1R5cGUgPSB7fFxuICAgICd1X21hdHJpeCc6IFVuaWZvcm1NYXRyaXg0ZixcbiAgICAndV9yYXRpbyc6IFVuaWZvcm0xZixcbiAgICAndV9nbF91bml0c190b19waXhlbHMnOiBVbmlmb3JtMmYsXG4gICAgJ3VfaW1hZ2UnOiBVbmlmb3JtMWlcbnx9O1xuXG5leHBvcnQgdHlwZSBMaW5lUGF0dGVyblVuaWZvcm1zVHlwZSA9IHt8XG4gICAgJ3VfbWF0cml4JzogVW5pZm9ybU1hdHJpeDRmLFxuICAgICd1X3RleHNpemUnOiBVbmlmb3JtMmYsXG4gICAgJ3VfcmF0aW8nOiBVbmlmb3JtMWYsXG4gICAgJ3VfZ2xfdW5pdHNfdG9fcGl4ZWxzJzogVW5pZm9ybTJmLFxuICAgICd1X2ltYWdlJzogVW5pZm9ybTFpLFxuICAgICd1X3NjYWxlJzogVW5pZm9ybTRmLFxuICAgICd1X2ZhZGUnOiBVbmlmb3JtMWZcbnx9O1xuXG5leHBvcnQgdHlwZSBMaW5lU0RGVW5pZm9ybXNUeXBlID0ge3xcbiAgICAndV9tYXRyaXgnOiBVbmlmb3JtTWF0cml4NGYsXG4gICAgJ3VfcmF0aW8nOiBVbmlmb3JtMWYsXG4gICAgJ3VfZ2xfdW5pdHNfdG9fcGl4ZWxzJzogVW5pZm9ybTJmLFxuICAgICd1X3BhdHRlcm5zY2FsZV9hJzogVW5pZm9ybTJmLFxuICAgICd1X3BhdHRlcm5zY2FsZV9iJzogVW5pZm9ybTJmLFxuICAgICd1X3NkZmdhbW1hJzogVW5pZm9ybTFmLFxuICAgICd1X2ltYWdlJzogVW5pZm9ybTFpLFxuICAgICd1X3RleF95X2EnOiBVbmlmb3JtMWYsXG4gICAgJ3VfdGV4X3lfYic6IFVuaWZvcm0xZixcbiAgICAndV9taXgnOiBVbmlmb3JtMWZcbnx9O1xuXG5jb25zdCBsaW5lVW5pZm9ybXMgPSAoY29udGV4dDogQ29udGV4dCwgbG9jYXRpb25zOiBVbmlmb3JtTG9jYXRpb25zKTogTGluZVVuaWZvcm1zVHlwZSA9PiAoe1xuICAgICd1X21hdHJpeCc6IG5ldyBVbmlmb3JtTWF0cml4NGYoY29udGV4dCwgbG9jYXRpb25zLnVfbWF0cml4KSxcbiAgICAndV9yYXRpbyc6IG5ldyBVbmlmb3JtMWYoY29udGV4dCwgbG9jYXRpb25zLnVfcmF0aW8pLFxuICAgICd1X2dsX3VuaXRzX3RvX3BpeGVscyc6IG5ldyBVbmlmb3JtMmYoY29udGV4dCwgbG9jYXRpb25zLnVfZ2xfdW5pdHNfdG9fcGl4ZWxzKVxufSk7XG5cbmNvbnN0IGxpbmVHcmFkaWVudFVuaWZvcm1zID0gKGNvbnRleHQ6IENvbnRleHQsIGxvY2F0aW9uczogVW5pZm9ybUxvY2F0aW9ucyk6IExpbmVHcmFkaWVudFVuaWZvcm1zVHlwZSA9PiAoe1xuICAgICd1X21hdHJpeCc6IG5ldyBVbmlmb3JtTWF0cml4NGYoY29udGV4dCwgbG9jYXRpb25zLnVfbWF0cml4KSxcbiAgICAndV9yYXRpbyc6IG5ldyBVbmlmb3JtMWYoY29udGV4dCwgbG9jYXRpb25zLnVfcmF0aW8pLFxuICAgICd1X2dsX3VuaXRzX3RvX3BpeGVscyc6IG5ldyBVbmlmb3JtMmYoY29udGV4dCwgbG9jYXRpb25zLnVfZ2xfdW5pdHNfdG9fcGl4ZWxzKSxcbiAgICAndV9pbWFnZSc6IG5ldyBVbmlmb3JtMWkoY29udGV4dCwgbG9jYXRpb25zLnVfaW1hZ2UpXG59KTtcblxuY29uc3QgbGluZVBhdHRlcm5Vbmlmb3JtcyA9IChjb250ZXh0OiBDb250ZXh0LCBsb2NhdGlvbnM6IFVuaWZvcm1Mb2NhdGlvbnMpOiBMaW5lUGF0dGVyblVuaWZvcm1zVHlwZSA9PiAoe1xuICAgICd1X21hdHJpeCc6IG5ldyBVbmlmb3JtTWF0cml4NGYoY29udGV4dCwgbG9jYXRpb25zLnVfbWF0cml4KSxcbiAgICAndV90ZXhzaXplJzogbmV3IFVuaWZvcm0yZihjb250ZXh0LCBsb2NhdGlvbnMudV90ZXhzaXplKSxcbiAgICAndV9yYXRpbyc6IG5ldyBVbmlmb3JtMWYoY29udGV4dCwgbG9jYXRpb25zLnVfcmF0aW8pLFxuICAgICd1X2ltYWdlJzogbmV3IFVuaWZvcm0xaShjb250ZXh0LCBsb2NhdGlvbnMudV9pbWFnZSksXG4gICAgJ3VfZ2xfdW5pdHNfdG9fcGl4ZWxzJzogbmV3IFVuaWZvcm0yZihjb250ZXh0LCBsb2NhdGlvbnMudV9nbF91bml0c190b19waXhlbHMpLFxuICAgICd1X3NjYWxlJzogbmV3IFVuaWZvcm00Zihjb250ZXh0LCBsb2NhdGlvbnMudV9zY2FsZSksXG4gICAgJ3VfZmFkZSc6IG5ldyBVbmlmb3JtMWYoY29udGV4dCwgbG9jYXRpb25zLnVfZmFkZSlcbn0pO1xuXG5jb25zdCBsaW5lU0RGVW5pZm9ybXMgPSAoY29udGV4dDogQ29udGV4dCwgbG9jYXRpb25zOiBVbmlmb3JtTG9jYXRpb25zKTogTGluZVNERlVuaWZvcm1zVHlwZSA9PiAoe1xuICAgICd1X21hdHJpeCc6IG5ldyBVbmlmb3JtTWF0cml4NGYoY29udGV4dCwgbG9jYXRpb25zLnVfbWF0cml4KSxcbiAgICAndV9yYXRpbyc6IG5ldyBVbmlmb3JtMWYoY29udGV4dCwgbG9jYXRpb25zLnVfcmF0aW8pLFxuICAgICd1X2dsX3VuaXRzX3RvX3BpeGVscyc6IG5ldyBVbmlmb3JtMmYoY29udGV4dCwgbG9jYXRpb25zLnVfZ2xfdW5pdHNfdG9fcGl4ZWxzKSxcbiAgICAndV9wYXR0ZXJuc2NhbGVfYSc6IG5ldyBVbmlmb3JtMmYoY29udGV4dCwgbG9jYXRpb25zLnVfcGF0dGVybnNjYWxlX2EpLFxuICAgICd1X3BhdHRlcm5zY2FsZV9iJzogbmV3IFVuaWZvcm0yZihjb250ZXh0LCBsb2NhdGlvbnMudV9wYXR0ZXJuc2NhbGVfYiksXG4gICAgJ3Vfc2RmZ2FtbWEnOiBuZXcgVW5pZm9ybTFmKGNvbnRleHQsIGxvY2F0aW9ucy51X3NkZmdhbW1hKSxcbiAgICAndV9pbWFnZSc6IG5ldyBVbmlmb3JtMWkoY29udGV4dCwgbG9jYXRpb25zLnVfaW1hZ2UpLFxuICAgICd1X3RleF95X2EnOiBuZXcgVW5pZm9ybTFmKGNvbnRleHQsIGxvY2F0aW9ucy51X3RleF95X2EpLFxuICAgICd1X3RleF95X2InOiBuZXcgVW5pZm9ybTFmKGNvbnRleHQsIGxvY2F0aW9ucy51X3RleF95X2IpLFxuICAgICd1X21peCc6IG5ldyBVbmlmb3JtMWYoY29udGV4dCwgbG9jYXRpb25zLnVfbWl4KVxufSk7XG5cbmNvbnN0IGxpbmVVbmlmb3JtVmFsdWVzID0gKFxuICAgIHBhaW50ZXI6IFBhaW50ZXIsXG4gICAgdGlsZTogVGlsZSxcbiAgICBsYXllcjogTGluZVN0eWxlTGF5ZXJcbik6IFVuaWZvcm1WYWx1ZXM8TGluZVVuaWZvcm1zVHlwZT4gPT4ge1xuICAgIGNvbnN0IHRyYW5zZm9ybSA9IHBhaW50ZXIudHJhbnNmb3JtO1xuXG4gICAgcmV0dXJuIHtcbiAgICAgICAgJ3VfbWF0cml4JzogY2FsY3VsYXRlTWF0cml4KHBhaW50ZXIsIHRpbGUsIGxheWVyKSxcbiAgICAgICAgJ3VfcmF0aW8nOiAxIC8gcGl4ZWxzVG9UaWxlVW5pdHModGlsZSwgMSwgdHJhbnNmb3JtLnpvb20pLFxuICAgICAgICAndV9nbF91bml0c190b19waXhlbHMnOiBbXG4gICAgICAgICAgICAxIC8gdHJhbnNmb3JtLnBpeGVsc1RvR0xVbml0c1swXSxcbiAgICAgICAgICAgIDEgLyB0cmFuc2Zvcm0ucGl4ZWxzVG9HTFVuaXRzWzFdXG4gICAgICAgIF1cbiAgICB9O1xufTtcblxuY29uc3QgbGluZUdyYWRpZW50VW5pZm9ybVZhbHVlcyA9IChcbiAgICBwYWludGVyOiBQYWludGVyLFxuICAgIHRpbGU6IFRpbGUsXG4gICAgbGF5ZXI6IExpbmVTdHlsZUxheWVyXG4pOiBVbmlmb3JtVmFsdWVzPExpbmVHcmFkaWVudFVuaWZvcm1zVHlwZT4gPT4ge1xuICAgIHJldHVybiBleHRlbmQobGluZVVuaWZvcm1WYWx1ZXMocGFpbnRlciwgdGlsZSwgbGF5ZXIpLCB7XG4gICAgICAgICd1X2ltYWdlJzogMFxuICAgIH0pO1xufTtcblxuY29uc3QgbGluZVBhdHRlcm5Vbmlmb3JtVmFsdWVzID0gKFxuICAgIHBhaW50ZXI6IFBhaW50ZXIsXG4gICAgdGlsZTogVGlsZSxcbiAgICBsYXllcjogTGluZVN0eWxlTGF5ZXIsXG4gICAgY3Jvc3NmYWRlOiBDcm9zc2ZhZGVQYXJhbWV0ZXJzXG4pOiBVbmlmb3JtVmFsdWVzPExpbmVQYXR0ZXJuVW5pZm9ybXNUeXBlPiA9PiB7XG4gICAgY29uc3QgdHJhbnNmb3JtID0gcGFpbnRlci50cmFuc2Zvcm07XG4gICAgY29uc3QgdGlsZVpvb21SYXRpbyA9IGNhbGN1bGF0ZVRpbGVSYXRpbyh0aWxlLCB0cmFuc2Zvcm0pO1xuICAgIHJldHVybiB7XG4gICAgICAgICd1X21hdHJpeCc6IGNhbGN1bGF0ZU1hdHJpeChwYWludGVyLCB0aWxlLCBsYXllciksXG4gICAgICAgICd1X3RleHNpemUnOiB0aWxlLmltYWdlQXRsYXNUZXh0dXJlLnNpemUsXG4gICAgICAgIC8vIGNhbWVyYSB6b29tIHJhdGlvXG4gICAgICAgICd1X3JhdGlvJzogMSAvIHBpeGVsc1RvVGlsZVVuaXRzKHRpbGUsIDEsIHRyYW5zZm9ybS56b29tKSxcbiAgICAgICAgJ3VfaW1hZ2UnOiAwLFxuICAgICAgICAvLyB0aGlzIGFzc3VtZXMgYWxsIGltYWdlcyBpbiB0aGUgaWNvbiBhdGxhcyB0ZXh0dXJlIGhhdmUgdGhlIHNhbWUgcGl4ZWwgcmF0aW9cbiAgICAgICAgJ3Vfc2NhbGUnOiBbYnJvd3Nlci5kZXZpY2VQaXhlbFJhdGlvLCB0aWxlWm9vbVJhdGlvLCBjcm9zc2ZhZGUuZnJvbVNjYWxlLCBjcm9zc2ZhZGUudG9TY2FsZV0sXG4gICAgICAgICd1X2ZhZGUnOiBjcm9zc2ZhZGUudCxcbiAgICAgICAgJ3VfZ2xfdW5pdHNfdG9fcGl4ZWxzJzogW1xuICAgICAgICAgICAgMSAvIHRyYW5zZm9ybS5waXhlbHNUb0dMVW5pdHNbMF0sXG4gICAgICAgICAgICAxIC8gdHJhbnNmb3JtLnBpeGVsc1RvR0xVbml0c1sxXVxuICAgICAgICBdXG4gICAgfTtcbn07XG5cbmNvbnN0IGxpbmVTREZVbmlmb3JtVmFsdWVzID0gKFxuICAgIHBhaW50ZXI6IFBhaW50ZXIsXG4gICAgdGlsZTogVGlsZSxcbiAgICBsYXllcjogTGluZVN0eWxlTGF5ZXIsXG4gICAgZGFzaGFycmF5OiBDcm9zc0ZhZGVkPEFycmF5PG51bWJlcj4+LFxuICAgIGNyb3NzZmFkZTogQ3Jvc3NmYWRlUGFyYW1ldGVyc1xuKTogVW5pZm9ybVZhbHVlczxMaW5lU0RGVW5pZm9ybXNUeXBlPiA9PiB7XG4gICAgY29uc3QgdHJhbnNmb3JtID0gcGFpbnRlci50cmFuc2Zvcm07XG4gICAgY29uc3QgbGluZUF0bGFzID0gcGFpbnRlci5saW5lQXRsYXM7XG4gICAgY29uc3QgdGlsZVJhdGlvID0gY2FsY3VsYXRlVGlsZVJhdGlvKHRpbGUsIHRyYW5zZm9ybSk7XG5cbiAgICBjb25zdCByb3VuZCA9IGxheWVyLmxheW91dC5nZXQoJ2xpbmUtY2FwJykgPT09ICdyb3VuZCc7XG5cbiAgICBjb25zdCBwb3NBID0gbGluZUF0bGFzLmdldERhc2goZGFzaGFycmF5LmZyb20sIHJvdW5kKTtcbiAgICBjb25zdCBwb3NCID0gbGluZUF0bGFzLmdldERhc2goZGFzaGFycmF5LnRvLCByb3VuZCk7XG5cbiAgICBjb25zdCB3aWR0aEEgPSBwb3NBLndpZHRoICogY3Jvc3NmYWRlLmZyb21TY2FsZTtcbiAgICBjb25zdCB3aWR0aEIgPSBwb3NCLndpZHRoICogY3Jvc3NmYWRlLnRvU2NhbGU7XG5cbiAgICByZXR1cm4gZXh0ZW5kKGxpbmVVbmlmb3JtVmFsdWVzKHBhaW50ZXIsIHRpbGUsIGxheWVyKSwge1xuICAgICAgICAndV9wYXR0ZXJuc2NhbGVfYSc6IFt0aWxlUmF0aW8gLyB3aWR0aEEsIC1wb3NBLmhlaWdodCAvIDJdLFxuICAgICAgICAndV9wYXR0ZXJuc2NhbGVfYic6IFt0aWxlUmF0aW8gLyB3aWR0aEIsIC1wb3NCLmhlaWdodCAvIDJdLFxuICAgICAgICAndV9zZGZnYW1tYSc6IGxpbmVBdGxhcy53aWR0aCAvIChNYXRoLm1pbih3aWR0aEEsIHdpZHRoQikgKiAyNTYgKiBicm93c2VyLmRldmljZVBpeGVsUmF0aW8pIC8gMixcbiAgICAgICAgJ3VfaW1hZ2UnOiAwLFxuICAgICAgICAndV90ZXhfeV9hJzogcG9zQS55LFxuICAgICAgICAndV90ZXhfeV9iJzogcG9zQi55LFxuICAgICAgICAndV9taXgnOiBjcm9zc2ZhZGUudFxuICAgIH0pO1xufTtcblxuZnVuY3Rpb24gY2FsY3VsYXRlVGlsZVJhdGlvKHRpbGU6IFRpbGUsIHRyYW5zZm9ybTogVHJhbnNmb3JtKSB7XG4gICAgcmV0dXJuIDEgLyBwaXhlbHNUb1RpbGVVbml0cyh0aWxlLCAxLCB0cmFuc2Zvcm0udGlsZVpvb20pO1xufVxuXG5mdW5jdGlvbiBjYWxjdWxhdGVNYXRyaXgocGFpbnRlciwgdGlsZSwgbGF5ZXIpIHtcbiAgICByZXR1cm4gcGFpbnRlci50cmFuc2xhdGVQb3NNYXRyaXgoXG4gICAgICAgIHRpbGUudGlsZUlELnBvc01hdHJpeCxcbiAgICAgICAgdGlsZSxcbiAgICAgICAgbGF5ZXIucGFpbnQuZ2V0KCdsaW5lLXRyYW5zbGF0ZScpLFxuICAgICAgICBsYXllci5wYWludC5nZXQoJ2xpbmUtdHJhbnNsYXRlLWFuY2hvcicpXG4gICAgKTtcbn1cblxuZXhwb3J0IHtcbiAgICBsaW5lVW5pZm9ybXMsXG4gICAgbGluZUdyYWRpZW50VW5pZm9ybXMsXG4gICAgbGluZVBhdHRlcm5Vbmlmb3JtcyxcbiAgICBsaW5lU0RGVW5pZm9ybXMsXG4gICAgbGluZVVuaWZvcm1WYWx1ZXMsXG4gICAgbGluZUdyYWRpZW50VW5pZm9ybVZhbHVlcyxcbiAgICBsaW5lUGF0dGVyblVuaWZvcm1WYWx1ZXMsXG4gICAgbGluZVNERlVuaWZvcm1WYWx1ZXNcbn07XG4iLCIvLyBAZmxvd1xuXG5pbXBvcnQge1xuICAgIFVuaWZvcm0xaSxcbiAgICBVbmlmb3JtMWYsXG4gICAgVW5pZm9ybTJmLFxuICAgIFVuaWZvcm0zZixcbiAgICBVbmlmb3JtTWF0cml4NGZcbn0gZnJvbSAnLi4vdW5pZm9ybV9iaW5kaW5nJztcblxuaW1wb3J0IHR5cGUgQ29udGV4dCBmcm9tICcuLi8uLi9nbC9jb250ZXh0JztcbmltcG9ydCB0eXBlIHtVbmlmb3JtVmFsdWVzLCBVbmlmb3JtTG9jYXRpb25zfSBmcm9tICcuLi91bmlmb3JtX2JpbmRpbmcnO1xuaW1wb3J0IHR5cGUgUmFzdGVyU3R5bGVMYXllciBmcm9tICcuLi8uLi9zdHlsZS9zdHlsZV9sYXllci9yYXN0ZXJfc3R5bGVfbGF5ZXInO1xuXG5leHBvcnQgdHlwZSBSYXN0ZXJVbmlmb3Jtc1R5cGUgPSB7fFxuICAgICd1X21hdHJpeCc6IFVuaWZvcm1NYXRyaXg0ZixcbiAgICAndV90bF9wYXJlbnQnOiBVbmlmb3JtMmYsXG4gICAgJ3Vfc2NhbGVfcGFyZW50JzogVW5pZm9ybTFmLFxuICAgICd1X2J1ZmZlcl9zY2FsZSc6IFVuaWZvcm0xZixcbiAgICAndV9mYWRlX3QnOiBVbmlmb3JtMWYsXG4gICAgJ3Vfb3BhY2l0eSc6IFVuaWZvcm0xZixcbiAgICAndV9pbWFnZTAnOiBVbmlmb3JtMWksXG4gICAgJ3VfaW1hZ2UxJzogVW5pZm9ybTFpLFxuICAgICd1X2JyaWdodG5lc3NfbG93JzogVW5pZm9ybTFmLFxuICAgICd1X2JyaWdodG5lc3NfaGlnaCc6IFVuaWZvcm0xZixcbiAgICAndV9zYXR1cmF0aW9uX2ZhY3Rvcic6IFVuaWZvcm0xZixcbiAgICAndV9jb250cmFzdF9mYWN0b3InOiBVbmlmb3JtMWYsXG4gICAgJ3Vfc3Bpbl93ZWlnaHRzJzogVW5pZm9ybTNmXG58fTtcblxuY29uc3QgcmFzdGVyVW5pZm9ybXMgPSAoY29udGV4dDogQ29udGV4dCwgbG9jYXRpb25zOiBVbmlmb3JtTG9jYXRpb25zKTogUmFzdGVyVW5pZm9ybXNUeXBlID0+ICh7XG4gICAgJ3VfbWF0cml4JzogbmV3IFVuaWZvcm1NYXRyaXg0Zihjb250ZXh0LCBsb2NhdGlvbnMudV9tYXRyaXgpLFxuICAgICd1X3RsX3BhcmVudCc6IG5ldyBVbmlmb3JtMmYoY29udGV4dCwgbG9jYXRpb25zLnVfdGxfcGFyZW50KSxcbiAgICAndV9zY2FsZV9wYXJlbnQnOiBuZXcgVW5pZm9ybTFmKGNvbnRleHQsIGxvY2F0aW9ucy51X3NjYWxlX3BhcmVudCksXG4gICAgJ3VfYnVmZmVyX3NjYWxlJzogbmV3IFVuaWZvcm0xZihjb250ZXh0LCBsb2NhdGlvbnMudV9idWZmZXJfc2NhbGUpLFxuICAgICd1X2ZhZGVfdCc6IG5ldyBVbmlmb3JtMWYoY29udGV4dCwgbG9jYXRpb25zLnVfZmFkZV90KSxcbiAgICAndV9vcGFjaXR5JzogbmV3IFVuaWZvcm0xZihjb250ZXh0LCBsb2NhdGlvbnMudV9vcGFjaXR5KSxcbiAgICAndV9pbWFnZTAnOiBuZXcgVW5pZm9ybTFpKGNvbnRleHQsIGxvY2F0aW9ucy51X2ltYWdlMCksXG4gICAgJ3VfaW1hZ2UxJzogbmV3IFVuaWZvcm0xaShjb250ZXh0LCBsb2NhdGlvbnMudV9pbWFnZTEpLFxuICAgICd1X2JyaWdodG5lc3NfbG93JzogbmV3IFVuaWZvcm0xZihjb250ZXh0LCBsb2NhdGlvbnMudV9icmlnaHRuZXNzX2xvdyksXG4gICAgJ3VfYnJpZ2h0bmVzc19oaWdoJzogbmV3IFVuaWZvcm0xZihjb250ZXh0LCBsb2NhdGlvbnMudV9icmlnaHRuZXNzX2hpZ2gpLFxuICAgICd1X3NhdHVyYXRpb25fZmFjdG9yJzogbmV3IFVuaWZvcm0xZihjb250ZXh0LCBsb2NhdGlvbnMudV9zYXR1cmF0aW9uX2ZhY3RvciksXG4gICAgJ3VfY29udHJhc3RfZmFjdG9yJzogbmV3IFVuaWZvcm0xZihjb250ZXh0LCBsb2NhdGlvbnMudV9jb250cmFzdF9mYWN0b3IpLFxuICAgICd1X3NwaW5fd2VpZ2h0cyc6IG5ldyBVbmlmb3JtM2YoY29udGV4dCwgbG9jYXRpb25zLnVfc3Bpbl93ZWlnaHRzKVxufSk7XG5cbmNvbnN0IHJhc3RlclVuaWZvcm1WYWx1ZXMgPSAoXG4gICAgbWF0cml4OiBGbG9hdDMyQXJyYXksXG4gICAgcGFyZW50VEw6IFtudW1iZXIsIG51bWJlcl0sXG4gICAgcGFyZW50U2NhbGVCeTogbnVtYmVyLFxuICAgIGZhZGU6IHttaXg6IG51bWJlciwgb3BhY2l0eTogbnVtYmVyfSxcbiAgICBsYXllcjogUmFzdGVyU3R5bGVMYXllclxuKTogVW5pZm9ybVZhbHVlczxSYXN0ZXJVbmlmb3Jtc1R5cGU+ID0+ICh7XG4gICAgJ3VfbWF0cml4JzogbWF0cml4LFxuICAgICd1X3RsX3BhcmVudCc6IHBhcmVudFRMLFxuICAgICd1X3NjYWxlX3BhcmVudCc6IHBhcmVudFNjYWxlQnksXG4gICAgJ3VfYnVmZmVyX3NjYWxlJzogMSxcbiAgICAndV9mYWRlX3QnOiBmYWRlLm1peCxcbiAgICAndV9vcGFjaXR5JzogZmFkZS5vcGFjaXR5ICogbGF5ZXIucGFpbnQuZ2V0KCdyYXN0ZXItb3BhY2l0eScpLFxuICAgICd1X2ltYWdlMCc6IDAsXG4gICAgJ3VfaW1hZ2UxJzogMSxcbiAgICAndV9icmlnaHRuZXNzX2xvdyc6IGxheWVyLnBhaW50LmdldCgncmFzdGVyLWJyaWdodG5lc3MtbWluJyksXG4gICAgJ3VfYnJpZ2h0bmVzc19oaWdoJzogbGF5ZXIucGFpbnQuZ2V0KCdyYXN0ZXItYnJpZ2h0bmVzcy1tYXgnKSxcbiAgICAndV9zYXR1cmF0aW9uX2ZhY3Rvcic6IHNhdHVyYXRpb25GYWN0b3IobGF5ZXIucGFpbnQuZ2V0KCdyYXN0ZXItc2F0dXJhdGlvbicpKSxcbiAgICAndV9jb250cmFzdF9mYWN0b3InOiBjb250cmFzdEZhY3RvcihsYXllci5wYWludC5nZXQoJ3Jhc3Rlci1jb250cmFzdCcpKSxcbiAgICAndV9zcGluX3dlaWdodHMnOiBzcGluV2VpZ2h0cyhsYXllci5wYWludC5nZXQoJ3Jhc3Rlci1odWUtcm90YXRlJykpXG59KTtcblxuZnVuY3Rpb24gc3BpbldlaWdodHMoYW5nbGUpIHtcbiAgICBhbmdsZSAqPSBNYXRoLlBJIC8gMTgwO1xuICAgIGNvbnN0IHMgPSBNYXRoLnNpbihhbmdsZSk7XG4gICAgY29uc3QgYyA9IE1hdGguY29zKGFuZ2xlKTtcbiAgICByZXR1cm4gW1xuICAgICAgICAoMiAqIGMgKyAxKSAvIDMsXG4gICAgICAgICgtTWF0aC5zcXJ0KDMpICogcyAtIGMgKyAxKSAvIDMsXG4gICAgICAgIChNYXRoLnNxcnQoMykgKiBzIC0gYyArIDEpIC8gM1xuICAgIF07XG59XG5cbmZ1bmN0aW9uIGNvbnRyYXN0RmFjdG9yKGNvbnRyYXN0KSB7XG4gICAgcmV0dXJuIGNvbnRyYXN0ID4gMCA/XG4gICAgICAgIDEgLyAoMSAtIGNvbnRyYXN0KSA6XG4gICAgICAgIDEgKyBjb250cmFzdDtcbn1cblxuZnVuY3Rpb24gc2F0dXJhdGlvbkZhY3RvcihzYXR1cmF0aW9uKSB7XG4gICAgcmV0dXJuIHNhdHVyYXRpb24gPiAwID9cbiAgICAgICAgMSAtIDEgLyAoMS4wMDEgLSBzYXR1cmF0aW9uKSA6XG4gICAgICAgIC1zYXR1cmF0aW9uO1xufVxuXG5leHBvcnQgeyByYXN0ZXJVbmlmb3JtcywgcmFzdGVyVW5pZm9ybVZhbHVlcyB9O1xuIiwiLy8gQGZsb3dcblxuaW1wb3J0IHtcbiAgICBVbmlmb3JtMWksXG4gICAgVW5pZm9ybTFmLFxuICAgIFVuaWZvcm0yZixcbiAgICBVbmlmb3JtTWF0cml4NGZcbn0gZnJvbSAnLi4vdW5pZm9ybV9iaW5kaW5nJztcbmltcG9ydCB7IGV4dGVuZCB9IGZyb20gJy4uLy4uL3V0aWwvdXRpbCc7XG5cbmltcG9ydCB0eXBlIENvbnRleHQgZnJvbSAnLi4vLi4vZ2wvY29udGV4dCc7XG5pbXBvcnQgdHlwZSBQYWludGVyIGZyb20gJy4uL3BhaW50ZXInO1xuaW1wb3J0IHR5cGUge1VuaWZvcm1WYWx1ZXMsIFVuaWZvcm1Mb2NhdGlvbnN9IGZyb20gJy4uL3VuaWZvcm1fYmluZGluZyc7XG5cbmV4cG9ydCB0eXBlIFN5bWJvbEljb25Vbmlmb3Jtc1R5cGUgPSB7fFxuICAgICd1X2lzX3NpemVfem9vbV9jb25zdGFudCc6IFVuaWZvcm0xaSxcbiAgICAndV9pc19zaXplX2ZlYXR1cmVfY29uc3RhbnQnOiBVbmlmb3JtMWksXG4gICAgJ3Vfc2l6ZV90JzogVW5pZm9ybTFmLFxuICAgICd1X3NpemUnOiBVbmlmb3JtMWYsXG4gICAgJ3VfY2FtZXJhX3RvX2NlbnRlcl9kaXN0YW5jZSc6IFVuaWZvcm0xZixcbiAgICAndV9waXRjaCc6IFVuaWZvcm0xZixcbiAgICAndV9yb3RhdGVfc3ltYm9sJzogVW5pZm9ybTFpLFxuICAgICd1X2FzcGVjdF9yYXRpbyc6IFVuaWZvcm0xZixcbiAgICAndV9mYWRlX2NoYW5nZSc6IFVuaWZvcm0xZixcbiAgICAndV9tYXRyaXgnOiBVbmlmb3JtTWF0cml4NGYsXG4gICAgJ3VfbGFiZWxfcGxhbmVfbWF0cml4JzogVW5pZm9ybU1hdHJpeDRmLFxuICAgICd1X2dsX2Nvb3JkX21hdHJpeCc6IFVuaWZvcm1NYXRyaXg0ZixcbiAgICAndV9pc190ZXh0JzogVW5pZm9ybTFmLFxuICAgICd1X3BpdGNoX3dpdGhfbWFwJzogVW5pZm9ybTFpLFxuICAgICd1X3RleHNpemUnOiBVbmlmb3JtMmYsXG4gICAgJ3VfdGV4dHVyZSc6IFVuaWZvcm0xaVxufH07XG5cbmV4cG9ydCB0eXBlIFN5bWJvbFNERlVuaWZvcm1zVHlwZSA9IHt8XG4gICAgJ3VfaXNfc2l6ZV96b29tX2NvbnN0YW50JzogVW5pZm9ybTFpLFxuICAgICd1X2lzX3NpemVfZmVhdHVyZV9jb25zdGFudCc6IFVuaWZvcm0xaSxcbiAgICAndV9zaXplX3QnOiBVbmlmb3JtMWYsXG4gICAgJ3Vfc2l6ZSc6IFVuaWZvcm0xZixcbiAgICAndV9jYW1lcmFfdG9fY2VudGVyX2Rpc3RhbmNlJzogVW5pZm9ybTFmLFxuICAgICd1X3BpdGNoJzogVW5pZm9ybTFmLFxuICAgICd1X3JvdGF0ZV9zeW1ib2wnOiBVbmlmb3JtMWksXG4gICAgJ3VfYXNwZWN0X3JhdGlvJzogVW5pZm9ybTFmLFxuICAgICd1X2ZhZGVfY2hhbmdlJzogVW5pZm9ybTFmLFxuICAgICd1X21hdHJpeCc6IFVuaWZvcm1NYXRyaXg0ZixcbiAgICAndV9sYWJlbF9wbGFuZV9tYXRyaXgnOiBVbmlmb3JtTWF0cml4NGYsXG4gICAgJ3VfZ2xfY29vcmRfbWF0cml4JzogVW5pZm9ybU1hdHJpeDRmLFxuICAgICd1X2lzX3RleHQnOiBVbmlmb3JtMWYsXG4gICAgJ3VfcGl0Y2hfd2l0aF9tYXAnOiBVbmlmb3JtMWksXG4gICAgJ3VfdGV4c2l6ZSc6IFVuaWZvcm0yZixcbiAgICAndV90ZXh0dXJlJzogVW5pZm9ybTFpLFxuICAgICd1X2dhbW1hX3NjYWxlJzogVW5pZm9ybTFmLFxuICAgICd1X2lzX2hhbG8nOiBVbmlmb3JtMWZcbnx9O1xuXG5jb25zdCBzeW1ib2xJY29uVW5pZm9ybXMgPSAoY29udGV4dDogQ29udGV4dCwgbG9jYXRpb25zOiBVbmlmb3JtTG9jYXRpb25zKTogU3ltYm9sSWNvblVuaWZvcm1zVHlwZSA9PiAoe1xuICAgICd1X2lzX3NpemVfem9vbV9jb25zdGFudCc6IG5ldyBVbmlmb3JtMWkoY29udGV4dCwgbG9jYXRpb25zLnVfaXNfc2l6ZV96b29tX2NvbnN0YW50KSxcbiAgICAndV9pc19zaXplX2ZlYXR1cmVfY29uc3RhbnQnOiBuZXcgVW5pZm9ybTFpKGNvbnRleHQsIGxvY2F0aW9ucy51X2lzX3NpemVfZmVhdHVyZV9jb25zdGFudCksXG4gICAgJ3Vfc2l6ZV90JzogbmV3IFVuaWZvcm0xZihjb250ZXh0LCBsb2NhdGlvbnMudV9zaXplX3QpLFxuICAgICd1X3NpemUnOiBuZXcgVW5pZm9ybTFmKGNvbnRleHQsIGxvY2F0aW9ucy51X3NpemUpLFxuICAgICd1X2NhbWVyYV90b19jZW50ZXJfZGlzdGFuY2UnOiBuZXcgVW5pZm9ybTFmKGNvbnRleHQsIGxvY2F0aW9ucy51X2NhbWVyYV90b19jZW50ZXJfZGlzdGFuY2UpLFxuICAgICd1X3BpdGNoJzogbmV3IFVuaWZvcm0xZihjb250ZXh0LCBsb2NhdGlvbnMudV9waXRjaCksXG4gICAgJ3Vfcm90YXRlX3N5bWJvbCc6IG5ldyBVbmlmb3JtMWkoY29udGV4dCwgbG9jYXRpb25zLnVfcm90YXRlX3N5bWJvbCksXG4gICAgJ3VfYXNwZWN0X3JhdGlvJzogbmV3IFVuaWZvcm0xZihjb250ZXh0LCBsb2NhdGlvbnMudV9hc3BlY3RfcmF0aW8pLFxuICAgICd1X2ZhZGVfY2hhbmdlJzogbmV3IFVuaWZvcm0xZihjb250ZXh0LCBsb2NhdGlvbnMudV9mYWRlX2NoYW5nZSksXG4gICAgJ3VfbWF0cml4JzogbmV3IFVuaWZvcm1NYXRyaXg0Zihjb250ZXh0LCBsb2NhdGlvbnMudV9tYXRyaXgpLFxuICAgICd1X2xhYmVsX3BsYW5lX21hdHJpeCc6IG5ldyBVbmlmb3JtTWF0cml4NGYoY29udGV4dCwgbG9jYXRpb25zLnVfbGFiZWxfcGxhbmVfbWF0cml4KSxcbiAgICAndV9nbF9jb29yZF9tYXRyaXgnOiBuZXcgVW5pZm9ybU1hdHJpeDRmKGNvbnRleHQsIGxvY2F0aW9ucy51X2dsX2Nvb3JkX21hdHJpeCksXG4gICAgJ3VfaXNfdGV4dCc6IG5ldyBVbmlmb3JtMWYoY29udGV4dCwgbG9jYXRpb25zLnVfaXNfdGV4dCksXG4gICAgJ3VfcGl0Y2hfd2l0aF9tYXAnOiBuZXcgVW5pZm9ybTFpKGNvbnRleHQsIGxvY2F0aW9ucy51X3BpdGNoX3dpdGhfbWFwKSxcbiAgICAndV90ZXhzaXplJzogbmV3IFVuaWZvcm0yZihjb250ZXh0LCBsb2NhdGlvbnMudV90ZXhzaXplKSxcbiAgICAndV90ZXh0dXJlJzogbmV3IFVuaWZvcm0xaShjb250ZXh0LCBsb2NhdGlvbnMudV90ZXh0dXJlKVxufSk7XG5cbmNvbnN0IHN5bWJvbFNERlVuaWZvcm1zID0gKGNvbnRleHQ6IENvbnRleHQsIGxvY2F0aW9uczogVW5pZm9ybUxvY2F0aW9ucyk6IFN5bWJvbFNERlVuaWZvcm1zVHlwZSA9PiAoe1xuICAgICd1X2lzX3NpemVfem9vbV9jb25zdGFudCc6IG5ldyBVbmlmb3JtMWkoY29udGV4dCwgbG9jYXRpb25zLnVfaXNfc2l6ZV96b29tX2NvbnN0YW50KSxcbiAgICAndV9pc19zaXplX2ZlYXR1cmVfY29uc3RhbnQnOiBuZXcgVW5pZm9ybTFpKGNvbnRleHQsIGxvY2F0aW9ucy51X2lzX3NpemVfZmVhdHVyZV9jb25zdGFudCksXG4gICAgJ3Vfc2l6ZV90JzogbmV3IFVuaWZvcm0xZihjb250ZXh0LCBsb2NhdGlvbnMudV9zaXplX3QpLFxuICAgICd1X3NpemUnOiBuZXcgVW5pZm9ybTFmKGNvbnRleHQsIGxvY2F0aW9ucy51X3NpemUpLFxuICAgICd1X2NhbWVyYV90b19jZW50ZXJfZGlzdGFuY2UnOiBuZXcgVW5pZm9ybTFmKGNvbnRleHQsIGxvY2F0aW9ucy51X2NhbWVyYV90b19jZW50ZXJfZGlzdGFuY2UpLFxuICAgICd1X3BpdGNoJzogbmV3IFVuaWZvcm0xZihjb250ZXh0LCBsb2NhdGlvbnMudV9waXRjaCksXG4gICAgJ3Vfcm90YXRlX3N5bWJvbCc6IG5ldyBVbmlmb3JtMWkoY29udGV4dCwgbG9jYXRpb25zLnVfcm90YXRlX3N5bWJvbCksXG4gICAgJ3VfYXNwZWN0X3JhdGlvJzogbmV3IFVuaWZvcm0xZihjb250ZXh0LCBsb2NhdGlvbnMudV9hc3BlY3RfcmF0aW8pLFxuICAgICd1X2ZhZGVfY2hhbmdlJzogbmV3IFVuaWZvcm0xZihjb250ZXh0LCBsb2NhdGlvbnMudV9mYWRlX2NoYW5nZSksXG4gICAgJ3VfbWF0cml4JzogbmV3IFVuaWZvcm1NYXRyaXg0Zihjb250ZXh0LCBsb2NhdGlvbnMudV9tYXRyaXgpLFxuICAgICd1X2xhYmVsX3BsYW5lX21hdHJpeCc6IG5ldyBVbmlmb3JtTWF0cml4NGYoY29udGV4dCwgbG9jYXRpb25zLnVfbGFiZWxfcGxhbmVfbWF0cml4KSxcbiAgICAndV9nbF9jb29yZF9tYXRyaXgnOiBuZXcgVW5pZm9ybU1hdHJpeDRmKGNvbnRleHQsIGxvY2F0aW9ucy51X2dsX2Nvb3JkX21hdHJpeCksXG4gICAgJ3VfaXNfdGV4dCc6IG5ldyBVbmlmb3JtMWYoY29udGV4dCwgbG9jYXRpb25zLnVfaXNfdGV4dCksXG4gICAgJ3VfcGl0Y2hfd2l0aF9tYXAnOiBuZXcgVW5pZm9ybTFpKGNvbnRleHQsIGxvY2F0aW9ucy51X3BpdGNoX3dpdGhfbWFwKSxcbiAgICAndV90ZXhzaXplJzogbmV3IFVuaWZvcm0yZihjb250ZXh0LCBsb2NhdGlvbnMudV90ZXhzaXplKSxcbiAgICAndV90ZXh0dXJlJzogbmV3IFVuaWZvcm0xaShjb250ZXh0LCBsb2NhdGlvbnMudV90ZXh0dXJlKSxcbiAgICAndV9nYW1tYV9zY2FsZSc6IG5ldyBVbmlmb3JtMWYoY29udGV4dCwgbG9jYXRpb25zLnVfZ2FtbWFfc2NhbGUpLFxuICAgICd1X2lzX2hhbG8nOiBuZXcgVW5pZm9ybTFmKGNvbnRleHQsIGxvY2F0aW9ucy51X2lzX2hhbG8pXG59KTtcblxuY29uc3Qgc3ltYm9sSWNvblVuaWZvcm1WYWx1ZXMgPSAoXG4gICAgZnVuY3Rpb25UeXBlOiBzdHJpbmcsXG4gICAgc2l6ZTogP3t1U2l6ZVQ6IG51bWJlciwgdVNpemU6IG51bWJlcn0sXG4gICAgcm90YXRlSW5TaGFkZXI6IGJvb2xlYW4sXG4gICAgcGl0Y2hXaXRoTWFwOiBib29sZWFuLFxuICAgIHBhaW50ZXI6IFBhaW50ZXIsXG4gICAgbWF0cml4OiBGbG9hdDMyQXJyYXksXG4gICAgbGFiZWxQbGFuZU1hdHJpeDogRmxvYXQzMkFycmF5LFxuICAgIGdsQ29vcmRNYXRyaXg6IEZsb2F0MzJBcnJheSxcbiAgICBpc1RleHQ6IGJvb2xlYW4sXG4gICAgdGV4U2l6ZTogW251bWJlciwgbnVtYmVyXVxuKTogVW5pZm9ybVZhbHVlczxTeW1ib2xJY29uVW5pZm9ybXNUeXBlPiA9PiB7XG4gICAgY29uc3QgdHJhbnNmb3JtID0gcGFpbnRlci50cmFuc2Zvcm07XG5cbiAgICByZXR1cm4ge1xuICAgICAgICAndV9pc19zaXplX3pvb21fY29uc3RhbnQnOiArKGZ1bmN0aW9uVHlwZSA9PT0gJ2NvbnN0YW50JyB8fCBmdW5jdGlvblR5cGUgPT09ICdzb3VyY2UnKSxcbiAgICAgICAgJ3VfaXNfc2l6ZV9mZWF0dXJlX2NvbnN0YW50JzogKyhmdW5jdGlvblR5cGUgPT09ICdjb25zdGFudCcgfHwgZnVuY3Rpb25UeXBlID09PSAnY2FtZXJhJyksXG4gICAgICAgICd1X3NpemVfdCc6IHNpemUgPyBzaXplLnVTaXplVCA6IDAsXG4gICAgICAgICd1X3NpemUnOiBzaXplID8gc2l6ZS51U2l6ZSA6IDAsXG4gICAgICAgICd1X2NhbWVyYV90b19jZW50ZXJfZGlzdGFuY2UnOiB0cmFuc2Zvcm0uY2FtZXJhVG9DZW50ZXJEaXN0YW5jZSxcbiAgICAgICAgJ3VfcGl0Y2gnOiB0cmFuc2Zvcm0ucGl0Y2ggLyAzNjAgKiAyICogTWF0aC5QSSxcbiAgICAgICAgJ3Vfcm90YXRlX3N5bWJvbCc6ICtyb3RhdGVJblNoYWRlcixcbiAgICAgICAgJ3VfYXNwZWN0X3JhdGlvJzogdHJhbnNmb3JtLndpZHRoIC8gdHJhbnNmb3JtLmhlaWdodCxcbiAgICAgICAgJ3VfZmFkZV9jaGFuZ2UnOiBwYWludGVyLm9wdGlvbnMuZmFkZUR1cmF0aW9uID8gcGFpbnRlci5zeW1ib2xGYWRlQ2hhbmdlIDogMSxcbiAgICAgICAgJ3VfbWF0cml4JzogbWF0cml4LFxuICAgICAgICAndV9sYWJlbF9wbGFuZV9tYXRyaXgnOiBsYWJlbFBsYW5lTWF0cml4LFxuICAgICAgICAndV9nbF9jb29yZF9tYXRyaXgnOiBnbENvb3JkTWF0cml4LFxuICAgICAgICAndV9pc190ZXh0JzogK2lzVGV4dCxcbiAgICAgICAgJ3VfcGl0Y2hfd2l0aF9tYXAnOiArcGl0Y2hXaXRoTWFwLFxuICAgICAgICAndV90ZXhzaXplJzogdGV4U2l6ZSxcbiAgICAgICAgJ3VfdGV4dHVyZSc6IDBcbiAgICB9O1xufTtcblxuY29uc3Qgc3ltYm9sU0RGVW5pZm9ybVZhbHVlcyA9IChcbiAgICBmdW5jdGlvblR5cGU6IHN0cmluZyxcbiAgICBzaXplOiA/e3VTaXplVDogbnVtYmVyLCB1U2l6ZTogbnVtYmVyfSxcbiAgICByb3RhdGVJblNoYWRlcjogYm9vbGVhbixcbiAgICBwaXRjaFdpdGhNYXA6IGJvb2xlYW4sXG4gICAgcGFpbnRlcjogUGFpbnRlcixcbiAgICBtYXRyaXg6IEZsb2F0MzJBcnJheSxcbiAgICBsYWJlbFBsYW5lTWF0cml4OiBGbG9hdDMyQXJyYXksXG4gICAgZ2xDb29yZE1hdHJpeDogRmxvYXQzMkFycmF5LFxuICAgIGlzVGV4dDogYm9vbGVhbixcbiAgICB0ZXhTaXplOiBbbnVtYmVyLCBudW1iZXJdLFxuICAgIGlzSGFsbzogYm9vbGVhblxuKTogVW5pZm9ybVZhbHVlczxTeW1ib2xTREZVbmlmb3Jtc1R5cGU+ID0+IHtcbiAgICBjb25zdCB0cmFuc2Zvcm0gPSBwYWludGVyLnRyYW5zZm9ybTtcblxuICAgIHJldHVybiBleHRlbmQoc3ltYm9sSWNvblVuaWZvcm1WYWx1ZXMoZnVuY3Rpb25UeXBlLCBzaXplLFxuICAgICAgICByb3RhdGVJblNoYWRlciwgcGl0Y2hXaXRoTWFwLCBwYWludGVyLCBtYXRyaXgsIGxhYmVsUGxhbmVNYXRyaXgsXG4gICAgICAgIGdsQ29vcmRNYXRyaXgsIGlzVGV4dCwgdGV4U2l6ZSksIHtcbiAgICAgICAgJ3VfZ2FtbWFfc2NhbGUnOiAocGl0Y2hXaXRoTWFwID8gTWF0aC5jb3ModHJhbnNmb3JtLl9waXRjaCkgKiB0cmFuc2Zvcm0uY2FtZXJhVG9DZW50ZXJEaXN0YW5jZSA6IDEpLFxuICAgICAgICAndV9pc19oYWxvJzogK2lzSGFsb1xuICAgIH0pO1xufTtcblxuZXhwb3J0IHsgc3ltYm9sSWNvblVuaWZvcm1zLCBzeW1ib2xTREZVbmlmb3Jtcywgc3ltYm9sSWNvblVuaWZvcm1WYWx1ZXMsIHN5bWJvbFNERlVuaWZvcm1WYWx1ZXMgfTtcbiIsIi8vIEBmbG93XG5cbmltcG9ydCB7IGJnUGF0dGVyblVuaWZvcm1WYWx1ZXMgfSBmcm9tICcuL3BhdHRlcm4nO1xuaW1wb3J0IHtcbiAgICBVbmlmb3JtMWksXG4gICAgVW5pZm9ybTFmLFxuICAgIFVuaWZvcm0yZixcbiAgICBVbmlmb3JtQ29sb3IsXG4gICAgVW5pZm9ybU1hdHJpeDRmXG59IGZyb20gJy4uL3VuaWZvcm1fYmluZGluZyc7XG5pbXBvcnQgeyBleHRlbmQgfSBmcm9tICcuLi8uLi91dGlsL3V0aWwnO1xuXG5pbXBvcnQgdHlwZSBQYWludGVyIGZyb20gJy4uL3BhaW50ZXInO1xuaW1wb3J0IHR5cGUge1VuaWZvcm1WYWx1ZXMsIFVuaWZvcm1Mb2NhdGlvbnN9IGZyb20gJy4uL3VuaWZvcm1fYmluZGluZyc7XG5pbXBvcnQgdHlwZSBDb250ZXh0IGZyb20gJy4uLy4uL2dsL2NvbnRleHQnO1xuaW1wb3J0IHR5cGUgQ29sb3IgZnJvbSAnLi4vLi4vc3R5bGUtc3BlYy91dGlsL2NvbG9yJztcbmltcG9ydCB0eXBlIHtDcm9zc0ZhZGVkfSBmcm9tICcuLi8uLi9zdHlsZS9wcm9wZXJ0aWVzJztcbmltcG9ydCB0eXBlIHtDcm9zc2ZhZGVQYXJhbWV0ZXJzfSBmcm9tICcuLi8uLi9zdHlsZS9ldmFsdWF0aW9uX3BhcmFtZXRlcnMnO1xuaW1wb3J0IHR5cGUge092ZXJzY2FsZWRUaWxlSUR9IGZyb20gJy4uLy4uL3NvdXJjZS90aWxlX2lkJztcblxuZXhwb3J0IHR5cGUgQmFja2dyb3VuZFVuaWZvcm1zVHlwZSA9IHt8XG4gICAgJ3VfbWF0cml4JzogVW5pZm9ybU1hdHJpeDRmLFxuICAgICd1X29wYWNpdHknOiBVbmlmb3JtMWYsXG4gICAgJ3VfY29sb3InOiBVbmlmb3JtQ29sb3Jcbnx9O1xuXG5leHBvcnQgdHlwZSBCYWNrZ3JvdW5kUGF0dGVyblVuaWZvcm1zVHlwZSA9IHt8XG4gICAgJ3VfbWF0cml4JzogVW5pZm9ybU1hdHJpeDRmLFxuICAgICd1X29wYWNpdHknOiBVbmlmb3JtMWYsXG4gICAgLy8gcGF0dGVybiB1bmlmb3JtczpcbiAgICAndV9pbWFnZSc6IFVuaWZvcm0xaSxcbiAgICAndV9wYXR0ZXJuX3RsX2EnOiBVbmlmb3JtMmYsXG4gICAgJ3VfcGF0dGVybl9icl9hJzogVW5pZm9ybTJmLFxuICAgICd1X3BhdHRlcm5fdGxfYic6IFVuaWZvcm0yZixcbiAgICAndV9wYXR0ZXJuX2JyX2InOiBVbmlmb3JtMmYsXG4gICAgJ3VfdGV4c2l6ZSc6IFVuaWZvcm0yZixcbiAgICAndV9taXgnOiBVbmlmb3JtMWYsXG4gICAgJ3VfcGF0dGVybl9zaXplX2EnOiBVbmlmb3JtMmYsXG4gICAgJ3VfcGF0dGVybl9zaXplX2InOiBVbmlmb3JtMmYsXG4gICAgJ3Vfc2NhbGVfYSc6IFVuaWZvcm0xZixcbiAgICAndV9zY2FsZV9iJzogVW5pZm9ybTFmLFxuICAgICd1X3BpeGVsX2Nvb3JkX3VwcGVyJzogVW5pZm9ybTJmLFxuICAgICd1X3BpeGVsX2Nvb3JkX2xvd2VyJzogVW5pZm9ybTJmLFxuICAgICd1X3RpbGVfdW5pdHNfdG9fcGl4ZWxzJzogVW5pZm9ybTFmXG58fTtcblxuY29uc3QgYmFja2dyb3VuZFVuaWZvcm1zID0gKGNvbnRleHQ6IENvbnRleHQsIGxvY2F0aW9uczogVW5pZm9ybUxvY2F0aW9ucyk6IEJhY2tncm91bmRVbmlmb3Jtc1R5cGUgPT4gKHtcbiAgICAndV9tYXRyaXgnOiBuZXcgVW5pZm9ybU1hdHJpeDRmKGNvbnRleHQsIGxvY2F0aW9ucy51X21hdHJpeCksXG4gICAgJ3Vfb3BhY2l0eSc6IG5ldyBVbmlmb3JtMWYoY29udGV4dCwgbG9jYXRpb25zLnVfb3BhY2l0eSksXG4gICAgJ3VfY29sb3InOiBuZXcgVW5pZm9ybUNvbG9yKGNvbnRleHQsIGxvY2F0aW9ucy51X2NvbG9yKVxufSk7XG5cbmNvbnN0IGJhY2tncm91bmRQYXR0ZXJuVW5pZm9ybXMgPSAoY29udGV4dDogQ29udGV4dCwgbG9jYXRpb25zOiBVbmlmb3JtTG9jYXRpb25zKTogQmFja2dyb3VuZFBhdHRlcm5Vbmlmb3Jtc1R5cGUgPT4gKHtcbiAgICAndV9tYXRyaXgnOiBuZXcgVW5pZm9ybU1hdHJpeDRmKGNvbnRleHQsIGxvY2F0aW9ucy51X21hdHJpeCksXG4gICAgJ3Vfb3BhY2l0eSc6IG5ldyBVbmlmb3JtMWYoY29udGV4dCwgbG9jYXRpb25zLnVfb3BhY2l0eSksXG4gICAgJ3VfaW1hZ2UnOiBuZXcgVW5pZm9ybTFpKGNvbnRleHQsIGxvY2F0aW9ucy51X2ltYWdlKSxcbiAgICAndV9wYXR0ZXJuX3RsX2EnOiBuZXcgVW5pZm9ybTJmKGNvbnRleHQsIGxvY2F0aW9ucy51X3BhdHRlcm5fdGxfYSksXG4gICAgJ3VfcGF0dGVybl9icl9hJzogbmV3IFVuaWZvcm0yZihjb250ZXh0LCBsb2NhdGlvbnMudV9wYXR0ZXJuX2JyX2EpLFxuICAgICd1X3BhdHRlcm5fdGxfYic6IG5ldyBVbmlmb3JtMmYoY29udGV4dCwgbG9jYXRpb25zLnVfcGF0dGVybl90bF9iKSxcbiAgICAndV9wYXR0ZXJuX2JyX2InOiBuZXcgVW5pZm9ybTJmKGNvbnRleHQsIGxvY2F0aW9ucy51X3BhdHRlcm5fYnJfYiksXG4gICAgJ3VfdGV4c2l6ZSc6IG5ldyBVbmlmb3JtMmYoY29udGV4dCwgbG9jYXRpb25zLnVfdGV4c2l6ZSksXG4gICAgJ3VfbWl4JzogbmV3IFVuaWZvcm0xZihjb250ZXh0LCBsb2NhdGlvbnMudV9taXgpLFxuICAgICd1X3BhdHRlcm5fc2l6ZV9hJzogbmV3IFVuaWZvcm0yZihjb250ZXh0LCBsb2NhdGlvbnMudV9wYXR0ZXJuX3NpemVfYSksXG4gICAgJ3VfcGF0dGVybl9zaXplX2InOiBuZXcgVW5pZm9ybTJmKGNvbnRleHQsIGxvY2F0aW9ucy51X3BhdHRlcm5fc2l6ZV9iKSxcbiAgICAndV9zY2FsZV9hJzogbmV3IFVuaWZvcm0xZihjb250ZXh0LCBsb2NhdGlvbnMudV9zY2FsZV9hKSxcbiAgICAndV9zY2FsZV9iJzogbmV3IFVuaWZvcm0xZihjb250ZXh0LCBsb2NhdGlvbnMudV9zY2FsZV9iKSxcbiAgICAndV9waXhlbF9jb29yZF91cHBlcic6IG5ldyBVbmlmb3JtMmYoY29udGV4dCwgbG9jYXRpb25zLnVfcGl4ZWxfY29vcmRfdXBwZXIpLFxuICAgICd1X3BpeGVsX2Nvb3JkX2xvd2VyJzogbmV3IFVuaWZvcm0yZihjb250ZXh0LCBsb2NhdGlvbnMudV9waXhlbF9jb29yZF9sb3dlciksXG4gICAgJ3VfdGlsZV91bml0c190b19waXhlbHMnOiBuZXcgVW5pZm9ybTFmKGNvbnRleHQsIGxvY2F0aW9ucy51X3RpbGVfdW5pdHNfdG9fcGl4ZWxzKVxufSk7XG5cbmNvbnN0IGJhY2tncm91bmRVbmlmb3JtVmFsdWVzID0gKFxuICAgIG1hdHJpeDogRmxvYXQzMkFycmF5LFxuICAgIG9wYWNpdHk6IG51bWJlcixcbiAgICBjb2xvcjogQ29sb3Jcbik6IFVuaWZvcm1WYWx1ZXM8QmFja2dyb3VuZFVuaWZvcm1zVHlwZT4gPT4gKHtcbiAgICAndV9tYXRyaXgnOiBtYXRyaXgsXG4gICAgJ3Vfb3BhY2l0eSc6IG9wYWNpdHksXG4gICAgJ3VfY29sb3InOiBjb2xvclxufSk7XG5cbmNvbnN0IGJhY2tncm91bmRQYXR0ZXJuVW5pZm9ybVZhbHVlcyA9IChcbiAgICBtYXRyaXg6IEZsb2F0MzJBcnJheSxcbiAgICBvcGFjaXR5OiBudW1iZXIsXG4gICAgcGFpbnRlcjogUGFpbnRlcixcbiAgICBpbWFnZTogQ3Jvc3NGYWRlZDxzdHJpbmc+LFxuICAgIHRpbGU6IHt0aWxlSUQ6IE92ZXJzY2FsZWRUaWxlSUQsIHRpbGVTaXplOiBudW1iZXJ9LFxuICAgIGNyb3NzZmFkZTogQ3Jvc3NmYWRlUGFyYW1ldGVyc1xuKTogVW5pZm9ybVZhbHVlczxCYWNrZ3JvdW5kUGF0dGVyblVuaWZvcm1zVHlwZT4gPT4gZXh0ZW5kKFxuICAgIGJnUGF0dGVyblVuaWZvcm1WYWx1ZXMoaW1hZ2UsIGNyb3NzZmFkZSwgcGFpbnRlciwgdGlsZSksXG4gICAge1xuICAgICAgICAndV9tYXRyaXgnOiBtYXRyaXgsXG4gICAgICAgICd1X29wYWNpdHknOiBvcGFjaXR5XG4gICAgfVxuKTtcblxuZXhwb3J0IHtcbiAgICBiYWNrZ3JvdW5kVW5pZm9ybXMsXG4gICAgYmFja2dyb3VuZFBhdHRlcm5Vbmlmb3JtcyxcbiAgICBiYWNrZ3JvdW5kVW5pZm9ybVZhbHVlcyxcbiAgICBiYWNrZ3JvdW5kUGF0dGVyblVuaWZvcm1WYWx1ZXNcbn07XG4iLCIvLyBAZmxvd1xuXG5pbXBvcnQgeyBmaWxsRXh0cnVzaW9uVW5pZm9ybXMsIGZpbGxFeHRydXNpb25QYXR0ZXJuVW5pZm9ybXMsIGV4dHJ1c2lvblRleHR1cmVVbmlmb3JtcyB9IGZyb20gJy4vZmlsbF9leHRydXNpb25fcHJvZ3JhbSc7XG5pbXBvcnQgeyBmaWxsVW5pZm9ybXMsIGZpbGxQYXR0ZXJuVW5pZm9ybXMsIGZpbGxPdXRsaW5lVW5pZm9ybXMsIGZpbGxPdXRsaW5lUGF0dGVyblVuaWZvcm1zIH0gZnJvbSAnLi9maWxsX3Byb2dyYW0nO1xuaW1wb3J0IHsgY2lyY2xlVW5pZm9ybXMgfSBmcm9tICcuL2NpcmNsZV9wcm9ncmFtJztcbmltcG9ydCB7IGNvbGxpc2lvblVuaWZvcm1zIH0gZnJvbSAnLi9jb2xsaXNpb25fcHJvZ3JhbSc7XG5pbXBvcnQgeyBkZWJ1Z1VuaWZvcm1zIH0gZnJvbSAnLi9kZWJ1Z19wcm9ncmFtJztcbmltcG9ydCB7IGNsaXBwaW5nTWFza1VuaWZvcm1zIH0gZnJvbSAnLi9jbGlwcGluZ19tYXNrX3Byb2dyYW0nO1xuaW1wb3J0IHsgaGVhdG1hcFVuaWZvcm1zLCBoZWF0bWFwVGV4dHVyZVVuaWZvcm1zIH0gZnJvbSAnLi9oZWF0bWFwX3Byb2dyYW0nO1xuaW1wb3J0IHsgaGlsbHNoYWRlVW5pZm9ybXMsIGhpbGxzaGFkZVByZXBhcmVVbmlmb3JtcyB9IGZyb20gJy4vaGlsbHNoYWRlX3Byb2dyYW0nO1xuaW1wb3J0IHsgbGluZVVuaWZvcm1zLCBsaW5lR3JhZGllbnRVbmlmb3JtcywgbGluZVBhdHRlcm5Vbmlmb3JtcywgbGluZVNERlVuaWZvcm1zIH0gZnJvbSAnLi9saW5lX3Byb2dyYW0nO1xuaW1wb3J0IHsgcmFzdGVyVW5pZm9ybXMgfSBmcm9tICcuL3Jhc3Rlcl9wcm9ncmFtJztcbmltcG9ydCB7IHN5bWJvbEljb25Vbmlmb3Jtcywgc3ltYm9sU0RGVW5pZm9ybXMgfSBmcm9tICcuL3N5bWJvbF9wcm9ncmFtJztcbmltcG9ydCB7IGJhY2tncm91bmRVbmlmb3JtcywgYmFja2dyb3VuZFBhdHRlcm5Vbmlmb3JtcyB9IGZyb20gJy4vYmFja2dyb3VuZF9wcm9ncmFtJztcblxuZXhwb3J0IGNvbnN0IHByb2dyYW1Vbmlmb3JtcyA9IHtcbiAgICBmaWxsRXh0cnVzaW9uOiBmaWxsRXh0cnVzaW9uVW5pZm9ybXMsXG4gICAgZmlsbEV4dHJ1c2lvblBhdHRlcm46IGZpbGxFeHRydXNpb25QYXR0ZXJuVW5pZm9ybXMsXG4gICAgZXh0cnVzaW9uVGV4dHVyZTogZXh0cnVzaW9uVGV4dHVyZVVuaWZvcm1zLFxuICAgIGZpbGw6IGZpbGxVbmlmb3JtcyxcbiAgICBmaWxsUGF0dGVybjogZmlsbFBhdHRlcm5Vbmlmb3JtcyxcbiAgICBmaWxsT3V0bGluZTogZmlsbE91dGxpbmVVbmlmb3JtcyxcbiAgICBmaWxsT3V0bGluZVBhdHRlcm46IGZpbGxPdXRsaW5lUGF0dGVyblVuaWZvcm1zLFxuICAgIGNpcmNsZTogY2lyY2xlVW5pZm9ybXMsXG4gICAgY29sbGlzaW9uQm94OiBjb2xsaXNpb25Vbmlmb3JtcyxcbiAgICBjb2xsaXNpb25DaXJjbGU6IGNvbGxpc2lvblVuaWZvcm1zLFxuICAgIGRlYnVnOiBkZWJ1Z1VuaWZvcm1zLFxuICAgIGNsaXBwaW5nTWFzazogY2xpcHBpbmdNYXNrVW5pZm9ybXMsXG4gICAgaGVhdG1hcDogaGVhdG1hcFVuaWZvcm1zLFxuICAgIGhlYXRtYXBUZXh0dXJlOiBoZWF0bWFwVGV4dHVyZVVuaWZvcm1zLFxuICAgIGhpbGxzaGFkZTogaGlsbHNoYWRlVW5pZm9ybXMsXG4gICAgaGlsbHNoYWRlUHJlcGFyZTogaGlsbHNoYWRlUHJlcGFyZVVuaWZvcm1zLFxuICAgIGxpbmU6IGxpbmVVbmlmb3JtcyxcbiAgICBsaW5lR3JhZGllbnQ6IGxpbmVHcmFkaWVudFVuaWZvcm1zLFxuICAgIGxpbmVQYXR0ZXJuOiBsaW5lUGF0dGVyblVuaWZvcm1zLFxuICAgIGxpbmVTREY6IGxpbmVTREZVbmlmb3JtcyxcbiAgICByYXN0ZXI6IHJhc3RlclVuaWZvcm1zLFxuICAgIHN5bWJvbEljb246IHN5bWJvbEljb25Vbmlmb3JtcyxcbiAgICBzeW1ib2xTREY6IHN5bWJvbFNERlVuaWZvcm1zLFxuICAgIGJhY2tncm91bmQ6IGJhY2tncm91bmRVbmlmb3JtcyxcbiAgICBiYWNrZ3JvdW5kUGF0dGVybjogYmFja2dyb3VuZFBhdHRlcm5Vbmlmb3Jtc1xufTtcbiIsIi8vIEBmbG93XG5cbmltcG9ydCB7IE92ZXJzY2FsZWRUaWxlSUQsIENhbm9uaWNhbFRpbGVJRCB9IGZyb20gJy4uL3NvdXJjZS90aWxlX2lkJztcblxuaW1wb3J0IHR5cGUgVGlsZSBmcm9tICcuLy4uL3NvdXJjZS90aWxlJztcbmltcG9ydCB0eXBlIENvbnRleHQgZnJvbSAnLi4vZ2wvY29udGV4dCc7XG5cbnR5cGUgTWFzayA9IHtcbiAgICBbbnVtYmVyXTogQ2Fub25pY2FsVGlsZUlEXG59O1xuXG4vLyBVcGRhdGVzIHRoZSBUaWxlTWFza3MgZm9yIGFsbCByZW5kZXJhYmxlIHRpbGVzLiBBIFRpbGVNYXNrIGRlc2NyaWJlcyBhbGwgcmVnaW9uc1xuLy8gd2l0aGluIHRoYXQgdGlsZSB0aGF0IGFyZSAqbm90KiBjb3ZlcmVkIGJ5IG90aGVyIHJlbmRlcmFibGUgdGlsZXMuXG4vLyBFeGFtcGxlOiByZW5kZXJhYmxlVGlsZXMgaW4gb3VyIGxpc3QgYXJlIDIvMS8zLCAzLzMvNiwgYW5kIDQvNS8xMy4gVGhlIHNjaGVtYXRpYyBmb3IgY3JlYXRpbmcgdGhlXG4vLyBUaWxlTWFzayBmb3IgMi8xLzMgbG9va3MgbGlrZSB0aGlzOlxuLy9cbi8vICAgIOKUjOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUrOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUrOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUkFxuLy8gICAg4pSCICAgICAgICDilIIgICAgICAgIOKUgiMjIyMjIyMjIyMjIyMjIyMj4pSCXG4vLyAgICDilIIgNC80LzEyIOKUgiA0LzUvMTIg4pSCIyMjIyMjIyMjIyMjIyMjIyPilIJcbi8vICAgIOKUgiAgICAgICAg4pSCICAgICAgICDilIIjIyMjIyMjIyMjIyMjIyMjI+KUglxuLy8gICAg4pSc4pSA4pSA4pSA4pSA4pSA4pSAMy8yLzbilIDilIDilIDilIDilIDilIDilKQjIyMjIzMvMy82IyMjIyMjI+KUglxuLy8gICAg4pSCICAgICAgICDilIIjIyMjIyMjI+KUgiMjIyMjIyMjIyMjIyMjIyMj4pSCXG4vLyAgICDilIIgNC80LzEzIOKUgiM0LzUvMTMj4pSCIyMjIyMjIyMjIyMjIyMjIyPilIJcbi8vICAgIOKUgiAgICAgICAg4pSCIyMjIyMjIyPilIIjIyMjIyMjIyMjIyMjIyMjI+KUglxuLy8gICAg4pSc4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pS04pSA4pSA4pSA4pSA4pSA4pSAMi8xLzPilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilKRcbi8vICAgIOKUgiAgICAgICAgICAgICAgICAg4pSCICAgICAgICAgICAgICAgICDilIJcbi8vICAgIOKUgiAgICAgICAgICAgICAgICAg4pSCICAgICAgICAgICAgICAgICDilIJcbi8vICAgIOKUgiAgICAgICAgICAgICAgICAg4pSCICAgICAgICAgICAgICAgICDilIJcbi8vICAgIOKUgiAgICAgIDMvMi83ICAgICAg4pSCICAgICAgMy8zLzcgICAgICDilIJcbi8vICAgIOKUgiAgICAgICAgICAgICAgICAg4pSCICAgICAgICAgICAgICAgICDilIJcbi8vICAgIOKUgiAgICAgICAgICAgICAgICAg4pSCICAgICAgICAgICAgICAgICDilIJcbi8vICAgIOKUgiAgICAgICAgICAgICAgICAg4pSCICAgICAgICAgICAgICAgICDilIJcbi8vICAgIOKUlOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUtOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUgOKUmFxuLy9cbi8vIFRoZSBUaWxlTWFzayBmb3IgMi8xLzMgdGh1cyBjb25zaXN0cyBvZiB0aGUgdGlsZXMgNC80LzEyLCA0LzUvMTIsIDQvNC8xMywgMy8yLzcsIGFuZCAzLzMvNyxcbi8vIGJ1dCBpdCBkb2VzICpub3QqIGluY2x1ZGUgNC81LzEzLCBhbmQgMy8zLzYsIHNpbmNlIHRoZXNlIGFyZSBvdGhlciByZW5kZXJhYmxlVGlsZXMuXG4vLyBBIFRpbGVNYXNrIGFsd2F5cyBjb250YWlucyBUaWxlSURzICpyZWxhdGl2ZSogdG8gdGhlIHRpbGUgaXQgaXMgZ2VuZXJhdGVkIGZvciwgc28gMi8xLzMgaXNcbi8vIFwic3VidHJhY3RlZFwiIGZyb20gdGhlc2UgVGlsZUlEcy4gVGhlIGZpbmFsIFRpbGVNYXNrIGZvciAyLzEvMyB3aWxsIHRodXMgYmU6XG4vL1xuLy8gICAg4pSM4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSs4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSs4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSQXG4vLyAgICDilIIgICAgICAgIOKUgiAgICAgICAg4pSCIyMjIyMjIyMjIyMjIyMjIyPilIJcbi8vICAgIOKUgiAyLzAvMCAg4pSCIDIvMS8wICDilIIjIyMjIyMjIyMjIyMjIyMjI+KUglxuLy8gICAg4pSCICAgICAgICDilIIgICAgICAgIOKUgiMjIyMjIyMjIyMjIyMjIyMj4pSCXG4vLyAgICDilJzilIDilIDilIDilIDilIDilIDilIDilIDilLzilIDilIDilIDilIDilIDilIDilIDilIDilKQjIyMjIyMjIyMjIyMjIyMjI+KUglxuLy8gICAg4pSCICAgICAgICDilIIjIyMjIyMjI+KUgiMjIyMjIyMjIyMjIyMjIyMj4pSCXG4vLyAgICDilIIgMi8wLzEgIOKUgiMjIyMjIyMj4pSCIyMjIyMjIyMjIyMjIyMjIyPilIJcbi8vICAgIOKUgiAgICAgICAg4pSCIyMjIyMjIyPilIIjIyMjIyMjIyMjIyMjIyMjI+KUglxuLy8gICAg4pSc4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pS04pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pS84pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSA4pSkXG4vLyAgICDilIIgICAgICAgICAgICAgICAgIOKUgiAgICAgICAgICAgICAgICAg4pSCXG4vLyAgICDilIIgICAgICAgICAgICAgICAgIOKUgiAgICAgICAgICAgICAgICAg4pSCXG4vLyAgICDilIIgICAgICAgICAgICAgICAgIOKUgiAgICAgICAgICAgICAgICAg4pSCXG4vLyAgICDilIIgICAgICAxLzAvMSAgICAgIOKUgiAgICAgIDEvMS8xICAgICAg4pSCXG4vLyAgICDilIIgICAgICAgICAgICAgICAgIOKUgiAgICAgICAgICAgICAgICAg4pSCXG4vLyAgICDilIIgICAgICAgICAgICAgICAgIOKUgiAgICAgICAgICAgICAgICAg4pSCXG4vLyAgICDilIIgICAgICAgICAgICAgICAgIOKUgiAgICAgICAgICAgICAgICAg4pSCXG4vLyAgICDilJTilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilLTilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilIDilJhcbi8vXG4vLyBPbmx5IG90aGVyIHJlbmRlcmFibGUgdGlsZXMgdGhhdCBhcmUgKmNoaWxkcmVuKiBvZiB0aGUgdGlsZSB3ZSBhcmUgZ2VuZXJhdGluZyB0aGUgbWFzayBmb3Igd2lsbFxuLy8gYmUgY29uc2lkZXJlZC4gRm9yIGV4YW1wbGUsIGFkZGluZyBUaWxlSUQgNC84LzEzIHRvIHJlbmRlcmFibGVUaWxlcyB3b24ndCBhZmZlY3QgdGhlIFRpbGVNYXNrIGZvclxuLy8gMi8xLzMsIHNpbmNlIGl0IGlzIG5vdCBhIGRlc2NlbmRhbnQgb2YgaXQuXG5cblxuZXhwb3J0IGRlZmF1bHQgZnVuY3Rpb24ocmVuZGVyYWJsZVRpbGVzOiBBcnJheTxUaWxlPiwgY29udGV4dDogQ29udGV4dCkge1xuICAgIGNvbnN0IHNvcnRlZFJlbmRlcmFibGVzID0gcmVuZGVyYWJsZVRpbGVzLnNvcnQoKGEsIGIpID0+IHsgcmV0dXJuIGEudGlsZUlELmlzTGVzc1RoYW4oYi50aWxlSUQpID8gLTEgOiBiLnRpbGVJRC5pc0xlc3NUaGFuKGEudGlsZUlEKSA/IDEgOiAwOyB9KTtcblxuICAgIGZvciAobGV0IGkgPSAwOyBpIDwgc29ydGVkUmVuZGVyYWJsZXMubGVuZ3RoOyBpKyspIHtcbiAgICAgICAgY29uc3QgbWFzayA9IHt9O1xuICAgICAgICBjb25zdCB0aWxlID0gIHNvcnRlZFJlbmRlcmFibGVzW2ldO1xuICAgICAgICBjb25zdCBjaGlsZEFycmF5ID0gc29ydGVkUmVuZGVyYWJsZXMuc2xpY2UoaSArIDEpO1xuICAgICAgICAvLyBUcnkgdG8gYWRkIGFsbCByZW1haW5pbmcgaWRzIGFzIGNoaWxkcmVuLiBXZSBzb3J0ZWQgdGhlIHRpbGUgbGlzdFxuICAgICAgICAvLyBieSB6IGVhcmxpZXIsIHNvIGFsbCBwcmVjZWRpbmcgaXRlbXMgY2Fubm90IGJlIGNoaWxkcmVuIG9mIHRoZSBjdXJyZW50XG4gICAgICAgIC8vIHRpbGUuIFdlIGFsc28gY29tcHV0ZSB0aGUgbG93ZXIgYm91bmQgb2YgdGhlIG5leHQgd3JhcCwgYmVjYXVzZSBpdGVtcyBvZiB0aGUgbmV4dCB3cmFwXG4gICAgICAgIC8vIGNhbiBuZXZlciBiZSBjaGlsZHJlbiBvZiB0aGUgY3VycmVudCB3cmFwLlxuXG4gICAgICAgIGNvbXB1dGVUaWxlTWFza3ModGlsZS50aWxlSUQud3JhcHBlZCgpLCB0aWxlLnRpbGVJRCwgY2hpbGRBcnJheSwgbmV3IE92ZXJzY2FsZWRUaWxlSUQoMCwgdGlsZS50aWxlSUQud3JhcCArIDEsIDAsIDAsIDApLCBtYXNrKTtcbiAgICAgICAgdGlsZS5zZXRNYXNrKG1hc2ssIGNvbnRleHQpO1xuICAgIH1cbn1cblxuZnVuY3Rpb24gY29tcHV0ZVRpbGVNYXNrcyhyb290VGlsZTogT3ZlcnNjYWxlZFRpbGVJRCwgcmVmOiBPdmVyc2NhbGVkVGlsZUlELCBjaGlsZEFycmF5OiBBcnJheTxUaWxlPiwgbG93ZXJCb3VuZDogT3ZlcnNjYWxlZFRpbGVJRCwgbWFzazogTWFzaykge1xuICAgIC8vIElmIHRoZSByZWZlcmVuY2Ugb3IgYW55IG9mIGl0cyBjaGlsZHJlbiBpcyBmb3VuZCBpbiB0aGUgbGlzdCwgd2UgbmVlZCB0byByZWN1cnNlLlxuICAgIGZvciAobGV0IGkgPSAwOyBpIDwgY2hpbGRBcnJheS5sZW5ndGg7IGkrKykge1xuICAgICAgICBjb25zdCBjaGlsZFRpbGUgPSBjaGlsZEFycmF5W2ldO1xuICAgICAgICAvLyBjaGlsZFRpbGUgaXMgZnJvbSBhIGxhcmdlciB3cmFwIHRoYW4gdGhlIHJvb3RUaWxlIHNvIGl0IGNhbm5vdCBiZSBhIGNoaWxkIHRpbGVcbiAgICAgICAgaWYgKGxvd2VyQm91bmQuaXNMZXNzVGhhbihjaGlsZFRpbGUudGlsZUlEKSkgYnJlYWs7XG4gICAgICAgIC8vIFRoZSBjdXJyZW50IHRpbGUgaXMgbWFza2VkIG91dCwgc28gd2UgZG9uJ3QgbmVlZCB0byBhZGQgdGhlbSB0byB0aGUgbWFzayBzZXQuXG4gICAgICAgIGlmIChyZWYua2V5ID09PSBjaGlsZFRpbGUudGlsZUlELmtleSkge1xuICAgICAgICAgICAgcmV0dXJuO1xuICAgICAgICB9IGVsc2UgaWYgKGNoaWxkVGlsZS50aWxlSUQuaXNDaGlsZE9mKHJlZikpIHtcbiAgICAgICAgICAgIC8vIFRoZXJlJ3MgYXQgbGVhc3Qgb25lIGNoaWxkIHRpbGUgdGhhdCBpcyBtYXNrZWQgb3V0LCBzbyByZWN1cnNpdmVseSBkZXNjZW5kXG4gICAgICAgICAgICBjb25zdCBjaGlsZHJlbiA9IHJlZi5jaGlsZHJlbihJbmZpbml0eSk7XG4gICAgICAgICAgICBmb3IgKGxldCBqID0gMDsgaiA8IGNoaWxkcmVuLmxlbmd0aDsgaisrKSB7XG4gICAgICAgICAgICAgICAgY29uc3QgY2hpbGQgPSBjaGlsZHJlbltqXTtcbiAgICAgICAgICAgICAgICBjb21wdXRlVGlsZU1hc2tzKHJvb3RUaWxlLCBjaGlsZCwgY2hpbGRBcnJheS5zbGljZShpKSwgbG93ZXJCb3VuZCwgbWFzayk7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICByZXR1cm47XG4gICAgICAgIH1cbiAgICB9XG4gICAgLy8gV2UgY291bGRuJ3QgZmluZCBhIGNoaWxkLCBzbyBpdCdzIGRlZmluaXRlbHkgYSBtYXNrZWQgcGFydC5cbiAgICAvLyBDb21wdXRlIHRoZSBkaWZmZXJlbmNlIGJldHdlZW4gdGhlIHJvb3QgdGlsZSBJRCBhbmQgdGhlIHJlZmVyZW5jZSB0aWxlIElELCBzaW5jZSBUaWxlTWFza1xuICAgIC8vIGVsZW1lbnRzIGFyZSBhbHdheXMgcmVsYXRpdmUgKHNlZSBiZWxvdyBmb3IgZXhwbGFuYXRpb24pLlxuICAgIGNvbnN0IGRpZmZaID0gcmVmLm92ZXJzY2FsZWRaIC0gcm9vdFRpbGUub3ZlcnNjYWxlZFo7XG4gICAgY29uc3QgbWFza1RpbGVJZCA9IG5ldyBDYW5vbmljYWxUaWxlSUQoZGlmZlosIHJlZi5jYW5vbmljYWwueCAtIChyb290VGlsZS5jYW5vbmljYWwueCA8PCBkaWZmWiksIHJlZi5jYW5vbmljYWwueSAtIChyb290VGlsZS5jYW5vbmljYWwueSA8PCBkaWZmWikpO1xuICAgIG1hc2tbbWFza1RpbGVJZC5rZXldID0gbWFza1ttYXNrVGlsZUlkLmtleV0gfHwgbWFza1RpbGVJZDtcbn1cbiIsIi8vIEBmbG93XG5cbmltcG9ydCB0eXBlIFBhaW50ZXIgZnJvbSAnLi9wYWludGVyJztcbmltcG9ydCB0eXBlIFNvdXJjZUNhY2hlIGZyb20gJy4uL3NvdXJjZS9zb3VyY2VfY2FjaGUnO1xuaW1wb3J0IHR5cGUgU3R5bGVMYXllciBmcm9tICcuLi9zdHlsZS9zdHlsZV9sYXllcic7XG5pbXBvcnQgdHlwZSB7T3ZlcnNjYWxlZFRpbGVJRH0gZnJvbSAnLi4vc291cmNlL3RpbGVfaWQnO1xuaW1wb3J0IHR5cGUgU3ltYm9sQnVja2V0IGZyb20gJy4uL2RhdGEvYnVja2V0L3N5bWJvbF9idWNrZXQnO1xuaW1wb3J0IERlcHRoTW9kZSBmcm9tICcuLi9nbC9kZXB0aF9tb2RlJztcbmltcG9ydCBTdGVuY2lsTW9kZSBmcm9tICcuLi9nbC9zdGVuY2lsX21vZGUnO1xuaW1wb3J0IHsgY29sbGlzaW9uVW5pZm9ybVZhbHVlcyB9IGZyb20gJy4vcHJvZ3JhbS9jb2xsaXNpb25fcHJvZ3JhbSc7XG5cbmV4cG9ydCBkZWZhdWx0IGRyYXdDb2xsaXNpb25EZWJ1ZztcblxuZnVuY3Rpb24gZHJhd0NvbGxpc2lvbkRlYnVnR2VvbWV0cnkocGFpbnRlcjogUGFpbnRlciwgc291cmNlQ2FjaGU6IFNvdXJjZUNhY2hlLCBsYXllcjogU3R5bGVMYXllciwgY29vcmRzOiBBcnJheTxPdmVyc2NhbGVkVGlsZUlEPiwgZHJhd0NpcmNsZXM6IGJvb2xlYW4pIHtcbiAgICBjb25zdCBjb250ZXh0ID0gcGFpbnRlci5jb250ZXh0O1xuICAgIGNvbnN0IGdsID0gY29udGV4dC5nbDtcbiAgICBjb25zdCBwcm9ncmFtID0gZHJhd0NpcmNsZXMgPyBwYWludGVyLnVzZVByb2dyYW0oJ2NvbGxpc2lvbkNpcmNsZScpIDogcGFpbnRlci51c2VQcm9ncmFtKCdjb2xsaXNpb25Cb3gnKTtcblxuICAgIGZvciAobGV0IGkgPSAwOyBpIDwgY29vcmRzLmxlbmd0aDsgaSsrKSB7XG4gICAgICAgIGNvbnN0IGNvb3JkID0gY29vcmRzW2ldO1xuICAgICAgICBjb25zdCB0aWxlID0gc291cmNlQ2FjaGUuZ2V0VGlsZShjb29yZCk7XG4gICAgICAgIGNvbnN0IGJ1Y2tldDogP1N5bWJvbEJ1Y2tldCA9ICh0aWxlLmdldEJ1Y2tldChsYXllcik6IGFueSk7XG4gICAgICAgIGlmICghYnVja2V0KSBjb250aW51ZTtcbiAgICAgICAgY29uc3QgYnVmZmVycyA9IGRyYXdDaXJjbGVzID8gYnVja2V0LmNvbGxpc2lvbkNpcmNsZSA6IGJ1Y2tldC5jb2xsaXNpb25Cb3g7XG4gICAgICAgIGlmICghYnVmZmVycykgY29udGludWU7XG5cbiAgICAgICAgcHJvZ3JhbS5kcmF3KGNvbnRleHQsIGRyYXdDaXJjbGVzID8gZ2wuVFJJQU5HTEVTIDogZ2wuTElORVMsXG4gICAgICAgICAgICBEZXB0aE1vZGUuZGlzYWJsZWQsIFN0ZW5jaWxNb2RlLmRpc2FibGVkLFxuICAgICAgICAgICAgcGFpbnRlci5jb2xvck1vZGVGb3JSZW5kZXJQYXNzKCksXG4gICAgICAgICAgICBjb2xsaXNpb25Vbmlmb3JtVmFsdWVzKFxuICAgICAgICAgICAgICAgIGNvb3JkLnBvc01hdHJpeCxcbiAgICAgICAgICAgICAgICBwYWludGVyLnRyYW5zZm9ybSxcbiAgICAgICAgICAgICAgICB0aWxlKSxcbiAgICAgICAgICAgIGxheWVyLmlkLCBidWZmZXJzLmxheW91dFZlcnRleEJ1ZmZlciwgYnVmZmVycy5pbmRleEJ1ZmZlcixcbiAgICAgICAgICAgIGJ1ZmZlcnMuc2VnbWVudHMsIG51bGwsIHBhaW50ZXIudHJhbnNmb3JtLnpvb20sIG51bGwsIG51bGwsXG4gICAgICAgICAgICBidWZmZXJzLmNvbGxpc2lvblZlcnRleEJ1ZmZlcik7XG4gICAgfVxufVxuXG5mdW5jdGlvbiBkcmF3Q29sbGlzaW9uRGVidWcocGFpbnRlcjogUGFpbnRlciwgc291cmNlQ2FjaGU6IFNvdXJjZUNhY2hlLCBsYXllcjogU3R5bGVMYXllciwgY29vcmRzOiBBcnJheTxPdmVyc2NhbGVkVGlsZUlEPikge1xuICAgIGRyYXdDb2xsaXNpb25EZWJ1Z0dlb21ldHJ5KHBhaW50ZXIsIHNvdXJjZUNhY2hlLCBsYXllciwgY29vcmRzLCBmYWxzZSk7XG4gICAgZHJhd0NvbGxpc2lvbkRlYnVnR2VvbWV0cnkocGFpbnRlciwgc291cmNlQ2FjaGUsIGxheWVyLCBjb29yZHMsIHRydWUpO1xufVxuIiwiLy8gQGZsb3dcblxuaW1wb3J0IGRyYXdDb2xsaXNpb25EZWJ1ZyBmcm9tICcuL2RyYXdfY29sbGlzaW9uX2RlYnVnJztcblxuaW1wb3J0IHBpeGVsc1RvVGlsZVVuaXRzIGZyb20gJy4uL3NvdXJjZS9waXhlbHNfdG9fdGlsZV91bml0cyc7XG5pbXBvcnQgKiBhcyBzeW1ib2xQcm9qZWN0aW9uIGZyb20gJy4uL3N5bWJvbC9wcm9qZWN0aW9uJztcbmltcG9ydCAqIGFzIHN5bWJvbFNpemUgZnJvbSAnLi4vc3ltYm9sL3N5bWJvbF9zaXplJztcbmltcG9ydCB7IG1hdDQgfSBmcm9tICdnbC1tYXRyaXgnO1xuY29uc3QgaWRlbnRpdHlNYXQ0ID0gbWF0NC5pZGVudGl0eShuZXcgRmxvYXQzMkFycmF5KDE2KSk7XG5pbXBvcnQgcHJvcGVydGllcyBmcm9tICcuLi9zdHlsZS9zdHlsZV9sYXllci9zeW1ib2xfc3R5bGVfbGF5ZXJfcHJvcGVydGllcyc7XG5jb25zdCBzeW1ib2xMYXlvdXRQcm9wZXJ0aWVzID0gcHJvcGVydGllcy5sYXlvdXQ7XG5pbXBvcnQgU3RlbmNpbE1vZGUgZnJvbSAnLi4vZ2wvc3RlbmNpbF9tb2RlJztcbmltcG9ydCBEZXB0aE1vZGUgZnJvbSAnLi4vZ2wvZGVwdGhfbW9kZSc7XG5pbXBvcnQge1xuICAgIHN5bWJvbEljb25Vbmlmb3JtVmFsdWVzLFxuICAgIHN5bWJvbFNERlVuaWZvcm1WYWx1ZXNcbn0gZnJvbSAnLi9wcm9ncmFtL3N5bWJvbF9wcm9ncmFtJztcblxuaW1wb3J0IHR5cGUgUGFpbnRlciBmcm9tICcuL3BhaW50ZXInO1xuaW1wb3J0IHR5cGUgU291cmNlQ2FjaGUgZnJvbSAnLi4vc291cmNlL3NvdXJjZV9jYWNoZSc7XG5pbXBvcnQgdHlwZSBTeW1ib2xTdHlsZUxheWVyIGZyb20gJy4uL3N0eWxlL3N0eWxlX2xheWVyL3N5bWJvbF9zdHlsZV9sYXllcic7XG5pbXBvcnQgdHlwZSBTeW1ib2xCdWNrZXQgZnJvbSAnLi4vZGF0YS9idWNrZXQvc3ltYm9sX2J1Y2tldCc7XG5pbXBvcnQgdHlwZSB7T3ZlcnNjYWxlZFRpbGVJRH0gZnJvbSAnLi4vc291cmNlL3RpbGVfaWQnO1xuXG5leHBvcnQgZGVmYXVsdCBkcmF3U3ltYm9scztcblxuZnVuY3Rpb24gZHJhd1N5bWJvbHMocGFpbnRlcjogUGFpbnRlciwgc291cmNlQ2FjaGU6IFNvdXJjZUNhY2hlLCBsYXllcjogU3ltYm9sU3R5bGVMYXllciwgY29vcmRzOiBBcnJheTxPdmVyc2NhbGVkVGlsZUlEPikge1xuICAgIGlmIChwYWludGVyLnJlbmRlclBhc3MgIT09ICd0cmFuc2x1Y2VudCcpIHJldHVybjtcblxuICAgIC8vIERpc2FibGUgdGhlIHN0ZW5jaWwgdGVzdCBzbyB0aGF0IGxhYmVscyBhcmVuJ3QgY2xpcHBlZCB0byB0aWxlIGJvdW5kYXJpZXMuXG4gICAgY29uc3Qgc3RlbmNpbE1vZGUgPSBTdGVuY2lsTW9kZS5kaXNhYmxlZDtcbiAgICBjb25zdCBjb2xvck1vZGUgPSBwYWludGVyLmNvbG9yTW9kZUZvclJlbmRlclBhc3MoKTtcblxuICAgIGlmIChsYXllci5wYWludC5nZXQoJ2ljb24tb3BhY2l0eScpLmNvbnN0YW50T3IoMSkgIT09IDApIHtcbiAgICAgICAgZHJhd0xheWVyU3ltYm9scyhwYWludGVyLCBzb3VyY2VDYWNoZSwgbGF5ZXIsIGNvb3JkcywgZmFsc2UsXG4gICAgICAgICAgICBsYXllci5wYWludC5nZXQoJ2ljb24tdHJhbnNsYXRlJyksXG4gICAgICAgICAgICBsYXllci5wYWludC5nZXQoJ2ljb24tdHJhbnNsYXRlLWFuY2hvcicpLFxuICAgICAgICAgICAgbGF5ZXIubGF5b3V0LmdldCgnaWNvbi1yb3RhdGlvbi1hbGlnbm1lbnQnKSxcbiAgICAgICAgICAgIGxheWVyLmxheW91dC5nZXQoJ2ljb24tcGl0Y2gtYWxpZ25tZW50JyksXG4gICAgICAgICAgICBsYXllci5sYXlvdXQuZ2V0KCdpY29uLWtlZXAtdXByaWdodCcpLFxuICAgICAgICAgICAgc3RlbmNpbE1vZGUsIGNvbG9yTW9kZVxuICAgICAgICApO1xuICAgIH1cblxuICAgIGlmIChsYXllci5wYWludC5nZXQoJ3RleHQtb3BhY2l0eScpLmNvbnN0YW50T3IoMSkgIT09IDApIHtcbiAgICAgICAgZHJhd0xheWVyU3ltYm9scyhwYWludGVyLCBzb3VyY2VDYWNoZSwgbGF5ZXIsIGNvb3JkcywgdHJ1ZSxcbiAgICAgICAgICAgIGxheWVyLnBhaW50LmdldCgndGV4dC10cmFuc2xhdGUnKSxcbiAgICAgICAgICAgIGxheWVyLnBhaW50LmdldCgndGV4dC10cmFuc2xhdGUtYW5jaG9yJyksXG4gICAgICAgICAgICBsYXllci5sYXlvdXQuZ2V0KCd0ZXh0LXJvdGF0aW9uLWFsaWdubWVudCcpLFxuICAgICAgICAgICAgbGF5ZXIubGF5b3V0LmdldCgndGV4dC1waXRjaC1hbGlnbm1lbnQnKSxcbiAgICAgICAgICAgIGxheWVyLmxheW91dC5nZXQoJ3RleHQta2VlcC11cHJpZ2h0JyksXG4gICAgICAgICAgICBzdGVuY2lsTW9kZSwgY29sb3JNb2RlXG4gICAgICAgICk7XG4gICAgfVxuXG4gICAgaWYgKHNvdXJjZUNhY2hlLm1hcC5zaG93Q29sbGlzaW9uQm94ZXMpIHtcbiAgICAgICAgZHJhd0NvbGxpc2lvbkRlYnVnKHBhaW50ZXIsIHNvdXJjZUNhY2hlLCBsYXllciwgY29vcmRzKTtcbiAgICB9XG59XG5cbmZ1bmN0aW9uIGRyYXdMYXllclN5bWJvbHMocGFpbnRlciwgc291cmNlQ2FjaGUsIGxheWVyLCBjb29yZHMsIGlzVGV4dCwgdHJhbnNsYXRlLCB0cmFuc2xhdGVBbmNob3IsXG4gICAgcm90YXRpb25BbGlnbm1lbnQsIHBpdGNoQWxpZ25tZW50LCBrZWVwVXByaWdodCwgc3RlbmNpbE1vZGUsIGNvbG9yTW9kZSkge1xuXG4gICAgY29uc3QgY29udGV4dCA9IHBhaW50ZXIuY29udGV4dDtcbiAgICBjb25zdCBnbCA9IGNvbnRleHQuZ2w7XG4gICAgY29uc3QgdHIgPSBwYWludGVyLnRyYW5zZm9ybTtcblxuICAgIGNvbnN0IHJvdGF0ZVdpdGhNYXAgPSByb3RhdGlvbkFsaWdubWVudCA9PT0gJ21hcCc7XG4gICAgY29uc3QgcGl0Y2hXaXRoTWFwID0gcGl0Y2hBbGlnbm1lbnQgPT09ICdtYXAnO1xuICAgIGNvbnN0IGFsb25nTGluZSA9IHJvdGF0ZVdpdGhNYXAgJiYgbGF5ZXIubGF5b3V0LmdldCgnc3ltYm9sLXBsYWNlbWVudCcpICE9PSAncG9pbnQnO1xuICAgIC8vIExpbmUgbGFiZWwgcm90YXRpb24gaGFwcGVucyBpbiBgdXBkYXRlTGluZUxhYmVsc2BcbiAgICAvLyBQaXRjaGVkIHBvaW50IGxhYmVscyBhcmUgYXV0b21hdGljYWxseSByb3RhdGVkIGJ5IHRoZSBsYWJlbFBsYW5lTWF0cml4IHByb2plY3Rpb25cbiAgICAvLyBVbnBpdGNoZWQgcG9pbnQgbGFiZWxzIG5lZWQgdG8gaGF2ZSB0aGVpciByb3RhdGlvbiBhcHBsaWVkIGFmdGVyIHByb2plY3Rpb25cbiAgICBjb25zdCByb3RhdGVJblNoYWRlciA9IHJvdGF0ZVdpdGhNYXAgJiYgIXBpdGNoV2l0aE1hcCAmJiAhYWxvbmdMaW5lO1xuXG4gICAgY29uc3QgZGVwdGhPbiA9IHBpdGNoV2l0aE1hcDtcblxuICAgIGNvbnN0IGRlcHRoTW9kZSA9IGRlcHRoT24gPyBwYWludGVyLmRlcHRoTW9kZUZvclN1YmxheWVyKDAsIERlcHRoTW9kZS5SZWFkT25seSkgOiBEZXB0aE1vZGUuZGlzYWJsZWQ7XG5cbiAgICBsZXQgcHJvZ3JhbTtcbiAgICBsZXQgc2l6ZTtcblxuICAgIGZvciAoY29uc3QgY29vcmQgb2YgY29vcmRzKSB7XG4gICAgICAgIGNvbnN0IHRpbGUgPSBzb3VyY2VDYWNoZS5nZXRUaWxlKGNvb3JkKTtcbiAgICAgICAgY29uc3QgYnVja2V0OiBTeW1ib2xCdWNrZXQgPSAodGlsZS5nZXRCdWNrZXQobGF5ZXIpOiBhbnkpO1xuICAgICAgICBpZiAoIWJ1Y2tldCkgY29udGludWU7XG4gICAgICAgIGNvbnN0IGJ1ZmZlcnMgPSBpc1RleHQgPyBidWNrZXQudGV4dCA6IGJ1Y2tldC5pY29uO1xuICAgICAgICBpZiAoIWJ1ZmZlcnMgfHwgIWJ1ZmZlcnMuc2VnbWVudHMuZ2V0KCkubGVuZ3RoKSBjb250aW51ZTtcbiAgICAgICAgY29uc3QgcHJvZ3JhbUNvbmZpZ3VyYXRpb24gPSBidWZmZXJzLnByb2dyYW1Db25maWd1cmF0aW9ucy5nZXQobGF5ZXIuaWQpO1xuXG4gICAgICAgIGNvbnN0IGlzU0RGID0gaXNUZXh0IHx8IGJ1Y2tldC5zZGZJY29ucztcblxuICAgICAgICBjb25zdCBzaXplRGF0YSA9IGlzVGV4dCA/IGJ1Y2tldC50ZXh0U2l6ZURhdGEgOiBidWNrZXQuaWNvblNpemVEYXRhO1xuXG4gICAgICAgIGlmICghcHJvZ3JhbSkge1xuICAgICAgICAgICAgcHJvZ3JhbSA9IHBhaW50ZXIudXNlUHJvZ3JhbShpc1NERiA/ICdzeW1ib2xTREYnIDogJ3N5bWJvbEljb24nLCBwcm9ncmFtQ29uZmlndXJhdGlvbik7XG4gICAgICAgICAgICBzaXplID0gc3ltYm9sU2l6ZS5ldmFsdWF0ZVNpemVGb3Jab29tKHNpemVEYXRhLCB0ci56b29tLCBzeW1ib2xMYXlvdXRQcm9wZXJ0aWVzLnByb3BlcnRpZXNbaXNUZXh0ID8gJ3RleHQtc2l6ZScgOiAnaWNvbi1zaXplJ10pO1xuICAgICAgICB9XG5cbiAgICAgICAgY29udGV4dC5hY3RpdmVUZXh0dXJlLnNldChnbC5URVhUVVJFMCk7XG5cbiAgICAgICAgbGV0IHRleFNpemU6IFtudW1iZXIsIG51bWJlcl07XG4gICAgICAgIGlmIChpc1RleHQpIHtcbiAgICAgICAgICAgIHRpbGUuZ2x5cGhBdGxhc1RleHR1cmUuYmluZChnbC5MSU5FQVIsIGdsLkNMQU1QX1RPX0VER0UpO1xuICAgICAgICAgICAgdGV4U2l6ZSA9IHRpbGUuZ2x5cGhBdGxhc1RleHR1cmUuc2l6ZTtcbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgIGNvbnN0IGljb25TY2FsZWQgPSBsYXllci5sYXlvdXQuZ2V0KCdpY29uLXNpemUnKS5jb25zdGFudE9yKDApICE9PSAxIHx8IGJ1Y2tldC5pY29uc05lZWRMaW5lYXI7XG4gICAgICAgICAgICBjb25zdCBpY29uVHJhbnNmb3JtZWQgPSBwaXRjaFdpdGhNYXAgfHwgdHIucGl0Y2ggIT09IDA7XG5cbiAgICAgICAgICAgIHRpbGUuaW1hZ2VBdGxhc1RleHR1cmUuYmluZChpc1NERiB8fCBwYWludGVyLm9wdGlvbnMucm90YXRpbmcgfHwgcGFpbnRlci5vcHRpb25zLnpvb21pbmcgfHwgaWNvblNjYWxlZCB8fCBpY29uVHJhbnNmb3JtZWQgP1xuICAgICAgICAgICAgICAgIGdsLkxJTkVBUiA6IGdsLk5FQVJFU1QsIGdsLkNMQU1QX1RPX0VER0UpO1xuXG4gICAgICAgICAgICB0ZXhTaXplID0gdGlsZS5pbWFnZUF0bGFzVGV4dHVyZS5zaXplO1xuICAgICAgICB9XG5cbiAgICAgICAgY29uc3QgcyA9IHBpeGVsc1RvVGlsZVVuaXRzKHRpbGUsIDEsIHBhaW50ZXIudHJhbnNmb3JtLnpvb20pO1xuICAgICAgICBjb25zdCBsYWJlbFBsYW5lTWF0cml4ID0gc3ltYm9sUHJvamVjdGlvbi5nZXRMYWJlbFBsYW5lTWF0cml4KGNvb3JkLnBvc01hdHJpeCwgcGl0Y2hXaXRoTWFwLCByb3RhdGVXaXRoTWFwLCBwYWludGVyLnRyYW5zZm9ybSwgcyk7XG4gICAgICAgIGNvbnN0IGdsQ29vcmRNYXRyaXggPSBzeW1ib2xQcm9qZWN0aW9uLmdldEdsQ29vcmRNYXRyaXgoY29vcmQucG9zTWF0cml4LCBwaXRjaFdpdGhNYXAsIHJvdGF0ZVdpdGhNYXAsIHBhaW50ZXIudHJhbnNmb3JtLCBzKTtcblxuICAgICAgICBpZiAoYWxvbmdMaW5lKSB7XG4gICAgICAgICAgICBzeW1ib2xQcm9qZWN0aW9uLnVwZGF0ZUxpbmVMYWJlbHMoYnVja2V0LCBjb29yZC5wb3NNYXRyaXgsIHBhaW50ZXIsIGlzVGV4dCwgbGFiZWxQbGFuZU1hdHJpeCwgZ2xDb29yZE1hdHJpeCwgcGl0Y2hXaXRoTWFwLCBrZWVwVXByaWdodCk7XG4gICAgICAgIH1cblxuICAgICAgICBjb25zdCBtYXRyaXggPSBwYWludGVyLnRyYW5zbGF0ZVBvc01hdHJpeChjb29yZC5wb3NNYXRyaXgsIHRpbGUsIHRyYW5zbGF0ZSwgdHJhbnNsYXRlQW5jaG9yKSxcbiAgICAgICAgICAgIHVMYWJlbFBsYW5lTWF0cml4ID0gYWxvbmdMaW5lID8gaWRlbnRpdHlNYXQ0IDogbGFiZWxQbGFuZU1hdHJpeCxcbiAgICAgICAgICAgIHVnbENvb3JkTWF0cml4ID0gcGFpbnRlci50cmFuc2xhdGVQb3NNYXRyaXgoZ2xDb29yZE1hdHJpeCwgdGlsZSwgdHJhbnNsYXRlLCB0cmFuc2xhdGVBbmNob3IsIHRydWUpO1xuXG4gICAgICAgIGxldCB1bmlmb3JtVmFsdWVzO1xuICAgICAgICBpZiAoaXNTREYpIHtcbiAgICAgICAgICAgIGNvbnN0IGhhc0hhbG8gPSBsYXllci5wYWludC5nZXQoaXNUZXh0ID8gJ3RleHQtaGFsby13aWR0aCcgOiAnaWNvbi1oYWxvLXdpZHRoJykuY29uc3RhbnRPcigxKSAhPT0gMDtcblxuICAgICAgICAgICAgdW5pZm9ybVZhbHVlcyA9IHN5bWJvbFNERlVuaWZvcm1WYWx1ZXMoc2l6ZURhdGEuZnVuY3Rpb25UeXBlLFxuICAgICAgICAgICAgICAgIHNpemUsIHJvdGF0ZUluU2hhZGVyLCBwaXRjaFdpdGhNYXAsIHBhaW50ZXIsIG1hdHJpeCxcbiAgICAgICAgICAgICAgICB1TGFiZWxQbGFuZU1hdHJpeCwgdWdsQ29vcmRNYXRyaXgsIGlzVGV4dCwgdGV4U2l6ZSwgdHJ1ZSk7XG5cbiAgICAgICAgICAgIGlmIChoYXNIYWxvKSB7XG4gICAgICAgICAgICAgICAgZHJhd1N5bWJvbEVsZW1lbnRzKGJ1ZmZlcnMsIGxheWVyLCBwYWludGVyLCBwcm9ncmFtLCBkZXB0aE1vZGUsIHN0ZW5jaWxNb2RlLCBjb2xvck1vZGUsIHVuaWZvcm1WYWx1ZXMpO1xuICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICB1bmlmb3JtVmFsdWVzWyd1X2lzX2hhbG8nXSA9IDA7XG5cbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgIHVuaWZvcm1WYWx1ZXMgPSBzeW1ib2xJY29uVW5pZm9ybVZhbHVlcyhzaXplRGF0YS5mdW5jdGlvblR5cGUsXG4gICAgICAgICAgICAgICAgc2l6ZSwgcm90YXRlSW5TaGFkZXIsIHBpdGNoV2l0aE1hcCwgcGFpbnRlciwgbWF0cml4LFxuICAgICAgICAgICAgICAgIHVMYWJlbFBsYW5lTWF0cml4LCB1Z2xDb29yZE1hdHJpeCwgaXNUZXh0LCB0ZXhTaXplKTtcbiAgICAgICAgfVxuXG4gICAgICAgIGRyYXdTeW1ib2xFbGVtZW50cyhidWZmZXJzLCBsYXllciwgcGFpbnRlciwgcHJvZ3JhbSwgZGVwdGhNb2RlLCBzdGVuY2lsTW9kZSwgY29sb3JNb2RlLCB1bmlmb3JtVmFsdWVzKTtcbiAgICB9XG59XG5cbmZ1bmN0aW9uIGRyYXdTeW1ib2xFbGVtZW50cyhidWZmZXJzLCBsYXllciwgcGFpbnRlciwgcHJvZ3JhbSwgZGVwdGhNb2RlLCBzdGVuY2lsTW9kZSwgY29sb3JNb2RlLCB1bmlmb3JtVmFsdWVzKSB7XG4gICAgY29uc3QgY29udGV4dCA9IHBhaW50ZXIuY29udGV4dDtcbiAgICBjb25zdCBnbCA9IGNvbnRleHQuZ2w7XG4gICAgcHJvZ3JhbS5kcmF3KGNvbnRleHQsIGdsLlRSSUFOR0xFUywgZGVwdGhNb2RlLCBzdGVuY2lsTW9kZSwgY29sb3JNb2RlLFxuICAgICAgICB1bmlmb3JtVmFsdWVzLCBsYXllci5pZCwgYnVmZmVycy5sYXlvdXRWZXJ0ZXhCdWZmZXIsXG4gICAgICAgIGJ1ZmZlcnMuaW5kZXhCdWZmZXIsIGJ1ZmZlcnMuc2VnbWVudHMsIGxheWVyLnBhaW50LFxuICAgICAgICBwYWludGVyLnRyYW5zZm9ybS56b29tLCBidWZmZXJzLnByb2dyYW1Db25maWd1cmF0aW9ucy5nZXQobGF5ZXIuaWQpLFxuICAgICAgICBidWZmZXJzLmR5bmFtaWNMYXlvdXRWZXJ0ZXhCdWZmZXIsIGJ1ZmZlcnMub3BhY2l0eVZlcnRleEJ1ZmZlcik7XG59XG4iLCIvLyBAZmxvd1xuXG5pbXBvcnQgQ29sb3IgZnJvbSAnLi4vc3R5bGUtc3BlYy91dGlsL2NvbG9yJztcbmltcG9ydCBEZXB0aE1vZGUgZnJvbSAnLi4vZ2wvZGVwdGhfbW9kZSc7XG5pbXBvcnQge1xuICAgIGZpbGxVbmlmb3JtVmFsdWVzLFxuICAgIGZpbGxQYXR0ZXJuVW5pZm9ybVZhbHVlcyxcbiAgICBmaWxsT3V0bGluZVVuaWZvcm1WYWx1ZXMsXG4gICAgZmlsbE91dGxpbmVQYXR0ZXJuVW5pZm9ybVZhbHVlc1xufSBmcm9tICcuL3Byb2dyYW0vZmlsbF9wcm9ncmFtJztcblxuaW1wb3J0IHR5cGUgUGFpbnRlciBmcm9tICcuL3BhaW50ZXInO1xuaW1wb3J0IHR5cGUgU291cmNlQ2FjaGUgZnJvbSAnLi4vc291cmNlL3NvdXJjZV9jYWNoZSc7XG5pbXBvcnQgdHlwZSBGaWxsU3R5bGVMYXllciBmcm9tICcuLi9zdHlsZS9zdHlsZV9sYXllci9maWxsX3N0eWxlX2xheWVyJztcbmltcG9ydCB0eXBlIEZpbGxCdWNrZXQgZnJvbSAnLi4vZGF0YS9idWNrZXQvZmlsbF9idWNrZXQnO1xuaW1wb3J0IHR5cGUge092ZXJzY2FsZWRUaWxlSUR9IGZyb20gJy4uL3NvdXJjZS90aWxlX2lkJztcblxuZXhwb3J0IGRlZmF1bHQgZHJhd0ZpbGw7XG5cbmZ1bmN0aW9uIGRyYXdGaWxsKHBhaW50ZXI6IFBhaW50ZXIsIHNvdXJjZUNhY2hlOiBTb3VyY2VDYWNoZSwgbGF5ZXI6IEZpbGxTdHlsZUxheWVyLCBjb29yZHM6IEFycmF5PE92ZXJzY2FsZWRUaWxlSUQ+KSB7XG4gICAgY29uc3QgY29sb3IgPSBsYXllci5wYWludC5nZXQoJ2ZpbGwtY29sb3InKTtcbiAgICBjb25zdCBvcGFjaXR5ID0gbGF5ZXIucGFpbnQuZ2V0KCdmaWxsLW9wYWNpdHknKTtcblxuICAgIGlmIChvcGFjaXR5LmNvbnN0YW50T3IoMSkgPT09IDApIHtcbiAgICAgICAgcmV0dXJuO1xuICAgIH1cblxuICAgIGNvbnN0IGNvbG9yTW9kZSA9IHBhaW50ZXIuY29sb3JNb2RlRm9yUmVuZGVyUGFzcygpO1xuXG4gICAgY29uc3QgcGF0dGVybiA9IGxheWVyLnBhaW50LmdldCgnZmlsbC1wYXR0ZXJuJyk7XG4gICAgY29uc3QgcGFzcyA9ICghcGF0dGVybi5jb25zdGFudE9yKCgxOiBhbnkpKSAmJlxuICAgICAgICBjb2xvci5jb25zdGFudE9yKENvbG9yLnRyYW5zcGFyZW50KS5hID09PSAxICYmXG4gICAgICAgIG9wYWNpdHkuY29uc3RhbnRPcigwKSA9PT0gMSkgPyAnb3BhcXVlJyA6ICd0cmFuc2x1Y2VudCc7XG5cbiAgICAvLyBEcmF3IGZpbGxcbiAgICBpZiAocGFpbnRlci5yZW5kZXJQYXNzID09PSBwYXNzKSB7XG4gICAgICAgIGNvbnN0IGRlcHRoTW9kZSA9IHBhaW50ZXIuZGVwdGhNb2RlRm9yU3VibGF5ZXIoXG4gICAgICAgICAgICAxLCBwYWludGVyLnJlbmRlclBhc3MgPT09ICdvcGFxdWUnID8gRGVwdGhNb2RlLlJlYWRXcml0ZSA6IERlcHRoTW9kZS5SZWFkT25seSk7XG4gICAgICAgIGRyYXdGaWxsVGlsZXMocGFpbnRlciwgc291cmNlQ2FjaGUsIGxheWVyLCBjb29yZHMsIGRlcHRoTW9kZSwgY29sb3JNb2RlLCBmYWxzZSk7XG4gICAgfVxuXG4gICAgLy8gRHJhdyBzdHJva2VcbiAgICBpZiAocGFpbnRlci5yZW5kZXJQYXNzID09PSAndHJhbnNsdWNlbnQnICYmIGxheWVyLnBhaW50LmdldCgnZmlsbC1hbnRpYWxpYXMnKSkge1xuXG4gICAgICAgIC8vIElmIHdlIGRlZmluZWQgYSBkaWZmZXJlbnQgY29sb3IgZm9yIHRoZSBmaWxsIG91dGxpbmUsIHdlIGFyZVxuICAgICAgICAvLyBnb2luZyB0byBpZ25vcmUgdGhlIGJpdHMgaW4gMHgwNyBhbmQganVzdCBjYXJlIGFib3V0IHRoZSBnbG9iYWxcbiAgICAgICAgLy8gY2xpcHBpbmcgbWFzay5cbiAgICAgICAgLy8gT3RoZXJ3aXNlLCB3ZSBvbmx5IHdhbnQgdG8gZHJhd0ZpbGwgdGhlIGFudGlhbGlhc2VkIHBhcnRzIHRoYXQgYXJlXG4gICAgICAgIC8vICpvdXRzaWRlKiB0aGUgY3VycmVudCBzaGFwZS4gVGhpcyBpcyBpbXBvcnRhbnQgaW4gY2FzZSB0aGUgZmlsbFxuICAgICAgICAvLyBvciBzdHJva2UgY29sb3IgaXMgdHJhbnNsdWNlbnQuIElmIHdlIHdvdWxkbid0IGNsaXAgdG8gb3V0c2lkZVxuICAgICAgICAvLyB0aGUgY3VycmVudCBzaGFwZSwgc29tZSBwaXhlbHMgZnJvbSB0aGUgb3V0bGluZSBzdHJva2Ugb3ZlcmxhcHBlZFxuICAgICAgICAvLyB0aGUgKG5vbi1hbnRpYWxpYXNlZCkgZmlsbC5cbiAgICAgICAgY29uc3QgZGVwdGhNb2RlID0gcGFpbnRlci5kZXB0aE1vZGVGb3JTdWJsYXllcihcbiAgICAgICAgICAgIGxheWVyLmdldFBhaW50UHJvcGVydHkoJ2ZpbGwtb3V0bGluZS1jb2xvcicpID8gMiA6IDAsIERlcHRoTW9kZS5SZWFkT25seSk7XG4gICAgICAgIGRyYXdGaWxsVGlsZXMocGFpbnRlciwgc291cmNlQ2FjaGUsIGxheWVyLCBjb29yZHMsIGRlcHRoTW9kZSwgY29sb3JNb2RlLCB0cnVlKTtcbiAgICB9XG59XG5cbmZ1bmN0aW9uIGRyYXdGaWxsVGlsZXMocGFpbnRlciwgc291cmNlQ2FjaGUsIGxheWVyLCBjb29yZHMsIGRlcHRoTW9kZSwgY29sb3JNb2RlLCBpc091dGxpbmUpIHtcbiAgICBjb25zdCBnbCA9IHBhaW50ZXIuY29udGV4dC5nbDtcblxuICAgIGNvbnN0IHBhdHRlcm5Qcm9wZXJ0eSA9IGxheWVyLnBhaW50LmdldCgnZmlsbC1wYXR0ZXJuJyk7XG4gICAgY29uc3QgaW1hZ2UgPSBwYXR0ZXJuUHJvcGVydHkgJiYgcGF0dGVyblByb3BlcnR5LmNvbnN0YW50T3IoKDE6IGFueSkpO1xuICAgIGNvbnN0IGNyb3NzZmFkZSA9IGxheWVyLmdldENyb3NzZmFkZVBhcmFtZXRlcnMoKTtcbiAgICBsZXQgZHJhd01vZGUsIHByb2dyYW1OYW1lLCB1bmlmb3JtVmFsdWVzLCBpbmRleEJ1ZmZlciwgc2VnbWVudHM7XG5cbiAgICBpZiAoIWlzT3V0bGluZSkge1xuICAgICAgICBwcm9ncmFtTmFtZSA9IGltYWdlID8gJ2ZpbGxQYXR0ZXJuJyA6ICdmaWxsJztcbiAgICAgICAgZHJhd01vZGUgPSBnbC5UUklBTkdMRVM7XG4gICAgfSBlbHNlIHtcbiAgICAgICAgcHJvZ3JhbU5hbWUgPSBpbWFnZSAmJiAhbGF5ZXIuZ2V0UGFpbnRQcm9wZXJ0eSgnZmlsbC1vdXRsaW5lLWNvbG9yJykgPyAnZmlsbE91dGxpbmVQYXR0ZXJuJyA6ICdmaWxsT3V0bGluZSc7XG4gICAgICAgIGRyYXdNb2RlID0gZ2wuTElORVM7XG4gICAgfVxuXG5cbiAgICBmb3IgKGNvbnN0IGNvb3JkIG9mIGNvb3Jkcykge1xuICAgICAgICBjb25zdCB0aWxlID0gc291cmNlQ2FjaGUuZ2V0VGlsZShjb29yZCk7XG4gICAgICAgIGlmIChpbWFnZSAmJiAhdGlsZS5wYXR0ZXJuc0xvYWRlZCgpKSBjb250aW51ZTtcblxuXG4gICAgICAgIGNvbnN0IGJ1Y2tldDogP0ZpbGxCdWNrZXQgPSAodGlsZS5nZXRCdWNrZXQobGF5ZXIpOiBhbnkpO1xuICAgICAgICBpZiAoIWJ1Y2tldCkgY29udGludWU7XG5cbiAgICAgICAgY29uc3QgcHJvZ3JhbUNvbmZpZ3VyYXRpb24gPSBidWNrZXQucHJvZ3JhbUNvbmZpZ3VyYXRpb25zLmdldChsYXllci5pZCk7XG4gICAgICAgIGNvbnN0IHByb2dyYW0gPSBwYWludGVyLnVzZVByb2dyYW0ocHJvZ3JhbU5hbWUsIHByb2dyYW1Db25maWd1cmF0aW9uKTtcblxuICAgICAgICBpZiAoaW1hZ2UpIHtcbiAgICAgICAgICAgIHBhaW50ZXIuY29udGV4dC5hY3RpdmVUZXh0dXJlLnNldChnbC5URVhUVVJFMCk7XG4gICAgICAgICAgICB0aWxlLmltYWdlQXRsYXNUZXh0dXJlLmJpbmQoZ2wuTElORUFSLCBnbC5DTEFNUF9UT19FREdFKTtcbiAgICAgICAgICAgIHByb2dyYW1Db25maWd1cmF0aW9uLnVwZGF0ZVBhdHRlcm5QYWludEJ1ZmZlcnMoY3Jvc3NmYWRlKTtcbiAgICAgICAgfVxuXG4gICAgICAgIGNvbnN0IGNvbnN0YW50UGF0dGVybiA9IHBhdHRlcm5Qcm9wZXJ0eS5jb25zdGFudE9yKG51bGwpO1xuICAgICAgICBpZiAoY29uc3RhbnRQYXR0ZXJuICYmIHRpbGUuaW1hZ2VBdGxhcykge1xuICAgICAgICAgICAgY29uc3QgcG9zVG8gPSB0aWxlLmltYWdlQXRsYXMucGF0dGVyblBvc2l0aW9uc1tjb25zdGFudFBhdHRlcm4udG9dO1xuICAgICAgICAgICAgY29uc3QgcG9zRnJvbSA9IHRpbGUuaW1hZ2VBdGxhcy5wYXR0ZXJuUG9zaXRpb25zW2NvbnN0YW50UGF0dGVybi5mcm9tXTtcbiAgICAgICAgICAgIGlmIChwb3NUbyAmJiBwb3NGcm9tKSBwcm9ncmFtQ29uZmlndXJhdGlvbi5zZXRDb25zdGFudFBhdHRlcm5Qb3NpdGlvbnMocG9zVG8sIHBvc0Zyb20pO1xuICAgICAgICB9XG5cbiAgICAgICAgY29uc3QgdGlsZU1hdHJpeCA9IHBhaW50ZXIudHJhbnNsYXRlUG9zTWF0cml4KGNvb3JkLnBvc01hdHJpeCwgdGlsZSxcbiAgICAgICAgICAgIGxheWVyLnBhaW50LmdldCgnZmlsbC10cmFuc2xhdGUnKSwgbGF5ZXIucGFpbnQuZ2V0KCdmaWxsLXRyYW5zbGF0ZS1hbmNob3InKSk7XG5cbiAgICAgICAgaWYgKCFpc091dGxpbmUpIHtcbiAgICAgICAgICAgIGluZGV4QnVmZmVyID0gYnVja2V0LmluZGV4QnVmZmVyO1xuICAgICAgICAgICAgc2VnbWVudHMgPSBidWNrZXQuc2VnbWVudHM7XG4gICAgICAgICAgICB1bmlmb3JtVmFsdWVzID0gaW1hZ2UgP1xuICAgICAgICAgICAgICAgIGZpbGxQYXR0ZXJuVW5pZm9ybVZhbHVlcyh0aWxlTWF0cml4LCBwYWludGVyLCBjcm9zc2ZhZGUsIHRpbGUpIDpcbiAgICAgICAgICAgICAgICBmaWxsVW5pZm9ybVZhbHVlcyh0aWxlTWF0cml4KTtcbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgIGluZGV4QnVmZmVyID0gYnVja2V0LmluZGV4QnVmZmVyMjtcbiAgICAgICAgICAgIHNlZ21lbnRzID0gYnVja2V0LnNlZ21lbnRzMjtcbiAgICAgICAgICAgIGNvbnN0IGRyYXdpbmdCdWZmZXJTaXplID0gW2dsLmRyYXdpbmdCdWZmZXJXaWR0aCwgZ2wuZHJhd2luZ0J1ZmZlckhlaWdodF07XG4gICAgICAgICAgICB1bmlmb3JtVmFsdWVzID0gKHByb2dyYW1OYW1lID09PSAnZmlsbE91dGxpbmVQYXR0ZXJuJyAmJiBpbWFnZSkgP1xuICAgICAgICAgICAgICAgIGZpbGxPdXRsaW5lUGF0dGVyblVuaWZvcm1WYWx1ZXModGlsZU1hdHJpeCwgcGFpbnRlciwgY3Jvc3NmYWRlLCB0aWxlLCBkcmF3aW5nQnVmZmVyU2l6ZSkgOlxuICAgICAgICAgICAgICAgIGZpbGxPdXRsaW5lVW5pZm9ybVZhbHVlcyh0aWxlTWF0cml4LCBkcmF3aW5nQnVmZmVyU2l6ZSk7XG4gICAgICAgIH1cblxuICAgICAgICBwcm9ncmFtLmRyYXcocGFpbnRlci5jb250ZXh0LCBkcmF3TW9kZSwgZGVwdGhNb2RlLFxuICAgICAgICAgICAgcGFpbnRlci5zdGVuY2lsTW9kZUZvckNsaXBwaW5nKGNvb3JkKSwgY29sb3JNb2RlLCB1bmlmb3JtVmFsdWVzLFxuICAgICAgICAgICAgbGF5ZXIuaWQsIGJ1Y2tldC5sYXlvdXRWZXJ0ZXhCdWZmZXIsIGluZGV4QnVmZmVyLCBzZWdtZW50cyxcbiAgICAgICAgICAgIGxheWVyLnBhaW50LCBwYWludGVyLnRyYW5zZm9ybS56b29tLCBwcm9ncmFtQ29uZmlndXJhdGlvbik7XG4gICAgfVxufVxuIiwiLy8gQGZsb3dcblxuaW1wb3J0IFRleHR1cmUgZnJvbSAnLi90ZXh0dXJlJztcbmltcG9ydCBTdGVuY2lsTW9kZSBmcm9tICcuLi9nbC9zdGVuY2lsX21vZGUnO1xuaW1wb3J0IERlcHRoTW9kZSBmcm9tICcuLi9nbC9kZXB0aF9tb2RlJztcbmltcG9ydCB7XG4gICAgaGlsbHNoYWRlVW5pZm9ybVZhbHVlcyxcbiAgICBoaWxsc2hhZGVVbmlmb3JtUHJlcGFyZVZhbHVlc1xufSBmcm9tICcuL3Byb2dyYW0vaGlsbHNoYWRlX3Byb2dyYW0nO1xuXG5pbXBvcnQgdHlwZSBQYWludGVyIGZyb20gJy4vcGFpbnRlcic7XG5pbXBvcnQgdHlwZSBTb3VyY2VDYWNoZSBmcm9tICcuLi9zb3VyY2Uvc291cmNlX2NhY2hlJztcbmltcG9ydCB0eXBlIEhpbGxzaGFkZVN0eWxlTGF5ZXIgZnJvbSAnLi4vc3R5bGUvc3R5bGVfbGF5ZXIvaGlsbHNoYWRlX3N0eWxlX2xheWVyJztcbmltcG9ydCB0eXBlIHtPdmVyc2NhbGVkVGlsZUlEfSBmcm9tICcuLi9zb3VyY2UvdGlsZV9pZCc7XG5cbmV4cG9ydCBkZWZhdWx0IGRyYXdIaWxsc2hhZGU7XG5cbmZ1bmN0aW9uIGRyYXdIaWxsc2hhZGUocGFpbnRlcjogUGFpbnRlciwgc291cmNlQ2FjaGU6IFNvdXJjZUNhY2hlLCBsYXllcjogSGlsbHNoYWRlU3R5bGVMYXllciwgdGlsZUlEczogQXJyYXk8T3ZlcnNjYWxlZFRpbGVJRD4pIHtcbiAgICBpZiAocGFpbnRlci5yZW5kZXJQYXNzICE9PSAnb2Zmc2NyZWVuJyAmJiBwYWludGVyLnJlbmRlclBhc3MgIT09ICd0cmFuc2x1Y2VudCcpIHJldHVybjtcblxuICAgIGNvbnN0IGNvbnRleHQgPSBwYWludGVyLmNvbnRleHQ7XG4gICAgY29uc3Qgc291cmNlTWF4Wm9vbSA9IHNvdXJjZUNhY2hlLmdldFNvdXJjZSgpLm1heHpvb207XG5cbiAgICBjb25zdCBkZXB0aE1vZGUgPSBwYWludGVyLmRlcHRoTW9kZUZvclN1YmxheWVyKDAsIERlcHRoTW9kZS5SZWFkT25seSk7XG4gICAgY29uc3Qgc3RlbmNpbE1vZGUgPSBTdGVuY2lsTW9kZS5kaXNhYmxlZDtcbiAgICBjb25zdCBjb2xvck1vZGUgPSBwYWludGVyLmNvbG9yTW9kZUZvclJlbmRlclBhc3MoKTtcblxuICAgIGZvciAoY29uc3QgdGlsZUlEIG9mIHRpbGVJRHMpIHtcbiAgICAgICAgY29uc3QgdGlsZSA9IHNvdXJjZUNhY2hlLmdldFRpbGUodGlsZUlEKTtcbiAgICAgICAgaWYgKHRpbGUubmVlZHNIaWxsc2hhZGVQcmVwYXJlICYmIHBhaW50ZXIucmVuZGVyUGFzcyA9PT0gJ29mZnNjcmVlbicpIHtcbiAgICAgICAgICAgIHByZXBhcmVIaWxsc2hhZGUocGFpbnRlciwgdGlsZSwgbGF5ZXIsIHNvdXJjZU1heFpvb20sIGRlcHRoTW9kZSwgc3RlbmNpbE1vZGUsIGNvbG9yTW9kZSk7XG4gICAgICAgICAgICBjb250aW51ZTtcbiAgICAgICAgfSBlbHNlIGlmIChwYWludGVyLnJlbmRlclBhc3MgPT09ICd0cmFuc2x1Y2VudCcpIHtcbiAgICAgICAgICAgIHJlbmRlckhpbGxzaGFkZShwYWludGVyLCB0aWxlLCBsYXllciwgZGVwdGhNb2RlLCBzdGVuY2lsTW9kZSwgY29sb3JNb2RlKTtcbiAgICAgICAgfVxuICAgIH1cblxuICAgIGNvbnRleHQudmlld3BvcnQuc2V0KFswLCAwLCBwYWludGVyLndpZHRoLCBwYWludGVyLmhlaWdodF0pO1xufVxuXG5mdW5jdGlvbiByZW5kZXJIaWxsc2hhZGUocGFpbnRlciwgdGlsZSwgbGF5ZXIsIGRlcHRoTW9kZSwgc3RlbmNpbE1vZGUsIGNvbG9yTW9kZSkge1xuICAgIGNvbnN0IGNvbnRleHQgPSBwYWludGVyLmNvbnRleHQ7XG4gICAgY29uc3QgZ2wgPSBjb250ZXh0LmdsO1xuICAgIGNvbnN0IGZibyA9IHRpbGUuZmJvO1xuICAgIGlmICghZmJvKSByZXR1cm47XG5cbiAgICBjb25zdCBwcm9ncmFtID0gcGFpbnRlci51c2VQcm9ncmFtKCdoaWxsc2hhZGUnKTtcblxuICAgIGNvbnRleHQuYWN0aXZlVGV4dHVyZS5zZXQoZ2wuVEVYVFVSRTApO1xuICAgIGdsLmJpbmRUZXh0dXJlKGdsLlRFWFRVUkVfMkQsIGZiby5jb2xvckF0dGFjaG1lbnQuZ2V0KCkpO1xuXG4gICAgY29uc3QgdW5pZm9ybVZhbHVlcyA9IGhpbGxzaGFkZVVuaWZvcm1WYWx1ZXMocGFpbnRlciwgdGlsZSwgbGF5ZXIpO1xuXG4gICAgaWYgKHRpbGUubWFza2VkQm91bmRzQnVmZmVyICYmIHRpbGUubWFza2VkSW5kZXhCdWZmZXIgJiYgdGlsZS5zZWdtZW50cykge1xuICAgICAgICBwcm9ncmFtLmRyYXcoY29udGV4dCwgZ2wuVFJJQU5HTEVTLCBkZXB0aE1vZGUsIHN0ZW5jaWxNb2RlLCBjb2xvck1vZGUsXG4gICAgICAgICAgICB1bmlmb3JtVmFsdWVzLCBsYXllci5pZCwgdGlsZS5tYXNrZWRCb3VuZHNCdWZmZXIsXG4gICAgICAgICAgICB0aWxlLm1hc2tlZEluZGV4QnVmZmVyLCB0aWxlLnNlZ21lbnRzKTtcbiAgICB9IGVsc2Uge1xuICAgICAgICBwcm9ncmFtLmRyYXcoY29udGV4dCwgZ2wuVFJJQU5HTEVTLCBkZXB0aE1vZGUsIHN0ZW5jaWxNb2RlLCBjb2xvck1vZGUsXG4gICAgICAgICAgICB1bmlmb3JtVmFsdWVzLCBsYXllci5pZCwgcGFpbnRlci5yYXN0ZXJCb3VuZHNCdWZmZXIsXG4gICAgICAgICAgICBwYWludGVyLnF1YWRUcmlhbmdsZUluZGV4QnVmZmVyLCBwYWludGVyLnJhc3RlckJvdW5kc1NlZ21lbnRzKTtcbiAgICB9XG59XG5cbi8vIGhpbGxzaGFkZSByZW5kZXJpbmcgaXMgZG9uZSBpbiB0d28gc3RlcHMuIHRoZSBwcmVwYXJlIHN0ZXAgZmlyc3QgY2FsY3VsYXRlcyB0aGUgc2xvcGUgb2YgdGhlIHRlcnJhaW4gaW4gdGhlIHggYW5kIHlcbi8vIGRpcmVjdGlvbnMgZm9yIGVhY2ggcGl4ZWwsIGFuZCBzYXZlcyB0aG9zZSB2YWx1ZXMgdG8gYSBmcmFtZWJ1ZmZlciB0ZXh0dXJlIGluIHRoZSByIGFuZCBnIGNoYW5uZWxzLlxuZnVuY3Rpb24gcHJlcGFyZUhpbGxzaGFkZShwYWludGVyLCB0aWxlLCBsYXllciwgc291cmNlTWF4Wm9vbSwgZGVwdGhNb2RlLCBzdGVuY2lsTW9kZSwgY29sb3JNb2RlKSB7XG4gICAgY29uc3QgY29udGV4dCA9IHBhaW50ZXIuY29udGV4dDtcbiAgICBjb25zdCBnbCA9IGNvbnRleHQuZ2w7XG4gICAgLy8gZGVjb2RlIHJnYmEgbGV2ZWxzIGJ5IHVzaW5nIGludGVnZXIgb3ZlcmZsb3cgdG8gY29udmVydCBlYWNoIFVpbnQzMkFycmF5IGVsZW1lbnQgLT4gNCBVaW50OEFycmF5IGVsZW1lbnRzLlxuICAgIC8vIGV4LlxuICAgIC8vIFVpbnQzMjpcbiAgICAvLyBiYXNlIDEwIC0gNjczMDhcbiAgICAvLyBiYXNlIDIgLSAwMDAwIDAwMDAgMDAwMCAwMDAxIDAwMDAgMDExMCAxMTEwIDExMDBcbiAgICAvL1xuICAgIC8vIFVpbnQ4OlxuICAgIC8vIGJhc2UgMTAgLSAwLCAxLCA2LCAyMzYgKHRoaXMgb3JkZXIgaXMgcmV2ZXJzZWQgaW4gdGhlIHJlc3VsdGluZyBhcnJheSB2aWEgdGhlIG92ZXJmbG93LlxuICAgIC8vIGZpcnN0IDggYml0cyByZXByZXNlbnQgMjM2LCBzbyB0aGUgciBjb21wb25lbnQgb2YgdGhlIHRleHR1cmUgcGl4ZWwgd2lsbCBiZSAyMzYgZXRjLilcbiAgICAvLyBiYXNlIDIgLSAwMDAwIDAwMDAsIDAwMDAgMDAwMSwgMDAwMCAwMTEwLCAxMTEwIDExMDBcbiAgICBpZiAodGlsZS5kZW0gJiYgdGlsZS5kZW0uZGF0YSkge1xuICAgICAgICBjb25zdCB0aWxlU2l6ZSA9IHRpbGUuZGVtLmRpbTtcblxuICAgICAgICBjb25zdCBwaXhlbERhdGEgPSB0aWxlLmRlbS5nZXRQaXhlbHMoKTtcbiAgICAgICAgY29udGV4dC5hY3RpdmVUZXh0dXJlLnNldChnbC5URVhUVVJFMSk7XG5cbiAgICAgICAgLy8gaWYgVU5QQUNLX1BSRU1VTFRJUExZX0FMUEhBX1dFQkdMIGlzIHNldCB0byB0cnVlIHByaW9yIHRvIGRyYXdIaWxsc2hhZGUgYmVpbmcgY2FsbGVkXG4gICAgICAgIC8vIHRpbGVzIHdpbGwgYXBwZWFyIGJsYW5rLCBiZWNhdXNlIGFzIHlvdSBjYW4gc2VlIGFib3ZlIHRoZSBhbHBoYSB2YWx1ZSBmb3IgdGhlc2UgdGV4dHVyZXNcbiAgICAgICAgLy8gaXMgYWx3YXlzIDBcbiAgICAgICAgY29udGV4dC5waXhlbFN0b3JlVW5wYWNrUHJlbXVsdGlwbHlBbHBoYS5zZXQoZmFsc2UpO1xuICAgICAgICB0aWxlLmRlbVRleHR1cmUgPSB0aWxlLmRlbVRleHR1cmUgfHwgcGFpbnRlci5nZXRUaWxlVGV4dHVyZSh0aWxlLnRpbGVTaXplKTtcbiAgICAgICAgaWYgKHRpbGUuZGVtVGV4dHVyZSkge1xuICAgICAgICAgICAgY29uc3QgZGVtVGV4dHVyZSA9IHRpbGUuZGVtVGV4dHVyZTtcbiAgICAgICAgICAgIGRlbVRleHR1cmUudXBkYXRlKHBpeGVsRGF0YSwgeyBwcmVtdWx0aXBseTogZmFsc2UgfSk7XG4gICAgICAgICAgICBkZW1UZXh0dXJlLmJpbmQoZ2wuTkVBUkVTVCwgZ2wuQ0xBTVBfVE9fRURHRSk7XG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICB0aWxlLmRlbVRleHR1cmUgPSBuZXcgVGV4dHVyZShjb250ZXh0LCBwaXhlbERhdGEsIGdsLlJHQkEsIHsgcHJlbXVsdGlwbHk6IGZhbHNlIH0pO1xuICAgICAgICAgICAgdGlsZS5kZW1UZXh0dXJlLmJpbmQoZ2wuTkVBUkVTVCwgZ2wuQ0xBTVBfVE9fRURHRSk7XG4gICAgICAgIH1cblxuICAgICAgICBjb250ZXh0LmFjdGl2ZVRleHR1cmUuc2V0KGdsLlRFWFRVUkUwKTtcblxuICAgICAgICBsZXQgZmJvID0gdGlsZS5mYm87XG5cbiAgICAgICAgaWYgKCFmYm8pIHtcbiAgICAgICAgICAgIGNvbnN0IHJlbmRlclRleHR1cmUgPSBuZXcgVGV4dHVyZShjb250ZXh0LCB7d2lkdGg6IHRpbGVTaXplLCBoZWlnaHQ6IHRpbGVTaXplLCBkYXRhOiBudWxsfSwgZ2wuUkdCQSk7XG4gICAgICAgICAgICByZW5kZXJUZXh0dXJlLmJpbmQoZ2wuTElORUFSLCBnbC5DTEFNUF9UT19FREdFKTtcblxuICAgICAgICAgICAgZmJvID0gdGlsZS5mYm8gPSBjb250ZXh0LmNyZWF0ZUZyYW1lYnVmZmVyKHRpbGVTaXplLCB0aWxlU2l6ZSk7XG4gICAgICAgICAgICBmYm8uY29sb3JBdHRhY2htZW50LnNldChyZW5kZXJUZXh0dXJlLnRleHR1cmUpO1xuICAgICAgICB9XG5cbiAgICAgICAgY29udGV4dC5iaW5kRnJhbWVidWZmZXIuc2V0KGZiby5mcmFtZWJ1ZmZlcik7XG4gICAgICAgIGNvbnRleHQudmlld3BvcnQuc2V0KFswLCAwLCB0aWxlU2l6ZSwgdGlsZVNpemVdKTtcblxuICAgICAgICBwYWludGVyLnVzZVByb2dyYW0oJ2hpbGxzaGFkZVByZXBhcmUnKS5kcmF3KGNvbnRleHQsIGdsLlRSSUFOR0xFUyxcbiAgICAgICAgICAgIGRlcHRoTW9kZSwgc3RlbmNpbE1vZGUsIGNvbG9yTW9kZSxcbiAgICAgICAgICAgIGhpbGxzaGFkZVVuaWZvcm1QcmVwYXJlVmFsdWVzKHRpbGUsIHNvdXJjZU1heFpvb20pLFxuICAgICAgICAgICAgbGF5ZXIuaWQsIHBhaW50ZXIucmFzdGVyQm91bmRzQnVmZmVyLFxuICAgICAgICAgICAgcGFpbnRlci5xdWFkVHJpYW5nbGVJbmRleEJ1ZmZlciwgcGFpbnRlci5yYXN0ZXJCb3VuZHNTZWdtZW50cyk7XG5cbiAgICAgICAgdGlsZS5uZWVkc0hpbGxzaGFkZVByZXBhcmUgPSBmYWxzZTtcbiAgICB9XG59XG4iLCIvLyBAZmxvd1xuXG5pbXBvcnQgeyBjbGFtcCB9IGZyb20gJy4uL3V0aWwvdXRpbCc7XG5cbmltcG9ydCBJbWFnZVNvdXJjZSBmcm9tICcuLi9zb3VyY2UvaW1hZ2Vfc291cmNlJztcbmltcG9ydCBicm93c2VyIGZyb20gJy4uL3V0aWwvYnJvd3Nlcic7XG5pbXBvcnQgU3RlbmNpbE1vZGUgZnJvbSAnLi4vZ2wvc3RlbmNpbF9tb2RlJztcbmltcG9ydCBEZXB0aE1vZGUgZnJvbSAnLi4vZ2wvZGVwdGhfbW9kZSc7XG5pbXBvcnQgeyByYXN0ZXJVbmlmb3JtVmFsdWVzIH0gZnJvbSAnLi9wcm9ncmFtL3Jhc3Rlcl9wcm9ncmFtJztcblxuaW1wb3J0IHR5cGUgUGFpbnRlciBmcm9tICcuL3BhaW50ZXInO1xuaW1wb3J0IHR5cGUgU291cmNlQ2FjaGUgZnJvbSAnLi4vc291cmNlL3NvdXJjZV9jYWNoZSc7XG5pbXBvcnQgdHlwZSBSYXN0ZXJTdHlsZUxheWVyIGZyb20gJy4uL3N0eWxlL3N0eWxlX2xheWVyL3Jhc3Rlcl9zdHlsZV9sYXllcic7XG5pbXBvcnQgdHlwZSB7T3ZlcnNjYWxlZFRpbGVJRH0gZnJvbSAnLi4vc291cmNlL3RpbGVfaWQnO1xuXG5leHBvcnQgZGVmYXVsdCBkcmF3UmFzdGVyO1xuXG5mdW5jdGlvbiBkcmF3UmFzdGVyKHBhaW50ZXI6IFBhaW50ZXIsIHNvdXJjZUNhY2hlOiBTb3VyY2VDYWNoZSwgbGF5ZXI6IFJhc3RlclN0eWxlTGF5ZXIsIGNvb3JkczogQXJyYXk8T3ZlcnNjYWxlZFRpbGVJRD4pIHtcbiAgICBpZiAocGFpbnRlci5yZW5kZXJQYXNzICE9PSAndHJhbnNsdWNlbnQnKSByZXR1cm47XG4gICAgaWYgKGxheWVyLnBhaW50LmdldCgncmFzdGVyLW9wYWNpdHknKSA9PT0gMCkgcmV0dXJuO1xuXG4gICAgY29uc3QgY29udGV4dCA9IHBhaW50ZXIuY29udGV4dDtcbiAgICBjb25zdCBnbCA9IGNvbnRleHQuZ2w7XG4gICAgY29uc3Qgc291cmNlID0gc291cmNlQ2FjaGUuZ2V0U291cmNlKCk7XG4gICAgY29uc3QgcHJvZ3JhbSA9IHBhaW50ZXIudXNlUHJvZ3JhbSgncmFzdGVyJyk7XG5cbiAgICBjb25zdCBzdGVuY2lsTW9kZSA9IFN0ZW5jaWxNb2RlLmRpc2FibGVkO1xuICAgIGNvbnN0IGNvbG9yTW9kZSA9IHBhaW50ZXIuY29sb3JNb2RlRm9yUmVuZGVyUGFzcygpO1xuICAgIGNvbnN0IG1pblRpbGVaID0gY29vcmRzLmxlbmd0aCAmJiBjb29yZHNbMF0ub3ZlcnNjYWxlZFo7XG5cbiAgICBmb3IgKGNvbnN0IGNvb3JkIG9mIGNvb3Jkcykge1xuICAgICAgICAvLyBTZXQgdGhlIGxvd2VyIHpvb20gbGV2ZWwgdG8gc3VibGF5ZXIgMCwgYW5kIGhpZ2hlciB6b29tIGxldmVscyB0byBoaWdoZXIgc3VibGF5ZXJzXG4gICAgICAgIC8vIFVzZSBnbC5MRVNTIHRvIHByZXZlbnQgZG91YmxlIGRyYXdpbmcgaW4gYXJlYXMgd2hlcmUgdGlsZXMgb3ZlcmxhcC5cbiAgICAgICAgY29uc3QgZGVwdGhNb2RlID0gcGFpbnRlci5kZXB0aE1vZGVGb3JTdWJsYXllcihjb29yZC5vdmVyc2NhbGVkWiAtIG1pblRpbGVaLFxuICAgICAgICAgICAgbGF5ZXIucGFpbnQuZ2V0KCdyYXN0ZXItb3BhY2l0eScpID09PSAxID8gRGVwdGhNb2RlLlJlYWRXcml0ZSA6IERlcHRoTW9kZS5SZWFkT25seSwgZ2wuTEVTUyk7XG5cbiAgICAgICAgY29uc3QgdGlsZSA9IHNvdXJjZUNhY2hlLmdldFRpbGUoY29vcmQpO1xuICAgICAgICBjb25zdCBwb3NNYXRyaXggPSBwYWludGVyLnRyYW5zZm9ybS5jYWxjdWxhdGVQb3NNYXRyaXgoY29vcmQudG9VbndyYXBwZWQoKSwgdHJ1ZSk7XG5cbiAgICAgICAgdGlsZS5yZWdpc3RlckZhZGVEdXJhdGlvbihsYXllci5wYWludC5nZXQoJ3Jhc3Rlci1mYWRlLWR1cmF0aW9uJykpO1xuXG4gICAgICAgIGNvbnN0IHBhcmVudFRpbGUgPSBzb3VyY2VDYWNoZS5maW5kTG9hZGVkUGFyZW50KGNvb3JkLCAwKSxcbiAgICAgICAgICAgIGZhZGUgPSBnZXRGYWRlVmFsdWVzKHRpbGUsIHBhcmVudFRpbGUsIHNvdXJjZUNhY2hlLCBsYXllciwgcGFpbnRlci50cmFuc2Zvcm0pO1xuXG4gICAgICAgIGxldCBwYXJlbnRTY2FsZUJ5LCBwYXJlbnRUTDtcblxuICAgICAgICBjb25zdCB0ZXh0dXJlRmlsdGVyID0gbGF5ZXIucGFpbnQuZ2V0KCdyYXN0ZXItcmVzYW1wbGluZycpID09PSAnbmVhcmVzdCcgPyAgZ2wuTkVBUkVTVCA6IGdsLkxJTkVBUjtcblxuICAgICAgICBjb250ZXh0LmFjdGl2ZVRleHR1cmUuc2V0KGdsLlRFWFRVUkUwKTtcbiAgICAgICAgdGlsZS50ZXh0dXJlLmJpbmQodGV4dHVyZUZpbHRlciwgZ2wuQ0xBTVBfVE9fRURHRSwgZ2wuTElORUFSX01JUE1BUF9ORUFSRVNUKTtcblxuICAgICAgICBjb250ZXh0LmFjdGl2ZVRleHR1cmUuc2V0KGdsLlRFWFRVUkUxKTtcblxuICAgICAgICBpZiAocGFyZW50VGlsZSkge1xuICAgICAgICAgICAgcGFyZW50VGlsZS50ZXh0dXJlLmJpbmQodGV4dHVyZUZpbHRlciwgZ2wuQ0xBTVBfVE9fRURHRSwgZ2wuTElORUFSX01JUE1BUF9ORUFSRVNUKTtcbiAgICAgICAgICAgIHBhcmVudFNjYWxlQnkgPSBNYXRoLnBvdygyLCBwYXJlbnRUaWxlLnRpbGVJRC5vdmVyc2NhbGVkWiAtIHRpbGUudGlsZUlELm92ZXJzY2FsZWRaKTtcbiAgICAgICAgICAgIHBhcmVudFRMID0gW3RpbGUudGlsZUlELmNhbm9uaWNhbC54ICogcGFyZW50U2NhbGVCeSAlIDEsIHRpbGUudGlsZUlELmNhbm9uaWNhbC55ICogcGFyZW50U2NhbGVCeSAlIDFdO1xuXG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICB0aWxlLnRleHR1cmUuYmluZCh0ZXh0dXJlRmlsdGVyLCBnbC5DTEFNUF9UT19FREdFLCBnbC5MSU5FQVJfTUlQTUFQX05FQVJFU1QpO1xuICAgICAgICB9XG5cbiAgICAgICAgY29uc3QgdW5pZm9ybVZhbHVlcyA9IHJhc3RlclVuaWZvcm1WYWx1ZXMocG9zTWF0cml4LCBwYXJlbnRUTCB8fCBbMCwgMF0sIHBhcmVudFNjYWxlQnkgfHwgMSwgZmFkZSwgbGF5ZXIpO1xuXG4gICAgICAgIGlmIChzb3VyY2UgaW5zdGFuY2VvZiBJbWFnZVNvdXJjZSkge1xuICAgICAgICAgICAgcHJvZ3JhbS5kcmF3KGNvbnRleHQsIGdsLlRSSUFOR0xFUywgZGVwdGhNb2RlLCBzdGVuY2lsTW9kZSwgY29sb3JNb2RlLFxuICAgICAgICAgICAgICAgIHVuaWZvcm1WYWx1ZXMsIGxheWVyLmlkLCBzb3VyY2UuYm91bmRzQnVmZmVyLFxuICAgICAgICAgICAgICAgIHBhaW50ZXIucXVhZFRyaWFuZ2xlSW5kZXhCdWZmZXIsIHNvdXJjZS5ib3VuZHNTZWdtZW50cyk7XG4gICAgICAgIH0gZWxzZSBpZiAodGlsZS5tYXNrZWRCb3VuZHNCdWZmZXIgJiYgdGlsZS5tYXNrZWRJbmRleEJ1ZmZlciAmJiB0aWxlLnNlZ21lbnRzKSB7XG4gICAgICAgICAgICBwcm9ncmFtLmRyYXcoY29udGV4dCwgZ2wuVFJJQU5HTEVTLCBkZXB0aE1vZGUsIHN0ZW5jaWxNb2RlLCBjb2xvck1vZGUsXG4gICAgICAgICAgICAgICAgdW5pZm9ybVZhbHVlcywgbGF5ZXIuaWQsIHRpbGUubWFza2VkQm91bmRzQnVmZmVyLFxuICAgICAgICAgICAgICAgIHRpbGUubWFza2VkSW5kZXhCdWZmZXIsIHRpbGUuc2VnbWVudHMsIGxheWVyLnBhaW50LFxuICAgICAgICAgICAgICAgIHBhaW50ZXIudHJhbnNmb3JtLnpvb20pO1xuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgcHJvZ3JhbS5kcmF3KGNvbnRleHQsIGdsLlRSSUFOR0xFUywgZGVwdGhNb2RlLCBzdGVuY2lsTW9kZSwgY29sb3JNb2RlLFxuICAgICAgICAgICAgICAgIHVuaWZvcm1WYWx1ZXMsIGxheWVyLmlkLCBwYWludGVyLnJhc3RlckJvdW5kc0J1ZmZlcixcbiAgICAgICAgICAgICAgICBwYWludGVyLnF1YWRUcmlhbmdsZUluZGV4QnVmZmVyLCBwYWludGVyLnJhc3RlckJvdW5kc1NlZ21lbnRzKTtcbiAgICAgICAgfVxuICAgIH1cbn1cblxuZnVuY3Rpb24gZ2V0RmFkZVZhbHVlcyh0aWxlLCBwYXJlbnRUaWxlLCBzb3VyY2VDYWNoZSwgbGF5ZXIsIHRyYW5zZm9ybSkge1xuICAgIGNvbnN0IGZhZGVEdXJhdGlvbiA9IGxheWVyLnBhaW50LmdldCgncmFzdGVyLWZhZGUtZHVyYXRpb24nKTtcblxuICAgIGlmIChmYWRlRHVyYXRpb24gPiAwKSB7XG4gICAgICAgIGNvbnN0IG5vdyA9IGJyb3dzZXIubm93KCk7XG4gICAgICAgIGNvbnN0IHNpbmNlVGlsZSA9IChub3cgLSB0aWxlLnRpbWVBZGRlZCkgLyBmYWRlRHVyYXRpb247XG4gICAgICAgIGNvbnN0IHNpbmNlUGFyZW50ID0gcGFyZW50VGlsZSA/IChub3cgLSBwYXJlbnRUaWxlLnRpbWVBZGRlZCkgLyBmYWRlRHVyYXRpb24gOiAtMTtcblxuICAgICAgICBjb25zdCBzb3VyY2UgPSBzb3VyY2VDYWNoZS5nZXRTb3VyY2UoKTtcbiAgICAgICAgY29uc3QgaWRlYWxaID0gdHJhbnNmb3JtLmNvdmVyaW5nWm9vbUxldmVsKHtcbiAgICAgICAgICAgIHRpbGVTaXplOiBzb3VyY2UudGlsZVNpemUsXG4gICAgICAgICAgICByb3VuZFpvb206IHNvdXJjZS5yb3VuZFpvb21cbiAgICAgICAgfSk7XG5cbiAgICAgICAgLy8gaWYgbm8gcGFyZW50IG9yIHBhcmVudCBpcyBvbGRlciwgZmFkZSBpbjsgaWYgcGFyZW50IGlzIHlvdW5nZXIsIGZhZGUgb3V0XG4gICAgICAgIGNvbnN0IGZhZGVJbiA9ICFwYXJlbnRUaWxlIHx8IE1hdGguYWJzKHBhcmVudFRpbGUudGlsZUlELm92ZXJzY2FsZWRaIC0gaWRlYWxaKSA+IE1hdGguYWJzKHRpbGUudGlsZUlELm92ZXJzY2FsZWRaIC0gaWRlYWxaKTtcblxuICAgICAgICBjb25zdCBjaGlsZE9wYWNpdHkgPSAoZmFkZUluICYmIHRpbGUucmVmcmVzaGVkVXBvbkV4cGlyYXRpb24pID8gMSA6IGNsYW1wKGZhZGVJbiA/IHNpbmNlVGlsZSA6IDEgLSBzaW5jZVBhcmVudCwgMCwgMSk7XG5cbiAgICAgICAgLy8gd2UgZG9uJ3QgY3Jvc3NmYWRlIHRpbGVzIHRoYXQgd2VyZSBqdXN0IHJlZnJlc2hlZCB1cG9uIGV4cGlyaW5nOlxuICAgICAgICAvLyBvbmNlIHRoZXkncmUgb2xkIGVub3VnaCB0byBwYXNzIHRoZSBjcm9zc2ZhZGluZyB0aHJlc2hvbGRcbiAgICAgICAgLy8gKGZhZGVEdXJhdGlvbiksIHVuc2V0IHRoZSBgcmVmcmVzaGVkVXBvbkV4cGlyYXRpb25gIGZsYWcgc28gd2UgZG9uJ3RcbiAgICAgICAgLy8gaW5jb3JyZWN0bHkgZmFpbCB0byBjcm9zc2ZhZGUgdGhlbSB3aGVuIHpvb21pbmdcbiAgICAgICAgaWYgKHRpbGUucmVmcmVzaGVkVXBvbkV4cGlyYXRpb24gJiYgc2luY2VUaWxlID49IDEpIHRpbGUucmVmcmVzaGVkVXBvbkV4cGlyYXRpb24gPSBmYWxzZTtcblxuICAgICAgICBpZiAocGFyZW50VGlsZSkge1xuICAgICAgICAgICAgcmV0dXJuIHtcbiAgICAgICAgICAgICAgICBvcGFjaXR5OiAxLFxuICAgICAgICAgICAgICAgIG1peDogMSAtIGNoaWxkT3BhY2l0eVxuICAgICAgICAgICAgfTtcbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgIHJldHVybiB7XG4gICAgICAgICAgICAgICAgb3BhY2l0eTogY2hpbGRPcGFjaXR5LFxuICAgICAgICAgICAgICAgIG1peDogMFxuICAgICAgICAgICAgfTtcbiAgICAgICAgfVxuICAgIH0gZWxzZSB7XG4gICAgICAgIHJldHVybiB7XG4gICAgICAgICAgICBvcGFjaXR5OiAxLFxuICAgICAgICAgICAgbWl4OiAwXG4gICAgICAgIH07XG4gICAgfVxufVxuIiwiLy8gQGZsb3dcblxuaW1wb3J0IHsgbWF0NCB9IGZyb20gJ2dsLW1hdHJpeCc7XG5pbXBvcnQgRVhURU5UIGZyb20gJy4uL2RhdGEvZXh0ZW50JztcbmltcG9ydCB7IFBvc0FycmF5IH0gZnJvbSAnLi4vZGF0YS9hcnJheV90eXBlcyc7XG5pbXBvcnQgeyBMaW5lSW5kZXhBcnJheSB9IGZyb20gJy4uL2RhdGEvaW5kZXhfYXJyYXlfdHlwZSc7XG5pbXBvcnQgcG9zQXR0cmlidXRlcyBmcm9tICcuLi9kYXRhL3Bvc19hdHRyaWJ1dGVzJztcbmltcG9ydCBTZWdtZW50VmVjdG9yIGZyb20gJy4uL2RhdGEvc2VnbWVudCc7XG5pbXBvcnQgRGVwdGhNb2RlIGZyb20gJy4uL2dsL2RlcHRoX21vZGUnO1xuaW1wb3J0IFN0ZW5jaWxNb2RlIGZyb20gJy4uL2dsL3N0ZW5jaWxfbW9kZSc7XG5pbXBvcnQgeyBkZWJ1Z1VuaWZvcm1WYWx1ZXMgfSBmcm9tICcuL3Byb2dyYW0vZGVidWdfcHJvZ3JhbSc7XG5pbXBvcnQgQ29sb3IgZnJvbSAnLi4vc3R5bGUtc3BlYy91dGlsL2NvbG9yJztcblxuaW1wb3J0IHR5cGUgUGFpbnRlciBmcm9tICcuL3BhaW50ZXInO1xuaW1wb3J0IHR5cGUgU291cmNlQ2FjaGUgZnJvbSAnLi4vc291cmNlL3NvdXJjZV9jYWNoZSc7XG5pbXBvcnQgdHlwZSB7T3ZlcnNjYWxlZFRpbGVJRH0gZnJvbSAnLi4vc291cmNlL3RpbGVfaWQnO1xuXG5leHBvcnQgZGVmYXVsdCBkcmF3RGVidWc7XG5cbmZ1bmN0aW9uIGRyYXdEZWJ1ZyhwYWludGVyOiBQYWludGVyLCBzb3VyY2VDYWNoZTogU291cmNlQ2FjaGUsIGNvb3JkczogQXJyYXk8T3ZlcnNjYWxlZFRpbGVJRD4pIHtcbiAgICBmb3IgKGxldCBpID0gMDsgaSA8IGNvb3Jkcy5sZW5ndGg7IGkrKykge1xuICAgICAgICBkcmF3RGVidWdUaWxlKHBhaW50ZXIsIHNvdXJjZUNhY2hlLCBjb29yZHNbaV0pO1xuICAgIH1cbn1cblxuZnVuY3Rpb24gZHJhd0RlYnVnVGlsZShwYWludGVyLCBzb3VyY2VDYWNoZSwgY29vcmQpIHtcbiAgICBjb25zdCBjb250ZXh0ID0gcGFpbnRlci5jb250ZXh0O1xuICAgIGNvbnN0IGdsID0gY29udGV4dC5nbDtcblxuICAgIGNvbnN0IHBvc01hdHJpeCA9IGNvb3JkLnBvc01hdHJpeDtcbiAgICBjb25zdCBwcm9ncmFtID0gcGFpbnRlci51c2VQcm9ncmFtKCdkZWJ1ZycpO1xuXG4gICAgY29uc3QgZGVwdGhNb2RlID0gRGVwdGhNb2RlLmRpc2FibGVkO1xuICAgIGNvbnN0IHN0ZW5jaWxNb2RlID0gU3RlbmNpbE1vZGUuZGlzYWJsZWQ7XG4gICAgY29uc3QgY29sb3JNb2RlID0gcGFpbnRlci5jb2xvck1vZGVGb3JSZW5kZXJQYXNzKCk7XG4gICAgY29uc3QgaWQgPSAnJGRlYnVnJztcblxuICAgIHByb2dyYW0uZHJhdyhjb250ZXh0LCBnbC5MSU5FX1NUUklQLCBkZXB0aE1vZGUsIHN0ZW5jaWxNb2RlLCBjb2xvck1vZGUsXG4gICAgICAgIGRlYnVnVW5pZm9ybVZhbHVlcyhwb3NNYXRyaXgsIENvbG9yLnJlZCksIGlkLFxuICAgICAgICBwYWludGVyLmRlYnVnQnVmZmVyLCBwYWludGVyLnRpbGVCb3JkZXJJbmRleEJ1ZmZlciwgcGFpbnRlci5kZWJ1Z1NlZ21lbnRzKTtcblxuICAgIGNvbnN0IHZlcnRpY2VzID0gY3JlYXRlVGV4dFZlcnRpY2VzKGNvb3JkLnRvU3RyaW5nKCksIDUwLCAyMDAsIDUpO1xuICAgIGNvbnN0IGRlYnVnVGV4dEFycmF5ID0gbmV3IFBvc0FycmF5KCk7XG4gICAgY29uc3QgZGVidWdUZXh0SW5kaWNlcyA9IG5ldyBMaW5lSW5kZXhBcnJheSgpO1xuICAgIGZvciAobGV0IHYgPSAwOyB2IDwgdmVydGljZXMubGVuZ3RoOyB2ICs9IDIpIHtcbiAgICAgICAgZGVidWdUZXh0QXJyYXkuZW1wbGFjZUJhY2sodmVydGljZXNbdl0sIHZlcnRpY2VzW3YgKyAxXSk7XG4gICAgICAgIGRlYnVnVGV4dEluZGljZXMuZW1wbGFjZUJhY2sodiwgdiArIDEpO1xuICAgIH1cbiAgICBjb25zdCBkZWJ1Z1RleHRCdWZmZXIgPSBjb250ZXh0LmNyZWF0ZVZlcnRleEJ1ZmZlcihkZWJ1Z1RleHRBcnJheSwgcG9zQXR0cmlidXRlcy5tZW1iZXJzKTtcbiAgICBjb25zdCBkZWJ1Z1RleHRJbmRleEJ1ZmZlciA9IGNvbnRleHQuY3JlYXRlSW5kZXhCdWZmZXIoZGVidWdUZXh0SW5kaWNlcyk7XG4gICAgY29uc3QgZGVidWdUZXh0U2VnbWVudCA9IFNlZ21lbnRWZWN0b3Iuc2ltcGxlU2VnbWVudCgwLCAwLCBkZWJ1Z1RleHRBcnJheS5sZW5ndGggLyAyLCBkZWJ1Z1RleHRBcnJheS5sZW5ndGggLyAyKTtcblxuICAgIC8vIERyYXcgdGhlIGhhbG8gd2l0aCBtdWx0aXBsZSAxcHggbGluZXMgaW5zdGVhZCBvZiBvbmUgd2lkZXIgbGluZSBiZWNhdXNlXG4gICAgLy8gdGhlIGdsIHNwZWMgZG9lc24ndCBndWFyYW50ZWUgc3VwcG9ydCBmb3IgbGluZXMgd2l0aCB3aWR0aCA+IDEuXG4gICAgY29uc3QgdGlsZVNpemUgPSBzb3VyY2VDYWNoZS5nZXRUaWxlKGNvb3JkKS50aWxlU2l6ZTtcbiAgICBjb25zdCBvbmVQaXhlbCA9IEVYVEVOVCAvIChNYXRoLnBvdygyLCBwYWludGVyLnRyYW5zZm9ybS56b29tIC0gY29vcmQub3ZlcnNjYWxlZFopICogdGlsZVNpemUpO1xuICAgIGNvbnN0IHRyYW5zbGF0aW9ucyA9IFtbLTEsIC0xXSwgWy0xLCAxXSwgWzEsIC0xXSwgWzEsIDFdXTtcbiAgICBmb3IgKGxldCBpID0gMDsgaSA8IHRyYW5zbGF0aW9ucy5sZW5ndGg7IGkrKykge1xuICAgICAgICBjb25zdCB0cmFuc2xhdGlvbiA9IHRyYW5zbGF0aW9uc1tpXTtcblxuICAgICAgICBwcm9ncmFtLmRyYXcoY29udGV4dCwgZ2wuTElORVMsIGRlcHRoTW9kZSwgc3RlbmNpbE1vZGUsIGNvbG9yTW9kZSxcbiAgICAgICAgICAgIGRlYnVnVW5pZm9ybVZhbHVlcyhcbiAgICAgICAgICAgICAgICBtYXQ0LnRyYW5zbGF0ZShbXSwgcG9zTWF0cml4LCBbXG4gICAgICAgICAgICAgICAgICAgIG9uZVBpeGVsICogdHJhbnNsYXRpb25bMF0sXG4gICAgICAgICAgICAgICAgICAgIG9uZVBpeGVsICogdHJhbnNsYXRpb25bMV0sIDBdKSxcbiAgICAgICAgICAgICAgICBDb2xvci53aGl0ZSksXG4gICAgICAgICAgICBpZCwgZGVidWdUZXh0QnVmZmVyLCBkZWJ1Z1RleHRJbmRleEJ1ZmZlciwgZGVidWdUZXh0U2VnbWVudCk7XG4gICAgfVxuXG4gICAgcHJvZ3JhbS5kcmF3KGNvbnRleHQsIGdsLkxJTkVTLCBkZXB0aE1vZGUsIHN0ZW5jaWxNb2RlLCBjb2xvck1vZGUsXG4gICAgICAgIGRlYnVnVW5pZm9ybVZhbHVlcyhwb3NNYXRyaXgsIENvbG9yLmJsYWNrKSwgaWQsXG4gICAgICAgIGRlYnVnVGV4dEJ1ZmZlciwgZGVidWdUZXh0SW5kZXhCdWZmZXIsIGRlYnVnVGV4dFNlZ21lbnQpO1xufVxuXG4vLyBGb250IGRhdGEgRnJvbSBIZXJzaGV5IFNpbXBsZXggRm9udFxuLy8gaHR0cDovL3BhdWxib3Vya2UubmV0L2RhdGFmb3JtYXRzL2hlcnNoZXkvXG5jb25zdCBzaW1wbGV4Rm9udCA9IHtcbiAgICBcIiBcIjogWzE2LCBbXV0sXG4gICAgXCIhXCI6IFsxMCwgWzUsIDIxLCA1LCA3LCAtMSwgLTEsIDUsIDIsIDQsIDEsIDUsIDAsIDYsIDEsIDUsIDJdXSxcbiAgICBcIlxcXCJcIjogWzE2LCBbNCwgMjEsIDQsIDE0LCAtMSwgLTEsIDEyLCAyMSwgMTIsIDE0XV0sXG4gICAgXCIjXCI6IFsyMSwgWzExLCAyNSwgNCwgLTcsIC0xLCAtMSwgMTcsIDI1LCAxMCwgLTcsIC0xLCAtMSwgNCwgMTIsIDE4LCAxMiwgLTEsIC0xLCAzLCA2LCAxNywgNl1dLFxuICAgIFwiJFwiOiBbMjAsIFs4LCAyNSwgOCwgLTQsIC0xLCAtMSwgMTIsIDI1LCAxMiwgLTQsIC0xLCAtMSwgMTcsIDE4LCAxNSwgMjAsIDEyLCAyMSwgOCwgMjEsIDUsIDIwLCAzLCAxOCwgMywgMTYsIDQsIDE0LCA1LCAxMywgNywgMTIsIDEzLCAxMCwgMTUsIDksIDE2LCA4LCAxNywgNiwgMTcsIDMsIDE1LCAxLCAxMiwgMCwgOCwgMCwgNSwgMSwgMywgM11dLFxuICAgIFwiJVwiOiBbMjQsIFsyMSwgMjEsIDMsIDAsIC0xLCAtMSwgOCwgMjEsIDEwLCAxOSwgMTAsIDE3LCA5LCAxNSwgNywgMTQsIDUsIDE0LCAzLCAxNiwgMywgMTgsIDQsIDIwLCA2LCAyMSwgOCwgMjEsIDEwLCAyMCwgMTMsIDE5LCAxNiwgMTksIDE5LCAyMCwgMjEsIDIxLCAtMSwgLTEsIDE3LCA3LCAxNSwgNiwgMTQsIDQsIDE0LCAyLCAxNiwgMCwgMTgsIDAsIDIwLCAxLCAyMSwgMywgMjEsIDUsIDE5LCA3LCAxNywgN11dLFxuICAgIFwiJlwiOiBbMjYsIFsyMywgMTIsIDIzLCAxMywgMjIsIDE0LCAyMSwgMTQsIDIwLCAxMywgMTksIDExLCAxNywgNiwgMTUsIDMsIDEzLCAxLCAxMSwgMCwgNywgMCwgNSwgMSwgNCwgMiwgMywgNCwgMywgNiwgNCwgOCwgNSwgOSwgMTIsIDEzLCAxMywgMTQsIDE0LCAxNiwgMTQsIDE4LCAxMywgMjAsIDExLCAyMSwgOSwgMjAsIDgsIDE4LCA4LCAxNiwgOSwgMTMsIDExLCAxMCwgMTYsIDMsIDE4LCAxLCAyMCwgMCwgMjIsIDAsIDIzLCAxLCAyMywgMl1dLFxuICAgIFwiJ1wiOiBbMTAsIFs1LCAxOSwgNCwgMjAsIDUsIDIxLCA2LCAyMCwgNiwgMTgsIDUsIDE2LCA0LCAxNV1dLFxuICAgIFwiKFwiOiBbMTQsIFsxMSwgMjUsIDksIDIzLCA3LCAyMCwgNSwgMTYsIDQsIDExLCA0LCA3LCA1LCAyLCA3LCAtMiwgOSwgLTUsIDExLCAtN11dLFxuICAgIFwiKVwiOiBbMTQsIFszLCAyNSwgNSwgMjMsIDcsIDIwLCA5LCAxNiwgMTAsIDExLCAxMCwgNywgOSwgMiwgNywgLTIsIDUsIC01LCAzLCAtN11dLFxuICAgIFwiKlwiOiBbMTYsIFs4LCAyMSwgOCwgOSwgLTEsIC0xLCAzLCAxOCwgMTMsIDEyLCAtMSwgLTEsIDEzLCAxOCwgMywgMTJdXSxcbiAgICBcIitcIjogWzI2LCBbMTMsIDE4LCAxMywgMCwgLTEsIC0xLCA0LCA5LCAyMiwgOV1dLFxuICAgIFwiLFwiOiBbMTAsIFs2LCAxLCA1LCAwLCA0LCAxLCA1LCAyLCA2LCAxLCA2LCAtMSwgNSwgLTMsIDQsIC00XV0sXG4gICAgXCItXCI6IFsyNiwgWzQsIDksIDIyLCA5XV0sXG4gICAgXCIuXCI6IFsxMCwgWzUsIDIsIDQsIDEsIDUsIDAsIDYsIDEsIDUsIDJdXSxcbiAgICBcIi9cIjogWzIyLCBbMjAsIDI1LCAyLCAtN11dLFxuICAgIFwiMFwiOiBbMjAsIFs5LCAyMSwgNiwgMjAsIDQsIDE3LCAzLCAxMiwgMywgOSwgNCwgNCwgNiwgMSwgOSwgMCwgMTEsIDAsIDE0LCAxLCAxNiwgNCwgMTcsIDksIDE3LCAxMiwgMTYsIDE3LCAxNCwgMjAsIDExLCAyMSwgOSwgMjFdXSxcbiAgICBcIjFcIjogWzIwLCBbNiwgMTcsIDgsIDE4LCAxMSwgMjEsIDExLCAwXV0sXG4gICAgXCIyXCI6IFsyMCwgWzQsIDE2LCA0LCAxNywgNSwgMTksIDYsIDIwLCA4LCAyMSwgMTIsIDIxLCAxNCwgMjAsIDE1LCAxOSwgMTYsIDE3LCAxNiwgMTUsIDE1LCAxMywgMTMsIDEwLCAzLCAwLCAxNywgMF1dLFxuICAgIFwiM1wiOiBbMjAsIFs1LCAyMSwgMTYsIDIxLCAxMCwgMTMsIDEzLCAxMywgMTUsIDEyLCAxNiwgMTEsIDE3LCA4LCAxNywgNiwgMTYsIDMsIDE0LCAxLCAxMSwgMCwgOCwgMCwgNSwgMSwgNCwgMiwgMywgNF1dLFxuICAgIFwiNFwiOiBbMjAsIFsxMywgMjEsIDMsIDcsIDE4LCA3LCAtMSwgLTEsIDEzLCAyMSwgMTMsIDBdXSxcbiAgICBcIjVcIjogWzIwLCBbMTUsIDIxLCA1LCAyMSwgNCwgMTIsIDUsIDEzLCA4LCAxNCwgMTEsIDE0LCAxNCwgMTMsIDE2LCAxMSwgMTcsIDgsIDE3LCA2LCAxNiwgMywgMTQsIDEsIDExLCAwLCA4LCAwLCA1LCAxLCA0LCAyLCAzLCA0XV0sXG4gICAgXCI2XCI6IFsyMCwgWzE2LCAxOCwgMTUsIDIwLCAxMiwgMjEsIDEwLCAyMSwgNywgMjAsIDUsIDE3LCA0LCAxMiwgNCwgNywgNSwgMywgNywgMSwgMTAsIDAsIDExLCAwLCAxNCwgMSwgMTYsIDMsIDE3LCA2LCAxNywgNywgMTYsIDEwLCAxNCwgMTIsIDExLCAxMywgMTAsIDEzLCA3LCAxMiwgNSwgMTAsIDQsIDddXSxcbiAgICBcIjdcIjogWzIwLCBbMTcsIDIxLCA3LCAwLCAtMSwgLTEsIDMsIDIxLCAxNywgMjFdXSxcbiAgICBcIjhcIjogWzIwLCBbOCwgMjEsIDUsIDIwLCA0LCAxOCwgNCwgMTYsIDUsIDE0LCA3LCAxMywgMTEsIDEyLCAxNCwgMTEsIDE2LCA5LCAxNywgNywgMTcsIDQsIDE2LCAyLCAxNSwgMSwgMTIsIDAsIDgsIDAsIDUsIDEsIDQsIDIsIDMsIDQsIDMsIDcsIDQsIDksIDYsIDExLCA5LCAxMiwgMTMsIDEzLCAxNSwgMTQsIDE2LCAxNiwgMTYsIDE4LCAxNSwgMjAsIDEyLCAyMSwgOCwgMjFdXSxcbiAgICBcIjlcIjogWzIwLCBbMTYsIDE0LCAxNSwgMTEsIDEzLCA5LCAxMCwgOCwgOSwgOCwgNiwgOSwgNCwgMTEsIDMsIDE0LCAzLCAxNSwgNCwgMTgsIDYsIDIwLCA5LCAyMSwgMTAsIDIxLCAxMywgMjAsIDE1LCAxOCwgMTYsIDE0LCAxNiwgOSwgMTUsIDQsIDEzLCAxLCAxMCwgMCwgOCwgMCwgNSwgMSwgNCwgM11dLFxuICAgIFwiOlwiOiBbMTAsIFs1LCAxNCwgNCwgMTMsIDUsIDEyLCA2LCAxMywgNSwgMTQsIC0xLCAtMSwgNSwgMiwgNCwgMSwgNSwgMCwgNiwgMSwgNSwgMl1dLFxuICAgIFwiO1wiOiBbMTAsIFs1LCAxNCwgNCwgMTMsIDUsIDEyLCA2LCAxMywgNSwgMTQsIC0xLCAtMSwgNiwgMSwgNSwgMCwgNCwgMSwgNSwgMiwgNiwgMSwgNiwgLTEsIDUsIC0zLCA0LCAtNF1dLFxuICAgIFwiPFwiOiBbMjQsIFsyMCwgMTgsIDQsIDksIDIwLCAwXV0sXG4gICAgXCI9XCI6IFsyNiwgWzQsIDEyLCAyMiwgMTIsIC0xLCAtMSwgNCwgNiwgMjIsIDZdXSxcbiAgICBcIj5cIjogWzI0LCBbNCwgMTgsIDIwLCA5LCA0LCAwXV0sXG4gICAgXCI/XCI6IFsxOCwgWzMsIDE2LCAzLCAxNywgNCwgMTksIDUsIDIwLCA3LCAyMSwgMTEsIDIxLCAxMywgMjAsIDE0LCAxOSwgMTUsIDE3LCAxNSwgMTUsIDE0LCAxMywgMTMsIDEyLCA5LCAxMCwgOSwgNywgLTEsIC0xLCA5LCAyLCA4LCAxLCA5LCAwLCAxMCwgMSwgOSwgMl1dLFxuICAgIFwiQFwiOiBbMjcsIFsxOCwgMTMsIDE3LCAxNSwgMTUsIDE2LCAxMiwgMTYsIDEwLCAxNSwgOSwgMTQsIDgsIDExLCA4LCA4LCA5LCA2LCAxMSwgNSwgMTQsIDUsIDE2LCA2LCAxNywgOCwgLTEsIC0xLCAxMiwgMTYsIDEwLCAxNCwgOSwgMTEsIDksIDgsIDEwLCA2LCAxMSwgNSwgLTEsIC0xLCAxOCwgMTYsIDE3LCA4LCAxNywgNiwgMTksIDUsIDIxLCA1LCAyMywgNywgMjQsIDEwLCAyNCwgMTIsIDIzLCAxNSwgMjIsIDE3LCAyMCwgMTksIDE4LCAyMCwgMTUsIDIxLCAxMiwgMjEsIDksIDIwLCA3LCAxOSwgNSwgMTcsIDQsIDE1LCAzLCAxMiwgMywgOSwgNCwgNiwgNSwgNCwgNywgMiwgOSwgMSwgMTIsIDAsIDE1LCAwLCAxOCwgMSwgMjAsIDIsIDIxLCAzLCAtMSwgLTEsIDE5LCAxNiwgMTgsIDgsIDE4LCA2LCAxOSwgNV1dLFxuICAgIFwiQVwiOiBbMTgsIFs5LCAyMSwgMSwgMCwgLTEsIC0xLCA5LCAyMSwgMTcsIDAsIC0xLCAtMSwgNCwgNywgMTQsIDddXSxcbiAgICBcIkJcIjogWzIxLCBbNCwgMjEsIDQsIDAsIC0xLCAtMSwgNCwgMjEsIDEzLCAyMSwgMTYsIDIwLCAxNywgMTksIDE4LCAxNywgMTgsIDE1LCAxNywgMTMsIDE2LCAxMiwgMTMsIDExLCAtMSwgLTEsIDQsIDExLCAxMywgMTEsIDE2LCAxMCwgMTcsIDksIDE4LCA3LCAxOCwgNCwgMTcsIDIsIDE2LCAxLCAxMywgMCwgNCwgMF1dLFxuICAgIFwiQ1wiOiBbMjEsIFsxOCwgMTYsIDE3LCAxOCwgMTUsIDIwLCAxMywgMjEsIDksIDIxLCA3LCAyMCwgNSwgMTgsIDQsIDE2LCAzLCAxMywgMywgOCwgNCwgNSwgNSwgMywgNywgMSwgOSwgMCwgMTMsIDAsIDE1LCAxLCAxNywgMywgMTgsIDVdXSxcbiAgICBcIkRcIjogWzIxLCBbNCwgMjEsIDQsIDAsIC0xLCAtMSwgNCwgMjEsIDExLCAyMSwgMTQsIDIwLCAxNiwgMTgsIDE3LCAxNiwgMTgsIDEzLCAxOCwgOCwgMTcsIDUsIDE2LCAzLCAxNCwgMSwgMTEsIDAsIDQsIDBdXSxcbiAgICBcIkVcIjogWzE5LCBbNCwgMjEsIDQsIDAsIC0xLCAtMSwgNCwgMjEsIDE3LCAyMSwgLTEsIC0xLCA0LCAxMSwgMTIsIDExLCAtMSwgLTEsIDQsIDAsIDE3LCAwXV0sXG4gICAgXCJGXCI6IFsxOCwgWzQsIDIxLCA0LCAwLCAtMSwgLTEsIDQsIDIxLCAxNywgMjEsIC0xLCAtMSwgNCwgMTEsIDEyLCAxMV1dLFxuICAgIFwiR1wiOiBbMjEsIFsxOCwgMTYsIDE3LCAxOCwgMTUsIDIwLCAxMywgMjEsIDksIDIxLCA3LCAyMCwgNSwgMTgsIDQsIDE2LCAzLCAxMywgMywgOCwgNCwgNSwgNSwgMywgNywgMSwgOSwgMCwgMTMsIDAsIDE1LCAxLCAxNywgMywgMTgsIDUsIDE4LCA4LCAtMSwgLTEsIDEzLCA4LCAxOCwgOF1dLFxuICAgIFwiSFwiOiBbMjIsIFs0LCAyMSwgNCwgMCwgLTEsIC0xLCAxOCwgMjEsIDE4LCAwLCAtMSwgLTEsIDQsIDExLCAxOCwgMTFdXSxcbiAgICBcIklcIjogWzgsIFs0LCAyMSwgNCwgMF1dLFxuICAgIFwiSlwiOiBbMTYsIFsxMiwgMjEsIDEyLCA1LCAxMSwgMiwgMTAsIDEsIDgsIDAsIDYsIDAsIDQsIDEsIDMsIDIsIDIsIDUsIDIsIDddXSxcbiAgICBcIktcIjogWzIxLCBbNCwgMjEsIDQsIDAsIC0xLCAtMSwgMTgsIDIxLCA0LCA3LCAtMSwgLTEsIDksIDEyLCAxOCwgMF1dLFxuICAgIFwiTFwiOiBbMTcsIFs0LCAyMSwgNCwgMCwgLTEsIC0xLCA0LCAwLCAxNiwgMF1dLFxuICAgIFwiTVwiOiBbMjQsIFs0LCAyMSwgNCwgMCwgLTEsIC0xLCA0LCAyMSwgMTIsIDAsIC0xLCAtMSwgMjAsIDIxLCAxMiwgMCwgLTEsIC0xLCAyMCwgMjEsIDIwLCAwXV0sXG4gICAgXCJOXCI6IFsyMiwgWzQsIDIxLCA0LCAwLCAtMSwgLTEsIDQsIDIxLCAxOCwgMCwgLTEsIC0xLCAxOCwgMjEsIDE4LCAwXV0sXG4gICAgXCJPXCI6IFsyMiwgWzksIDIxLCA3LCAyMCwgNSwgMTgsIDQsIDE2LCAzLCAxMywgMywgOCwgNCwgNSwgNSwgMywgNywgMSwgOSwgMCwgMTMsIDAsIDE1LCAxLCAxNywgMywgMTgsIDUsIDE5LCA4LCAxOSwgMTMsIDE4LCAxNiwgMTcsIDE4LCAxNSwgMjAsIDEzLCAyMSwgOSwgMjFdXSxcbiAgICBcIlBcIjogWzIxLCBbNCwgMjEsIDQsIDAsIC0xLCAtMSwgNCwgMjEsIDEzLCAyMSwgMTYsIDIwLCAxNywgMTksIDE4LCAxNywgMTgsIDE0LCAxNywgMTIsIDE2LCAxMSwgMTMsIDEwLCA0LCAxMF1dLFxuICAgIFwiUVwiOiBbMjIsIFs5LCAyMSwgNywgMjAsIDUsIDE4LCA0LCAxNiwgMywgMTMsIDMsIDgsIDQsIDUsIDUsIDMsIDcsIDEsIDksIDAsIDEzLCAwLCAxNSwgMSwgMTcsIDMsIDE4LCA1LCAxOSwgOCwgMTksIDEzLCAxOCwgMTYsIDE3LCAxOCwgMTUsIDIwLCAxMywgMjEsIDksIDIxLCAtMSwgLTEsIDEyLCA0LCAxOCwgLTJdXSxcbiAgICBcIlJcIjogWzIxLCBbNCwgMjEsIDQsIDAsIC0xLCAtMSwgNCwgMjEsIDEzLCAyMSwgMTYsIDIwLCAxNywgMTksIDE4LCAxNywgMTgsIDE1LCAxNywgMTMsIDE2LCAxMiwgMTMsIDExLCA0LCAxMSwgLTEsIC0xLCAxMSwgMTEsIDE4LCAwXV0sXG4gICAgXCJTXCI6IFsyMCwgWzE3LCAxOCwgMTUsIDIwLCAxMiwgMjEsIDgsIDIxLCA1LCAyMCwgMywgMTgsIDMsIDE2LCA0LCAxNCwgNSwgMTMsIDcsIDEyLCAxMywgMTAsIDE1LCA5LCAxNiwgOCwgMTcsIDYsIDE3LCAzLCAxNSwgMSwgMTIsIDAsIDgsIDAsIDUsIDEsIDMsIDNdXSxcbiAgICBcIlRcIjogWzE2LCBbOCwgMjEsIDgsIDAsIC0xLCAtMSwgMSwgMjEsIDE1LCAyMV1dLFxuICAgIFwiVVwiOiBbMjIsIFs0LCAyMSwgNCwgNiwgNSwgMywgNywgMSwgMTAsIDAsIDEyLCAwLCAxNSwgMSwgMTcsIDMsIDE4LCA2LCAxOCwgMjFdXSxcbiAgICBcIlZcIjogWzE4LCBbMSwgMjEsIDksIDAsIC0xLCAtMSwgMTcsIDIxLCA5LCAwXV0sXG4gICAgXCJXXCI6IFsyNCwgWzIsIDIxLCA3LCAwLCAtMSwgLTEsIDEyLCAyMSwgNywgMCwgLTEsIC0xLCAxMiwgMjEsIDE3LCAwLCAtMSwgLTEsIDIyLCAyMSwgMTcsIDBdXSxcbiAgICBcIlhcIjogWzIwLCBbMywgMjEsIDE3LCAwLCAtMSwgLTEsIDE3LCAyMSwgMywgMF1dLFxuICAgIFwiWVwiOiBbMTgsIFsxLCAyMSwgOSwgMTEsIDksIDAsIC0xLCAtMSwgMTcsIDIxLCA5LCAxMV1dLFxuICAgIFwiWlwiOiBbMjAsIFsxNywgMjEsIDMsIDAsIC0xLCAtMSwgMywgMjEsIDE3LCAyMSwgLTEsIC0xLCAzLCAwLCAxNywgMF1dLFxuICAgIFwiW1wiOiBbMTQsIFs0LCAyNSwgNCwgLTcsIC0xLCAtMSwgNSwgMjUsIDUsIC03LCAtMSwgLTEsIDQsIDI1LCAxMSwgMjUsIC0xLCAtMSwgNCwgLTcsIDExLCAtN11dLFxuICAgIFwiXFxcXFwiOiBbMTQsIFswLCAyMSwgMTQsIC0zXV0sXG4gICAgXCJdXCI6IFsxNCwgWzksIDI1LCA5LCAtNywgLTEsIC0xLCAxMCwgMjUsIDEwLCAtNywgLTEsIC0xLCAzLCAyNSwgMTAsIDI1LCAtMSwgLTEsIDMsIC03LCAxMCwgLTddXSxcbiAgICBcIl5cIjogWzE2LCBbNiwgMTUsIDgsIDE4LCAxMCwgMTUsIC0xLCAtMSwgMywgMTIsIDgsIDE3LCAxMywgMTIsIC0xLCAtMSwgOCwgMTcsIDgsIDBdXSxcbiAgICBcIl9cIjogWzE2LCBbMCwgLTIsIDE2LCAtMl1dLFxuICAgIFwiYFwiOiBbMTAsIFs2LCAyMSwgNSwgMjAsIDQsIDE4LCA0LCAxNiwgNSwgMTUsIDYsIDE2LCA1LCAxN11dLFxuICAgIFwiYVwiOiBbMTksIFsxNSwgMTQsIDE1LCAwLCAtMSwgLTEsIDE1LCAxMSwgMTMsIDEzLCAxMSwgMTQsIDgsIDE0LCA2LCAxMywgNCwgMTEsIDMsIDgsIDMsIDYsIDQsIDMsIDYsIDEsIDgsIDAsIDExLCAwLCAxMywgMSwgMTUsIDNdXSxcbiAgICBcImJcIjogWzE5LCBbNCwgMjEsIDQsIDAsIC0xLCAtMSwgNCwgMTEsIDYsIDEzLCA4LCAxNCwgMTEsIDE0LCAxMywgMTMsIDE1LCAxMSwgMTYsIDgsIDE2LCA2LCAxNSwgMywgMTMsIDEsIDExLCAwLCA4LCAwLCA2LCAxLCA0LCAzXV0sXG4gICAgXCJjXCI6IFsxOCwgWzE1LCAxMSwgMTMsIDEzLCAxMSwgMTQsIDgsIDE0LCA2LCAxMywgNCwgMTEsIDMsIDgsIDMsIDYsIDQsIDMsIDYsIDEsIDgsIDAsIDExLCAwLCAxMywgMSwgMTUsIDNdXSxcbiAgICBcImRcIjogWzE5LCBbMTUsIDIxLCAxNSwgMCwgLTEsIC0xLCAxNSwgMTEsIDEzLCAxMywgMTEsIDE0LCA4LCAxNCwgNiwgMTMsIDQsIDExLCAzLCA4LCAzLCA2LCA0LCAzLCA2LCAxLCA4LCAwLCAxMSwgMCwgMTMsIDEsIDE1LCAzXV0sXG4gICAgXCJlXCI6IFsxOCwgWzMsIDgsIDE1LCA4LCAxNSwgMTAsIDE0LCAxMiwgMTMsIDEzLCAxMSwgMTQsIDgsIDE0LCA2LCAxMywgNCwgMTEsIDMsIDgsIDMsIDYsIDQsIDMsIDYsIDEsIDgsIDAsIDExLCAwLCAxMywgMSwgMTUsIDNdXSxcbiAgICBcImZcIjogWzEyLCBbMTAsIDIxLCA4LCAyMSwgNiwgMjAsIDUsIDE3LCA1LCAwLCAtMSwgLTEsIDIsIDE0LCA5LCAxNF1dLFxuICAgIFwiZ1wiOiBbMTksIFsxNSwgMTQsIDE1LCAtMiwgMTQsIC01LCAxMywgLTYsIDExLCAtNywgOCwgLTcsIDYsIC02LCAtMSwgLTEsIDE1LCAxMSwgMTMsIDEzLCAxMSwgMTQsIDgsIDE0LCA2LCAxMywgNCwgMTEsIDMsIDgsIDMsIDYsIDQsIDMsIDYsIDEsIDgsIDAsIDExLCAwLCAxMywgMSwgMTUsIDNdXSxcbiAgICBcImhcIjogWzE5LCBbNCwgMjEsIDQsIDAsIC0xLCAtMSwgNCwgMTAsIDcsIDEzLCA5LCAxNCwgMTIsIDE0LCAxNCwgMTMsIDE1LCAxMCwgMTUsIDBdXSxcbiAgICBcImlcIjogWzgsIFszLCAyMSwgNCwgMjAsIDUsIDIxLCA0LCAyMiwgMywgMjEsIC0xLCAtMSwgNCwgMTQsIDQsIDBdXSxcbiAgICBcImpcIjogWzEwLCBbNSwgMjEsIDYsIDIwLCA3LCAyMSwgNiwgMjIsIDUsIDIxLCAtMSwgLTEsIDYsIDE0LCA2LCAtMywgNSwgLTYsIDMsIC03LCAxLCAtN11dLFxuICAgIFwia1wiOiBbMTcsIFs0LCAyMSwgNCwgMCwgLTEsIC0xLCAxNCwgMTQsIDQsIDQsIC0xLCAtMSwgOCwgOCwgMTUsIDBdXSxcbiAgICBcImxcIjogWzgsIFs0LCAyMSwgNCwgMF1dLFxuICAgIFwibVwiOiBbMzAsIFs0LCAxNCwgNCwgMCwgLTEsIC0xLCA0LCAxMCwgNywgMTMsIDksIDE0LCAxMiwgMTQsIDE0LCAxMywgMTUsIDEwLCAxNSwgMCwgLTEsIC0xLCAxNSwgMTAsIDE4LCAxMywgMjAsIDE0LCAyMywgMTQsIDI1LCAxMywgMjYsIDEwLCAyNiwgMF1dLFxuICAgIFwiblwiOiBbMTksIFs0LCAxNCwgNCwgMCwgLTEsIC0xLCA0LCAxMCwgNywgMTMsIDksIDE0LCAxMiwgMTQsIDE0LCAxMywgMTUsIDEwLCAxNSwgMF1dLFxuICAgIFwib1wiOiBbMTksIFs4LCAxNCwgNiwgMTMsIDQsIDExLCAzLCA4LCAzLCA2LCA0LCAzLCA2LCAxLCA4LCAwLCAxMSwgMCwgMTMsIDEsIDE1LCAzLCAxNiwgNiwgMTYsIDgsIDE1LCAxMSwgMTMsIDEzLCAxMSwgMTQsIDgsIDE0XV0sXG4gICAgXCJwXCI6IFsxOSwgWzQsIDE0LCA0LCAtNywgLTEsIC0xLCA0LCAxMSwgNiwgMTMsIDgsIDE0LCAxMSwgMTQsIDEzLCAxMywgMTUsIDExLCAxNiwgOCwgMTYsIDYsIDE1LCAzLCAxMywgMSwgMTEsIDAsIDgsIDAsIDYsIDEsIDQsIDNdXSxcbiAgICBcInFcIjogWzE5LCBbMTUsIDE0LCAxNSwgLTcsIC0xLCAtMSwgMTUsIDExLCAxMywgMTMsIDExLCAxNCwgOCwgMTQsIDYsIDEzLCA0LCAxMSwgMywgOCwgMywgNiwgNCwgMywgNiwgMSwgOCwgMCwgMTEsIDAsIDEzLCAxLCAxNSwgM11dLFxuICAgIFwiclwiOiBbMTMsIFs0LCAxNCwgNCwgMCwgLTEsIC0xLCA0LCA4LCA1LCAxMSwgNywgMTMsIDksIDE0LCAxMiwgMTRdXSxcbiAgICBcInNcIjogWzE3LCBbMTQsIDExLCAxMywgMTMsIDEwLCAxNCwgNywgMTQsIDQsIDEzLCAzLCAxMSwgNCwgOSwgNiwgOCwgMTEsIDcsIDEzLCA2LCAxNCwgNCwgMTQsIDMsIDEzLCAxLCAxMCwgMCwgNywgMCwgNCwgMSwgMywgM11dLFxuICAgIFwidFwiOiBbMTIsIFs1LCAyMSwgNSwgNCwgNiwgMSwgOCwgMCwgMTAsIDAsIC0xLCAtMSwgMiwgMTQsIDksIDE0XV0sXG4gICAgXCJ1XCI6IFsxOSwgWzQsIDE0LCA0LCA0LCA1LCAxLCA3LCAwLCAxMCwgMCwgMTIsIDEsIDE1LCA0LCAtMSwgLTEsIDE1LCAxNCwgMTUsIDBdXSxcbiAgICBcInZcIjogWzE2LCBbMiwgMTQsIDgsIDAsIC0xLCAtMSwgMTQsIDE0LCA4LCAwXV0sXG4gICAgXCJ3XCI6IFsyMiwgWzMsIDE0LCA3LCAwLCAtMSwgLTEsIDExLCAxNCwgNywgMCwgLTEsIC0xLCAxMSwgMTQsIDE1LCAwLCAtMSwgLTEsIDE5LCAxNCwgMTUsIDBdXSxcbiAgICBcInhcIjogWzE3LCBbMywgMTQsIDE0LCAwLCAtMSwgLTEsIDE0LCAxNCwgMywgMF1dLFxuICAgIFwieVwiOiBbMTYsIFsyLCAxNCwgOCwgMCwgLTEsIC0xLCAxNCwgMTQsIDgsIDAsIDYsIC00LCA0LCAtNiwgMiwgLTcsIDEsIC03XV0sXG4gICAgXCJ6XCI6IFsxNywgWzE0LCAxNCwgMywgMCwgLTEsIC0xLCAzLCAxNCwgMTQsIDE0LCAtMSwgLTEsIDMsIDAsIDE0LCAwXV0sXG4gICAgXCJ7XCI6IFsxNCwgWzksIDI1LCA3LCAyNCwgNiwgMjMsIDUsIDIxLCA1LCAxOSwgNiwgMTcsIDcsIDE2LCA4LCAxNCwgOCwgMTIsIDYsIDEwLCAtMSwgLTEsIDcsIDI0LCA2LCAyMiwgNiwgMjAsIDcsIDE4LCA4LCAxNywgOSwgMTUsIDksIDEzLCA4LCAxMSwgNCwgOSwgOCwgNywgOSwgNSwgOSwgMywgOCwgMSwgNywgMCwgNiwgLTIsIDYsIC00LCA3LCAtNiwgLTEsIC0xLCA2LCA4LCA4LCA2LCA4LCA0LCA3LCAyLCA2LCAxLCA1LCAtMSwgNSwgLTMsIDYsIC01LCA3LCAtNiwgOSwgLTddXSxcbiAgICBcInxcIjogWzgsIFs0LCAyNSwgNCwgLTddXSxcbiAgICBcIn1cIjogWzE0LCBbNSwgMjUsIDcsIDI0LCA4LCAyMywgOSwgMjEsIDksIDE5LCA4LCAxNywgNywgMTYsIDYsIDE0LCA2LCAxMiwgOCwgMTAsIC0xLCAtMSwgNywgMjQsIDgsIDIyLCA4LCAyMCwgNywgMTgsIDYsIDE3LCA1LCAxNSwgNSwgMTMsIDYsIDExLCAxMCwgOSwgNiwgNywgNSwgNSwgNSwgMywgNiwgMSwgNywgMCwgOCwgLTIsIDgsIC00LCA3LCAtNiwgLTEsIC0xLCA4LCA4LCA2LCA2LCA2LCA0LCA3LCAyLCA4LCAxLCA5LCAtMSwgOSwgLTMsIDgsIC01LCA3LCAtNiwgNSwgLTddXSxcbiAgICBcIn5cIjogWzI0LCBbMywgNiwgMywgOCwgNCwgMTEsIDYsIDEyLCA4LCAxMiwgMTAsIDExLCAxNCwgOCwgMTYsIDcsIDE4LCA3LCAyMCwgOCwgMjEsIDEwLCAtMSwgLTEsIDMsIDgsIDQsIDEwLCA2LCAxMSwgOCwgMTEsIDEwLCAxMCwgMTQsIDcsIDE2LCA2LCAxOCwgNiwgMjAsIDcsIDIxLCAxMCwgMjEsIDEyXV1cbn07XG5cbmZ1bmN0aW9uIGNyZWF0ZVRleHRWZXJ0aWNlcyh0ZXh0LCBsZWZ0LCBiYXNlbGluZSwgc2NhbGUpIHtcbiAgICBzY2FsZSA9IHNjYWxlIHx8IDE7XG5cbiAgICBjb25zdCBzdHJva2VzID0gW107XG4gICAgbGV0IGksIGxlbiwgaiwgbGVuMiwgZ2x5cGgsIHgsIHksIHByZXY7XG5cbiAgICBmb3IgKGkgPSAwLCBsZW4gPSB0ZXh0Lmxlbmd0aDsgaSA8IGxlbjsgaSsrKSB7XG4gICAgICAgIGdseXBoID0gc2ltcGxleEZvbnRbdGV4dFtpXV07XG4gICAgICAgIGlmICghZ2x5cGgpIGNvbnRpbnVlO1xuICAgICAgICBwcmV2ID0gbnVsbDtcblxuICAgICAgICBmb3IgKGogPSAwLCBsZW4yID0gZ2x5cGhbMV0ubGVuZ3RoOyBqIDwgbGVuMjsgaiArPSAyKSB7XG4gICAgICAgICAgICBpZiAoZ2x5cGhbMV1bal0gPT09IC0xICYmIGdseXBoWzFdW2ogKyAxXSA9PT0gLTEpIHtcbiAgICAgICAgICAgICAgICBwcmV2ID0gbnVsbDtcblxuICAgICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgICAgICB4ID0gbGVmdCArIGdseXBoWzFdW2pdICogc2NhbGU7XG4gICAgICAgICAgICAgICAgeSA9IGJhc2VsaW5lIC0gZ2x5cGhbMV1baiArIDFdICogc2NhbGU7XG4gICAgICAgICAgICAgICAgaWYgKHByZXYpIHtcbiAgICAgICAgICAgICAgICAgICAgc3Ryb2tlcy5wdXNoKHByZXYueCwgcHJldi55LCB4LCB5KTtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgcHJldiA9IHt4OiB4LCB5OiB5fTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgICAgICBsZWZ0ICs9IGdseXBoWzBdICogc2NhbGU7XG4gICAgfVxuXG4gICAgcmV0dXJuIHN0cm9rZXM7XG59XG4iLCIvLyBAZmxvd1xuXG5pbXBvcnQgYnJvd3NlciBmcm9tICcuLi91dGlsL2Jyb3dzZXInO1xuXG5pbXBvcnQgeyBtYXQ0IH0gZnJvbSAnZ2wtbWF0cml4JztcbmltcG9ydCBTb3VyY2VDYWNoZSBmcm9tICcuLi9zb3VyY2Uvc291cmNlX2NhY2hlJztcbmltcG9ydCBFWFRFTlQgZnJvbSAnLi4vZGF0YS9leHRlbnQnO1xuaW1wb3J0IHBpeGVsc1RvVGlsZVVuaXRzIGZyb20gJy4uL3NvdXJjZS9waXhlbHNfdG9fdGlsZV91bml0cyc7XG5pbXBvcnQgU2VnbWVudFZlY3RvciBmcm9tICcuLi9kYXRhL3NlZ21lbnQnO1xuaW1wb3J0IHsgUmFzdGVyQm91bmRzQXJyYXksIFBvc0FycmF5LCBUcmlhbmdsZUluZGV4QXJyYXksIExpbmVTdHJpcEluZGV4QXJyYXkgfSBmcm9tICcuLi9kYXRhL2FycmF5X3R5cGVzJztcbmltcG9ydCByYXN0ZXJCb3VuZHNBdHRyaWJ1dGVzIGZyb20gJy4uL2RhdGEvcmFzdGVyX2JvdW5kc19hdHRyaWJ1dGVzJztcbmltcG9ydCBwb3NBdHRyaWJ1dGVzIGZyb20gJy4uL2RhdGEvcG9zX2F0dHJpYnV0ZXMnO1xuaW1wb3J0IFByb2dyYW1Db25maWd1cmF0aW9uIGZyb20gJy4uL2RhdGEvcHJvZ3JhbV9jb25maWd1cmF0aW9uJztcbmltcG9ydCBDcm9zc1RpbGVTeW1ib2xJbmRleCBmcm9tICcuLi9zeW1ib2wvY3Jvc3NfdGlsZV9zeW1ib2xfaW5kZXgnO1xuaW1wb3J0IHNoYWRlcnMgZnJvbSAnLi4vc2hhZGVycyc7XG5pbXBvcnQgUHJvZ3JhbSBmcm9tICcuL3Byb2dyYW0nO1xuaW1wb3J0IHsgcHJvZ3JhbVVuaWZvcm1zIH0gZnJvbSAnLi9wcm9ncmFtL3Byb2dyYW1fdW5pZm9ybXMnO1xuaW1wb3J0IENvbnRleHQgZnJvbSAnLi4vZ2wvY29udGV4dCc7XG5pbXBvcnQgRGVwdGhNb2RlIGZyb20gJy4uL2dsL2RlcHRoX21vZGUnO1xuaW1wb3J0IFN0ZW5jaWxNb2RlIGZyb20gJy4uL2dsL3N0ZW5jaWxfbW9kZSc7XG5pbXBvcnQgQ29sb3JNb2RlIGZyb20gJy4uL2dsL2NvbG9yX21vZGUnO1xuaW1wb3J0IFRleHR1cmUgZnJvbSAnLi90ZXh0dXJlJztcbmltcG9ydCB1cGRhdGVUaWxlTWFza3MgZnJvbSAnLi90aWxlX21hc2snO1xuaW1wb3J0IHsgY2xpcHBpbmdNYXNrVW5pZm9ybVZhbHVlcyB9IGZyb20gJy4vcHJvZ3JhbS9jbGlwcGluZ19tYXNrX3Byb2dyYW0nO1xuaW1wb3J0IENvbG9yIGZyb20gJy4uL3N0eWxlLXNwZWMvdXRpbC9jb2xvcic7XG5pbXBvcnQgc3ltYm9sIGZyb20gJy4vZHJhd19zeW1ib2wnO1xuaW1wb3J0IGNpcmNsZSBmcm9tICcuL2RyYXdfY2lyY2xlJztcbmltcG9ydCBoZWF0bWFwIGZyb20gJy4vZHJhd19oZWF0bWFwJztcbmltcG9ydCBsaW5lIGZyb20gJy4vZHJhd19saW5lJztcbmltcG9ydCBmaWxsIGZyb20gJy4vZHJhd19maWxsJztcbmltcG9ydCBmaWxsRXh0cnVzaW9uIGZyb20gJy4vZHJhd19maWxsX2V4dHJ1c2lvbic7XG5pbXBvcnQgaGlsbHNoYWRlIGZyb20gJy4vZHJhd19oaWxsc2hhZGUnO1xuaW1wb3J0IHJhc3RlciBmcm9tICcuL2RyYXdfcmFzdGVyJztcbmltcG9ydCBiYWNrZ3JvdW5kIGZyb20gJy4vZHJhd19iYWNrZ3JvdW5kJztcbmltcG9ydCBkZWJ1ZyBmcm9tICcuL2RyYXdfZGVidWcnO1xuXG5jb25zdCBkcmF3ID0ge1xuICAgIHN5bWJvbCxcbiAgICBjaXJjbGUsXG4gICAgaGVhdG1hcCxcbiAgICBsaW5lLFxuICAgIGZpbGwsXG4gICAgJ2ZpbGwtZXh0cnVzaW9uJzogZmlsbEV4dHJ1c2lvbixcbiAgICBoaWxsc2hhZGUsXG4gICAgcmFzdGVyLFxuICAgIGJhY2tncm91bmQsXG4gICAgZGVidWdcbn07XG5cbmltcG9ydCB0eXBlIFRyYW5zZm9ybSBmcm9tICcuLi9nZW8vdHJhbnNmb3JtJztcbmltcG9ydCB0eXBlIFRpbGUgZnJvbSAnLi4vc291cmNlL3RpbGUnO1xuaW1wb3J0IHR5cGUge092ZXJzY2FsZWRUaWxlSUR9IGZyb20gJy4uL3NvdXJjZS90aWxlX2lkJztcbmltcG9ydCB0eXBlIFN0eWxlIGZyb20gJy4uL3N0eWxlL3N0eWxlJztcbmltcG9ydCB0eXBlIFN0eWxlTGF5ZXIgZnJvbSAnLi4vc3R5bGUvc3R5bGVfbGF5ZXInO1xuaW1wb3J0IHR5cGUge0Nyb3NzRmFkZWR9IGZyb20gJy4uL3N0eWxlL3Byb3BlcnRpZXMnO1xuaW1wb3J0IHR5cGUgTGluZUF0bGFzIGZyb20gJy4vbGluZV9hdGxhcyc7XG5pbXBvcnQgdHlwZSBJbWFnZU1hbmFnZXIgZnJvbSAnLi9pbWFnZV9tYW5hZ2VyJztcbmltcG9ydCB0eXBlIEdseXBoTWFuYWdlciBmcm9tICcuL2dseXBoX21hbmFnZXInO1xuaW1wb3J0IHR5cGUgVmVydGV4QnVmZmVyIGZyb20gJy4uL2dsL3ZlcnRleF9idWZmZXInO1xuaW1wb3J0IHR5cGUgSW5kZXhCdWZmZXIgZnJvbSAnLi4vZ2wvaW5kZXhfYnVmZmVyJztcbmltcG9ydCB0eXBlIHtEZXB0aE1hc2tUeXBlLCBEZXB0aEZ1bmNUeXBlfSBmcm9tICcuLi9nbC90eXBlcyc7XG5cbmV4cG9ydCB0eXBlIFJlbmRlclBhc3MgPSAnb2Zmc2NyZWVuJyB8ICdvcGFxdWUnIHwgJ3RyYW5zbHVjZW50JztcblxudHlwZSBQYWludGVyT3B0aW9ucyA9IHtcbiAgICBzaG93T3ZlcmRyYXdJbnNwZWN0b3I6IGJvb2xlYW4sXG4gICAgc2hvd1RpbGVCb3VuZGFyaWVzOiBib29sZWFuLFxuICAgIHJvdGF0aW5nOiBib29sZWFuLFxuICAgIHpvb21pbmc6IGJvb2xlYW4sXG4gICAgZmFkZUR1cmF0aW9uOiBudW1iZXJcbn1cblxuLyoqXG4gKiBJbml0aWFsaXplIGEgbmV3IHBhaW50ZXIgb2JqZWN0LlxuICpcbiAqIEBwYXJhbSB7Q2FudmFzfSBnbCBhbiBleHBlcmltZW50YWwtd2ViZ2wgZHJhd2luZyBjb250ZXh0XG4gKiBAcHJpdmF0ZVxuICovXG5jbGFzcyBQYWludGVyIHtcbiAgICBjb250ZXh0OiBDb250ZXh0O1xuICAgIHRyYW5zZm9ybTogVHJhbnNmb3JtO1xuICAgIF90aWxlVGV4dHVyZXM6IHsgW251bWJlcl06IEFycmF5PFRleHR1cmU+IH07XG4gICAgbnVtU3VibGF5ZXJzOiBudW1iZXI7XG4gICAgZGVwdGhFcHNpbG9uOiBudW1iZXI7XG4gICAgZW1wdHlQcm9ncmFtQ29uZmlndXJhdGlvbjogUHJvZ3JhbUNvbmZpZ3VyYXRpb247XG4gICAgd2lkdGg6IG51bWJlcjtcbiAgICBoZWlnaHQ6IG51bWJlcjtcbiAgICBkZXB0aFJibzogV2ViR0xSZW5kZXJidWZmZXI7XG4gICAgZGVwdGhSYm9OZWVkc0NsZWFyOiBib29sZWFuO1xuICAgIHRpbGVFeHRlbnRCdWZmZXI6IFZlcnRleEJ1ZmZlcjtcbiAgICB0aWxlRXh0ZW50U2VnbWVudHM6IFNlZ21lbnRWZWN0b3I7XG4gICAgZGVidWdCdWZmZXI6IFZlcnRleEJ1ZmZlcjtcbiAgICBkZWJ1Z1NlZ21lbnRzOiBTZWdtZW50VmVjdG9yO1xuICAgIHJhc3RlckJvdW5kc0J1ZmZlcjogVmVydGV4QnVmZmVyO1xuICAgIHJhc3RlckJvdW5kc1NlZ21lbnRzOiBTZWdtZW50VmVjdG9yO1xuICAgIHZpZXdwb3J0QnVmZmVyOiBWZXJ0ZXhCdWZmZXI7XG4gICAgdmlld3BvcnRTZWdtZW50czogU2VnbWVudFZlY3RvcjtcbiAgICBxdWFkVHJpYW5nbGVJbmRleEJ1ZmZlcjogSW5kZXhCdWZmZXI7XG4gICAgdGlsZUJvcmRlckluZGV4QnVmZmVyOiBJbmRleEJ1ZmZlcjtcbiAgICBfdGlsZUNsaXBwaW5nTWFza0lEczogeyBbbnVtYmVyXTogbnVtYmVyIH07XG4gICAgc3RlbmNpbENsZWFyTW9kZTogU3RlbmNpbE1vZGU7XG4gICAgc3R5bGU6IFN0eWxlO1xuICAgIG9wdGlvbnM6IFBhaW50ZXJPcHRpb25zO1xuICAgIGxpbmVBdGxhczogTGluZUF0bGFzO1xuICAgIGltYWdlTWFuYWdlcjogSW1hZ2VNYW5hZ2VyO1xuICAgIGdseXBoTWFuYWdlcjogR2x5cGhNYW5hZ2VyO1xuICAgIGRlcHRoUmFuZ2U6IG51bWJlcjtcbiAgICByZW5kZXJQYXNzOiBSZW5kZXJQYXNzO1xuICAgIGN1cnJlbnRMYXllcjogbnVtYmVyO1xuICAgIGlkOiBzdHJpbmc7XG4gICAgX3Nob3dPdmVyZHJhd0luc3BlY3RvcjogYm9vbGVhbjtcbiAgICBjYWNoZTogeyBbc3RyaW5nXTogUHJvZ3JhbTwqPiB9O1xuICAgIGNyb3NzVGlsZVN5bWJvbEluZGV4OiBDcm9zc1RpbGVTeW1ib2xJbmRleDtcbiAgICBzeW1ib2xGYWRlQ2hhbmdlOiBudW1iZXI7XG5cbiAgICBjb25zdHJ1Y3RvcihnbDogV2ViR0xSZW5kZXJpbmdDb250ZXh0LCB0cmFuc2Zvcm06IFRyYW5zZm9ybSkge1xuICAgICAgICB0aGlzLmNvbnRleHQgPSBuZXcgQ29udGV4dChnbCk7XG4gICAgICAgIHRoaXMudHJhbnNmb3JtID0gdHJhbnNmb3JtO1xuICAgICAgICB0aGlzLl90aWxlVGV4dHVyZXMgPSB7fTtcblxuICAgICAgICB0aGlzLnNldHVwKCk7XG5cbiAgICAgICAgLy8gV2l0aGluIGVhY2ggbGF5ZXIgdGhlcmUgYXJlIG11bHRpcGxlIGRpc3RpbmN0IHotcGxhbmVzIHRoYXQgY2FuIGJlIGRyYXduIHRvLlxuICAgICAgICAvLyBUaGlzIGlzIGltcGxlbWVudGVkIHVzaW5nIHRoZSBXZWJHTCBkZXB0aCBidWZmZXIuXG4gICAgICAgIHRoaXMubnVtU3VibGF5ZXJzID0gU291cmNlQ2FjaGUubWF4VW5kZXJ6b29taW5nICsgU291cmNlQ2FjaGUubWF4T3Zlcnpvb21pbmcgKyAxO1xuICAgICAgICB0aGlzLmRlcHRoRXBzaWxvbiA9IDEgLyBNYXRoLnBvdygyLCAxNik7XG5cbiAgICAgICAgdGhpcy5kZXB0aFJib05lZWRzQ2xlYXIgPSB0cnVlO1xuXG4gICAgICAgIHRoaXMuZW1wdHlQcm9ncmFtQ29uZmlndXJhdGlvbiA9IG5ldyBQcm9ncmFtQ29uZmlndXJhdGlvbigpO1xuXG4gICAgICAgIHRoaXMuY3Jvc3NUaWxlU3ltYm9sSW5kZXggPSBuZXcgQ3Jvc3NUaWxlU3ltYm9sSW5kZXgoKTtcbiAgICB9XG5cbiAgICAvKlxuICAgICAqIFVwZGF0ZSB0aGUgR0wgdmlld3BvcnQsIHByb2plY3Rpb24gbWF0cml4LCBhbmQgdHJhbnNmb3JtcyB0byBjb21wZW5zYXRlXG4gICAgICogZm9yIGEgbmV3IHdpZHRoIGFuZCBoZWlnaHQgdmFsdWUuXG4gICAgICovXG4gICAgcmVzaXplKHdpZHRoOiBudW1iZXIsIGhlaWdodDogbnVtYmVyKSB7XG4gICAgICAgIGNvbnN0IGdsID0gdGhpcy5jb250ZXh0LmdsO1xuXG4gICAgICAgIHRoaXMud2lkdGggPSB3aWR0aCAqIGJyb3dzZXIuZGV2aWNlUGl4ZWxSYXRpbztcbiAgICAgICAgdGhpcy5oZWlnaHQgPSBoZWlnaHQgKiBicm93c2VyLmRldmljZVBpeGVsUmF0aW87XG4gICAgICAgIHRoaXMuY29udGV4dC52aWV3cG9ydC5zZXQoWzAsIDAsIHRoaXMud2lkdGgsIHRoaXMuaGVpZ2h0XSk7XG5cbiAgICAgICAgaWYgKHRoaXMuc3R5bGUpIHtcbiAgICAgICAgICAgIGZvciAoY29uc3QgbGF5ZXJJZCBvZiB0aGlzLnN0eWxlLl9vcmRlcikge1xuICAgICAgICAgICAgICAgIHRoaXMuc3R5bGUuX2xheWVyc1tsYXllcklkXS5yZXNpemUoKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfVxuXG4gICAgICAgIGlmICh0aGlzLmRlcHRoUmJvKSB7XG4gICAgICAgICAgICBnbC5kZWxldGVSZW5kZXJidWZmZXIodGhpcy5kZXB0aFJibyk7XG4gICAgICAgICAgICB0aGlzLmRlcHRoUmJvID0gbnVsbDtcbiAgICAgICAgfVxuICAgIH1cblxuICAgIHNldHVwKCkge1xuICAgICAgICBjb25zdCBjb250ZXh0ID0gdGhpcy5jb250ZXh0O1xuXG4gICAgICAgIGNvbnN0IHRpbGVFeHRlbnRBcnJheSA9IG5ldyBQb3NBcnJheSgpO1xuICAgICAgICB0aWxlRXh0ZW50QXJyYXkuZW1wbGFjZUJhY2soMCwgMCk7XG4gICAgICAgIHRpbGVFeHRlbnRBcnJheS5lbXBsYWNlQmFjayhFWFRFTlQsIDApO1xuICAgICAgICB0aWxlRXh0ZW50QXJyYXkuZW1wbGFjZUJhY2soMCwgRVhURU5UKTtcbiAgICAgICAgdGlsZUV4dGVudEFycmF5LmVtcGxhY2VCYWNrKEVYVEVOVCwgRVhURU5UKTtcbiAgICAgICAgdGhpcy50aWxlRXh0ZW50QnVmZmVyID0gY29udGV4dC5jcmVhdGVWZXJ0ZXhCdWZmZXIodGlsZUV4dGVudEFycmF5LCBwb3NBdHRyaWJ1dGVzLm1lbWJlcnMpO1xuICAgICAgICB0aGlzLnRpbGVFeHRlbnRTZWdtZW50cyA9IFNlZ21lbnRWZWN0b3Iuc2ltcGxlU2VnbWVudCgwLCAwLCA0LCAyKTtcblxuICAgICAgICBjb25zdCBkZWJ1Z0FycmF5ID0gbmV3IFBvc0FycmF5KCk7XG4gICAgICAgIGRlYnVnQXJyYXkuZW1wbGFjZUJhY2soMCwgMCk7XG4gICAgICAgIGRlYnVnQXJyYXkuZW1wbGFjZUJhY2soRVhURU5ULCAwKTtcbiAgICAgICAgZGVidWdBcnJheS5lbXBsYWNlQmFjaygwLCBFWFRFTlQpO1xuICAgICAgICBkZWJ1Z0FycmF5LmVtcGxhY2VCYWNrKEVYVEVOVCwgRVhURU5UKTtcbiAgICAgICAgdGhpcy5kZWJ1Z0J1ZmZlciA9IGNvbnRleHQuY3JlYXRlVmVydGV4QnVmZmVyKGRlYnVnQXJyYXksIHBvc0F0dHJpYnV0ZXMubWVtYmVycyk7XG4gICAgICAgIHRoaXMuZGVidWdTZWdtZW50cyA9IFNlZ21lbnRWZWN0b3Iuc2ltcGxlU2VnbWVudCgwLCAwLCA0LCA1KTtcblxuICAgICAgICBjb25zdCByYXN0ZXJCb3VuZHNBcnJheSA9IG5ldyBSYXN0ZXJCb3VuZHNBcnJheSgpO1xuICAgICAgICByYXN0ZXJCb3VuZHNBcnJheS5lbXBsYWNlQmFjaygwLCAwLCAwLCAwKTtcbiAgICAgICAgcmFzdGVyQm91bmRzQXJyYXkuZW1wbGFjZUJhY2soRVhURU5ULCAwLCBFWFRFTlQsIDApO1xuICAgICAgICByYXN0ZXJCb3VuZHNBcnJheS5lbXBsYWNlQmFjaygwLCBFWFRFTlQsIDAsIEVYVEVOVCk7XG4gICAgICAgIHJhc3RlckJvdW5kc0FycmF5LmVtcGxhY2VCYWNrKEVYVEVOVCwgRVhURU5ULCBFWFRFTlQsIEVYVEVOVCk7XG4gICAgICAgIHRoaXMucmFzdGVyQm91bmRzQnVmZmVyID0gY29udGV4dC5jcmVhdGVWZXJ0ZXhCdWZmZXIocmFzdGVyQm91bmRzQXJyYXksIHJhc3RlckJvdW5kc0F0dHJpYnV0ZXMubWVtYmVycyk7XG4gICAgICAgIHRoaXMucmFzdGVyQm91bmRzU2VnbWVudHMgPSBTZWdtZW50VmVjdG9yLnNpbXBsZVNlZ21lbnQoMCwgMCwgNCwgMik7XG5cbiAgICAgICAgY29uc3Qgdmlld3BvcnRBcnJheSA9IG5ldyBQb3NBcnJheSgpO1xuICAgICAgICB2aWV3cG9ydEFycmF5LmVtcGxhY2VCYWNrKDAsIDApO1xuICAgICAgICB2aWV3cG9ydEFycmF5LmVtcGxhY2VCYWNrKDEsIDApO1xuICAgICAgICB2aWV3cG9ydEFycmF5LmVtcGxhY2VCYWNrKDAsIDEpO1xuICAgICAgICB2aWV3cG9ydEFycmF5LmVtcGxhY2VCYWNrKDEsIDEpO1xuICAgICAgICB0aGlzLnZpZXdwb3J0QnVmZmVyID0gY29udGV4dC5jcmVhdGVWZXJ0ZXhCdWZmZXIodmlld3BvcnRBcnJheSwgcG9zQXR0cmlidXRlcy5tZW1iZXJzKTtcbiAgICAgICAgdGhpcy52aWV3cG9ydFNlZ21lbnRzID0gU2VnbWVudFZlY3Rvci5zaW1wbGVTZWdtZW50KDAsIDAsIDQsIDIpO1xuXG4gICAgICAgIGNvbnN0IHRpbGVMaW5lU3RyaXBJbmRpY2VzID0gbmV3IExpbmVTdHJpcEluZGV4QXJyYXkoKTtcbiAgICAgICAgdGlsZUxpbmVTdHJpcEluZGljZXMuZW1wbGFjZUJhY2soMCk7XG4gICAgICAgIHRpbGVMaW5lU3RyaXBJbmRpY2VzLmVtcGxhY2VCYWNrKDEpO1xuICAgICAgICB0aWxlTGluZVN0cmlwSW5kaWNlcy5lbXBsYWNlQmFjaygzKTtcbiAgICAgICAgdGlsZUxpbmVTdHJpcEluZGljZXMuZW1wbGFjZUJhY2soMik7XG4gICAgICAgIHRpbGVMaW5lU3RyaXBJbmRpY2VzLmVtcGxhY2VCYWNrKDApO1xuICAgICAgICB0aGlzLnRpbGVCb3JkZXJJbmRleEJ1ZmZlciA9IGNvbnRleHQuY3JlYXRlSW5kZXhCdWZmZXIodGlsZUxpbmVTdHJpcEluZGljZXMpO1xuXG4gICAgICAgIGNvbnN0IHF1YWRUcmlhbmdsZUluZGljZXMgPSBuZXcgVHJpYW5nbGVJbmRleEFycmF5KCk7XG4gICAgICAgIHF1YWRUcmlhbmdsZUluZGljZXMuZW1wbGFjZUJhY2soMCwgMSwgMik7XG4gICAgICAgIHF1YWRUcmlhbmdsZUluZGljZXMuZW1wbGFjZUJhY2soMiwgMSwgMyk7XG4gICAgICAgIHRoaXMucXVhZFRyaWFuZ2xlSW5kZXhCdWZmZXIgPSBjb250ZXh0LmNyZWF0ZUluZGV4QnVmZmVyKHF1YWRUcmlhbmdsZUluZGljZXMpO1xuXG4gICAgICAgIGNvbnN0IGdsID0gdGhpcy5jb250ZXh0LmdsO1xuICAgICAgICB0aGlzLnN0ZW5jaWxDbGVhck1vZGUgPSBuZXcgU3RlbmNpbE1vZGUoeyBmdW5jOiBnbC5BTFdBWVMsIG1hc2s6IDAgfSwgMHgwLCAweEZGLCBnbC5aRVJPLCBnbC5aRVJPLCBnbC5aRVJPKTtcbiAgICB9XG5cbiAgICAvKlxuICAgICAqIFJlc2V0IHRoZSBkcmF3aW5nIGNhbnZhcyBieSBjbGVhcmluZyB0aGUgc3RlbmNpbCBidWZmZXIgc28gdGhhdCB3ZSBjYW4gZHJhd1xuICAgICAqIG5ldyB0aWxlcyBhdCB0aGUgc2FtZSBsb2NhdGlvbiwgd2hpbGUgcmV0YWluaW5nIHByZXZpb3VzbHkgZHJhd24gcGl4ZWxzLlxuICAgICAqL1xuICAgIGNsZWFyU3RlbmNpbCgpIHtcbiAgICAgICAgY29uc3QgY29udGV4dCA9IHRoaXMuY29udGV4dDtcbiAgICAgICAgY29uc3QgZ2wgPSBjb250ZXh0LmdsO1xuXG4gICAgICAgIC8vIEFzIGEgdGVtcG9yYXJ5IHdvcmthcm91bmQgZm9yIGh0dHBzOi8vZ2l0aHViLmNvbS9tYXBib3gvbWFwYm94LWdsLWpzL2lzc3Vlcy81NDkwLFxuICAgICAgICAvLyBwZW5kaW5nIGFuIHVwc3RyZWFtIGZpeCwgd2UgZHJhdyBhIGZ1bGxzY3JlZW4gc3RlbmNpbD0wIGNsaXBwaW5nIG1hc2sgaGVyZSxcbiAgICAgICAgLy8gZWZmZWN0aXZlbHkgY2xlYXJpbmcgdGhlIHN0ZW5jaWwgYnVmZmVyOiBvbmNlIGFuIHVwc3RyZWFtIHBhdGNoIGxhbmRzLCByZW1vdmVcbiAgICAgICAgLy8gdGhpcyBmdW5jdGlvbiBpbiBmYXZvciBvZiBjb250ZXh0LmNsZWFyKHsgc3RlbmNpbDogMHgwIH0pXG5cbiAgICAgICAgY29uc3QgbWF0cml4ID0gbWF0NC5jcmVhdGUoKTtcbiAgICAgICAgbWF0NC5vcnRobyhtYXRyaXgsIDAsIHRoaXMud2lkdGgsIHRoaXMuaGVpZ2h0LCAwLCAwLCAxKTtcbiAgICAgICAgbWF0NC5zY2FsZShtYXRyaXgsIG1hdHJpeCwgW2dsLmRyYXdpbmdCdWZmZXJXaWR0aCwgZ2wuZHJhd2luZ0J1ZmZlckhlaWdodCwgMF0pO1xuXG4gICAgICAgIHRoaXMudXNlUHJvZ3JhbSgnY2xpcHBpbmdNYXNrJykuZHJhdyhjb250ZXh0LCBnbC5UUklBTkdMRVMsXG4gICAgICAgICAgICBEZXB0aE1vZGUuZGlzYWJsZWQsIHRoaXMuc3RlbmNpbENsZWFyTW9kZSwgQ29sb3JNb2RlLmRpc2FibGVkLFxuICAgICAgICAgICAgY2xpcHBpbmdNYXNrVW5pZm9ybVZhbHVlcyhtYXRyaXgpLFxuICAgICAgICAgICAgJyRjbGlwcGluZycsIHRoaXMudmlld3BvcnRCdWZmZXIsXG4gICAgICAgICAgICB0aGlzLnF1YWRUcmlhbmdsZUluZGV4QnVmZmVyLCB0aGlzLnZpZXdwb3J0U2VnbWVudHMpO1xuICAgIH1cblxuICAgIF9yZW5kZXJUaWxlQ2xpcHBpbmdNYXNrcyh0aWxlSURzOiBBcnJheTxPdmVyc2NhbGVkVGlsZUlEPikge1xuICAgICAgICBjb25zdCBjb250ZXh0ID0gdGhpcy5jb250ZXh0O1xuICAgICAgICBjb25zdCBnbCA9IGNvbnRleHQuZ2w7XG5cbiAgICAgICAgY29udGV4dC5zZXRDb2xvck1vZGUoQ29sb3JNb2RlLmRpc2FibGVkKTtcbiAgICAgICAgY29udGV4dC5zZXREZXB0aE1vZGUoRGVwdGhNb2RlLmRpc2FibGVkKTtcblxuICAgICAgICBjb25zdCBwcm9ncmFtID0gdGhpcy51c2VQcm9ncmFtKCdjbGlwcGluZ01hc2snKTtcblxuICAgICAgICBsZXQgaWROZXh0ID0gMTtcbiAgICAgICAgdGhpcy5fdGlsZUNsaXBwaW5nTWFza0lEcyA9IHt9O1xuXG4gICAgICAgIGZvciAoY29uc3QgdGlsZUlEIG9mIHRpbGVJRHMpIHtcbiAgICAgICAgICAgIGNvbnN0IGlkID0gdGhpcy5fdGlsZUNsaXBwaW5nTWFza0lEc1t0aWxlSUQua2V5XSA9IGlkTmV4dCsrO1xuXG4gICAgICAgICAgICBwcm9ncmFtLmRyYXcoY29udGV4dCwgZ2wuVFJJQU5HTEVTLCBEZXB0aE1vZGUuZGlzYWJsZWQsXG4gICAgICAgICAgICAgICAgLy8gVGVzdHMgd2lsbCBhbHdheXMgcGFzcywgYW5kIHJlZiB2YWx1ZSB3aWxsIGJlIHdyaXR0ZW4gdG8gc3RlbmNpbCBidWZmZXIuXG4gICAgICAgICAgICAgICAgbmV3IFN0ZW5jaWxNb2RlKHsgZnVuYzogZ2wuQUxXQVlTLCBtYXNrOiAwIH0sIGlkLCAweEZGLCBnbC5LRUVQLCBnbC5LRUVQLCBnbC5SRVBMQUNFKSxcbiAgICAgICAgICAgICAgICBDb2xvck1vZGUuZGlzYWJsZWQsIGNsaXBwaW5nTWFza1VuaWZvcm1WYWx1ZXModGlsZUlELnBvc01hdHJpeCksXG4gICAgICAgICAgICAgICAgJyRjbGlwcGluZycsIHRoaXMudGlsZUV4dGVudEJ1ZmZlcixcbiAgICAgICAgICAgICAgICB0aGlzLnF1YWRUcmlhbmdsZUluZGV4QnVmZmVyLCB0aGlzLnRpbGVFeHRlbnRTZWdtZW50cyk7XG4gICAgICAgIH1cbiAgICB9XG5cbiAgICBzdGVuY2lsTW9kZUZvckNsaXBwaW5nKHRpbGVJRDogT3ZlcnNjYWxlZFRpbGVJRCk6IFN0ZW5jaWxNb2RlIHtcbiAgICAgICAgY29uc3QgZ2wgPSB0aGlzLmNvbnRleHQuZ2w7XG4gICAgICAgIHJldHVybiBuZXcgU3RlbmNpbE1vZGUoeyBmdW5jOiBnbC5FUVVBTCwgbWFzazogMHhGRiB9LCB0aGlzLl90aWxlQ2xpcHBpbmdNYXNrSURzW3RpbGVJRC5rZXldLCAweDAwLCBnbC5LRUVQLCBnbC5LRUVQLCBnbC5SRVBMQUNFKTtcbiAgICB9XG5cbiAgICBjb2xvck1vZGVGb3JSZW5kZXJQYXNzKCk6ICRSZWFkT25seTxDb2xvck1vZGU+IHtcbiAgICAgICAgY29uc3QgZ2wgPSB0aGlzLmNvbnRleHQuZ2w7XG4gICAgICAgIGlmICh0aGlzLl9zaG93T3ZlcmRyYXdJbnNwZWN0b3IpIHtcbiAgICAgICAgICAgIGNvbnN0IG51bU92ZXJkcmF3U3RlcHMgPSA4O1xuICAgICAgICAgICAgY29uc3QgYSA9IDEgLyBudW1PdmVyZHJhd1N0ZXBzO1xuXG4gICAgICAgICAgICByZXR1cm4gbmV3IENvbG9yTW9kZShbZ2wuQ09OU1RBTlRfQ09MT1IsIGdsLk9ORV0sIG5ldyBDb2xvcihhLCBhLCBhLCAwKSwgW3RydWUsIHRydWUsIHRydWUsIHRydWVdKTtcbiAgICAgICAgfSBlbHNlIGlmICh0aGlzLnJlbmRlclBhc3MgPT09ICdvcGFxdWUnKSB7XG4gICAgICAgICAgICByZXR1cm4gQ29sb3JNb2RlLnVuYmxlbmRlZDtcbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgIHJldHVybiBDb2xvck1vZGUuYWxwaGFCbGVuZGVkO1xuICAgICAgICB9XG4gICAgfVxuXG4gICAgZGVwdGhNb2RlRm9yU3VibGF5ZXIobjogbnVtYmVyLCBtYXNrOiBEZXB0aE1hc2tUeXBlLCBmdW5jOiA/RGVwdGhGdW5jVHlwZSk6IERlcHRoTW9kZSB7XG4gICAgICAgIGNvbnN0IGZhckRlcHRoID0gMSAtICgoMSArIHRoaXMuY3VycmVudExheWVyKSAqIHRoaXMubnVtU3VibGF5ZXJzICsgbikgKiB0aGlzLmRlcHRoRXBzaWxvbjtcbiAgICAgICAgY29uc3QgbmVhckRlcHRoID0gZmFyRGVwdGggLSAxICsgdGhpcy5kZXB0aFJhbmdlO1xuICAgICAgICByZXR1cm4gbmV3IERlcHRoTW9kZShmdW5jIHx8IHRoaXMuY29udGV4dC5nbC5MRVFVQUwsIG1hc2ssIFtuZWFyRGVwdGgsIGZhckRlcHRoXSk7XG4gICAgfVxuXG4gICAgcmVuZGVyKHN0eWxlOiBTdHlsZSwgb3B0aW9uczogUGFpbnRlck9wdGlvbnMpIHtcbiAgICAgICAgdGhpcy5zdHlsZSA9IHN0eWxlO1xuICAgICAgICB0aGlzLm9wdGlvbnMgPSBvcHRpb25zO1xuXG4gICAgICAgIHRoaXMubGluZUF0bGFzID0gc3R5bGUubGluZUF0bGFzO1xuICAgICAgICB0aGlzLmltYWdlTWFuYWdlciA9IHN0eWxlLmltYWdlTWFuYWdlcjtcbiAgICAgICAgdGhpcy5nbHlwaE1hbmFnZXIgPSBzdHlsZS5nbHlwaE1hbmFnZXI7XG5cbiAgICAgICAgdGhpcy5zeW1ib2xGYWRlQ2hhbmdlID0gc3R5bGUucGxhY2VtZW50LnN5bWJvbEZhZGVDaGFuZ2UoYnJvd3Nlci5ub3coKSk7XG5cbiAgICAgICAgY29uc3QgbGF5ZXJJZHMgPSB0aGlzLnN0eWxlLl9vcmRlcjtcbiAgICAgICAgY29uc3Qgc291cmNlQ2FjaGVzID0gdGhpcy5zdHlsZS5zb3VyY2VDYWNoZXM7XG5cbiAgICAgICAgZm9yIChjb25zdCBpZCBpbiBzb3VyY2VDYWNoZXMpIHtcbiAgICAgICAgICAgIGNvbnN0IHNvdXJjZUNhY2hlID0gc291cmNlQ2FjaGVzW2lkXTtcbiAgICAgICAgICAgIGlmIChzb3VyY2VDYWNoZS51c2VkKSB7XG4gICAgICAgICAgICAgICAgc291cmNlQ2FjaGUucHJlcGFyZSh0aGlzLmNvbnRleHQpO1xuICAgICAgICAgICAgfVxuICAgICAgICB9XG5cbiAgICAgICAgY29uc3QgY29vcmRzQXNjZW5kaW5nOiB7W3N0cmluZ106IEFycmF5PE92ZXJzY2FsZWRUaWxlSUQ+fSA9IHt9O1xuICAgICAgICBjb25zdCBjb29yZHNEZXNjZW5kaW5nOiB7W3N0cmluZ106IEFycmF5PE92ZXJzY2FsZWRUaWxlSUQ+fSA9IHt9O1xuICAgICAgICBjb25zdCBjb29yZHNEZXNjZW5kaW5nU3ltYm9sOiB7W3N0cmluZ106IEFycmF5PE92ZXJzY2FsZWRUaWxlSUQ+fSA9IHt9O1xuXG4gICAgICAgIGZvciAoY29uc3QgaWQgaW4gc291cmNlQ2FjaGVzKSB7XG4gICAgICAgICAgICBjb25zdCBzb3VyY2VDYWNoZSA9IHNvdXJjZUNhY2hlc1tpZF07XG4gICAgICAgICAgICBjb29yZHNBc2NlbmRpbmdbaWRdID0gc291cmNlQ2FjaGUuZ2V0VmlzaWJsZUNvb3JkaW5hdGVzKCk7XG4gICAgICAgICAgICBjb29yZHNEZXNjZW5kaW5nW2lkXSA9IGNvb3Jkc0FzY2VuZGluZ1tpZF0uc2xpY2UoKS5yZXZlcnNlKCk7XG4gICAgICAgICAgICBjb29yZHNEZXNjZW5kaW5nU3ltYm9sW2lkXSA9IHNvdXJjZUNhY2hlLmdldFZpc2libGVDb29yZGluYXRlcyh0cnVlKS5yZXZlcnNlKCk7XG4gICAgICAgIH1cblxuICAgICAgICBmb3IgKGNvbnN0IGlkIGluIHNvdXJjZUNhY2hlcykge1xuICAgICAgICAgICAgY29uc3Qgc291cmNlQ2FjaGUgPSBzb3VyY2VDYWNoZXNbaWRdO1xuICAgICAgICAgICAgY29uc3Qgc291cmNlID0gc291cmNlQ2FjaGUuZ2V0U291cmNlKCk7XG4gICAgICAgICAgICBpZiAoc291cmNlLnR5cGUgIT09ICdyYXN0ZXInICYmIHNvdXJjZS50eXBlICE9PSAncmFzdGVyLWRlbScpIGNvbnRpbnVlO1xuICAgICAgICAgICAgY29uc3QgdmlzaWJsZVRpbGVzID0gW107XG4gICAgICAgICAgICBmb3IgKGNvbnN0IGNvb3JkIG9mIGNvb3Jkc0FzY2VuZGluZ1tpZF0pIHZpc2libGVUaWxlcy5wdXNoKHNvdXJjZUNhY2hlLmdldFRpbGUoY29vcmQpKTtcbiAgICAgICAgICAgIHVwZGF0ZVRpbGVNYXNrcyh2aXNpYmxlVGlsZXMsIHRoaXMuY29udGV4dCk7XG4gICAgICAgIH1cblxuICAgICAgICAvLyBPZmZzY3JlZW4gcGFzcyA9PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PVxuICAgICAgICAvLyBXZSBmaXJzdCBkbyBhbGwgcmVuZGVyaW5nIHRoYXQgcmVxdWlyZXMgcmVuZGVyaW5nIHRvIGEgc2VwYXJhdGVcbiAgICAgICAgLy8gZnJhbWVidWZmZXIsIGFuZCB0aGVuIHNhdmUgdGhvc2UgZm9yIHJlbmRlcmluZyBiYWNrIHRvIHRoZSBtYXBcbiAgICAgICAgLy8gbGF0ZXI6IGluIGRvaW5nIHRoaXMgd2UgYXZvaWQgZG9pbmcgZXhwZW5zaXZlIGZyYW1lYnVmZmVyIHJlc3RvcmVzLlxuICAgICAgICB0aGlzLnJlbmRlclBhc3MgPSAnb2Zmc2NyZWVuJztcbiAgICAgICAgdGhpcy5kZXB0aFJib05lZWRzQ2xlYXIgPSB0cnVlO1xuXG4gICAgICAgIGZvciAoY29uc3QgbGF5ZXJJZCBvZiBsYXllcklkcykge1xuICAgICAgICAgICAgY29uc3QgbGF5ZXIgPSB0aGlzLnN0eWxlLl9sYXllcnNbbGF5ZXJJZF07XG4gICAgICAgICAgICBpZiAoIWxheWVyLmhhc09mZnNjcmVlblBhc3MoKSB8fCBsYXllci5pc0hpZGRlbih0aGlzLnRyYW5zZm9ybS56b29tKSkgY29udGludWU7XG5cbiAgICAgICAgICAgIGNvbnN0IGNvb3JkcyA9IGNvb3Jkc0Rlc2NlbmRpbmdbbGF5ZXIuc291cmNlXTtcbiAgICAgICAgICAgIGlmICghY29vcmRzLmxlbmd0aCkgY29udGludWU7XG5cbiAgICAgICAgICAgIHRoaXMucmVuZGVyTGF5ZXIodGhpcywgc291cmNlQ2FjaGVzW2xheWVyLnNvdXJjZV0sIGxheWVyLCBjb29yZHMpO1xuICAgICAgICB9XG5cbiAgICAgICAgLy8gUmViaW5kIHRoZSBtYWluIGZyYW1lYnVmZmVyIG5vdyB0aGF0IGFsbCBvZmZzY3JlZW4gbGF5ZXJzIGhhdmUgYmVlbiByZW5kZXJlZDpcbiAgICAgICAgdGhpcy5jb250ZXh0LmJpbmRGcmFtZWJ1ZmZlci5zZXQobnVsbCk7XG5cbiAgICAgICAgLy8gQ2xlYXIgYnVmZmVycyBpbiBwcmVwYXJhdGlvbiBmb3IgZHJhd2luZyB0byB0aGUgbWFpbiBmcmFtZWJ1ZmZlclxuICAgICAgICB0aGlzLmNvbnRleHQuY2xlYXIoeyBjb2xvcjogb3B0aW9ucy5zaG93T3ZlcmRyYXdJbnNwZWN0b3IgPyBDb2xvci5ibGFjayA6IENvbG9yLnRyYW5zcGFyZW50LCBkZXB0aDogMSB9KTtcblxuICAgICAgICB0aGlzLl9zaG93T3ZlcmRyYXdJbnNwZWN0b3IgPSBvcHRpb25zLnNob3dPdmVyZHJhd0luc3BlY3RvcjtcbiAgICAgICAgdGhpcy5kZXB0aFJhbmdlID0gKHN0eWxlLl9vcmRlci5sZW5ndGggKyAyKSAqIHRoaXMubnVtU3VibGF5ZXJzICogdGhpcy5kZXB0aEVwc2lsb247XG5cbiAgICAgICAgLy8gT3BhcXVlIHBhc3MgPT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT1cbiAgICAgICAgLy8gRHJhdyBvcGFxdWUgbGF5ZXJzIHRvcC10by1ib3R0b20gZmlyc3QuXG4gICAgICAgIHRoaXMucmVuZGVyUGFzcyA9ICdvcGFxdWUnO1xuICAgICAgICBsZXQgcHJldlNvdXJjZUlkO1xuXG4gICAgICAgIGZvciAodGhpcy5jdXJyZW50TGF5ZXIgPSBsYXllcklkcy5sZW5ndGggLSAxOyB0aGlzLmN1cnJlbnRMYXllciA+PSAwOyB0aGlzLmN1cnJlbnRMYXllci0tKSB7XG4gICAgICAgICAgICBjb25zdCBsYXllciA9IHRoaXMuc3R5bGUuX2xheWVyc1tsYXllcklkc1t0aGlzLmN1cnJlbnRMYXllcl1dO1xuICAgICAgICAgICAgY29uc3Qgc291cmNlQ2FjaGUgPSBzb3VyY2VDYWNoZXNbbGF5ZXIuc291cmNlXTtcbiAgICAgICAgICAgIGNvbnN0IGNvb3JkcyA9IGNvb3Jkc0FzY2VuZGluZ1tsYXllci5zb3VyY2VdO1xuXG4gICAgICAgICAgICBpZiAobGF5ZXIuc291cmNlICE9PSBwcmV2U291cmNlSWQgJiYgc291cmNlQ2FjaGUpIHtcbiAgICAgICAgICAgICAgICB0aGlzLmNsZWFyU3RlbmNpbCgpO1xuICAgICAgICAgICAgICAgIGlmIChzb3VyY2VDYWNoZS5nZXRTb3VyY2UoKS5pc1RpbGVDbGlwcGVkKSB7XG4gICAgICAgICAgICAgICAgICAgIHRoaXMuX3JlbmRlclRpbGVDbGlwcGluZ01hc2tzKGNvb3Jkcyk7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICB0aGlzLnJlbmRlckxheWVyKHRoaXMsIHNvdXJjZUNhY2hlLCBsYXllciwgY29vcmRzKTtcbiAgICAgICAgICAgIHByZXZTb3VyY2VJZCA9IGxheWVyLnNvdXJjZTtcbiAgICAgICAgfVxuXG4gICAgICAgIC8vIFRyYW5zbHVjZW50IHBhc3MgPT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT1cbiAgICAgICAgLy8gRHJhdyBhbGwgb3RoZXIgbGF5ZXJzIGJvdHRvbS10by10b3AuXG4gICAgICAgIHRoaXMucmVuZGVyUGFzcyA9ICd0cmFuc2x1Y2VudCc7XG5cbiAgICAgICAgZm9yICh0aGlzLmN1cnJlbnRMYXllciA9IDAsIHByZXZTb3VyY2VJZCA9IG51bGw7IHRoaXMuY3VycmVudExheWVyIDwgbGF5ZXJJZHMubGVuZ3RoOyB0aGlzLmN1cnJlbnRMYXllcisrKSB7XG4gICAgICAgICAgICBjb25zdCBsYXllciA9IHRoaXMuc3R5bGUuX2xheWVyc1tsYXllcklkc1t0aGlzLmN1cnJlbnRMYXllcl1dO1xuICAgICAgICAgICAgY29uc3Qgc291cmNlQ2FjaGUgPSBzb3VyY2VDYWNoZXNbbGF5ZXIuc291cmNlXTtcblxuICAgICAgICAgICAgLy8gRm9yIHN5bWJvbCBsYXllcnMgaW4gdGhlIHRyYW5zbHVjZW50IHBhc3MsIHdlIGFkZCBleHRyYSB0aWxlcyB0byB0aGUgcmVuZGVyYWJsZSBzZXRcbiAgICAgICAgICAgIC8vIGZvciBjcm9zcy10aWxlIHN5bWJvbCBmYWRpbmcuIFN5bWJvbCBsYXllcnMgZG9uJ3QgdXNlIHRpbGUgY2xpcHBpbmcsIHNvIG5vIG5lZWQgdG8gcmVuZGVyXG4gICAgICAgICAgICAvLyBzZXBhcmF0ZSBjbGlwcGluZyBtYXNrc1xuICAgICAgICAgICAgY29uc3QgY29vcmRzID0gKGxheWVyLnR5cGUgPT09ICdzeW1ib2wnID8gY29vcmRzRGVzY2VuZGluZ1N5bWJvbCA6IGNvb3Jkc0Rlc2NlbmRpbmcpW2xheWVyLnNvdXJjZV07XG5cbiAgICAgICAgICAgIGlmIChsYXllci5zb3VyY2UgIT09IHByZXZTb3VyY2VJZCAmJiBzb3VyY2VDYWNoZSkge1xuICAgICAgICAgICAgICAgIHRoaXMuY2xlYXJTdGVuY2lsKCk7XG4gICAgICAgICAgICAgICAgaWYgKHNvdXJjZUNhY2hlLmdldFNvdXJjZSgpLmlzVGlsZUNsaXBwZWQpIHtcbiAgICAgICAgICAgICAgICAgICAgdGhpcy5fcmVuZGVyVGlsZUNsaXBwaW5nTWFza3MoY29vcmRzQXNjZW5kaW5nW2xheWVyLnNvdXJjZV0pO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgdGhpcy5yZW5kZXJMYXllcih0aGlzLCBzb3VyY2VDYWNoZSwgbGF5ZXIsIGNvb3Jkcyk7XG4gICAgICAgICAgICBwcmV2U291cmNlSWQgPSBsYXllci5zb3VyY2U7XG4gICAgICAgIH1cblxuICAgICAgICBpZiAodGhpcy5vcHRpb25zLnNob3dUaWxlQm91bmRhcmllcykge1xuICAgICAgICAgICAgZm9yIChjb25zdCBpZCBpbiBzb3VyY2VDYWNoZXMpIHtcbiAgICAgICAgICAgICAgICBkcmF3LmRlYnVnKHRoaXMsIHNvdXJjZUNhY2hlc1tpZF0sIGNvb3Jkc0FzY2VuZGluZ1tpZF0pO1xuICAgICAgICAgICAgICAgIGJyZWFrO1xuICAgICAgICAgICAgfVxuICAgICAgICB9XG4gICAgfVxuXG4gICAgc2V0dXBPZmZzY3JlZW5EZXB0aFJlbmRlcmJ1ZmZlcigpOiB2b2lkIHtcbiAgICAgICAgY29uc3QgY29udGV4dCA9IHRoaXMuY29udGV4dDtcbiAgICAgICAgLy8gQWxsIG9mIHRoZSAzRCB0ZXh0dXJlcyB3aWxsIHVzZSB0aGUgc2FtZSBkZXB0aCByZW5kZXJidWZmZXIuXG4gICAgICAgIGlmICghdGhpcy5kZXB0aFJibykge1xuICAgICAgICAgICAgdGhpcy5kZXB0aFJibyA9IGNvbnRleHQuY3JlYXRlUmVuZGVyYnVmZmVyKGNvbnRleHQuZ2wuREVQVEhfQ09NUE9ORU5UMTYsIHRoaXMud2lkdGgsIHRoaXMuaGVpZ2h0KTtcbiAgICAgICAgfVxuICAgIH1cblxuICAgIHJlbmRlckxheWVyKHBhaW50ZXI6IFBhaW50ZXIsIHNvdXJjZUNhY2hlOiBTb3VyY2VDYWNoZSwgbGF5ZXI6IFN0eWxlTGF5ZXIsIGNvb3JkczogQXJyYXk8T3ZlcnNjYWxlZFRpbGVJRD4pIHtcbiAgICAgICAgaWYgKGxheWVyLmlzSGlkZGVuKHRoaXMudHJhbnNmb3JtLnpvb20pKSByZXR1cm47XG4gICAgICAgIGlmIChsYXllci50eXBlICE9PSAnYmFja2dyb3VuZCcgJiYgIWNvb3Jkcy5sZW5ndGgpIHJldHVybjtcbiAgICAgICAgdGhpcy5pZCA9IGxheWVyLmlkO1xuXG4gICAgICAgIGRyYXdbbGF5ZXIudHlwZV0ocGFpbnRlciwgc291cmNlQ2FjaGUsIGxheWVyLCBjb29yZHMpO1xuICAgIH1cblxuICAgIC8qKlxuICAgICAqIFRyYW5zZm9ybSBhIG1hdHJpeCB0byBpbmNvcnBvcmF0ZSB0aGUgKi10cmFuc2xhdGUgYW5kICotdHJhbnNsYXRlLWFuY2hvciBwcm9wZXJ0aWVzIGludG8gaXQuXG4gICAgICogQHBhcmFtIGluVmlld3BvcnRQaXhlbFVuaXRzVW5pdHMgVHJ1ZSB3aGVuIHRoZSB1bml0cyBhY2NlcHRlZCBieSB0aGUgbWF0cml4IGFyZSBpbiB2aWV3cG9ydCBwaXhlbHMgaW5zdGVhZCBvZiB0aWxlIHVuaXRzLlxuICAgICAqIEByZXR1cm5zIHtGbG9hdDMyQXJyYXl9IG1hdHJpeFxuICAgICAqL1xuICAgIHRyYW5zbGF0ZVBvc01hdHJpeChtYXRyaXg6IEZsb2F0MzJBcnJheSwgdGlsZTogVGlsZSwgdHJhbnNsYXRlOiBbbnVtYmVyLCBudW1iZXJdLCB0cmFuc2xhdGVBbmNob3I6ICdtYXAnIHwgJ3ZpZXdwb3J0JywgaW5WaWV3cG9ydFBpeGVsVW5pdHNVbml0cz86IGJvb2xlYW4pIHtcbiAgICAgICAgaWYgKCF0cmFuc2xhdGVbMF0gJiYgIXRyYW5zbGF0ZVsxXSkgcmV0dXJuIG1hdHJpeDtcblxuICAgICAgICBjb25zdCBhbmdsZSA9IGluVmlld3BvcnRQaXhlbFVuaXRzVW5pdHMgP1xuICAgICAgICAgICAgKHRyYW5zbGF0ZUFuY2hvciA9PT0gJ21hcCcgPyB0aGlzLnRyYW5zZm9ybS5hbmdsZSA6IDApIDpcbiAgICAgICAgICAgICh0cmFuc2xhdGVBbmNob3IgPT09ICd2aWV3cG9ydCcgPyAtdGhpcy50cmFuc2Zvcm0uYW5nbGUgOiAwKTtcblxuICAgICAgICBpZiAoYW5nbGUpIHtcbiAgICAgICAgICAgIGNvbnN0IHNpbkEgPSBNYXRoLnNpbihhbmdsZSk7XG4gICAgICAgICAgICBjb25zdCBjb3NBID0gTWF0aC5jb3MoYW5nbGUpO1xuICAgICAgICAgICAgdHJhbnNsYXRlID0gW1xuICAgICAgICAgICAgICAgIHRyYW5zbGF0ZVswXSAqIGNvc0EgLSB0cmFuc2xhdGVbMV0gKiBzaW5BLFxuICAgICAgICAgICAgICAgIHRyYW5zbGF0ZVswXSAqIHNpbkEgKyB0cmFuc2xhdGVbMV0gKiBjb3NBXG4gICAgICAgICAgICBdO1xuICAgICAgICB9XG5cbiAgICAgICAgY29uc3QgdHJhbnNsYXRpb24gPSBbXG4gICAgICAgICAgICBpblZpZXdwb3J0UGl4ZWxVbml0c1VuaXRzID8gdHJhbnNsYXRlWzBdIDogcGl4ZWxzVG9UaWxlVW5pdHModGlsZSwgdHJhbnNsYXRlWzBdLCB0aGlzLnRyYW5zZm9ybS56b29tKSxcbiAgICAgICAgICAgIGluVmlld3BvcnRQaXhlbFVuaXRzVW5pdHMgPyB0cmFuc2xhdGVbMV0gOiBwaXhlbHNUb1RpbGVVbml0cyh0aWxlLCB0cmFuc2xhdGVbMV0sIHRoaXMudHJhbnNmb3JtLnpvb20pLFxuICAgICAgICAgICAgMFxuICAgICAgICBdO1xuXG4gICAgICAgIGNvbnN0IHRyYW5zbGF0ZWRNYXRyaXggPSBuZXcgRmxvYXQzMkFycmF5KDE2KTtcbiAgICAgICAgbWF0NC50cmFuc2xhdGUodHJhbnNsYXRlZE1hdHJpeCwgbWF0cml4LCB0cmFuc2xhdGlvbik7XG4gICAgICAgIHJldHVybiB0cmFuc2xhdGVkTWF0cml4O1xuICAgIH1cblxuICAgIHNhdmVUaWxlVGV4dHVyZSh0ZXh0dXJlOiBUZXh0dXJlKSB7XG4gICAgICAgIGNvbnN0IHRleHR1cmVzID0gdGhpcy5fdGlsZVRleHR1cmVzW3RleHR1cmUuc2l6ZVswXV07XG4gICAgICAgIGlmICghdGV4dHVyZXMpIHtcbiAgICAgICAgICAgIHRoaXMuX3RpbGVUZXh0dXJlc1t0ZXh0dXJlLnNpemVbMF1dID0gW3RleHR1cmVdO1xuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgdGV4dHVyZXMucHVzaCh0ZXh0dXJlKTtcbiAgICAgICAgfVxuICAgIH1cblxuICAgIGdldFRpbGVUZXh0dXJlKHNpemU6IG51bWJlcikge1xuICAgICAgICBjb25zdCB0ZXh0dXJlcyA9IHRoaXMuX3RpbGVUZXh0dXJlc1tzaXplXTtcbiAgICAgICAgcmV0dXJuIHRleHR1cmVzICYmIHRleHR1cmVzLmxlbmd0aCA+IDAgPyB0ZXh0dXJlcy5wb3AoKSA6IG51bGw7XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogQ2hlY2tzIHdoZXRoZXIgYSBwYXR0ZXJuIGltYWdlIGlzIG5lZWRlZCwgYW5kIGlmIGl0IGlzLCB3aGV0aGVyIGl0IGlzIG5vdCBsb2FkZWQuXG4gICAgICpcbiAgICAgKiBAcmV0dXJucyB0cnVlIGlmIGEgbmVlZGVkIGltYWdlIGlzIG1pc3NpbmcgYW5kIHJlbmRlcmluZyBuZWVkcyB0byBiZSBza2lwcGVkLlxuICAgICAqL1xuICAgIGlzUGF0dGVybk1pc3NpbmcoaW1hZ2U6ID9Dcm9zc0ZhZGVkPHN0cmluZz4pOiBib29sZWFuIHtcbiAgICAgICAgaWYgKCFpbWFnZSkgcmV0dXJuIGZhbHNlO1xuICAgICAgICBjb25zdCBpbWFnZVBvc0EgPSB0aGlzLmltYWdlTWFuYWdlci5nZXRQYXR0ZXJuKGltYWdlLmZyb20pO1xuICAgICAgICBjb25zdCBpbWFnZVBvc0IgPSB0aGlzLmltYWdlTWFuYWdlci5nZXRQYXR0ZXJuKGltYWdlLnRvKTtcbiAgICAgICAgcmV0dXJuICFpbWFnZVBvc0EgfHwgIWltYWdlUG9zQjtcbiAgICB9XG5cbiAgICB1c2VQcm9ncmFtKG5hbWU6IHN0cmluZywgcHJvZ3JhbUNvbmZpZ3VyYXRpb246IFByb2dyYW1Db25maWd1cmF0aW9uID0gdGhpcy5lbXB0eVByb2dyYW1Db25maWd1cmF0aW9uKTogUHJvZ3JhbTxhbnk+IHtcbiAgICAgICAgdGhpcy5jYWNoZSA9IHRoaXMuY2FjaGUgfHwge307XG4gICAgICAgIGNvbnN0IGtleSA9IGAke25hbWV9JHtwcm9ncmFtQ29uZmlndXJhdGlvbi5jYWNoZUtleSB8fCAnJ30ke3RoaXMuX3Nob3dPdmVyZHJhd0luc3BlY3RvciA/ICcvb3ZlcmRyYXcnIDogJyd9YDtcbiAgICAgICAgaWYgKCF0aGlzLmNhY2hlW2tleV0pIHtcbiAgICAgICAgICAgIHRoaXMuY2FjaGVba2V5XSA9IG5ldyBQcm9ncmFtKHRoaXMuY29udGV4dCwgc2hhZGVyc1tuYW1lXSwgcHJvZ3JhbUNvbmZpZ3VyYXRpb24sIHByb2dyYW1Vbmlmb3Jtc1tuYW1lXSwgdGhpcy5fc2hvd092ZXJkcmF3SW5zcGVjdG9yKTtcbiAgICAgICAgfVxuICAgICAgICByZXR1cm4gdGhpcy5jYWNoZVtrZXldO1xuICAgIH1cbn1cblxuZXhwb3J0IGRlZmF1bHQgUGFpbnRlcjtcbiIsIi8vIEBmbG93XG5cbmltcG9ydCBTdGVuY2lsTW9kZSBmcm9tICcuLi9nbC9zdGVuY2lsX21vZGUnO1xuaW1wb3J0IERlcHRoTW9kZSBmcm9tICcuLi9nbC9kZXB0aF9tb2RlJztcbmltcG9ydCB7IGNpcmNsZVVuaWZvcm1WYWx1ZXMgfSBmcm9tICcuL3Byb2dyYW0vY2lyY2xlX3Byb2dyYW0nO1xuXG5pbXBvcnQgdHlwZSBQYWludGVyIGZyb20gJy4vcGFpbnRlcic7XG5pbXBvcnQgdHlwZSBTb3VyY2VDYWNoZSBmcm9tICcuLi9zb3VyY2Uvc291cmNlX2NhY2hlJztcbmltcG9ydCB0eXBlIENpcmNsZVN0eWxlTGF5ZXIgZnJvbSAnLi4vc3R5bGUvc3R5bGVfbGF5ZXIvY2lyY2xlX3N0eWxlX2xheWVyJztcbmltcG9ydCB0eXBlIENpcmNsZUJ1Y2tldCBmcm9tICcuLi9kYXRhL2J1Y2tldC9jaXJjbGVfYnVja2V0JztcbmltcG9ydCB0eXBlIHtPdmVyc2NhbGVkVGlsZUlEfSBmcm9tICcuLi9zb3VyY2UvdGlsZV9pZCc7XG5cbmV4cG9ydCBkZWZhdWx0IGRyYXdDaXJjbGVzO1xuXG5mdW5jdGlvbiBkcmF3Q2lyY2xlcyhwYWludGVyOiBQYWludGVyLCBzb3VyY2VDYWNoZTogU291cmNlQ2FjaGUsIGxheWVyOiBDaXJjbGVTdHlsZUxheWVyLCBjb29yZHM6IEFycmF5PE92ZXJzY2FsZWRUaWxlSUQ+KSB7XG4gICAgaWYgKHBhaW50ZXIucmVuZGVyUGFzcyAhPT0gJ3RyYW5zbHVjZW50JykgcmV0dXJuO1xuXG4gICAgY29uc3Qgb3BhY2l0eSA9IGxheWVyLnBhaW50LmdldCgnY2lyY2xlLW9wYWNpdHknKTtcbiAgICBjb25zdCBzdHJva2VXaWR0aCA9IGxheWVyLnBhaW50LmdldCgnY2lyY2xlLXN0cm9rZS13aWR0aCcpO1xuICAgIGNvbnN0IHN0cm9rZU9wYWNpdHkgPSBsYXllci5wYWludC5nZXQoJ2NpcmNsZS1zdHJva2Utb3BhY2l0eScpO1xuXG4gICAgaWYgKG9wYWNpdHkuY29uc3RhbnRPcigxKSA9PT0gMCAmJiAoc3Ryb2tlV2lkdGguY29uc3RhbnRPcigxKSA9PT0gMCB8fCBzdHJva2VPcGFjaXR5LmNvbnN0YW50T3IoMSkgPT09IDApKSB7XG4gICAgICAgIHJldHVybjtcbiAgICB9XG5cbiAgICBjb25zdCBjb250ZXh0ID0gcGFpbnRlci5jb250ZXh0O1xuICAgIGNvbnN0IGdsID0gY29udGV4dC5nbDtcblxuICAgIGNvbnN0IGRlcHRoTW9kZSA9IHBhaW50ZXIuZGVwdGhNb2RlRm9yU3VibGF5ZXIoMCwgRGVwdGhNb2RlLlJlYWRPbmx5KTtcbiAgICAvLyBUdXJuIG9mZiBzdGVuY2lsIHRlc3RpbmcgdG8gYWxsb3cgY2lyY2xlcyB0byBiZSBkcmF3biBhY3Jvc3MgYm91bmRhcmllcyxcbiAgICAvLyBzbyB0aGF0IGxhcmdlIGNpcmNsZXMgYXJlIG5vdCBjbGlwcGVkIHRvIHRpbGVzXG4gICAgY29uc3Qgc3RlbmNpbE1vZGUgPSBTdGVuY2lsTW9kZS5kaXNhYmxlZDtcbiAgICBjb25zdCBjb2xvck1vZGUgPSBwYWludGVyLmNvbG9yTW9kZUZvclJlbmRlclBhc3MoKTtcblxuICAgIGZvciAobGV0IGkgPSAwOyBpIDwgY29vcmRzLmxlbmd0aDsgaSsrKSB7XG4gICAgICAgIGNvbnN0IGNvb3JkID0gY29vcmRzW2ldO1xuXG4gICAgICAgIGNvbnN0IHRpbGUgPSBzb3VyY2VDYWNoZS5nZXRUaWxlKGNvb3JkKTtcbiAgICAgICAgY29uc3QgYnVja2V0OiA/Q2lyY2xlQnVja2V0PCo+ID0gKHRpbGUuZ2V0QnVja2V0KGxheWVyKTogYW55KTtcbiAgICAgICAgaWYgKCFidWNrZXQpIGNvbnRpbnVlO1xuXG4gICAgICAgIGNvbnN0IHByb2dyYW1Db25maWd1cmF0aW9uID0gYnVja2V0LnByb2dyYW1Db25maWd1cmF0aW9ucy5nZXQobGF5ZXIuaWQpO1xuICAgICAgICBjb25zdCBwcm9ncmFtID0gcGFpbnRlci51c2VQcm9ncmFtKCdjaXJjbGUnLCBwcm9ncmFtQ29uZmlndXJhdGlvbik7XG5cbiAgICAgICAgcHJvZ3JhbS5kcmF3KGNvbnRleHQsIGdsLlRSSUFOR0xFUywgZGVwdGhNb2RlLCBzdGVuY2lsTW9kZSwgY29sb3JNb2RlLFxuICAgICAgICAgICAgY2lyY2xlVW5pZm9ybVZhbHVlcyhwYWludGVyLCBjb29yZCwgdGlsZSwgbGF5ZXIpLCBsYXllci5pZCxcbiAgICAgICAgICAgIGJ1Y2tldC5sYXlvdXRWZXJ0ZXhCdWZmZXIsIGJ1Y2tldC5pbmRleEJ1ZmZlciwgYnVja2V0LnNlZ21lbnRzLFxuICAgICAgICAgICAgbGF5ZXIucGFpbnQsIHBhaW50ZXIudHJhbnNmb3JtLnpvb20sIHByb2dyYW1Db25maWd1cmF0aW9uKTtcbiAgICB9XG59XG4iLCIvLyBAZmxvd1xuXG5pbXBvcnQgVGV4dHVyZSBmcm9tICcuL3RleHR1cmUnO1xuaW1wb3J0IENvbG9yIGZyb20gJy4uL3N0eWxlLXNwZWMvdXRpbC9jb2xvcic7XG5pbXBvcnQgRGVwdGhNb2RlIGZyb20gJy4uL2dsL2RlcHRoX21vZGUnO1xuaW1wb3J0IFN0ZW5jaWxNb2RlIGZyb20gJy4uL2dsL3N0ZW5jaWxfbW9kZSc7XG5pbXBvcnQgQ29sb3JNb2RlIGZyb20gJy4uL2dsL2NvbG9yX21vZGUnO1xuaW1wb3J0IHtcbiAgICBoZWF0bWFwVW5pZm9ybVZhbHVlcyxcbiAgICBoZWF0bWFwVGV4dHVyZVVuaWZvcm1WYWx1ZXNcbn0gZnJvbSAnLi9wcm9ncmFtL2hlYXRtYXBfcHJvZ3JhbSc7XG5cbmltcG9ydCB0eXBlIFBhaW50ZXIgZnJvbSAnLi9wYWludGVyJztcbmltcG9ydCB0eXBlIFNvdXJjZUNhY2hlIGZyb20gJy4uL3NvdXJjZS9zb3VyY2VfY2FjaGUnO1xuaW1wb3J0IHR5cGUgSGVhdG1hcFN0eWxlTGF5ZXIgZnJvbSAnLi4vc3R5bGUvc3R5bGVfbGF5ZXIvaGVhdG1hcF9zdHlsZV9sYXllcic7XG5pbXBvcnQgdHlwZSBIZWF0bWFwQnVja2V0IGZyb20gJy4uL2RhdGEvYnVja2V0L2hlYXRtYXBfYnVja2V0JztcbmltcG9ydCB0eXBlIHtPdmVyc2NhbGVkVGlsZUlEfSBmcm9tICcuLi9zb3VyY2UvdGlsZV9pZCc7XG5cbmV4cG9ydCBkZWZhdWx0IGRyYXdIZWF0bWFwO1xuXG5mdW5jdGlvbiBkcmF3SGVhdG1hcChwYWludGVyOiBQYWludGVyLCBzb3VyY2VDYWNoZTogU291cmNlQ2FjaGUsIGxheWVyOiBIZWF0bWFwU3R5bGVMYXllciwgY29vcmRzOiBBcnJheTxPdmVyc2NhbGVkVGlsZUlEPikge1xuICAgIGlmIChsYXllci5wYWludC5nZXQoJ2hlYXRtYXAtb3BhY2l0eScpID09PSAwKSB7XG4gICAgICAgIHJldHVybjtcbiAgICB9XG5cbiAgICBpZiAocGFpbnRlci5yZW5kZXJQYXNzID09PSAnb2Zmc2NyZWVuJykge1xuICAgICAgICBjb25zdCBjb250ZXh0ID0gcGFpbnRlci5jb250ZXh0O1xuICAgICAgICBjb25zdCBnbCA9IGNvbnRleHQuZ2w7XG5cbiAgICAgICAgY29uc3QgZGVwdGhNb2RlID0gcGFpbnRlci5kZXB0aE1vZGVGb3JTdWJsYXllcigwLCBEZXB0aE1vZGUuUmVhZE9ubHkpO1xuICAgICAgICAvLyBBbGxvdyBrZXJuZWxzIHRvIGJlIGRyYXduIGFjcm9zcyBib3VuZGFyaWVzLCBzbyB0aGF0XG4gICAgICAgIC8vIGxhcmdlIGtlcm5lbHMgYXJlIG5vdCBjbGlwcGVkIHRvIHRpbGVzXG4gICAgICAgIGNvbnN0IHN0ZW5jaWxNb2RlID0gU3RlbmNpbE1vZGUuZGlzYWJsZWQ7XG4gICAgICAgIC8vIFR1cm4gb24gYWRkaXRpdmUgYmxlbmRpbmcgZm9yIGtlcm5lbHMsIHdoaWNoIGlzIGEga2V5IGFzcGVjdCBvZiBrZXJuZWwgZGVuc2l0eSBlc3RpbWF0aW9uIGZvcm11bGFcbiAgICAgICAgY29uc3QgY29sb3JNb2RlID0gbmV3IENvbG9yTW9kZShbZ2wuT05FLCBnbC5PTkVdLCBDb2xvci50cmFuc3BhcmVudCwgW3RydWUsIHRydWUsIHRydWUsIHRydWVdKTtcblxuICAgICAgICBiaW5kRnJhbWVidWZmZXIoY29udGV4dCwgcGFpbnRlciwgbGF5ZXIpO1xuXG4gICAgICAgIGNvbnRleHQuY2xlYXIoeyBjb2xvcjogQ29sb3IudHJhbnNwYXJlbnQgfSk7XG5cbiAgICAgICAgZm9yIChsZXQgaSA9IDA7IGkgPCBjb29yZHMubGVuZ3RoOyBpKyspIHtcbiAgICAgICAgICAgIGNvbnN0IGNvb3JkID0gY29vcmRzW2ldO1xuXG4gICAgICAgICAgICAvLyBTa2lwIHRpbGVzIHRoYXQgaGF2ZSB1bmNvdmVyZWQgcGFyZW50cyB0byBhdm9pZCBmbGlja2VyaW5nOyB3ZSBkb24ndCBuZWVkXG4gICAgICAgICAgICAvLyB0byB1c2UgY29tcGxleCB0aWxlIG1hc2tpbmcgaGVyZSBiZWNhdXNlIHRoZSBjaGFuZ2UgYmV0d2VlbiB6b29tIGxldmVscyBpcyBzdWJ0bGUsXG4gICAgICAgICAgICAvLyBzbyBpdCdzIGZpbmUgdG8gc2ltcGx5IHJlbmRlciB0aGUgcGFyZW50IHVudGlsIGFsbCBpdHMgNCBjaGlsZHJlbiBhcmUgbG9hZGVkXG4gICAgICAgICAgICBpZiAoc291cmNlQ2FjaGUuaGFzUmVuZGVyYWJsZVBhcmVudChjb29yZCkpIGNvbnRpbnVlO1xuXG4gICAgICAgICAgICBjb25zdCB0aWxlID0gc291cmNlQ2FjaGUuZ2V0VGlsZShjb29yZCk7XG4gICAgICAgICAgICBjb25zdCBidWNrZXQ6ID9IZWF0bWFwQnVja2V0ID0gKHRpbGUuZ2V0QnVja2V0KGxheWVyKTogYW55KTtcbiAgICAgICAgICAgIGlmICghYnVja2V0KSBjb250aW51ZTtcblxuICAgICAgICAgICAgY29uc3QgcHJvZ3JhbUNvbmZpZ3VyYXRpb24gPSBidWNrZXQucHJvZ3JhbUNvbmZpZ3VyYXRpb25zLmdldChsYXllci5pZCk7XG4gICAgICAgICAgICBjb25zdCBwcm9ncmFtID0gcGFpbnRlci51c2VQcm9ncmFtKCdoZWF0bWFwJywgcHJvZ3JhbUNvbmZpZ3VyYXRpb24pO1xuICAgICAgICAgICAgY29uc3Qge3pvb219ID0gcGFpbnRlci50cmFuc2Zvcm07XG5cbiAgICAgICAgICAgIHByb2dyYW0uZHJhdyhjb250ZXh0LCBnbC5UUklBTkdMRVMsIGRlcHRoTW9kZSwgc3RlbmNpbE1vZGUsIGNvbG9yTW9kZSxcbiAgICAgICAgICAgICAgICBoZWF0bWFwVW5pZm9ybVZhbHVlcyhjb29yZC5wb3NNYXRyaXgsXG4gICAgICAgICAgICAgICAgICAgIHRpbGUsIHpvb20sIGxheWVyLnBhaW50LmdldCgnaGVhdG1hcC1pbnRlbnNpdHknKSksXG4gICAgICAgICAgICAgICAgbGF5ZXIuaWQsIGJ1Y2tldC5sYXlvdXRWZXJ0ZXhCdWZmZXIsIGJ1Y2tldC5pbmRleEJ1ZmZlcixcbiAgICAgICAgICAgICAgICBidWNrZXQuc2VnbWVudHMsIGxheWVyLnBhaW50LCBwYWludGVyLnRyYW5zZm9ybS56b29tLFxuICAgICAgICAgICAgICAgIHByb2dyYW1Db25maWd1cmF0aW9uKTtcbiAgICAgICAgfVxuXG4gICAgICAgIGNvbnRleHQudmlld3BvcnQuc2V0KFswLCAwLCBwYWludGVyLndpZHRoLCBwYWludGVyLmhlaWdodF0pO1xuXG4gICAgfSBlbHNlIGlmIChwYWludGVyLnJlbmRlclBhc3MgPT09ICd0cmFuc2x1Y2VudCcpIHtcbiAgICAgICAgcGFpbnRlci5jb250ZXh0LnNldENvbG9yTW9kZShwYWludGVyLmNvbG9yTW9kZUZvclJlbmRlclBhc3MoKSk7XG4gICAgICAgIHJlbmRlclRleHR1cmVUb01hcChwYWludGVyLCBsYXllcik7XG4gICAgfVxufVxuXG5mdW5jdGlvbiBiaW5kRnJhbWVidWZmZXIoY29udGV4dCwgcGFpbnRlciwgbGF5ZXIpIHtcbiAgICBjb25zdCBnbCA9IGNvbnRleHQuZ2w7XG4gICAgY29udGV4dC5hY3RpdmVUZXh0dXJlLnNldChnbC5URVhUVVJFMSk7XG5cbiAgICAvLyBVc2UgYSA0eCBkb3duc2NhbGVkIHNjcmVlbiB0ZXh0dXJlIGZvciBiZXR0ZXIgcGVyZm9ybWFuY2VcbiAgICBjb250ZXh0LnZpZXdwb3J0LnNldChbMCwgMCwgcGFpbnRlci53aWR0aCAvIDQsIHBhaW50ZXIuaGVpZ2h0IC8gNF0pO1xuXG4gICAgbGV0IGZibyA9IGxheWVyLmhlYXRtYXBGYm87XG5cbiAgICBpZiAoIWZibykge1xuICAgICAgICBjb25zdCB0ZXh0dXJlID0gZ2wuY3JlYXRlVGV4dHVyZSgpO1xuICAgICAgICBnbC5iaW5kVGV4dHVyZShnbC5URVhUVVJFXzJELCB0ZXh0dXJlKTtcbiAgICAgICAgZ2wudGV4UGFyYW1ldGVyaShnbC5URVhUVVJFXzJELCBnbC5URVhUVVJFX1dSQVBfUywgZ2wuQ0xBTVBfVE9fRURHRSk7XG4gICAgICAgIGdsLnRleFBhcmFtZXRlcmkoZ2wuVEVYVFVSRV8yRCwgZ2wuVEVYVFVSRV9XUkFQX1QsIGdsLkNMQU1QX1RPX0VER0UpO1xuICAgICAgICBnbC50ZXhQYXJhbWV0ZXJpKGdsLlRFWFRVUkVfMkQsIGdsLlRFWFRVUkVfTUlOX0ZJTFRFUiwgZ2wuTElORUFSKTtcbiAgICAgICAgZ2wudGV4UGFyYW1ldGVyaShnbC5URVhUVVJFXzJELCBnbC5URVhUVVJFX01BR19GSUxURVIsIGdsLkxJTkVBUik7XG5cbiAgICAgICAgZmJvID0gbGF5ZXIuaGVhdG1hcEZibyA9IGNvbnRleHQuY3JlYXRlRnJhbWVidWZmZXIocGFpbnRlci53aWR0aCAvIDQsIHBhaW50ZXIuaGVpZ2h0IC8gNCk7XG5cbiAgICAgICAgYmluZFRleHR1cmVUb0ZyYW1lYnVmZmVyKGNvbnRleHQsIHBhaW50ZXIsIHRleHR1cmUsIGZibyk7XG5cbiAgICB9IGVsc2Uge1xuICAgICAgICBnbC5iaW5kVGV4dHVyZShnbC5URVhUVVJFXzJELCBmYm8uY29sb3JBdHRhY2htZW50LmdldCgpKTtcbiAgICAgICAgY29udGV4dC5iaW5kRnJhbWVidWZmZXIuc2V0KGZiby5mcmFtZWJ1ZmZlcik7XG4gICAgfVxufVxuXG5mdW5jdGlvbiBiaW5kVGV4dHVyZVRvRnJhbWVidWZmZXIoY29udGV4dCwgcGFpbnRlciwgdGV4dHVyZSwgZmJvKSB7XG4gICAgY29uc3QgZ2wgPSBjb250ZXh0LmdsO1xuICAgIC8vIFVzZSB0aGUgaGlnaGVyIHByZWNpc2lvbiBoYWxmLWZsb2F0IHRleHR1cmUgd2hlcmUgYXZhaWxhYmxlIChwcm9kdWNpbmcgbXVjaCBzbW9vdGhlciBsb29raW5nIGhlYXRtYXBzKTtcbiAgICBnbC50ZXhJbWFnZTJEKGdsLlRFWFRVUkVfMkQsIDAsIGdsLlJHQkEsIHBhaW50ZXIud2lkdGggLyA0LCBwYWludGVyLmhlaWdodCAvIDQsIDAsIGdsLlJHQkEsXG4gICAgICAgIGNvbnRleHQuZXh0VGV4dHVyZUhhbGZGbG9hdCA/IGNvbnRleHQuZXh0VGV4dHVyZUhhbGZGbG9hdC5IQUxGX0ZMT0FUX09FUyA6IGdsLlVOU0lHTkVEX0JZVEUsIG51bGwpO1xuXG4gICAgZmJvLmNvbG9yQXR0YWNobWVudC5zZXQodGV4dHVyZSk7XG5cbiAgICAvLyBJZiB1c2luZyBoYWxmLWZsb2F0IHRleHR1cmUgYXMgYSByZW5kZXIgdGFyZ2V0IGlzIG5vdCBzdXBwb3J0ZWQsIGZhbGwgYmFjayB0byBhIGxvdyBwcmVjaXNpb24gdGV4dHVyZVxuICAgIGlmIChjb250ZXh0LmV4dFRleHR1cmVIYWxmRmxvYXQgJiYgZ2wuY2hlY2tGcmFtZWJ1ZmZlclN0YXR1cyhnbC5GUkFNRUJVRkZFUikgIT09IGdsLkZSQU1FQlVGRkVSX0NPTVBMRVRFKSB7XG4gICAgICAgIGNvbnRleHQuZXh0VGV4dHVyZUhhbGZGbG9hdCA9IG51bGw7XG4gICAgICAgIGZiby5jb2xvckF0dGFjaG1lbnQuc2V0RGlydHkoKTtcbiAgICAgICAgYmluZFRleHR1cmVUb0ZyYW1lYnVmZmVyKGNvbnRleHQsIHBhaW50ZXIsIHRleHR1cmUsIGZibyk7XG4gICAgfVxufVxuXG5mdW5jdGlvbiByZW5kZXJUZXh0dXJlVG9NYXAocGFpbnRlciwgbGF5ZXIpIHtcbiAgICBjb25zdCBjb250ZXh0ID0gcGFpbnRlci5jb250ZXh0O1xuICAgIGNvbnN0IGdsID0gY29udGV4dC5nbDtcblxuICAgIC8vIEhlcmUgd2UgYmluZCB0d28gZGlmZmVyZW50IHRleHR1cmVzIGZyb20gd2hpY2ggd2UnbGwgc2FtcGxlIGluIGRyYXdpbmdcbiAgICAvLyBoZWF0bWFwczogdGhlIGtlcm5lbCB0ZXh0dXJlLCBwcmVwYXJlZCBpbiB0aGUgb2Zmc2NyZWVuIHBhc3MsIGFuZCBhXG4gICAgLy8gY29sb3IgcmFtcCB0ZXh0dXJlLlxuICAgIGNvbnN0IGZibyA9IGxheWVyLmhlYXRtYXBGYm87XG4gICAgaWYgKCFmYm8pIHJldHVybjtcbiAgICBjb250ZXh0LmFjdGl2ZVRleHR1cmUuc2V0KGdsLlRFWFRVUkUwKTtcbiAgICBnbC5iaW5kVGV4dHVyZShnbC5URVhUVVJFXzJELCBmYm8uY29sb3JBdHRhY2htZW50LmdldCgpKTtcblxuICAgIGNvbnRleHQuYWN0aXZlVGV4dHVyZS5zZXQoZ2wuVEVYVFVSRTEpO1xuICAgIGxldCBjb2xvclJhbXBUZXh0dXJlID0gbGF5ZXIuY29sb3JSYW1wVGV4dHVyZTtcbiAgICBpZiAoIWNvbG9yUmFtcFRleHR1cmUpIHtcbiAgICAgICAgY29sb3JSYW1wVGV4dHVyZSA9IGxheWVyLmNvbG9yUmFtcFRleHR1cmUgPSBuZXcgVGV4dHVyZShjb250ZXh0LCBsYXllci5jb2xvclJhbXAsIGdsLlJHQkEpO1xuICAgIH1cbiAgICBjb2xvclJhbXBUZXh0dXJlLmJpbmQoZ2wuTElORUFSLCBnbC5DTEFNUF9UT19FREdFKTtcblxuICAgIHBhaW50ZXIudXNlUHJvZ3JhbSgnaGVhdG1hcFRleHR1cmUnKS5kcmF3KGNvbnRleHQsIGdsLlRSSUFOR0xFUyxcbiAgICAgICAgRGVwdGhNb2RlLmRpc2FibGVkLCBTdGVuY2lsTW9kZS5kaXNhYmxlZCwgcGFpbnRlci5jb2xvck1vZGVGb3JSZW5kZXJQYXNzKCksXG4gICAgICAgIGhlYXRtYXBUZXh0dXJlVW5pZm9ybVZhbHVlcyhwYWludGVyLCBsYXllciwgMCwgMSksXG4gICAgICAgIGxheWVyLmlkLCBwYWludGVyLnZpZXdwb3J0QnVmZmVyLCBwYWludGVyLnF1YWRUcmlhbmdsZUluZGV4QnVmZmVyLFxuICAgICAgICBwYWludGVyLnZpZXdwb3J0U2VnbWVudHMsIGxheWVyLnBhaW50LCBwYWludGVyLnRyYW5zZm9ybS56b29tKTtcbn1cbiIsIi8vIEBmbG93XG5cbmltcG9ydCBEZXB0aE1vZGUgZnJvbSAnLi4vZ2wvZGVwdGhfbW9kZSc7XG5pbXBvcnQgVGV4dHVyZSBmcm9tICcuL3RleHR1cmUnO1xuaW1wb3J0IHtcbiAgICBsaW5lVW5pZm9ybVZhbHVlcyxcbiAgICBsaW5lUGF0dGVyblVuaWZvcm1WYWx1ZXMsXG4gICAgbGluZVNERlVuaWZvcm1WYWx1ZXMsXG4gICAgbGluZUdyYWRpZW50VW5pZm9ybVZhbHVlc1xufSBmcm9tICcuL3Byb2dyYW0vbGluZV9wcm9ncmFtJztcblxuaW1wb3J0IHR5cGUgUGFpbnRlciBmcm9tICcuL3BhaW50ZXInO1xuaW1wb3J0IHR5cGUgU291cmNlQ2FjaGUgZnJvbSAnLi4vc291cmNlL3NvdXJjZV9jYWNoZSc7XG5pbXBvcnQgdHlwZSBMaW5lU3R5bGVMYXllciBmcm9tICcuLi9zdHlsZS9zdHlsZV9sYXllci9saW5lX3N0eWxlX2xheWVyJztcbmltcG9ydCB0eXBlIExpbmVCdWNrZXQgZnJvbSAnLi4vZGF0YS9idWNrZXQvbGluZV9idWNrZXQnO1xuaW1wb3J0IHR5cGUge092ZXJzY2FsZWRUaWxlSUR9IGZyb20gJy4uL3NvdXJjZS90aWxlX2lkJztcblxuZXhwb3J0IGRlZmF1bHQgZnVuY3Rpb24gZHJhd0xpbmUocGFpbnRlcjogUGFpbnRlciwgc291cmNlQ2FjaGU6IFNvdXJjZUNhY2hlLCBsYXllcjogTGluZVN0eWxlTGF5ZXIsIGNvb3JkczogQXJyYXk8T3ZlcnNjYWxlZFRpbGVJRD4pIHtcbiAgICBpZiAocGFpbnRlci5yZW5kZXJQYXNzICE9PSAndHJhbnNsdWNlbnQnKSByZXR1cm47XG5cbiAgICBjb25zdCBvcGFjaXR5ID0gbGF5ZXIucGFpbnQuZ2V0KCdsaW5lLW9wYWNpdHknKTtcbiAgICBjb25zdCB3aWR0aCA9IGxheWVyLnBhaW50LmdldCgnbGluZS13aWR0aCcpO1xuICAgIGlmIChvcGFjaXR5LmNvbnN0YW50T3IoMSkgPT09IDAgfHwgd2lkdGguY29uc3RhbnRPcigxKSA9PT0gMCkgcmV0dXJuO1xuXG4gICAgY29uc3QgZGVwdGhNb2RlID0gcGFpbnRlci5kZXB0aE1vZGVGb3JTdWJsYXllcigwLCBEZXB0aE1vZGUuUmVhZE9ubHkpO1xuICAgIGNvbnN0IGNvbG9yTW9kZSA9IHBhaW50ZXIuY29sb3JNb2RlRm9yUmVuZGVyUGFzcygpO1xuXG4gICAgY29uc3QgZGFzaGFycmF5ID0gbGF5ZXIucGFpbnQuZ2V0KCdsaW5lLWRhc2hhcnJheScpO1xuICAgIGNvbnN0IHBhdHRlcm5Qcm9wZXJ0eSA9IGxheWVyLnBhaW50LmdldCgnbGluZS1wYXR0ZXJuJyk7XG4gICAgY29uc3QgaW1hZ2UgPSBwYXR0ZXJuUHJvcGVydHkuY29uc3RhbnRPcigoMTogYW55KSk7XG5cbiAgICBjb25zdCBncmFkaWVudCA9IGxheWVyLnBhaW50LmdldCgnbGluZS1ncmFkaWVudCcpO1xuICAgIGNvbnN0IGNyb3NzZmFkZSA9IGxheWVyLmdldENyb3NzZmFkZVBhcmFtZXRlcnMoKTtcblxuICAgIGNvbnN0IHByb2dyYW1JZCA9XG4gICAgICAgIGRhc2hhcnJheSA/ICdsaW5lU0RGJyA6XG4gICAgICAgIGltYWdlID8gJ2xpbmVQYXR0ZXJuJyA6XG4gICAgICAgIGdyYWRpZW50ID8gJ2xpbmVHcmFkaWVudCcgOiAnbGluZSc7XG5cbiAgICBjb25zdCBjb250ZXh0ID0gcGFpbnRlci5jb250ZXh0O1xuICAgIGNvbnN0IGdsID0gY29udGV4dC5nbDtcblxuICAgIGxldCBmaXJzdFRpbGUgPSB0cnVlO1xuXG4gICAgaWYgKGdyYWRpZW50KSB7XG4gICAgICAgIGNvbnRleHQuYWN0aXZlVGV4dHVyZS5zZXQoZ2wuVEVYVFVSRTApO1xuXG4gICAgICAgIGxldCBncmFkaWVudFRleHR1cmUgPSBsYXllci5ncmFkaWVudFRleHR1cmU7XG4gICAgICAgIGlmICghbGF5ZXIuZ3JhZGllbnQpIHJldHVybjtcbiAgICAgICAgaWYgKCFncmFkaWVudFRleHR1cmUpIGdyYWRpZW50VGV4dHVyZSA9IGxheWVyLmdyYWRpZW50VGV4dHVyZSA9IG5ldyBUZXh0dXJlKGNvbnRleHQsIGxheWVyLmdyYWRpZW50LCBnbC5SR0JBKTtcbiAgICAgICAgZ3JhZGllbnRUZXh0dXJlLmJpbmQoZ2wuTElORUFSLCBnbC5DTEFNUF9UT19FREdFKTtcbiAgICB9XG5cbiAgICBmb3IgKGNvbnN0IGNvb3JkIG9mIGNvb3Jkcykge1xuICAgICAgICBjb25zdCB0aWxlID0gc291cmNlQ2FjaGUuZ2V0VGlsZShjb29yZCk7XG5cbiAgICAgICAgaWYgKGltYWdlICYmICF0aWxlLnBhdHRlcm5zTG9hZGVkKCkpIGNvbnRpbnVlO1xuXG4gICAgICAgIGNvbnN0IGJ1Y2tldDogP0xpbmVCdWNrZXQgPSAodGlsZS5nZXRCdWNrZXQobGF5ZXIpOiBhbnkpO1xuICAgICAgICBpZiAoIWJ1Y2tldCkgY29udGludWU7XG5cbiAgICAgICAgY29uc3QgcHJvZ3JhbUNvbmZpZ3VyYXRpb24gPSBidWNrZXQucHJvZ3JhbUNvbmZpZ3VyYXRpb25zLmdldChsYXllci5pZCk7XG4gICAgICAgIGNvbnN0IHByZXZQcm9ncmFtID0gcGFpbnRlci5jb250ZXh0LnByb2dyYW0uZ2V0KCk7XG4gICAgICAgIGNvbnN0IHByb2dyYW0gPSBwYWludGVyLnVzZVByb2dyYW0ocHJvZ3JhbUlkLCBwcm9ncmFtQ29uZmlndXJhdGlvbik7XG4gICAgICAgIGNvbnN0IHByb2dyYW1DaGFuZ2VkID0gZmlyc3RUaWxlIHx8IHByb2dyYW0ucHJvZ3JhbSAhPT0gcHJldlByb2dyYW07XG5cbiAgICAgICAgY29uc3QgY29uc3RhbnRQYXR0ZXJuID0gcGF0dGVyblByb3BlcnR5LmNvbnN0YW50T3IobnVsbCk7XG4gICAgICAgIGlmIChjb25zdGFudFBhdHRlcm4gJiYgdGlsZS5pbWFnZUF0bGFzKSB7XG4gICAgICAgICAgICBjb25zdCBwb3NUbyA9IHRpbGUuaW1hZ2VBdGxhcy5wYXR0ZXJuUG9zaXRpb25zW2NvbnN0YW50UGF0dGVybi50b107XG4gICAgICAgICAgICBjb25zdCBwb3NGcm9tID0gdGlsZS5pbWFnZUF0bGFzLnBhdHRlcm5Qb3NpdGlvbnNbY29uc3RhbnRQYXR0ZXJuLmZyb21dO1xuICAgICAgICAgICAgaWYgKHBvc1RvICYmIHBvc0Zyb20pIHByb2dyYW1Db25maWd1cmF0aW9uLnNldENvbnN0YW50UGF0dGVyblBvc2l0aW9ucyhwb3NUbywgcG9zRnJvbSk7XG4gICAgICAgIH1cblxuICAgICAgICBjb25zdCB1bmlmb3JtVmFsdWVzID0gZGFzaGFycmF5ID8gbGluZVNERlVuaWZvcm1WYWx1ZXMocGFpbnRlciwgdGlsZSwgbGF5ZXIsIGRhc2hhcnJheSwgY3Jvc3NmYWRlKSA6XG4gICAgICAgICAgICBpbWFnZSA/IGxpbmVQYXR0ZXJuVW5pZm9ybVZhbHVlcyhwYWludGVyLCB0aWxlLCBsYXllciwgY3Jvc3NmYWRlKSA6XG4gICAgICAgICAgICBncmFkaWVudCA/IGxpbmVHcmFkaWVudFVuaWZvcm1WYWx1ZXMocGFpbnRlciwgdGlsZSwgbGF5ZXIpIDpcbiAgICAgICAgICAgIGxpbmVVbmlmb3JtVmFsdWVzKHBhaW50ZXIsIHRpbGUsIGxheWVyKTtcblxuICAgICAgICBpZiAoZGFzaGFycmF5ICYmIChwcm9ncmFtQ2hhbmdlZCB8fCBwYWludGVyLmxpbmVBdGxhcy5kaXJ0eSkpIHtcbiAgICAgICAgICAgIGNvbnRleHQuYWN0aXZlVGV4dHVyZS5zZXQoZ2wuVEVYVFVSRTApO1xuICAgICAgICAgICAgcGFpbnRlci5saW5lQXRsYXMuYmluZChjb250ZXh0KTtcbiAgICAgICAgfSBlbHNlIGlmIChpbWFnZSkge1xuICAgICAgICAgICAgY29udGV4dC5hY3RpdmVUZXh0dXJlLnNldChnbC5URVhUVVJFMCk7XG4gICAgICAgICAgICB0aWxlLmltYWdlQXRsYXNUZXh0dXJlLmJpbmQoZ2wuTElORUFSLCBnbC5DTEFNUF9UT19FREdFKTtcbiAgICAgICAgICAgIHByb2dyYW1Db25maWd1cmF0aW9uLnVwZGF0ZVBhdHRlcm5QYWludEJ1ZmZlcnMoY3Jvc3NmYWRlKTtcbiAgICAgICAgfVxuXG4gICAgICAgIHByb2dyYW0uZHJhdyhjb250ZXh0LCBnbC5UUklBTkdMRVMsIGRlcHRoTW9kZSxcbiAgICAgICAgICAgIHBhaW50ZXIuc3RlbmNpbE1vZGVGb3JDbGlwcGluZyhjb29yZCksIGNvbG9yTW9kZSwgdW5pZm9ybVZhbHVlcyxcbiAgICAgICAgICAgIGxheWVyLmlkLCBidWNrZXQubGF5b3V0VmVydGV4QnVmZmVyLCBidWNrZXQuaW5kZXhCdWZmZXIsIGJ1Y2tldC5zZWdtZW50cyxcbiAgICAgICAgICAgIGxheWVyLnBhaW50LCBwYWludGVyLnRyYW5zZm9ybS56b29tLCBwcm9ncmFtQ29uZmlndXJhdGlvbik7XG5cbiAgICAgICAgZmlyc3RUaWxlID0gZmFsc2U7XG4gICAgICAgIC8vIG9uY2UgcmVmYWN0b3JlZCBzbyB0aGF0IGJvdW5kIHRleHR1cmUgc3RhdGUgaXMgbWFuYWdlZCwgd2UnbGwgYWxzbyBiZSBhYmxlIHRvIHJlbW92ZSB0aGlzIGZpcnN0VGlsZS9wcm9ncmFtQ2hhbmdlZCBsb2dpY1xuICAgIH1cbn1cbiIsIi8vIEBmbG93XG5pbXBvcnQgVGV4dHVyZSBmcm9tICcuL3RleHR1cmUnO1xuaW1wb3J0IENvbG9yIGZyb20gJy4uL3N0eWxlLXNwZWMvdXRpbC9jb2xvcic7XG5pbXBvcnQgRGVwdGhNb2RlIGZyb20gJy4uL2dsL2RlcHRoX21vZGUnO1xuaW1wb3J0IFN0ZW5jaWxNb2RlIGZyb20gJy4uL2dsL3N0ZW5jaWxfbW9kZSc7XG5pbXBvcnQge1xuICAgIGZpbGxFeHRydXNpb25Vbmlmb3JtVmFsdWVzLFxuICAgIGZpbGxFeHRydXNpb25QYXR0ZXJuVW5pZm9ybVZhbHVlcyxcbiAgICBleHRydXNpb25UZXh0dXJlVW5pZm9ybVZhbHVlc1xufSBmcm9tICcuL3Byb2dyYW0vZmlsbF9leHRydXNpb25fcHJvZ3JhbSc7XG5cbmltcG9ydCB0eXBlIFBhaW50ZXIgZnJvbSAnLi9wYWludGVyJztcbmltcG9ydCB0eXBlIFNvdXJjZUNhY2hlIGZyb20gJy4uL3NvdXJjZS9zb3VyY2VfY2FjaGUnO1xuaW1wb3J0IHR5cGUgRmlsbEV4dHJ1c2lvblN0eWxlTGF5ZXIgZnJvbSAnLi4vc3R5bGUvc3R5bGVfbGF5ZXIvZmlsbF9leHRydXNpb25fc3R5bGVfbGF5ZXInO1xuaW1wb3J0IHR5cGUgRmlsbEV4dHJ1c2lvbkJ1Y2tldCBmcm9tICcuLi9kYXRhL2J1Y2tldC9maWxsX2V4dHJ1c2lvbl9idWNrZXQnO1xuaW1wb3J0IHR5cGUge092ZXJzY2FsZWRUaWxlSUR9IGZyb20gJy4uL3NvdXJjZS90aWxlX2lkJztcblxuZXhwb3J0IGRlZmF1bHQgZHJhdztcblxuZnVuY3Rpb24gZHJhdyhwYWludGVyOiBQYWludGVyLCBzb3VyY2U6IFNvdXJjZUNhY2hlLCBsYXllcjogRmlsbEV4dHJ1c2lvblN0eWxlTGF5ZXIsIGNvb3JkczogQXJyYXk8T3ZlcnNjYWxlZFRpbGVJRD4pIHtcbiAgICBpZiAobGF5ZXIucGFpbnQuZ2V0KCdmaWxsLWV4dHJ1c2lvbi1vcGFjaXR5JykgPT09IDApIHtcbiAgICAgICAgcmV0dXJuO1xuICAgIH1cblxuICAgIGlmIChwYWludGVyLnJlbmRlclBhc3MgPT09ICdvZmZzY3JlZW4nKSB7XG4gICAgICAgIGRyYXdUb0V4dHJ1c2lvbkZyYW1lYnVmZmVyKHBhaW50ZXIsIGxheWVyKTtcblxuICAgICAgICBjb25zdCBkZXB0aE1vZGUgPSBuZXcgRGVwdGhNb2RlKHBhaW50ZXIuY29udGV4dC5nbC5MRVFVQUwsIERlcHRoTW9kZS5SZWFkV3JpdGUsIFswLCAxXSksXG4gICAgICAgICAgICBzdGVuY2lsTW9kZSA9IFN0ZW5jaWxNb2RlLmRpc2FibGVkLFxuICAgICAgICAgICAgY29sb3JNb2RlID0gcGFpbnRlci5jb2xvck1vZGVGb3JSZW5kZXJQYXNzKCk7XG5cbiAgICAgICAgZHJhd0V4dHJ1c2lvblRpbGVzKHBhaW50ZXIsIHNvdXJjZSwgbGF5ZXIsIGNvb3JkcywgZGVwdGhNb2RlLCBzdGVuY2lsTW9kZSwgY29sb3JNb2RlKTtcblxuICAgIH0gZWxzZSBpZiAocGFpbnRlci5yZW5kZXJQYXNzID09PSAndHJhbnNsdWNlbnQnKSB7XG4gICAgICAgIGRyYXdFeHRydXNpb25UZXh0dXJlKHBhaW50ZXIsIGxheWVyKTtcbiAgICB9XG59XG5cbmZ1bmN0aW9uIGRyYXdUb0V4dHJ1c2lvbkZyYW1lYnVmZmVyKHBhaW50ZXIsIGxheWVyKSB7XG4gICAgY29uc3QgY29udGV4dCA9IHBhaW50ZXIuY29udGV4dDtcbiAgICBjb25zdCBnbCA9IGNvbnRleHQuZ2w7XG5cbiAgICBsZXQgcmVuZGVyVGFyZ2V0ID0gbGF5ZXIudmlld3BvcnRGcmFtZTtcblxuICAgIGlmIChwYWludGVyLmRlcHRoUmJvTmVlZHNDbGVhcikge1xuICAgICAgICBwYWludGVyLnNldHVwT2Zmc2NyZWVuRGVwdGhSZW5kZXJidWZmZXIoKTtcbiAgICB9XG5cbiAgICBpZiAoIXJlbmRlclRhcmdldCkge1xuICAgICAgICBjb25zdCB0ZXh0dXJlID0gbmV3IFRleHR1cmUoY29udGV4dCwge3dpZHRoOiBwYWludGVyLndpZHRoLCBoZWlnaHQ6IHBhaW50ZXIuaGVpZ2h0LCBkYXRhOiBudWxsfSwgZ2wuUkdCQSk7XG4gICAgICAgIHRleHR1cmUuYmluZChnbC5MSU5FQVIsIGdsLkNMQU1QX1RPX0VER0UpO1xuXG4gICAgICAgIHJlbmRlclRhcmdldCA9IGxheWVyLnZpZXdwb3J0RnJhbWUgPSBjb250ZXh0LmNyZWF0ZUZyYW1lYnVmZmVyKHBhaW50ZXIud2lkdGgsIHBhaW50ZXIuaGVpZ2h0KTtcbiAgICAgICAgcmVuZGVyVGFyZ2V0LmNvbG9yQXR0YWNobWVudC5zZXQodGV4dHVyZS50ZXh0dXJlKTtcbiAgICB9XG5cbiAgICBjb250ZXh0LmJpbmRGcmFtZWJ1ZmZlci5zZXQocmVuZGVyVGFyZ2V0LmZyYW1lYnVmZmVyKTtcbiAgICByZW5kZXJUYXJnZXQuZGVwdGhBdHRhY2htZW50LnNldChwYWludGVyLmRlcHRoUmJvKTtcblxuICAgIGlmIChwYWludGVyLmRlcHRoUmJvTmVlZHNDbGVhcikge1xuICAgICAgICBjb250ZXh0LmNsZWFyKHsgZGVwdGg6IDEgfSk7XG4gICAgICAgIHBhaW50ZXIuZGVwdGhSYm9OZWVkc0NsZWFyID0gZmFsc2U7XG4gICAgfVxuXG4gICAgY29udGV4dC5jbGVhcih7IGNvbG9yOiBDb2xvci50cmFuc3BhcmVudCB9KTtcbn1cblxuZnVuY3Rpb24gZHJhd0V4dHJ1c2lvblRleHR1cmUocGFpbnRlciwgbGF5ZXIpIHtcbiAgICBjb25zdCByZW5kZXJlZFRleHR1cmUgPSBsYXllci52aWV3cG9ydEZyYW1lO1xuICAgIGlmICghcmVuZGVyZWRUZXh0dXJlKSByZXR1cm47XG5cbiAgICBjb25zdCBjb250ZXh0ID0gcGFpbnRlci5jb250ZXh0O1xuICAgIGNvbnN0IGdsID0gY29udGV4dC5nbDtcblxuICAgIGNvbnRleHQuYWN0aXZlVGV4dHVyZS5zZXQoZ2wuVEVYVFVSRTApO1xuICAgIGdsLmJpbmRUZXh0dXJlKGdsLlRFWFRVUkVfMkQsIHJlbmRlcmVkVGV4dHVyZS5jb2xvckF0dGFjaG1lbnQuZ2V0KCkpO1xuXG4gICAgcGFpbnRlci51c2VQcm9ncmFtKCdleHRydXNpb25UZXh0dXJlJykuZHJhdyhjb250ZXh0LCBnbC5UUklBTkdMRVMsXG4gICAgICAgIERlcHRoTW9kZS5kaXNhYmxlZCwgU3RlbmNpbE1vZGUuZGlzYWJsZWQsXG4gICAgICAgIHBhaW50ZXIuY29sb3JNb2RlRm9yUmVuZGVyUGFzcygpLFxuICAgICAgICBleHRydXNpb25UZXh0dXJlVW5pZm9ybVZhbHVlcyhwYWludGVyLCBsYXllciwgMCksXG4gICAgICAgIGxheWVyLmlkLCBwYWludGVyLnZpZXdwb3J0QnVmZmVyLCBwYWludGVyLnF1YWRUcmlhbmdsZUluZGV4QnVmZmVyLFxuICAgICAgICBwYWludGVyLnZpZXdwb3J0U2VnbWVudHMsIGxheWVyLnBhaW50LCBwYWludGVyLnRyYW5zZm9ybS56b29tKTtcbn1cblxuZnVuY3Rpb24gZHJhd0V4dHJ1c2lvblRpbGVzKHBhaW50ZXIsIHNvdXJjZSwgbGF5ZXIsIGNvb3JkcywgZGVwdGhNb2RlLCBzdGVuY2lsTW9kZSwgY29sb3JNb2RlKSB7XG4gICAgY29uc3QgY29udGV4dCA9IHBhaW50ZXIuY29udGV4dDtcbiAgICBjb25zdCBnbCA9IGNvbnRleHQuZ2w7XG4gICAgY29uc3QgcGF0dGVyblByb3BlcnR5ID0gbGF5ZXIucGFpbnQuZ2V0KCdmaWxsLWV4dHJ1c2lvbi1wYXR0ZXJuJyk7XG4gICAgY29uc3QgaW1hZ2UgPSBwYXR0ZXJuUHJvcGVydHkuY29uc3RhbnRPcigoMTogYW55KSk7XG4gICAgY29uc3QgY3Jvc3NmYWRlID0gbGF5ZXIuZ2V0Q3Jvc3NmYWRlUGFyYW1ldGVycygpO1xuXG4gICAgZm9yIChjb25zdCBjb29yZCBvZiBjb29yZHMpIHtcbiAgICAgICAgY29uc3QgdGlsZSA9IHNvdXJjZS5nZXRUaWxlKGNvb3JkKTtcbiAgICAgICAgY29uc3QgYnVja2V0OiA/RmlsbEV4dHJ1c2lvbkJ1Y2tldCA9ICh0aWxlLmdldEJ1Y2tldChsYXllcik6IGFueSk7XG4gICAgICAgIGlmICghYnVja2V0KSBjb250aW51ZTtcblxuICAgICAgICBjb25zdCBwcm9ncmFtQ29uZmlndXJhdGlvbiA9IGJ1Y2tldC5wcm9ncmFtQ29uZmlndXJhdGlvbnMuZ2V0KGxheWVyLmlkKTtcbiAgICAgICAgY29uc3QgcHJvZ3JhbSA9IHBhaW50ZXIudXNlUHJvZ3JhbShpbWFnZSA/ICdmaWxsRXh0cnVzaW9uUGF0dGVybicgOiAnZmlsbEV4dHJ1c2lvbicsIHByb2dyYW1Db25maWd1cmF0aW9uKTtcblxuICAgICAgICBpZiAoaW1hZ2UpIHtcbiAgICAgICAgICAgIHBhaW50ZXIuY29udGV4dC5hY3RpdmVUZXh0dXJlLnNldChnbC5URVhUVVJFMCk7XG4gICAgICAgICAgICB0aWxlLmltYWdlQXRsYXNUZXh0dXJlLmJpbmQoZ2wuTElORUFSLCBnbC5DTEFNUF9UT19FREdFKTtcbiAgICAgICAgICAgIHByb2dyYW1Db25maWd1cmF0aW9uLnVwZGF0ZVBhdHRlcm5QYWludEJ1ZmZlcnMoY3Jvc3NmYWRlKTtcbiAgICAgICAgfVxuXG4gICAgICAgIGNvbnN0IGNvbnN0YW50UGF0dGVybiA9IHBhdHRlcm5Qcm9wZXJ0eS5jb25zdGFudE9yKG51bGwpO1xuICAgICAgICBpZiAoY29uc3RhbnRQYXR0ZXJuICYmIHRpbGUuaW1hZ2VBdGxhcykge1xuICAgICAgICAgICAgY29uc3QgcG9zVG8gPSB0aWxlLmltYWdlQXRsYXMucGF0dGVyblBvc2l0aW9uc1tjb25zdGFudFBhdHRlcm4udG9dO1xuICAgICAgICAgICAgY29uc3QgcG9zRnJvbSA9IHRpbGUuaW1hZ2VBdGxhcy5wYXR0ZXJuUG9zaXRpb25zW2NvbnN0YW50UGF0dGVybi5mcm9tXTtcbiAgICAgICAgICAgIGlmIChwb3NUbyAmJiBwb3NGcm9tKSBwcm9ncmFtQ29uZmlndXJhdGlvbi5zZXRDb25zdGFudFBhdHRlcm5Qb3NpdGlvbnMocG9zVG8sIHBvc0Zyb20pO1xuICAgICAgICB9XG5cbiAgICAgICAgY29uc3QgbWF0cml4ID0gcGFpbnRlci50cmFuc2xhdGVQb3NNYXRyaXgoXG4gICAgICAgICAgICBjb29yZC5wb3NNYXRyaXgsXG4gICAgICAgICAgICB0aWxlLFxuICAgICAgICAgICAgbGF5ZXIucGFpbnQuZ2V0KCdmaWxsLWV4dHJ1c2lvbi10cmFuc2xhdGUnKSxcbiAgICAgICAgICAgIGxheWVyLnBhaW50LmdldCgnZmlsbC1leHRydXNpb24tdHJhbnNsYXRlLWFuY2hvcicpKTtcblxuICAgICAgICBjb25zdCB1bmlmb3JtVmFsdWVzID0gaW1hZ2UgP1xuICAgICAgICAgICAgZmlsbEV4dHJ1c2lvblBhdHRlcm5Vbmlmb3JtVmFsdWVzKG1hdHJpeCwgcGFpbnRlciwgY29vcmQsIGNyb3NzZmFkZSwgdGlsZSkgOlxuICAgICAgICAgICAgZmlsbEV4dHJ1c2lvblVuaWZvcm1WYWx1ZXMobWF0cml4LCBwYWludGVyKTtcblxuXG4gICAgICAgIHByb2dyYW0uZHJhdyhjb250ZXh0LCBjb250ZXh0LmdsLlRSSUFOR0xFUywgZGVwdGhNb2RlLCBzdGVuY2lsTW9kZSwgY29sb3JNb2RlLFxuICAgICAgICAgICAgdW5pZm9ybVZhbHVlcywgbGF5ZXIuaWQsIGJ1Y2tldC5sYXlvdXRWZXJ0ZXhCdWZmZXIsIGJ1Y2tldC5pbmRleEJ1ZmZlcixcbiAgICAgICAgICAgIGJ1Y2tldC5zZWdtZW50cywgbGF5ZXIucGFpbnQsIHBhaW50ZXIudHJhbnNmb3JtLnpvb20sXG4gICAgICAgICAgICBwcm9ncmFtQ29uZmlndXJhdGlvbik7XG4gICAgfVxufVxuIiwiLy8gQGZsb3dcblxuaW1wb3J0IFN0ZW5jaWxNb2RlIGZyb20gJy4uL2dsL3N0ZW5jaWxfbW9kZSc7XG5pbXBvcnQgRGVwdGhNb2RlIGZyb20gJy4uL2dsL2RlcHRoX21vZGUnO1xuaW1wb3J0IHtcbiAgICBiYWNrZ3JvdW5kVW5pZm9ybVZhbHVlcyxcbiAgICBiYWNrZ3JvdW5kUGF0dGVyblVuaWZvcm1WYWx1ZXNcbn0gZnJvbSAnLi9wcm9ncmFtL2JhY2tncm91bmRfcHJvZ3JhbSc7XG5cbmltcG9ydCB0eXBlIFBhaW50ZXIgZnJvbSAnLi9wYWludGVyJztcbmltcG9ydCB0eXBlIFNvdXJjZUNhY2hlIGZyb20gJy4uL3NvdXJjZS9zb3VyY2VfY2FjaGUnO1xuaW1wb3J0IHR5cGUgQmFja2dyb3VuZFN0eWxlTGF5ZXIgZnJvbSAnLi4vc3R5bGUvc3R5bGVfbGF5ZXIvYmFja2dyb3VuZF9zdHlsZV9sYXllcic7XG5cbmV4cG9ydCBkZWZhdWx0IGRyYXdCYWNrZ3JvdW5kO1xuXG5mdW5jdGlvbiBkcmF3QmFja2dyb3VuZChwYWludGVyOiBQYWludGVyLCBzb3VyY2VDYWNoZTogU291cmNlQ2FjaGUsIGxheWVyOiBCYWNrZ3JvdW5kU3R5bGVMYXllcikge1xuICAgIGNvbnN0IGNvbG9yID0gbGF5ZXIucGFpbnQuZ2V0KCdiYWNrZ3JvdW5kLWNvbG9yJyk7XG4gICAgY29uc3Qgb3BhY2l0eSA9IGxheWVyLnBhaW50LmdldCgnYmFja2dyb3VuZC1vcGFjaXR5Jyk7XG5cbiAgICBpZiAob3BhY2l0eSA9PT0gMCkgcmV0dXJuO1xuXG4gICAgY29uc3QgY29udGV4dCA9IHBhaW50ZXIuY29udGV4dDtcbiAgICBjb25zdCBnbCA9IGNvbnRleHQuZ2w7XG4gICAgY29uc3QgdHJhbnNmb3JtID0gcGFpbnRlci50cmFuc2Zvcm07XG4gICAgY29uc3QgdGlsZVNpemUgPSB0cmFuc2Zvcm0udGlsZVNpemU7XG4gICAgY29uc3QgaW1hZ2UgPSBsYXllci5wYWludC5nZXQoJ2JhY2tncm91bmQtcGF0dGVybicpO1xuICAgIGlmIChwYWludGVyLmlzUGF0dGVybk1pc3NpbmcoaW1hZ2UpKSByZXR1cm47XG5cbiAgICBjb25zdCBwYXNzID0gKCFpbWFnZSAmJiBjb2xvci5hID09PSAxICYmIG9wYWNpdHkgPT09IDEpID8gJ29wYXF1ZScgOiAndHJhbnNsdWNlbnQnO1xuICAgIGlmIChwYWludGVyLnJlbmRlclBhc3MgIT09IHBhc3MpIHJldHVybjtcblxuICAgIGNvbnN0IHN0ZW5jaWxNb2RlID0gU3RlbmNpbE1vZGUuZGlzYWJsZWQ7XG4gICAgY29uc3QgZGVwdGhNb2RlID0gcGFpbnRlci5kZXB0aE1vZGVGb3JTdWJsYXllcigwLCBwYXNzID09PSAnb3BhcXVlJyA/IERlcHRoTW9kZS5SZWFkV3JpdGUgOiBEZXB0aE1vZGUuUmVhZE9ubHkpO1xuICAgIGNvbnN0IGNvbG9yTW9kZSA9IHBhaW50ZXIuY29sb3JNb2RlRm9yUmVuZGVyUGFzcygpO1xuXG4gICAgY29uc3QgcHJvZ3JhbSA9IHBhaW50ZXIudXNlUHJvZ3JhbShpbWFnZSA/ICdiYWNrZ3JvdW5kUGF0dGVybicgOiAnYmFja2dyb3VuZCcpO1xuXG4gICAgY29uc3QgdGlsZUlEcyA9IHRyYW5zZm9ybS5jb3ZlcmluZ1RpbGVzKHt0aWxlU2l6ZX0pO1xuXG4gICAgaWYgKGltYWdlKSB7XG4gICAgICAgIGNvbnRleHQuYWN0aXZlVGV4dHVyZS5zZXQoZ2wuVEVYVFVSRTApO1xuICAgICAgICBwYWludGVyLmltYWdlTWFuYWdlci5iaW5kKHBhaW50ZXIuY29udGV4dCk7XG4gICAgfVxuXG4gICAgY29uc3QgY3Jvc3NmYWRlID0gbGF5ZXIuZ2V0Q3Jvc3NmYWRlUGFyYW1ldGVycygpO1xuICAgIGZvciAoY29uc3QgdGlsZUlEIG9mIHRpbGVJRHMpIHtcbiAgICAgICAgY29uc3QgbWF0cml4ID0gcGFpbnRlci50cmFuc2Zvcm0uY2FsY3VsYXRlUG9zTWF0cml4KHRpbGVJRC50b1Vud3JhcHBlZCgpKTtcblxuICAgICAgICBjb25zdCB1bmlmb3JtVmFsdWVzID0gaW1hZ2UgP1xuICAgICAgICAgICAgYmFja2dyb3VuZFBhdHRlcm5Vbmlmb3JtVmFsdWVzKG1hdHJpeCwgb3BhY2l0eSwgcGFpbnRlciwgaW1hZ2UsIHt0aWxlSUQsIHRpbGVTaXplfSwgY3Jvc3NmYWRlKSA6XG4gICAgICAgICAgICBiYWNrZ3JvdW5kVW5pZm9ybVZhbHVlcyhtYXRyaXgsIG9wYWNpdHksIGNvbG9yKTtcblxuICAgICAgICBwcm9ncmFtLmRyYXcoY29udGV4dCwgZ2wuVFJJQU5HTEVTLCBkZXB0aE1vZGUsIHN0ZW5jaWxNb2RlLCBjb2xvck1vZGUsXG4gICAgICAgICAgICB1bmlmb3JtVmFsdWVzLCBsYXllci5pZCwgcGFpbnRlci50aWxlRXh0ZW50QnVmZmVyLFxuICAgICAgICAgICAgcGFpbnRlci5xdWFkVHJpYW5nbGVJbmRleEJ1ZmZlciwgcGFpbnRlci50aWxlRXh0ZW50U2VnbWVudHMpO1xuICAgIH1cbn1cbiIsIi8vIEBmbG93XG5cbmltcG9ydCBDb29yZGluYXRlIGZyb20gJy4uL2dlby9jb29yZGluYXRlJztcblxuaW1wb3J0IHsgT3ZlcnNjYWxlZFRpbGVJRCB9IGZyb20gJy4uL3NvdXJjZS90aWxlX2lkJztcblxuZXhwb3J0IGRlZmF1bHQgdGlsZUNvdmVyO1xuXG5mdW5jdGlvbiB0aWxlQ292ZXIoejogbnVtYmVyLCBib3VuZHM6IFtDb29yZGluYXRlLCBDb29yZGluYXRlLCBDb29yZGluYXRlLCBDb29yZGluYXRlXSxcbiAgICBhY3R1YWxaOiBudW1iZXIsIHJlbmRlcldvcmxkQ29waWVzOiBib29sZWFuIHwgdm9pZCk6IEFycmF5PE92ZXJzY2FsZWRUaWxlSUQ+IHtcbiAgICBpZiAocmVuZGVyV29ybGRDb3BpZXMgPT09IHVuZGVmaW5lZCkge1xuICAgICAgICByZW5kZXJXb3JsZENvcGllcyA9IHRydWU7XG4gICAgfVxuICAgIGNvbnN0IHRpbGVzID0gMSA8PCB6O1xuICAgIGNvbnN0IHQgPSB7fTtcblxuICAgIGZ1bmN0aW9uIHNjYW5MaW5lKHgwLCB4MSwgeSkge1xuICAgICAgICBsZXQgeCwgdywgd3gsIGNvb3JkO1xuICAgICAgICBpZiAoeSA+PSAwICYmIHkgPD0gdGlsZXMpIHtcbiAgICAgICAgICAgIGZvciAoeCA9IHgwOyB4IDwgeDE7IHgrKykge1xuICAgICAgICAgICAgICAgIHcgPSBNYXRoLmZsb29yKHggLyB0aWxlcyk7XG4gICAgICAgICAgICAgICAgd3ggPSAoeCAlIHRpbGVzICsgdGlsZXMpICUgdGlsZXM7XG4gICAgICAgICAgICAgICAgaWYgKHcgPT09IDAgfHwgcmVuZGVyV29ybGRDb3BpZXMgPT09IHRydWUpIHtcbiAgICAgICAgICAgICAgICAgICAgY29vcmQgPSBuZXcgT3ZlcnNjYWxlZFRpbGVJRChhY3R1YWxaLCB3LCB6LCB3eCwgeSk7XG4gICAgICAgICAgICAgICAgICAgIHRbY29vcmQua2V5XSA9IGNvb3JkO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgIH1cblxuICAgIC8vIERpdmlkZSB0aGUgc2NyZWVuIHVwIGluIHR3byB0cmlhbmdsZXMgYW5kIHNjYW4gZWFjaCBvZiB0aGVtOlxuICAgIC8vICstLS0vXG4gICAgLy8gfCAvIHxcbiAgICAvLyAvLS0tK1xuICAgIHNjYW5UcmlhbmdsZShib3VuZHNbMF0sIGJvdW5kc1sxXSwgYm91bmRzWzJdLCAwLCB0aWxlcywgc2NhbkxpbmUpO1xuICAgIHNjYW5UcmlhbmdsZShib3VuZHNbMl0sIGJvdW5kc1szXSwgYm91bmRzWzBdLCAwLCB0aWxlcywgc2NhbkxpbmUpO1xuXG4gICAgcmV0dXJuIE9iamVjdC5rZXlzKHQpLm1hcCgoaWQpID0+IHtcbiAgICAgICAgcmV0dXJuIHRbaWRdO1xuICAgIH0pO1xufVxuXG5cbi8vIFRha2VuIGZyb20gcG9seW1hcHMgc3JjL0xheWVyLmpzXG4vLyBodHRwczovL2dpdGh1Yi5jb20vc2ltcGxlZ2VvL3BvbHltYXBzL2Jsb2IvbWFzdGVyL3NyYy9MYXllci5qcyNMMzMzLUwzODNcblxuZnVuY3Rpb24gZWRnZShhOiBDb29yZGluYXRlLCBiOiBDb29yZGluYXRlKSB7XG4gICAgaWYgKGEucm93ID4gYi5yb3cpIHsgY29uc3QgdCA9IGE7IGEgPSBiOyBiID0gdDsgfVxuICAgIHJldHVybiB7XG4gICAgICAgIHgwOiBhLmNvbHVtbixcbiAgICAgICAgeTA6IGEucm93LFxuICAgICAgICB4MTogYi5jb2x1bW4sXG4gICAgICAgIHkxOiBiLnJvdyxcbiAgICAgICAgZHg6IGIuY29sdW1uIC0gYS5jb2x1bW4sXG4gICAgICAgIGR5OiBiLnJvdyAtIGEucm93XG4gICAgfTtcbn1cblxuZnVuY3Rpb24gc2NhblNwYW5zKGUwLCBlMSwgeW1pbiwgeW1heCwgc2NhbkxpbmUpIHtcbiAgICBjb25zdCB5MCA9IE1hdGgubWF4KHltaW4sIE1hdGguZmxvb3IoZTEueTApKTtcbiAgICBjb25zdCB5MSA9IE1hdGgubWluKHltYXgsIE1hdGguY2VpbChlMS55MSkpO1xuXG4gICAgLy8gc29ydCBlZGdlcyBieSB4LWNvb3JkaW5hdGVcbiAgICBpZiAoKGUwLngwID09PSBlMS54MCAmJiBlMC55MCA9PT0gZTEueTApID9cbiAgICAgICAgKGUwLngwICsgZTEuZHkgLyBlMC5keSAqIGUwLmR4IDwgZTEueDEpIDpcbiAgICAgICAgKGUwLngxIC0gZTEuZHkgLyBlMC5keSAqIGUwLmR4IDwgZTEueDApKSB7XG4gICAgICAgIGNvbnN0IHQgPSBlMDsgZTAgPSBlMTsgZTEgPSB0O1xuICAgIH1cblxuICAgIC8vIHNjYW4gbGluZXMhXG4gICAgY29uc3QgbTAgPSBlMC5keCAvIGUwLmR5O1xuICAgIGNvbnN0IG0xID0gZTEuZHggLyBlMS5keTtcbiAgICBjb25zdCBkMCA9IGUwLmR4ID4gMDsgLy8gdXNlIHkgKyAxIHRvIGNvbXB1dGUgeDBcbiAgICBjb25zdCBkMSA9IGUxLmR4IDwgMDsgLy8gdXNlIHkgKyAxIHRvIGNvbXB1dGUgeDFcbiAgICBmb3IgKGxldCB5ID0geTA7IHkgPCB5MTsgeSsrKSB7XG4gICAgICAgIGNvbnN0IHgwID0gbTAgKiBNYXRoLm1heCgwLCBNYXRoLm1pbihlMC5keSwgeSArIGQwIC0gZTAueTApKSArIGUwLngwO1xuICAgICAgICBjb25zdCB4MSA9IG0xICogTWF0aC5tYXgoMCwgTWF0aC5taW4oZTEuZHksIHkgKyBkMSAtIGUxLnkwKSkgKyBlMS54MDtcbiAgICAgICAgc2NhbkxpbmUoTWF0aC5mbG9vcih4MSksIE1hdGguY2VpbCh4MCksIHkpO1xuICAgIH1cbn1cblxuZnVuY3Rpb24gc2NhblRyaWFuZ2xlKGE6IENvb3JkaW5hdGUsIGI6IENvb3JkaW5hdGUsIGM6IENvb3JkaW5hdGUsIHltaW4sIHltYXgsIHNjYW5MaW5lKSB7XG4gICAgbGV0IGFiID0gZWRnZShhLCBiKSxcbiAgICAgICAgYmMgPSBlZGdlKGIsIGMpLFxuICAgICAgICBjYSA9IGVkZ2UoYywgYSk7XG5cbiAgICBsZXQgdDtcblxuICAgIC8vIHNvcnQgZWRnZXMgYnkgeS1sZW5ndGhcbiAgICBpZiAoYWIuZHkgPiBiYy5keSkgeyB0ID0gYWI7IGFiID0gYmM7IGJjID0gdDsgfVxuICAgIGlmIChhYi5keSA+IGNhLmR5KSB7IHQgPSBhYjsgYWIgPSBjYTsgY2EgPSB0OyB9XG4gICAgaWYgKGJjLmR5ID4gY2EuZHkpIHsgdCA9IGJjOyBiYyA9IGNhOyBjYSA9IHQ7IH1cblxuICAgIC8vIHNjYW4gc3BhbiEgc2NhbiBzcGFuIVxuICAgIGlmIChhYi5keSkgc2NhblNwYW5zKGNhLCBhYiwgeW1pbiwgeW1heCwgc2NhbkxpbmUpO1xuICAgIGlmIChiYy5keSkgc2NhblNwYW5zKGNhLCBiYywgeW1pbiwgeW1heCwgc2NhbkxpbmUpO1xufVxuXG4iLCIvLyBAZmxvd1xuXG5pbXBvcnQgTG5nTGF0IGZyb20gJy4vbG5nX2xhdCc7XG5pbXBvcnQgTG5nTGF0Qm91bmRzIGZyb20gJy4vbG5nX2xhdF9ib3VuZHMnO1xuaW1wb3J0IFBvaW50IGZyb20gJ0BtYXBib3gvcG9pbnQtZ2VvbWV0cnknO1xuaW1wb3J0IENvb3JkaW5hdGUgZnJvbSAnLi9jb29yZGluYXRlJztcbmltcG9ydCB7IHdyYXAsIGNsYW1wIH0gZnJvbSAnLi4vdXRpbC91dGlsJztcbmltcG9ydCB7bnVtYmVyIGFzIGludGVycG9sYXRlfSBmcm9tICcuLi9zdHlsZS1zcGVjL3V0aWwvaW50ZXJwb2xhdGUnO1xuaW1wb3J0IHRpbGVDb3ZlciBmcm9tICcuLi91dGlsL3RpbGVfY292ZXInO1xuaW1wb3J0IHsgQ2Fub25pY2FsVGlsZUlELCBVbndyYXBwZWRUaWxlSUQgfSBmcm9tICcuLi9zb3VyY2UvdGlsZV9pZCc7XG5pbXBvcnQgRVhURU5UIGZyb20gJy4uL2RhdGEvZXh0ZW50JztcbmltcG9ydCB7IHZlYzQsIG1hdDQsIG1hdDIgfSBmcm9tICdnbC1tYXRyaXgnO1xuXG4vKipcbiAqIEEgc2luZ2xlIHRyYW5zZm9ybSwgZ2VuZXJhbGx5IHVzZWQgZm9yIGEgc2luZ2xlIHRpbGUgdG8gYmVcbiAqIHNjYWxlZCwgcm90YXRlZCwgYW5kIHpvb21lZC5cbiAqIEBwcml2YXRlXG4gKi9cbmNsYXNzIFRyYW5zZm9ybSB7XG4gICAgdGlsZVNpemU6IG51bWJlcjtcbiAgICB0aWxlWm9vbTogbnVtYmVyO1xuICAgIGxuZ1JhbmdlOiA/W251bWJlciwgbnVtYmVyXTtcbiAgICBsYXRSYW5nZTogP1tudW1iZXIsIG51bWJlcl07XG4gICAgbWF4VmFsaWRMYXRpdHVkZTogbnVtYmVyO1xuICAgIHNjYWxlOiBudW1iZXI7XG4gICAgd2lkdGg6IG51bWJlcjtcbiAgICBoZWlnaHQ6IG51bWJlcjtcbiAgICBhbmdsZTogbnVtYmVyO1xuICAgIHJvdGF0aW9uTWF0cml4OiBGbG9hdDY0QXJyYXk7XG4gICAgem9vbUZyYWN0aW9uOiBudW1iZXI7XG4gICAgcGl4ZWxzVG9HTFVuaXRzOiBbbnVtYmVyLCBudW1iZXJdO1xuICAgIGNhbWVyYVRvQ2VudGVyRGlzdGFuY2U6IG51bWJlcjtcbiAgICBwcm9qTWF0cml4OiBGbG9hdDY0QXJyYXk7XG4gICAgYWxpZ25lZFByb2pNYXRyaXg6IEZsb2F0NjRBcnJheTtcbiAgICBwaXhlbE1hdHJpeDogRmxvYXQ2NEFycmF5O1xuICAgIHBpeGVsTWF0cml4SW52ZXJzZTogRmxvYXQ2NEFycmF5O1xuICAgIF9mb3Y6IG51bWJlcjtcbiAgICBfcGl0Y2g6IG51bWJlcjtcbiAgICBfem9vbTogbnVtYmVyO1xuICAgIF91bm1vZGlmaWVkOiBib29sZWFuO1xuICAgIF9yZW5kZXJXb3JsZENvcGllczogYm9vbGVhbjtcbiAgICBfbWluWm9vbTogbnVtYmVyO1xuICAgIF9tYXhab29tOiBudW1iZXI7XG4gICAgX2NlbnRlcjogTG5nTGF0O1xuICAgIF9jb25zdHJhaW5pbmc6IGJvb2xlYW47XG4gICAgX3Bvc01hdHJpeENhY2hlOiB7W251bWJlcl06IEZsb2F0MzJBcnJheX07XG4gICAgX2FsaWduZWRQb3NNYXRyaXhDYWNoZToge1tudW1iZXJdOiBGbG9hdDMyQXJyYXl9O1xuXG4gICAgY29uc3RydWN0b3IobWluWm9vbTogP251bWJlciwgbWF4Wm9vbTogP251bWJlciwgcmVuZGVyV29ybGRDb3BpZXM6IGJvb2xlYW4gfCB2b2lkKSB7XG4gICAgICAgIHRoaXMudGlsZVNpemUgPSA1MTI7IC8vIGNvbnN0YW50XG4gICAgICAgIHRoaXMubWF4VmFsaWRMYXRpdHVkZSA9IDg1LjA1MTEyOTsgLy8gY29uc3RhbnRcblxuICAgICAgICB0aGlzLl9yZW5kZXJXb3JsZENvcGllcyA9IHJlbmRlcldvcmxkQ29waWVzID09PSB1bmRlZmluZWQgPyB0cnVlIDogcmVuZGVyV29ybGRDb3BpZXM7XG4gICAgICAgIHRoaXMuX21pblpvb20gPSBtaW5ab29tIHx8IDA7XG4gICAgICAgIHRoaXMuX21heFpvb20gPSBtYXhab29tIHx8IDIyO1xuXG4gICAgICAgIHRoaXMuc2V0TWF4Qm91bmRzKCk7XG5cbiAgICAgICAgdGhpcy53aWR0aCA9IDA7XG4gICAgICAgIHRoaXMuaGVpZ2h0ID0gMDtcbiAgICAgICAgdGhpcy5fY2VudGVyID0gbmV3IExuZ0xhdCgwLCAwKTtcbiAgICAgICAgdGhpcy56b29tID0gMDtcbiAgICAgICAgdGhpcy5hbmdsZSA9IDA7XG4gICAgICAgIHRoaXMuX2ZvdiA9IDAuNjQzNTAxMTA4NzkzMjg0NDtcbiAgICAgICAgdGhpcy5fcGl0Y2ggPSAwO1xuICAgICAgICB0aGlzLl91bm1vZGlmaWVkID0gdHJ1ZTtcbiAgICAgICAgdGhpcy5fcG9zTWF0cml4Q2FjaGUgPSB7fTtcbiAgICAgICAgdGhpcy5fYWxpZ25lZFBvc01hdHJpeENhY2hlID0ge307XG4gICAgfVxuXG4gICAgY2xvbmUoKTogVHJhbnNmb3JtIHtcbiAgICAgICAgY29uc3QgY2xvbmUgPSBuZXcgVHJhbnNmb3JtKHRoaXMuX21pblpvb20sIHRoaXMuX21heFpvb20sIHRoaXMuX3JlbmRlcldvcmxkQ29waWVzKTtcbiAgICAgICAgY2xvbmUudGlsZVNpemUgPSB0aGlzLnRpbGVTaXplO1xuICAgICAgICBjbG9uZS5sYXRSYW5nZSA9IHRoaXMubGF0UmFuZ2U7XG4gICAgICAgIGNsb25lLndpZHRoID0gdGhpcy53aWR0aDtcbiAgICAgICAgY2xvbmUuaGVpZ2h0ID0gdGhpcy5oZWlnaHQ7XG4gICAgICAgIGNsb25lLl9jZW50ZXIgPSB0aGlzLl9jZW50ZXI7XG4gICAgICAgIGNsb25lLnpvb20gPSB0aGlzLnpvb207XG4gICAgICAgIGNsb25lLmFuZ2xlID0gdGhpcy5hbmdsZTtcbiAgICAgICAgY2xvbmUuX2ZvdiA9IHRoaXMuX2ZvdjtcbiAgICAgICAgY2xvbmUuX3BpdGNoID0gdGhpcy5fcGl0Y2g7XG4gICAgICAgIGNsb25lLl91bm1vZGlmaWVkID0gdGhpcy5fdW5tb2RpZmllZDtcbiAgICAgICAgY2xvbmUuX2NhbGNNYXRyaWNlcygpO1xuICAgICAgICByZXR1cm4gY2xvbmU7XG4gICAgfVxuXG4gICAgZ2V0IG1pblpvb20oKTogbnVtYmVyIHsgcmV0dXJuIHRoaXMuX21pblpvb207IH1cbiAgICBzZXQgbWluWm9vbSh6b29tOiBudW1iZXIpIHtcbiAgICAgICAgaWYgKHRoaXMuX21pblpvb20gPT09IHpvb20pIHJldHVybjtcbiAgICAgICAgdGhpcy5fbWluWm9vbSA9IHpvb207XG4gICAgICAgIHRoaXMuem9vbSA9IE1hdGgubWF4KHRoaXMuem9vbSwgem9vbSk7XG4gICAgfVxuXG4gICAgZ2V0IG1heFpvb20oKTogbnVtYmVyIHsgcmV0dXJuIHRoaXMuX21heFpvb207IH1cbiAgICBzZXQgbWF4Wm9vbSh6b29tOiBudW1iZXIpIHtcbiAgICAgICAgaWYgKHRoaXMuX21heFpvb20gPT09IHpvb20pIHJldHVybjtcbiAgICAgICAgdGhpcy5fbWF4Wm9vbSA9IHpvb207XG4gICAgICAgIHRoaXMuem9vbSA9IE1hdGgubWluKHRoaXMuem9vbSwgem9vbSk7XG4gICAgfVxuXG4gICAgZ2V0IHJlbmRlcldvcmxkQ29waWVzKCk6IGJvb2xlYW4geyByZXR1cm4gdGhpcy5fcmVuZGVyV29ybGRDb3BpZXM7IH1cbiAgICBzZXQgcmVuZGVyV29ybGRDb3BpZXMocmVuZGVyV29ybGRDb3BpZXM/OiA/Ym9vbGVhbikge1xuICAgICAgICBpZiAocmVuZGVyV29ybGRDb3BpZXMgPT09IHVuZGVmaW5lZCkge1xuICAgICAgICAgICAgcmVuZGVyV29ybGRDb3BpZXMgPSB0cnVlO1xuICAgICAgICB9IGVsc2UgaWYgKHJlbmRlcldvcmxkQ29waWVzID09PSBudWxsKSB7XG4gICAgICAgICAgICByZW5kZXJXb3JsZENvcGllcyA9IGZhbHNlO1xuICAgICAgICB9XG5cbiAgICAgICAgdGhpcy5fcmVuZGVyV29ybGRDb3BpZXMgPSByZW5kZXJXb3JsZENvcGllcztcbiAgICB9XG5cbiAgICBnZXQgd29ybGRTaXplKCk6IG51bWJlciB7XG4gICAgICAgIHJldHVybiB0aGlzLnRpbGVTaXplICogdGhpcy5zY2FsZTtcbiAgICB9XG5cbiAgICBnZXQgY2VudGVyUG9pbnQoKTogUG9pbnQge1xuICAgICAgICByZXR1cm4gdGhpcy5zaXplLl9kaXYoMik7XG4gICAgfVxuXG4gICAgZ2V0IHNpemUoKTogUG9pbnQge1xuICAgICAgICByZXR1cm4gbmV3IFBvaW50KHRoaXMud2lkdGgsIHRoaXMuaGVpZ2h0KTtcbiAgICB9XG5cbiAgICBnZXQgYmVhcmluZygpOiBudW1iZXIge1xuICAgICAgICByZXR1cm4gLXRoaXMuYW5nbGUgLyBNYXRoLlBJICogMTgwO1xuICAgIH1cbiAgICBzZXQgYmVhcmluZyhiZWFyaW5nOiBudW1iZXIpIHtcbiAgICAgICAgY29uc3QgYiA9IC13cmFwKGJlYXJpbmcsIC0xODAsIDE4MCkgKiBNYXRoLlBJIC8gMTgwO1xuICAgICAgICBpZiAodGhpcy5hbmdsZSA9PT0gYikgcmV0dXJuO1xuICAgICAgICB0aGlzLl91bm1vZGlmaWVkID0gZmFsc2U7XG4gICAgICAgIHRoaXMuYW5nbGUgPSBiO1xuICAgICAgICB0aGlzLl9jYWxjTWF0cmljZXMoKTtcblxuICAgICAgICAvLyAyeDIgbWF0cml4IGZvciByb3RhdGluZyBwb2ludHNcbiAgICAgICAgdGhpcy5yb3RhdGlvbk1hdHJpeCA9IG1hdDIuY3JlYXRlKCk7XG4gICAgICAgIG1hdDIucm90YXRlKHRoaXMucm90YXRpb25NYXRyaXgsIHRoaXMucm90YXRpb25NYXRyaXgsIHRoaXMuYW5nbGUpO1xuICAgIH1cblxuICAgIGdldCBwaXRjaCgpOiBudW1iZXIge1xuICAgICAgICByZXR1cm4gdGhpcy5fcGl0Y2ggLyBNYXRoLlBJICogMTgwO1xuICAgIH1cbiAgICBzZXQgcGl0Y2gocGl0Y2g6IG51bWJlcikge1xuICAgICAgICBjb25zdCBwID0gY2xhbXAocGl0Y2gsIDAsIDYwKSAvIDE4MCAqIE1hdGguUEk7XG4gICAgICAgIGlmICh0aGlzLl9waXRjaCA9PT0gcCkgcmV0dXJuO1xuICAgICAgICB0aGlzLl91bm1vZGlmaWVkID0gZmFsc2U7XG4gICAgICAgIHRoaXMuX3BpdGNoID0gcDtcbiAgICAgICAgdGhpcy5fY2FsY01hdHJpY2VzKCk7XG4gICAgfVxuXG4gICAgZ2V0IGZvdigpOiBudW1iZXIge1xuICAgICAgICByZXR1cm4gdGhpcy5fZm92IC8gTWF0aC5QSSAqIDE4MDtcbiAgICB9XG4gICAgc2V0IGZvdihmb3Y6IG51bWJlcikge1xuICAgICAgICBmb3YgPSBNYXRoLm1heCgwLjAxLCBNYXRoLm1pbig2MCwgZm92KSk7XG4gICAgICAgIGlmICh0aGlzLl9mb3YgPT09IGZvdikgcmV0dXJuO1xuICAgICAgICB0aGlzLl91bm1vZGlmaWVkID0gZmFsc2U7XG4gICAgICAgIHRoaXMuX2ZvdiA9IGZvdiAvIDE4MCAqIE1hdGguUEk7XG4gICAgICAgIHRoaXMuX2NhbGNNYXRyaWNlcygpO1xuICAgIH1cblxuICAgIGdldCB6b29tKCk6IG51bWJlciB7IHJldHVybiB0aGlzLl96b29tOyB9XG4gICAgc2V0IHpvb20oem9vbTogbnVtYmVyKSB7XG4gICAgICAgIGNvbnN0IHogPSBNYXRoLm1pbihNYXRoLm1heCh6b29tLCB0aGlzLm1pblpvb20pLCB0aGlzLm1heFpvb20pO1xuICAgICAgICBpZiAodGhpcy5fem9vbSA9PT0geikgcmV0dXJuO1xuICAgICAgICB0aGlzLl91bm1vZGlmaWVkID0gZmFsc2U7XG4gICAgICAgIHRoaXMuX3pvb20gPSB6O1xuICAgICAgICB0aGlzLnNjYWxlID0gdGhpcy56b29tU2NhbGUoeik7XG4gICAgICAgIHRoaXMudGlsZVpvb20gPSBNYXRoLmZsb29yKHopO1xuICAgICAgICB0aGlzLnpvb21GcmFjdGlvbiA9IHogLSB0aGlzLnRpbGVab29tO1xuICAgICAgICB0aGlzLl9jb25zdHJhaW4oKTtcbiAgICAgICAgdGhpcy5fY2FsY01hdHJpY2VzKCk7XG4gICAgfVxuXG4gICAgZ2V0IGNlbnRlcigpOiBMbmdMYXQgeyByZXR1cm4gdGhpcy5fY2VudGVyOyB9XG4gICAgc2V0IGNlbnRlcihjZW50ZXI6IExuZ0xhdCkge1xuICAgICAgICBpZiAoY2VudGVyLmxhdCA9PT0gdGhpcy5fY2VudGVyLmxhdCAmJiBjZW50ZXIubG5nID09PSB0aGlzLl9jZW50ZXIubG5nKSByZXR1cm47XG4gICAgICAgIHRoaXMuX3VubW9kaWZpZWQgPSBmYWxzZTtcbiAgICAgICAgdGhpcy5fY2VudGVyID0gY2VudGVyO1xuICAgICAgICB0aGlzLl9jb25zdHJhaW4oKTtcbiAgICAgICAgdGhpcy5fY2FsY01hdHJpY2VzKCk7XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogUmV0dXJuIGEgem9vbSBsZXZlbCB0aGF0IHdpbGwgY292ZXIgYWxsIHRpbGVzIHRoZSB0cmFuc2Zvcm1cbiAgICAgKiBAcGFyYW0ge09iamVjdH0gb3B0aW9uc1xuICAgICAqIEBwYXJhbSB7bnVtYmVyfSBvcHRpb25zLnRpbGVTaXplXG4gICAgICogQHBhcmFtIHtib29sZWFufSBvcHRpb25zLnJvdW5kWm9vbVxuICAgICAqIEByZXR1cm5zIHtudW1iZXJ9IHpvb20gbGV2ZWxcbiAgICAgKi9cbiAgICBjb3ZlcmluZ1pvb21MZXZlbChvcHRpb25zOiB7cm91bmRab29tPzogYm9vbGVhbiwgdGlsZVNpemU6IG51bWJlcn0pIHtcbiAgICAgICAgcmV0dXJuIChvcHRpb25zLnJvdW5kWm9vbSA/IE1hdGgucm91bmQgOiBNYXRoLmZsb29yKShcbiAgICAgICAgICAgIHRoaXMuem9vbSArIHRoaXMuc2NhbGVab29tKHRoaXMudGlsZVNpemUgLyBvcHRpb25zLnRpbGVTaXplKVxuICAgICAgICApO1xuICAgIH1cblxuICAgIC8qKlxuICAgICAqIFJldHVybiBhbnkgXCJ3cmFwcGVkXCIgY29waWVzIG9mIGEgZ2l2ZW4gdGlsZSBjb29yZGluYXRlIHRoYXQgYXJlIHZpc2libGVcbiAgICAgKiBpbiB0aGUgY3VycmVudCB2aWV3LlxuICAgICAqXG4gICAgICogQHByaXZhdGVcbiAgICAgKi9cbiAgICBnZXRWaXNpYmxlVW53cmFwcGVkQ29vcmRpbmF0ZXModGlsZUlEOiBDYW5vbmljYWxUaWxlSUQpIHtcbiAgICAgICAgY29uc3QgcmVzdWx0ID0gW25ldyBVbndyYXBwZWRUaWxlSUQoMCwgdGlsZUlEKV07XG4gICAgICAgIGlmICh0aGlzLl9yZW5kZXJXb3JsZENvcGllcykge1xuICAgICAgICAgICAgY29uc3QgdXRsID0gdGhpcy5wb2ludENvb3JkaW5hdGUobmV3IFBvaW50KDAsIDApLCAwKTtcbiAgICAgICAgICAgIGNvbnN0IHV0ciA9IHRoaXMucG9pbnRDb29yZGluYXRlKG5ldyBQb2ludCh0aGlzLndpZHRoLCAwKSwgMCk7XG4gICAgICAgICAgICBjb25zdCB1YmwgPSB0aGlzLnBvaW50Q29vcmRpbmF0ZShuZXcgUG9pbnQodGhpcy53aWR0aCwgdGhpcy5oZWlnaHQpLCAwKTtcbiAgICAgICAgICAgIGNvbnN0IHViciA9IHRoaXMucG9pbnRDb29yZGluYXRlKG5ldyBQb2ludCgwLCB0aGlzLmhlaWdodCksIDApO1xuICAgICAgICAgICAgY29uc3QgdzAgPSBNYXRoLmZsb29yKE1hdGgubWluKHV0bC5jb2x1bW4sIHV0ci5jb2x1bW4sIHVibC5jb2x1bW4sIHVici5jb2x1bW4pKTtcbiAgICAgICAgICAgIGNvbnN0IHcxID0gTWF0aC5mbG9vcihNYXRoLm1heCh1dGwuY29sdW1uLCB1dHIuY29sdW1uLCB1YmwuY29sdW1uLCB1YnIuY29sdW1uKSk7XG5cbiAgICAgICAgICAgIC8vIEFkZCBhbiBleHRyYSBjb3B5IG9mIHRoZSB3b3JsZCBvbiBlYWNoIHNpZGUgdG8gcHJvcGVybHkgcmVuZGVyIEltYWdlU291cmNlcyBhbmQgQ2FudmFzU291cmNlcy5cbiAgICAgICAgICAgIC8vIEJvdGggc291cmNlcyBkcmF3IG91dHNpZGUgdGhlIHRpbGUgYm91bmRhcmllcyBvZiB0aGUgdGlsZSB0aGF0IFwiY29udGFpbnMgdGhlbVwiIHNvIHdlIG5lZWRcbiAgICAgICAgICAgIC8vIHRvIGFkZCBleHRyYSBjb3BpZXMgb24gYm90aCBzaWRlcyBpbiBjYXNlIG9mZnNjcmVlbiB0aWxlcyBuZWVkIHRvIGRyYXcgaW50byBvbi1zY3JlZW4gb25lcy5cbiAgICAgICAgICAgIGNvbnN0IGV4dHJhV29ybGRDb3B5ID0gMTtcblxuICAgICAgICAgICAgZm9yIChsZXQgdyA9IHcwIC0gZXh0cmFXb3JsZENvcHk7IHcgPD0gdzEgKyBleHRyYVdvcmxkQ29weTsgdysrKSB7XG4gICAgICAgICAgICAgICAgaWYgKHcgPT09IDApIGNvbnRpbnVlO1xuICAgICAgICAgICAgICAgIHJlc3VsdC5wdXNoKG5ldyBVbndyYXBwZWRUaWxlSUQodywgdGlsZUlEKSk7XG4gICAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICAgICAgcmV0dXJuIHJlc3VsdDtcbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBSZXR1cm4gYWxsIGNvb3JkaW5hdGVzIHRoYXQgY291bGQgY292ZXIgdGhpcyB0cmFuc2Zvcm0gZm9yIGEgY292ZXJpbmdcbiAgICAgKiB6b29tIGxldmVsLlxuICAgICAqIEBwYXJhbSB7T2JqZWN0fSBvcHRpb25zXG4gICAgICogQHBhcmFtIHtudW1iZXJ9IG9wdGlvbnMudGlsZVNpemVcbiAgICAgKiBAcGFyYW0ge251bWJlcn0gb3B0aW9ucy5taW56b29tXG4gICAgICogQHBhcmFtIHtudW1iZXJ9IG9wdGlvbnMubWF4em9vbVxuICAgICAqIEBwYXJhbSB7Ym9vbGVhbn0gb3B0aW9ucy5yb3VuZFpvb21cbiAgICAgKiBAcGFyYW0ge2Jvb2xlYW59IG9wdGlvbnMucmVwYXJzZU92ZXJzY2FsZWRcbiAgICAgKiBAcGFyYW0ge2Jvb2xlYW59IG9wdGlvbnMucmVuZGVyV29ybGRDb3BpZXNcbiAgICAgKiBAcmV0dXJucyB7QXJyYXk8VGlsZT59IHRpbGVzXG4gICAgICovXG4gICAgY292ZXJpbmdUaWxlcyhcbiAgICAgICAgb3B0aW9uczoge1xuICAgICAgICAgICAgdGlsZVNpemU6IG51bWJlcixcbiAgICAgICAgICAgIG1pbnpvb20/OiBudW1iZXIsXG4gICAgICAgICAgICBtYXh6b29tPzogbnVtYmVyLFxuICAgICAgICAgICAgcm91bmRab29tPzogYm9vbGVhbixcbiAgICAgICAgICAgIHJlcGFyc2VPdmVyc2NhbGVkPzogYm9vbGVhbixcbiAgICAgICAgICAgIHJlbmRlcldvcmxkQ29waWVzPzogYm9vbGVhblxuICAgICAgICB9XG4gICAgKSB7XG4gICAgICAgIGxldCB6ID0gdGhpcy5jb3ZlcmluZ1pvb21MZXZlbChvcHRpb25zKTtcbiAgICAgICAgY29uc3QgYWN0dWFsWiA9IHo7XG5cbiAgICAgICAgaWYgKG9wdGlvbnMubWluem9vbSAhPT0gdW5kZWZpbmVkICYmIHogPCBvcHRpb25zLm1pbnpvb20pIHJldHVybiBbXTtcbiAgICAgICAgaWYgKG9wdGlvbnMubWF4em9vbSAhPT0gdW5kZWZpbmVkICYmIHogPiBvcHRpb25zLm1heHpvb20pIHogPSBvcHRpb25zLm1heHpvb207XG5cbiAgICAgICAgY29uc3QgY2VudGVyQ29vcmQgPSB0aGlzLnBvaW50Q29vcmRpbmF0ZSh0aGlzLmNlbnRlclBvaW50LCB6KTtcbiAgICAgICAgY29uc3QgY2VudGVyUG9pbnQgPSBuZXcgUG9pbnQoY2VudGVyQ29vcmQuY29sdW1uIC0gMC41LCBjZW50ZXJDb29yZC5yb3cgLSAwLjUpO1xuICAgICAgICBjb25zdCBjb3JuZXJDb29yZHMgPSBbXG4gICAgICAgICAgICB0aGlzLnBvaW50Q29vcmRpbmF0ZShuZXcgUG9pbnQoMCwgMCksIHopLFxuICAgICAgICAgICAgdGhpcy5wb2ludENvb3JkaW5hdGUobmV3IFBvaW50KHRoaXMud2lkdGgsIDApLCB6KSxcbiAgICAgICAgICAgIHRoaXMucG9pbnRDb29yZGluYXRlKG5ldyBQb2ludCh0aGlzLndpZHRoLCB0aGlzLmhlaWdodCksIHopLFxuICAgICAgICAgICAgdGhpcy5wb2ludENvb3JkaW5hdGUobmV3IFBvaW50KDAsIHRoaXMuaGVpZ2h0KSwgeilcbiAgICAgICAgXTtcbiAgICAgICAgcmV0dXJuIHRpbGVDb3Zlcih6LCBjb3JuZXJDb29yZHMsIG9wdGlvbnMucmVwYXJzZU92ZXJzY2FsZWQgPyBhY3R1YWxaIDogeiwgdGhpcy5fcmVuZGVyV29ybGRDb3BpZXMpXG4gICAgICAgICAgICAuc29ydCgoYSwgYikgPT4gY2VudGVyUG9pbnQuZGlzdChhLmNhbm9uaWNhbCkgLSBjZW50ZXJQb2ludC5kaXN0KGIuY2Fub25pY2FsKSk7XG4gICAgfVxuXG4gICAgcmVzaXplKHdpZHRoOiBudW1iZXIsIGhlaWdodDogbnVtYmVyKSB7XG4gICAgICAgIHRoaXMud2lkdGggPSB3aWR0aDtcbiAgICAgICAgdGhpcy5oZWlnaHQgPSBoZWlnaHQ7XG5cbiAgICAgICAgdGhpcy5waXhlbHNUb0dMVW5pdHMgPSBbMiAvIHdpZHRoLCAtMiAvIGhlaWdodF07XG4gICAgICAgIHRoaXMuX2NvbnN0cmFpbigpO1xuICAgICAgICB0aGlzLl9jYWxjTWF0cmljZXMoKTtcbiAgICB9XG5cbiAgICBnZXQgdW5tb2RpZmllZCgpOiBib29sZWFuIHsgcmV0dXJuIHRoaXMuX3VubW9kaWZpZWQ7IH1cblxuICAgIHpvb21TY2FsZSh6b29tOiBudW1iZXIpIHsgcmV0dXJuIE1hdGgucG93KDIsIHpvb20pOyB9XG4gICAgc2NhbGVab29tKHNjYWxlOiBudW1iZXIpIHsgcmV0dXJuIE1hdGgubG9nKHNjYWxlKSAvIE1hdGguTE4yOyB9XG5cbiAgICBwcm9qZWN0KGxuZ2xhdDogTG5nTGF0KSB7XG4gICAgICAgIHJldHVybiBuZXcgUG9pbnQoXG4gICAgICAgICAgICB0aGlzLmxuZ1gobG5nbGF0LmxuZyksXG4gICAgICAgICAgICB0aGlzLmxhdFkobG5nbGF0LmxhdCkpO1xuICAgIH1cblxuICAgIHVucHJvamVjdChwb2ludDogUG9pbnQpOiBMbmdMYXQge1xuICAgICAgICByZXR1cm4gbmV3IExuZ0xhdChcbiAgICAgICAgICAgIHRoaXMueExuZyhwb2ludC54KSxcbiAgICAgICAgICAgIHRoaXMueUxhdChwb2ludC55KSk7XG4gICAgfVxuXG4gICAgZ2V0IHgoKTogbnVtYmVyIHsgcmV0dXJuIHRoaXMubG5nWCh0aGlzLmNlbnRlci5sbmcpOyB9XG4gICAgZ2V0IHkoKTogbnVtYmVyIHsgcmV0dXJuIHRoaXMubGF0WSh0aGlzLmNlbnRlci5sYXQpOyB9XG5cbiAgICBnZXQgcG9pbnQoKTogUG9pbnQgeyByZXR1cm4gbmV3IFBvaW50KHRoaXMueCwgdGhpcy55KTsgfVxuXG4gICAgLyoqXG4gICAgICogbG9uZ2l0dWRlIHRvIGFic29sdXRlIHggY29vcmRcbiAgICAgKiBAcmV0dXJucyB7bnVtYmVyfSBwaXhlbCBjb29yZGluYXRlXG4gICAgICovXG4gICAgbG5nWChsbmc6IG51bWJlcikge1xuICAgICAgICByZXR1cm4gKDE4MCArIGxuZykgKiB0aGlzLndvcmxkU2l6ZSAvIDM2MDtcbiAgICB9XG4gICAgLyoqXG4gICAgICogbGF0aXR1ZGUgdG8gYWJzb2x1dGUgeSBjb29yZFxuICAgICAqIEByZXR1cm5zIHtudW1iZXJ9IHBpeGVsIGNvb3JkaW5hdGVcbiAgICAgKi9cbiAgICBsYXRZKGxhdDogbnVtYmVyKSB7XG4gICAgICAgIGxhdCA9IGNsYW1wKGxhdCwgLXRoaXMubWF4VmFsaWRMYXRpdHVkZSwgdGhpcy5tYXhWYWxpZExhdGl0dWRlKTtcbiAgICAgICAgY29uc3QgeSA9IDE4MCAvIE1hdGguUEkgKiBNYXRoLmxvZyhNYXRoLnRhbihNYXRoLlBJIC8gNCArIGxhdCAqIE1hdGguUEkgLyAzNjApKTtcbiAgICAgICAgcmV0dXJuICgxODAgLSB5KSAqIHRoaXMud29ybGRTaXplIC8gMzYwO1xuICAgIH1cblxuICAgIHhMbmcoeDogbnVtYmVyKSB7XG4gICAgICAgIHJldHVybiB4ICogMzYwIC8gdGhpcy53b3JsZFNpemUgLSAxODA7XG4gICAgfVxuICAgIHlMYXQoeTogbnVtYmVyKSB7XG4gICAgICAgIGNvbnN0IHkyID0gMTgwIC0geSAqIDM2MCAvIHRoaXMud29ybGRTaXplO1xuICAgICAgICByZXR1cm4gMzYwIC8gTWF0aC5QSSAqIE1hdGguYXRhbihNYXRoLmV4cCh5MiAqIE1hdGguUEkgLyAxODApKSAtIDkwO1xuICAgIH1cblxuICAgIHNldExvY2F0aW9uQXRQb2ludChsbmdsYXQ6IExuZ0xhdCwgcG9pbnQ6IFBvaW50KSB7XG4gICAgICAgIGNvbnN0IHRyYW5zbGF0ZSA9IHRoaXMucG9pbnRDb29yZGluYXRlKHBvaW50KS5fc3ViKHRoaXMucG9pbnRDb29yZGluYXRlKHRoaXMuY2VudGVyUG9pbnQpKTtcbiAgICAgICAgdGhpcy5jZW50ZXIgPSB0aGlzLmNvb3JkaW5hdGVMb2NhdGlvbih0aGlzLmxvY2F0aW9uQ29vcmRpbmF0ZShsbmdsYXQpLl9zdWIodHJhbnNsYXRlKSk7XG4gICAgICAgIGlmICh0aGlzLl9yZW5kZXJXb3JsZENvcGllcykge1xuICAgICAgICAgICAgdGhpcy5jZW50ZXIgPSB0aGlzLmNlbnRlci53cmFwKCk7XG4gICAgICAgIH1cbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBHaXZlbiBhIGxvY2F0aW9uLCByZXR1cm4gdGhlIHNjcmVlbiBwb2ludCB0aGF0IGNvcnJlc3BvbmRzIHRvIGl0XG4gICAgICogQHBhcmFtIHtMbmdMYXR9IGxuZ2xhdCBsb2NhdGlvblxuICAgICAqIEByZXR1cm5zIHtQb2ludH0gc2NyZWVuIHBvaW50XG4gICAgICovXG4gICAgbG9jYXRpb25Qb2ludChsbmdsYXQ6IExuZ0xhdCkge1xuICAgICAgICByZXR1cm4gdGhpcy5jb29yZGluYXRlUG9pbnQodGhpcy5sb2NhdGlvbkNvb3JkaW5hdGUobG5nbGF0KSk7XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogR2l2ZW4gYSBwb2ludCBvbiBzY3JlZW4sIHJldHVybiBpdHMgbG5nbGF0XG4gICAgICogQHBhcmFtIHtQb2ludH0gcCBzY3JlZW4gcG9pbnRcbiAgICAgKiBAcmV0dXJucyB7TG5nTGF0fSBsbmdsYXQgbG9jYXRpb25cbiAgICAgKi9cbiAgICBwb2ludExvY2F0aW9uKHA6IFBvaW50KSB7XG4gICAgICAgIHJldHVybiB0aGlzLmNvb3JkaW5hdGVMb2NhdGlvbih0aGlzLnBvaW50Q29vcmRpbmF0ZShwKSk7XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogR2l2ZW4gYSBnZW9ncmFwaGljYWwgbG5nbGF0LCByZXR1cm4gYW4gdW5yb3VuZGVkXG4gICAgICogY29vcmRpbmF0ZSB0aGF0IHJlcHJlc2VudHMgaXQgYXQgdGhpcyB0cmFuc2Zvcm0ncyB6b29tIGxldmVsLlxuICAgICAqIEBwYXJhbSB7TG5nTGF0fSBsbmdsYXRcbiAgICAgKiBAcmV0dXJucyB7Q29vcmRpbmF0ZX1cbiAgICAgKi9cbiAgICBsb2NhdGlvbkNvb3JkaW5hdGUobG5nbGF0OiBMbmdMYXQpIHtcbiAgICAgICAgcmV0dXJuIG5ldyBDb29yZGluYXRlKFxuICAgICAgICAgICAgdGhpcy5sbmdYKGxuZ2xhdC5sbmcpIC8gdGhpcy50aWxlU2l6ZSxcbiAgICAgICAgICAgIHRoaXMubGF0WShsbmdsYXQubGF0KSAvIHRoaXMudGlsZVNpemUsXG4gICAgICAgICAgICB0aGlzLnpvb20pLnpvb21Ubyh0aGlzLnRpbGVab29tKTtcbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBHaXZlbiBhIENvb3JkaW5hdGUsIHJldHVybiBpdHMgZ2VvZ3JhcGhpY2FsIHBvc2l0aW9uLlxuICAgICAqIEBwYXJhbSB7Q29vcmRpbmF0ZX0gY29vcmRcbiAgICAgKiBAcmV0dXJucyB7TG5nTGF0fSBsbmdsYXRcbiAgICAgKi9cbiAgICBjb29yZGluYXRlTG9jYXRpb24oY29vcmQ6IENvb3JkaW5hdGUpIHtcbiAgICAgICAgY29uc3Qgem9vbWVkQ29vcmQgPSBjb29yZC56b29tVG8odGhpcy56b29tKTtcbiAgICAgICAgcmV0dXJuIG5ldyBMbmdMYXQoXG4gICAgICAgICAgICB0aGlzLnhMbmcoem9vbWVkQ29vcmQuY29sdW1uICogdGhpcy50aWxlU2l6ZSksXG4gICAgICAgICAgICB0aGlzLnlMYXQoem9vbWVkQ29vcmQucm93ICogdGhpcy50aWxlU2l6ZSkpO1xuICAgIH1cblxuICAgIHBvaW50Q29vcmRpbmF0ZShwOiBQb2ludCwgem9vbT86IG51bWJlcikge1xuICAgICAgICBpZiAoem9vbSA9PT0gdW5kZWZpbmVkKSB6b29tID0gdGhpcy50aWxlWm9vbTtcblxuICAgICAgICBjb25zdCB0YXJnZXRaID0gMDtcbiAgICAgICAgLy8gc2luY2Ugd2UgZG9uJ3Qga25vdyB0aGUgY29ycmVjdCBwcm9qZWN0ZWQgeiB2YWx1ZSBmb3IgdGhlIHBvaW50LFxuICAgICAgICAvLyB1bnByb2plY3QgdHdvIHBvaW50cyB0byBnZXQgYSBsaW5lIGFuZCB0aGVuIGZpbmQgdGhlIHBvaW50IG9uIHRoYXRcbiAgICAgICAgLy8gbGluZSB3aXRoIHo9MFxuXG4gICAgICAgIGNvbnN0IGNvb3JkMCA9IFtwLngsIHAueSwgMCwgMV07XG4gICAgICAgIGNvbnN0IGNvb3JkMSA9IFtwLngsIHAueSwgMSwgMV07XG5cbiAgICAgICAgdmVjNC50cmFuc2Zvcm1NYXQ0KGNvb3JkMCwgY29vcmQwLCB0aGlzLnBpeGVsTWF0cml4SW52ZXJzZSk7XG4gICAgICAgIHZlYzQudHJhbnNmb3JtTWF0NChjb29yZDEsIGNvb3JkMSwgdGhpcy5waXhlbE1hdHJpeEludmVyc2UpO1xuXG4gICAgICAgIGNvbnN0IHcwID0gY29vcmQwWzNdO1xuICAgICAgICBjb25zdCB3MSA9IGNvb3JkMVszXTtcbiAgICAgICAgY29uc3QgeDAgPSBjb29yZDBbMF0gLyB3MDtcbiAgICAgICAgY29uc3QgeDEgPSBjb29yZDFbMF0gLyB3MTtcbiAgICAgICAgY29uc3QgeTAgPSBjb29yZDBbMV0gLyB3MDtcbiAgICAgICAgY29uc3QgeTEgPSBjb29yZDFbMV0gLyB3MTtcbiAgICAgICAgY29uc3QgejAgPSBjb29yZDBbMl0gLyB3MDtcbiAgICAgICAgY29uc3QgejEgPSBjb29yZDFbMl0gLyB3MTtcblxuICAgICAgICBjb25zdCB0ID0gejAgPT09IHoxID8gMCA6ICh0YXJnZXRaIC0gejApIC8gKHoxIC0gejApO1xuXG4gICAgICAgIHJldHVybiBuZXcgQ29vcmRpbmF0ZShcbiAgICAgICAgICAgIGludGVycG9sYXRlKHgwLCB4MSwgdCkgLyB0aGlzLnRpbGVTaXplLFxuICAgICAgICAgICAgaW50ZXJwb2xhdGUoeTAsIHkxLCB0KSAvIHRoaXMudGlsZVNpemUsXG4gICAgICAgICAgICB0aGlzLnpvb20pLl96b29tVG8oem9vbSk7XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogR2l2ZW4gYSBjb29yZGluYXRlLCByZXR1cm4gdGhlIHNjcmVlbiBwb2ludCB0aGF0IGNvcnJlc3BvbmRzIHRvIGl0XG4gICAgICogQHBhcmFtIHtDb29yZGluYXRlfSBjb29yZFxuICAgICAqIEByZXR1cm5zIHtQb2ludH0gc2NyZWVuIHBvaW50XG4gICAgICovXG4gICAgY29vcmRpbmF0ZVBvaW50KGNvb3JkOiBDb29yZGluYXRlKSB7XG4gICAgICAgIGNvbnN0IHpvb21lZENvb3JkID0gY29vcmQuem9vbVRvKHRoaXMuem9vbSk7XG4gICAgICAgIGNvbnN0IHAgPSBbem9vbWVkQ29vcmQuY29sdW1uICogdGhpcy50aWxlU2l6ZSwgem9vbWVkQ29vcmQucm93ICogdGhpcy50aWxlU2l6ZSwgMCwgMV07XG4gICAgICAgIHZlYzQudHJhbnNmb3JtTWF0NChwLCBwLCB0aGlzLnBpeGVsTWF0cml4KTtcbiAgICAgICAgcmV0dXJuIG5ldyBQb2ludChwWzBdIC8gcFszXSwgcFsxXSAvIHBbM10pO1xuICAgIH1cblxuICAgIC8qKlxuICAgICAqIFJldHVybnMgdGhlIG1hcCdzIGdlb2dyYXBoaWNhbCBib3VuZHMuIFdoZW4gdGhlIGJlYXJpbmcgb3IgcGl0Y2ggaXMgbm9uLXplcm8sIHRoZSB2aXNpYmxlIHJlZ2lvbiBpcyBub3RcbiAgICAgKiBhbiBheGlzLWFsaWduZWQgcmVjdGFuZ2xlLCBhbmQgdGhlIHJlc3VsdCBpcyB0aGUgc21hbGxlc3QgYm91bmRzIHRoYXQgZW5jb21wYXNzZXMgdGhlIHZpc2libGUgcmVnaW9uLlxuICAgICAqL1xuICAgIGdldEJvdW5kcygpOiBMbmdMYXRCb3VuZHMge1xuICAgICAgICByZXR1cm4gbmV3IExuZ0xhdEJvdW5kcygpXG4gICAgICAgICAgICAuZXh0ZW5kKHRoaXMucG9pbnRMb2NhdGlvbihuZXcgUG9pbnQoMCwgMCkpKVxuICAgICAgICAgICAgLmV4dGVuZCh0aGlzLnBvaW50TG9jYXRpb24obmV3IFBvaW50KHRoaXMud2lkdGgsIDApKSlcbiAgICAgICAgICAgIC5leHRlbmQodGhpcy5wb2ludExvY2F0aW9uKG5ldyBQb2ludCh0aGlzLndpZHRoLCB0aGlzLmhlaWdodCkpKVxuICAgICAgICAgICAgLmV4dGVuZCh0aGlzLnBvaW50TG9jYXRpb24obmV3IFBvaW50KDAsIHRoaXMuaGVpZ2h0KSkpO1xuICAgIH1cblxuICAgIC8qKlxuICAgICAqIFJldHVybnMgdGhlIG1heGltdW0gZ2VvZ3JhcGhpY2FsIGJvdW5kcyB0aGUgbWFwIGlzIGNvbnN0cmFpbmVkIHRvLCBvciBgbnVsbGAgaWYgbm9uZSBzZXQuXG4gICAgICovXG4gICAgZ2V0TWF4Qm91bmRzKCk6IExuZ0xhdEJvdW5kcyB8IG51bGwge1xuICAgICAgICBpZiAoIXRoaXMubGF0UmFuZ2UgfHwgdGhpcy5sYXRSYW5nZS5sZW5ndGggIT09IDIgfHxcbiAgICAgICAgICAgICF0aGlzLmxuZ1JhbmdlIHx8IHRoaXMubG5nUmFuZ2UubGVuZ3RoICE9PSAyKSByZXR1cm4gbnVsbDtcblxuICAgICAgICByZXR1cm4gbmV3IExuZ0xhdEJvdW5kcyhbdGhpcy5sbmdSYW5nZVswXSwgdGhpcy5sYXRSYW5nZVswXV0sIFt0aGlzLmxuZ1JhbmdlWzFdLCB0aGlzLmxhdFJhbmdlWzFdXSk7XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogU2V0cyBvciBjbGVhcnMgdGhlIG1hcCdzIGdlb2dyYXBoaWNhbCBjb25zdHJhaW50cy5cbiAgICAgKi9cbiAgICBzZXRNYXhCb3VuZHMoYm91bmRzPzogTG5nTGF0Qm91bmRzKSB7XG4gICAgICAgIGlmIChib3VuZHMpIHtcbiAgICAgICAgICAgIHRoaXMubG5nUmFuZ2UgPSBbYm91bmRzLmdldFdlc3QoKSwgYm91bmRzLmdldEVhc3QoKV07XG4gICAgICAgICAgICB0aGlzLmxhdFJhbmdlID0gW2JvdW5kcy5nZXRTb3V0aCgpLCBib3VuZHMuZ2V0Tm9ydGgoKV07XG4gICAgICAgICAgICB0aGlzLl9jb25zdHJhaW4oKTtcbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgIHRoaXMubG5nUmFuZ2UgPSBudWxsO1xuICAgICAgICAgICAgdGhpcy5sYXRSYW5nZSA9IFstdGhpcy5tYXhWYWxpZExhdGl0dWRlLCB0aGlzLm1heFZhbGlkTGF0aXR1ZGVdO1xuICAgICAgICB9XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogQ2FsY3VsYXRlIHRoZSBwb3NNYXRyaXggdGhhdCwgZ2l2ZW4gYSB0aWxlIGNvb3JkaW5hdGUsIHdvdWxkIGJlIHVzZWQgdG8gZGlzcGxheSB0aGUgdGlsZSBvbiBhIG1hcC5cbiAgICAgKiBAcGFyYW0ge1Vud3JhcHBlZFRpbGVJRH0gdW53cmFwcGVkVGlsZUlEO1xuICAgICAqL1xuICAgIGNhbGN1bGF0ZVBvc01hdHJpeCh1bndyYXBwZWRUaWxlSUQ6IFVud3JhcHBlZFRpbGVJRCwgYWxpZ25lZDogYm9vbGVhbiA9IGZhbHNlKTogRmxvYXQzMkFycmF5IHtcbiAgICAgICAgY29uc3QgcG9zTWF0cml4S2V5ID0gdW53cmFwcGVkVGlsZUlELmtleTtcbiAgICAgICAgY29uc3QgY2FjaGUgPSBhbGlnbmVkID8gdGhpcy5fYWxpZ25lZFBvc01hdHJpeENhY2hlIDogdGhpcy5fcG9zTWF0cml4Q2FjaGU7XG4gICAgICAgIGlmIChjYWNoZVtwb3NNYXRyaXhLZXldKSB7XG4gICAgICAgICAgICByZXR1cm4gY2FjaGVbcG9zTWF0cml4S2V5XTtcbiAgICAgICAgfVxuXG4gICAgICAgIGNvbnN0IGNhbm9uaWNhbCA9IHVud3JhcHBlZFRpbGVJRC5jYW5vbmljYWw7XG4gICAgICAgIGNvbnN0IHNjYWxlID0gdGhpcy53b3JsZFNpemUgLyB0aGlzLnpvb21TY2FsZShjYW5vbmljYWwueik7XG4gICAgICAgIGNvbnN0IHVud3JhcHBlZFggPSBjYW5vbmljYWwueCArIE1hdGgucG93KDIsIGNhbm9uaWNhbC56KSAqIHVud3JhcHBlZFRpbGVJRC53cmFwO1xuXG4gICAgICAgIGNvbnN0IHBvc01hdHJpeCA9IG1hdDQuaWRlbnRpdHkobmV3IEZsb2F0NjRBcnJheSgxNikpO1xuICAgICAgICBtYXQ0LnRyYW5zbGF0ZShwb3NNYXRyaXgsIHBvc01hdHJpeCwgW3Vud3JhcHBlZFggKiBzY2FsZSwgY2Fub25pY2FsLnkgKiBzY2FsZSwgMF0pO1xuICAgICAgICBtYXQ0LnNjYWxlKHBvc01hdHJpeCwgcG9zTWF0cml4LCBbc2NhbGUgLyBFWFRFTlQsIHNjYWxlIC8gRVhURU5ULCAxXSk7XG4gICAgICAgIG1hdDQubXVsdGlwbHkocG9zTWF0cml4LCBhbGlnbmVkID8gdGhpcy5hbGlnbmVkUHJvak1hdHJpeCA6IHRoaXMucHJvak1hdHJpeCwgcG9zTWF0cml4KTtcblxuICAgICAgICBjYWNoZVtwb3NNYXRyaXhLZXldID0gbmV3IEZsb2F0MzJBcnJheShwb3NNYXRyaXgpO1xuICAgICAgICByZXR1cm4gY2FjaGVbcG9zTWF0cml4S2V5XTtcbiAgICB9XG5cbiAgICBfY29uc3RyYWluKCkge1xuICAgICAgICBpZiAoIXRoaXMuY2VudGVyIHx8ICF0aGlzLndpZHRoIHx8ICF0aGlzLmhlaWdodCB8fCB0aGlzLl9jb25zdHJhaW5pbmcpIHJldHVybjtcblxuICAgICAgICB0aGlzLl9jb25zdHJhaW5pbmcgPSB0cnVlO1xuXG4gICAgICAgIGxldCBtaW5ZID0gLTkwO1xuICAgICAgICBsZXQgbWF4WSA9IDkwO1xuICAgICAgICBsZXQgbWluWCA9IC0xODA7XG4gICAgICAgIGxldCBtYXhYID0gMTgwO1xuICAgICAgICBsZXQgc3ksIHN4LCB4MiwgeTI7XG4gICAgICAgIGNvbnN0IHNpemUgPSB0aGlzLnNpemUsXG4gICAgICAgICAgICB1bm1vZGlmaWVkID0gdGhpcy5fdW5tb2RpZmllZDtcblxuICAgICAgICBpZiAodGhpcy5sYXRSYW5nZSkge1xuICAgICAgICAgICAgY29uc3QgbGF0UmFuZ2UgPSB0aGlzLmxhdFJhbmdlO1xuICAgICAgICAgICAgbWluWSA9IHRoaXMubGF0WShsYXRSYW5nZVsxXSk7XG4gICAgICAgICAgICBtYXhZID0gdGhpcy5sYXRZKGxhdFJhbmdlWzBdKTtcbiAgICAgICAgICAgIHN5ID0gbWF4WSAtIG1pblkgPCBzaXplLnkgPyBzaXplLnkgLyAobWF4WSAtIG1pblkpIDogMDtcbiAgICAgICAgfVxuXG4gICAgICAgIGlmICh0aGlzLmxuZ1JhbmdlKSB7XG4gICAgICAgICAgICBjb25zdCBsbmdSYW5nZSA9IHRoaXMubG5nUmFuZ2U7XG4gICAgICAgICAgICBtaW5YID0gdGhpcy5sbmdYKGxuZ1JhbmdlWzBdKTtcbiAgICAgICAgICAgIG1heFggPSB0aGlzLmxuZ1gobG5nUmFuZ2VbMV0pO1xuICAgICAgICAgICAgc3ggPSBtYXhYIC0gbWluWCA8IHNpemUueCA/IHNpemUueCAvIChtYXhYIC0gbWluWCkgOiAwO1xuICAgICAgICB9XG5cbiAgICAgICAgLy8gaG93IG11Y2ggdGhlIG1hcCBzaG91bGQgc2NhbGUgdG8gZml0IHRoZSBzY3JlZW4gaW50byBnaXZlbiBsYXRpdHVkZS9sb25naXR1ZGUgcmFuZ2VzXG4gICAgICAgIGNvbnN0IHMgPSBNYXRoLm1heChzeCB8fCAwLCBzeSB8fCAwKTtcblxuICAgICAgICBpZiAocykge1xuICAgICAgICAgICAgdGhpcy5jZW50ZXIgPSB0aGlzLnVucHJvamVjdChuZXcgUG9pbnQoXG4gICAgICAgICAgICAgICAgc3ggPyAobWF4WCArIG1pblgpIC8gMiA6IHRoaXMueCxcbiAgICAgICAgICAgICAgICBzeSA/IChtYXhZICsgbWluWSkgLyAyIDogdGhpcy55KSk7XG4gICAgICAgICAgICB0aGlzLnpvb20gKz0gdGhpcy5zY2FsZVpvb20ocyk7XG4gICAgICAgICAgICB0aGlzLl91bm1vZGlmaWVkID0gdW5tb2RpZmllZDtcbiAgICAgICAgICAgIHRoaXMuX2NvbnN0cmFpbmluZyA9IGZhbHNlO1xuICAgICAgICAgICAgcmV0dXJuO1xuICAgICAgICB9XG5cbiAgICAgICAgaWYgKHRoaXMubGF0UmFuZ2UpIHtcbiAgICAgICAgICAgIGNvbnN0IHkgPSB0aGlzLnksXG4gICAgICAgICAgICAgICAgaDIgPSBzaXplLnkgLyAyO1xuXG4gICAgICAgICAgICBpZiAoeSAtIGgyIDwgbWluWSkgeTIgPSBtaW5ZICsgaDI7XG4gICAgICAgICAgICBpZiAoeSArIGgyID4gbWF4WSkgeTIgPSBtYXhZIC0gaDI7XG4gICAgICAgIH1cblxuICAgICAgICBpZiAodGhpcy5sbmdSYW5nZSkge1xuICAgICAgICAgICAgY29uc3QgeCA9IHRoaXMueCxcbiAgICAgICAgICAgICAgICB3MiA9IHNpemUueCAvIDI7XG5cbiAgICAgICAgICAgIGlmICh4IC0gdzIgPCBtaW5YKSB4MiA9IG1pblggKyB3MjtcbiAgICAgICAgICAgIGlmICh4ICsgdzIgPiBtYXhYKSB4MiA9IG1heFggLSB3MjtcbiAgICAgICAgfVxuXG4gICAgICAgIC8vIHBhbiB0aGUgbWFwIGlmIHRoZSBzY3JlZW4gZ29lcyBvZmYgdGhlIHJhbmdlXG4gICAgICAgIGlmICh4MiAhPT0gdW5kZWZpbmVkIHx8IHkyICE9PSB1bmRlZmluZWQpIHtcbiAgICAgICAgICAgIHRoaXMuY2VudGVyID0gdGhpcy51bnByb2plY3QobmV3IFBvaW50KFxuICAgICAgICAgICAgICAgIHgyICE9PSB1bmRlZmluZWQgPyB4MiA6IHRoaXMueCxcbiAgICAgICAgICAgICAgICB5MiAhPT0gdW5kZWZpbmVkID8geTIgOiB0aGlzLnkpKTtcbiAgICAgICAgfVxuXG4gICAgICAgIHRoaXMuX3VubW9kaWZpZWQgPSB1bm1vZGlmaWVkO1xuICAgICAgICB0aGlzLl9jb25zdHJhaW5pbmcgPSBmYWxzZTtcbiAgICB9XG5cbiAgICBfY2FsY01hdHJpY2VzKCkge1xuICAgICAgICBpZiAoIXRoaXMuaGVpZ2h0KSByZXR1cm47XG5cbiAgICAgICAgdGhpcy5jYW1lcmFUb0NlbnRlckRpc3RhbmNlID0gMC41IC8gTWF0aC50YW4odGhpcy5fZm92IC8gMikgKiB0aGlzLmhlaWdodDtcblxuICAgICAgICAvLyBGaW5kIHRoZSBkaXN0YW5jZSBmcm9tIHRoZSBjZW50ZXIgcG9pbnQgW3dpZHRoLzIsIGhlaWdodC8yXSB0byB0aGVcbiAgICAgICAgLy8gY2VudGVyIHRvcCBwb2ludCBbd2lkdGgvMiwgMF0gaW4gWiB1bml0cywgdXNpbmcgdGhlIGxhdyBvZiBzaW5lcy5cbiAgICAgICAgLy8gMSBaIHVuaXQgaXMgZXF1aXZhbGVudCB0byAxIGhvcml6b250YWwgcHggYXQgdGhlIGNlbnRlciBvZiB0aGUgbWFwXG4gICAgICAgIC8vICh0aGUgZGlzdGFuY2UgYmV0d2Vlblt3aWR0aC8yLCBoZWlnaHQvMl0gYW5kIFt3aWR0aC8yICsgMSwgaGVpZ2h0LzJdKVxuICAgICAgICBjb25zdCBoYWxmRm92ID0gdGhpcy5fZm92IC8gMjtcbiAgICAgICAgY29uc3QgZ3JvdW5kQW5nbGUgPSBNYXRoLlBJIC8gMiArIHRoaXMuX3BpdGNoO1xuICAgICAgICBjb25zdCB0b3BIYWxmU3VyZmFjZURpc3RhbmNlID0gTWF0aC5zaW4oaGFsZkZvdikgKiB0aGlzLmNhbWVyYVRvQ2VudGVyRGlzdGFuY2UgLyBNYXRoLnNpbihNYXRoLlBJIC0gZ3JvdW5kQW5nbGUgLSBoYWxmRm92KTtcbiAgICAgICAgY29uc3QgeCA9IHRoaXMueCwgeSA9IHRoaXMueTtcblxuICAgICAgICAvLyBDYWxjdWxhdGUgeiBkaXN0YW5jZSBvZiB0aGUgZmFydGhlc3QgZnJhZ21lbnQgdGhhdCBzaG91bGQgYmUgcmVuZGVyZWQuXG4gICAgICAgIGNvbnN0IGZ1cnRoZXN0RGlzdGFuY2UgPSBNYXRoLmNvcyhNYXRoLlBJIC8gMiAtIHRoaXMuX3BpdGNoKSAqIHRvcEhhbGZTdXJmYWNlRGlzdGFuY2UgKyB0aGlzLmNhbWVyYVRvQ2VudGVyRGlzdGFuY2U7XG4gICAgICAgIC8vIEFkZCBhIGJpdCBleHRyYSB0byBhdm9pZCBwcmVjaXNpb24gcHJvYmxlbXMgd2hlbiBhIGZyYWdtZW50J3MgZGlzdGFuY2UgaXMgZXhhY3RseSBgZnVydGhlc3REaXN0YW5jZWBcbiAgICAgICAgY29uc3QgZmFyWiA9IGZ1cnRoZXN0RGlzdGFuY2UgKiAxLjAxO1xuXG4gICAgICAgIC8vIG1hdHJpeCBmb3IgY29udmVyc2lvbiBmcm9tIGxvY2F0aW9uIHRvIEdMIGNvb3JkaW5hdGVzICgtMSAuLiAxKVxuICAgICAgICBsZXQgbSA9IG5ldyBGbG9hdDY0QXJyYXkoMTYpO1xuICAgICAgICBtYXQ0LnBlcnNwZWN0aXZlKG0sIHRoaXMuX2ZvdiwgdGhpcy53aWR0aCAvIHRoaXMuaGVpZ2h0LCAxLCBmYXJaKTtcblxuICAgICAgICBtYXQ0LnNjYWxlKG0sIG0sIFsxLCAtMSwgMV0pO1xuICAgICAgICBtYXQ0LnRyYW5zbGF0ZShtLCBtLCBbMCwgMCwgLXRoaXMuY2FtZXJhVG9DZW50ZXJEaXN0YW5jZV0pO1xuICAgICAgICBtYXQ0LnJvdGF0ZVgobSwgbSwgdGhpcy5fcGl0Y2gpO1xuICAgICAgICBtYXQ0LnJvdGF0ZVoobSwgbSwgdGhpcy5hbmdsZSk7XG4gICAgICAgIG1hdDQudHJhbnNsYXRlKG0sIG0sIFsteCwgLXksIDBdKTtcblxuICAgICAgICAvLyBzY2FsZSB2ZXJ0aWNhbGx5IHRvIG1ldGVycyBwZXIgcGl4ZWwgKGludmVyc2Ugb2YgZ3JvdW5kIHJlc29sdXRpb24pOlxuICAgICAgICAvLyB3b3JsZFNpemUgLyAoY2lyY3VtZmVyZW5jZU9mRWFydGggKiBjb3MobGF0ICogz4AgLyAxODApKVxuICAgICAgICBjb25zdCB2ZXJ0aWNhbFNjYWxlID0gdGhpcy53b3JsZFNpemUgLyAoMiAqIE1hdGguUEkgKiA2Mzc4MTM3ICogTWF0aC5hYnMoTWF0aC5jb3ModGhpcy5jZW50ZXIubGF0ICogKE1hdGguUEkgLyAxODApKSkpO1xuICAgICAgICBtYXQ0LnNjYWxlKG0sIG0sIFsxLCAxLCB2ZXJ0aWNhbFNjYWxlLCAxXSk7XG5cbiAgICAgICAgdGhpcy5wcm9qTWF0cml4ID0gbTtcblxuICAgICAgICAvLyBNYWtlIGEgc2Vjb25kIHByb2plY3Rpb24gbWF0cml4IHRoYXQgaXMgYWxpZ25lZCB0byBhIHBpeGVsIGdyaWQgZm9yIHJlbmRlcmluZyByYXN0ZXIgdGlsZXMuXG4gICAgICAgIC8vIFdlJ3JlIHJvdW5kaW5nIHRoZSAoZmxvYXRpbmcgcG9pbnQpIHgveSB2YWx1ZXMgdG8gYWNoaWV2ZSB0byBhdm9pZCByZW5kZXJpbmcgcmFzdGVyIGltYWdlcyB0byBmcmFjdGlvbmFsXG4gICAgICAgIC8vIGNvb3JkaW5hdGVzLiBBZGRpdGlvbmFsbHksIHdlIGFkanVzdCBieSBoYWxmIGEgcGl4ZWwgaW4gZWl0aGVyIGRpcmVjdGlvbiBpbiBjYXNlIHRoYXQgdmlld3BvcnQgZGltZW5zaW9uXG4gICAgICAgIC8vIGlzIGFuIG9kZCBpbnRlZ2VyIHRvIHByZXNlcnZlIHJlbmRlcmluZyB0byB0aGUgcGl4ZWwgZ3JpZC4gV2UncmUgcm90YXRpbmcgdGhpcyBzaGlmdCBiYXNlZCBvbiB0aGUgYW5nbGVcbiAgICAgICAgLy8gb2YgdGhlIHRyYW5zZm9ybWF0aW9uIHNvIHRoYXQgMMKwLCA5MMKwLCAxODDCsCwgYW5kIDI3MMKwIHJhc3RlcnMgYXJlIGNyaXNwLCBhbmQgYWRqdXN0IHRoZSBzaGlmdCBzbyB0aGF0XG4gICAgICAgIC8vIGl0IGlzIGFsd2F5cyA8PSAwLjUgcGl4ZWxzLlxuICAgICAgICBjb25zdCB4U2hpZnQgPSAodGhpcy53aWR0aCAlIDIpIC8gMiwgeVNoaWZ0ID0gKHRoaXMuaGVpZ2h0ICUgMikgLyAyLFxuICAgICAgICAgICAgYW5nbGVDb3MgPSBNYXRoLmNvcyh0aGlzLmFuZ2xlKSwgYW5nbGVTaW4gPSBNYXRoLnNpbih0aGlzLmFuZ2xlKSxcbiAgICAgICAgICAgIGR4ID0geCAtIE1hdGgucm91bmQoeCkgKyBhbmdsZUNvcyAqIHhTaGlmdCArIGFuZ2xlU2luICogeVNoaWZ0LFxuICAgICAgICAgICAgZHkgPSB5IC0gTWF0aC5yb3VuZCh5KSArIGFuZ2xlQ29zICogeVNoaWZ0ICsgYW5nbGVTaW4gKiB4U2hpZnQ7XG4gICAgICAgIGNvbnN0IGFsaWduZWRNID0gbmV3IEZsb2F0NjRBcnJheShtKTtcbiAgICAgICAgbWF0NC50cmFuc2xhdGUoYWxpZ25lZE0sIGFsaWduZWRNLCBbIGR4ID4gMC41ID8gZHggLSAxIDogZHgsIGR5ID4gMC41ID8gZHkgLSAxIDogZHksIDAgXSk7XG4gICAgICAgIHRoaXMuYWxpZ25lZFByb2pNYXRyaXggPSBhbGlnbmVkTTtcblxuICAgICAgICAvLyBtYXRyaXggZm9yIGNvbnZlcnNpb24gZnJvbSBsb2NhdGlvbiB0byBzY3JlZW4gY29vcmRpbmF0ZXNcbiAgICAgICAgbSA9IG1hdDQuY3JlYXRlKCk7XG4gICAgICAgIG1hdDQuc2NhbGUobSwgbSwgW3RoaXMud2lkdGggLyAyLCAtdGhpcy5oZWlnaHQgLyAyLCAxXSk7XG4gICAgICAgIG1hdDQudHJhbnNsYXRlKG0sIG0sIFsxLCAtMSwgMF0pO1xuICAgICAgICB0aGlzLnBpeGVsTWF0cml4ID0gbWF0NC5tdWx0aXBseShuZXcgRmxvYXQ2NEFycmF5KDE2KSwgbSwgdGhpcy5wcm9qTWF0cml4KTtcblxuICAgICAgICAvLyBpbnZlcnNlIG1hdHJpeCBmb3IgY29udmVyc2lvbiBmcm9tIHNjcmVlbiBjb29yZGluYWVzIHRvIGxvY2F0aW9uXG4gICAgICAgIG0gPSBtYXQ0LmludmVydChuZXcgRmxvYXQ2NEFycmF5KDE2KSwgdGhpcy5waXhlbE1hdHJpeCk7XG4gICAgICAgIGlmICghbSkgdGhyb3cgbmV3IEVycm9yKFwiZmFpbGVkIHRvIGludmVydCBtYXRyaXhcIik7XG4gICAgICAgIHRoaXMucGl4ZWxNYXRyaXhJbnZlcnNlID0gbTtcblxuICAgICAgICB0aGlzLl9wb3NNYXRyaXhDYWNoZSA9IHt9O1xuICAgICAgICB0aGlzLl9hbGlnbmVkUG9zTWF0cml4Q2FjaGUgPSB7fTtcbiAgICB9XG5cbiAgICBtYXhQaXRjaFNjYWxlRmFjdG9yKCkge1xuICAgICAgICAvLyBjYWxjTWF0cmljZXMgaGFzbid0IHJ1biB5ZXRcbiAgICAgICAgaWYgKCF0aGlzLnBpeGVsTWF0cml4SW52ZXJzZSkgcmV0dXJuIDE7XG5cbiAgICAgICAgY29uc3QgY29vcmQgPSB0aGlzLnBvaW50Q29vcmRpbmF0ZShuZXcgUG9pbnQoMCwgMCkpLnpvb21Ubyh0aGlzLnpvb20pO1xuICAgICAgICBjb25zdCBwID0gW2Nvb3JkLmNvbHVtbiAqIHRoaXMudGlsZVNpemUsIGNvb3JkLnJvdyAqIHRoaXMudGlsZVNpemUsIDAsIDFdO1xuICAgICAgICBjb25zdCB0b3BQb2ludCA9IHZlYzQudHJhbnNmb3JtTWF0NChwLCBwLCB0aGlzLnBpeGVsTWF0cml4KTtcbiAgICAgICAgcmV0dXJuIHRvcFBvaW50WzNdIC8gdGhpcy5jYW1lcmFUb0NlbnRlckRpc3RhbmNlO1xuICAgIH1cbn1cblxuZXhwb3J0IGRlZmF1bHQgVHJhbnNmb3JtO1xuIiwiLy8gQGZsb3dcblxuaW1wb3J0IHsgYmluZEFsbCB9IGZyb20gJy4uL3V0aWwvdXRpbCc7XG5pbXBvcnQgd2luZG93IGZyb20gJy4uL3V0aWwvd2luZG93JztcbmltcG9ydCB0aHJvdHRsZSBmcm9tICcuLi91dGlsL3Rocm90dGxlJztcblxuaW1wb3J0IHR5cGUgTWFwIGZyb20gJy4vbWFwJztcblxuLypcbiAqIEFkZHMgdGhlIG1hcCdzIHBvc2l0aW9uIHRvIGl0cyBwYWdlJ3MgbG9jYXRpb24gaGFzaC5cbiAqIFBhc3NlZCBhcyBhbiBvcHRpb24gdG8gdGhlIG1hcCBvYmplY3QuXG4gKlxuICogQHJldHVybnMge0hhc2h9IGB0aGlzYFxuICovXG5jbGFzcyBIYXNoIHtcbiAgICBfbWFwOiBNYXA7XG4gICAgX3VwZGF0ZUhhc2g6ICgpID0+IFRpbWVvdXRJRDtcblxuICAgIGNvbnN0cnVjdG9yKCkge1xuICAgICAgICBiaW5kQWxsKFtcbiAgICAgICAgICAgICdfb25IYXNoQ2hhbmdlJyxcbiAgICAgICAgICAgICdfdXBkYXRlSGFzaCdcbiAgICAgICAgXSwgdGhpcyk7XG5cbiAgICAgICAgLy8gTW9iaWxlIFNhZmFyaSBkb2Vzbid0IGFsbG93IHVwZGF0aW5nIHRoZSBoYXNoIG1vcmUgdGhhbiAxMDAgdGltZXMgcGVyIDMwIHNlY29uZHMuXG4gICAgICAgIHRoaXMuX3VwZGF0ZUhhc2ggPSB0aHJvdHRsZSh0aGlzLl91cGRhdGVIYXNoVW50aHJvdHRsZWQuYmluZCh0aGlzKSwgMzAgKiAxMDAwIC8gMTAwKTtcbiAgICB9XG5cbiAgICAvKlxuICAgICAqIE1hcCBlbGVtZW50IHRvIGxpc3RlbiBmb3IgY29vcmRpbmF0ZSBjaGFuZ2VzXG4gICAgICpcbiAgICAgKiBAcGFyYW0ge09iamVjdH0gbWFwXG4gICAgICogQHJldHVybnMge0hhc2h9IGB0aGlzYFxuICAgICAqL1xuICAgIGFkZFRvKG1hcDogTWFwKSB7XG4gICAgICAgIHRoaXMuX21hcCA9IG1hcDtcbiAgICAgICAgd2luZG93LmFkZEV2ZW50TGlzdGVuZXIoJ2hhc2hjaGFuZ2UnLCB0aGlzLl9vbkhhc2hDaGFuZ2UsIGZhbHNlKTtcbiAgICAgICAgdGhpcy5fbWFwLm9uKCdtb3ZlZW5kJywgdGhpcy5fdXBkYXRlSGFzaCk7XG4gICAgICAgIHJldHVybiB0aGlzO1xuICAgIH1cblxuICAgIC8qXG4gICAgICogUmVtb3ZlcyBoYXNoXG4gICAgICpcbiAgICAgKiBAcmV0dXJucyB7UG9wdXB9IGB0aGlzYFxuICAgICAqL1xuICAgIHJlbW92ZSgpIHtcbiAgICAgICAgd2luZG93LnJlbW92ZUV2ZW50TGlzdGVuZXIoJ2hhc2hjaGFuZ2UnLCB0aGlzLl9vbkhhc2hDaGFuZ2UsIGZhbHNlKTtcbiAgICAgICAgdGhpcy5fbWFwLm9mZignbW92ZWVuZCcsIHRoaXMuX3VwZGF0ZUhhc2gpO1xuICAgICAgICBjbGVhclRpbWVvdXQodGhpcy5fdXBkYXRlSGFzaCgpKTtcblxuICAgICAgICBkZWxldGUgdGhpcy5fbWFwO1xuICAgICAgICByZXR1cm4gdGhpcztcbiAgICB9XG5cbiAgICBnZXRIYXNoU3RyaW5nKG1hcEZlZWRiYWNrPzogYm9vbGVhbikge1xuICAgICAgICBjb25zdCBjZW50ZXIgPSB0aGlzLl9tYXAuZ2V0Q2VudGVyKCksXG4gICAgICAgICAgICB6b29tID0gTWF0aC5yb3VuZCh0aGlzLl9tYXAuZ2V0Wm9vbSgpICogMTAwKSAvIDEwMCxcbiAgICAgICAgICAgIC8vIGRlcml2ZWQgZnJvbSBlcXVhdGlvbjogNTEycHggKiAyXnogLyAzNjAgLyAxMF5kIDwgMC41cHhcbiAgICAgICAgICAgIHByZWNpc2lvbiA9IE1hdGguY2VpbCgoem9vbSAqIE1hdGguTE4yICsgTWF0aC5sb2coNTEyIC8gMzYwIC8gMC41KSkgLyBNYXRoLkxOMTApLFxuICAgICAgICAgICAgbSA9IE1hdGgucG93KDEwLCBwcmVjaXNpb24pLFxuICAgICAgICAgICAgbG5nID0gTWF0aC5yb3VuZChjZW50ZXIubG5nICogbSkgLyBtLFxuICAgICAgICAgICAgbGF0ID0gTWF0aC5yb3VuZChjZW50ZXIubGF0ICogbSkgLyBtLFxuICAgICAgICAgICAgYmVhcmluZyA9IHRoaXMuX21hcC5nZXRCZWFyaW5nKCksXG4gICAgICAgICAgICBwaXRjaCA9IHRoaXMuX21hcC5nZXRQaXRjaCgpO1xuICAgICAgICBsZXQgaGFzaCA9ICcnO1xuICAgICAgICBpZiAobWFwRmVlZGJhY2spIHtcbiAgICAgICAgICAgIC8vIG5ldyBtYXAgZmVlZGJhY2sgc2l0ZSBoYXMgc29tZSBjb25zdHJhaW50cyB0aGF0IGRvbid0IGFsbG93XG4gICAgICAgICAgICAvLyB1cyB0byB1c2UgdGhlIHNhbWUgaGFzaCBmb3JtYXQgYXMgd2UgZG8gZm9yIHRoZSBNYXAgaGFzaCBvcHRpb24uXG4gICAgICAgICAgICBoYXNoICs9IGAjLyR7bG5nfS8ke2xhdH0vJHt6b29tfWA7XG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICBoYXNoICs9IGAjJHt6b29tfS8ke2xhdH0vJHtsbmd9YDtcbiAgICAgICAgfVxuXG4gICAgICAgIGlmIChiZWFyaW5nIHx8IHBpdGNoKSBoYXNoICs9IChgLyR7TWF0aC5yb3VuZChiZWFyaW5nICogMTApIC8gMTB9YCk7XG4gICAgICAgIGlmIChwaXRjaCkgaGFzaCArPSAoYC8ke01hdGgucm91bmQocGl0Y2gpfWApO1xuICAgICAgICByZXR1cm4gaGFzaDtcbiAgICB9XG5cbiAgICBfb25IYXNoQ2hhbmdlKCkge1xuICAgICAgICBjb25zdCBsb2MgPSB3aW5kb3cubG9jYXRpb24uaGFzaC5yZXBsYWNlKCcjJywgJycpLnNwbGl0KCcvJyk7XG4gICAgICAgIGlmIChsb2MubGVuZ3RoID49IDMpIHtcbiAgICAgICAgICAgIHRoaXMuX21hcC5qdW1wVG8oe1xuICAgICAgICAgICAgICAgIGNlbnRlcjogWytsb2NbMl0sICtsb2NbMV1dLFxuICAgICAgICAgICAgICAgIHpvb206ICtsb2NbMF0sXG4gICAgICAgICAgICAgICAgYmVhcmluZzogKyhsb2NbM10gfHwgMCksXG4gICAgICAgICAgICAgICAgcGl0Y2g6ICsobG9jWzRdIHx8IDApXG4gICAgICAgICAgICB9KTtcbiAgICAgICAgICAgIHJldHVybiB0cnVlO1xuICAgICAgICB9XG4gICAgICAgIHJldHVybiBmYWxzZTtcbiAgICB9XG5cbiAgICBfdXBkYXRlSGFzaFVudGhyb3R0bGVkKCkge1xuICAgICAgICBjb25zdCBoYXNoID0gdGhpcy5nZXRIYXNoU3RyaW5nKCk7XG4gICAgICAgIHdpbmRvdy5oaXN0b3J5LnJlcGxhY2VTdGF0ZSh3aW5kb3cuaGlzdG9yeS5zdGF0ZSwgJycsIGhhc2gpO1xuICAgIH1cblxufVxuXG5leHBvcnQgZGVmYXVsdCBIYXNoO1xuIiwiLy8gQGZsb3dcblxuLyoqXG4gKiBUaHJvdHRsZSB0aGUgZ2l2ZW4gZnVuY3Rpb24gdG8gcnVuIGF0IG1vc3QgZXZlcnkgYHBlcmlvZGAgbWlsbGlzZWNvbmRzLlxuIFRocm90dGxlIHRoZSBnaXZlbiBmdW5jdGlvbiB0byBydW4gYXQgbW9zdCBldmVyeSBwZXJpb2QgbWlsbGlzZWNvbmRzLlxuICogQHByaXZhdGVcbiAqL1xuZXhwb3J0IGRlZmF1bHQgZnVuY3Rpb24gdGhyb3R0bGUoZm46ICgpID0+IHZvaWQsIHRpbWU6IG51bWJlcik6ICgpID0+IFRpbWVvdXRJRCB7XG4gICAgbGV0IHBlbmRpbmcgPSBmYWxzZTtcbiAgICBsZXQgdGltZXJJZDogVGltZW91dElEID0gKDA6IGFueSk7XG5cbiAgICBjb25zdCBsYXRlciA9ICgpID0+IHtcbiAgICAgICAgdGltZXJJZCA9ICgwOiBhbnkpO1xuICAgICAgICBpZiAocGVuZGluZykge1xuICAgICAgICAgICAgZm4oKTtcbiAgICAgICAgICAgIHRpbWVySWQgPSBzZXRUaW1lb3V0KGxhdGVyLCB0aW1lKTtcbiAgICAgICAgICAgIHBlbmRpbmcgPSBmYWxzZTtcbiAgICAgICAgfVxuICAgIH07XG5cbiAgICByZXR1cm4gKCkgPT4ge1xuICAgICAgICBwZW5kaW5nID0gdHJ1ZTtcbiAgICAgICAgaWYgKCF0aW1lcklkKSB7XG4gICAgICAgICAgICBsYXRlcigpO1xuICAgICAgICB9XG4gICAgICAgIHJldHVybiB0aW1lcklkO1xuICAgIH07XG59XG4iLCIvLyBAZmxvd1xuXG5pbXBvcnQgeyBFdmVudCB9IGZyb20gJy4uL3V0aWwvZXZlbnRlZCc7XG5cbmltcG9ydCBET00gZnJvbSAnLi4vdXRpbC9kb20nO1xuaW1wb3J0IFBvaW50IGZyb20gJ0BtYXBib3gvcG9pbnQtZ2VvbWV0cnknO1xuaW1wb3J0IHsgZXh0ZW5kIH0gZnJvbSAnLi4vdXRpbC91dGlsJztcblxuaW1wb3J0IHR5cGUgTWFwIGZyb20gJy4vbWFwJztcbmltcG9ydCB0eXBlIExuZ0xhdCBmcm9tICcuLi9nZW8vbG5nX2xhdCc7XG5pbXBvcnQgdHlwZSBMbmdMYXRCb3VuZHMgZnJvbSAnLi4vZ2VvL2xuZ19sYXRfYm91bmRzJztcblxuLyoqXG4gKiBgTWFwTW91c2VFdmVudGAgaXMgdGhlIGV2ZW50IHR5cGUgZm9yIG1vdXNlLXJlbGF0ZWQgbWFwIGV2ZW50cy5cbiAqIEBleHRlbmRzIHtPYmplY3R9XG4gKi9cbmV4cG9ydCBjbGFzcyBNYXBNb3VzZUV2ZW50IGV4dGVuZHMgRXZlbnQge1xuICAgIC8qKlxuICAgICAqIFRoZSBldmVudCB0eXBlLlxuICAgICAqL1xuICAgIHR5cGU6ICdtb3VzZWRvd24nXG4gICAgICAgIHwgJ21vdXNldXAnXG4gICAgICAgIHwgJ2NsaWNrJ1xuICAgICAgICB8ICdkYmxjbGljaydcbiAgICAgICAgfCAnbW91c2Vtb3ZlJ1xuICAgICAgICB8ICdtb3VzZW92ZXInXG4gICAgICAgIHwgJ21vdXNlZW50ZXInXG4gICAgICAgIHwgJ21vdXNlbGVhdmUnXG4gICAgICAgIHwgJ21vdXNlb3ZlcidcbiAgICAgICAgfCAnbW91c2VvdXQnXG4gICAgICAgIHwgJ2NvbnRleHRtZW51JztcblxuICAgIC8qKlxuICAgICAqIFRoZSBgTWFwYCBvYmplY3QgdGhhdCBmaXJlZCB0aGUgZXZlbnQuXG4gICAgICovXG4gICAgdGFyZ2V0OiBNYXA7XG5cbiAgICAvKipcbiAgICAgKiBUaGUgRE9NIGV2ZW50IHdoaWNoIGNhdXNlZCB0aGUgbWFwIGV2ZW50LlxuICAgICAqL1xuICAgIG9yaWdpbmFsRXZlbnQ6IE1vdXNlRXZlbnQ7XG5cbiAgICAvKipcbiAgICAgKiBUaGUgcGl4ZWwgY29vcmRpbmF0ZXMgb2YgdGhlIG1vdXNlIGN1cnNvciwgcmVsYXRpdmUgdG8gdGhlIG1hcCBhbmQgbWVhc3VyZWQgZnJvbSB0aGUgdG9wIGxlZnQgY29ybmVyLlxuICAgICAqL1xuICAgIHBvaW50OiBQb2ludDtcblxuICAgIC8qKlxuICAgICAqIFRoZSBnZW9ncmFwaGljIGxvY2F0aW9uIG9uIHRoZSBtYXAgb2YgdGhlIG1vdXNlIGN1cnNvci5cbiAgICAgKi9cbiAgICBsbmdMYXQ6IExuZ0xhdDtcblxuICAgIC8qKlxuICAgICAqIFByZXZlbnRzIHN1YnNlcXVlbnQgZGVmYXVsdCBwcm9jZXNzaW5nIG9mIHRoZSBldmVudCBieSB0aGUgbWFwLlxuICAgICAqXG4gICAgICogQ2FsbGluZyB0aGlzIG1ldGhvZCB3aWxsIHByZXZlbnQgdGhlIGZvbGxvd2luZyBkZWZhdWx0IG1hcCBiZWhhdmlvcnM6XG4gICAgICpcbiAgICAgKiAgICogT24gYG1vdXNlZG93bmAgZXZlbnRzLCB0aGUgYmVoYXZpb3Igb2Yge0BsaW5rIERyYWdQYW5IYW5kbGVyfVxuICAgICAqICAgKiBPbiBgbW91c2Vkb3duYCBldmVudHMsIHRoZSBiZWhhdmlvciBvZiB7QGxpbmsgRHJhZ1JvdGF0ZUhhbmRsZXJ9XG4gICAgICogICAqIE9uIGBtb3VzZWRvd25gIGV2ZW50cywgdGhlIGJlaGF2aW9yIG9mIHtAbGluayBCb3hab29tSGFuZGxlcn1cbiAgICAgKiAgICogT24gYGRibGNsaWNrYCBldmVudHMsIHRoZSBiZWhhdmlvciBvZiB7QGxpbmsgRG91YmxlQ2xpY2tab29tSGFuZGxlcn1cbiAgICAgKlxuICAgICAqL1xuICAgIHByZXZlbnREZWZhdWx0KCkge1xuICAgICAgICB0aGlzLl9kZWZhdWx0UHJldmVudGVkID0gdHJ1ZTtcbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBgdHJ1ZWAgaWYgYHByZXZlbnREZWZhdWx0YCBoYXMgYmVlbiBjYWxsZWQuXG4gICAgICovXG4gICAgZ2V0IGRlZmF1bHRQcmV2ZW50ZWQoKTogYm9vbGVhbiB7XG4gICAgICAgIHJldHVybiB0aGlzLl9kZWZhdWx0UHJldmVudGVkO1xuICAgIH1cblxuICAgIF9kZWZhdWx0UHJldmVudGVkOiBib29sZWFuO1xuXG4gICAgLyoqXG4gICAgICogQHByaXZhdGVcbiAgICAgKi9cbiAgICBjb25zdHJ1Y3Rvcih0eXBlOiBzdHJpbmcsIG1hcDogTWFwLCBvcmlnaW5hbEV2ZW50OiBNb3VzZUV2ZW50LCBkYXRhOiBPYmplY3QgPSB7fSkge1xuICAgICAgICBjb25zdCBwb2ludCA9IERPTS5tb3VzZVBvcyhtYXAuZ2V0Q2FudmFzQ29udGFpbmVyKCksIG9yaWdpbmFsRXZlbnQpO1xuICAgICAgICBjb25zdCBsbmdMYXQgPSBtYXAudW5wcm9qZWN0KHBvaW50KTtcbiAgICAgICAgc3VwZXIodHlwZSwgZXh0ZW5kKHsgcG9pbnQsIGxuZ0xhdCwgb3JpZ2luYWxFdmVudCB9LCBkYXRhKSk7XG4gICAgICAgIHRoaXMuX2RlZmF1bHRQcmV2ZW50ZWQgPSBmYWxzZTtcbiAgICAgICAgdGhpcy50YXJnZXQgPSBtYXA7XG4gICAgfVxufVxuXG4vKipcbiAqIGBNYXBUb3VjaEV2ZW50YCBpcyB0aGUgZXZlbnQgdHlwZSBmb3IgdG91Y2gtcmVsYXRlZCBtYXAgZXZlbnRzLlxuICogQGV4dGVuZHMge09iamVjdH1cbiAqL1xuZXhwb3J0IGNsYXNzIE1hcFRvdWNoRXZlbnQgZXh0ZW5kcyBFdmVudCB7XG4gICAgLyoqXG4gICAgICogVGhlIGV2ZW50IHR5cGUuXG4gICAgICovXG4gICAgdHlwZTogJ3RvdWNoc3RhcnQnXG4gICAgICAgIHwgJ3RvdWNoZW5kJ1xuICAgICAgICB8ICd0b3VjaGNhbmNlbCc7XG5cbiAgICAvKipcbiAgICAgKiBUaGUgYE1hcGAgb2JqZWN0IHRoYXQgZmlyZWQgdGhlIGV2ZW50LlxuICAgICAqL1xuICAgIHRhcmdldDogTWFwO1xuXG4gICAgLyoqXG4gICAgICogVGhlIERPTSBldmVudCB3aGljaCBjYXVzZWQgdGhlIG1hcCBldmVudC5cbiAgICAgKi9cbiAgICBvcmlnaW5hbEV2ZW50OiBUb3VjaEV2ZW50O1xuXG4gICAgLyoqXG4gICAgICogVGhlIGdlb2dyYXBoaWMgbG9jYXRpb24gb24gdGhlIG1hcCBvZiB0aGUgY2VudGVyIG9mIHRoZSB0b3VjaCBldmVudCBwb2ludHMuXG4gICAgICovXG4gICAgbG5nTGF0OiBMbmdMYXQ7XG5cbiAgICAvKipcbiAgICAgKiBUaGUgcGl4ZWwgY29vcmRpbmF0ZXMgb2YgdGhlIGNlbnRlciBvZiB0aGUgdG91Y2ggZXZlbnQgcG9pbnRzLCByZWxhdGl2ZSB0byB0aGUgbWFwIGFuZCBtZWFzdXJlZCBmcm9tIHRoZSB0b3AgbGVmdFxuICAgICAqIGNvcm5lci5cbiAgICAgKi9cbiAgICBwb2ludDogUG9pbnQ7XG5cbiAgICAvKipcbiAgICAgKiBUaGUgYXJyYXkgb2YgcGl4ZWwgY29vcmRpbmF0ZXMgY29ycmVzcG9uZGluZyB0byBhXG4gICAgICogW3RvdWNoIGV2ZW50J3MgYHRvdWNoZXNgXShodHRwczovL2RldmVsb3Blci5tb3ppbGxhLm9yZy9lbi1VUy9kb2NzL1dlYi9BUEkvVG91Y2hFdmVudC90b3VjaGVzKSBwcm9wZXJ0eS5cbiAgICAgKi9cbiAgICBwb2ludHM6IEFycmF5PFBvaW50PjtcblxuICAgIC8qKlxuICAgICAqIFRoZSBnZW9ncmFwaGljYWwgbG9jYXRpb25zIG9uIHRoZSBtYXAgY29ycmVzcG9uZGluZyB0byBhXG4gICAgICogW3RvdWNoIGV2ZW50J3MgYHRvdWNoZXNgXShodHRwczovL2RldmVsb3Blci5tb3ppbGxhLm9yZy9lbi1VUy9kb2NzL1dlYi9BUEkvVG91Y2hFdmVudC90b3VjaGVzKSBwcm9wZXJ0eS5cbiAgICAgKi9cbiAgICBsbmdMYXRzOiBBcnJheTxMbmdMYXQ+O1xuXG4gICAgLyoqXG4gICAgICogUHJldmVudHMgc3Vic2VxdWVudCBkZWZhdWx0IHByb2Nlc3Npbmcgb2YgdGhlIGV2ZW50IGJ5IHRoZSBtYXAuXG4gICAgICpcbiAgICAgKiBDYWxsaW5nIHRoaXMgbWV0aG9kIHdpbGwgcHJldmVudCB0aGUgZm9sbG93aW5nIGRlZmF1bHQgbWFwIGJlaGF2aW9yczpcbiAgICAgKlxuICAgICAqICAgKiBPbiBgdG91Y2hzdGFydGAgZXZlbnRzLCB0aGUgYmVoYXZpb3Igb2Yge0BsaW5rIERyYWdQYW5IYW5kbGVyfVxuICAgICAqICAgKiBPbiBgdG91Y2hzdGFydGAgZXZlbnRzLCB0aGUgYmVoYXZpb3Igb2Yge0BsaW5rIFRvdWNoWm9vbVJvdGF0ZUhhbmRsZXJ9XG4gICAgICpcbiAgICAgKi9cbiAgICBwcmV2ZW50RGVmYXVsdCgpIHtcbiAgICAgICAgdGhpcy5fZGVmYXVsdFByZXZlbnRlZCA9IHRydWU7XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogYHRydWVgIGlmIGBwcmV2ZW50RGVmYXVsdGAgaGFzIGJlZW4gY2FsbGVkLlxuICAgICAqL1xuICAgIGdldCBkZWZhdWx0UHJldmVudGVkKCk6IGJvb2xlYW4ge1xuICAgICAgICByZXR1cm4gdGhpcy5fZGVmYXVsdFByZXZlbnRlZDtcbiAgICB9XG5cbiAgICBfZGVmYXVsdFByZXZlbnRlZDogYm9vbGVhbjtcblxuICAgIC8qKlxuICAgICAqIEBwcml2YXRlXG4gICAgICovXG4gICAgY29uc3RydWN0b3IodHlwZTogc3RyaW5nLCBtYXA6IE1hcCwgb3JpZ2luYWxFdmVudDogVG91Y2hFdmVudCkge1xuICAgICAgICBjb25zdCBwb2ludHMgPSBET00udG91Y2hQb3MobWFwLmdldENhbnZhc0NvbnRhaW5lcigpLCBvcmlnaW5hbEV2ZW50KTtcbiAgICAgICAgY29uc3QgbG5nTGF0cyA9IHBvaW50cy5tYXAoKHQpID0+IG1hcC51bnByb2plY3QodCkpO1xuICAgICAgICBjb25zdCBwb2ludCA9IHBvaW50cy5yZWR1Y2UoKHByZXYsIGN1cnIsIGksIGFycikgPT4ge1xuICAgICAgICAgICAgcmV0dXJuIHByZXYuYWRkKGN1cnIuZGl2KGFyci5sZW5ndGgpKTtcbiAgICAgICAgfSwgbmV3IFBvaW50KDAsIDApKTtcbiAgICAgICAgY29uc3QgbG5nTGF0ID0gbWFwLnVucHJvamVjdChwb2ludCk7XG4gICAgICAgIHN1cGVyKHR5cGUsIHsgcG9pbnRzLCBwb2ludCwgbG5nTGF0cywgbG5nTGF0LCBvcmlnaW5hbEV2ZW50IH0pO1xuICAgICAgICB0aGlzLl9kZWZhdWx0UHJldmVudGVkID0gZmFsc2U7XG4gICAgfVxufVxuXG5cbi8qKlxuICogYE1hcFdoZWVsRXZlbnRgIGlzIHRoZSBldmVudCB0eXBlIGZvciB0aGUgYHdoZWVsYCBtYXAgZXZlbnQuXG4gKiBAZXh0ZW5kcyB7T2JqZWN0fVxuICovXG5leHBvcnQgY2xhc3MgTWFwV2hlZWxFdmVudCBleHRlbmRzIEV2ZW50IHtcbiAgICAvKipcbiAgICAgKiBUaGUgZXZlbnQgdHlwZS5cbiAgICAgKi9cbiAgICB0eXBlOiAnd2hlZWwnO1xuXG4gICAgLyoqXG4gICAgICogVGhlIGBNYXBgIG9iamVjdCB0aGF0IGZpcmVkIHRoZSBldmVudC5cbiAgICAgKi9cbiAgICB0YXJnZXQ6IE1hcDtcblxuICAgIC8qKlxuICAgICAqIFRoZSBET00gZXZlbnQgd2hpY2ggY2F1c2VkIHRoZSBtYXAgZXZlbnQuXG4gICAgICovXG4gICAgb3JpZ2luYWxFdmVudDogV2hlZWxFdmVudDtcblxuICAgIC8qKlxuICAgICAqIFByZXZlbnRzIHN1YnNlcXVlbnQgZGVmYXVsdCBwcm9jZXNzaW5nIG9mIHRoZSBldmVudCBieSB0aGUgbWFwLlxuICAgICAqXG4gICAgICogQ2FsbGluZyB0aGlzIG1ldGhvZCB3aWxsIHByZXZlbnQgdGhlIHRoZSBiZWhhdmlvciBvZiB7QGxpbmsgU2Nyb2xsWm9vbUhhbmRsZXJ9LlxuICAgICAqL1xuICAgIHByZXZlbnREZWZhdWx0KCkge1xuICAgICAgICB0aGlzLl9kZWZhdWx0UHJldmVudGVkID0gdHJ1ZTtcbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBgdHJ1ZWAgaWYgYHByZXZlbnREZWZhdWx0YCBoYXMgYmVlbiBjYWxsZWQuXG4gICAgICovXG4gICAgZ2V0IGRlZmF1bHRQcmV2ZW50ZWQoKTogYm9vbGVhbiB7XG4gICAgICAgIHJldHVybiB0aGlzLl9kZWZhdWx0UHJldmVudGVkO1xuICAgIH1cblxuICAgIF9kZWZhdWx0UHJldmVudGVkOiBib29sZWFuO1xuXG4gICAgLyoqXG4gICAgICogQHByaXZhdGVcbiAgICAgKi9cbiAgICBjb25zdHJ1Y3Rvcih0eXBlOiBzdHJpbmcsIG1hcDogTWFwLCBvcmlnaW5hbEV2ZW50OiBXaGVlbEV2ZW50KSB7XG4gICAgICAgIHN1cGVyKHR5cGUsIHsgb3JpZ2luYWxFdmVudCB9KTtcbiAgICAgICAgdGhpcy5fZGVmYXVsdFByZXZlbnRlZCA9IGZhbHNlO1xuICAgIH1cbn1cblxuLyoqXG4gKiBAdHlwZWRlZiB7T2JqZWN0fSBNYXBCb3hab29tRXZlbnRcbiAqIEBwcm9wZXJ0eSB7TW91c2VFdmVudH0gb3JpZ2luYWxFdmVudFxuICogQHByb3BlcnR5IHtMbmdMYXRCb3VuZHN9IGJveFpvb21Cb3VuZHMgVGhlIGJvdW5kaW5nIGJveCBvZiB0aGUgXCJib3ggem9vbVwiIGludGVyYWN0aW9uLlxuICogICBUaGlzIHByb3BlcnR5IGlzIG9ubHkgcHJvdmlkZWQgZm9yIGBib3h6b29tZW5kYCBldmVudHMuXG4gKi9cbmV4cG9ydCB0eXBlIE1hcEJveFpvb21FdmVudCA9IHtcbiAgICB0eXBlOiAnYm94em9vbXN0YXJ0J1xuICAgICAgICB8ICdib3h6b29tZW5kJ1xuICAgICAgICB8ICdib3h6b29tY2FuY2VsJyxcbiAgICBtYXA6IE1hcCxcbiAgICBvcmlnaW5hbEV2ZW50OiBNb3VzZUV2ZW50LFxuICAgIGJveFpvb21Cb3VuZHM6IExuZ0xhdEJvdW5kc1xufTtcblxuLyoqXG4gKiBBIGBNYXBEYXRhRXZlbnRgIG9iamVjdCBpcyBlbWl0dGVkIHdpdGggdGhlIHtAbGluayBNYXAuZXZlbnQ6ZGF0YX1cbiAqIGFuZCB7QGxpbmsgTWFwLmV2ZW50OmRhdGFsb2FkaW5nfSBldmVudHMuIFBvc3NpYmxlIHZhbHVlcyBmb3JcbiAqIGBkYXRhVHlwZWBzIGFyZTpcbiAqXG4gKiAtIGAnc291cmNlJ2A6IFRoZSBub24tdGlsZSBkYXRhIGFzc29jaWF0ZWQgd2l0aCBhbnkgc291cmNlXG4gKiAtIGAnc3R5bGUnYDogVGhlIFtzdHlsZV0oaHR0cHM6Ly93d3cubWFwYm94LmNvbS9tYXBib3gtZ2wtc3R5bGUtc3BlYy8pIHVzZWQgYnkgdGhlIG1hcFxuICpcbiAqIEB0eXBlZGVmIHtPYmplY3R9IE1hcERhdGFFdmVudFxuICogQHByb3BlcnR5IHtzdHJpbmd9IHR5cGUgVGhlIGV2ZW50IHR5cGUuXG4gKiBAcHJvcGVydHkge3N0cmluZ30gZGF0YVR5cGUgVGhlIHR5cGUgb2YgZGF0YSB0aGF0IGhhcyBjaGFuZ2VkLiBPbmUgb2YgYCdzb3VyY2UnYCwgYCdzdHlsZSdgLlxuICogQHByb3BlcnR5IHtib29sZWFufSBbaXNTb3VyY2VMb2FkZWRdIFRydWUgaWYgdGhlIGV2ZW50IGhhcyBhIGBkYXRhVHlwZWAgb2YgYHNvdXJjZWAgYW5kIHRoZSBzb3VyY2UgaGFzIG5vIG91dHN0YW5kaW5nIG5ldHdvcmsgcmVxdWVzdHMuXG4gKiBAcHJvcGVydHkge09iamVjdH0gW3NvdXJjZV0gVGhlIFtzdHlsZSBzcGVjIHJlcHJlc2VudGF0aW9uIG9mIHRoZSBzb3VyY2VdKGh0dHBzOi8vd3d3Lm1hcGJveC5jb20vbWFwYm94LWdsLXN0eWxlLXNwZWMvI3NvdXJjZXMpIGlmIHRoZSBldmVudCBoYXMgYSBgZGF0YVR5cGVgIG9mIGBzb3VyY2VgLlxuICogQHByb3BlcnR5IHtzdHJpbmd9IFtzb3VyY2VEYXRhVHlwZV0gSW5jbHVkZWQgaWYgdGhlIGV2ZW50IGhhcyBhIGBkYXRhVHlwZWAgb2YgYHNvdXJjZWAgYW5kIHRoZSBldmVudCBzaWduYWxzXG4gKiB0aGF0IGludGVybmFsIGRhdGEgaGFzIGJlZW4gcmVjZWl2ZWQgb3IgY2hhbmdlZC4gUG9zc2libGUgdmFsdWVzIGFyZSBgbWV0YWRhdGFgIGFuZCBgY29udGVudGAuXG4gKiBAcHJvcGVydHkge09iamVjdH0gW3RpbGVdIFRoZSB0aWxlIGJlaW5nIGxvYWRlZCBvciBjaGFuZ2VkLCBpZiB0aGUgZXZlbnQgaGFzIGEgYGRhdGFUeXBlYCBvZiBgc291cmNlYCBhbmRcbiAqIHRoZSBldmVudCBpcyByZWxhdGVkIHRvIGxvYWRpbmcgb2YgYSB0aWxlLlxuICogQHByb3BlcnR5IHtDb29yZGluYXRlfSBbY29vcmRdIFRoZSBjb29yZGluYXRlIG9mIHRoZSB0aWxlIGlmIHRoZSBldmVudCBoYXMgYSBgZGF0YVR5cGVgIG9mIGBzb3VyY2VgIGFuZFxuICogdGhlIGV2ZW50IGlzIHJlbGF0ZWQgdG8gbG9hZGluZyBvZiBhIHRpbGUuXG4gKi9cbmV4cG9ydCB0eXBlIE1hcERhdGFFdmVudCA9IHtcbiAgICB0eXBlOiBzdHJpbmcsXG4gICAgZGF0YVR5cGU6IHN0cmluZ1xufTtcblxuZXhwb3J0IHR5cGUgTWFwQ29udGV4dEV2ZW50ID0ge1xuICAgIHR5cGU6ICd3ZWJnbGNvbnRleHRsb3N0JyB8ICd3ZWJnbGNvbnRleHRyZXN0b3JlZCcsXG4gICAgb3JpZ2luYWxFdmVudDogV2ViR0xDb250ZXh0RXZlbnRcbn1cblxuZXhwb3J0IHR5cGUgTWFwRXZlbnQgPVxuICAgIC8qKlxuICAgICAqIEZpcmVkIHdoZW4gYSBwb2ludGluZyBkZXZpY2UgKHVzdWFsbHkgYSBtb3VzZSkgaXMgcHJlc3NlZCB3aXRoaW4gdGhlIG1hcC5cbiAgICAgKlxuICAgICAqIEBldmVudCBtb3VzZWRvd25cbiAgICAgKiBAbWVtYmVyb2YgTWFwXG4gICAgICogQGluc3RhbmNlXG4gICAgICogQHByb3BlcnR5IHtNYXBNb3VzZUV2ZW50fSBkYXRhXG4gICAgICogQHNlZSBbSGlnaGxpZ2h0IGZlYXR1cmVzIHdpdGhpbiBhIGJvdW5kaW5nIGJveF0oaHR0cHM6Ly93d3cubWFwYm94LmNvbS9tYXBib3gtZ2wtanMvZXhhbXBsZS91c2luZy1ib3gtcXVlcnlyZW5kZXJlZGZlYXR1cmVzLylcbiAgICAgKiBAc2VlIFtDcmVhdGUgYSBkcmFnZ2FibGUgcG9pbnRdKGh0dHBzOi8vd3d3Lm1hcGJveC5jb20vbWFwYm94LWdsLWpzL2V4YW1wbGUvZHJhZy1hLXBvaW50LylcbiAgICAgKi9cbiAgICB8ICdtb3VzZWRvd24nXG5cbiAgICAvKipcbiAgICAgKiBGaXJlZCB3aGVuIGEgcG9pbnRpbmcgZGV2aWNlICh1c3VhbGx5IGEgbW91c2UpIGlzIHJlbGVhc2VkIHdpdGhpbiB0aGUgbWFwLlxuICAgICAqXG4gICAgICogQGV2ZW50IG1vdXNldXBcbiAgICAgKiBAbWVtYmVyb2YgTWFwXG4gICAgICogQGluc3RhbmNlXG4gICAgICogQHByb3BlcnR5IHtNYXBNb3VzZUV2ZW50fSBkYXRhXG4gICAgICogQHNlZSBbSGlnaGxpZ2h0IGZlYXR1cmVzIHdpdGhpbiBhIGJvdW5kaW5nIGJveF0oaHR0cHM6Ly93d3cubWFwYm94LmNvbS9tYXBib3gtZ2wtanMvZXhhbXBsZS91c2luZy1ib3gtcXVlcnlyZW5kZXJlZGZlYXR1cmVzLylcbiAgICAgKiBAc2VlIFtDcmVhdGUgYSBkcmFnZ2FibGUgcG9pbnRdKGh0dHBzOi8vd3d3Lm1hcGJveC5jb20vbWFwYm94LWdsLWpzL2V4YW1wbGUvZHJhZy1hLXBvaW50LylcbiAgICAgKi9cbiAgICB8ICdtb3VzZXVwJ1xuXG4gICAgLyoqXG4gICAgICogRmlyZWQgd2hlbiBhIHBvaW50aW5nIGRldmljZSAodXN1YWxseSBhIG1vdXNlKSBpcyBtb3ZlZCB3aXRoaW4gdGhlIG1hcC5cbiAgICAgKlxuICAgICAqIEBldmVudCBtb3VzZW92ZXJcbiAgICAgKiBAbWVtYmVyb2YgTWFwXG4gICAgICogQGluc3RhbmNlXG4gICAgICogQHByb3BlcnR5IHtNYXBNb3VzZUV2ZW50fSBkYXRhXG4gICAgICogQHNlZSBbR2V0IGNvb3JkaW5hdGVzIG9mIHRoZSBtb3VzZSBwb2ludGVyXShodHRwczovL3d3dy5tYXBib3guY29tL21hcGJveC1nbC1qcy9leGFtcGxlL21vdXNlLXBvc2l0aW9uLylcbiAgICAgKiBAc2VlIFtIaWdobGlnaHQgZmVhdHVyZXMgdW5kZXIgdGhlIG1vdXNlIHBvaW50ZXJdKGh0dHBzOi8vd3d3Lm1hcGJveC5jb20vbWFwYm94LWdsLWpzL2V4YW1wbGUvaG92ZXItc3R5bGVzLylcbiAgICAgKiBAc2VlIFtEaXNwbGF5IGEgcG9wdXAgb24gaG92ZXJdKGh0dHBzOi8vd3d3Lm1hcGJveC5jb20vbWFwYm94LWdsLWpzL2V4YW1wbGUvcG9wdXAtb24taG92ZXIvKVxuICAgICAqL1xuICAgIHwgJ21vdXNlb3ZlcidcblxuICAgIC8qKlxuICAgICAqIEZpcmVkIHdoZW4gYSBwb2ludGluZyBkZXZpY2UgKHVzdWFsbHkgYSBtb3VzZSkgaXMgbW92ZWQgd2l0aGluIHRoZSBtYXAuXG4gICAgICpcbiAgICAgKiBAZXZlbnQgbW91c2Vtb3ZlXG4gICAgICogQG1lbWJlcm9mIE1hcFxuICAgICAqIEBpbnN0YW5jZVxuICAgICAqIEBwcm9wZXJ0eSB7TWFwTW91c2VFdmVudH0gZGF0YVxuICAgICAqIEBzZWUgW0dldCBjb29yZGluYXRlcyBvZiB0aGUgbW91c2UgcG9pbnRlcl0oaHR0cHM6Ly93d3cubWFwYm94LmNvbS9tYXBib3gtZ2wtanMvZXhhbXBsZS9tb3VzZS1wb3NpdGlvbi8pXG4gICAgICogQHNlZSBbSGlnaGxpZ2h0IGZlYXR1cmVzIHVuZGVyIHRoZSBtb3VzZSBwb2ludGVyXShodHRwczovL3d3dy5tYXBib3guY29tL21hcGJveC1nbC1qcy9leGFtcGxlL2hvdmVyLXN0eWxlcy8pXG4gICAgICogQHNlZSBbRGlzcGxheSBhIHBvcHVwIG9uIG92ZXJdKGh0dHBzOi8vd3d3Lm1hcGJveC5jb20vbWFwYm94LWdsLWpzL2V4YW1wbGUvcG9wdXAtb24taG92ZXIvKVxuICAgICAqL1xuICAgIHwgJ21vdXNlbW92ZSdcblxuICAgIC8qKlxuICAgICAqIEZpcmVkIHdoZW4gYSBwb2ludGluZyBkZXZpY2UgKHVzdWFsbHkgYSBtb3VzZSkgaXMgcHJlc3NlZCBhbmQgcmVsZWFzZWQgYXQgdGhlIHNhbWUgcG9pbnQgb24gdGhlIG1hcC5cbiAgICAgKlxuICAgICAqIEBldmVudCBjbGlja1xuICAgICAqIEBtZW1iZXJvZiBNYXBcbiAgICAgKiBAaW5zdGFuY2VcbiAgICAgKiBAcHJvcGVydHkge01hcE1vdXNlRXZlbnR9IGRhdGFcbiAgICAgKiBAc2VlIFtNZWFzdXJlIGRpc3RhbmNlc10oaHR0cHM6Ly93d3cubWFwYm94LmNvbS9tYXBib3gtZ2wtanMvZXhhbXBsZS9tZWFzdXJlLylcbiAgICAgKiBAc2VlIFtDZW50ZXIgdGhlIG1hcCBvbiBhIGNsaWNrZWQgc3ltYm9sXShodHRwczovL3d3dy5tYXBib3guY29tL21hcGJveC1nbC1qcy9leGFtcGxlL2NlbnRlci1vbi1zeW1ib2wvKVxuICAgICAqL1xuICAgIHwgJ2NsaWNrJ1xuXG4gICAgLyoqXG4gICAgICogRmlyZWQgd2hlbiBhIHBvaW50aW5nIGRldmljZSAodXN1YWxseSBhIG1vdXNlKSBpcyBjbGlja2VkIHR3aWNlIGF0IHRoZSBzYW1lIHBvaW50IG9uIHRoZSBtYXAuXG4gICAgICpcbiAgICAgKiBAZXZlbnQgZGJsY2xpY2tcbiAgICAgKiBAbWVtYmVyb2YgTWFwXG4gICAgICogQGluc3RhbmNlXG4gICAgICogQHByb3BlcnR5IHtNYXBNb3VzZUV2ZW50fSBkYXRhXG4gICAgICovXG4gICAgfCAnZGJsY2xpY2snXG5cbiAgICAvKipcbiAgICAgKiBGaXJlZCB3aGVuIGEgcG9pbnRpbmcgZGV2aWNlICh1c3VhbGx5IGEgbW91c2UpIGVudGVycyBhIHZpc2libGUgcG9ydGlvbiBvZiBhIHNwZWNpZmllZCBsYXllciBmcm9tXG4gICAgICogb3V0c2lkZSB0aGF0IGxheWVyIG9yIG91dHNpZGUgdGhlIG1hcCBjYW52YXMuIFRoaXMgZXZlbnQgY2FuIG9ubHkgYmUgbGlzdGVuZWQgZm9yIHZpYSB0aGUgdGhyZWUtYXJndW1lbnRcbiAgICAgKiB2ZXJzaW9uIG9mIHtAbGluayBNYXAjb259LCB3aGVyZSB0aGUgc2Vjb25kIGFyZ3VtZW50IHNwZWNpZmllcyB0aGUgZGVzaXJlZCBsYXllci5cbiAgICAgKlxuICAgICAqIEBldmVudCBtb3VzZWVudGVyXG4gICAgICogQG1lbWJlcm9mIE1hcFxuICAgICAqIEBpbnN0YW5jZVxuICAgICAqIEBwcm9wZXJ0eSB7TWFwTW91c2VFdmVudH0gZGF0YVxuICAgICAqL1xuICAgIHwgJ21vdXNlZW50ZXInXG5cbiAgICAvKipcbiAgICAgKiBGaXJlZCB3aGVuIGEgcG9pbnRpbmcgZGV2aWNlICh1c3VhbGx5IGEgbW91c2UpIGxlYXZlcyBhIHZpc2libGUgcG9ydGlvbiBvZiBhIHNwZWNpZmllZCBsYXllciwgb3IgbGVhdmVzXG4gICAgICogdGhlIG1hcCBjYW52YXMuIFRoaXMgZXZlbnQgY2FuIG9ubHkgYmUgbGlzdGVuZWQgZm9yIHZpYSB0aGUgdGhyZWUtYXJndW1lbnQgdmVyc2lvbiBvZiB7QGxpbmsgTWFwI29ufSxcbiAgICAgKiB3aGVyZSB0aGUgc2Vjb25kIGFyZ3VtZW50IHNwZWNpZmllcyB0aGUgZGVzaXJlZCBsYXllci5cbiAgICAgKlxuICAgICAqIEBldmVudCBtb3VzZWxlYXZlXG4gICAgICogQG1lbWJlcm9mIE1hcFxuICAgICAqIEBpbnN0YW5jZVxuICAgICAqIEBwcm9wZXJ0eSB7TWFwTW91c2VFdmVudH0gZGF0YVxuICAgICAqIEBzZWUgW0hpZ2hsaWdodCBmZWF0dXJlcyB1bmRlciB0aGUgbW91c2UgcG9pbnRlcl0oaHR0cHM6Ly93d3cubWFwYm94LmNvbS9tYXBib3gtZ2wtanMvZXhhbXBsZS9ob3Zlci1zdHlsZXMvKVxuICAgICAqL1xuICAgIHwgJ21vdXNlbGVhdmUnXG5cbiAgICAvKipcbiAgICAgKiBTeW5vbnltIGZvciBgbW91c2VlbnRlcmAuXG4gICAgICpcbiAgICAgKiBAZXZlbnQgbW91c2VvdmVyXG4gICAgICogQG1lbWJlcm9mIE1hcFxuICAgICAqIEBpbnN0YW5jZVxuICAgICAqIEBwcm9wZXJ0eSB7TWFwTW91c2VFdmVudH0gZGF0YVxuICAgICAqL1xuICAgIHwgJ21vdXNlb3ZlcidcblxuICAgIC8qKlxuICAgICAqIEZpcmVkIHdoZW4gYSBwb2ludCBkZXZpY2UgKHVzdWFsbHkgYSBtb3VzZSkgbGVhdmVzIHRoZSBtYXAncyBjYW52YXMuXG4gICAgICpcbiAgICAgKiBAZXZlbnQgbW91c2VvdXRcbiAgICAgKiBAbWVtYmVyb2YgTWFwXG4gICAgICogQGluc3RhbmNlXG4gICAgICogQHByb3BlcnR5IHtNYXBNb3VzZUV2ZW50fSBkYXRhXG4gICAgICovXG4gICAgfCAnbW91c2VvdXQnXG5cbiAgICAvKipcbiAgICAgKiBGaXJlZCB3aGVuIHRoZSByaWdodCBidXR0b24gb2YgdGhlIG1vdXNlIGlzIGNsaWNrZWQgb3IgdGhlIGNvbnRleHQgbWVudSBrZXkgaXMgcHJlc3NlZCB3aXRoaW4gdGhlIG1hcC5cbiAgICAgKlxuICAgICAqIEBldmVudCBjb250ZXh0bWVudVxuICAgICAqIEBtZW1iZXJvZiBNYXBcbiAgICAgKiBAaW5zdGFuY2VcbiAgICAgKiBAcHJvcGVydHkge01hcE1vdXNlRXZlbnR9IGRhdGFcbiAgICAgKi9cbiAgICB8ICdjb250ZXh0bWVudSdcblxuICAgIC8qKlxuICAgICAqIEZpcmVkIHdoZW4gYSBbYHdoZWVsYF0oaHR0cHM6Ly9kZXZlbG9wZXIubW96aWxsYS5vcmcvZW4tVVMvZG9jcy9XZWIvRXZlbnRzL3doZWVsKSBldmVudCBvY2N1cnMgd2l0aGluIHRoZSBtYXAuXG4gICAgICpcbiAgICAgKiBAZXZlbnQgd2hlZWxcbiAgICAgKiBAbWVtYmVyb2YgTWFwXG4gICAgICogQGluc3RhbmNlXG4gICAgICogQHByb3BlcnR5IHtNYXBXaGVlbEV2ZW50fSBkYXRhXG4gICAgICovXG4gICAgfCAnd2hlZWwnXG5cbiAgICAvKipcbiAgICAgKiBGaXJlZCB3aGVuIGEgW2B0b3VjaHN0YXJ0YF0oaHR0cHM6Ly9kZXZlbG9wZXIubW96aWxsYS5vcmcvZW4tVVMvZG9jcy9XZWIvRXZlbnRzL3RvdWNoc3RhcnQpIGV2ZW50IG9jY3VycyB3aXRoaW4gdGhlIG1hcC5cbiAgICAgKlxuICAgICAqIEBldmVudCB0b3VjaHN0YXJ0XG4gICAgICogQG1lbWJlcm9mIE1hcFxuICAgICAqIEBpbnN0YW5jZVxuICAgICAqIEBwcm9wZXJ0eSB7TWFwVG91Y2hFdmVudH0gZGF0YVxuICAgICAqL1xuICAgIHwgJ3RvdWNoc3RhcnQnXG5cbiAgICAvKipcbiAgICAgKiBGaXJlZCB3aGVuIGEgW2B0b3VjaGVuZGBdKGh0dHBzOi8vZGV2ZWxvcGVyLm1vemlsbGEub3JnL2VuLVVTL2RvY3MvV2ViL0V2ZW50cy90b3VjaGVuZCkgZXZlbnQgb2NjdXJzIHdpdGhpbiB0aGUgbWFwLlxuICAgICAqXG4gICAgICogQGV2ZW50IHRvdWNoZW5kXG4gICAgICogQG1lbWJlcm9mIE1hcFxuICAgICAqIEBpbnN0YW5jZVxuICAgICAqIEBwcm9wZXJ0eSB7TWFwVG91Y2hFdmVudH0gZGF0YVxuICAgICAqL1xuICAgIHwgJ3RvdWNoZW5kJ1xuXG4gICAgLyoqXG4gICAgICogRmlyZWQgd2hlbiBhIFtgdG91Y2htb3ZlYF0oaHR0cHM6Ly9kZXZlbG9wZXIubW96aWxsYS5vcmcvZW4tVVMvZG9jcy9XZWIvRXZlbnRzL3RvdWNobW92ZSkgZXZlbnQgb2NjdXJzIHdpdGhpbiB0aGUgbWFwLlxuICAgICAqXG4gICAgICogQGV2ZW50IHRvdWNobW92ZVxuICAgICAqIEBtZW1iZXJvZiBNYXBcbiAgICAgKiBAaW5zdGFuY2VcbiAgICAgKiBAcHJvcGVydHkge01hcFRvdWNoRXZlbnR9IGRhdGFcbiAgICAgKi9cbiAgICB8ICd0b3VjaG1vdmUnXG5cbiAgICAvKipcbiAgICAgKiBGaXJlZCB3aGVuIGEgW2B0b3VjaGNhbmNlbGBdKGh0dHBzOi8vZGV2ZWxvcGVyLm1vemlsbGEub3JnL2VuLVVTL2RvY3MvV2ViL0V2ZW50cy90b3VjaGNhbmNlbCkgZXZlbnQgb2NjdXJzIHdpdGhpbiB0aGUgbWFwLlxuICAgICAqXG4gICAgICogQGV2ZW50IHRvdWNoY2FuY2VsXG4gICAgICogQG1lbWJlcm9mIE1hcFxuICAgICAqIEBpbnN0YW5jZVxuICAgICAqIEBwcm9wZXJ0eSB7TWFwVG91Y2hFdmVudH0gZGF0YVxuICAgICAqL1xuICAgIHwgJ3RvdWNoY2FuY2VsJ1xuXG4gICAgLyoqXG4gICAgICogRmlyZWQganVzdCBiZWZvcmUgdGhlIG1hcCBiZWdpbnMgYSB0cmFuc2l0aW9uIGZyb20gb25lXG4gICAgICogdmlldyB0byBhbm90aGVyLCBhcyB0aGUgcmVzdWx0IG9mIGVpdGhlciB1c2VyIGludGVyYWN0aW9uIG9yIG1ldGhvZHMgc3VjaCBhcyB7QGxpbmsgTWFwI2p1bXBUb30uXG4gICAgICpcbiAgICAgKiBAZXZlbnQgbW92ZXN0YXJ0XG4gICAgICogQG1lbWJlcm9mIE1hcFxuICAgICAqIEBpbnN0YW5jZVxuICAgICAqIEBwcm9wZXJ0eSB7e29yaWdpbmFsRXZlbnQ6IERyYWdFdmVudH19IGRhdGFcbiAgICAgKi9cbiAgICB8ICdtb3Zlc3RhcnQnXG5cbiAgICAvKipcbiAgICAgKiBGaXJlZCByZXBlYXRlZGx5IGR1cmluZyBhbiBhbmltYXRlZCB0cmFuc2l0aW9uIGZyb20gb25lIHZpZXcgdG9cbiAgICAgKiBhbm90aGVyLCBhcyB0aGUgcmVzdWx0IG9mIGVpdGhlciB1c2VyIGludGVyYWN0aW9uIG9yIG1ldGhvZHMgc3VjaCBhcyB7QGxpbmsgTWFwI2ZseVRvfS5cbiAgICAgKlxuICAgICAqIEBldmVudCBtb3ZlXG4gICAgICogQG1lbWJlcm9mIE1hcFxuICAgICAqIEBpbnN0YW5jZVxuICAgICAqIEBwcm9wZXJ0eSB7TWFwTW91c2VFdmVudCB8IE1hcFRvdWNoRXZlbnR9IGRhdGFcbiAgICAgKi9cbiAgICB8ICdtb3ZlJ1xuXG4gICAgLyoqXG4gICAgICogRmlyZWQganVzdCBhZnRlciB0aGUgbWFwIGNvbXBsZXRlcyBhIHRyYW5zaXRpb24gZnJvbSBvbmVcbiAgICAgKiB2aWV3IHRvIGFub3RoZXIsIGFzIHRoZSByZXN1bHQgb2YgZWl0aGVyIHVzZXIgaW50ZXJhY3Rpb24gb3IgbWV0aG9kcyBzdWNoIGFzIHtAbGluayBNYXAjanVtcFRvfS5cbiAgICAgKlxuICAgICAqIEBldmVudCBtb3ZlZW5kXG4gICAgICogQG1lbWJlcm9mIE1hcFxuICAgICAqIEBpbnN0YW5jZVxuICAgICAqIEBwcm9wZXJ0eSB7e29yaWdpbmFsRXZlbnQ6IERyYWdFdmVudH19IGRhdGFcbiAgICAgKiBAc2VlIFtQbGF5IG1hcCBsb2NhdGlvbnMgYXMgYSBzbGlkZXNob3ddKGh0dHBzOi8vd3d3Lm1hcGJveC5jb20vbWFwYm94LWdsLWpzL2V4YW1wbGUvcGxheWJhY2stbG9jYXRpb25zLylcbiAgICAgKiBAc2VlIFtGaWx0ZXIgZmVhdHVyZXMgd2l0aGluIG1hcCB2aWV3XShodHRwczovL3d3dy5tYXBib3guY29tL21hcGJveC1nbC1qcy9leGFtcGxlL2ZpbHRlci1mZWF0dXJlcy13aXRoaW4tbWFwLXZpZXcvKVxuICAgICAqL1xuICAgIHwgJ21vdmVlbmQnXG5cbiAgICAvKipcbiAgICAgKiBGaXJlZCB3aGVuIGEgXCJkcmFnIHRvIHBhblwiIGludGVyYWN0aW9uIHN0YXJ0cy4gU2VlIHtAbGluayBEcmFnUGFuSGFuZGxlcn0uXG4gICAgICpcbiAgICAgKiBAZXZlbnQgZHJhZ3N0YXJ0XG4gICAgICogQG1lbWJlcm9mIE1hcFxuICAgICAqIEBpbnN0YW5jZVxuICAgICAqIEBwcm9wZXJ0eSB7e29yaWdpbmFsRXZlbnQ6IERyYWdFdmVudH19IGRhdGFcbiAgICAgKi9cbiAgICB8ICdkcmFnc3RhcnQnXG5cbiAgICAvKipcbiAgICAgKiBGaXJlZCByZXBlYXRlZGx5IGR1cmluZyBhIFwiZHJhZyB0byBwYW5cIiBpbnRlcmFjdGlvbi4gU2VlIHtAbGluayBEcmFnUGFuSGFuZGxlcn0uXG4gICAgICpcbiAgICAgKiBAZXZlbnQgZHJhZ1xuICAgICAqIEBtZW1iZXJvZiBNYXBcbiAgICAgKiBAaW5zdGFuY2VcbiAgICAgKiBAcHJvcGVydHkge01hcE1vdXNlRXZlbnQgfCBNYXBUb3VjaEV2ZW50fSBkYXRhXG4gICAgICovXG4gICAgfCAnZHJhZydcblxuICAgIC8qKlxuICAgICAqIEZpcmVkIHdoZW4gYSBcImRyYWcgdG8gcGFuXCIgaW50ZXJhY3Rpb24gZW5kcy4gU2VlIHtAbGluayBEcmFnUGFuSGFuZGxlcn0uXG4gICAgICpcbiAgICAgKiBAZXZlbnQgZHJhZ2VuZFxuICAgICAqIEBtZW1iZXJvZiBNYXBcbiAgICAgKiBAaW5zdGFuY2VcbiAgICAgKiBAcHJvcGVydHkge3tvcmlnaW5hbEV2ZW50OiBEcmFnRXZlbnR9fSBkYXRhXG4gICAgICovXG4gICAgfCAnZHJhZ2VuZCdcblxuICAgIC8qKlxuICAgICAqIEZpcmVkIGp1c3QgYmVmb3JlIHRoZSBtYXAgYmVnaW5zIGEgdHJhbnNpdGlvbiBmcm9tIG9uZSB6b29tIGxldmVsIHRvIGFub3RoZXIsXG4gICAgICogYXMgdGhlIHJlc3VsdCBvZiBlaXRoZXIgdXNlciBpbnRlcmFjdGlvbiBvciBtZXRob2RzIHN1Y2ggYXMge0BsaW5rIE1hcCNmbHlUb30uXG4gICAgICpcbiAgICAgKiBAZXZlbnQgem9vbXN0YXJ0XG4gICAgICogQG1lbWJlcm9mIE1hcFxuICAgICAqIEBpbnN0YW5jZVxuICAgICAqIEBwcm9wZXJ0eSB7TWFwTW91c2VFdmVudCB8IE1hcFRvdWNoRXZlbnR9IGRhdGFcbiAgICAgKi9cbiAgICB8ICd6b29tc3RhcnQnXG5cbiAgICAvKipcbiAgICAgKiBGaXJlZCByZXBlYXRlZGx5IGR1cmluZyBhbiBhbmltYXRlZCB0cmFuc2l0aW9uIGZyb20gb25lIHpvb20gbGV2ZWwgdG8gYW5vdGhlcixcbiAgICAgKiBhcyB0aGUgcmVzdWx0IG9mIGVpdGhlciB1c2VyIGludGVyYWN0aW9uIG9yIG1ldGhvZHMgc3VjaCBhcyB7QGxpbmsgTWFwI2ZseVRvfS5cbiAgICAgKlxuICAgICAqIEBldmVudCB6b29tXG4gICAgICogQG1lbWJlcm9mIE1hcFxuICAgICAqIEBpbnN0YW5jZVxuICAgICAqIEBwcm9wZXJ0eSB7TWFwTW91c2VFdmVudCB8IE1hcFRvdWNoRXZlbnR9IGRhdGFcbiAgICAgKiBAc2VlIFtVcGRhdGUgYSBjaG9yb3BsZXRoIGxheWVyIGJ5IHpvb20gbGV2ZWxdKGh0dHBzOi8vd3d3Lm1hcGJveC5jb20vbWFwYm94LWdsLWpzL2V4YW1wbGUvdXBkYXRpbmctY2hvcm9wbGV0aC8pXG4gICAgICovXG4gICAgfCAnem9vbSdcblxuICAgIC8qKlxuICAgICAqIEZpcmVkIGp1c3QgYWZ0ZXIgdGhlIG1hcCBjb21wbGV0ZXMgYSB0cmFuc2l0aW9uIGZyb20gb25lIHpvb20gbGV2ZWwgdG8gYW5vdGhlcixcbiAgICAgKiBhcyB0aGUgcmVzdWx0IG9mIGVpdGhlciB1c2VyIGludGVyYWN0aW9uIG9yIG1ldGhvZHMgc3VjaCBhcyB7QGxpbmsgTWFwI2ZseVRvfS5cbiAgICAgKlxuICAgICAqIEBldmVudCB6b29tZW5kXG4gICAgICogQG1lbWJlcm9mIE1hcFxuICAgICAqIEBpbnN0YW5jZVxuICAgICAqIEBwcm9wZXJ0eSB7TWFwTW91c2VFdmVudCB8IE1hcFRvdWNoRXZlbnR9IGRhdGFcbiAgICAgKi9cbiAgICB8ICd6b29tZW5kJ1xuXG4gICAgLyoqXG4gICAgICogRmlyZWQgd2hlbiBhIFwiZHJhZyB0byByb3RhdGVcIiBpbnRlcmFjdGlvbiBzdGFydHMuIFNlZSB7QGxpbmsgRHJhZ1JvdGF0ZUhhbmRsZXJ9LlxuICAgICAqXG4gICAgICogQGV2ZW50IHJvdGF0ZXN0YXJ0XG4gICAgICogQG1lbWJlcm9mIE1hcFxuICAgICAqIEBpbnN0YW5jZVxuICAgICAqIEBwcm9wZXJ0eSB7TWFwTW91c2VFdmVudCB8IE1hcFRvdWNoRXZlbnR9IGRhdGFcbiAgICAgKi9cbiAgICB8ICdyb3RhdGVzdGFydCdcblxuICAgIC8qKlxuICAgICAqIEZpcmVkIHJlcGVhdGVkbHkgZHVyaW5nIGEgXCJkcmFnIHRvIHJvdGF0ZVwiIGludGVyYWN0aW9uLiBTZWUge0BsaW5rIERyYWdSb3RhdGVIYW5kbGVyfS5cbiAgICAgKlxuICAgICAqIEBldmVudCByb3RhdGVcbiAgICAgKiBAbWVtYmVyb2YgTWFwXG4gICAgICogQGluc3RhbmNlXG4gICAgICogQHByb3BlcnR5IHtNYXBNb3VzZUV2ZW50IHwgTWFwVG91Y2hFdmVudH0gZGF0YVxuICAgICAqL1xuICAgIHwgJ3JvdGF0ZSdcblxuICAgIC8qKlxuICAgICAqIEZpcmVkIHdoZW4gYSBcImRyYWcgdG8gcm90YXRlXCIgaW50ZXJhY3Rpb24gZW5kcy4gU2VlIHtAbGluayBEcmFnUm90YXRlSGFuZGxlcn0uXG4gICAgICpcbiAgICAgKiBAZXZlbnQgcm90YXRlZW5kXG4gICAgICogQG1lbWJlcm9mIE1hcFxuICAgICAqIEBpbnN0YW5jZVxuICAgICAqIEBwcm9wZXJ0eSB7TWFwTW91c2VFdmVudCB8IE1hcFRvdWNoRXZlbnR9IGRhdGFcbiAgICAgKi9cbiAgICB8ICdyb3RhdGVlbmQnXG5cbiAgICAvKipcbiAgICAgKiBGaXJlZCB3aGVuZXZlciB0aGUgbWFwJ3MgcGl0Y2ggKHRpbHQpIGJlZ2lucyBhIGNoYW5nZSBhc1xuICAgICAqIHRoZSByZXN1bHQgb2YgZWl0aGVyIHVzZXIgaW50ZXJhY3Rpb24gb3IgbWV0aG9kcyBzdWNoIGFzIHtAbGluayBNYXAjZmx5VG99IC5cbiAgICAgKlxuICAgICAqIEBldmVudCBwaXRjaHN0YXJ0XG4gICAgICogQG1lbWJlcm9mIE1hcFxuICAgICAqIEBpbnN0YW5jZVxuICAgICAqIEBwcm9wZXJ0eSB7TWFwRXZlbnREYXRhfSBkYXRhXG4gICAgICovXG4gICAgfCAncGl0Y2hzdGFydCdcblxuICAgIC8qKlxuICAgICAqIEZpcmVkIHdoZW5ldmVyIHRoZSBtYXAncyBwaXRjaCAodGlsdCkgY2hhbmdlcyBhcy5cbiAgICAgKiB0aGUgcmVzdWx0IG9mIGVpdGhlciB1c2VyIGludGVyYWN0aW9uIG9yIG1ldGhvZHMgc3VjaCBhcyB7QGxpbmsgTWFwI2ZseVRvfS5cbiAgICAgKlxuICAgICAqIEBldmVudCBwaXRjaFxuICAgICAqIEBtZW1iZXJvZiBNYXBcbiAgICAgKiBAaW5zdGFuY2VcbiAgICAgKiBAcHJvcGVydHkge01hcEV2ZW50RGF0YX0gZGF0YVxuICAgICAqL1xuICAgIHwgJ3BpdGNoJ1xuXG4gICAgLyoqXG4gICAgICogRmlyZWQgaW1tZWRpYXRlbHkgYWZ0ZXIgdGhlIG1hcCdzIHBpdGNoICh0aWx0KSBmaW5pc2hlcyBjaGFuZ2luZyBhc1xuICAgICAqIHRoZSByZXN1bHQgb2YgZWl0aGVyIHVzZXIgaW50ZXJhY3Rpb24gb3IgbWV0aG9kcyBzdWNoIGFzIHtAbGluayBNYXAjZmx5VG99LlxuICAgICAqXG4gICAgICogQGV2ZW50IHBpdGNoZW5kXG4gICAgICogQG1lbWJlcm9mIE1hcFxuICAgICAqIEBpbnN0YW5jZVxuICAgICAqIEBwcm9wZXJ0eSB7TWFwRXZlbnREYXRhfSBkYXRhXG4gICAgICovXG4gICAgfCAncGl0Y2hlbmQnXG5cbiAgICAvKipcbiAgICAgKiBGaXJlZCB3aGVuIGEgXCJib3ggem9vbVwiIGludGVyYWN0aW9uIHN0YXJ0cy4gU2VlIHtAbGluayBCb3hab29tSGFuZGxlcn0uXG4gICAgICpcbiAgICAgKiBAZXZlbnQgYm94em9vbXN0YXJ0XG4gICAgICogQG1lbWJlcm9mIE1hcFxuICAgICAqIEBpbnN0YW5jZVxuICAgICAqIEBwcm9wZXJ0eSB7TWFwQm94Wm9vbUV2ZW50fSBkYXRhXG4gICAgICovXG4gICAgfCAnYm94em9vbXN0YXJ0J1xuXG4gICAgLyoqXG4gICAgICogRmlyZWQgd2hlbiBhIFwiYm94IHpvb21cIiBpbnRlcmFjdGlvbiBlbmRzLiAgU2VlIHtAbGluayBCb3hab29tSGFuZGxlcn0uXG4gICAgICpcbiAgICAgKiBAZXZlbnQgYm94em9vbWVuZFxuICAgICAqIEBtZW1iZXJvZiBNYXBcbiAgICAgKiBAaW5zdGFuY2VcbiAgICAgKiBAdHlwZSB7T2JqZWN0fVxuICAgICAqIEBwcm9wZXJ0eSB7TWFwQm94Wm9vbUV2ZW50fSBkYXRhXG4gICAgICovXG4gICAgfCAnYm94em9vbWVuZCdcblxuICAgIC8qKlxuICAgICAqIEZpcmVkIHdoZW4gdGhlIHVzZXIgY2FuY2VscyBhIFwiYm94IHpvb21cIiBpbnRlcmFjdGlvbiwgb3Igd2hlbiB0aGUgYm91bmRpbmcgYm94IGRvZXMgbm90IG1lZXQgdGhlIG1pbmltdW0gc2l6ZSB0aHJlc2hvbGQuXG4gICAgICogU2VlIHtAbGluayBCb3hab29tSGFuZGxlcn0uXG4gICAgICpcbiAgICAgKiBAZXZlbnQgYm94em9vbWNhbmNlbFxuICAgICAqIEBtZW1iZXJvZiBNYXBcbiAgICAgKiBAaW5zdGFuY2VcbiAgICAgKiBAcHJvcGVydHkge01hcEJveFpvb21FdmVudH0gZGF0YVxuICAgICAqL1xuICAgIHwgJ2JveHpvb21jYW5jZWwnXG5cbiAgICAvKipcbiAgICAgKiBGaXJlZCBpbW1lZGlhdGVseSBhZnRlciB0aGUgbWFwIGhhcyBiZWVuIHJlc2l6ZWQuXG4gICAgICpcbiAgICAgKiBAZXZlbnQgcmVzaXplXG4gICAgICogQG1lbWJlcm9mIE1hcFxuICAgICAqIEBpbnN0YW5jZVxuICAgICAqL1xuICAgIHwgJ3Jlc2l6ZSdcblxuICAgIC8qKlxuICAgICAqIEZpcmVkIHdoZW4gdGhlIFdlYkdMIGNvbnRleHQgaXMgbG9zdC5cbiAgICAgKlxuICAgICAqIEBldmVudCB3ZWJnbGNvbnRleHRsb3N0XG4gICAgICogQG1lbWJlcm9mIE1hcFxuICAgICAqIEBpbnN0YW5jZVxuICAgICAqL1xuICAgIHwgJ3dlYmdsY29udGV4dGxvc3QnXG5cbiAgICAvKipcbiAgICAgKiBGaXJlZCB3aGVuIHRoZSBXZWJHTCBjb250ZXh0IGlzIHJlc3RvcmVkLlxuICAgICAqXG4gICAgICogQGV2ZW50IHdlYmdsY29udGV4dHJlc3RvcmVkXG4gICAgICogQG1lbWJlcm9mIE1hcFxuICAgICAqIEBpbnN0YW5jZVxuICAgICAqL1xuICAgIHwgJ3dlYmdsY29udGV4dHJlc3RvcmVkJ1xuXG4gICAgLyoqXG4gICAgICogRmlyZWQgaW1tZWRpYXRlbHkgYWZ0ZXIgYWxsIG5lY2Vzc2FyeSByZXNvdXJjZXMgaGF2ZSBiZWVuIGRvd25sb2FkZWRcbiAgICAgKiBhbmQgdGhlIGZpcnN0IHZpc3VhbGx5IGNvbXBsZXRlIHJlbmRlcmluZyBvZiB0aGUgbWFwIGhhcyBvY2N1cnJlZC5cbiAgICAgKlxuICAgICAqIEBldmVudCBsb2FkXG4gICAgICogQG1lbWJlcm9mIE1hcFxuICAgICAqIEBpbnN0YW5jZVxuICAgICAqIEB0eXBlIHtPYmplY3R9XG4gICAgICogQHNlZSBbRHJhdyBHZW9KU09OIHBvaW50c10oaHR0cHM6Ly93d3cubWFwYm94LmNvbS9tYXBib3gtZ2wtanMvZXhhbXBsZS9nZW9qc29uLW1hcmtlcnMvKVxuICAgICAqIEBzZWUgW0FkZCBsaXZlIHJlYWx0aW1lIGRhdGFdKGh0dHBzOi8vd3d3Lm1hcGJveC5jb20vbWFwYm94LWdsLWpzL2V4YW1wbGUvbGl2ZS1nZW9qc29uLylcbiAgICAgKiBAc2VlIFtBbmltYXRlIGEgcG9pbnRdKGh0dHBzOi8vd3d3Lm1hcGJveC5jb20vbWFwYm94LWdsLWpzL2V4YW1wbGUvYW5pbWF0ZS1wb2ludC1hbG9uZy1saW5lLylcbiAgICAgKi9cbiAgICB8ICdsb2FkJ1xuXG4gICAgLyoqXG4gICAgICogRmlyZWQgd2hlbmV2ZXIgdGhlIG1hcCBpcyBkcmF3biB0byB0aGUgc2NyZWVuLCBhcyB0aGUgcmVzdWx0IG9mXG4gICAgICpcbiAgICAgKiAtIGEgY2hhbmdlIHRvIHRoZSBtYXAncyBwb3NpdGlvbiwgem9vbSwgcGl0Y2gsIG9yIGJlYXJpbmdcbiAgICAgKiAtIGEgY2hhbmdlIHRvIHRoZSBtYXAncyBzdHlsZVxuICAgICAqIC0gYSBjaGFuZ2UgdG8gYSBHZW9KU09OIHNvdXJjZVxuICAgICAqIC0gdGhlIGxvYWRpbmcgb2YgYSB2ZWN0b3IgdGlsZSwgR2VvSlNPTiBmaWxlLCBnbHlwaCwgb3Igc3ByaXRlXG4gICAgICpcbiAgICAgKiBAZXZlbnQgcmVuZGVyXG4gICAgICogQG1lbWJlcm9mIE1hcFxuICAgICAqIEBpbnN0YW5jZVxuICAgICAqL1xuICAgIHwgJ3JlbmRlcidcblxuICAgIC8qKlxuICAgICAqIEZpcmVkIGltbWVkaWF0ZWx5IGFmdGVyIHRoZSBtYXAgaGFzIGJlZW4gcmVtb3ZlZCB3aXRoIHtAbGluayBNYXAuZXZlbnQ6cmVtb3ZlfS5cbiAgICAgKlxuICAgICAqIEBldmVudCByZW1vdmVcbiAgICAgKiBAbWVtYmVyb2YgTWFwXG4gICAgICogQGluc3RhbmNlXG4gICAgICovXG4gICAgfCAncmVtb3ZlJ1xuXG4gICAgLyoqXG4gICAgICogRmlyZWQgd2hlbiBhbiBlcnJvciBvY2N1cnMuIFRoaXMgaXMgR0wgSlMncyBwcmltYXJ5IGVycm9yIHJlcG9ydGluZ1xuICAgICAqIG1lY2hhbmlzbS4gV2UgdXNlIGFuIGV2ZW50IGluc3RlYWQgb2YgYHRocm93YCB0byBiZXR0ZXIgYWNjb21tb2RhdGVcbiAgICAgKiBhc3luY3Jvbm91cyBvcGVyYXRpb25zLiBJZiBubyBsaXN0ZW5lcnMgYXJlIGJvdW5kIHRvIHRoZSBgZXJyb3JgIGV2ZW50LCB0aGVcbiAgICAgKiBlcnJvciB3aWxsIGJlIHByaW50ZWQgdG8gdGhlIGNvbnNvbGUuXG4gICAgICpcbiAgICAgKiBAZXZlbnQgZXJyb3JcbiAgICAgKiBAbWVtYmVyb2YgTWFwXG4gICAgICogQGluc3RhbmNlXG4gICAgICogQHByb3BlcnR5IHt7ZXJyb3I6IHttZXNzYWdlOiBzdHJpbmd9fX0gZGF0YVxuICAgICAqL1xuICAgIHwgJ2Vycm9yJ1xuXG4gICAgLyoqXG4gICAgICogRmlyZWQgd2hlbiBhbnkgbWFwIGRhdGEgbG9hZHMgb3IgY2hhbmdlcy4gU2VlIHtAbGluayBNYXBEYXRhRXZlbnR9XG4gICAgICogZm9yIG1vcmUgaW5mb3JtYXRpb24uXG4gICAgICpcbiAgICAgKiBAZXZlbnQgZGF0YVxuICAgICAqIEBtZW1iZXJvZiBNYXBcbiAgICAgKiBAaW5zdGFuY2VcbiAgICAgKiBAcHJvcGVydHkge01hcERhdGFFdmVudH0gZGF0YVxuICAgICAqL1xuICAgIHwgJ2RhdGEnXG5cbiAgICAvKipcbiAgICAgKiBGaXJlZCB3aGVuIHRoZSBtYXAncyBzdHlsZSBsb2FkcyBvciBjaGFuZ2VzLiBTZWVcbiAgICAgKiB7QGxpbmsgTWFwRGF0YUV2ZW50fSBmb3IgbW9yZSBpbmZvcm1hdGlvbi5cbiAgICAgKlxuICAgICAqIEBldmVudCBzdHlsZWRhdGFcbiAgICAgKiBAbWVtYmVyb2YgTWFwXG4gICAgICogQGluc3RhbmNlXG4gICAgICogQHByb3BlcnR5IHtNYXBEYXRhRXZlbnR9IGRhdGFcbiAgICAgKi9cbiAgICB8ICdzdHlsZWRhdGEnXG5cbiAgICAvKipcbiAgICAgKiBGaXJlZCB3aGVuIG9uZSBvZiB0aGUgbWFwJ3Mgc291cmNlcyBsb2FkcyBvciBjaGFuZ2VzLCBpbmNsdWRpbmcgaWYgYSB0aWxlIGJlbG9uZ2luZ1xuICAgICAqIHRvIGEgc291cmNlIGxvYWRzIG9yIGNoYW5nZXMuIFNlZSB7QGxpbmsgTWFwRGF0YUV2ZW50fSBmb3IgbW9yZSBpbmZvcm1hdGlvbi5cbiAgICAgKlxuICAgICAqIEBldmVudCBzb3VyY2VkYXRhXG4gICAgICogQG1lbWJlcm9mIE1hcFxuICAgICAqIEBpbnN0YW5jZVxuICAgICAqIEBwcm9wZXJ0eSB7TWFwRGF0YUV2ZW50fSBkYXRhXG4gICAgICovXG4gICAgfCAnc291cmNlZGF0YSdcblxuICAgIC8qKlxuICAgICAqIEZpcmVkIHdoZW4gYW55IG1hcCBkYXRhIChzdHlsZSwgc291cmNlLCB0aWxlLCBldGMpIGJlZ2lucyBsb2FkaW5nIG9yXG4gICAgICogY2hhbmdpbmcgYXN5bmNyb25vdXNseS4gQWxsIGBkYXRhbG9hZGluZ2AgZXZlbnRzIGFyZSBmb2xsb3dlZCBieSBhIGBkYXRhYFxuICAgICAqIG9yIGBlcnJvcmAgZXZlbnQuIFNlZSB7QGxpbmsgTWFwRGF0YUV2ZW50fSBmb3IgbW9yZSBpbmZvcm1hdGlvbi5cbiAgICAgKlxuICAgICAqIEBldmVudCBkYXRhbG9hZGluZ1xuICAgICAqIEBtZW1iZXJvZiBNYXBcbiAgICAgKiBAaW5zdGFuY2VcbiAgICAgKiBAcHJvcGVydHkge01hcERhdGFFdmVudH0gZGF0YVxuICAgICAqL1xuICAgIHwgJ2RhdGFsb2FkaW5nJ1xuXG4gICAgLyoqXG4gICAgICogRmlyZWQgd2hlbiB0aGUgbWFwJ3Mgc3R5bGUgYmVnaW5zIGxvYWRpbmcgb3IgY2hhbmdpbmcgYXN5bmNyb25vdXNseS5cbiAgICAgKiBBbGwgYHN0eWxlZGF0YWxvYWRpbmdgIGV2ZW50cyBhcmUgZm9sbG93ZWQgYnkgYSBgc3R5bGVkYXRhYFxuICAgICAqIG9yIGBlcnJvcmAgZXZlbnQuIFNlZSB7QGxpbmsgTWFwRGF0YUV2ZW50fSBmb3IgbW9yZSBpbmZvcm1hdGlvbi5cbiAgICAgKlxuICAgICAqIEBldmVudCBzdHlsZWRhdGFsb2FkaW5nXG4gICAgICogQG1lbWJlcm9mIE1hcFxuICAgICAqIEBpbnN0YW5jZVxuICAgICAqIEBwcm9wZXJ0eSB7TWFwRGF0YUV2ZW50fSBkYXRhXG4gICAgICovXG4gICAgfCAnc3R5bGVkYXRhbG9hZGluZydcblxuICAgIC8qKlxuICAgICAqIEZpcmVkIHdoZW4gb25lIG9mIHRoZSBtYXAncyBzb3VyY2VzIGJlZ2lucyBsb2FkaW5nIG9yIGNoYW5naW5nIGFzeW5jcm9ub3VzbHkuXG4gICAgICogQWxsIGBzb3VyY2VkYXRhbG9hZGluZ2AgZXZlbnRzIGFyZSBmb2xsb3dlZCBieSBhIGBzb3VyY2VkYXRhYCBvciBgZXJyb3JgIGV2ZW50LlxuICAgICAqIFNlZSB7QGxpbmsgTWFwRGF0YUV2ZW50fSBmb3IgbW9yZSBpbmZvcm1hdGlvbi5cbiAgICAgKlxuICAgICAqIEBldmVudCBzb3VyY2VkYXRhbG9hZGluZ1xuICAgICAqIEBtZW1iZXJvZiBNYXBcbiAgICAgKiBAaW5zdGFuY2VcbiAgICAgKiBAcHJvcGVydHkge01hcERhdGFFdmVudH0gZGF0YVxuICAgICAqL1xuICAgIHwgJ3NvdXJjZWRhdGFsb2FkaW5nJ1xuXG4gICAgLyoqXG4gICAgICogQGV2ZW50IHN0eWxlLmxvYWRcbiAgICAgKiBAbWVtYmVyb2YgTWFwXG4gICAgICogQGluc3RhbmNlXG4gICAgICogQHByaXZhdGVcbiAgICAgKi9cbiAgICB8ICdzdHlsZS5sb2FkJztcbiIsIi8vIEBmbG93XG5cbmltcG9ydCBhc3NlcnQgZnJvbSAnYXNzZXJ0JztcbmltcG9ydCBET00gZnJvbSAnLi4vLi4vdXRpbC9kb20nO1xuXG5pbXBvcnQgeyBlYXNlIGFzIF9lYXNlLCBiaW5kQWxsLCBiZXppZXIgfSBmcm9tICcuLi8uLi91dGlsL3V0aWwnO1xuaW1wb3J0IGJyb3dzZXIgZnJvbSAnLi4vLi4vdXRpbC9icm93c2VyJztcbmltcG9ydCB3aW5kb3cgZnJvbSAnLi4vLi4vdXRpbC93aW5kb3cnO1xuaW1wb3J0IHsgbnVtYmVyIGFzIGludGVycG9sYXRlIH0gZnJvbSAnLi4vLi4vc3R5bGUtc3BlYy91dGlsL2ludGVycG9sYXRlJztcbmltcG9ydCBMbmdMYXQgZnJvbSAnLi4vLi4vZ2VvL2xuZ19sYXQnO1xuaW1wb3J0IHsgRXZlbnQgfSBmcm9tICcuLi8uLi91dGlsL2V2ZW50ZWQnO1xuXG5pbXBvcnQgdHlwZSBNYXAgZnJvbSAnLi4vbWFwJztcbmltcG9ydCB0eXBlIFBvaW50IGZyb20gJ0BtYXBib3gvcG9pbnQtZ2VvbWV0cnknO1xuaW1wb3J0IHR5cGUge1Rhc2tJRH0gZnJvbSAnLi4vLi4vdXRpbC90YXNrX3F1ZXVlJztcblxuLy8gZGVsdGFZIHZhbHVlIGZvciBtb3VzZSBzY3JvbGwgd2hlZWwgaWRlbnRpZmljYXRpb25cbmNvbnN0IHdoZWVsWm9vbURlbHRhID0gNC4wMDAyNDQxNDA2MjU7XG4vLyBUaGVzZSBtYWdpYyBudW1iZXJzIGNvbnRyb2wgdGhlIHJhdGUgb2Ygem9vbS4gVHJhY2twYWQgZXZlbnRzIGZpcmUgYXQgYSBncmVhdGVyXG4vLyBmcmVxdWVuY3kgdGhhbiBtb3VzZSBzY3JvbGwgd2hlZWwsIHNvIHJlZHVjZSB0aGUgem9vbSByYXRlIHBlciB3aGVlbCB0aWNrXG5jb25zdCBkZWZhdWx0Wm9vbVJhdGUgPSAxIC8gMTAwO1xuY29uc3Qgd2hlZWxab29tUmF0ZSA9IDEgLyA0NTA7XG5cbi8vIHVwcGVyIGJvdW5kIG9uIGhvdyBtdWNoIHdlIHNjYWxlIHRoZSBtYXAgaW4gYW55IHNpbmdsZSByZW5kZXIgZnJhbWU7IHRoaXNcbi8vIGlzIHVzZWQgdG8gbGltaXQgem9vbSByYXRlIGluIHRoZSBjYXNlIG9mIHZlcnkgZmFzdCBzY3JvbGxpbmdcbmNvbnN0IG1heFNjYWxlUGVyRnJhbWUgPSAyO1xuXG4vKipcbiAqIFRoZSBgU2Nyb2xsWm9vbUhhbmRsZXJgIGFsbG93cyB0aGUgdXNlciB0byB6b29tIHRoZSBtYXAgYnkgc2Nyb2xsaW5nLlxuICovXG5jbGFzcyBTY3JvbGxab29tSGFuZGxlciB7XG4gICAgX21hcDogTWFwO1xuICAgIF9lbDogSFRNTEVsZW1lbnQ7XG4gICAgX2VuYWJsZWQ6IGJvb2xlYW47XG4gICAgX2FjdGl2ZTogYm9vbGVhbjtcbiAgICBfYXJvdW5kQ2VudGVyOiBib29sZWFuO1xuICAgIF9hcm91bmQ6IFBvaW50O1xuICAgIF9hcm91bmRQb2ludDogUG9pbnQ7XG4gICAgX3R5cGU6ICd3aGVlbCcgfCAndHJhY2twYWQnIHwgbnVsbDtcbiAgICBfbGFzdFZhbHVlOiBudW1iZXI7XG4gICAgX3RpbWVvdXQ6ID9UaW1lb3V0SUQ7IC8vIHVzZWQgZm9yIGRlbGF5ZWQtaGFuZGxpbmcgb2YgYSBzaW5nbGUgd2hlZWwgbW92ZW1lbnRcbiAgICBfZmluaXNoVGltZW91dDogP1RpbWVvdXRJRDsgLy8gdXNlZCB0byBkZWxheSBmaW5hbCAne21vdmUsem9vbX1lbmQnIGV2ZW50c1xuXG4gICAgX2xhc3RXaGVlbEV2ZW50OiBhbnk7XG4gICAgX2xhc3RXaGVlbEV2ZW50VGltZTogbnVtYmVyO1xuXG4gICAgX3N0YXJ0Wm9vbTogP251bWJlcjtcbiAgICBfdGFyZ2V0Wm9vbTogP251bWJlcjtcbiAgICBfZGVsdGE6IG51bWJlcjtcbiAgICBfZWFzaW5nOiA/KChudW1iZXIpID0+IG51bWJlcik7XG4gICAgX3ByZXZFYXNlOiA/e3N0YXJ0OiBudW1iZXIsIGR1cmF0aW9uOiBudW1iZXIsIGVhc2luZzogKG51bWJlcikgPT4gbnVtYmVyfTtcblxuICAgIF9mcmFtZUlkOiA/VGFza0lEO1xuXG4gICAgLyoqXG4gICAgICogQHByaXZhdGVcbiAgICAgKi9cbiAgICBjb25zdHJ1Y3RvcihtYXA6IE1hcCkge1xuICAgICAgICB0aGlzLl9tYXAgPSBtYXA7XG4gICAgICAgIHRoaXMuX2VsID0gbWFwLmdldENhbnZhc0NvbnRhaW5lcigpO1xuXG4gICAgICAgIHRoaXMuX2RlbHRhID0gMDtcblxuICAgICAgICBiaW5kQWxsKFtcbiAgICAgICAgICAgICdfb25XaGVlbCcsXG4gICAgICAgICAgICAnX29uVGltZW91dCcsXG4gICAgICAgICAgICAnX29uU2Nyb2xsRnJhbWUnLFxuICAgICAgICAgICAgJ19vblNjcm9sbEZpbmlzaGVkJ1xuICAgICAgICBdLCB0aGlzKTtcbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBSZXR1cm5zIGEgQm9vbGVhbiBpbmRpY2F0aW5nIHdoZXRoZXIgdGhlIFwic2Nyb2xsIHRvIHpvb21cIiBpbnRlcmFjdGlvbiBpcyBlbmFibGVkLlxuICAgICAqXG4gICAgICogQHJldHVybnMge2Jvb2xlYW59IGB0cnVlYCBpZiB0aGUgXCJzY3JvbGwgdG8gem9vbVwiIGludGVyYWN0aW9uIGlzIGVuYWJsZWQuXG4gICAgICovXG4gICAgaXNFbmFibGVkKCkge1xuICAgICAgICByZXR1cm4gISF0aGlzLl9lbmFibGVkO1xuICAgIH1cblxuICAgIGlzQWN0aXZlKCkge1xuICAgICAgICByZXR1cm4gISF0aGlzLl9hY3RpdmU7XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogRW5hYmxlcyB0aGUgXCJzY3JvbGwgdG8gem9vbVwiIGludGVyYWN0aW9uLlxuICAgICAqXG4gICAgICogQHBhcmFtIHtPYmplY3R9IFtvcHRpb25zXVxuICAgICAqIEBwYXJhbSB7c3RyaW5nfSBbb3B0aW9ucy5hcm91bmRdIElmIFwiY2VudGVyXCIgaXMgcGFzc2VkLCBtYXAgd2lsbCB6b29tIGFyb3VuZCBjZW50ZXIgb2YgbWFwXG4gICAgICpcbiAgICAgKiBAZXhhbXBsZVxuICAgICAqICAgbWFwLnNjcm9sbFpvb20uZW5hYmxlKCk7XG4gICAgICogQGV4YW1wbGVcbiAgICAgKiAgbWFwLnNjcm9sbFpvb20uZW5hYmxlKHsgYXJvdW5kOiAnY2VudGVyJyB9KVxuICAgICAqL1xuICAgIGVuYWJsZShvcHRpb25zOiBhbnkpIHtcbiAgICAgICAgaWYgKHRoaXMuaXNFbmFibGVkKCkpIHJldHVybjtcbiAgICAgICAgdGhpcy5fZW5hYmxlZCA9IHRydWU7XG4gICAgICAgIHRoaXMuX2Fyb3VuZENlbnRlciA9IG9wdGlvbnMgJiYgb3B0aW9ucy5hcm91bmQgPT09ICdjZW50ZXInO1xuICAgIH1cblxuICAgIC8qKlxuICAgICAqIERpc2FibGVzIHRoZSBcInNjcm9sbCB0byB6b29tXCIgaW50ZXJhY3Rpb24uXG4gICAgICpcbiAgICAgKiBAZXhhbXBsZVxuICAgICAqICAgbWFwLnNjcm9sbFpvb20uZGlzYWJsZSgpO1xuICAgICAqL1xuICAgIGRpc2FibGUoKSB7XG4gICAgICAgIGlmICghdGhpcy5pc0VuYWJsZWQoKSkgcmV0dXJuO1xuICAgICAgICB0aGlzLl9lbmFibGVkID0gZmFsc2U7XG4gICAgfVxuXG4gICAgb25XaGVlbChlOiBXaGVlbEV2ZW50KSB7XG4gICAgICAgIGlmICghdGhpcy5pc0VuYWJsZWQoKSkgcmV0dXJuO1xuXG4gICAgICAgIC8vIFJlbW92ZSBgYW55YCBjYXN0IHdoZW4gaHR0cHM6Ly9naXRodWIuY29tL2ZhY2Vib29rL2Zsb3cvaXNzdWVzLzQ4NzkgaXMgZml4ZWQuXG4gICAgICAgIGxldCB2YWx1ZSA9IGUuZGVsdGFNb2RlID09PSAod2luZG93LldoZWVsRXZlbnQ6IGFueSkuRE9NX0RFTFRBX0xJTkUgPyBlLmRlbHRhWSAqIDQwIDogZS5kZWx0YVk7XG4gICAgICAgIGNvbnN0IG5vdyA9IGJyb3dzZXIubm93KCksXG4gICAgICAgICAgICB0aW1lRGVsdGEgPSBub3cgLSAodGhpcy5fbGFzdFdoZWVsRXZlbnRUaW1lIHx8IDApO1xuXG4gICAgICAgIHRoaXMuX2xhc3RXaGVlbEV2ZW50VGltZSA9IG5vdztcblxuICAgICAgICBpZiAodmFsdWUgIT09IDAgJiYgKHZhbHVlICUgd2hlZWxab29tRGVsdGEpID09PSAwKSB7XG4gICAgICAgICAgICAvLyBUaGlzIG9uZSBpcyBkZWZpbml0ZWx5IGEgbW91c2Ugd2hlZWwgZXZlbnQuXG4gICAgICAgICAgICB0aGlzLl90eXBlID0gJ3doZWVsJztcblxuICAgICAgICB9IGVsc2UgaWYgKHZhbHVlICE9PSAwICYmIE1hdGguYWJzKHZhbHVlKSA8IDQpIHtcbiAgICAgICAgICAgIC8vIFRoaXMgb25lIGlzIGRlZmluaXRlbHkgYSB0cmFja3BhZCBldmVudCBiZWNhdXNlIGl0IGlzIHNvIHNtYWxsLlxuICAgICAgICAgICAgdGhpcy5fdHlwZSA9ICd0cmFja3BhZCc7XG5cbiAgICAgICAgfSBlbHNlIGlmICh0aW1lRGVsdGEgPiA0MDApIHtcbiAgICAgICAgICAgIC8vIFRoaXMgaXMgbGlrZWx5IGEgbmV3IHNjcm9sbCBhY3Rpb24uXG4gICAgICAgICAgICB0aGlzLl90eXBlID0gbnVsbDtcbiAgICAgICAgICAgIHRoaXMuX2xhc3RWYWx1ZSA9IHZhbHVlO1xuXG4gICAgICAgICAgICAvLyBTdGFydCBhIHRpbWVvdXQgaW4gY2FzZSB0aGlzIHdhcyBhIHNpbmd1bGFyIGV2ZW50LCBhbmQgZGVseSBpdCBieSB1cCB0byA0MG1zLlxuICAgICAgICAgICAgdGhpcy5fdGltZW91dCA9IHNldFRpbWVvdXQodGhpcy5fb25UaW1lb3V0LCA0MCwgZSk7XG5cbiAgICAgICAgfSBlbHNlIGlmICghdGhpcy5fdHlwZSkge1xuICAgICAgICAgICAgLy8gVGhpcyBpcyBhIHJlcGVhdGluZyBldmVudCwgYnV0IHdlIGRvbid0IGtub3cgdGhlIHR5cGUgb2YgZXZlbnQganVzdCB5ZXQuXG4gICAgICAgICAgICAvLyBJZiB0aGUgZGVsdGEgcGVyIHRpbWUgaXMgc21hbGwsIHdlIGFzc3VtZSBpdCdzIGEgZmFzdCB0cmFja3BhZDsgb3RoZXJ3aXNlIHdlIHN3aXRjaCBpbnRvIHdoZWVsIG1vZGUuXG4gICAgICAgICAgICB0aGlzLl90eXBlID0gKE1hdGguYWJzKHRpbWVEZWx0YSAqIHZhbHVlKSA8IDIwMCkgPyAndHJhY2twYWQnIDogJ3doZWVsJztcblxuICAgICAgICAgICAgLy8gTWFrZSBzdXJlIG91ciBkZWxheWVkIGV2ZW50IGlzbid0IGZpcmVkIGFnYWluLCBiZWNhdXNlIHdlIGFjY3VtdWxhdGVcbiAgICAgICAgICAgIC8vIHRoZSBwcmV2aW91cyBldmVudCAod2hpY2ggd2FzIGxlc3MgdGhhbiA0MG1zIGFnbykgaW50byB0aGlzIGV2ZW50LlxuICAgICAgICAgICAgaWYgKHRoaXMuX3RpbWVvdXQpIHtcbiAgICAgICAgICAgICAgICBjbGVhclRpbWVvdXQodGhpcy5fdGltZW91dCk7XG4gICAgICAgICAgICAgICAgdGhpcy5fdGltZW91dCA9IG51bGw7XG4gICAgICAgICAgICAgICAgdmFsdWUgKz0gdGhpcy5fbGFzdFZhbHVlO1xuICAgICAgICAgICAgfVxuICAgICAgICB9XG5cbiAgICAgICAgLy8gU2xvdyBkb3duIHpvb20gaWYgc2hpZnQga2V5IGlzIGhlbGQgZm9yIG1vcmUgcHJlY2lzZSB6b29taW5nXG4gICAgICAgIGlmIChlLnNoaWZ0S2V5ICYmIHZhbHVlKSB2YWx1ZSA9IHZhbHVlIC8gNDtcblxuICAgICAgICAvLyBPbmx5IGZpcmUgdGhlIGNhbGxiYWNrIGlmIHdlIGFjdHVhbGx5IGtub3cgd2hhdCB0eXBlIG9mIHNjcm9sbGluZyBkZXZpY2UgdGhlIHVzZXIgdXNlcy5cbiAgICAgICAgaWYgKHRoaXMuX3R5cGUpIHtcbiAgICAgICAgICAgIHRoaXMuX2xhc3RXaGVlbEV2ZW50ID0gZTtcbiAgICAgICAgICAgIHRoaXMuX2RlbHRhIC09IHZhbHVlO1xuICAgICAgICAgICAgaWYgKCF0aGlzLmlzQWN0aXZlKCkpIHtcbiAgICAgICAgICAgICAgICB0aGlzLl9zdGFydChlKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfVxuXG4gICAgICAgIGUucHJldmVudERlZmF1bHQoKTtcbiAgICB9XG5cbiAgICBfb25UaW1lb3V0KGluaXRpYWxFdmVudDogYW55KSB7XG4gICAgICAgIHRoaXMuX3R5cGUgPSAnd2hlZWwnO1xuICAgICAgICB0aGlzLl9kZWx0YSAtPSB0aGlzLl9sYXN0VmFsdWU7XG4gICAgICAgIGlmICghdGhpcy5pc0FjdGl2ZSgpKSB7XG4gICAgICAgICAgICB0aGlzLl9zdGFydChpbml0aWFsRXZlbnQpO1xuICAgICAgICB9XG4gICAgfVxuXG4gICAgX3N0YXJ0KGU6IGFueSkge1xuICAgICAgICBpZiAoIXRoaXMuX2RlbHRhKSByZXR1cm47XG5cbiAgICAgICAgaWYgKHRoaXMuX2ZyYW1lSWQpIHtcbiAgICAgICAgICAgIHRoaXMuX21hcC5fY2FuY2VsUmVuZGVyRnJhbWUodGhpcy5fZnJhbWVJZCk7XG4gICAgICAgICAgICB0aGlzLl9mcmFtZUlkID0gbnVsbDtcbiAgICAgICAgfVxuXG4gICAgICAgIHRoaXMuX2FjdGl2ZSA9IHRydWU7XG4gICAgICAgIHRoaXMuX21hcC5maXJlKG5ldyBFdmVudCgnbW92ZXN0YXJ0Jywge29yaWdpbmFsRXZlbnQ6IGV9KSk7XG4gICAgICAgIHRoaXMuX21hcC5maXJlKG5ldyBFdmVudCgnem9vbXN0YXJ0Jywge29yaWdpbmFsRXZlbnQ6IGV9KSk7XG4gICAgICAgIGlmICh0aGlzLl9maW5pc2hUaW1lb3V0KSB7XG4gICAgICAgICAgICBjbGVhclRpbWVvdXQodGhpcy5fZmluaXNoVGltZW91dCk7XG4gICAgICAgIH1cblxuICAgICAgICBjb25zdCBwb3MgPSBET00ubW91c2VQb3ModGhpcy5fZWwsIGUpO1xuXG4gICAgICAgIHRoaXMuX2Fyb3VuZCA9IExuZ0xhdC5jb252ZXJ0KHRoaXMuX2Fyb3VuZENlbnRlciA/IHRoaXMuX21hcC5nZXRDZW50ZXIoKSA6IHRoaXMuX21hcC51bnByb2plY3QocG9zKSk7XG4gICAgICAgIHRoaXMuX2Fyb3VuZFBvaW50ID0gdGhpcy5fbWFwLnRyYW5zZm9ybS5sb2NhdGlvblBvaW50KHRoaXMuX2Fyb3VuZCk7XG4gICAgICAgIGlmICghdGhpcy5fZnJhbWVJZCkge1xuICAgICAgICAgICAgdGhpcy5fZnJhbWVJZCA9IHRoaXMuX21hcC5fcmVxdWVzdFJlbmRlckZyYW1lKHRoaXMuX29uU2Nyb2xsRnJhbWUpO1xuICAgICAgICB9XG4gICAgfVxuXG4gICAgX29uU2Nyb2xsRnJhbWUoKSB7XG4gICAgICAgIHRoaXMuX2ZyYW1lSWQgPSBudWxsO1xuXG4gICAgICAgIGlmICghdGhpcy5pc0FjdGl2ZSgpKSByZXR1cm47XG4gICAgICAgIGNvbnN0IHRyID0gdGhpcy5fbWFwLnRyYW5zZm9ybTtcblxuICAgICAgICAvLyBpZiB3ZSd2ZSBoYWQgc2Nyb2xsIGV2ZW50cyBzaW5jZSB0aGUgbGFzdCByZW5kZXIgZnJhbWUsIGNvbnN1bWUgdGhlXG4gICAgICAgIC8vIGFjY3VtdWxhdGVkIGRlbHRhLCBhbmQgdXBkYXRlIHRoZSB0YXJnZXQgem9vbSBsZXZlbCBhY2NvcmRpbmdseVxuICAgICAgICBpZiAodGhpcy5fZGVsdGEgIT09IDApIHtcbiAgICAgICAgICAgIC8vIEZvciB0cmFja3BhZCBldmVudHMgYW5kIHNpbmdsZSBtb3VzZSB3aGVlbCB0aWNrcywgdXNlIHRoZSBkZWZhdWx0IHpvb20gcmF0ZVxuICAgICAgICAgICAgY29uc3Qgem9vbVJhdGUgPSAodGhpcy5fdHlwZSA9PT0gJ3doZWVsJyAmJiBNYXRoLmFicyh0aGlzLl9kZWx0YSkgPiB3aGVlbFpvb21EZWx0YSkgPyB3aGVlbFpvb21SYXRlIDogZGVmYXVsdFpvb21SYXRlO1xuICAgICAgICAgICAgLy8gU2NhbGUgYnkgc2lnbW9pZCBvZiBzY3JvbGwgd2hlZWwgZGVsdGEuXG4gICAgICAgICAgICBsZXQgc2NhbGUgPSBtYXhTY2FsZVBlckZyYW1lIC8gKDEgKyBNYXRoLmV4cCgtTWF0aC5hYnModGhpcy5fZGVsdGEgKiB6b29tUmF0ZSkpKTtcblxuICAgICAgICAgICAgaWYgKHRoaXMuX2RlbHRhIDwgMCAmJiBzY2FsZSAhPT0gMCkge1xuICAgICAgICAgICAgICAgIHNjYWxlID0gMSAvIHNjYWxlO1xuICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICBjb25zdCBmcm9tU2NhbGUgPSB0eXBlb2YgdGhpcy5fdGFyZ2V0Wm9vbSA9PT0gJ251bWJlcicgPyB0ci56b29tU2NhbGUodGhpcy5fdGFyZ2V0Wm9vbSkgOiB0ci5zY2FsZTtcbiAgICAgICAgICAgIHRoaXMuX3RhcmdldFpvb20gPSBNYXRoLm1pbih0ci5tYXhab29tLCBNYXRoLm1heCh0ci5taW5ab29tLCB0ci5zY2FsZVpvb20oZnJvbVNjYWxlICogc2NhbGUpKSk7XG5cbiAgICAgICAgICAgIC8vIGlmIHRoaXMgaXMgYSBtb3VzZSB3aGVlbCwgcmVmcmVzaCB0aGUgc3RhcnRpbmcgem9vbSBhbmQgZWFzaW5nXG4gICAgICAgICAgICAvLyBmdW5jdGlvbiB3ZSdyZSB1c2luZyB0byBzbW9vdGggb3V0IHRoZSB6b29taW5nIGJldHdlZW4gd2hlZWxcbiAgICAgICAgICAgIC8vIGV2ZW50c1xuICAgICAgICAgICAgaWYgKHRoaXMuX3R5cGUgPT09ICd3aGVlbCcpIHtcbiAgICAgICAgICAgICAgICB0aGlzLl9zdGFydFpvb20gPSB0ci56b29tO1xuICAgICAgICAgICAgICAgIHRoaXMuX2Vhc2luZyA9IHRoaXMuX3Ntb290aE91dEVhc2luZygyMDApO1xuICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICB0aGlzLl9kZWx0YSA9IDA7XG4gICAgICAgIH1cblxuICAgICAgICBjb25zdCB0YXJnZXRab29tID0gdHlwZW9mIHRoaXMuX3RhcmdldFpvb20gPT09ICdudW1iZXInID9cbiAgICAgICAgICAgIHRoaXMuX3RhcmdldFpvb20gOiB0ci56b29tO1xuICAgICAgICBjb25zdCBzdGFydFpvb20gPSB0aGlzLl9zdGFydFpvb207XG4gICAgICAgIGNvbnN0IGVhc2luZyA9IHRoaXMuX2Vhc2luZztcblxuICAgICAgICBsZXQgZmluaXNoZWQgPSBmYWxzZTtcbiAgICAgICAgaWYgKHRoaXMuX3R5cGUgPT09ICd3aGVlbCcgJiYgc3RhcnRab29tICYmIGVhc2luZykge1xuICAgICAgICAgICAgYXNzZXJ0KGVhc2luZyAmJiB0eXBlb2Ygc3RhcnRab29tID09PSAnbnVtYmVyJyk7XG5cbiAgICAgICAgICAgIGNvbnN0IHQgPSBNYXRoLm1pbigoYnJvd3Nlci5ub3coKSAtIHRoaXMuX2xhc3RXaGVlbEV2ZW50VGltZSkgLyAyMDAsIDEpO1xuICAgICAgICAgICAgY29uc3QgayA9IGVhc2luZyh0KTtcbiAgICAgICAgICAgIHRyLnpvb20gPSBpbnRlcnBvbGF0ZShzdGFydFpvb20sIHRhcmdldFpvb20sIGspO1xuICAgICAgICAgICAgaWYgKHQgPCAxKSB7XG4gICAgICAgICAgICAgICAgaWYgKCF0aGlzLl9mcmFtZUlkKSB7XG4gICAgICAgICAgICAgICAgICAgIHRoaXMuX2ZyYW1lSWQgPSB0aGlzLl9tYXAuX3JlcXVlc3RSZW5kZXJGcmFtZSh0aGlzLl9vblNjcm9sbEZyYW1lKTtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgICAgIGZpbmlzaGVkID0gdHJ1ZTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgIHRyLnpvb20gPSB0YXJnZXRab29tO1xuICAgICAgICAgICAgZmluaXNoZWQgPSB0cnVlO1xuICAgICAgICB9XG5cbiAgICAgICAgdHIuc2V0TG9jYXRpb25BdFBvaW50KHRoaXMuX2Fyb3VuZCwgdGhpcy5fYXJvdW5kUG9pbnQpO1xuXG4gICAgICAgIHRoaXMuX21hcC5maXJlKG5ldyBFdmVudCgnbW92ZScsIHtvcmlnaW5hbEV2ZW50OiB0aGlzLl9sYXN0V2hlZWxFdmVudH0pKTtcbiAgICAgICAgdGhpcy5fbWFwLmZpcmUobmV3IEV2ZW50KCd6b29tJywge29yaWdpbmFsRXZlbnQ6IHRoaXMuX2xhc3RXaGVlbEV2ZW50fSkpO1xuXG4gICAgICAgIGlmIChmaW5pc2hlZCkge1xuICAgICAgICAgICAgdGhpcy5fYWN0aXZlID0gZmFsc2U7XG4gICAgICAgICAgICB0aGlzLl9maW5pc2hUaW1lb3V0ID0gc2V0VGltZW91dCgoKSA9PiB7XG4gICAgICAgICAgICAgICAgdGhpcy5fbWFwLmZpcmUobmV3IEV2ZW50KCd6b29tZW5kJywge29yaWdpbmFsRXZlbnQ6IHRoaXMuX2xhc3RXaGVlbEV2ZW50fSkpO1xuICAgICAgICAgICAgICAgIHRoaXMuX21hcC5maXJlKG5ldyBFdmVudCgnbW92ZWVuZCcsIHtvcmlnaW5hbEV2ZW50OiB0aGlzLl9sYXN0V2hlZWxFdmVudH0pKTtcbiAgICAgICAgICAgICAgICBkZWxldGUgdGhpcy5fdGFyZ2V0Wm9vbTtcbiAgICAgICAgICAgIH0sIDIwMCk7XG4gICAgICAgIH1cbiAgICB9XG5cbiAgICBfc21vb3RoT3V0RWFzaW5nKGR1cmF0aW9uOiBudW1iZXIpIHtcbiAgICAgICAgbGV0IGVhc2luZyA9IF9lYXNlO1xuXG4gICAgICAgIGlmICh0aGlzLl9wcmV2RWFzZSkge1xuICAgICAgICAgICAgY29uc3QgZWFzZSA9IHRoaXMuX3ByZXZFYXNlLFxuICAgICAgICAgICAgICAgIHQgPSAoYnJvd3Nlci5ub3coKSAtIGVhc2Uuc3RhcnQpIC8gZWFzZS5kdXJhdGlvbixcbiAgICAgICAgICAgICAgICBzcGVlZCA9IGVhc2UuZWFzaW5nKHQgKyAwLjAxKSAtIGVhc2UuZWFzaW5nKHQpLFxuXG4gICAgICAgICAgICAgICAgLy8gUXVpY2sgaGFjayB0byBtYWtlIG5ldyBiZXppZXIgdGhhdCBpcyBjb250aW51b3VzIHdpdGggbGFzdFxuICAgICAgICAgICAgICAgIHggPSAwLjI3IC8gTWF0aC5zcXJ0KHNwZWVkICogc3BlZWQgKyAwLjAwMDEpICogMC4wMSxcbiAgICAgICAgICAgICAgICB5ID0gTWF0aC5zcXJ0KDAuMjcgKiAwLjI3IC0geCAqIHgpO1xuXG4gICAgICAgICAgICBlYXNpbmcgPSBiZXppZXIoeCwgeSwgMC4yNSwgMSk7XG4gICAgICAgIH1cblxuICAgICAgICB0aGlzLl9wcmV2RWFzZSA9IHtcbiAgICAgICAgICAgIHN0YXJ0OiBicm93c2VyLm5vdygpLFxuICAgICAgICAgICAgZHVyYXRpb246IGR1cmF0aW9uLFxuICAgICAgICAgICAgZWFzaW5nOiBlYXNpbmdcbiAgICAgICAgfTtcblxuICAgICAgICByZXR1cm4gZWFzaW5nO1xuICAgIH1cbn1cblxuZXhwb3J0IGRlZmF1bHQgU2Nyb2xsWm9vbUhhbmRsZXI7XG4iLCIvLyBAZmxvd1xuXG5pbXBvcnQgRE9NIGZyb20gJy4uLy4uL3V0aWwvZG9tJztcblxuaW1wb3J0IHsgYmluZEFsbCB9IGZyb20gJy4uLy4uL3V0aWwvdXRpbCc7XG5pbXBvcnQgd2luZG93IGZyb20gJy4uLy4uL3V0aWwvd2luZG93JztcbmltcG9ydCB7IEV2ZW50IH0gZnJvbSAnLi4vLi4vdXRpbC9ldmVudGVkJztcblxuaW1wb3J0IHR5cGUgTWFwIGZyb20gJy4uL21hcCc7XG5cbi8qKlxuICogVGhlIGBCb3hab29tSGFuZGxlcmAgYWxsb3dzIHRoZSB1c2VyIHRvIHpvb20gdGhlIG1hcCB0byBmaXQgd2l0aGluIGEgYm91bmRpbmcgYm94LlxuICogVGhlIGJvdW5kaW5nIGJveCBpcyBkZWZpbmVkIGJ5IGNsaWNraW5nIGFuZCBob2xkaW5nIGBzaGlmdGAgd2hpbGUgZHJhZ2dpbmcgdGhlIGN1cnNvci5cbiAqL1xuY2xhc3MgQm94Wm9vbUhhbmRsZXIge1xuICAgIF9tYXA6IE1hcDtcbiAgICBfZWw6IEhUTUxFbGVtZW50O1xuICAgIF9jb250YWluZXI6IEhUTUxFbGVtZW50O1xuICAgIF9lbmFibGVkOiBib29sZWFuO1xuICAgIF9hY3RpdmU6IGJvb2xlYW47XG4gICAgX3N0YXJ0UG9zOiBQb2ludDtcbiAgICBfbGFzdFBvczogUG9pbnQ7XG4gICAgX2JveDogSFRNTEVsZW1lbnQ7XG4gICAgX2NsaWNrVG9sZXJhbmNlOiBudW1iZXI7XG5cbiAgICAvKipcbiAgICAgKiBAcHJpdmF0ZVxuICAgICAqL1xuICAgIGNvbnN0cnVjdG9yKG1hcDogTWFwLCBvcHRpb25zOiB7XG4gICAgICAgIGNsaWNrVG9sZXJhbmNlPzogbnVtYmVyXG4gICAgfSkge1xuICAgICAgICB0aGlzLl9tYXAgPSBtYXA7XG4gICAgICAgIHRoaXMuX2VsID0gbWFwLmdldENhbnZhc0NvbnRhaW5lcigpO1xuICAgICAgICB0aGlzLl9jb250YWluZXIgPSBtYXAuZ2V0Q29udGFpbmVyKCk7XG4gICAgICAgIHRoaXMuX2NsaWNrVG9sZXJhbmNlID0gb3B0aW9ucy5jbGlja1RvbGVyYW5jZSB8fCAxO1xuXG4gICAgICAgIGJpbmRBbGwoW1xuICAgICAgICAgICAgJ19vbk1vdXNlTW92ZScsXG4gICAgICAgICAgICAnX29uTW91c2VVcCcsXG4gICAgICAgICAgICAnX29uS2V5RG93bidcbiAgICAgICAgXSwgdGhpcyk7XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogUmV0dXJucyBhIEJvb2xlYW4gaW5kaWNhdGluZyB3aGV0aGVyIHRoZSBcImJveCB6b29tXCIgaW50ZXJhY3Rpb24gaXMgZW5hYmxlZC5cbiAgICAgKlxuICAgICAqIEByZXR1cm5zIHtib29sZWFufSBgdHJ1ZWAgaWYgdGhlIFwiYm94IHpvb21cIiBpbnRlcmFjdGlvbiBpcyBlbmFibGVkLlxuICAgICAqL1xuICAgIGlzRW5hYmxlZCgpIHtcbiAgICAgICAgcmV0dXJuICEhdGhpcy5fZW5hYmxlZDtcbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBSZXR1cm5zIGEgQm9vbGVhbiBpbmRpY2F0aW5nIHdoZXRoZXIgdGhlIFwiYm94IHpvb21cIiBpbnRlcmFjdGlvbiBpcyBhY3RpdmUsIGkuZS4gY3VycmVudGx5IGJlaW5nIHVzZWQuXG4gICAgICpcbiAgICAgKiBAcmV0dXJucyB7Ym9vbGVhbn0gYHRydWVgIGlmIHRoZSBcImJveCB6b29tXCIgaW50ZXJhY3Rpb24gaXMgYWN0aXZlLlxuICAgICAqL1xuICAgIGlzQWN0aXZlKCkge1xuICAgICAgICByZXR1cm4gISF0aGlzLl9hY3RpdmU7XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogRW5hYmxlcyB0aGUgXCJib3ggem9vbVwiIGludGVyYWN0aW9uLlxuICAgICAqXG4gICAgICogQGV4YW1wbGVcbiAgICAgKiAgIG1hcC5ib3hab29tLmVuYWJsZSgpO1xuICAgICAqL1xuICAgIGVuYWJsZSgpIHtcbiAgICAgICAgaWYgKHRoaXMuaXNFbmFibGVkKCkpIHJldHVybjtcbiAgICAgICAgdGhpcy5fZW5hYmxlZCA9IHRydWU7XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogRGlzYWJsZXMgdGhlIFwiYm94IHpvb21cIiBpbnRlcmFjdGlvbi5cbiAgICAgKlxuICAgICAqIEBleGFtcGxlXG4gICAgICogICBtYXAuYm94Wm9vbS5kaXNhYmxlKCk7XG4gICAgICovXG4gICAgZGlzYWJsZSgpIHtcbiAgICAgICAgaWYgKCF0aGlzLmlzRW5hYmxlZCgpKSByZXR1cm47XG4gICAgICAgIHRoaXMuX2VuYWJsZWQgPSBmYWxzZTtcbiAgICB9XG5cbiAgICBvbk1vdXNlRG93bihlOiBNb3VzZUV2ZW50KSB7XG4gICAgICAgIGlmICghdGhpcy5pc0VuYWJsZWQoKSkgcmV0dXJuO1xuICAgICAgICBpZiAoIShlLnNoaWZ0S2V5ICYmIGUuYnV0dG9uID09PSAwKSkgcmV0dXJuO1xuXG4gICAgICAgIHdpbmRvdy5kb2N1bWVudC5hZGRFdmVudExpc3RlbmVyKCdtb3VzZW1vdmUnLCB0aGlzLl9vbk1vdXNlTW92ZSwgZmFsc2UpO1xuICAgICAgICB3aW5kb3cuZG9jdW1lbnQuYWRkRXZlbnRMaXN0ZW5lcigna2V5ZG93bicsIHRoaXMuX29uS2V5RG93biwgZmFsc2UpO1xuICAgICAgICB3aW5kb3cuZG9jdW1lbnQuYWRkRXZlbnRMaXN0ZW5lcignbW91c2V1cCcsIHRoaXMuX29uTW91c2VVcCwgZmFsc2UpO1xuXG4gICAgICAgIERPTS5kaXNhYmxlRHJhZygpO1xuICAgICAgICB0aGlzLl9zdGFydFBvcyA9IHRoaXMuX2xhc3RQb3MgPSBET00ubW91c2VQb3ModGhpcy5fZWwsIGUpO1xuICAgICAgICB0aGlzLl9hY3RpdmUgPSB0cnVlO1xuICAgIH1cblxuICAgIF9vbk1vdXNlTW92ZShlOiBNb3VzZUV2ZW50KSB7XG4gICAgICAgIGNvbnN0IHBvcyA9IERPTS5tb3VzZVBvcyh0aGlzLl9lbCwgZSk7XG5cbiAgICAgICAgaWYgKHRoaXMuX2xhc3RQb3MuZXF1YWxzKHBvcykgfHwgKCF0aGlzLl9ib3ggJiYgcG9zLmRpc3QodGhpcy5fc3RhcnRQb3MpIDwgdGhpcy5fY2xpY2tUb2xlcmFuY2UpKSB7XG4gICAgICAgICAgICByZXR1cm47XG4gICAgICAgIH1cblxuICAgICAgICBjb25zdCBwMCA9IHRoaXMuX3N0YXJ0UG9zO1xuICAgICAgICB0aGlzLl9sYXN0UG9zID0gcG9zO1xuXG4gICAgICAgIGlmICghdGhpcy5fYm94KSB7XG4gICAgICAgICAgICB0aGlzLl9ib3ggPSBET00uY3JlYXRlKCdkaXYnLCAnbWFwYm94Z2wtYm94em9vbScsIHRoaXMuX2NvbnRhaW5lcik7XG4gICAgICAgICAgICB0aGlzLl9jb250YWluZXIuY2xhc3NMaXN0LmFkZCgnbWFwYm94Z2wtY3Jvc3NoYWlyJyk7XG4gICAgICAgICAgICB0aGlzLl9maXJlRXZlbnQoJ2JveHpvb21zdGFydCcsIGUpO1xuICAgICAgICB9XG5cbiAgICAgICAgY29uc3QgbWluWCA9IE1hdGgubWluKHAwLngsIHBvcy54KSxcbiAgICAgICAgICAgIG1heFggPSBNYXRoLm1heChwMC54LCBwb3MueCksXG4gICAgICAgICAgICBtaW5ZID0gTWF0aC5taW4ocDAueSwgcG9zLnkpLFxuICAgICAgICAgICAgbWF4WSA9IE1hdGgubWF4KHAwLnksIHBvcy55KTtcblxuICAgICAgICBET00uc2V0VHJhbnNmb3JtKHRoaXMuX2JveCwgYHRyYW5zbGF0ZSgke21pblh9cHgsJHttaW5ZfXB4KWApO1xuXG4gICAgICAgIHRoaXMuX2JveC5zdHlsZS53aWR0aCA9IGAke21heFggLSBtaW5YfXB4YDtcbiAgICAgICAgdGhpcy5fYm94LnN0eWxlLmhlaWdodCA9IGAke21heFkgLSBtaW5ZfXB4YDtcbiAgICB9XG5cbiAgICBfb25Nb3VzZVVwKGU6IE1vdXNlRXZlbnQpIHtcbiAgICAgICAgaWYgKGUuYnV0dG9uICE9PSAwKSByZXR1cm47XG5cbiAgICAgICAgY29uc3QgcDAgPSB0aGlzLl9zdGFydFBvcyxcbiAgICAgICAgICAgIHAxID0gRE9NLm1vdXNlUG9zKHRoaXMuX2VsLCBlKTtcblxuICAgICAgICB0aGlzLl9maW5pc2goKTtcblxuICAgICAgICBET00uc3VwcHJlc3NDbGljaygpO1xuXG4gICAgICAgIGlmIChwMC54ID09PSBwMS54ICYmIHAwLnkgPT09IHAxLnkpIHtcbiAgICAgICAgICAgIHRoaXMuX2ZpcmVFdmVudCgnYm94em9vbWNhbmNlbCcsIGUpO1xuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgdGhpcy5fbWFwXG4gICAgICAgICAgICAgICAgLmZpdFNjcmVlbkNvb3JkaW5hdGVzKHAwLCBwMSwgdGhpcy5fbWFwLmdldEJlYXJpbmcoKSwge2xpbmVhcjogdHJ1ZX0pXG4gICAgICAgICAgICAgICAgLmZpcmUobmV3IEV2ZW50KCdib3h6b29tZW5kJywgeyBvcmlnaW5hbEV2ZW50OiBlfSkpO1xuICAgICAgICB9XG4gICAgfVxuXG4gICAgX29uS2V5RG93bihlOiBLZXlib2FyZEV2ZW50KSB7XG4gICAgICAgIGlmIChlLmtleUNvZGUgPT09IDI3KSB7XG4gICAgICAgICAgICB0aGlzLl9maW5pc2goKTtcbiAgICAgICAgICAgIHRoaXMuX2ZpcmVFdmVudCgnYm94em9vbWNhbmNlbCcsIGUpO1xuICAgICAgICB9XG4gICAgfVxuXG4gICAgX2ZpbmlzaCgpIHtcbiAgICAgICAgdGhpcy5fYWN0aXZlID0gZmFsc2U7XG5cbiAgICAgICAgd2luZG93LmRvY3VtZW50LnJlbW92ZUV2ZW50TGlzdGVuZXIoJ21vdXNlbW92ZScsIHRoaXMuX29uTW91c2VNb3ZlLCBmYWxzZSk7XG4gICAgICAgIHdpbmRvdy5kb2N1bWVudC5yZW1vdmVFdmVudExpc3RlbmVyKCdrZXlkb3duJywgdGhpcy5fb25LZXlEb3duLCBmYWxzZSk7XG4gICAgICAgIHdpbmRvdy5kb2N1bWVudC5yZW1vdmVFdmVudExpc3RlbmVyKCdtb3VzZXVwJywgdGhpcy5fb25Nb3VzZVVwLCBmYWxzZSk7XG5cbiAgICAgICAgdGhpcy5fY29udGFpbmVyLmNsYXNzTGlzdC5yZW1vdmUoJ21hcGJveGdsLWNyb3NzaGFpcicpO1xuXG4gICAgICAgIGlmICh0aGlzLl9ib3gpIHtcbiAgICAgICAgICAgIERPTS5yZW1vdmUodGhpcy5fYm94KTtcbiAgICAgICAgICAgIHRoaXMuX2JveCA9IChudWxsOiBhbnkpO1xuICAgICAgICB9XG5cbiAgICAgICAgRE9NLmVuYWJsZURyYWcoKTtcblxuICAgICAgICBkZWxldGUgdGhpcy5fc3RhcnRQb3M7XG4gICAgICAgIGRlbGV0ZSB0aGlzLl9sYXN0UG9zO1xuICAgIH1cblxuICAgIF9maXJlRXZlbnQodHlwZTogc3RyaW5nLCBlOiAqKSB7XG4gICAgICAgIHJldHVybiB0aGlzLl9tYXAuZmlyZShuZXcgRXZlbnQodHlwZSwgeyBvcmlnaW5hbEV2ZW50OiBlIH0pKTtcbiAgICB9XG59XG5cbmV4cG9ydCBkZWZhdWx0IEJveFpvb21IYW5kbGVyO1xuIiwiLy8gQGZsb3dcblxuaW1wb3J0IERPTSBmcm9tICcuLi8uLi91dGlsL2RvbSc7XG5cbmltcG9ydCB7IGJlemllciwgYmluZEFsbCB9IGZyb20gJy4uLy4uL3V0aWwvdXRpbCc7XG5pbXBvcnQgd2luZG93IGZyb20gJy4uLy4uL3V0aWwvd2luZG93JztcbmltcG9ydCBicm93c2VyIGZyb20gJy4uLy4uL3V0aWwvYnJvd3Nlcic7XG5pbXBvcnQgeyBFdmVudCB9IGZyb20gJy4uLy4uL3V0aWwvZXZlbnRlZCc7XG5pbXBvcnQgYXNzZXJ0IGZyb20gJ2Fzc2VydCc7XG5cbmltcG9ydCB0eXBlIE1hcCBmcm9tICcuLi9tYXAnO1xuaW1wb3J0IHR5cGUgUG9pbnQgZnJvbSAnQG1hcGJveC9wb2ludC1nZW9tZXRyeSc7XG5pbXBvcnQgdHlwZSB7VGFza0lEfSBmcm9tICcuLi8uLi91dGlsL3Rhc2tfcXVldWUnO1xuXG5jb25zdCBpbmVydGlhTGluZWFyaXR5ID0gMC4yNSxcbiAgICBpbmVydGlhRWFzaW5nID0gYmV6aWVyKDAsIDAsIGluZXJ0aWFMaW5lYXJpdHksIDEpLFxuICAgIGluZXJ0aWFNYXhTcGVlZCA9IDE4MCwgLy8gZGVnL3NcbiAgICBpbmVydGlhRGVjZWxlcmF0aW9uID0gNzIwOyAvLyBkZWcvc14yXG5cbi8qKlxuICogVGhlIGBEcmFnUm90YXRlSGFuZGxlcmAgYWxsb3dzIHRoZSB1c2VyIHRvIHJvdGF0ZSB0aGUgbWFwIGJ5IGNsaWNraW5nIGFuZFxuICogZHJhZ2dpbmcgdGhlIGN1cnNvciB3aGlsZSBob2xkaW5nIHRoZSByaWdodCBtb3VzZSBidXR0b24gb3IgYGN0cmxgIGtleS5cbiAqL1xuY2xhc3MgRHJhZ1JvdGF0ZUhhbmRsZXIge1xuICAgIF9tYXA6IE1hcDtcbiAgICBfZWw6IEhUTUxFbGVtZW50O1xuICAgIF9zdGF0ZTogJ2Rpc2FibGVkJyB8ICdlbmFibGVkJyB8ICdwZW5kaW5nJyB8ICdhY3RpdmUnO1xuICAgIF9idXR0b246ICdyaWdodCcgfCAnbGVmdCc7XG4gICAgX2V2ZW50QnV0dG9uOiBudW1iZXI7XG4gICAgX2JlYXJpbmdTbmFwOiBudW1iZXI7XG4gICAgX3BpdGNoV2l0aFJvdGF0ZTogYm9vbGVhbjtcblxuICAgIF9zdGFydFBvczogUG9pbnQ7XG4gICAgX2xhc3RQb3M6IFBvaW50O1xuICAgIF9sYXN0TW92ZUV2ZW50OiBNb3VzZUV2ZW50O1xuICAgIF9pbmVydGlhOiBBcnJheTxbbnVtYmVyLCBudW1iZXJdPjtcbiAgICBfY2VudGVyOiBQb2ludDtcbiAgICBfZnJhbWVJZDogP1Rhc2tJRDtcblxuICAgIC8qKlxuICAgICAqIEBwYXJhbSB7TWFwfSBtYXAgVGhlIE1hcGJveCBHTCBKUyBtYXAgdG8gYWRkIHRoZSBoYW5kbGVyIHRvLlxuICAgICAqIEBwYXJhbSB7T2JqZWN0fSBbb3B0aW9uc11cbiAgICAgKiBAcGFyYW0ge251bWJlcn0gW29wdGlvbnMuYmVhcmluZ1NuYXBdIFRoZSB0aHJlc2hvbGQsIG1lYXN1cmVkIGluIGRlZ3JlZXMsIHRoYXQgZGV0ZXJtaW5lcyB3aGVuIHRoZSBtYXAnc1xuICAgICAqICAgYmVhcmluZyB3aWxsIHNuYXAgdG8gbm9ydGguXG4gICAgICogQHBhcmFtIHtib29sfSBbb3B0aW9ucy5waXRjaFdpdGhSb3RhdGU9dHJ1ZV0gQ29udHJvbCB0aGUgbWFwIHBpdGNoIGluIGFkZGl0aW9uIHRvIHRoZSBiZWFyaW5nXG4gICAgICogQHByaXZhdGVcbiAgICAgKi9cbiAgICBjb25zdHJ1Y3RvcihtYXA6IE1hcCwgb3B0aW9uczoge1xuICAgICAgICBidXR0b24/OiAncmlnaHQnIHwgJ2xlZnQnLFxuICAgICAgICBlbGVtZW50PzogSFRNTEVsZW1lbnQsXG4gICAgICAgIGJlYXJpbmdTbmFwPzogbnVtYmVyLFxuICAgICAgICBwaXRjaFdpdGhSb3RhdGU/OiBib29sZWFuXG4gICAgfSkge1xuICAgICAgICB0aGlzLl9tYXAgPSBtYXA7XG4gICAgICAgIHRoaXMuX2VsID0gb3B0aW9ucy5lbGVtZW50IHx8IG1hcC5nZXRDYW52YXNDb250YWluZXIoKTtcbiAgICAgICAgdGhpcy5fc3RhdGUgPSAnZGlzYWJsZWQnO1xuICAgICAgICB0aGlzLl9idXR0b24gPSBvcHRpb25zLmJ1dHRvbiB8fCAncmlnaHQnO1xuICAgICAgICB0aGlzLl9iZWFyaW5nU25hcCA9IG9wdGlvbnMuYmVhcmluZ1NuYXAgfHwgMDtcbiAgICAgICAgdGhpcy5fcGl0Y2hXaXRoUm90YXRlID0gb3B0aW9ucy5waXRjaFdpdGhSb3RhdGUgIT09IGZhbHNlO1xuXG4gICAgICAgIGJpbmRBbGwoW1xuICAgICAgICAgICAgJ29uTW91c2VEb3duJyxcbiAgICAgICAgICAgICdfb25Nb3VzZU1vdmUnLFxuICAgICAgICAgICAgJ19vbk1vdXNlVXAnLFxuICAgICAgICAgICAgJ19vbkJsdXInLFxuICAgICAgICAgICAgJ19vbkRyYWdGcmFtZSdcbiAgICAgICAgXSwgdGhpcyk7XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogUmV0dXJucyBhIEJvb2xlYW4gaW5kaWNhdGluZyB3aGV0aGVyIHRoZSBcImRyYWcgdG8gcm90YXRlXCIgaW50ZXJhY3Rpb24gaXMgZW5hYmxlZC5cbiAgICAgKlxuICAgICAqIEByZXR1cm5zIHtib29sZWFufSBgdHJ1ZWAgaWYgdGhlIFwiZHJhZyB0byByb3RhdGVcIiBpbnRlcmFjdGlvbiBpcyBlbmFibGVkLlxuICAgICAqL1xuICAgIGlzRW5hYmxlZCgpIHtcbiAgICAgICAgcmV0dXJuIHRoaXMuX3N0YXRlICE9PSAnZGlzYWJsZWQnO1xuICAgIH1cblxuICAgIC8qKlxuICAgICAqIFJldHVybnMgYSBCb29sZWFuIGluZGljYXRpbmcgd2hldGhlciB0aGUgXCJkcmFnIHRvIHJvdGF0ZVwiIGludGVyYWN0aW9uIGlzIGFjdGl2ZSwgaS5lLiBjdXJyZW50bHkgYmVpbmcgdXNlZC5cbiAgICAgKlxuICAgICAqIEByZXR1cm5zIHtib29sZWFufSBgdHJ1ZWAgaWYgdGhlIFwiZHJhZyB0byByb3RhdGVcIiBpbnRlcmFjdGlvbiBpcyBhY3RpdmUuXG4gICAgICovXG4gICAgaXNBY3RpdmUoKSB7XG4gICAgICAgIHJldHVybiB0aGlzLl9zdGF0ZSA9PT0gJ2FjdGl2ZSc7XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogRW5hYmxlcyB0aGUgXCJkcmFnIHRvIHJvdGF0ZVwiIGludGVyYWN0aW9uLlxuICAgICAqXG4gICAgICogQGV4YW1wbGVcbiAgICAgKiBtYXAuZHJhZ1JvdGF0ZS5lbmFibGUoKTtcbiAgICAgKi9cbiAgICBlbmFibGUoKSB7XG4gICAgICAgIGlmICh0aGlzLmlzRW5hYmxlZCgpKSByZXR1cm47XG4gICAgICAgIHRoaXMuX3N0YXRlID0gJ2VuYWJsZWQnO1xuICAgIH1cblxuICAgIC8qKlxuICAgICAqIERpc2FibGVzIHRoZSBcImRyYWcgdG8gcm90YXRlXCIgaW50ZXJhY3Rpb24uXG4gICAgICpcbiAgICAgKiBAZXhhbXBsZVxuICAgICAqIG1hcC5kcmFnUm90YXRlLmRpc2FibGUoKTtcbiAgICAgKi9cbiAgICBkaXNhYmxlKCkge1xuICAgICAgICBpZiAoIXRoaXMuaXNFbmFibGVkKCkpIHJldHVybjtcbiAgICAgICAgc3dpdGNoICh0aGlzLl9zdGF0ZSkge1xuICAgICAgICBjYXNlICdhY3RpdmUnOlxuICAgICAgICAgICAgdGhpcy5fc3RhdGUgPSAnZGlzYWJsZWQnO1xuICAgICAgICAgICAgdGhpcy5fdW5iaW5kKCk7XG4gICAgICAgICAgICB0aGlzLl9kZWFjdGl2YXRlKCk7XG4gICAgICAgICAgICB0aGlzLl9maXJlRXZlbnQoJ3JvdGF0ZWVuZCcpO1xuICAgICAgICAgICAgaWYgKHRoaXMuX3BpdGNoV2l0aFJvdGF0ZSkge1xuICAgICAgICAgICAgICAgIHRoaXMuX2ZpcmVFdmVudCgncGl0Y2hlbmQnKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIHRoaXMuX2ZpcmVFdmVudCgnbW92ZWVuZCcpO1xuICAgICAgICAgICAgYnJlYWs7XG4gICAgICAgIGNhc2UgJ3BlbmRpbmcnOlxuICAgICAgICAgICAgdGhpcy5fc3RhdGUgPSAnZGlzYWJsZWQnO1xuICAgICAgICAgICAgdGhpcy5fdW5iaW5kKCk7XG4gICAgICAgICAgICBicmVhaztcbiAgICAgICAgZGVmYXVsdDpcbiAgICAgICAgICAgIHRoaXMuX3N0YXRlID0gJ2Rpc2FibGVkJztcbiAgICAgICAgICAgIGJyZWFrO1xuICAgICAgICB9XG4gICAgfVxuXG4gICAgb25Nb3VzZURvd24oZTogTW91c2VFdmVudCkge1xuICAgICAgICBpZiAodGhpcy5fc3RhdGUgIT09ICdlbmFibGVkJykgcmV0dXJuO1xuXG4gICAgICAgIGlmICh0aGlzLl9idXR0b24gPT09ICdyaWdodCcpIHtcbiAgICAgICAgICAgIHRoaXMuX2V2ZW50QnV0dG9uID0gRE9NLm1vdXNlQnV0dG9uKGUpO1xuICAgICAgICAgICAgaWYgKHRoaXMuX2V2ZW50QnV0dG9uICE9PSAoZS5jdHJsS2V5ID8gMCA6IDIpKSByZXR1cm47XG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICBpZiAoZS5jdHJsS2V5IHx8IERPTS5tb3VzZUJ1dHRvbihlKSAhPT0gMCkgcmV0dXJuO1xuICAgICAgICAgICAgdGhpcy5fZXZlbnRCdXR0b24gPSAwO1xuICAgICAgICB9XG5cbiAgICAgICAgRE9NLmRpc2FibGVEcmFnKCk7XG5cbiAgICAgICAgLy8gQmluZCB3aW5kb3ctbGV2ZWwgZXZlbnQgbGlzdGVuZXJzIGZvciBtb3ZlIGFuZCB1cC9lbmQgZXZlbnRzLiBJbiB0aGUgYWJzZW5jZSBvZlxuICAgICAgICAvLyB0aGUgcG9pbnRlciBjYXB0dXJlIEFQSSwgd2hpY2ggaXMgbm90IHN1cHBvcnRlZCBieSBhbGwgbmVjZXNzYXJ5IHBsYXRmb3JtcyxcbiAgICAgICAgLy8gd2luZG93LWxldmVsIGV2ZW50IGxpc3RlbmVycyBnaXZlIHVzIHRoZSBiZXN0IHNob3QgYXQgY2FwdHVyaW5nIGV2ZW50cyB0aGF0XG4gICAgICAgIC8vIGZhbGwgb3V0c2lkZSB0aGUgbWFwIGNhbnZhcyBlbGVtZW50LiBVc2UgYHtjYXB0dXJlOiB0cnVlfWAgZm9yIHRoZSBtb3ZlIGV2ZW50XG4gICAgICAgIC8vIHRvIHByZXZlbnQgbWFwIG1vdmUgZXZlbnRzIGZyb20gYmVpbmcgZmlyZWQgZHVyaW5nIGEgZHJhZy5cbiAgICAgICAgd2luZG93LmRvY3VtZW50LmFkZEV2ZW50TGlzdGVuZXIoJ21vdXNlbW92ZScsIHRoaXMuX29uTW91c2VNb3ZlLCB7Y2FwdHVyZTogdHJ1ZX0pO1xuICAgICAgICB3aW5kb3cuZG9jdW1lbnQuYWRkRXZlbnRMaXN0ZW5lcignbW91c2V1cCcsIHRoaXMuX29uTW91c2VVcCk7XG5cbiAgICAgICAgLy8gRGVhY3RpdmF0ZSB3aGVuIHRoZSB3aW5kb3cgbG9zZXMgZm9jdXMuIE90aGVyd2lzZSBpZiBhIG1vdXNldXAgb2NjdXJzIHdoZW4gdGhlIHdpbmRvd1xuICAgICAgICAvLyBpc24ndCBpbiBmb2N1cywgZHJhZ2dpbmcgd2lsbCBjb250aW51ZSBldmVuIHRob3VnaCB0aGUgbW91c2UgaXMgbm8gbG9uZ2VyIHByZXNzZWQuXG4gICAgICAgIHdpbmRvdy5hZGRFdmVudExpc3RlbmVyKCdibHVyJywgdGhpcy5fb25CbHVyKTtcblxuICAgICAgICB0aGlzLl9zdGF0ZSA9ICdwZW5kaW5nJztcbiAgICAgICAgdGhpcy5faW5lcnRpYSA9IFtbYnJvd3Nlci5ub3coKSwgdGhpcy5fbWFwLmdldEJlYXJpbmcoKV1dO1xuICAgICAgICB0aGlzLl9zdGFydFBvcyA9IHRoaXMuX2xhc3RQb3MgPSBET00ubW91c2VQb3ModGhpcy5fZWwsIGUpO1xuICAgICAgICB0aGlzLl9jZW50ZXIgPSB0aGlzLl9tYXAudHJhbnNmb3JtLmNlbnRlclBvaW50OyAgLy8gQ2VudGVyIG9mIHJvdGF0aW9uXG5cbiAgICAgICAgZS5wcmV2ZW50RGVmYXVsdCgpO1xuICAgIH1cblxuICAgIF9vbk1vdXNlTW92ZShlOiBNb3VzZUV2ZW50KSB7XG4gICAgICAgIGNvbnN0IHBvcyA9IERPTS5tb3VzZVBvcyh0aGlzLl9lbCwgZSk7XG4gICAgICAgIGlmICh0aGlzLl9sYXN0UG9zLmVxdWFscyhwb3MpKSB7XG4gICAgICAgICAgICByZXR1cm47XG4gICAgICAgIH1cblxuICAgICAgICB0aGlzLl9sYXN0TW92ZUV2ZW50ID0gZTtcbiAgICAgICAgdGhpcy5fbGFzdFBvcyA9IHBvcztcblxuICAgICAgICBpZiAodGhpcy5fc3RhdGUgPT09ICdwZW5kaW5nJykge1xuICAgICAgICAgICAgdGhpcy5fc3RhdGUgPSAnYWN0aXZlJztcbiAgICAgICAgICAgIHRoaXMuX2ZpcmVFdmVudCgncm90YXRlc3RhcnQnLCBlKTtcbiAgICAgICAgICAgIHRoaXMuX2ZpcmVFdmVudCgnbW92ZXN0YXJ0JywgZSk7XG4gICAgICAgICAgICBpZiAodGhpcy5fcGl0Y2hXaXRoUm90YXRlKSB7XG4gICAgICAgICAgICAgICAgdGhpcy5fZmlyZUV2ZW50KCdwaXRjaHN0YXJ0JywgZSk7XG4gICAgICAgICAgICB9XG4gICAgICAgIH1cblxuICAgICAgICBpZiAoIXRoaXMuX2ZyYW1lSWQpIHtcbiAgICAgICAgICAgIHRoaXMuX2ZyYW1lSWQgPSB0aGlzLl9tYXAuX3JlcXVlc3RSZW5kZXJGcmFtZSh0aGlzLl9vbkRyYWdGcmFtZSk7XG4gICAgICAgIH1cbiAgICB9XG5cbiAgICBfb25EcmFnRnJhbWUoKSB7XG4gICAgICAgIHRoaXMuX2ZyYW1lSWQgPSBudWxsO1xuXG4gICAgICAgIGNvbnN0IGUgPSB0aGlzLl9sYXN0TW92ZUV2ZW50O1xuICAgICAgICBpZiAoIWUpIHJldHVybjtcbiAgICAgICAgY29uc3QgdHIgPSB0aGlzLl9tYXAudHJhbnNmb3JtO1xuXG4gICAgICAgIGNvbnN0IHAxID0gdGhpcy5fc3RhcnRQb3MsXG4gICAgICAgICAgICBwMiA9IHRoaXMuX2xhc3RQb3MsXG4gICAgICAgICAgICBiZWFyaW5nRGlmZiA9IChwMS54IC0gcDIueCkgKiAwLjgsXG4gICAgICAgICAgICBwaXRjaERpZmYgPSAocDEueSAtIHAyLnkpICogLTAuNSxcbiAgICAgICAgICAgIGJlYXJpbmcgPSB0ci5iZWFyaW5nIC0gYmVhcmluZ0RpZmYsXG4gICAgICAgICAgICBwaXRjaCA9IHRyLnBpdGNoIC0gcGl0Y2hEaWZmLFxuICAgICAgICAgICAgaW5lcnRpYSA9IHRoaXMuX2luZXJ0aWEsXG4gICAgICAgICAgICBsYXN0ID0gaW5lcnRpYVtpbmVydGlhLmxlbmd0aCAtIDFdO1xuXG4gICAgICAgIHRoaXMuX2RyYWluSW5lcnRpYUJ1ZmZlcigpO1xuICAgICAgICBpbmVydGlhLnB1c2goW2Jyb3dzZXIubm93KCksIHRoaXMuX21hcC5fbm9ybWFsaXplQmVhcmluZyhiZWFyaW5nLCBsYXN0WzFdKV0pO1xuXG4gICAgICAgIHRyLmJlYXJpbmcgPSBiZWFyaW5nO1xuICAgICAgICBpZiAodGhpcy5fcGl0Y2hXaXRoUm90YXRlKSB7XG4gICAgICAgICAgICB0aGlzLl9maXJlRXZlbnQoJ3BpdGNoJywgZSk7XG4gICAgICAgICAgICB0ci5waXRjaCA9IHBpdGNoO1xuICAgICAgICB9XG5cbiAgICAgICAgdGhpcy5fZmlyZUV2ZW50KCdyb3RhdGUnLCBlKTtcbiAgICAgICAgdGhpcy5fZmlyZUV2ZW50KCdtb3ZlJywgZSk7XG5cbiAgICAgICAgZGVsZXRlIHRoaXMuX2xhc3RNb3ZlRXZlbnQ7XG4gICAgICAgIHRoaXMuX3N0YXJ0UG9zID0gdGhpcy5fbGFzdFBvcztcbiAgICB9XG5cbiAgICBfb25Nb3VzZVVwKGU6IE1vdXNlRXZlbnQpIHtcbiAgICAgICAgaWYgKERPTS5tb3VzZUJ1dHRvbihlKSAhPT0gdGhpcy5fZXZlbnRCdXR0b24pIHJldHVybjtcbiAgICAgICAgc3dpdGNoICh0aGlzLl9zdGF0ZSkge1xuICAgICAgICBjYXNlICdhY3RpdmUnOlxuICAgICAgICAgICAgdGhpcy5fc3RhdGUgPSAnZW5hYmxlZCc7XG4gICAgICAgICAgICBET00uc3VwcHJlc3NDbGljaygpO1xuICAgICAgICAgICAgdGhpcy5fdW5iaW5kKCk7XG4gICAgICAgICAgICB0aGlzLl9kZWFjdGl2YXRlKCk7XG4gICAgICAgICAgICB0aGlzLl9pbmVydGlhbFJvdGF0ZShlKTtcbiAgICAgICAgICAgIGJyZWFrO1xuICAgICAgICBjYXNlICdwZW5kaW5nJzpcbiAgICAgICAgICAgIHRoaXMuX3N0YXRlID0gJ2VuYWJsZWQnO1xuICAgICAgICAgICAgdGhpcy5fdW5iaW5kKCk7XG4gICAgICAgICAgICBicmVhaztcbiAgICAgICAgZGVmYXVsdDpcbiAgICAgICAgICAgIGFzc2VydChmYWxzZSk7XG4gICAgICAgICAgICBicmVhaztcbiAgICAgICAgfVxuICAgIH1cblxuICAgIF9vbkJsdXIoZTogRm9jdXNFdmVudCkge1xuICAgICAgICBzd2l0Y2ggKHRoaXMuX3N0YXRlKSB7XG4gICAgICAgIGNhc2UgJ2FjdGl2ZSc6XG4gICAgICAgICAgICB0aGlzLl9zdGF0ZSA9ICdlbmFibGVkJztcbiAgICAgICAgICAgIHRoaXMuX3VuYmluZCgpO1xuICAgICAgICAgICAgdGhpcy5fZGVhY3RpdmF0ZSgpO1xuICAgICAgICAgICAgdGhpcy5fZmlyZUV2ZW50KCdyb3RhdGVlbmQnLCBlKTtcbiAgICAgICAgICAgIGlmICh0aGlzLl9waXRjaFdpdGhSb3RhdGUpIHtcbiAgICAgICAgICAgICAgICB0aGlzLl9maXJlRXZlbnQoJ3BpdGNoZW5kJywgZSk7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICB0aGlzLl9maXJlRXZlbnQoJ21vdmVlbmQnLCBlKTtcbiAgICAgICAgICAgIGJyZWFrO1xuICAgICAgICBjYXNlICdwZW5kaW5nJzpcbiAgICAgICAgICAgIHRoaXMuX3N0YXRlID0gJ2VuYWJsZWQnO1xuICAgICAgICAgICAgdGhpcy5fdW5iaW5kKCk7XG4gICAgICAgICAgICBicmVhaztcbiAgICAgICAgZGVmYXVsdDpcbiAgICAgICAgICAgIGFzc2VydChmYWxzZSk7XG4gICAgICAgICAgICBicmVhaztcbiAgICAgICAgfVxuICAgIH1cblxuICAgIF91bmJpbmQoKSB7XG4gICAgICAgIHdpbmRvdy5kb2N1bWVudC5yZW1vdmVFdmVudExpc3RlbmVyKCdtb3VzZW1vdmUnLCB0aGlzLl9vbk1vdXNlTW92ZSwge2NhcHR1cmU6IHRydWV9KTtcbiAgICAgICAgd2luZG93LmRvY3VtZW50LnJlbW92ZUV2ZW50TGlzdGVuZXIoJ21vdXNldXAnLCB0aGlzLl9vbk1vdXNlVXApO1xuICAgICAgICB3aW5kb3cucmVtb3ZlRXZlbnRMaXN0ZW5lcignYmx1cicsIHRoaXMuX29uQmx1cik7XG4gICAgICAgIERPTS5lbmFibGVEcmFnKCk7XG4gICAgfVxuXG4gICAgX2RlYWN0aXZhdGUoKSB7XG4gICAgICAgIGlmICh0aGlzLl9mcmFtZUlkKSB7XG4gICAgICAgICAgICB0aGlzLl9tYXAuX2NhbmNlbFJlbmRlckZyYW1lKHRoaXMuX2ZyYW1lSWQpO1xuICAgICAgICAgICAgdGhpcy5fZnJhbWVJZCA9IG51bGw7XG4gICAgICAgIH1cbiAgICAgICAgZGVsZXRlIHRoaXMuX2xhc3RNb3ZlRXZlbnQ7XG4gICAgICAgIGRlbGV0ZSB0aGlzLl9zdGFydFBvcztcbiAgICAgICAgZGVsZXRlIHRoaXMuX2xhc3RQb3M7XG4gICAgfVxuXG4gICAgX2luZXJ0aWFsUm90YXRlKGU6IE1vdXNlRXZlbnQpIHtcbiAgICAgICAgdGhpcy5fZmlyZUV2ZW50KCdyb3RhdGVlbmQnLCBlKTtcbiAgICAgICAgdGhpcy5fZHJhaW5JbmVydGlhQnVmZmVyKCk7XG5cbiAgICAgICAgY29uc3QgbWFwID0gdGhpcy5fbWFwLFxuICAgICAgICAgICAgbWFwQmVhcmluZyA9IG1hcC5nZXRCZWFyaW5nKCksXG4gICAgICAgICAgICBpbmVydGlhID0gdGhpcy5faW5lcnRpYTtcblxuICAgICAgICBjb25zdCBmaW5pc2ggPSAoKSA9PiB7XG4gICAgICAgICAgICBpZiAoTWF0aC5hYnMobWFwQmVhcmluZykgPCB0aGlzLl9iZWFyaW5nU25hcCkge1xuICAgICAgICAgICAgICAgIG1hcC5yZXNldE5vcnRoKHtub01vdmVTdGFydDogdHJ1ZX0sIHsgb3JpZ2luYWxFdmVudDogZSB9KTtcbiAgICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICAgICAgdGhpcy5fZmlyZUV2ZW50KCdtb3ZlZW5kJywgZSk7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBpZiAodGhpcy5fcGl0Y2hXaXRoUm90YXRlKSB0aGlzLl9maXJlRXZlbnQoJ3BpdGNoZW5kJywgZSk7XG4gICAgICAgIH07XG5cbiAgICAgICAgaWYgKGluZXJ0aWEubGVuZ3RoIDwgMikge1xuICAgICAgICAgICAgZmluaXNoKCk7XG4gICAgICAgICAgICByZXR1cm47XG4gICAgICAgIH1cblxuICAgICAgICBjb25zdCBmaXJzdCA9IGluZXJ0aWFbMF0sXG4gICAgICAgICAgICBsYXN0ID0gaW5lcnRpYVtpbmVydGlhLmxlbmd0aCAtIDFdLFxuICAgICAgICAgICAgcHJldmlvdXMgPSBpbmVydGlhW2luZXJ0aWEubGVuZ3RoIC0gMl07XG4gICAgICAgIGxldCBiZWFyaW5nID0gbWFwLl9ub3JtYWxpemVCZWFyaW5nKG1hcEJlYXJpbmcsIHByZXZpb3VzWzFdKTtcbiAgICAgICAgY29uc3QgZmxpbmdEaWZmID0gbGFzdFsxXSAtIGZpcnN0WzFdLFxuICAgICAgICAgICAgc2lnbiA9IGZsaW5nRGlmZiA8IDAgPyAtMSA6IDEsXG4gICAgICAgICAgICBmbGluZ0R1cmF0aW9uID0gKGxhc3RbMF0gLSBmaXJzdFswXSkgLyAxMDAwO1xuXG4gICAgICAgIGlmIChmbGluZ0RpZmYgPT09IDAgfHwgZmxpbmdEdXJhdGlvbiA9PT0gMCkge1xuICAgICAgICAgICAgZmluaXNoKCk7XG4gICAgICAgICAgICByZXR1cm47XG4gICAgICAgIH1cblxuICAgICAgICBsZXQgc3BlZWQgPSBNYXRoLmFicyhmbGluZ0RpZmYgKiAoaW5lcnRpYUxpbmVhcml0eSAvIGZsaW5nRHVyYXRpb24pKTsgIC8vIGRlZy9zXG4gICAgICAgIGlmIChzcGVlZCA+IGluZXJ0aWFNYXhTcGVlZCkge1xuICAgICAgICAgICAgc3BlZWQgPSBpbmVydGlhTWF4U3BlZWQ7XG4gICAgICAgIH1cblxuICAgICAgICBjb25zdCBkdXJhdGlvbiA9IHNwZWVkIC8gKGluZXJ0aWFEZWNlbGVyYXRpb24gKiBpbmVydGlhTGluZWFyaXR5KSxcbiAgICAgICAgICAgIG9mZnNldCA9IHNpZ24gKiBzcGVlZCAqIChkdXJhdGlvbiAvIDIpO1xuXG4gICAgICAgIGJlYXJpbmcgKz0gb2Zmc2V0O1xuXG4gICAgICAgIGlmIChNYXRoLmFicyhtYXAuX25vcm1hbGl6ZUJlYXJpbmcoYmVhcmluZywgMCkpIDwgdGhpcy5fYmVhcmluZ1NuYXApIHtcbiAgICAgICAgICAgIGJlYXJpbmcgPSBtYXAuX25vcm1hbGl6ZUJlYXJpbmcoMCwgYmVhcmluZyk7XG4gICAgICAgIH1cblxuICAgICAgICBtYXAucm90YXRlVG8oYmVhcmluZywge1xuICAgICAgICAgICAgZHVyYXRpb246IGR1cmF0aW9uICogMTAwMCxcbiAgICAgICAgICAgIGVhc2luZzogaW5lcnRpYUVhc2luZyxcbiAgICAgICAgICAgIG5vTW92ZVN0YXJ0OiB0cnVlXG4gICAgICAgIH0sIHsgb3JpZ2luYWxFdmVudDogZSB9KTtcbiAgICB9XG5cbiAgICBfZmlyZUV2ZW50KHR5cGU6IHN0cmluZywgZTogKikge1xuICAgICAgICByZXR1cm4gdGhpcy5fbWFwLmZpcmUobmV3IEV2ZW50KHR5cGUsIGUgPyB7IG9yaWdpbmFsRXZlbnQ6IGUgfSA6IHt9KSk7XG4gICAgfVxuXG4gICAgX2RyYWluSW5lcnRpYUJ1ZmZlcigpIHtcbiAgICAgICAgY29uc3QgaW5lcnRpYSA9IHRoaXMuX2luZXJ0aWEsXG4gICAgICAgICAgICBub3cgPSBicm93c2VyLm5vdygpLFxuICAgICAgICAgICAgY3V0b2ZmID0gMTYwOyAgIC8vbXNlY1xuXG4gICAgICAgIHdoaWxlIChpbmVydGlhLmxlbmd0aCA+IDAgJiYgbm93IC0gaW5lcnRpYVswXVswXSA+IGN1dG9mZilcbiAgICAgICAgICAgIGluZXJ0aWEuc2hpZnQoKTtcbiAgICB9XG59XG5cbmV4cG9ydCBkZWZhdWx0IERyYWdSb3RhdGVIYW5kbGVyO1xuIiwiLy8gQGZsb3dcblxuaW1wb3J0IERPTSBmcm9tICcuLi8uLi91dGlsL2RvbSc7XG5pbXBvcnQgeyBiZXppZXIsIGJpbmRBbGwgfSBmcm9tICcuLi8uLi91dGlsL3V0aWwnO1xuaW1wb3J0IHdpbmRvdyBmcm9tICcuLi8uLi91dGlsL3dpbmRvdyc7XG5pbXBvcnQgYnJvd3NlciBmcm9tICcuLi8uLi91dGlsL2Jyb3dzZXInO1xuaW1wb3J0IHsgRXZlbnQgfSBmcm9tICcuLi8uLi91dGlsL2V2ZW50ZWQnO1xuaW1wb3J0IGFzc2VydCBmcm9tICdhc3NlcnQnO1xuXG5pbXBvcnQgdHlwZSBNYXAgZnJvbSAnLi4vbWFwJztcbmltcG9ydCB0eXBlIFBvaW50IGZyb20gJ0BtYXBib3gvcG9pbnQtZ2VvbWV0cnknO1xuaW1wb3J0IHR5cGUge1Rhc2tJRH0gZnJvbSAnLi4vLi4vdXRpbC90YXNrX3F1ZXVlJztcblxuY29uc3QgaW5lcnRpYUxpbmVhcml0eSA9IDAuMyxcbiAgICBpbmVydGlhRWFzaW5nID0gYmV6aWVyKDAsIDAsIGluZXJ0aWFMaW5lYXJpdHksIDEpLFxuICAgIGluZXJ0aWFNYXhTcGVlZCA9IDE0MDAsIC8vIHB4L3NcbiAgICBpbmVydGlhRGVjZWxlcmF0aW9uID0gMjUwMDsgLy8gcHgvc14yXG5cbi8qKlxuICogVGhlIGBEcmFnUGFuSGFuZGxlcmAgYWxsb3dzIHRoZSB1c2VyIHRvIHBhbiB0aGUgbWFwIGJ5IGNsaWNraW5nIGFuZCBkcmFnZ2luZ1xuICogdGhlIGN1cnNvci5cbiAqL1xuY2xhc3MgRHJhZ1BhbkhhbmRsZXIge1xuICAgIF9tYXA6IE1hcDtcbiAgICBfZWw6IEhUTUxFbGVtZW50O1xuICAgIF9zdGF0ZTogJ2Rpc2FibGVkJyB8ICdlbmFibGVkJyB8ICdwZW5kaW5nJyB8ICdhY3RpdmUnO1xuICAgIF9zdGFydFBvczogUG9pbnQ7XG4gICAgX21vdXNlRG93blBvczogUG9pbnQ7XG4gICAgX2xhc3RQb3M6IFBvaW50O1xuICAgIF9sYXN0TW92ZUV2ZW50OiBNb3VzZUV2ZW50IHwgVG91Y2hFdmVudCB8IHZvaWQ7XG4gICAgX2luZXJ0aWE6IEFycmF5PFtudW1iZXIsIFBvaW50XT47XG4gICAgX2ZyYW1lSWQ6ID9UYXNrSUQ7XG4gICAgX2NsaWNrVG9sZXJhbmNlOiBudW1iZXI7XG5cbiAgICAvKipcbiAgICAgKiBAcHJpdmF0ZVxuICAgICAqL1xuICAgIGNvbnN0cnVjdG9yKG1hcDogTWFwLCBvcHRpb25zOiB7XG4gICAgICAgIGNsaWNrVG9sZXJhbmNlPzogbnVtYmVyXG4gICAgfSkge1xuICAgICAgICB0aGlzLl9tYXAgPSBtYXA7XG4gICAgICAgIHRoaXMuX2VsID0gbWFwLmdldENhbnZhc0NvbnRhaW5lcigpO1xuICAgICAgICB0aGlzLl9zdGF0ZSA9ICdkaXNhYmxlZCc7XG4gICAgICAgIHRoaXMuX2NsaWNrVG9sZXJhbmNlID0gb3B0aW9ucy5jbGlja1RvbGVyYW5jZSB8fCAxO1xuXG4gICAgICAgIGJpbmRBbGwoW1xuICAgICAgICAgICAgJ19vbk1vdmUnLFxuICAgICAgICAgICAgJ19vbk1vdXNlVXAnLFxuICAgICAgICAgICAgJ19vblRvdWNoRW5kJyxcbiAgICAgICAgICAgICdfb25CbHVyJyxcbiAgICAgICAgICAgICdfb25EcmFnRnJhbWUnXG4gICAgICAgIF0sIHRoaXMpO1xuICAgIH1cblxuICAgIC8qKlxuICAgICAqIFJldHVybnMgYSBCb29sZWFuIGluZGljYXRpbmcgd2hldGhlciB0aGUgXCJkcmFnIHRvIHBhblwiIGludGVyYWN0aW9uIGlzIGVuYWJsZWQuXG4gICAgICpcbiAgICAgKiBAcmV0dXJucyB7Ym9vbGVhbn0gYHRydWVgIGlmIHRoZSBcImRyYWcgdG8gcGFuXCIgaW50ZXJhY3Rpb24gaXMgZW5hYmxlZC5cbiAgICAgKi9cbiAgICBpc0VuYWJsZWQoKSB7XG4gICAgICAgIHJldHVybiB0aGlzLl9zdGF0ZSAhPT0gJ2Rpc2FibGVkJztcbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBSZXR1cm5zIGEgQm9vbGVhbiBpbmRpY2F0aW5nIHdoZXRoZXIgdGhlIFwiZHJhZyB0byBwYW5cIiBpbnRlcmFjdGlvbiBpcyBhY3RpdmUsIGkuZS4gY3VycmVudGx5IGJlaW5nIHVzZWQuXG4gICAgICpcbiAgICAgKiBAcmV0dXJucyB7Ym9vbGVhbn0gYHRydWVgIGlmIHRoZSBcImRyYWcgdG8gcGFuXCIgaW50ZXJhY3Rpb24gaXMgYWN0aXZlLlxuICAgICAqL1xuICAgIGlzQWN0aXZlKCkge1xuICAgICAgICByZXR1cm4gdGhpcy5fc3RhdGUgPT09ICdhY3RpdmUnO1xuICAgIH1cblxuICAgIC8qKlxuICAgICAqIEVuYWJsZXMgdGhlIFwiZHJhZyB0byBwYW5cIiBpbnRlcmFjdGlvbi5cbiAgICAgKlxuICAgICAqIEBleGFtcGxlXG4gICAgICogbWFwLmRyYWdQYW4uZW5hYmxlKCk7XG4gICAgICovXG4gICAgZW5hYmxlKCkge1xuICAgICAgICBpZiAodGhpcy5pc0VuYWJsZWQoKSkgcmV0dXJuO1xuICAgICAgICB0aGlzLl9lbC5jbGFzc0xpc3QuYWRkKCdtYXBib3hnbC10b3VjaC1kcmFnLXBhbicpO1xuICAgICAgICB0aGlzLl9zdGF0ZSA9ICdlbmFibGVkJztcbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBEaXNhYmxlcyB0aGUgXCJkcmFnIHRvIHBhblwiIGludGVyYWN0aW9uLlxuICAgICAqXG4gICAgICogQGV4YW1wbGVcbiAgICAgKiBtYXAuZHJhZ1Bhbi5kaXNhYmxlKCk7XG4gICAgICovXG4gICAgZGlzYWJsZSgpIHtcbiAgICAgICAgaWYgKCF0aGlzLmlzRW5hYmxlZCgpKSByZXR1cm47XG4gICAgICAgIHRoaXMuX2VsLmNsYXNzTGlzdC5yZW1vdmUoJ21hcGJveGdsLXRvdWNoLWRyYWctcGFuJyk7XG4gICAgICAgIHN3aXRjaCAodGhpcy5fc3RhdGUpIHtcbiAgICAgICAgY2FzZSAnYWN0aXZlJzpcbiAgICAgICAgICAgIHRoaXMuX3N0YXRlID0gJ2Rpc2FibGVkJztcbiAgICAgICAgICAgIHRoaXMuX3VuYmluZCgpO1xuICAgICAgICAgICAgdGhpcy5fZGVhY3RpdmF0ZSgpO1xuICAgICAgICAgICAgdGhpcy5fZmlyZUV2ZW50KCdkcmFnZW5kJyk7XG4gICAgICAgICAgICB0aGlzLl9maXJlRXZlbnQoJ21vdmVlbmQnKTtcbiAgICAgICAgICAgIGJyZWFrO1xuICAgICAgICBjYXNlICdwZW5kaW5nJzpcbiAgICAgICAgICAgIHRoaXMuX3N0YXRlID0gJ2Rpc2FibGVkJztcbiAgICAgICAgICAgIHRoaXMuX3VuYmluZCgpO1xuICAgICAgICAgICAgYnJlYWs7XG4gICAgICAgIGRlZmF1bHQ6XG4gICAgICAgICAgICB0aGlzLl9zdGF0ZSA9ICdkaXNhYmxlZCc7XG4gICAgICAgICAgICBicmVhaztcbiAgICAgICAgfVxuICAgIH1cblxuICAgIG9uTW91c2VEb3duKGU6IE1vdXNlRXZlbnQpIHtcbiAgICAgICAgaWYgKHRoaXMuX3N0YXRlICE9PSAnZW5hYmxlZCcpIHJldHVybjtcbiAgICAgICAgaWYgKGUuY3RybEtleSB8fCBET00ubW91c2VCdXR0b24oZSkgIT09IDApIHJldHVybjtcblxuICAgICAgICAvLyBCaW5kIHdpbmRvdy1sZXZlbCBldmVudCBsaXN0ZW5lcnMgZm9yIG1vdXNlbW92ZS91cCBldmVudHMuIEluIHRoZSBhYnNlbmNlIG9mXG4gICAgICAgIC8vIHRoZSBwb2ludGVyIGNhcHR1cmUgQVBJLCB3aGljaCBpcyBub3Qgc3VwcG9ydGVkIGJ5IGFsbCBuZWNlc3NhcnkgcGxhdGZvcm1zLFxuICAgICAgICAvLyB3aW5kb3ctbGV2ZWwgZXZlbnQgbGlzdGVuZXJzIGdpdmUgdXMgdGhlIGJlc3Qgc2hvdCBhdCBjYXB0dXJpbmcgZXZlbnRzIHRoYXRcbiAgICAgICAgLy8gZmFsbCBvdXRzaWRlIHRoZSBtYXAgY2FudmFzIGVsZW1lbnQuIFVzZSBge2NhcHR1cmU6IHRydWV9YCBmb3IgdGhlIG1vdmUgZXZlbnRcbiAgICAgICAgLy8gdG8gcHJldmVudCBtYXAgbW92ZSBldmVudHMgZnJvbSBiZWluZyBmaXJlZCBkdXJpbmcgYSBkcmFnLlxuICAgICAgICBET00uYWRkRXZlbnRMaXN0ZW5lcih3aW5kb3cuZG9jdW1lbnQsICdtb3VzZW1vdmUnLCB0aGlzLl9vbk1vdmUsIHtjYXB0dXJlOiB0cnVlfSk7XG4gICAgICAgIERPTS5hZGRFdmVudExpc3RlbmVyKHdpbmRvdy5kb2N1bWVudCwgJ21vdXNldXAnLCB0aGlzLl9vbk1vdXNlVXApO1xuXG4gICAgICAgIHRoaXMuX3N0YXJ0KGUpO1xuICAgIH1cblxuICAgIG9uVG91Y2hTdGFydChlOiBUb3VjaEV2ZW50KSB7XG4gICAgICAgIGlmICh0aGlzLl9zdGF0ZSAhPT0gJ2VuYWJsZWQnKSByZXR1cm47XG4gICAgICAgIGlmIChlLnRvdWNoZXMubGVuZ3RoID4gMSkgcmV0dXJuO1xuXG4gICAgICAgIC8vIEJpbmQgd2luZG93LWxldmVsIGV2ZW50IGxpc3RlbmVycyBmb3IgdG91Y2htb3ZlL2VuZCBldmVudHMuIEluIHRoZSBhYnNlbmNlIG9mXG4gICAgICAgIC8vIHRoZSBwb2ludGVyIGNhcHR1cmUgQVBJLCB3aGljaCBpcyBub3Qgc3VwcG9ydGVkIGJ5IGFsbCBuZWNlc3NhcnkgcGxhdGZvcm1zLFxuICAgICAgICAvLyB3aW5kb3ctbGV2ZWwgZXZlbnQgbGlzdGVuZXJzIGdpdmUgdXMgdGhlIGJlc3Qgc2hvdCBhdCBjYXB0dXJpbmcgZXZlbnRzIHRoYXRcbiAgICAgICAgLy8gZmFsbCBvdXRzaWRlIHRoZSBtYXAgY2FudmFzIGVsZW1lbnQuIFVzZSBge2NhcHR1cmU6IHRydWV9YCBmb3IgdGhlIG1vdmUgZXZlbnRcbiAgICAgICAgLy8gdG8gcHJldmVudCBtYXAgbW92ZSBldmVudHMgZnJvbSBiZWluZyBmaXJlZCBkdXJpbmcgYSBkcmFnLlxuICAgICAgICBET00uYWRkRXZlbnRMaXN0ZW5lcih3aW5kb3cuZG9jdW1lbnQsICd0b3VjaG1vdmUnLCB0aGlzLl9vbk1vdmUsIHtjYXB0dXJlOiB0cnVlLCBwYXNzaXZlOiBmYWxzZX0pO1xuICAgICAgICBET00uYWRkRXZlbnRMaXN0ZW5lcih3aW5kb3cuZG9jdW1lbnQsICd0b3VjaGVuZCcsIHRoaXMuX29uVG91Y2hFbmQpO1xuXG4gICAgICAgIHRoaXMuX3N0YXJ0KGUpO1xuICAgIH1cblxuICAgIF9zdGFydChlOiBNb3VzZUV2ZW50IHwgVG91Y2hFdmVudCkge1xuICAgICAgICAvLyBEZWFjdGl2YXRlIHdoZW4gdGhlIHdpbmRvdyBsb3NlcyBmb2N1cy4gT3RoZXJ3aXNlIGlmIGEgbW91c2V1cCBvY2N1cnMgd2hlbiB0aGUgd2luZG93XG4gICAgICAgIC8vIGlzbid0IGluIGZvY3VzLCBkcmFnZ2luZyB3aWxsIGNvbnRpbnVlIGV2ZW4gdGhvdWdoIHRoZSBtb3VzZSBpcyBubyBsb25nZXIgcHJlc3NlZC5cbiAgICAgICAgd2luZG93LmFkZEV2ZW50TGlzdGVuZXIoJ2JsdXInLCB0aGlzLl9vbkJsdXIpO1xuXG4gICAgICAgIHRoaXMuX3N0YXRlID0gJ3BlbmRpbmcnO1xuICAgICAgICB0aGlzLl9zdGFydFBvcyA9IHRoaXMuX21vdXNlRG93blBvcyA9IHRoaXMuX2xhc3RQb3MgPSBET00ubW91c2VQb3ModGhpcy5fZWwsIGUpO1xuICAgICAgICB0aGlzLl9pbmVydGlhID0gW1ticm93c2VyLm5vdygpLCB0aGlzLl9zdGFydFBvc11dO1xuICAgIH1cblxuICAgIF9vbk1vdmUoZTogTW91c2VFdmVudCB8IFRvdWNoRXZlbnQpIHtcbiAgICAgICAgZS5wcmV2ZW50RGVmYXVsdCgpO1xuXG4gICAgICAgIGNvbnN0IHBvcyA9IERPTS5tb3VzZVBvcyh0aGlzLl9lbCwgZSk7XG4gICAgICAgIGlmICh0aGlzLl9sYXN0UG9zLmVxdWFscyhwb3MpIHx8ICh0aGlzLl9zdGF0ZSA9PT0gJ3BlbmRpbmcnICYmIHBvcy5kaXN0KHRoaXMuX21vdXNlRG93blBvcykgPCB0aGlzLl9jbGlja1RvbGVyYW5jZSkpIHtcbiAgICAgICAgICAgIHJldHVybjtcbiAgICAgICAgfVxuXG4gICAgICAgIHRoaXMuX2xhc3RNb3ZlRXZlbnQgPSBlO1xuICAgICAgICB0aGlzLl9sYXN0UG9zID0gcG9zO1xuICAgICAgICB0aGlzLl9kcmFpbkluZXJ0aWFCdWZmZXIoKTtcbiAgICAgICAgdGhpcy5faW5lcnRpYS5wdXNoKFticm93c2VyLm5vdygpLCB0aGlzLl9sYXN0UG9zXSk7XG5cbiAgICAgICAgaWYgKHRoaXMuX3N0YXRlID09PSAncGVuZGluZycpIHtcbiAgICAgICAgICAgIC8vIHdlIHRyZWF0IHRoZSBmaXJzdCBtb3ZlIGV2ZW50IChyYXRoZXIgdGhhbiB0aGUgbW91c2Vkb3duIGV2ZW50KVxuICAgICAgICAgICAgLy8gYXMgdGhlIHN0YXJ0IG9mIHRoZSBkcmFnXG4gICAgICAgICAgICB0aGlzLl9zdGF0ZSA9ICdhY3RpdmUnO1xuICAgICAgICAgICAgdGhpcy5fZmlyZUV2ZW50KCdkcmFnc3RhcnQnLCBlKTtcbiAgICAgICAgICAgIHRoaXMuX2ZpcmVFdmVudCgnbW92ZXN0YXJ0JywgZSk7XG4gICAgICAgIH1cblxuICAgICAgICBpZiAoIXRoaXMuX2ZyYW1lSWQpIHtcbiAgICAgICAgICAgIHRoaXMuX2ZyYW1lSWQgPSB0aGlzLl9tYXAuX3JlcXVlc3RSZW5kZXJGcmFtZSh0aGlzLl9vbkRyYWdGcmFtZSk7XG4gICAgICAgIH1cbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBDYWxsZWQgaW4gZWFjaCByZW5kZXIgZnJhbWUgd2hpbGUgZHJhZ2dpbmcgaXMgaGFwcGVuaW5nLlxuICAgICAqIEBwcml2YXRlXG4gICAgICovXG4gICAgX29uRHJhZ0ZyYW1lKCkge1xuICAgICAgICB0aGlzLl9mcmFtZUlkID0gbnVsbDtcblxuICAgICAgICBjb25zdCBlID0gdGhpcy5fbGFzdE1vdmVFdmVudDtcbiAgICAgICAgaWYgKCFlKSByZXR1cm47XG4gICAgICAgIGNvbnN0IHRyID0gdGhpcy5fbWFwLnRyYW5zZm9ybTtcbiAgICAgICAgdHIuc2V0TG9jYXRpb25BdFBvaW50KHRyLnBvaW50TG9jYXRpb24odGhpcy5fc3RhcnRQb3MpLCB0aGlzLl9sYXN0UG9zKTtcbiAgICAgICAgdGhpcy5fZmlyZUV2ZW50KCdkcmFnJywgZSk7XG4gICAgICAgIHRoaXMuX2ZpcmVFdmVudCgnbW92ZScsIGUpO1xuXG4gICAgICAgIHRoaXMuX3N0YXJ0UG9zID0gdGhpcy5fbGFzdFBvcztcbiAgICAgICAgZGVsZXRlIHRoaXMuX2xhc3RNb3ZlRXZlbnQ7XG4gICAgfVxuXG4gICAgX29uTW91c2VVcChlOiBNb3VzZUV2ZW50KSB7XG4gICAgICAgIGlmIChET00ubW91c2VCdXR0b24oZSkgIT09IDApIHJldHVybjtcbiAgICAgICAgc3dpdGNoICh0aGlzLl9zdGF0ZSkge1xuICAgICAgICBjYXNlICdhY3RpdmUnOlxuICAgICAgICAgICAgdGhpcy5fc3RhdGUgPSAnZW5hYmxlZCc7XG4gICAgICAgICAgICBET00uc3VwcHJlc3NDbGljaygpO1xuICAgICAgICAgICAgdGhpcy5fdW5iaW5kKCk7XG4gICAgICAgICAgICB0aGlzLl9kZWFjdGl2YXRlKCk7XG4gICAgICAgICAgICB0aGlzLl9pbmVydGlhbFBhbihlKTtcbiAgICAgICAgICAgIGJyZWFrO1xuICAgICAgICBjYXNlICdwZW5kaW5nJzpcbiAgICAgICAgICAgIHRoaXMuX3N0YXRlID0gJ2VuYWJsZWQnO1xuICAgICAgICAgICAgdGhpcy5fdW5iaW5kKCk7XG4gICAgICAgICAgICBicmVhaztcbiAgICAgICAgZGVmYXVsdDpcbiAgICAgICAgICAgIGFzc2VydChmYWxzZSk7XG4gICAgICAgICAgICBicmVhaztcbiAgICAgICAgfVxuICAgIH1cblxuICAgIF9vblRvdWNoRW5kKGU6IFRvdWNoRXZlbnQpIHtcbiAgICAgICAgc3dpdGNoICh0aGlzLl9zdGF0ZSkge1xuICAgICAgICBjYXNlICdhY3RpdmUnOlxuICAgICAgICAgICAgdGhpcy5fc3RhdGUgPSAnZW5hYmxlZCc7XG4gICAgICAgICAgICB0aGlzLl91bmJpbmQoKTtcbiAgICAgICAgICAgIHRoaXMuX2RlYWN0aXZhdGUoKTtcbiAgICAgICAgICAgIHRoaXMuX2luZXJ0aWFsUGFuKGUpO1xuICAgICAgICAgICAgYnJlYWs7XG4gICAgICAgIGNhc2UgJ3BlbmRpbmcnOlxuICAgICAgICAgICAgdGhpcy5fc3RhdGUgPSAnZW5hYmxlZCc7XG4gICAgICAgICAgICB0aGlzLl91bmJpbmQoKTtcbiAgICAgICAgICAgIGJyZWFrO1xuICAgICAgICBkZWZhdWx0OlxuICAgICAgICAgICAgYXNzZXJ0KGZhbHNlKTtcbiAgICAgICAgICAgIGJyZWFrO1xuICAgICAgICB9XG4gICAgfVxuXG4gICAgX29uQmx1cihlOiBGb2N1c0V2ZW50KSB7XG4gICAgICAgIHN3aXRjaCAodGhpcy5fc3RhdGUpIHtcbiAgICAgICAgY2FzZSAnYWN0aXZlJzpcbiAgICAgICAgICAgIHRoaXMuX3N0YXRlID0gJ2VuYWJsZWQnO1xuICAgICAgICAgICAgdGhpcy5fdW5iaW5kKCk7XG4gICAgICAgICAgICB0aGlzLl9kZWFjdGl2YXRlKCk7XG4gICAgICAgICAgICB0aGlzLl9maXJlRXZlbnQoJ2RyYWdlbmQnLCBlKTtcbiAgICAgICAgICAgIHRoaXMuX2ZpcmVFdmVudCgnbW92ZWVuZCcsIGUpO1xuICAgICAgICAgICAgYnJlYWs7XG4gICAgICAgIGNhc2UgJ3BlbmRpbmcnOlxuICAgICAgICAgICAgdGhpcy5fc3RhdGUgPSAnZW5hYmxlZCc7XG4gICAgICAgICAgICB0aGlzLl91bmJpbmQoKTtcbiAgICAgICAgICAgIGJyZWFrO1xuICAgICAgICBkZWZhdWx0OlxuICAgICAgICAgICAgYXNzZXJ0KGZhbHNlKTtcbiAgICAgICAgICAgIGJyZWFrO1xuICAgICAgICB9XG4gICAgfVxuXG4gICAgX3VuYmluZCgpIHtcbiAgICAgICAgRE9NLnJlbW92ZUV2ZW50TGlzdGVuZXIod2luZG93LmRvY3VtZW50LCAndG91Y2htb3ZlJywgdGhpcy5fb25Nb3ZlLCB7Y2FwdHVyZTogdHJ1ZSwgcGFzc2l2ZTogZmFsc2V9KTtcbiAgICAgICAgRE9NLnJlbW92ZUV2ZW50TGlzdGVuZXIod2luZG93LmRvY3VtZW50LCAndG91Y2hlbmQnLCB0aGlzLl9vblRvdWNoRW5kKTtcbiAgICAgICAgRE9NLnJlbW92ZUV2ZW50TGlzdGVuZXIod2luZG93LmRvY3VtZW50LCAnbW91c2Vtb3ZlJywgdGhpcy5fb25Nb3ZlLCB7Y2FwdHVyZTogdHJ1ZX0pO1xuICAgICAgICBET00ucmVtb3ZlRXZlbnRMaXN0ZW5lcih3aW5kb3cuZG9jdW1lbnQsICdtb3VzZXVwJywgdGhpcy5fb25Nb3VzZVVwKTtcbiAgICAgICAgRE9NLnJlbW92ZUV2ZW50TGlzdGVuZXIod2luZG93LCAnYmx1cicsIHRoaXMuX29uQmx1cik7XG4gICAgfVxuXG4gICAgX2RlYWN0aXZhdGUoKSB7XG4gICAgICAgIGlmICh0aGlzLl9mcmFtZUlkKSB7XG4gICAgICAgICAgICB0aGlzLl9tYXAuX2NhbmNlbFJlbmRlckZyYW1lKHRoaXMuX2ZyYW1lSWQpO1xuICAgICAgICAgICAgdGhpcy5fZnJhbWVJZCA9IG51bGw7XG4gICAgICAgIH1cbiAgICAgICAgZGVsZXRlIHRoaXMuX2xhc3RNb3ZlRXZlbnQ7XG4gICAgICAgIGRlbGV0ZSB0aGlzLl9zdGFydFBvcztcbiAgICAgICAgZGVsZXRlIHRoaXMuX21vdXNlRG93blBvcztcbiAgICAgICAgZGVsZXRlIHRoaXMuX2xhc3RQb3M7XG4gICAgfVxuXG4gICAgX2luZXJ0aWFsUGFuKGU6IE1vdXNlRXZlbnQgfCBUb3VjaEV2ZW50KSB7XG4gICAgICAgIHRoaXMuX2ZpcmVFdmVudCgnZHJhZ2VuZCcsIGUpO1xuXG4gICAgICAgIHRoaXMuX2RyYWluSW5lcnRpYUJ1ZmZlcigpO1xuICAgICAgICBjb25zdCBpbmVydGlhID0gdGhpcy5faW5lcnRpYTtcbiAgICAgICAgaWYgKGluZXJ0aWEubGVuZ3RoIDwgMikge1xuICAgICAgICAgICAgdGhpcy5fZmlyZUV2ZW50KCdtb3ZlZW5kJywgZSk7XG4gICAgICAgICAgICByZXR1cm47XG4gICAgICAgIH1cblxuICAgICAgICBjb25zdCBsYXN0ID0gaW5lcnRpYVtpbmVydGlhLmxlbmd0aCAtIDFdLFxuICAgICAgICAgICAgZmlyc3QgPSBpbmVydGlhWzBdLFxuICAgICAgICAgICAgZmxpbmdPZmZzZXQgPSBsYXN0WzFdLnN1YihmaXJzdFsxXSksXG4gICAgICAgICAgICBmbGluZ0R1cmF0aW9uID0gKGxhc3RbMF0gLSBmaXJzdFswXSkgLyAxMDAwO1xuXG4gICAgICAgIGlmIChmbGluZ0R1cmF0aW9uID09PSAwIHx8IGxhc3RbMV0uZXF1YWxzKGZpcnN0WzFdKSkge1xuICAgICAgICAgICAgdGhpcy5fZmlyZUV2ZW50KCdtb3ZlZW5kJywgZSk7XG4gICAgICAgICAgICByZXR1cm47XG4gICAgICAgIH1cblxuICAgICAgICAvLyBjYWxjdWxhdGUgcHgvcyB2ZWxvY2l0eSAmIGFkanVzdCBmb3IgaW5jcmVhc2VkIGluaXRpYWwgYW5pbWF0aW9uIHNwZWVkIHdoZW4gZWFzaW5nIG91dFxuICAgICAgICBjb25zdCB2ZWxvY2l0eSA9IGZsaW5nT2Zmc2V0Lm11bHQoaW5lcnRpYUxpbmVhcml0eSAvIGZsaW5nRHVyYXRpb24pO1xuICAgICAgICBsZXQgc3BlZWQgPSB2ZWxvY2l0eS5tYWcoKTsgLy8gcHgvc1xuXG4gICAgICAgIGlmIChzcGVlZCA+IGluZXJ0aWFNYXhTcGVlZCkge1xuICAgICAgICAgICAgc3BlZWQgPSBpbmVydGlhTWF4U3BlZWQ7XG4gICAgICAgICAgICB2ZWxvY2l0eS5fdW5pdCgpLl9tdWx0KHNwZWVkKTtcbiAgICAgICAgfVxuXG4gICAgICAgIGNvbnN0IGR1cmF0aW9uID0gc3BlZWQgLyAoaW5lcnRpYURlY2VsZXJhdGlvbiAqIGluZXJ0aWFMaW5lYXJpdHkpLFxuICAgICAgICAgICAgb2Zmc2V0ID0gdmVsb2NpdHkubXVsdCgtZHVyYXRpb24gLyAyKTtcblxuICAgICAgICB0aGlzLl9tYXAucGFuQnkob2Zmc2V0LCB7XG4gICAgICAgICAgICBkdXJhdGlvbjogZHVyYXRpb24gKiAxMDAwLFxuICAgICAgICAgICAgZWFzaW5nOiBpbmVydGlhRWFzaW5nLFxuICAgICAgICAgICAgbm9Nb3ZlU3RhcnQ6IHRydWVcbiAgICAgICAgfSwgeyBvcmlnaW5hbEV2ZW50OiBlIH0pO1xuICAgIH1cblxuICAgIF9maXJlRXZlbnQodHlwZTogc3RyaW5nLCBlOiAqKSB7XG4gICAgICAgIHJldHVybiB0aGlzLl9tYXAuZmlyZShuZXcgRXZlbnQodHlwZSwgZSA/IHsgb3JpZ2luYWxFdmVudDogZSB9IDoge30pKTtcbiAgICB9XG5cbiAgICBfZHJhaW5JbmVydGlhQnVmZmVyKCkge1xuICAgICAgICBjb25zdCBpbmVydGlhID0gdGhpcy5faW5lcnRpYSxcbiAgICAgICAgICAgIG5vdyA9IGJyb3dzZXIubm93KCksXG4gICAgICAgICAgICBjdXRvZmYgPSAxNjA7ICAgLy8gbXNlY1xuXG4gICAgICAgIHdoaWxlIChpbmVydGlhLmxlbmd0aCA+IDAgJiYgbm93IC0gaW5lcnRpYVswXVswXSA+IGN1dG9mZikgaW5lcnRpYS5zaGlmdCgpO1xuICAgIH1cbn1cblxuZXhwb3J0IGRlZmF1bHQgRHJhZ1BhbkhhbmRsZXI7XG4iLCIvLyBAZmxvd1xuXG5pbXBvcnQgeyBiaW5kQWxsIH0gZnJvbSAnLi4vLi4vdXRpbC91dGlsJztcblxuaW1wb3J0IHR5cGUgTWFwIGZyb20gJy4uL21hcCc7XG5cbmNvbnN0IHBhblN0ZXAgPSAxMDAsXG4gICAgYmVhcmluZ1N0ZXAgPSAxNSxcbiAgICBwaXRjaFN0ZXAgPSAxMDtcblxuLyoqXG4gKiBUaGUgYEtleWJvYXJkSGFuZGxlcmAgYWxsb3dzIHRoZSB1c2VyIHRvIHpvb20sIHJvdGF0ZSwgYW5kIHBhbiB0aGUgbWFwIHVzaW5nXG4gKiB0aGUgZm9sbG93aW5nIGtleWJvYXJkIHNob3J0Y3V0czpcbiAqXG4gKiAtIGA9YCAvIGArYDogSW5jcmVhc2UgdGhlIHpvb20gbGV2ZWwgYnkgMS5cbiAqIC0gYFNoaWZ0LT1gIC8gYFNoaWZ0LStgOiBJbmNyZWFzZSB0aGUgem9vbSBsZXZlbCBieSAyLlxuICogLSBgLWA6IERlY3JlYXNlIHRoZSB6b29tIGxldmVsIGJ5IDEuXG4gKiAtIGBTaGlmdC0tYDogRGVjcmVhc2UgdGhlIHpvb20gbGV2ZWwgYnkgMi5cbiAqIC0gQXJyb3cga2V5czogUGFuIGJ5IDEwMCBwaXhlbHMuXG4gKiAtIGBTaGlmdCvih6JgOiBJbmNyZWFzZSB0aGUgcm90YXRpb24gYnkgMTUgZGVncmVlcy5cbiAqIC0gYFNoaWZ0K+KHoGA6IERlY3JlYXNlIHRoZSByb3RhdGlvbiBieSAxNSBkZWdyZWVzLlxuICogLSBgU2hpZnQr4oehYDogSW5jcmVhc2UgdGhlIHBpdGNoIGJ5IDEwIGRlZ3JlZXMuXG4gKiAtIGBTaGlmdCvih6NgOiBEZWNyZWFzZSB0aGUgcGl0Y2ggYnkgMTAgZGVncmVlcy5cbiAqL1xuY2xhc3MgS2V5Ym9hcmRIYW5kbGVyIHtcbiAgICBfbWFwOiBNYXA7XG4gICAgX2VsOiBIVE1MRWxlbWVudDtcbiAgICBfZW5hYmxlZDogYm9vbGVhbjtcblxuICAgIC8qKlxuICAgICAqIEBwcml2YXRlXG4gICAgICovXG4gICAgY29uc3RydWN0b3IobWFwOiBNYXApIHtcbiAgICAgICAgdGhpcy5fbWFwID0gbWFwO1xuICAgICAgICB0aGlzLl9lbCA9IG1hcC5nZXRDYW52YXNDb250YWluZXIoKTtcblxuICAgICAgICBiaW5kQWxsKFtcbiAgICAgICAgICAgICdfb25LZXlEb3duJ1xuICAgICAgICBdLCB0aGlzKTtcbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBSZXR1cm5zIGEgQm9vbGVhbiBpbmRpY2F0aW5nIHdoZXRoZXIga2V5Ym9hcmQgaW50ZXJhY3Rpb24gaXMgZW5hYmxlZC5cbiAgICAgKlxuICAgICAqIEByZXR1cm5zIHtib29sZWFufSBgdHJ1ZWAgaWYga2V5Ym9hcmQgaW50ZXJhY3Rpb24gaXMgZW5hYmxlZC5cbiAgICAgKi9cbiAgICBpc0VuYWJsZWQoKSB7XG4gICAgICAgIHJldHVybiAhIXRoaXMuX2VuYWJsZWQ7XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogRW5hYmxlcyBrZXlib2FyZCBpbnRlcmFjdGlvbi5cbiAgICAgKlxuICAgICAqIEBleGFtcGxlXG4gICAgICogbWFwLmtleWJvYXJkLmVuYWJsZSgpO1xuICAgICAqL1xuICAgIGVuYWJsZSgpIHtcbiAgICAgICAgaWYgKHRoaXMuaXNFbmFibGVkKCkpIHJldHVybjtcbiAgICAgICAgdGhpcy5fZWwuYWRkRXZlbnRMaXN0ZW5lcigna2V5ZG93bicsIHRoaXMuX29uS2V5RG93biwgZmFsc2UpO1xuICAgICAgICB0aGlzLl9lbmFibGVkID0gdHJ1ZTtcbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBEaXNhYmxlcyBrZXlib2FyZCBpbnRlcmFjdGlvbi5cbiAgICAgKlxuICAgICAqIEBleGFtcGxlXG4gICAgICogbWFwLmtleWJvYXJkLmRpc2FibGUoKTtcbiAgICAgKi9cbiAgICBkaXNhYmxlKCkge1xuICAgICAgICBpZiAoIXRoaXMuaXNFbmFibGVkKCkpIHJldHVybjtcbiAgICAgICAgdGhpcy5fZWwucmVtb3ZlRXZlbnRMaXN0ZW5lcigna2V5ZG93bicsIHRoaXMuX29uS2V5RG93bik7XG4gICAgICAgIHRoaXMuX2VuYWJsZWQgPSBmYWxzZTtcbiAgICB9XG5cbiAgICBfb25LZXlEb3duKGU6IEtleWJvYXJkRXZlbnQpIHtcbiAgICAgICAgaWYgKGUuYWx0S2V5IHx8IGUuY3RybEtleSB8fCBlLm1ldGFLZXkpIHJldHVybjtcblxuICAgICAgICBsZXQgem9vbURpciA9IDA7XG4gICAgICAgIGxldCBiZWFyaW5nRGlyID0gMDtcbiAgICAgICAgbGV0IHBpdGNoRGlyID0gMDtcbiAgICAgICAgbGV0IHhEaXIgPSAwO1xuICAgICAgICBsZXQgeURpciA9IDA7XG5cbiAgICAgICAgc3dpdGNoIChlLmtleUNvZGUpIHtcbiAgICAgICAgY2FzZSA2MTpcbiAgICAgICAgY2FzZSAxMDc6XG4gICAgICAgIGNhc2UgMTcxOlxuICAgICAgICBjYXNlIDE4NzpcbiAgICAgICAgICAgIHpvb21EaXIgPSAxO1xuICAgICAgICAgICAgYnJlYWs7XG5cbiAgICAgICAgY2FzZSAxODk6XG4gICAgICAgIGNhc2UgMTA5OlxuICAgICAgICBjYXNlIDE3MzpcbiAgICAgICAgICAgIHpvb21EaXIgPSAtMTtcbiAgICAgICAgICAgIGJyZWFrO1xuXG4gICAgICAgIGNhc2UgMzc6XG4gICAgICAgICAgICBpZiAoZS5zaGlmdEtleSkge1xuICAgICAgICAgICAgICAgIGJlYXJpbmdEaXIgPSAtMTtcbiAgICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICAgICAgZS5wcmV2ZW50RGVmYXVsdCgpO1xuICAgICAgICAgICAgICAgIHhEaXIgPSAtMTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGJyZWFrO1xuXG4gICAgICAgIGNhc2UgMzk6XG4gICAgICAgICAgICBpZiAoZS5zaGlmdEtleSkge1xuICAgICAgICAgICAgICAgIGJlYXJpbmdEaXIgPSAxO1xuICAgICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgICAgICBlLnByZXZlbnREZWZhdWx0KCk7XG4gICAgICAgICAgICAgICAgeERpciA9IDE7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBicmVhaztcblxuICAgICAgICBjYXNlIDM4OlxuICAgICAgICAgICAgaWYgKGUuc2hpZnRLZXkpIHtcbiAgICAgICAgICAgICAgICBwaXRjaERpciA9IDE7XG4gICAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgICAgIGUucHJldmVudERlZmF1bHQoKTtcbiAgICAgICAgICAgICAgICB5RGlyID0gLTE7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBicmVhaztcblxuICAgICAgICBjYXNlIDQwOlxuICAgICAgICAgICAgaWYgKGUuc2hpZnRLZXkpIHtcbiAgICAgICAgICAgICAgICBwaXRjaERpciA9IC0xO1xuICAgICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgICAgICB5RGlyID0gMTtcbiAgICAgICAgICAgICAgICBlLnByZXZlbnREZWZhdWx0KCk7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBicmVhaztcblxuICAgICAgICBkZWZhdWx0OlxuICAgICAgICAgICAgcmV0dXJuO1xuICAgICAgICB9XG5cbiAgICAgICAgY29uc3QgbWFwID0gdGhpcy5fbWFwO1xuICAgICAgICBjb25zdCB6b29tID0gbWFwLmdldFpvb20oKTtcblxuICAgICAgICBjb25zdCBlYXNlT3B0aW9ucyA9IHtcbiAgICAgICAgICAgIGR1cmF0aW9uOiAzMDAsXG4gICAgICAgICAgICBkZWxheUVuZEV2ZW50czogNTAwLFxuICAgICAgICAgICAgZWFzaW5nOiBlYXNlT3V0LFxuXG4gICAgICAgICAgICB6b29tOiB6b29tRGlyID8gTWF0aC5yb3VuZCh6b29tKSArIHpvb21EaXIgKiAoZS5zaGlmdEtleSA/IDIgOiAxKSA6IHpvb20sXG4gICAgICAgICAgICBiZWFyaW5nOiBtYXAuZ2V0QmVhcmluZygpICsgYmVhcmluZ0RpciAqIGJlYXJpbmdTdGVwLFxuICAgICAgICAgICAgcGl0Y2g6IG1hcC5nZXRQaXRjaCgpICsgcGl0Y2hEaXIgKiBwaXRjaFN0ZXAsXG4gICAgICAgICAgICBvZmZzZXQ6IFsteERpciAqIHBhblN0ZXAsIC15RGlyICogcGFuU3RlcF0sXG4gICAgICAgICAgICBjZW50ZXI6IG1hcC5nZXRDZW50ZXIoKVxuICAgICAgICB9O1xuXG4gICAgICAgIG1hcC5lYXNlVG8oZWFzZU9wdGlvbnMsIHtvcmlnaW5hbEV2ZW50OiBlfSk7XG4gICAgfVxufVxuXG5mdW5jdGlvbiBlYXNlT3V0KHQpIHtcbiAgICByZXR1cm4gdCAqICgyIC0gdCk7XG59XG5cbmV4cG9ydCBkZWZhdWx0IEtleWJvYXJkSGFuZGxlcjtcbiIsIi8vIEBmbG93XG5cbmltcG9ydCB7IGJpbmRBbGwgfSBmcm9tICcuLi8uLi91dGlsL3V0aWwnO1xuXG5pbXBvcnQgdHlwZSBNYXAgZnJvbSAnLi4vbWFwJztcbmltcG9ydCB0eXBlIHtNYXBNb3VzZUV2ZW50LCBNYXBUb3VjaEV2ZW50fSBmcm9tICcuLi9ldmVudHMnO1xuXG4vKipcbiAqIFRoZSBgRG91YmxlQ2xpY2tab29tSGFuZGxlcmAgYWxsb3dzIHRoZSB1c2VyIHRvIHpvb20gdGhlIG1hcCBhdCBhIHBvaW50IGJ5XG4gKiBkb3VibGUgY2xpY2tpbmcgb3IgZG91YmxlIHRhcHBpbmcuXG4gKi9cbmNsYXNzIERvdWJsZUNsaWNrWm9vbUhhbmRsZXIge1xuICAgIF9tYXA6IE1hcDtcbiAgICBfZW5hYmxlZDogYm9vbGVhbjtcbiAgICBfYWN0aXZlOiBib29sZWFuO1xuICAgIF90YXBwZWQ6ID9UaW1lb3V0SUQ7XG5cbiAgICAvKipcbiAgICAgKiBAcHJpdmF0ZVxuICAgICAqL1xuICAgIGNvbnN0cnVjdG9yKG1hcDogTWFwKSB7XG4gICAgICAgIHRoaXMuX21hcCA9IG1hcDtcblxuICAgICAgICBiaW5kQWxsKFtcbiAgICAgICAgICAgICdfb25EYmxDbGljaycsXG4gICAgICAgICAgICAnX29uWm9vbUVuZCdcbiAgICAgICAgXSwgdGhpcyk7XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogUmV0dXJucyBhIEJvb2xlYW4gaW5kaWNhdGluZyB3aGV0aGVyIHRoZSBcImRvdWJsZSBjbGljayB0byB6b29tXCIgaW50ZXJhY3Rpb24gaXMgZW5hYmxlZC5cbiAgICAgKlxuICAgICAqIEByZXR1cm5zIHtib29sZWFufSBgdHJ1ZWAgaWYgdGhlIFwiZG91YmxlIGNsaWNrIHRvIHpvb21cIiBpbnRlcmFjdGlvbiBpcyBlbmFibGVkLlxuICAgICAqL1xuICAgIGlzRW5hYmxlZCgpIHtcbiAgICAgICAgcmV0dXJuICEhdGhpcy5fZW5hYmxlZDtcbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBSZXR1cm5zIGEgQm9vbGVhbiBpbmRpY2F0aW5nIHdoZXRoZXIgdGhlIFwiZG91YmxlIGNsaWNrIHRvIHpvb21cIiBpbnRlcmFjdGlvbiBpcyBhY3RpdmUsIGkuZS4gY3VycmVudGx5IGJlaW5nIHVzZWQuXG4gICAgICpcbiAgICAgKiBAcmV0dXJucyB7Ym9vbGVhbn0gYHRydWVgIGlmIHRoZSBcImRvdWJsZSBjbGljayB0byB6b29tXCIgaW50ZXJhY3Rpb24gaXMgYWN0aXZlLlxuICAgICAqL1xuICAgIGlzQWN0aXZlKCkge1xuICAgICAgICByZXR1cm4gISF0aGlzLl9hY3RpdmU7XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogRW5hYmxlcyB0aGUgXCJkb3VibGUgY2xpY2sgdG8gem9vbVwiIGludGVyYWN0aW9uLlxuICAgICAqXG4gICAgICogQGV4YW1wbGVcbiAgICAgKiBtYXAuZG91YmxlQ2xpY2tab29tLmVuYWJsZSgpO1xuICAgICAqL1xuICAgIGVuYWJsZSgpIHtcbiAgICAgICAgaWYgKHRoaXMuaXNFbmFibGVkKCkpIHJldHVybjtcbiAgICAgICAgdGhpcy5fZW5hYmxlZCA9IHRydWU7XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogRGlzYWJsZXMgdGhlIFwiZG91YmxlIGNsaWNrIHRvIHpvb21cIiBpbnRlcmFjdGlvbi5cbiAgICAgKlxuICAgICAqIEBleGFtcGxlXG4gICAgICogbWFwLmRvdWJsZUNsaWNrWm9vbS5kaXNhYmxlKCk7XG4gICAgICovXG4gICAgZGlzYWJsZSgpIHtcbiAgICAgICAgaWYgKCF0aGlzLmlzRW5hYmxlZCgpKSByZXR1cm47XG4gICAgICAgIHRoaXMuX2VuYWJsZWQgPSBmYWxzZTtcbiAgICB9XG5cbiAgICBvblRvdWNoU3RhcnQoZTogTWFwVG91Y2hFdmVudCkge1xuICAgICAgICBpZiAoIXRoaXMuaXNFbmFibGVkKCkpIHJldHVybjtcbiAgICAgICAgaWYgKGUucG9pbnRzLmxlbmd0aCA+IDEpIHJldHVybjtcblxuICAgICAgICBpZiAoIXRoaXMuX3RhcHBlZCkge1xuICAgICAgICAgICAgdGhpcy5fdGFwcGVkID0gc2V0VGltZW91dCgoKSA9PiB7IHRoaXMuX3RhcHBlZCA9IG51bGw7IH0sIDMwMCk7XG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICBjbGVhclRpbWVvdXQodGhpcy5fdGFwcGVkKTtcbiAgICAgICAgICAgIHRoaXMuX3RhcHBlZCA9IG51bGw7XG4gICAgICAgICAgICB0aGlzLl96b29tKGUpO1xuICAgICAgICB9XG4gICAgfVxuXG4gICAgb25EYmxDbGljayhlOiBNYXBNb3VzZUV2ZW50KSB7XG4gICAgICAgIGlmICghdGhpcy5pc0VuYWJsZWQoKSkgcmV0dXJuO1xuICAgICAgICBlLm9yaWdpbmFsRXZlbnQucHJldmVudERlZmF1bHQoKTtcbiAgICAgICAgdGhpcy5fem9vbShlKTtcbiAgICB9XG5cbiAgICBfem9vbShlOiBNYXBNb3VzZUV2ZW50IHwgTWFwVG91Y2hFdmVudCkge1xuICAgICAgICB0aGlzLl9hY3RpdmUgPSB0cnVlO1xuICAgICAgICB0aGlzLl9tYXAub24oJ3pvb21lbmQnLCB0aGlzLl9vblpvb21FbmQpO1xuICAgICAgICB0aGlzLl9tYXAuem9vbVRvKFxuICAgICAgICAgICAgdGhpcy5fbWFwLmdldFpvb20oKSArIChlLm9yaWdpbmFsRXZlbnQuc2hpZnRLZXkgPyAtMSA6IDEpLFxuICAgICAgICAgICAge2Fyb3VuZDogZS5sbmdMYXR9LFxuICAgICAgICAgICAgZVxuICAgICAgICApO1xuICAgIH1cblxuICAgIF9vblpvb21FbmQoKSB7XG4gICAgICAgIHRoaXMuX2FjdGl2ZSA9IGZhbHNlO1xuICAgICAgICB0aGlzLl9tYXAub2ZmKCd6b29tZW5kJywgdGhpcy5fb25ab29tRW5kKTtcbiAgICB9XG59XG5cbmV4cG9ydCBkZWZhdWx0IERvdWJsZUNsaWNrWm9vbUhhbmRsZXI7XG4iLCIvLyBAZmxvd1xuXG5pbXBvcnQgRE9NIGZyb20gJy4uLy4uL3V0aWwvZG9tJztcbmltcG9ydCB7IGJlemllciwgYmluZEFsbCB9IGZyb20gJy4uLy4uL3V0aWwvdXRpbCc7XG5pbXBvcnQgd2luZG93IGZyb20gJy4uLy4uL3V0aWwvd2luZG93JztcbmltcG9ydCBicm93c2VyIGZyb20gJy4uLy4uL3V0aWwvYnJvd3Nlcic7XG5pbXBvcnQgeyBFdmVudCB9IGZyb20gJy4uLy4uL3V0aWwvZXZlbnRlZCc7XG5cbmltcG9ydCB0eXBlIE1hcCBmcm9tICcuLi9tYXAnO1xuaW1wb3J0IHR5cGUgUG9pbnQgZnJvbSAnQG1hcGJveC9wb2ludC1nZW9tZXRyeSc7XG5pbXBvcnQgdHlwZSBMbmdMYXQgZnJvbSAnLi4vLi4vZ2VvL2xuZ19sYXQnO1xuaW1wb3J0IHR5cGUge1Rhc2tJRH0gZnJvbSAnLi4vLi4vdXRpbC90YXNrX3F1ZXVlJztcblxuY29uc3QgaW5lcnRpYUxpbmVhcml0eSA9IDAuMTUsXG4gICAgaW5lcnRpYUVhc2luZyA9IGJlemllcigwLCAwLCBpbmVydGlhTGluZWFyaXR5LCAxKSxcbiAgICBpbmVydGlhRGVjZWxlcmF0aW9uID0gMTIsIC8vIHNjYWxlIC8gc14yXG4gICAgaW5lcnRpYU1heFNwZWVkID0gMi41LCAvLyBzY2FsZSAvIHNcbiAgICBzaWduaWZpY2FudFNjYWxlVGhyZXNob2xkID0gMC4xNSxcbiAgICBzaWduaWZpY2FudFJvdGF0ZVRocmVzaG9sZCA9IDEwO1xuXG4vKipcbiAqIFRoZSBgVG91Y2hab29tUm90YXRlSGFuZGxlcmAgYWxsb3dzIHRoZSB1c2VyIHRvIHpvb20gYW5kIHJvdGF0ZSB0aGUgbWFwIGJ5XG4gKiBwaW5jaGluZyBvbiBhIHRvdWNoc2NyZWVuLlxuICovXG5jbGFzcyBUb3VjaFpvb21Sb3RhdGVIYW5kbGVyIHtcbiAgICBfbWFwOiBNYXA7XG4gICAgX2VsOiBIVE1MRWxlbWVudDtcbiAgICBfZW5hYmxlZDogYm9vbGVhbjtcbiAgICBfYXJvdW5kQ2VudGVyOiBib29sZWFuO1xuICAgIF9yb3RhdGlvbkRpc2FibGVkOiBib29sZWFuO1xuICAgIF9zdGFydFZlYzogUG9pbnQ7XG4gICAgX3N0YXJ0QXJvdW5kOiBMbmdMYXQ7XG4gICAgX3N0YXJ0U2NhbGU6IG51bWJlcjtcbiAgICBfc3RhcnRCZWFyaW5nOiBudW1iZXI7XG4gICAgX2dlc3R1cmVJbnRlbnQ6ICdyb3RhdGUnIHwgJ3pvb20nIHwgdm9pZDtcbiAgICBfaW5lcnRpYTogQXJyYXk8W251bWJlciwgbnVtYmVyLCBQb2ludF0+O1xuICAgIF9sYXN0VG91Y2hFdmVudDogVG91Y2hFdmVudDtcbiAgICBfZnJhbWVJZDogP1Rhc2tJRDtcblxuICAgIC8qKlxuICAgICAqIEBwcml2YXRlXG4gICAgICovXG4gICAgY29uc3RydWN0b3IobWFwOiBNYXApIHtcbiAgICAgICAgdGhpcy5fbWFwID0gbWFwO1xuICAgICAgICB0aGlzLl9lbCA9IG1hcC5nZXRDYW52YXNDb250YWluZXIoKTtcblxuICAgICAgICBiaW5kQWxsKFtcbiAgICAgICAgICAgICdfb25Nb3ZlJyxcbiAgICAgICAgICAgICdfb25FbmQnLFxuICAgICAgICAgICAgJ19vblRvdWNoRnJhbWUnXG4gICAgICAgIF0sIHRoaXMpO1xuICAgIH1cblxuICAgIC8qKlxuICAgICAqIFJldHVybnMgYSBCb29sZWFuIGluZGljYXRpbmcgd2hldGhlciB0aGUgXCJwaW5jaCB0byByb3RhdGUgYW5kIHpvb21cIiBpbnRlcmFjdGlvbiBpcyBlbmFibGVkLlxuICAgICAqXG4gICAgICogQHJldHVybnMge2Jvb2xlYW59IGB0cnVlYCBpZiB0aGUgXCJwaW5jaCB0byByb3RhdGUgYW5kIHpvb21cIiBpbnRlcmFjdGlvbiBpcyBlbmFibGVkLlxuICAgICAqL1xuICAgIGlzRW5hYmxlZCgpIHtcbiAgICAgICAgcmV0dXJuICEhdGhpcy5fZW5hYmxlZDtcbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBFbmFibGVzIHRoZSBcInBpbmNoIHRvIHJvdGF0ZSBhbmQgem9vbVwiIGludGVyYWN0aW9uLlxuICAgICAqXG4gICAgICogQHBhcmFtIHtPYmplY3R9IFtvcHRpb25zXVxuICAgICAqIEBwYXJhbSB7c3RyaW5nfSBbb3B0aW9ucy5hcm91bmRdIElmIFwiY2VudGVyXCIgaXMgcGFzc2VkLCBtYXAgd2lsbCB6b29tIGFyb3VuZCB0aGUgY2VudGVyXG4gICAgICpcbiAgICAgKiBAZXhhbXBsZVxuICAgICAqICAgbWFwLnRvdWNoWm9vbVJvdGF0ZS5lbmFibGUoKTtcbiAgICAgKiBAZXhhbXBsZVxuICAgICAqICAgbWFwLnRvdWNoWm9vbVJvdGF0ZS5lbmFibGUoeyBhcm91bmQ6ICdjZW50ZXInIH0pO1xuICAgICAqL1xuICAgIGVuYWJsZShvcHRpb25zOiA/e2Fyb3VuZD86ICdjZW50ZXInfSkge1xuICAgICAgICBpZiAodGhpcy5pc0VuYWJsZWQoKSkgcmV0dXJuO1xuICAgICAgICB0aGlzLl9lbC5jbGFzc0xpc3QuYWRkKCdtYXBib3hnbC10b3VjaC16b29tLXJvdGF0ZScpO1xuICAgICAgICB0aGlzLl9lbmFibGVkID0gdHJ1ZTtcbiAgICAgICAgdGhpcy5fYXJvdW5kQ2VudGVyID0gISFvcHRpb25zICYmIG9wdGlvbnMuYXJvdW5kID09PSAnY2VudGVyJztcbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBEaXNhYmxlcyB0aGUgXCJwaW5jaCB0byByb3RhdGUgYW5kIHpvb21cIiBpbnRlcmFjdGlvbi5cbiAgICAgKlxuICAgICAqIEBleGFtcGxlXG4gICAgICogICBtYXAudG91Y2hab29tUm90YXRlLmRpc2FibGUoKTtcbiAgICAgKi9cbiAgICBkaXNhYmxlKCkge1xuICAgICAgICBpZiAoIXRoaXMuaXNFbmFibGVkKCkpIHJldHVybjtcbiAgICAgICAgdGhpcy5fZWwuY2xhc3NMaXN0LnJlbW92ZSgnbWFwYm94Z2wtdG91Y2gtem9vbS1yb3RhdGUnKTtcbiAgICAgICAgdGhpcy5fZW5hYmxlZCA9IGZhbHNlO1xuICAgIH1cblxuICAgIC8qKlxuICAgICAqIERpc2FibGVzIHRoZSBcInBpbmNoIHRvIHJvdGF0ZVwiIGludGVyYWN0aW9uLCBsZWF2aW5nIHRoZSBcInBpbmNoIHRvIHpvb21cIlxuICAgICAqIGludGVyYWN0aW9uIGVuYWJsZWQuXG4gICAgICpcbiAgICAgKiBAZXhhbXBsZVxuICAgICAqICAgbWFwLnRvdWNoWm9vbVJvdGF0ZS5kaXNhYmxlUm90YXRpb24oKTtcbiAgICAgKi9cbiAgICBkaXNhYmxlUm90YXRpb24oKSB7XG4gICAgICAgIHRoaXMuX3JvdGF0aW9uRGlzYWJsZWQgPSB0cnVlO1xuICAgIH1cblxuICAgIC8qKlxuICAgICAqIEVuYWJsZXMgdGhlIFwicGluY2ggdG8gcm90YXRlXCIgaW50ZXJhY3Rpb24uXG4gICAgICpcbiAgICAgKiBAZXhhbXBsZVxuICAgICAqICAgbWFwLnRvdWNoWm9vbVJvdGF0ZS5lbmFibGUoKTtcbiAgICAgKiAgIG1hcC50b3VjaFpvb21Sb3RhdGUuZW5hYmxlUm90YXRpb24oKTtcbiAgICAgKi9cbiAgICBlbmFibGVSb3RhdGlvbigpIHtcbiAgICAgICAgdGhpcy5fcm90YXRpb25EaXNhYmxlZCA9IGZhbHNlO1xuICAgIH1cblxuICAgIG9uU3RhcnQoZTogVG91Y2hFdmVudCkge1xuICAgICAgICBpZiAoIXRoaXMuaXNFbmFibGVkKCkpIHJldHVybjtcbiAgICAgICAgaWYgKGUudG91Y2hlcy5sZW5ndGggIT09IDIpIHJldHVybjtcblxuICAgICAgICBjb25zdCBwMCA9IERPTS5tb3VzZVBvcyh0aGlzLl9lbCwgZS50b3VjaGVzWzBdKSxcbiAgICAgICAgICAgIHAxID0gRE9NLm1vdXNlUG9zKHRoaXMuX2VsLCBlLnRvdWNoZXNbMV0pLFxuICAgICAgICAgICAgY2VudGVyID0gcDAuYWRkKHAxKS5kaXYoMik7XG5cbiAgICAgICAgdGhpcy5fc3RhcnRWZWMgPSBwMC5zdWIocDEpO1xuICAgICAgICB0aGlzLl9zdGFydEFyb3VuZCA9IHRoaXMuX21hcC50cmFuc2Zvcm0ucG9pbnRMb2NhdGlvbihjZW50ZXIpO1xuICAgICAgICB0aGlzLl9nZXN0dXJlSW50ZW50ID0gdW5kZWZpbmVkO1xuICAgICAgICB0aGlzLl9pbmVydGlhID0gW107XG5cbiAgICAgICAgRE9NLmFkZEV2ZW50TGlzdGVuZXIod2luZG93LmRvY3VtZW50LCAndG91Y2htb3ZlJywgdGhpcy5fb25Nb3ZlLCB7cGFzc2l2ZTogZmFsc2V9KTtcbiAgICAgICAgRE9NLmFkZEV2ZW50TGlzdGVuZXIod2luZG93LmRvY3VtZW50LCAndG91Y2hlbmQnLCB0aGlzLl9vbkVuZCk7XG4gICAgfVxuXG4gICAgX2dldFRvdWNoRXZlbnREYXRhKGU6IFRvdWNoRXZlbnQpIHtcbiAgICAgICAgY29uc3QgcDAgPSBET00ubW91c2VQb3ModGhpcy5fZWwsIGUudG91Y2hlc1swXSksXG4gICAgICAgICAgICBwMSA9IERPTS5tb3VzZVBvcyh0aGlzLl9lbCwgZS50b3VjaGVzWzFdKTtcblxuICAgICAgICBjb25zdCB2ZWMgPSBwMC5zdWIocDEpO1xuICAgICAgICByZXR1cm4ge1xuICAgICAgICAgICAgdmVjLFxuICAgICAgICAgICAgY2VudGVyOiBwMC5hZGQocDEpLmRpdigyKSxcbiAgICAgICAgICAgIHNjYWxlOiB2ZWMubWFnKCkgLyB0aGlzLl9zdGFydFZlYy5tYWcoKSxcbiAgICAgICAgICAgIGJlYXJpbmc6IHRoaXMuX3JvdGF0aW9uRGlzYWJsZWQgPyAwIDogdmVjLmFuZ2xlV2l0aCh0aGlzLl9zdGFydFZlYykgKiAxODAgLyBNYXRoLlBJXG4gICAgICAgIH07XG4gICAgfVxuXG4gICAgX29uTW92ZShlOiBUb3VjaEV2ZW50KSB7XG4gICAgICAgIGlmIChlLnRvdWNoZXMubGVuZ3RoICE9PSAyKSByZXR1cm47XG5cbiAgICAgICAgY29uc3Qge3ZlYywgc2NhbGUsIGJlYXJpbmd9ID0gdGhpcy5fZ2V0VG91Y2hFdmVudERhdGEoZSk7XG5cbiAgICAgICAgLy8gRGV0ZXJtaW5lICdpbnRlbnQnIGJ5IHdoaWNoZXZlciB0aHJlc2hvbGQgaXMgc3VycGFzc2VkIGZpcnN0LFxuICAgICAgICAvLyB0aGVuIGtlZXAgdGhhdCBzdGF0ZSBmb3IgdGhlIGR1cmF0aW9uIG9mIHRoaXMgZ2VzdHVyZS5cbiAgICAgICAgaWYgKCF0aGlzLl9nZXN0dXJlSW50ZW50KSB7XG4gICAgICAgICAgICBjb25zdCBzY2FsaW5nU2lnbmlmaWNhbnRseSA9IChNYXRoLmFicygxIC0gc2NhbGUpID4gc2lnbmlmaWNhbnRTY2FsZVRocmVzaG9sZCksXG4gICAgICAgICAgICAgICAgcm90YXRpbmdTaWduaWZpY2FudGx5ID0gKE1hdGguYWJzKGJlYXJpbmcpID4gc2lnbmlmaWNhbnRSb3RhdGVUaHJlc2hvbGQpO1xuXG4gICAgICAgICAgICBpZiAocm90YXRpbmdTaWduaWZpY2FudGx5KSB7XG4gICAgICAgICAgICAgICAgdGhpcy5fZ2VzdHVyZUludGVudCA9ICdyb3RhdGUnO1xuICAgICAgICAgICAgfSBlbHNlIGlmIChzY2FsaW5nU2lnbmlmaWNhbnRseSkge1xuICAgICAgICAgICAgICAgIHRoaXMuX2dlc3R1cmVJbnRlbnQgPSAnem9vbSc7XG4gICAgICAgICAgICB9XG5cbiAgICAgICAgICAgIGlmICh0aGlzLl9nZXN0dXJlSW50ZW50KSB7XG4gICAgICAgICAgICAgICAgdGhpcy5fbWFwLmZpcmUobmV3IEV2ZW50KGAke3RoaXMuX2dlc3R1cmVJbnRlbnR9c3RhcnRgLCB7IG9yaWdpbmFsRXZlbnQ6IGUgfSkpO1xuICAgICAgICAgICAgICAgIHRoaXMuX21hcC5maXJlKG5ldyBFdmVudCgnbW92ZXN0YXJ0JywgeyBvcmlnaW5hbEV2ZW50OiBlIH0pKTtcbiAgICAgICAgICAgICAgICB0aGlzLl9zdGFydFZlYyA9IHZlYztcbiAgICAgICAgICAgIH1cbiAgICAgICAgfVxuXG4gICAgICAgIHRoaXMuX2xhc3RUb3VjaEV2ZW50ID0gZTtcbiAgICAgICAgaWYgKCF0aGlzLl9mcmFtZUlkKSB7XG4gICAgICAgICAgICB0aGlzLl9mcmFtZUlkID0gdGhpcy5fbWFwLl9yZXF1ZXN0UmVuZGVyRnJhbWUodGhpcy5fb25Ub3VjaEZyYW1lKTtcbiAgICAgICAgfVxuXG4gICAgICAgIGUucHJldmVudERlZmF1bHQoKTtcbiAgICB9XG5cbiAgICBfb25Ub3VjaEZyYW1lKCkge1xuICAgICAgICB0aGlzLl9mcmFtZUlkID0gbnVsbDtcblxuICAgICAgICBjb25zdCBnZXN0dXJlSW50ZW50ID0gdGhpcy5fZ2VzdHVyZUludGVudDtcbiAgICAgICAgaWYgKCFnZXN0dXJlSW50ZW50KSByZXR1cm47XG5cbiAgICAgICAgY29uc3QgdHIgPSB0aGlzLl9tYXAudHJhbnNmb3JtO1xuXG4gICAgICAgIGlmICghdGhpcy5fc3RhcnRTY2FsZSkge1xuICAgICAgICAgICAgdGhpcy5fc3RhcnRTY2FsZSA9IHRyLnNjYWxlO1xuICAgICAgICAgICAgdGhpcy5fc3RhcnRCZWFyaW5nID0gdHIuYmVhcmluZztcbiAgICAgICAgfVxuXG4gICAgICAgIGNvbnN0IHtjZW50ZXIsIGJlYXJpbmcsIHNjYWxlfSA9IHRoaXMuX2dldFRvdWNoRXZlbnREYXRhKHRoaXMuX2xhc3RUb3VjaEV2ZW50KTtcbiAgICAgICAgY29uc3QgYXJvdW5kID0gdHIucG9pbnRMb2NhdGlvbihjZW50ZXIpO1xuICAgICAgICBjb25zdCBhcm91bmRQb2ludCA9IHRyLmxvY2F0aW9uUG9pbnQoYXJvdW5kKTtcblxuICAgICAgICBpZiAoZ2VzdHVyZUludGVudCA9PT0gJ3JvdGF0ZScpIHtcbiAgICAgICAgICAgIHRyLmJlYXJpbmcgPSB0aGlzLl9zdGFydEJlYXJpbmcgKyBiZWFyaW5nO1xuICAgICAgICB9XG5cbiAgICAgICAgdHIuem9vbSA9IHRyLnNjYWxlWm9vbSh0aGlzLl9zdGFydFNjYWxlICogc2NhbGUpO1xuXG4gICAgICAgIHRyLnNldExvY2F0aW9uQXRQb2ludCh0aGlzLl9zdGFydEFyb3VuZCwgYXJvdW5kUG9pbnQpO1xuXG4gICAgICAgIHRoaXMuX21hcC5maXJlKG5ldyBFdmVudChnZXN0dXJlSW50ZW50LCB7b3JpZ2luYWxFdmVudDogdGhpcy5fbGFzdFRvdWNoRXZlbnR9KSk7XG4gICAgICAgIHRoaXMuX21hcC5maXJlKG5ldyBFdmVudCgnbW92ZScsIHtvcmlnaW5hbEV2ZW50OiB0aGlzLl9sYXN0VG91Y2hFdmVudH0pKTtcblxuICAgICAgICB0aGlzLl9kcmFpbkluZXJ0aWFCdWZmZXIoKTtcbiAgICAgICAgdGhpcy5faW5lcnRpYS5wdXNoKFticm93c2VyLm5vdygpLCBzY2FsZSwgY2VudGVyXSk7XG4gICAgfVxuXG4gICAgX29uRW5kKGU6IFRvdWNoRXZlbnQpIHtcbiAgICAgICAgRE9NLnJlbW92ZUV2ZW50TGlzdGVuZXIod2luZG93LmRvY3VtZW50LCAndG91Y2htb3ZlJywgdGhpcy5fb25Nb3ZlLCB7cGFzc2l2ZTogZmFsc2V9KTtcbiAgICAgICAgRE9NLnJlbW92ZUV2ZW50TGlzdGVuZXIod2luZG93LmRvY3VtZW50LCAndG91Y2hlbmQnLCB0aGlzLl9vbkVuZCk7XG5cbiAgICAgICAgY29uc3QgZ2VzdHVyZUludGVudCA9IHRoaXMuX2dlc3R1cmVJbnRlbnQ7XG4gICAgICAgIGNvbnN0IHN0YXJ0U2NhbGUgPSB0aGlzLl9zdGFydFNjYWxlO1xuXG4gICAgICAgIGlmICh0aGlzLl9mcmFtZUlkKSB7XG4gICAgICAgICAgICB0aGlzLl9tYXAuX2NhbmNlbFJlbmRlckZyYW1lKHRoaXMuX2ZyYW1lSWQpO1xuICAgICAgICAgICAgdGhpcy5fZnJhbWVJZCA9IG51bGw7XG4gICAgICAgIH1cbiAgICAgICAgZGVsZXRlIHRoaXMuX2dlc3R1cmVJbnRlbnQ7XG4gICAgICAgIGRlbGV0ZSB0aGlzLl9zdGFydFNjYWxlO1xuICAgICAgICBkZWxldGUgdGhpcy5fc3RhcnRCZWFyaW5nO1xuICAgICAgICBkZWxldGUgdGhpcy5fbGFzdFRvdWNoRXZlbnQ7XG5cbiAgICAgICAgaWYgKCFnZXN0dXJlSW50ZW50KSByZXR1cm47XG5cbiAgICAgICAgdGhpcy5fbWFwLmZpcmUobmV3IEV2ZW50KGAke2dlc3R1cmVJbnRlbnR9ZW5kYCwgeyBvcmlnaW5hbEV2ZW50OiBlIH0pKTtcblxuICAgICAgICB0aGlzLl9kcmFpbkluZXJ0aWFCdWZmZXIoKTtcblxuICAgICAgICBjb25zdCBpbmVydGlhID0gdGhpcy5faW5lcnRpYSxcbiAgICAgICAgICAgIG1hcCA9IHRoaXMuX21hcDtcblxuICAgICAgICBpZiAoaW5lcnRpYS5sZW5ndGggPCAyKSB7XG4gICAgICAgICAgICBtYXAuc25hcFRvTm9ydGgoe30sIHsgb3JpZ2luYWxFdmVudDogZSB9KTtcbiAgICAgICAgICAgIHJldHVybjtcbiAgICAgICAgfVxuXG4gICAgICAgIGNvbnN0IGxhc3QgPSBpbmVydGlhW2luZXJ0aWEubGVuZ3RoIC0gMV0sXG4gICAgICAgICAgICBmaXJzdCA9IGluZXJ0aWFbMF0sXG4gICAgICAgICAgICBsYXN0U2NhbGUgPSBtYXAudHJhbnNmb3JtLnNjYWxlWm9vbShzdGFydFNjYWxlICogbGFzdFsxXSksXG4gICAgICAgICAgICBmaXJzdFNjYWxlID0gbWFwLnRyYW5zZm9ybS5zY2FsZVpvb20oc3RhcnRTY2FsZSAqIGZpcnN0WzFdKSxcbiAgICAgICAgICAgIHNjYWxlT2Zmc2V0ID0gbGFzdFNjYWxlIC0gZmlyc3RTY2FsZSxcbiAgICAgICAgICAgIHNjYWxlRHVyYXRpb24gPSAobGFzdFswXSAtIGZpcnN0WzBdKSAvIDEwMDAsXG4gICAgICAgICAgICBwID0gbGFzdFsyXTtcblxuICAgICAgICBpZiAoc2NhbGVEdXJhdGlvbiA9PT0gMCB8fCBsYXN0U2NhbGUgPT09IGZpcnN0U2NhbGUpIHtcbiAgICAgICAgICAgIG1hcC5zbmFwVG9Ob3J0aCh7fSwgeyBvcmlnaW5hbEV2ZW50OiBlIH0pO1xuICAgICAgICAgICAgcmV0dXJuO1xuICAgICAgICB9XG5cbiAgICAgICAgLy8gY2FsY3VsYXRlIHNjYWxlL3Mgc3BlZWQgYW5kIGFkanVzdCBmb3IgaW5jcmVhc2VkIGluaXRpYWwgYW5pbWF0aW9uIHNwZWVkIHdoZW4gZWFzaW5nXG4gICAgICAgIGxldCBzcGVlZCA9IHNjYWxlT2Zmc2V0ICogaW5lcnRpYUxpbmVhcml0eSAvIHNjYWxlRHVyYXRpb247IC8vIHNjYWxlL3NcblxuICAgICAgICBpZiAoTWF0aC5hYnMoc3BlZWQpID4gaW5lcnRpYU1heFNwZWVkKSB7XG4gICAgICAgICAgICBpZiAoc3BlZWQgPiAwKSB7XG4gICAgICAgICAgICAgICAgc3BlZWQgPSBpbmVydGlhTWF4U3BlZWQ7XG4gICAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgICAgIHNwZWVkID0gLWluZXJ0aWFNYXhTcGVlZDtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfVxuXG4gICAgICAgIGNvbnN0IGR1cmF0aW9uID0gTWF0aC5hYnMoc3BlZWQgLyAoaW5lcnRpYURlY2VsZXJhdGlvbiAqIGluZXJ0aWFMaW5lYXJpdHkpKSAqIDEwMDA7XG4gICAgICAgIGxldCB0YXJnZXRTY2FsZSA9IGxhc3RTY2FsZSArIHNwZWVkICogZHVyYXRpb24gLyAyMDAwO1xuXG4gICAgICAgIGlmICh0YXJnZXRTY2FsZSA8IDApIHtcbiAgICAgICAgICAgIHRhcmdldFNjYWxlID0gMDtcbiAgICAgICAgfVxuXG4gICAgICAgIG1hcC5lYXNlVG8oe1xuICAgICAgICAgICAgem9vbTogdGFyZ2V0U2NhbGUsXG4gICAgICAgICAgICBkdXJhdGlvbjogZHVyYXRpb24sXG4gICAgICAgICAgICBlYXNpbmc6IGluZXJ0aWFFYXNpbmcsXG4gICAgICAgICAgICBhcm91bmQ6IHRoaXMuX2Fyb3VuZENlbnRlciA/IG1hcC5nZXRDZW50ZXIoKSA6IG1hcC51bnByb2plY3QocCksXG4gICAgICAgICAgICBub01vdmVTdGFydDogdHJ1ZVxuICAgICAgICB9LCB7IG9yaWdpbmFsRXZlbnQ6IGUgfSk7XG4gICAgfVxuXG4gICAgX2RyYWluSW5lcnRpYUJ1ZmZlcigpIHtcbiAgICAgICAgY29uc3QgaW5lcnRpYSA9IHRoaXMuX2luZXJ0aWEsXG4gICAgICAgICAgICBub3cgPSBicm93c2VyLm5vdygpLFxuICAgICAgICAgICAgY3V0b2ZmID0gMTYwOyAvLyBtc2VjXG5cbiAgICAgICAgd2hpbGUgKGluZXJ0aWEubGVuZ3RoID4gMiAmJiBub3cgLSBpbmVydGlhWzBdWzBdID4gY3V0b2ZmKSBpbmVydGlhLnNoaWZ0KCk7XG4gICAgfVxufVxuXG5leHBvcnQgZGVmYXVsdCBUb3VjaFpvb21Sb3RhdGVIYW5kbGVyO1xuIiwiLy8gQGZsb3dcblxuaW1wb3J0IHsgTWFwTW91c2VFdmVudCwgTWFwVG91Y2hFdmVudCwgTWFwV2hlZWxFdmVudCB9IGZyb20gJy4uL3VpL2V2ZW50cyc7XG5pbXBvcnQgRE9NIGZyb20gJy4uL3V0aWwvZG9tJztcbmltcG9ydCB0eXBlIE1hcCBmcm9tICcuL21hcCc7XG5pbXBvcnQgc2Nyb2xsWm9vbSBmcm9tICcuL2hhbmRsZXIvc2Nyb2xsX3pvb20nO1xuaW1wb3J0IGJveFpvb20gZnJvbSAnLi9oYW5kbGVyL2JveF96b29tJztcbmltcG9ydCBkcmFnUm90YXRlIGZyb20gJy4vaGFuZGxlci9kcmFnX3JvdGF0ZSc7XG5pbXBvcnQgZHJhZ1BhbiBmcm9tICcuL2hhbmRsZXIvZHJhZ19wYW4nO1xuaW1wb3J0IGtleWJvYXJkIGZyb20gJy4vaGFuZGxlci9rZXlib2FyZCc7XG5pbXBvcnQgZG91YmxlQ2xpY2tab29tIGZyb20gJy4vaGFuZGxlci9kYmxjbGlja196b29tJztcbmltcG9ydCB0b3VjaFpvb21Sb3RhdGUgZnJvbSAnLi9oYW5kbGVyL3RvdWNoX3pvb21fcm90YXRlJztcblxuY29uc3QgaGFuZGxlcnMgPSB7XG4gICAgc2Nyb2xsWm9vbSxcbiAgICBib3hab29tLFxuICAgIGRyYWdSb3RhdGUsXG4gICAgZHJhZ1BhbixcbiAgICBrZXlib2FyZCxcbiAgICBkb3VibGVDbGlja1pvb20sXG4gICAgdG91Y2hab29tUm90YXRlXG59O1xuXG5leHBvcnQgZGVmYXVsdCBmdW5jdGlvbiBiaW5kSGFuZGxlcnMobWFwOiBNYXAsIG9wdGlvbnM6IHtpbnRlcmFjdGl2ZTogYm9vbGVhbiwgY2xpY2tUb2xlcmFuY2U6IG51bWJlcn0pIHtcbiAgICBjb25zdCBlbCA9IG1hcC5nZXRDYW52YXNDb250YWluZXIoKTtcbiAgICBsZXQgY29udGV4dE1lbnVFdmVudCA9IG51bGw7XG4gICAgbGV0IG1vdXNlRG93biA9IGZhbHNlO1xuICAgIGxldCBzdGFydFBvcyA9IG51bGw7XG5cbiAgICBmb3IgKGNvbnN0IG5hbWUgaW4gaGFuZGxlcnMpIHtcbiAgICAgICAgKG1hcDogYW55KVtuYW1lXSA9IG5ldyBoYW5kbGVyc1tuYW1lXShtYXAsIG9wdGlvbnMpO1xuICAgICAgICBpZiAob3B0aW9ucy5pbnRlcmFjdGl2ZSAmJiBvcHRpb25zW25hbWVdKSB7XG4gICAgICAgICAgICAobWFwOiBhbnkpW25hbWVdLmVuYWJsZShvcHRpb25zW25hbWVdKTtcbiAgICAgICAgfVxuICAgIH1cblxuICAgIERPTS5hZGRFdmVudExpc3RlbmVyKGVsLCAnbW91c2VvdXQnLCBvbk1vdXNlT3V0KTtcbiAgICBET00uYWRkRXZlbnRMaXN0ZW5lcihlbCwgJ21vdXNlZG93bicsIG9uTW91c2VEb3duKTtcbiAgICBET00uYWRkRXZlbnRMaXN0ZW5lcihlbCwgJ21vdXNldXAnLCBvbk1vdXNlVXApO1xuICAgIERPTS5hZGRFdmVudExpc3RlbmVyKGVsLCAnbW91c2Vtb3ZlJywgb25Nb3VzZU1vdmUpO1xuICAgIERPTS5hZGRFdmVudExpc3RlbmVyKGVsLCAnbW91c2VvdmVyJywgb25Nb3VzZU92ZXIpO1xuXG4gICAgLy8gQmluZCB0b3VjaHN0YXJ0IGFuZCB0b3VjaG1vdmUgd2l0aCBwYXNzaXZlOiBmYWxzZSBiZWNhdXNlLCBldmVuIHRob3VnaFxuICAgIC8vIHRoZXkgb25seSBmaXJlIGEgbWFwIGV2ZW50cyBhbmQgdGhlcmVmb3JlIGNvdWxkIHRoZW9yZXRpY2FsbHkgYmVcbiAgICAvLyBwYXNzaXZlLCBiaW5kaW5nIHdpdGggcGFzc2l2ZTogdHJ1ZSBjYXVzZXMgaU9TIG5vdCB0byByZXNwZWN0XG4gICAgLy8gZS5wcmV2ZW50RGVmYXVsdCgpIGluIF9vdGhlcl8gaGFuZGxlcnMsIGV2ZW4gaWYgdGhleSBhcmUgbm9uLXBhc3NpdmVcbiAgICAvLyAoc2VlIGh0dHBzOi8vYnVncy53ZWJraXQub3JnL3Nob3dfYnVnLmNnaT9pZD0xODQyNTEpXG4gICAgRE9NLmFkZEV2ZW50TGlzdGVuZXIoZWwsICd0b3VjaHN0YXJ0Jywgb25Ub3VjaFN0YXJ0LCB7cGFzc2l2ZTogZmFsc2V9KTtcbiAgICBET00uYWRkRXZlbnRMaXN0ZW5lcihlbCwgJ3RvdWNobW92ZScsIG9uVG91Y2hNb3ZlLCB7cGFzc2l2ZTogZmFsc2V9KTtcblxuICAgIERPTS5hZGRFdmVudExpc3RlbmVyKGVsLCAndG91Y2hlbmQnLCBvblRvdWNoRW5kKTtcbiAgICBET00uYWRkRXZlbnRMaXN0ZW5lcihlbCwgJ3RvdWNoY2FuY2VsJywgb25Ub3VjaENhbmNlbCk7XG4gICAgRE9NLmFkZEV2ZW50TGlzdGVuZXIoZWwsICdjbGljaycsIG9uQ2xpY2spO1xuICAgIERPTS5hZGRFdmVudExpc3RlbmVyKGVsLCAnZGJsY2xpY2snLCBvbkRibENsaWNrKTtcbiAgICBET00uYWRkRXZlbnRMaXN0ZW5lcihlbCwgJ2NvbnRleHRtZW51Jywgb25Db250ZXh0TWVudSk7XG4gICAgRE9NLmFkZEV2ZW50TGlzdGVuZXIoZWwsICd3aGVlbCcsIG9uV2hlZWwsIHtwYXNzaXZlOiBmYWxzZX0pO1xuXG4gICAgZnVuY3Rpb24gb25Nb3VzZURvd24oZTogTW91c2VFdmVudCkge1xuICAgICAgICBtb3VzZURvd24gPSB0cnVlO1xuICAgICAgICBzdGFydFBvcyA9IERPTS5tb3VzZVBvcyhlbCwgZSk7XG5cbiAgICAgICAgY29uc3QgbWFwRXZlbnQgPSBuZXcgTWFwTW91c2VFdmVudCgnbW91c2Vkb3duJywgbWFwLCBlKTtcbiAgICAgICAgbWFwLmZpcmUobWFwRXZlbnQpO1xuXG4gICAgICAgIGlmIChtYXBFdmVudC5kZWZhdWx0UHJldmVudGVkKSB7XG4gICAgICAgICAgICByZXR1cm47XG4gICAgICAgIH1cblxuICAgICAgICBpZiAob3B0aW9ucy5pbnRlcmFjdGl2ZSAmJiAhbWFwLmRvdWJsZUNsaWNrWm9vbS5pc0FjdGl2ZSgpKSB7XG4gICAgICAgICAgICBtYXAuc3RvcCgpO1xuICAgICAgICB9XG5cbiAgICAgICAgbWFwLmJveFpvb20ub25Nb3VzZURvd24oZSk7XG5cbiAgICAgICAgaWYgKCFtYXAuYm94Wm9vbS5pc0FjdGl2ZSgpICYmICFtYXAuZHJhZ1Bhbi5pc0FjdGl2ZSgpKSB7XG4gICAgICAgICAgICBtYXAuZHJhZ1JvdGF0ZS5vbk1vdXNlRG93bihlKTtcbiAgICAgICAgfVxuXG4gICAgICAgIGlmICghbWFwLmJveFpvb20uaXNBY3RpdmUoKSAmJiAhbWFwLmRyYWdSb3RhdGUuaXNBY3RpdmUoKSkge1xuICAgICAgICAgICAgbWFwLmRyYWdQYW4ub25Nb3VzZURvd24oZSk7XG4gICAgICAgIH1cbiAgICB9XG5cbiAgICBmdW5jdGlvbiBvbk1vdXNlVXAoZTogTW91c2VFdmVudCkge1xuICAgICAgICBjb25zdCByb3RhdGluZyA9IG1hcC5kcmFnUm90YXRlLmlzQWN0aXZlKCk7XG5cbiAgICAgICAgaWYgKGNvbnRleHRNZW51RXZlbnQgJiYgIXJvdGF0aW5nKSB7XG4gICAgICAgICAgICAvLyBUaGlzIHdpbGwgYmUgdGhlIGNhc2UgZm9yIE1hY1xuICAgICAgICAgICAgbWFwLmZpcmUobmV3IE1hcE1vdXNlRXZlbnQoJ2NvbnRleHRtZW51JywgbWFwLCBjb250ZXh0TWVudUV2ZW50KSk7XG4gICAgICAgIH1cblxuICAgICAgICBjb250ZXh0TWVudUV2ZW50ID0gbnVsbDtcbiAgICAgICAgbW91c2VEb3duID0gZmFsc2U7XG5cbiAgICAgICAgbWFwLmZpcmUobmV3IE1hcE1vdXNlRXZlbnQoJ21vdXNldXAnLCBtYXAsIGUpKTtcbiAgICB9XG5cbiAgICBmdW5jdGlvbiBvbk1vdXNlTW92ZShlOiBNb3VzZUV2ZW50KSB7XG4gICAgICAgIGlmIChtYXAuZHJhZ1Bhbi5pc0FjdGl2ZSgpKSByZXR1cm47XG4gICAgICAgIGlmIChtYXAuZHJhZ1JvdGF0ZS5pc0FjdGl2ZSgpKSByZXR1cm47XG5cbiAgICAgICAgbGV0IHRhcmdldDogP05vZGUgPSAoZS50YXJnZXQ6IGFueSk7XG4gICAgICAgIHdoaWxlICh0YXJnZXQgJiYgdGFyZ2V0ICE9PSBlbCkgdGFyZ2V0ID0gdGFyZ2V0LnBhcmVudE5vZGU7XG4gICAgICAgIGlmICh0YXJnZXQgIT09IGVsKSByZXR1cm47XG5cbiAgICAgICAgbWFwLmZpcmUobmV3IE1hcE1vdXNlRXZlbnQoJ21vdXNlbW92ZScsIG1hcCwgZSkpO1xuICAgIH1cblxuICAgIGZ1bmN0aW9uIG9uTW91c2VPdmVyKGU6IE1vdXNlRXZlbnQpIHtcbiAgICAgICAgbGV0IHRhcmdldDogP05vZGUgPSAoZS50YXJnZXQ6IGFueSk7XG4gICAgICAgIHdoaWxlICh0YXJnZXQgJiYgdGFyZ2V0ICE9PSBlbCkgdGFyZ2V0ID0gdGFyZ2V0LnBhcmVudE5vZGU7XG4gICAgICAgIGlmICh0YXJnZXQgIT09IGVsKSByZXR1cm47XG5cbiAgICAgICAgbWFwLmZpcmUobmV3IE1hcE1vdXNlRXZlbnQoJ21vdXNlb3ZlcicsIG1hcCwgZSkpO1xuICAgIH1cblxuICAgIGZ1bmN0aW9uIG9uTW91c2VPdXQoZTogTW91c2VFdmVudCkge1xuICAgICAgICBtYXAuZmlyZShuZXcgTWFwTW91c2VFdmVudCgnbW91c2VvdXQnLCBtYXAsIGUpKTtcbiAgICB9XG5cbiAgICBmdW5jdGlvbiBvblRvdWNoU3RhcnQoZTogVG91Y2hFdmVudCkge1xuICAgICAgICBjb25zdCBtYXBFdmVudCA9IG5ldyBNYXBUb3VjaEV2ZW50KCd0b3VjaHN0YXJ0JywgbWFwLCBlKTtcbiAgICAgICAgbWFwLmZpcmUobWFwRXZlbnQpO1xuXG4gICAgICAgIGlmIChtYXBFdmVudC5kZWZhdWx0UHJldmVudGVkKSB7XG4gICAgICAgICAgICByZXR1cm47XG4gICAgICAgIH1cblxuICAgICAgICBpZiAob3B0aW9ucy5pbnRlcmFjdGl2ZSkge1xuICAgICAgICAgICAgbWFwLnN0b3AoKTtcbiAgICAgICAgfVxuXG4gICAgICAgIGlmICghbWFwLmJveFpvb20uaXNBY3RpdmUoKSAmJiAhbWFwLmRyYWdSb3RhdGUuaXNBY3RpdmUoKSkge1xuICAgICAgICAgICAgbWFwLmRyYWdQYW4ub25Ub3VjaFN0YXJ0KGUpO1xuICAgICAgICB9XG5cbiAgICAgICAgbWFwLnRvdWNoWm9vbVJvdGF0ZS5vblN0YXJ0KGUpO1xuICAgICAgICBtYXAuZG91YmxlQ2xpY2tab29tLm9uVG91Y2hTdGFydChtYXBFdmVudCk7XG4gICAgfVxuXG4gICAgZnVuY3Rpb24gb25Ub3VjaE1vdmUoZTogVG91Y2hFdmVudCkge1xuICAgICAgICBtYXAuZmlyZShuZXcgTWFwVG91Y2hFdmVudCgndG91Y2htb3ZlJywgbWFwLCBlKSk7XG4gICAgfVxuXG4gICAgZnVuY3Rpb24gb25Ub3VjaEVuZChlOiBUb3VjaEV2ZW50KSB7XG4gICAgICAgIG1hcC5maXJlKG5ldyBNYXBUb3VjaEV2ZW50KCd0b3VjaGVuZCcsIG1hcCwgZSkpO1xuICAgIH1cblxuICAgIGZ1bmN0aW9uIG9uVG91Y2hDYW5jZWwoZTogVG91Y2hFdmVudCkge1xuICAgICAgICBtYXAuZmlyZShuZXcgTWFwVG91Y2hFdmVudCgndG91Y2hjYW5jZWwnLCBtYXAsIGUpKTtcbiAgICB9XG5cbiAgICBmdW5jdGlvbiBvbkNsaWNrKGU6IE1vdXNlRXZlbnQpIHtcbiAgICAgICAgY29uc3QgcG9zID0gRE9NLm1vdXNlUG9zKGVsLCBlKTtcbiAgICAgICAgaWYgKHBvcy5lcXVhbHMoc3RhcnRQb3MpIHx8IHBvcy5kaXN0KHN0YXJ0UG9zKSA8IG9wdGlvbnMuY2xpY2tUb2xlcmFuY2UpIHtcbiAgICAgICAgICAgIG1hcC5maXJlKG5ldyBNYXBNb3VzZUV2ZW50KCdjbGljaycsIG1hcCwgZSkpO1xuICAgICAgICB9XG4gICAgfVxuXG4gICAgZnVuY3Rpb24gb25EYmxDbGljayhlOiBNb3VzZUV2ZW50KSB7XG4gICAgICAgIGNvbnN0IG1hcEV2ZW50ID0gbmV3IE1hcE1vdXNlRXZlbnQoJ2RibGNsaWNrJywgbWFwLCBlKTtcbiAgICAgICAgbWFwLmZpcmUobWFwRXZlbnQpO1xuXG4gICAgICAgIGlmIChtYXBFdmVudC5kZWZhdWx0UHJldmVudGVkKSB7XG4gICAgICAgICAgICByZXR1cm47XG4gICAgICAgIH1cblxuICAgICAgICBtYXAuZG91YmxlQ2xpY2tab29tLm9uRGJsQ2xpY2sobWFwRXZlbnQpO1xuICAgIH1cblxuICAgIGZ1bmN0aW9uIG9uQ29udGV4dE1lbnUoZTogTW91c2VFdmVudCkge1xuICAgICAgICBjb25zdCByb3RhdGluZyA9IG1hcC5kcmFnUm90YXRlLmlzQWN0aXZlKCk7XG4gICAgICAgIGlmICghbW91c2VEb3duICYmICFyb3RhdGluZykge1xuICAgICAgICAgICAgLy8gV2luZG93czogY29udGV4dG1lbnUgZmlyZWQgb24gbW91c2V1cCwgc28gZmlyZSBldmVudCBub3dcbiAgICAgICAgICAgIG1hcC5maXJlKG5ldyBNYXBNb3VzZUV2ZW50KCdjb250ZXh0bWVudScsIG1hcCwgZSkpO1xuICAgICAgICB9IGVsc2UgaWYgKG1vdXNlRG93bikge1xuICAgICAgICAgICAgLy8gTWFjOiBjb250ZXh0bWVudSBmaXJlZCBvbiBtb3VzZWRvd247IHdlIHNhdmUgaXQgdW50aWwgbW91c2V1cCBmb3IgY29uc2lzdGVuY3kncyBzYWtlXG4gICAgICAgICAgICBjb250ZXh0TWVudUV2ZW50ID0gZTtcbiAgICAgICAgfVxuXG4gICAgICAgIGUucHJldmVudERlZmF1bHQoKTtcbiAgICB9XG5cbiAgICBmdW5jdGlvbiBvbldoZWVsKGU6IFdoZWVsRXZlbnQpIHtcbiAgICAgICAgaWYgKG9wdGlvbnMuaW50ZXJhY3RpdmUpIHtcbiAgICAgICAgICAgIG1hcC5zdG9wKCk7XG4gICAgICAgIH1cblxuICAgICAgICBjb25zdCBtYXBFdmVudCA9IG5ldyBNYXBXaGVlbEV2ZW50KCd3aGVlbCcsIG1hcCwgZSk7XG4gICAgICAgIG1hcC5maXJlKG1hcEV2ZW50KTtcblxuICAgICAgICBpZiAobWFwRXZlbnQuZGVmYXVsdFByZXZlbnRlZCkge1xuICAgICAgICAgICAgcmV0dXJuO1xuICAgICAgICB9XG5cbiAgICAgICAgbWFwLnNjcm9sbFpvb20ub25XaGVlbChlKTtcbiAgICB9XG59XG4iLCIvLyBAZmxvd1xuXG5pbXBvcnQge1xuICAgIGJpbmRBbGwsXG4gICAgZXh0ZW5kLFxuICAgIGRlZXBFcXVhbCxcbiAgICB3YXJuT25jZSxcbiAgICBjbGFtcCxcbiAgICB3cmFwLFxuICAgIGVhc2UgYXMgZGVmYXVsdEVhc2luZ1xufSBmcm9tICcuLi91dGlsL3V0aWwnO1xuaW1wb3J0IHsgbnVtYmVyIGFzIGludGVycG9sYXRlIH0gZnJvbSAnLi4vc3R5bGUtc3BlYy91dGlsL2ludGVycG9sYXRlJztcbmltcG9ydCBicm93c2VyIGZyb20gJy4uL3V0aWwvYnJvd3Nlcic7XG5pbXBvcnQgTG5nTGF0IGZyb20gJy4uL2dlby9sbmdfbGF0JztcbmltcG9ydCBMbmdMYXRCb3VuZHMgZnJvbSAnLi4vZ2VvL2xuZ19sYXRfYm91bmRzJztcbmltcG9ydCBQb2ludCBmcm9tICdAbWFwYm94L3BvaW50LWdlb21ldHJ5JztcbmltcG9ydCB7IEV2ZW50LCBFdmVudGVkIH0gZnJvbSAnLi4vdXRpbC9ldmVudGVkJztcblxuaW1wb3J0IHR5cGUgVHJhbnNmb3JtIGZyb20gJy4uL2dlby90cmFuc2Zvcm0nO1xuaW1wb3J0IHR5cGUge0xuZ0xhdExpa2V9IGZyb20gJy4uL2dlby9sbmdfbGF0JztcbmltcG9ydCB0eXBlIHtMbmdMYXRCb3VuZHNMaWtlfSBmcm9tICcuLi9nZW8vbG5nX2xhdF9ib3VuZHMnO1xuaW1wb3J0IHR5cGUge1Rhc2tJRH0gZnJvbSAnLi4vdXRpbC90YXNrX3F1ZXVlJztcbmltcG9ydCB0eXBlIHtQb2ludExpa2V9IGZyb20gJ0BtYXBib3gvcG9pbnQtZ2VvbWV0cnknO1xuXG4vKipcbiAqIE9wdGlvbnMgY29tbW9uIHRvIHtAbGluayBNYXAjanVtcFRvfSwge0BsaW5rIE1hcCNlYXNlVG99LCBhbmQge0BsaW5rIE1hcCNmbHlUb30sIGNvbnRyb2xsaW5nIHRoZSBkZXNpcmVkIGxvY2F0aW9uLFxuICogem9vbSwgYmVhcmluZywgYW5kIHBpdGNoIG9mIHRoZSBjYW1lcmEuIEFsbCBwcm9wZXJ0aWVzIGFyZSBvcHRpb25hbCwgYW5kIHdoZW4gYSBwcm9wZXJ0eSBpcyBvbWl0dGVkLCB0aGUgY3VycmVudFxuICogY2FtZXJhIHZhbHVlIGZvciB0aGF0IHByb3BlcnR5IHdpbGwgcmVtYWluIHVuY2hhbmdlZC5cbiAqXG4gKiBAdHlwZWRlZiB7T2JqZWN0fSBDYW1lcmFPcHRpb25zXG4gKiBAcHJvcGVydHkge0xuZ0xhdExpa2V9IGNlbnRlciBUaGUgZGVzaXJlZCBjZW50ZXIuXG4gKiBAcHJvcGVydHkge251bWJlcn0gem9vbSBUaGUgZGVzaXJlZCB6b29tIGxldmVsLlxuICogQHByb3BlcnR5IHtudW1iZXJ9IGJlYXJpbmcgVGhlIGRlc2lyZWQgYmVhcmluZywgaW4gZGVncmVlcy4gVGhlIGJlYXJpbmcgaXMgdGhlIGNvbXBhc3MgZGlyZWN0aW9uIHRoYXRcbiAqIGlzIFwidXBcIjsgZm9yIGV4YW1wbGUsIGEgYmVhcmluZyBvZiA5MMKwIG9yaWVudHMgdGhlIG1hcCBzbyB0aGF0IGVhc3QgaXMgdXAuXG4gKiBAcHJvcGVydHkge251bWJlcn0gcGl0Y2ggVGhlIGRlc2lyZWQgcGl0Y2gsIGluIGRlZ3JlZXMuXG4gKiBAcHJvcGVydHkge0xuZ0xhdExpa2V9IGFyb3VuZCBJZiBgem9vbWAgaXMgc3BlY2lmaWVkLCBgYXJvdW5kYCBkZXRlcm1pbmVzIHRoZSBwb2ludCBhcm91bmQgd2hpY2ggdGhlIHpvb20gaXMgY2VudGVyZWQuXG4gKi9cbmV4cG9ydCB0eXBlIENhbWVyYU9wdGlvbnMgPSB7XG4gICAgY2VudGVyPzogTG5nTGF0TGlrZSxcbiAgICB6b29tPzogbnVtYmVyLFxuICAgIGJlYXJpbmc/OiBudW1iZXIsXG4gICAgcGl0Y2g/OiBudW1iZXIsXG4gICAgYXJvdW5kPzogTG5nTGF0TGlrZVxufTtcblxuLyoqXG4gKiBPcHRpb25zIGNvbW1vbiB0byBtYXAgbW92ZW1lbnQgbWV0aG9kcyB0aGF0IGludm9sdmUgYW5pbWF0aW9uLCBzdWNoIGFzIHtAbGluayBNYXAjcGFuQnl9IGFuZFxuICoge0BsaW5rIE1hcCNlYXNlVG99LCBjb250cm9sbGluZyB0aGUgZHVyYXRpb24gYW5kIGVhc2luZyBmdW5jdGlvbiBvZiB0aGUgYW5pbWF0aW9uLiBBbGwgcHJvcGVydGllc1xuICogYXJlIG9wdGlvbmFsLlxuICpcbiAqIEB0eXBlZGVmIHtPYmplY3R9IEFuaW1hdGlvbk9wdGlvbnNcbiAqIEBwcm9wZXJ0eSB7bnVtYmVyfSBkdXJhdGlvbiBUaGUgYW5pbWF0aW9uJ3MgZHVyYXRpb24sIG1lYXN1cmVkIGluIG1pbGxpc2Vjb25kcy5cbiAqIEBwcm9wZXJ0eSB7RnVuY3Rpb259IGVhc2luZyBBIGZ1bmN0aW9uIHRha2luZyBhIHRpbWUgaW4gdGhlIHJhbmdlIDAuLjEgYW5kIHJldHVybmluZyBhIG51bWJlciB3aGVyZSAwIGlzXG4gKiAgIHRoZSBpbml0aWFsIHN0YXRlIGFuZCAxIGlzIHRoZSBmaW5hbCBzdGF0ZS5cbiAqIEBwcm9wZXJ0eSB7UG9pbnRMaWtlfSBvZmZzZXQgb2YgdGhlIHRhcmdldCBjZW50ZXIgcmVsYXRpdmUgdG8gcmVhbCBtYXAgY29udGFpbmVyIGNlbnRlciBhdCB0aGUgZW5kIG9mIGFuaW1hdGlvbi5cbiAqIEBwcm9wZXJ0eSB7Ym9vbGVhbn0gYW5pbWF0ZSBJZiBgZmFsc2VgLCBubyBhbmltYXRpb24gd2lsbCBvY2N1ci5cbiAqL1xuZXhwb3J0IHR5cGUgQW5pbWF0aW9uT3B0aW9ucyA9IHtcbiAgICBkdXJhdGlvbj86IG51bWJlcixcbiAgICBlYXNpbmc/OiAobnVtYmVyKSA9PiBudW1iZXIsXG4gICAgb2Zmc2V0PzogUG9pbnRMaWtlLFxuICAgIGFuaW1hdGU/OiBib29sZWFuXG59O1xuXG4vKipcbiAqIE9wdGlvbnMgZm9yIHNldHRpbmcgcGFkZGluZyBvbiBhIGNhbGwgdG8ge0BsaW5rIE1hcCNmaXRCb3VuZHN9LiBBbGwgcHJvcGVydGllcyBvZiB0aGlzIG9iamVjdCBtdXN0IGJlXG4gKiBub24tbmVnYXRpdmUgaW50ZWdlcnMuXG4gKlxuICogQHR5cGVkZWYge09iamVjdH0gUGFkZGluZ09wdGlvbnNcbiAqIEBwcm9wZXJ0eSB7bnVtYmVyfSB0b3AgUGFkZGluZyBpbiBwaXhlbHMgZnJvbSB0aGUgdG9wIG9mIHRoZSBtYXAgY2FudmFzLlxuICogQHByb3BlcnR5IHtudW1iZXJ9IGJvdHRvbSBQYWRkaW5nIGluIHBpeGVscyBmcm9tIHRoZSBib3R0b20gb2YgdGhlIG1hcCBjYW52YXMuXG4gKiBAcHJvcGVydHkge251bWJlcn0gbGVmdCBQYWRkaW5nIGluIHBpeGVscyBmcm9tIHRoZSBsZWZ0IG9mIHRoZSBtYXAgY2FudmFzLlxuICogQHByb3BlcnR5IHtudW1iZXJ9IHJpZ2h0IFBhZGRpbmcgaW4gcGl4ZWxzIGZyb20gdGhlIHJpZ2h0IG9mIHRoZSBtYXAgY2FudmFzLlxuICovXG5cbmNsYXNzIENhbWVyYSBleHRlbmRzIEV2ZW50ZWQge1xuICAgIHRyYW5zZm9ybTogVHJhbnNmb3JtO1xuICAgIF9tb3Zpbmc6IGJvb2xlYW47XG4gICAgX3pvb21pbmc6IGJvb2xlYW47XG4gICAgX3JvdGF0aW5nOiBib29sZWFuO1xuICAgIF9waXRjaGluZzogYm9vbGVhbjtcblxuICAgIF9iZWFyaW5nU25hcDogbnVtYmVyO1xuICAgIF9lYXNlRW5kVGltZW91dElEOiBUaW1lb3V0SUQ7XG4gICAgX2Vhc2VTdGFydDogbnVtYmVyO1xuICAgIF9lYXNlT3B0aW9uczoge2R1cmF0aW9uOiBudW1iZXIsIGVhc2luZzogKG51bWJlcikgPT4gbnVtYmVyfTtcblxuICAgIF9vbkVhc2VGcmFtZTogKG51bWJlcikgPT4gdm9pZDtcbiAgICBfb25FYXNlRW5kOiAoKSA9PiB2b2lkO1xuICAgIF9lYXNlRnJhbWVJZDogP1Rhc2tJRDtcblxuICAgICtfcmVxdWVzdFJlbmRlckZyYW1lOiAoKCkgPT4gdm9pZCkgPT4gVGFza0lEO1xuICAgICtfY2FuY2VsUmVuZGVyRnJhbWU6IChUYXNrSUQpID0+IHZvaWQ7XG5cbiAgICBjb25zdHJ1Y3Rvcih0cmFuc2Zvcm06IFRyYW5zZm9ybSwgb3B0aW9uczoge2JlYXJpbmdTbmFwOiBudW1iZXJ9KSB7XG4gICAgICAgIHN1cGVyKCk7XG4gICAgICAgIHRoaXMuX21vdmluZyA9IGZhbHNlO1xuICAgICAgICB0aGlzLl96b29taW5nID0gZmFsc2U7XG4gICAgICAgIHRoaXMudHJhbnNmb3JtID0gdHJhbnNmb3JtO1xuICAgICAgICB0aGlzLl9iZWFyaW5nU25hcCA9IG9wdGlvbnMuYmVhcmluZ1NuYXA7XG5cbiAgICAgICAgYmluZEFsbChbJ19yZW5kZXJGcmFtZUNhbGxiYWNrJ10sIHRoaXMpO1xuICAgIH1cblxuICAgIC8qKlxuICAgICAqIFJldHVybnMgdGhlIG1hcCdzIGdlb2dyYXBoaWNhbCBjZW50ZXJwb2ludC5cbiAgICAgKlxuICAgICAqIEBtZW1iZXJvZiBNYXAjXG4gICAgICogQHJldHVybnMgVGhlIG1hcCdzIGdlb2dyYXBoaWNhbCBjZW50ZXJwb2ludC5cbiAgICAgKi9cbiAgICBnZXRDZW50ZXIoKTogTG5nTGF0IHsgcmV0dXJuIHRoaXMudHJhbnNmb3JtLmNlbnRlcjsgfVxuXG4gICAgLyoqXG4gICAgICogU2V0cyB0aGUgbWFwJ3MgZ2VvZ3JhcGhpY2FsIGNlbnRlcnBvaW50LiBFcXVpdmFsZW50IHRvIGBqdW1wVG8oe2NlbnRlcjogY2VudGVyfSlgLlxuICAgICAqXG4gICAgICogQG1lbWJlcm9mIE1hcCNcbiAgICAgKiBAcGFyYW0gY2VudGVyIFRoZSBjZW50ZXJwb2ludCB0byBzZXQuXG4gICAgICogQHBhcmFtIGV2ZW50RGF0YSBBZGRpdGlvbmFsIHByb3BlcnRpZXMgdG8gYmUgYWRkZWQgdG8gZXZlbnQgb2JqZWN0cyBvZiBldmVudHMgdHJpZ2dlcmVkIGJ5IHRoaXMgbWV0aG9kLlxuICAgICAqIEBmaXJlcyBtb3Zlc3RhcnRcbiAgICAgKiBAZmlyZXMgbW92ZWVuZFxuICAgICAqIEByZXR1cm5zIHtNYXB9IGB0aGlzYFxuICAgICAqIEBleGFtcGxlXG4gICAgICogbWFwLnNldENlbnRlcihbLTc0LCAzOF0pO1xuICAgICAqL1xuICAgIHNldENlbnRlcihjZW50ZXI6IExuZ0xhdExpa2UsIGV2ZW50RGF0YT86IE9iamVjdCkge1xuICAgICAgICByZXR1cm4gdGhpcy5qdW1wVG8oe2NlbnRlcjogY2VudGVyfSwgZXZlbnREYXRhKTtcbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBQYW5zIHRoZSBtYXAgYnkgdGhlIHNwZWNpZmllZCBvZmZlc3QuXG4gICAgICpcbiAgICAgKiBAbWVtYmVyb2YgTWFwI1xuICAgICAqIEBwYXJhbSBvZmZzZXQgYHhgIGFuZCBgeWAgY29vcmRpbmF0ZXMgYnkgd2hpY2ggdG8gcGFuIHRoZSBtYXAuXG4gICAgICogQHBhcmFtIG9wdGlvbnNcbiAgICAgKiBAcGFyYW0gZXZlbnREYXRhIEFkZGl0aW9uYWwgcHJvcGVydGllcyB0byBiZSBhZGRlZCB0byBldmVudCBvYmplY3RzIG9mIGV2ZW50cyB0cmlnZ2VyZWQgYnkgdGhpcyBtZXRob2QuXG4gICAgICogQGZpcmVzIG1vdmVzdGFydFxuICAgICAqIEBmaXJlcyBtb3ZlZW5kXG4gICAgICogQHJldHVybnMge01hcH0gYHRoaXNgXG4gICAgICogQHNlZSBbTmF2aWdhdGUgdGhlIG1hcCB3aXRoIGdhbWUtbGlrZSBjb250cm9sc10oaHR0cHM6Ly93d3cubWFwYm94LmNvbS9tYXBib3gtZ2wtanMvZXhhbXBsZS9nYW1lLWNvbnRyb2xzLylcbiAgICAgKi9cbiAgICBwYW5CeShvZmZzZXQ6IFBvaW50TGlrZSwgb3B0aW9ucz86IEFuaW1hdGlvbk9wdGlvbnMsIGV2ZW50RGF0YT86IE9iamVjdCkge1xuICAgICAgICBvZmZzZXQgPSBQb2ludC5jb252ZXJ0KG9mZnNldCkubXVsdCgtMSk7XG4gICAgICAgIHJldHVybiB0aGlzLnBhblRvKHRoaXMudHJhbnNmb3JtLmNlbnRlciwgZXh0ZW5kKHtvZmZzZXR9LCBvcHRpb25zKSwgZXZlbnREYXRhKTtcbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBQYW5zIHRoZSBtYXAgdG8gdGhlIHNwZWNpZmllZCBsb2NhdGlvbiwgd2l0aCBhbiBhbmltYXRlZCB0cmFuc2l0aW9uLlxuICAgICAqXG4gICAgICogQG1lbWJlcm9mIE1hcCNcbiAgICAgKiBAcGFyYW0gbG5nbGF0IFRoZSBsb2NhdGlvbiB0byBwYW4gdGhlIG1hcCB0by5cbiAgICAgKiBAcGFyYW0gb3B0aW9uc1xuICAgICAqIEBwYXJhbSBldmVudERhdGEgQWRkaXRpb25hbCBwcm9wZXJ0aWVzIHRvIGJlIGFkZGVkIHRvIGV2ZW50IG9iamVjdHMgb2YgZXZlbnRzIHRyaWdnZXJlZCBieSB0aGlzIG1ldGhvZC5cbiAgICAgKiBAZmlyZXMgbW92ZXN0YXJ0XG4gICAgICogQGZpcmVzIG1vdmVlbmRcbiAgICAgKiBAcmV0dXJucyB7TWFwfSBgdGhpc2BcbiAgICAgKi9cbiAgICBwYW5UbyhsbmdsYXQ6IExuZ0xhdExpa2UsIG9wdGlvbnM/OiBBbmltYXRpb25PcHRpb25zLCBldmVudERhdGE/OiBPYmplY3QpIHtcbiAgICAgICAgcmV0dXJuIHRoaXMuZWFzZVRvKGV4dGVuZCh7XG4gICAgICAgICAgICBjZW50ZXI6IGxuZ2xhdFxuICAgICAgICB9LCBvcHRpb25zKSwgZXZlbnREYXRhKTtcbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBSZXR1cm5zIHRoZSBtYXAncyBjdXJyZW50IHpvb20gbGV2ZWwuXG4gICAgICpcbiAgICAgKiBAbWVtYmVyb2YgTWFwI1xuICAgICAqIEByZXR1cm5zIFRoZSBtYXAncyBjdXJyZW50IHpvb20gbGV2ZWwuXG4gICAgICovXG4gICAgZ2V0Wm9vbSgpOiBudW1iZXIgeyByZXR1cm4gdGhpcy50cmFuc2Zvcm0uem9vbTsgfVxuXG4gICAgLyoqXG4gICAgICogU2V0cyB0aGUgbWFwJ3Mgem9vbSBsZXZlbC4gRXF1aXZhbGVudCB0byBganVtcFRvKHt6b29tOiB6b29tfSlgLlxuICAgICAqXG4gICAgICogQG1lbWJlcm9mIE1hcCNcbiAgICAgKiBAcGFyYW0gem9vbSBUaGUgem9vbSBsZXZlbCB0byBzZXQgKDAtMjApLlxuICAgICAqIEBwYXJhbSBldmVudERhdGEgQWRkaXRpb25hbCBwcm9wZXJ0aWVzIHRvIGJlIGFkZGVkIHRvIGV2ZW50IG9iamVjdHMgb2YgZXZlbnRzIHRyaWdnZXJlZCBieSB0aGlzIG1ldGhvZC5cbiAgICAgKiBAZmlyZXMgbW92ZXN0YXJ0XG4gICAgICogQGZpcmVzIHpvb21zdGFydFxuICAgICAqIEBmaXJlcyBtb3ZlXG4gICAgICogQGZpcmVzIHpvb21cbiAgICAgKiBAZmlyZXMgbW92ZWVuZFxuICAgICAqIEBmaXJlcyB6b29tZW5kXG4gICAgICogQHJldHVybnMge01hcH0gYHRoaXNgXG4gICAgICogQGV4YW1wbGVcbiAgICAgKiAvLyB6b29tIHRoZSBtYXAgdG8gNVxuICAgICAqIG1hcC5zZXRab29tKDUpO1xuICAgICAqL1xuICAgIHNldFpvb20oem9vbTogbnVtYmVyLCBldmVudERhdGE/OiBPYmplY3QpIHtcbiAgICAgICAgdGhpcy5qdW1wVG8oe3pvb206IHpvb219LCBldmVudERhdGEpO1xuICAgICAgICByZXR1cm4gdGhpcztcbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBab29tcyB0aGUgbWFwIHRvIHRoZSBzcGVjaWZpZWQgem9vbSBsZXZlbCwgd2l0aCBhbiBhbmltYXRlZCB0cmFuc2l0aW9uLlxuICAgICAqXG4gICAgICogQG1lbWJlcm9mIE1hcCNcbiAgICAgKiBAcGFyYW0gem9vbSBUaGUgem9vbSBsZXZlbCB0byB0cmFuc2l0aW9uIHRvLlxuICAgICAqIEBwYXJhbSBvcHRpb25zXG4gICAgICogQHBhcmFtIGV2ZW50RGF0YSBBZGRpdGlvbmFsIHByb3BlcnRpZXMgdG8gYmUgYWRkZWQgdG8gZXZlbnQgb2JqZWN0cyBvZiBldmVudHMgdHJpZ2dlcmVkIGJ5IHRoaXMgbWV0aG9kLlxuICAgICAqIEBmaXJlcyBtb3Zlc3RhcnRcbiAgICAgKiBAZmlyZXMgem9vbXN0YXJ0XG4gICAgICogQGZpcmVzIG1vdmVcbiAgICAgKiBAZmlyZXMgem9vbVxuICAgICAqIEBmaXJlcyBtb3ZlZW5kXG4gICAgICogQGZpcmVzIHpvb21lbmRcbiAgICAgKiBAcmV0dXJucyB7TWFwfSBgdGhpc2BcbiAgICAgKi9cbiAgICB6b29tVG8oem9vbTogbnVtYmVyLCBvcHRpb25zOiA/IEFuaW1hdGlvbk9wdGlvbnMsIGV2ZW50RGF0YT86IE9iamVjdCkge1xuICAgICAgICByZXR1cm4gdGhpcy5lYXNlVG8oZXh0ZW5kKHtcbiAgICAgICAgICAgIHpvb206IHpvb21cbiAgICAgICAgfSwgb3B0aW9ucyksIGV2ZW50RGF0YSk7XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogSW5jcmVhc2VzIHRoZSBtYXAncyB6b29tIGxldmVsIGJ5IDEuXG4gICAgICpcbiAgICAgKiBAbWVtYmVyb2YgTWFwI1xuICAgICAqIEBwYXJhbSBvcHRpb25zXG4gICAgICogQHBhcmFtIGV2ZW50RGF0YSBBZGRpdGlvbmFsIHByb3BlcnRpZXMgdG8gYmUgYWRkZWQgdG8gZXZlbnQgb2JqZWN0cyBvZiBldmVudHMgdHJpZ2dlcmVkIGJ5IHRoaXMgbWV0aG9kLlxuICAgICAqIEBmaXJlcyBtb3Zlc3RhcnRcbiAgICAgKiBAZmlyZXMgem9vbXN0YXJ0XG4gICAgICogQGZpcmVzIG1vdmVcbiAgICAgKiBAZmlyZXMgem9vbVxuICAgICAqIEBmaXJlcyBtb3ZlZW5kXG4gICAgICogQGZpcmVzIHpvb21lbmRcbiAgICAgKiBAcmV0dXJucyB7TWFwfSBgdGhpc2BcbiAgICAgKi9cbiAgICB6b29tSW4ob3B0aW9ucz86IEFuaW1hdGlvbk9wdGlvbnMsIGV2ZW50RGF0YT86IE9iamVjdCkge1xuICAgICAgICB0aGlzLnpvb21Ubyh0aGlzLmdldFpvb20oKSArIDEsIG9wdGlvbnMsIGV2ZW50RGF0YSk7XG4gICAgICAgIHJldHVybiB0aGlzO1xuICAgIH1cblxuICAgIC8qKlxuICAgICAqIERlY3JlYXNlcyB0aGUgbWFwJ3Mgem9vbSBsZXZlbCBieSAxLlxuICAgICAqXG4gICAgICogQG1lbWJlcm9mIE1hcCNcbiAgICAgKiBAcGFyYW0gb3B0aW9uc1xuICAgICAqIEBwYXJhbSBldmVudERhdGEgQWRkaXRpb25hbCBwcm9wZXJ0aWVzIHRvIGJlIGFkZGVkIHRvIGV2ZW50IG9iamVjdHMgb2YgZXZlbnRzIHRyaWdnZXJlZCBieSB0aGlzIG1ldGhvZC5cbiAgICAgKiBAZmlyZXMgbW92ZXN0YXJ0XG4gICAgICogQGZpcmVzIHpvb21zdGFydFxuICAgICAqIEBmaXJlcyBtb3ZlXG4gICAgICogQGZpcmVzIHpvb21cbiAgICAgKiBAZmlyZXMgbW92ZWVuZFxuICAgICAqIEBmaXJlcyB6b29tZW5kXG4gICAgICogQHJldHVybnMge01hcH0gYHRoaXNgXG4gICAgICovXG4gICAgem9vbU91dChvcHRpb25zPzogQW5pbWF0aW9uT3B0aW9ucywgZXZlbnREYXRhPzogT2JqZWN0KSB7XG4gICAgICAgIHRoaXMuem9vbVRvKHRoaXMuZ2V0Wm9vbSgpIC0gMSwgb3B0aW9ucywgZXZlbnREYXRhKTtcbiAgICAgICAgcmV0dXJuIHRoaXM7XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogUmV0dXJucyB0aGUgbWFwJ3MgY3VycmVudCBiZWFyaW5nLiBUaGUgYmVhcmluZyBpcyB0aGUgY29tcGFzcyBkaXJlY3Rpb24gdGhhdCBpcyBcXFwidXBcXFwiOyBmb3IgZXhhbXBsZSwgYSBiZWFyaW5nXG4gICAgICogb2YgOTDCsCBvcmllbnRzIHRoZSBtYXAgc28gdGhhdCBlYXN0IGlzIHVwLlxuICAgICAqXG4gICAgICogQG1lbWJlcm9mIE1hcCNcbiAgICAgKiBAcmV0dXJucyBUaGUgbWFwJ3MgY3VycmVudCBiZWFyaW5nLlxuICAgICAqIEBzZWUgW05hdmlnYXRlIHRoZSBtYXAgd2l0aCBnYW1lLWxpa2UgY29udHJvbHNdKGh0dHBzOi8vd3d3Lm1hcGJveC5jb20vbWFwYm94LWdsLWpzL2V4YW1wbGUvZ2FtZS1jb250cm9scy8pXG4gICAgICovXG4gICAgZ2V0QmVhcmluZygpOiBudW1iZXIgeyByZXR1cm4gdGhpcy50cmFuc2Zvcm0uYmVhcmluZzsgfVxuXG4gICAgLyoqXG4gICAgICogU2V0cyB0aGUgbWFwJ3MgYmVhcmluZyAocm90YXRpb24pLiBUaGUgYmVhcmluZyBpcyB0aGUgY29tcGFzcyBkaXJlY3Rpb24gdGhhdCBpcyBcXFwidXBcXFwiOyBmb3IgZXhhbXBsZSwgYSBiZWFyaW5nXG4gICAgICogb2YgOTDCsCBvcmllbnRzIHRoZSBtYXAgc28gdGhhdCBlYXN0IGlzIHVwLlxuICAgICAqXG4gICAgICogRXF1aXZhbGVudCB0byBganVtcFRvKHtiZWFyaW5nOiBiZWFyaW5nfSlgLlxuICAgICAqXG4gICAgICogQG1lbWJlcm9mIE1hcCNcbiAgICAgKiBAcGFyYW0gYmVhcmluZyBUaGUgZGVzaXJlZCBiZWFyaW5nLlxuICAgICAqIEBwYXJhbSBldmVudERhdGEgQWRkaXRpb25hbCBwcm9wZXJ0aWVzIHRvIGJlIGFkZGVkIHRvIGV2ZW50IG9iamVjdHMgb2YgZXZlbnRzIHRyaWdnZXJlZCBieSB0aGlzIG1ldGhvZC5cbiAgICAgKiBAZmlyZXMgbW92ZXN0YXJ0XG4gICAgICogQGZpcmVzIG1vdmVlbmRcbiAgICAgKiBAcmV0dXJucyB7TWFwfSBgdGhpc2BcbiAgICAgKiBAZXhhbXBsZVxuICAgICAqIC8vIHJvdGF0ZSB0aGUgbWFwIHRvIDkwIGRlZ3JlZXNcbiAgICAgKiBtYXAuc2V0QmVhcmluZyg5MCk7XG4gICAgICovXG4gICAgc2V0QmVhcmluZyhiZWFyaW5nOiBudW1iZXIsIGV2ZW50RGF0YT86IE9iamVjdCkge1xuICAgICAgICB0aGlzLmp1bXBUbyh7YmVhcmluZzogYmVhcmluZ30sIGV2ZW50RGF0YSk7XG4gICAgICAgIHJldHVybiB0aGlzO1xuICAgIH1cblxuICAgIC8qKlxuICAgICAqIFJvdGF0ZXMgdGhlIG1hcCB0byB0aGUgc3BlY2lmaWVkIGJlYXJpbmcsIHdpdGggYW4gYW5pbWF0ZWQgdHJhbnNpdGlvbi4gVGhlIGJlYXJpbmcgaXMgdGhlIGNvbXBhc3MgZGlyZWN0aW9uXG4gICAgICogdGhhdCBpcyBcXFwidXBcXFwiOyBmb3IgZXhhbXBsZSwgYSBiZWFyaW5nIG9mIDkwwrAgb3JpZW50cyB0aGUgbWFwIHNvIHRoYXQgZWFzdCBpcyB1cC5cbiAgICAgKlxuICAgICAqIEBtZW1iZXJvZiBNYXAjXG4gICAgICogQHBhcmFtIGJlYXJpbmcgVGhlIGRlc2lyZWQgYmVhcmluZy5cbiAgICAgKiBAcGFyYW0gb3B0aW9uc1xuICAgICAqIEBwYXJhbSBldmVudERhdGEgQWRkaXRpb25hbCBwcm9wZXJ0aWVzIHRvIGJlIGFkZGVkIHRvIGV2ZW50IG9iamVjdHMgb2YgZXZlbnRzIHRyaWdnZXJlZCBieSB0aGlzIG1ldGhvZC5cbiAgICAgKiBAZmlyZXMgbW92ZXN0YXJ0XG4gICAgICogQGZpcmVzIG1vdmVlbmRcbiAgICAgKiBAcmV0dXJucyB7TWFwfSBgdGhpc2BcbiAgICAgKi9cbiAgICByb3RhdGVUbyhiZWFyaW5nOiBudW1iZXIsIG9wdGlvbnM/OiBBbmltYXRpb25PcHRpb25zLCBldmVudERhdGE/OiBPYmplY3QpIHtcbiAgICAgICAgcmV0dXJuIHRoaXMuZWFzZVRvKGV4dGVuZCh7XG4gICAgICAgICAgICBiZWFyaW5nOiBiZWFyaW5nXG4gICAgICAgIH0sIG9wdGlvbnMpLCBldmVudERhdGEpO1xuICAgIH1cblxuICAgIC8qKlxuICAgICAqIFJvdGF0ZXMgdGhlIG1hcCBzbyB0aGF0IG5vcnRoIGlzIHVwICgwwrAgYmVhcmluZyksIHdpdGggYW4gYW5pbWF0ZWQgdHJhbnNpdGlvbi5cbiAgICAgKlxuICAgICAqIEBtZW1iZXJvZiBNYXAjXG4gICAgICogQHBhcmFtIG9wdGlvbnNcbiAgICAgKiBAcGFyYW0gZXZlbnREYXRhIEFkZGl0aW9uYWwgcHJvcGVydGllcyB0byBiZSBhZGRlZCB0byBldmVudCBvYmplY3RzIG9mIGV2ZW50cyB0cmlnZ2VyZWQgYnkgdGhpcyBtZXRob2QuXG4gICAgICogQGZpcmVzIG1vdmVzdGFydFxuICAgICAqIEBmaXJlcyBtb3ZlZW5kXG4gICAgICogQHJldHVybnMge01hcH0gYHRoaXNgXG4gICAgICovXG4gICAgcmVzZXROb3J0aChvcHRpb25zPzogQW5pbWF0aW9uT3B0aW9ucywgZXZlbnREYXRhPzogT2JqZWN0KSB7XG4gICAgICAgIHRoaXMucm90YXRlVG8oMCwgZXh0ZW5kKHtkdXJhdGlvbjogMTAwMH0sIG9wdGlvbnMpLCBldmVudERhdGEpO1xuICAgICAgICByZXR1cm4gdGhpcztcbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBTbmFwcyB0aGUgbWFwIHNvIHRoYXQgbm9ydGggaXMgdXAgKDDCsCBiZWFyaW5nKSwgaWYgdGhlIGN1cnJlbnQgYmVhcmluZyBpcyBjbG9zZSBlbm91Z2ggdG8gaXQgKGkuZS4gd2l0aGluIHRoZVxuICAgICAqIGBiZWFyaW5nU25hcGAgdGhyZXNob2xkKS5cbiAgICAgKlxuICAgICAqIEBtZW1iZXJvZiBNYXAjXG4gICAgICogQHBhcmFtIG9wdGlvbnNcbiAgICAgKiBAcGFyYW0gZXZlbnREYXRhIEFkZGl0aW9uYWwgcHJvcGVydGllcyB0byBiZSBhZGRlZCB0byBldmVudCBvYmplY3RzIG9mIGV2ZW50cyB0cmlnZ2VyZWQgYnkgdGhpcyBtZXRob2QuXG4gICAgICogQGZpcmVzIG1vdmVzdGFydFxuICAgICAqIEBmaXJlcyBtb3ZlZW5kXG4gICAgICogQHJldHVybnMge01hcH0gYHRoaXNgXG4gICAgICovXG4gICAgc25hcFRvTm9ydGgob3B0aW9ucz86IEFuaW1hdGlvbk9wdGlvbnMsIGV2ZW50RGF0YT86IE9iamVjdCkge1xuICAgICAgICBpZiAoTWF0aC5hYnModGhpcy5nZXRCZWFyaW5nKCkpIDwgdGhpcy5fYmVhcmluZ1NuYXApIHtcbiAgICAgICAgICAgIHJldHVybiB0aGlzLnJlc2V0Tm9ydGgob3B0aW9ucywgZXZlbnREYXRhKTtcbiAgICAgICAgfVxuICAgICAgICByZXR1cm4gdGhpcztcbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBSZXR1cm5zIHRoZSBtYXAncyBjdXJyZW50IHBpdGNoICh0aWx0KS5cbiAgICAgKlxuICAgICAqIEBtZW1iZXJvZiBNYXAjXG4gICAgICogQHJldHVybnMgVGhlIG1hcCdzIGN1cnJlbnQgcGl0Y2gsIG1lYXN1cmVkIGluIGRlZ3JlZXMgYXdheSBmcm9tIHRoZSBwbGFuZSBvZiB0aGUgc2NyZWVuLlxuICAgICAqL1xuICAgIGdldFBpdGNoKCk6IG51bWJlciB7IHJldHVybiB0aGlzLnRyYW5zZm9ybS5waXRjaDsgfVxuXG4gICAgLyoqXG4gICAgICogU2V0cyB0aGUgbWFwJ3MgcGl0Y2ggKHRpbHQpLiBFcXVpdmFsZW50IHRvIGBqdW1wVG8oe3BpdGNoOiBwaXRjaH0pYC5cbiAgICAgKlxuICAgICAqIEBtZW1iZXJvZiBNYXAjXG4gICAgICogQHBhcmFtIHBpdGNoIFRoZSBwaXRjaCB0byBzZXQsIG1lYXN1cmVkIGluIGRlZ3JlZXMgYXdheSBmcm9tIHRoZSBwbGFuZSBvZiB0aGUgc2NyZWVuICgwLTYwKS5cbiAgICAgKiBAcGFyYW0gZXZlbnREYXRhIEFkZGl0aW9uYWwgcHJvcGVydGllcyB0byBiZSBhZGRlZCB0byBldmVudCBvYmplY3RzIG9mIGV2ZW50cyB0cmlnZ2VyZWQgYnkgdGhpcyBtZXRob2QuXG4gICAgICogQGZpcmVzIHBpdGNoc3RhcnRcbiAgICAgKiBAZmlyZXMgbW92ZXN0YXJ0XG4gICAgICogQGZpcmVzIG1vdmVlbmRcbiAgICAgKiBAcmV0dXJucyB7TWFwfSBgdGhpc2BcbiAgICAgKi9cbiAgICBzZXRQaXRjaChwaXRjaDogbnVtYmVyLCBldmVudERhdGE/OiBPYmplY3QpIHtcbiAgICAgICAgdGhpcy5qdW1wVG8oe3BpdGNoOiBwaXRjaH0sIGV2ZW50RGF0YSk7XG4gICAgICAgIHJldHVybiB0aGlzO1xuICAgIH1cblxuICAgIC8qKlxuICAgICAqIEBtZW1iZXJvZiBNYXAjXG4gICAgICogQHBhcmFtIHtMYXRMbmdCb3VuZHNMaWtlfSBib3VuZHMgQ2FsY3VsYXRlIHRoZSBjZW50ZXIgZm9yIHRoZXNlIGJvdW5kcyBpbiB0aGUgdmlld3BvcnQgYW5kIHVzZVxuICAgICAqICAgICAgdGhlIGhpZ2hlc3Qgem9vbSBsZXZlbCB1cCB0byBhbmQgaW5jbHVkaW5nIGBNYXAjZ2V0TWF4Wm9vbSgpYCB0aGF0IGZpdHNcbiAgICAgKiAgICAgIGluIHRoZSB2aWV3cG9ydC4gTGF0TG5nQm91bmRzIHJlcHJlc2VudCBhIGJveCB0aGF0IGlzIGFsd2F5cyBheGlzLWFsaWduZWQgd2l0aCBiZWFyaW5nIDAuXG4gICAgICogQHBhcmFtIG9wdGlvbnNcbiAgICAgKiBAcGFyYW0ge251bWJlciB8IFBhZGRpbmdPcHRpb25zfSBbb3B0aW9ucy5wYWRkaW5nXSBUaGUgYW1vdW50IG9mIHBhZGRpbmcgaW4gcGl4ZWxzIHRvIGFkZCB0byB0aGUgZ2l2ZW4gYm91bmRzLlxuICAgICAqIEBwYXJhbSB7UG9pbnRMaWtlfSBbb3B0aW9ucy5vZmZzZXQ9WzAsIDBdXSBUaGUgY2VudGVyIG9mIHRoZSBnaXZlbiBib3VuZHMgcmVsYXRpdmUgdG8gdGhlIG1hcCdzIGNlbnRlciwgbWVhc3VyZWQgaW4gcGl4ZWxzLlxuICAgICAqIEBwYXJhbSB7bnVtYmVyfSBbb3B0aW9ucy5tYXhab29tXSBUaGUgbWF4aW11bSB6b29tIGxldmVsIHRvIGFsbG93IHdoZW4gdGhlIGNhbWVyYSB3b3VsZCB0cmFuc2l0aW9uIHRvIHRoZSBzcGVjaWZpZWQgYm91bmRzLlxuICAgICAqIEByZXR1cm5zIHtDYW1lcmFPcHRpb25zIHwgdm9pZH0gSWYgbWFwIGlzIGFibGUgdG8gZml0IHRvIHByb3ZpZGVkIGJvdW5kcywgcmV0dXJucyBgQ2FtZXJhT3B0aW9uc2Agd2l0aFxuICAgICAqICAgICAgYXQgbGVhc3QgYGNlbnRlcmAsIGB6b29tYCwgYGJlYXJpbmdgLCBgb2Zmc2V0YCwgYHBhZGRpbmdgLCBhbmQgYG1heFpvb21gLCBhcyB3ZWxsIGFzIGFueSBvdGhlclxuICAgICAqICAgICAgYG9wdGlvbnNgIHByb3ZpZGVkIGluIGFyZ3VtZW50cy4gSWYgbWFwIGlzIHVuYWJsZSB0byBmaXQsIG1ldGhvZCB3aWxsIHdhcm4gYW5kIHJldHVybiB1bmRlZmluZWQuXG4gICAgICogQGV4YW1wbGVcbiAgICAgKiB2YXIgYmJveCA9IFtbLTc5LCA0M10sIFstNzMsIDQ1XV07XG4gICAgICogdmFyIG5ld0NhbWVyYVRyYW5zZm9ybSA9IG1hcC5jYW1lcmFGb3JCb3VuZHMoYmJveCwge1xuICAgICAqICAgcGFkZGluZzoge3RvcDogMTAsIGJvdHRvbToyNSwgbGVmdDogMTUsIHJpZ2h0OiA1fVxuICAgICAqIH0pO1xuICAgICAqL1xuICAgIGNhbWVyYUZvckJvdW5kcyhib3VuZHM6IExuZ0xhdEJvdW5kc0xpa2UsIG9wdGlvbnM/OiBDYW1lcmFPcHRpb25zKTogdm9pZCB8IENhbWVyYU9wdGlvbnMgJiBBbmltYXRpb25PcHRpb25zIHtcbiAgICAgICAgYm91bmRzID0gTG5nTGF0Qm91bmRzLmNvbnZlcnQoYm91bmRzKTtcbiAgICAgICAgcmV0dXJuIHRoaXMuX2NhbWVyYUZvckJveEFuZEJlYXJpbmcoYm91bmRzLmdldE5vcnRoV2VzdCgpLCBib3VuZHMuZ2V0U291dGhFYXN0KCksIDAsIG9wdGlvbnMpO1xuICAgIH1cblxuICAgIC8qKlxuICAgICAqIENhbGN1bGF0ZSB0aGUgY2VudGVyIG9mIHRoZXNlIHR3byBwb2ludHMgaW4gdGhlIHZpZXdwb3J0IGFuZCB1c2VcbiAgICAgKiB0aGUgaGlnaGVzdCB6b29tIGxldmVsIHVwIHRvIGFuZCBpbmNsdWRpbmcgYE1hcCNnZXRNYXhab29tKClgIHRoYXQgZml0c1xuICAgICAqIHRoZSBwb2ludHMgaW4gdGhlIHZpZXdwb3J0IGF0IHRoZSBzcGVjaWZpZWQgYmVhcmluZy5cbiAgICAgKiBAbWVtYmVyb2YgTWFwI1xuICAgICAqIEBwYXJhbSB7TG5nTGF0TGlrZX0gcDAgRmlyc3QgcG9pbnRcbiAgICAgKiBAcGFyYW0ge0xuZ0xhdExpa2V9IHAxIFNlY29uZCBwb2ludFxuICAgICAqIEBwYXJhbSBiZWFyaW5nIERlc2lyZWQgbWFwIGJlYXJpbmcgYXQgZW5kIG9mIGFuaW1hdGlvbiwgaW4gZGVncmVlc1xuICAgICAqIEBwYXJhbSBvcHRpb25zXG4gICAgICogQHBhcmFtIHtudW1iZXIgfCBQYWRkaW5nT3B0aW9uc30gW29wdGlvbnMucGFkZGluZ10gVGhlIGFtb3VudCBvZiBwYWRkaW5nIGluIHBpeGVscyB0byBhZGQgdG8gdGhlIGdpdmVuIGJvdW5kcy5cbiAgICAgKiBAcGFyYW0ge1BvaW50TGlrZX0gW29wdGlvbnMub2Zmc2V0PVswLCAwXV0gVGhlIGNlbnRlciBvZiB0aGUgZ2l2ZW4gYm91bmRzIHJlbGF0aXZlIHRvIHRoZSBtYXAncyBjZW50ZXIsIG1lYXN1cmVkIGluIHBpeGVscy5cbiAgICAgKiBAcGFyYW0ge251bWJlcn0gW29wdGlvbnMubWF4Wm9vbV0gVGhlIG1heGltdW0gem9vbSBsZXZlbCB0byBhbGxvdyB3aGVuIHRoZSBjYW1lcmEgd291bGQgdHJhbnNpdGlvbiB0byB0aGUgc3BlY2lmaWVkIGJvdW5kcy5cbiAgICAgKiBAcmV0dXJucyB7Q2FtZXJhT3B0aW9ucyB8IHZvaWR9IElmIG1hcCBpcyBhYmxlIHRvIGZpdCB0byBwcm92aWRlZCBib3VuZHMsIHJldHVybnMgYENhbWVyYU9wdGlvbnNgIHdpdGhcbiAgICAgKiAgICAgIGF0IGxlYXN0IGBjZW50ZXJgLCBgem9vbWAsIGBiZWFyaW5nYCwgYG9mZnNldGAsIGBwYWRkaW5nYCwgYW5kIGBtYXhab29tYCwgYXMgd2VsbCBhcyBhbnkgb3RoZXJcbiAgICAgKiAgICAgIGBvcHRpb25zYCBwcm92aWRlZCBpbiBhcmd1bWVudHMuIElmIG1hcCBpcyB1bmFibGUgdG8gZml0LCBtZXRob2Qgd2lsbCB3YXJuIGFuZCByZXR1cm4gdW5kZWZpbmVkLlxuICAgICAqIEBwcml2YXRlXG4gICAgICogQGV4YW1wbGVcbiAgICAgKiB2YXIgcDAgPSBbLTc5LCA0M107XG4gICAgICogdmFyIHAxID0gWy03MywgNDVdO1xuICAgICAqIHZhciBiZWFyaW5nID0gOTA7XG4gICAgICogdmFyIG5ld0NhbWVyYVRyYW5zZm9ybSA9IG1hcC5fY2FtZXJhRm9yQm94QW5kQmVhcmluZyhwMCwgcDEsIGJlYXJpbmcsIHtcbiAgICAgKiAgIHBhZGRpbmc6IHt0b3A6IDEwLCBib3R0b206MjUsIGxlZnQ6IDE1LCByaWdodDogNX1cbiAgICAgKiB9KTtcbiAgICAgKi9cbiAgICBfY2FtZXJhRm9yQm94QW5kQmVhcmluZyhwMDogTG5nTGF0TGlrZSwgcDE6IExuZ0xhdExpa2UsIGJlYXJpbmc6IG51bWJlciwgb3B0aW9ucz86IENhbWVyYU9wdGlvbnMpOiB2b2lkIHwgQ2FtZXJhT3B0aW9ucyAmIEFuaW1hdGlvbk9wdGlvbnMge1xuICAgICAgICBvcHRpb25zID0gZXh0ZW5kKHtcbiAgICAgICAgICAgIHBhZGRpbmc6IHtcbiAgICAgICAgICAgICAgICB0b3A6IDAsXG4gICAgICAgICAgICAgICAgYm90dG9tOiAwLFxuICAgICAgICAgICAgICAgIHJpZ2h0OiAwLFxuICAgICAgICAgICAgICAgIGxlZnQ6IDBcbiAgICAgICAgICAgIH0sXG4gICAgICAgICAgICBvZmZzZXQ6IFswLCAwXSxcbiAgICAgICAgICAgIG1heFpvb206IHRoaXMudHJhbnNmb3JtLm1heFpvb21cbiAgICAgICAgfSwgb3B0aW9ucyk7XG5cbiAgICAgICAgaWYgKHR5cGVvZiBvcHRpb25zLnBhZGRpbmcgPT09ICdudW1iZXInKSB7XG4gICAgICAgICAgICBjb25zdCBwID0gb3B0aW9ucy5wYWRkaW5nO1xuICAgICAgICAgICAgb3B0aW9ucy5wYWRkaW5nID0ge1xuICAgICAgICAgICAgICAgIHRvcDogcCxcbiAgICAgICAgICAgICAgICBib3R0b206IHAsXG4gICAgICAgICAgICAgICAgcmlnaHQ6IHAsXG4gICAgICAgICAgICAgICAgbGVmdDogcFxuICAgICAgICAgICAgfTtcbiAgICAgICAgfVxuICAgICAgICBpZiAoIWRlZXBFcXVhbChPYmplY3Qua2V5cyhvcHRpb25zLnBhZGRpbmcpLnNvcnQoKGEsIGIpID0+IHtcbiAgICAgICAgICAgIGlmIChhIDwgYikgcmV0dXJuIC0xO1xuICAgICAgICAgICAgaWYgKGEgPiBiKSByZXR1cm4gMTtcbiAgICAgICAgICAgIHJldHVybiAwO1xuICAgICAgICB9KSwgW1wiYm90dG9tXCIsIFwibGVmdFwiLCBcInJpZ2h0XCIsIFwidG9wXCJdKSkge1xuICAgICAgICAgICAgd2Fybk9uY2UoXG4gICAgICAgICAgICAgICAgXCJvcHRpb25zLnBhZGRpbmcgbXVzdCBiZSBhIHBvc2l0aXZlIG51bWJlciwgb3IgYW4gT2JqZWN0IHdpdGgga2V5cyAnYm90dG9tJywgJ2xlZnQnLCAncmlnaHQnLCAndG9wJ1wiXG4gICAgICAgICAgICApO1xuICAgICAgICAgICAgcmV0dXJuO1xuICAgICAgICB9XG5cbiAgICAgICAgLy8gd2Ugc2VwYXJhdGUgdGhlIHBhc3NlZCBwYWRkaW5nIG9wdGlvbiBpbnRvIHR3byBwYXJ0cywgdGhlIHBhcnQgdGhhdCBkb2VzIG5vdCBhZmZlY3QgdGhlIG1hcCdzIGNlbnRlclxuICAgICAgICAvLyAobGF0ZXJhbCBhbmQgdmVydGljYWwgcGFkZGluZyksIGFuZCB0aGUgcGFydCB0aGF0IGRvZXMgKHBhZGRpbmdPZmZzZXQpLiBXZSBhZGQgdGhlIHBhZGRpbmcgb2Zmc2V0XG4gICAgICAgIC8vIHRvIHRoZSBvcHRpb25zIGBvZmZzZXRgIG9iamVjdCB3aGVyZSBpdCBjYW4gYWx0ZXIgdGhlIG1hcCdzIGNlbnRlciBpbiB0aGUgc3Vic2VxdWVudCBjYWxscyB0b1xuICAgICAgICAvLyBgZWFzZVRvYCBhbmQgYGZseVRvYC5cbiAgICAgICAgY29uc3QgcGFkZGluZ09mZnNldCA9IFsob3B0aW9ucy5wYWRkaW5nLmxlZnQgLSBvcHRpb25zLnBhZGRpbmcucmlnaHQpIC8gMiwgKG9wdGlvbnMucGFkZGluZy50b3AgLSBvcHRpb25zLnBhZGRpbmcuYm90dG9tKSAvIDJdLFxuICAgICAgICAgICAgbGF0ZXJhbFBhZGRpbmcgPSBNYXRoLm1pbihvcHRpb25zLnBhZGRpbmcucmlnaHQsIG9wdGlvbnMucGFkZGluZy5sZWZ0KSxcbiAgICAgICAgICAgIHZlcnRpY2FsUGFkZGluZyA9IE1hdGgubWluKG9wdGlvbnMucGFkZGluZy50b3AsIG9wdGlvbnMucGFkZGluZy5ib3R0b20pO1xuICAgICAgICBvcHRpb25zLm9mZnNldCA9IFtvcHRpb25zLm9mZnNldFswXSArIHBhZGRpbmdPZmZzZXRbMF0sIG9wdGlvbnMub2Zmc2V0WzFdICsgcGFkZGluZ09mZnNldFsxXV07XG5cbiAgICAgICAgY29uc3QgdHIgPSB0aGlzLnRyYW5zZm9ybTtcbiAgICAgICAgLy8gd2Ugd2FudCB0byBjYWxjdWxhdGUgdGhlIHVwcGVyIHJpZ2h0IGFuZCBsb3dlciBsZWZ0IG9mIHRoZSBib3ggZGVmaW5lZCBieSBwMCBhbmQgcDFcbiAgICAgICAgLy8gaW4gYSBjb29yZGluYXRlIHN5c3RlbSByb3RhdGUgdG8gbWF0Y2ggdGhlIGRlc3RpbmF0aW9uIGJlYXJpbmcuXG4gICAgICAgIGNvbnN0IHAwd29ybGQgPSB0ci5wcm9qZWN0KExuZ0xhdC5jb252ZXJ0KHAwKSk7XG4gICAgICAgIGNvbnN0IHAxd29ybGQgPSB0ci5wcm9qZWN0KExuZ0xhdC5jb252ZXJ0KHAxKSk7XG4gICAgICAgIGNvbnN0IHAwcm90YXRlZCA9IHAwd29ybGQucm90YXRlKC1iZWFyaW5nICogTWF0aC5QSSAvIDE4MCk7XG4gICAgICAgIGNvbnN0IHAxcm90YXRlZCA9IHAxd29ybGQucm90YXRlKC1iZWFyaW5nICogTWF0aC5QSSAvIDE4MCk7XG5cbiAgICAgICAgY29uc3QgdXBwZXJSaWdodCA9IG5ldyBQb2ludChNYXRoLm1heChwMHJvdGF0ZWQueCwgcDFyb3RhdGVkLngpLCBNYXRoLm1heChwMHJvdGF0ZWQueSwgcDFyb3RhdGVkLnkpKTtcbiAgICAgICAgY29uc3QgbG93ZXJMZWZ0ID0gbmV3IFBvaW50KE1hdGgubWluKHAwcm90YXRlZC54LCBwMXJvdGF0ZWQueCksIE1hdGgubWluKHAwcm90YXRlZC55LCBwMXJvdGF0ZWQueSkpO1xuXG4gICAgICAgIGNvbnN0IG9mZnNldCA9IFBvaW50LmNvbnZlcnQob3B0aW9ucy5vZmZzZXQpLFxuICAgICAgICAgICAgc2l6ZSA9IHVwcGVyUmlnaHQuc3ViKGxvd2VyTGVmdCksXG4gICAgICAgICAgICBzY2FsZVggPSAodHIud2lkdGggLSBsYXRlcmFsUGFkZGluZyAqIDIgLSBNYXRoLmFicyhvZmZzZXQueCkgKiAyKSAvIHNpemUueCxcbiAgICAgICAgICAgIHNjYWxlWSA9ICh0ci5oZWlnaHQgLSB2ZXJ0aWNhbFBhZGRpbmcgKiAyIC0gTWF0aC5hYnMob2Zmc2V0LnkpICogMikgLyBzaXplLnk7XG5cbiAgICAgICAgaWYgKHNjYWxlWSA8IDAgfHwgc2NhbGVYIDwgMCkge1xuICAgICAgICAgICAgd2Fybk9uY2UoXG4gICAgICAgICAgICAgICAgJ01hcCBjYW5ub3QgZml0IHdpdGhpbiBjYW52YXMgd2l0aCB0aGUgZ2l2ZW4gYm91bmRzLCBwYWRkaW5nLCBhbmQvb3Igb2Zmc2V0LidcbiAgICAgICAgICAgICk7XG4gICAgICAgICAgICByZXR1cm47XG4gICAgICAgIH1cbiAgICAgICAgb3B0aW9ucy5jZW50ZXIgPSAgdHIudW5wcm9qZWN0KHAwd29ybGQuYWRkKHAxd29ybGQpLmRpdigyKSk7XG4gICAgICAgIG9wdGlvbnMuem9vbSA9IE1hdGgubWluKHRyLnNjYWxlWm9vbSh0ci5zY2FsZSAqIE1hdGgubWluKHNjYWxlWCwgc2NhbGVZKSksIG9wdGlvbnMubWF4Wm9vbSk7XG4gICAgICAgIG9wdGlvbnMuYmVhcmluZyA9IGJlYXJpbmc7XG5cbiAgICAgICAgcmV0dXJuIG9wdGlvbnM7XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogUGFucyBhbmQgem9vbXMgdGhlIG1hcCB0byBjb250YWluIGl0cyB2aXNpYmxlIGFyZWEgd2l0aGluIHRoZSBzcGVjaWZpZWQgZ2VvZ3JhcGhpY2FsIGJvdW5kcy5cbiAgICAgKiBUaGlzIGZ1bmN0aW9uIHdpbGwgYWxzbyByZXNldCB0aGUgbWFwJ3MgYmVhcmluZyB0byAwIGlmIGJlYXJpbmcgaXMgbm9uemVyby5cbiAgICAgKlxuICAgICAqIEBtZW1iZXJvZiBNYXAjXG4gICAgICogQHBhcmFtIGJvdW5kcyBDZW50ZXIgdGhlc2UgYm91bmRzIGluIHRoZSB2aWV3cG9ydCBhbmQgdXNlIHRoZSBoaWdoZXN0XG4gICAgICogICAgICB6b29tIGxldmVsIHVwIHRvIGFuZCBpbmNsdWRpbmcgYE1hcCNnZXRNYXhab29tKClgIHRoYXQgZml0cyB0aGVtIGluIHRoZSB2aWV3cG9ydC5cbiAgICAgKiBAcGFyYW0ge09iamVjdH0gW29wdGlvbnNdIE9wdGlvbnMgc3VwcG9ydHMgYWxsIHByb3BlcnRpZXMgZnJvbSB7QGxpbmsgQW5pbWF0aW9uT3B0aW9uc30gYW5kIHtAbGluayBDYW1lcmFPcHRpb25zfSBpbiBhZGRpdGlvbiB0byB0aGUgZmllbGRzIGJlbG93LlxuICAgICAqIEBwYXJhbSB7bnVtYmVyIHwgUGFkZGluZ09wdGlvbnN9IFtvcHRpb25zLnBhZGRpbmddIFRoZSBhbW91bnQgb2YgcGFkZGluZyBpbiBwaXhlbHMgdG8gYWRkIHRvIHRoZSBnaXZlbiBib3VuZHMuXG4gICAgICogQHBhcmFtIHtib29sZWFufSBbb3B0aW9ucy5saW5lYXI9ZmFsc2VdIElmIGB0cnVlYCwgdGhlIG1hcCB0cmFuc2l0aW9ucyB1c2luZ1xuICAgICAqICAgICB7QGxpbmsgTWFwI2Vhc2VUb30uIElmIGBmYWxzZWAsIHRoZSBtYXAgdHJhbnNpdGlvbnMgdXNpbmcge0BsaW5rIE1hcCNmbHlUb30uIFNlZVxuICAgICAqICAgICB0aG9zZSBmdW5jdGlvbnMgYW5kIHtAbGluayBBbmltYXRpb25PcHRpb25zfSBmb3IgaW5mb3JtYXRpb24gYWJvdXQgb3B0aW9ucyBhdmFpbGFibGUuXG4gICAgICogQHBhcmFtIHtGdW5jdGlvbn0gW29wdGlvbnMuZWFzaW5nXSBBbiBlYXNpbmcgZnVuY3Rpb24gZm9yIHRoZSBhbmltYXRlZCB0cmFuc2l0aW9uLiBTZWUge0BsaW5rIEFuaW1hdGlvbk9wdGlvbnN9LlxuICAgICAqIEBwYXJhbSB7UG9pbnRMaWtlfSBbb3B0aW9ucy5vZmZzZXQ9WzAsIDBdXSBUaGUgY2VudGVyIG9mIHRoZSBnaXZlbiBib3VuZHMgcmVsYXRpdmUgdG8gdGhlIG1hcCdzIGNlbnRlciwgbWVhc3VyZWQgaW4gcGl4ZWxzLlxuICAgICAqIEBwYXJhbSB7bnVtYmVyfSBbb3B0aW9ucy5tYXhab29tXSBUaGUgbWF4aW11bSB6b29tIGxldmVsIHRvIGFsbG93IHdoZW4gdGhlIG1hcCB2aWV3IHRyYW5zaXRpb25zIHRvIHRoZSBzcGVjaWZpZWQgYm91bmRzLlxuICAgICAqIEBwYXJhbSB7T2JqZWN0fSBbZXZlbnREYXRhXSBBZGRpdGlvbmFsIHByb3BlcnRpZXMgdG8gYmUgYWRkZWQgdG8gZXZlbnQgb2JqZWN0cyBvZiBldmVudHMgdHJpZ2dlcmVkIGJ5IHRoaXMgbWV0aG9kLlxuICAgICAqIEBmaXJlcyBtb3Zlc3RhcnRcbiAgICAgKiBAZmlyZXMgbW92ZWVuZFxuICAgICAqIEByZXR1cm5zIHtNYXB9IGB0aGlzYFxuXHQgKiBAZXhhbXBsZVxuICAgICAqIHZhciBiYm94ID0gW1stNzksIDQzXSwgWy03MywgNDVdXTtcbiAgICAgKiBtYXAuZml0Qm91bmRzKGJib3gsIHtcbiAgICAgKiAgIHBhZGRpbmc6IHt0b3A6IDEwLCBib3R0b206MjUsIGxlZnQ6IDE1LCByaWdodDogNX1cbiAgICAgKiB9KTtcbiAgICAgKiBAc2VlIFtGaXQgYSBtYXAgdG8gYSBib3VuZGluZyBib3hdKGh0dHBzOi8vd3d3Lm1hcGJveC5jb20vbWFwYm94LWdsLWpzL2V4YW1wbGUvZml0Ym91bmRzLylcbiAgICAgKi9cbiAgICBmaXRCb3VuZHMoYm91bmRzOiBMbmdMYXRCb3VuZHNMaWtlLCBvcHRpb25zPzogQW5pbWF0aW9uT3B0aW9ucyAmIENhbWVyYU9wdGlvbnMsIGV2ZW50RGF0YT86IE9iamVjdCkge1xuICAgICAgICByZXR1cm4gdGhpcy5fZml0SW50ZXJuYWwoXG4gICAgICAgICAgICB0aGlzLmNhbWVyYUZvckJvdW5kcyhib3VuZHMsIG9wdGlvbnMpLFxuICAgICAgICAgICAgb3B0aW9ucyxcbiAgICAgICAgICAgIGV2ZW50RGF0YSk7XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogUGFucywgcm90YXRlcyBhbmQgem9vbXMgdGhlIG1hcCB0byB0byBmaXQgdGhlIGJveCBtYWRlIGJ5IHBvaW50cyBwMCBhbmQgcDFcbiAgICAgKiBvbmNlIHRoZSBtYXAgaXMgcm90YXRlZCB0byB0aGUgc3BlY2lmaWVkIGJlYXJpbmcuIFRvIHpvb20gd2l0aG91dCByb3RhdGluZyxcbiAgICAgKiBwYXNzIGluIHRoZSBjdXJyZW50IG1hcCBiZWFyaW5nLlxuICAgICAqXG4gICAgICogQG1lbWJlcm9mIE1hcCNcbiAgICAgKiBAcGFyYW0gcDAgRmlyc3QgcG9pbnQgb24gc2NyZWVuLCBpbiBwaXhlbCBjb29yZGluYXRlc1xuICAgICAqIEBwYXJhbSBwMSBTZWNvbmQgcG9pbnQgb24gc2NyZWVuLCBpbiBwaXhlbCBjb29yZGluYXRlc1xuICAgICAqIEBwYXJhbSBiZWFyaW5nIERlc2lyZWQgbWFwIGJlYXJpbmcgYXQgZW5kIG9mIGFuaW1hdGlvbiwgaW4gZGVncmVlc1xuICAgICAqIEBwYXJhbSBvcHRpb25zXG4gICAgICogQHBhcmFtIHtudW1iZXIgfCBQYWRkaW5nT3B0aW9uc30gW29wdGlvbnMucGFkZGluZ10gVGhlIGFtb3VudCBvZiBwYWRkaW5nIGluIHBpeGVscyB0byBhZGQgdG8gdGhlIGdpdmVuIGJvdW5kcy5cbiAgICAgKiBAcGFyYW0ge2Jvb2xlYW59IFtvcHRpb25zLmxpbmVhcj1mYWxzZV0gSWYgYHRydWVgLCB0aGUgbWFwIHRyYW5zaXRpb25zIHVzaW5nXG4gICAgICogICAgIHtAbGluayBNYXAjZWFzZVRvfS4gSWYgYGZhbHNlYCwgdGhlIG1hcCB0cmFuc2l0aW9ucyB1c2luZyB7QGxpbmsgTWFwI2ZseVRvfS4gU2VlXG4gICAgICogICAgIHRob3NlIGZ1bmN0aW9ucyBhbmQge0BsaW5rIEFuaW1hdGlvbk9wdGlvbnN9IGZvciBpbmZvcm1hdGlvbiBhYm91dCBvcHRpb25zIGF2YWlsYWJsZS5cbiAgICAgKiBAcGFyYW0ge0Z1bmN0aW9ufSBbb3B0aW9ucy5lYXNpbmddIEFuIGVhc2luZyBmdW5jdGlvbiBmb3IgdGhlIGFuaW1hdGVkIHRyYW5zaXRpb24uIFNlZSB7QGxpbmsgQW5pbWF0aW9uT3B0aW9uc30uXG4gICAgICogQHBhcmFtIHtQb2ludExpa2V9IFtvcHRpb25zLm9mZnNldD1bMCwgMF1dIFRoZSBjZW50ZXIgb2YgdGhlIGdpdmVuIGJvdW5kcyByZWxhdGl2ZSB0byB0aGUgbWFwJ3MgY2VudGVyLCBtZWFzdXJlZCBpbiBwaXhlbHMuXG4gICAgICogQHBhcmFtIHtudW1iZXJ9IFtvcHRpb25zLm1heFpvb21dIFRoZSBtYXhpbXVtIHpvb20gbGV2ZWwgdG8gYWxsb3cgd2hlbiB0aGUgbWFwIHZpZXcgdHJhbnNpdGlvbnMgdG8gdGhlIHNwZWNpZmllZCBib3VuZHMuXG4gICAgICogQHBhcmFtIGV2ZW50RGF0YSBBZGRpdGlvbmFsIHByb3BlcnRpZXMgdG8gYmUgYWRkZWQgdG8gZXZlbnQgb2JqZWN0cyBvZiBldmVudHMgdHJpZ2dlcmVkIGJ5IHRoaXMgbWV0aG9kLlxuICAgICAqIEBmaXJlcyBtb3Zlc3RhcnRcbiAgICAgKiBAZmlyZXMgbW92ZWVuZFxuICAgICAqIEByZXR1cm5zIHtNYXB9IGB0aGlzYFxuXHQgKiBAZXhhbXBsZVxuICAgICAqIHZhciBwMCA9IFsyMjAsIDQwMF07XG4gICAgICogdmFyIHAxID0gWzUwMCwgOTAwXTtcbiAgICAgKiBtYXAuZml0U2NyZWVuQ29vcmRpbnRlcyhwMCwgcDEsIG1hcC5nZXRCZWFyaW5nKCksIHtcbiAgICAgKiAgIHBhZGRpbmc6IHt0b3A6IDEwLCBib3R0b206MjUsIGxlZnQ6IDE1LCByaWdodDogNX1cbiAgICAgKiB9KTtcbiAgICAgKiBAc2VlIFtVc2VkIGJ5IEJveFpvb21IYW5kbGVyXShodHRwczovL3d3dy5tYXBib3guY29tL21hcGJveC1nbC1qcy9hcGkvI2JveHpvb21oYW5kbGVyKVxuICAgICAqL1xuICAgIGZpdFNjcmVlbkNvb3JkaW5hdGVzKHAwOiBQb2ludExpa2UsIHAxOiBQb2ludExpa2UsIGJlYXJpbmc6IG51bWJlciwgb3B0aW9ucz86IEFuaW1hdGlvbk9wdGlvbnMgJiBDYW1lcmFPcHRpb25zLCBldmVudERhdGE/OiBPYmplY3QpIHtcbiAgICAgICAgcmV0dXJuIHRoaXMuX2ZpdEludGVybmFsKFxuICAgICAgICAgICAgdGhpcy5fY2FtZXJhRm9yQm94QW5kQmVhcmluZyhcbiAgICAgICAgICAgICAgICB0aGlzLnRyYW5zZm9ybS5wb2ludExvY2F0aW9uKFBvaW50LmNvbnZlcnQocDApKSxcbiAgICAgICAgICAgICAgICB0aGlzLnRyYW5zZm9ybS5wb2ludExvY2F0aW9uKFBvaW50LmNvbnZlcnQocDEpKSxcbiAgICAgICAgICAgICAgICBiZWFyaW5nLFxuICAgICAgICAgICAgICAgIG9wdGlvbnMpLFxuICAgICAgICAgICAgb3B0aW9ucyxcbiAgICAgICAgICAgIGV2ZW50RGF0YSk7XG4gICAgfVxuXG4gICAgX2ZpdEludGVybmFsKGNhbGN1bGF0ZWRPcHRpb25zPzogQ2FtZXJhT3B0aW9ucyAmIEFuaW1hdGlvbk9wdGlvbnMsIG9wdGlvbnM/OiBBbmltYXRpb25PcHRpb25zICYgQ2FtZXJhT3B0aW9ucywgZXZlbnREYXRhPzogT2JqZWN0KSB7XG4gICAgICAgIC8vIGNhbWVyYUZvckJvdW5kcyB3YXJucyArIHJldHVybnMgdW5kZWZpbmVkIGlmIHVuYWJsZSB0byBmaXQ6XG4gICAgICAgIGlmICghY2FsY3VsYXRlZE9wdGlvbnMpIHJldHVybiB0aGlzO1xuXG4gICAgICAgIG9wdGlvbnMgPSBleHRlbmQoY2FsY3VsYXRlZE9wdGlvbnMsIG9wdGlvbnMpO1xuXG4gICAgICAgIHJldHVybiBvcHRpb25zLmxpbmVhciA/XG4gICAgICAgICAgICB0aGlzLmVhc2VUbyhvcHRpb25zLCBldmVudERhdGEpIDpcbiAgICAgICAgICAgIHRoaXMuZmx5VG8ob3B0aW9ucywgZXZlbnREYXRhKTtcbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBDaGFuZ2VzIGFueSBjb21iaW5hdGlvbiBvZiBjZW50ZXIsIHpvb20sIGJlYXJpbmcsIGFuZCBwaXRjaCwgd2l0aG91dFxuICAgICAqIGFuIGFuaW1hdGVkIHRyYW5zaXRpb24uIFRoZSBtYXAgd2lsbCByZXRhaW4gaXRzIGN1cnJlbnQgdmFsdWVzIGZvciBhbnlcbiAgICAgKiBkZXRhaWxzIG5vdCBzcGVjaWZpZWQgaW4gYG9wdGlvbnNgLlxuICAgICAqXG4gICAgICogQG1lbWJlcm9mIE1hcCNcbiAgICAgKiBAcGFyYW0gb3B0aW9uc1xuICAgICAqIEBwYXJhbSBldmVudERhdGEgQWRkaXRpb25hbCBwcm9wZXJ0aWVzIHRvIGJlIGFkZGVkIHRvIGV2ZW50IG9iamVjdHMgb2YgZXZlbnRzIHRyaWdnZXJlZCBieSB0aGlzIG1ldGhvZC5cbiAgICAgKiBAZmlyZXMgbW92ZXN0YXJ0XG4gICAgICogQGZpcmVzIHpvb21zdGFydFxuICAgICAqIEBmaXJlcyBwaXRjaHN0YXJ0XG4gICAgICogQGZpcmVzIHJvdGF0ZVxuICAgICAqIEBmaXJlcyBtb3ZlXG4gICAgICogQGZpcmVzIHpvb21cbiAgICAgKiBAZmlyZXMgcGl0Y2hcbiAgICAgKiBAZmlyZXMgbW92ZWVuZFxuICAgICAqIEBmaXJlcyB6b29tZW5kXG4gICAgICogQGZpcmVzIHBpdGNoZW5kXG4gICAgICogQHJldHVybnMge01hcH0gYHRoaXNgXG4gICAgICovXG4gICAganVtcFRvKG9wdGlvbnM6IENhbWVyYU9wdGlvbnMsIGV2ZW50RGF0YT86IE9iamVjdCkge1xuICAgICAgICB0aGlzLnN0b3AoKTtcblxuICAgICAgICBjb25zdCB0ciA9IHRoaXMudHJhbnNmb3JtO1xuICAgICAgICBsZXQgem9vbUNoYW5nZWQgPSBmYWxzZSxcbiAgICAgICAgICAgIGJlYXJpbmdDaGFuZ2VkID0gZmFsc2UsXG4gICAgICAgICAgICBwaXRjaENoYW5nZWQgPSBmYWxzZTtcblxuICAgICAgICBpZiAoJ3pvb20nIGluIG9wdGlvbnMgJiYgdHIuem9vbSAhPT0gK29wdGlvbnMuem9vbSkge1xuICAgICAgICAgICAgem9vbUNoYW5nZWQgPSB0cnVlO1xuICAgICAgICAgICAgdHIuem9vbSA9ICtvcHRpb25zLnpvb207XG4gICAgICAgIH1cblxuICAgICAgICBpZiAob3B0aW9ucy5jZW50ZXIgIT09IHVuZGVmaW5lZCkge1xuICAgICAgICAgICAgdHIuY2VudGVyID0gTG5nTGF0LmNvbnZlcnQob3B0aW9ucy5jZW50ZXIpO1xuICAgICAgICB9XG5cbiAgICAgICAgaWYgKCdiZWFyaW5nJyBpbiBvcHRpb25zICYmIHRyLmJlYXJpbmcgIT09ICtvcHRpb25zLmJlYXJpbmcpIHtcbiAgICAgICAgICAgIGJlYXJpbmdDaGFuZ2VkID0gdHJ1ZTtcbiAgICAgICAgICAgIHRyLmJlYXJpbmcgPSArb3B0aW9ucy5iZWFyaW5nO1xuICAgICAgICB9XG5cbiAgICAgICAgaWYgKCdwaXRjaCcgaW4gb3B0aW9ucyAmJiB0ci5waXRjaCAhPT0gK29wdGlvbnMucGl0Y2gpIHtcbiAgICAgICAgICAgIHBpdGNoQ2hhbmdlZCA9IHRydWU7XG4gICAgICAgICAgICB0ci5waXRjaCA9ICtvcHRpb25zLnBpdGNoO1xuICAgICAgICB9XG5cbiAgICAgICAgdGhpcy5maXJlKG5ldyBFdmVudCgnbW92ZXN0YXJ0JywgZXZlbnREYXRhKSlcbiAgICAgICAgICAgIC5maXJlKG5ldyBFdmVudCgnbW92ZScsIGV2ZW50RGF0YSkpO1xuXG4gICAgICAgIGlmICh6b29tQ2hhbmdlZCkge1xuICAgICAgICAgICAgdGhpcy5maXJlKG5ldyBFdmVudCgnem9vbXN0YXJ0JywgZXZlbnREYXRhKSlcbiAgICAgICAgICAgICAgICAuZmlyZShuZXcgRXZlbnQoJ3pvb20nLCBldmVudERhdGEpKVxuICAgICAgICAgICAgICAgIC5maXJlKG5ldyBFdmVudCgnem9vbWVuZCcsIGV2ZW50RGF0YSkpO1xuICAgICAgICB9XG5cbiAgICAgICAgaWYgKGJlYXJpbmdDaGFuZ2VkKSB7XG4gICAgICAgICAgICB0aGlzLmZpcmUobmV3IEV2ZW50KCdyb3RhdGVzdGFydCcsIGV2ZW50RGF0YSkpXG4gICAgICAgICAgICAgICAgLmZpcmUobmV3IEV2ZW50KCdyb3RhdGUnLCBldmVudERhdGEpKVxuICAgICAgICAgICAgICAgIC5maXJlKG5ldyBFdmVudCgncm90YXRlZW5kJywgZXZlbnREYXRhKSk7XG4gICAgICAgIH1cblxuICAgICAgICBpZiAocGl0Y2hDaGFuZ2VkKSB7XG4gICAgICAgICAgICB0aGlzLmZpcmUobmV3IEV2ZW50KCdwaXRjaHN0YXJ0JywgZXZlbnREYXRhKSlcbiAgICAgICAgICAgICAgICAuZmlyZShuZXcgRXZlbnQoJ3BpdGNoJywgZXZlbnREYXRhKSlcbiAgICAgICAgICAgICAgICAuZmlyZShuZXcgRXZlbnQoJ3BpdGNoZW5kJywgZXZlbnREYXRhKSk7XG4gICAgICAgIH1cblxuICAgICAgICByZXR1cm4gdGhpcy5maXJlKG5ldyBFdmVudCgnbW92ZWVuZCcsIGV2ZW50RGF0YSkpO1xuICAgIH1cblxuICAgIC8qKlxuICAgICAqIENoYW5nZXMgYW55IGNvbWJpbmF0aW9uIG9mIGNlbnRlciwgem9vbSwgYmVhcmluZywgYW5kIHBpdGNoLCB3aXRoIGFuIGFuaW1hdGVkIHRyYW5zaXRpb25cbiAgICAgKiBiZXR3ZWVuIG9sZCBhbmQgbmV3IHZhbHVlcy4gVGhlIG1hcCB3aWxsIHJldGFpbiBpdHMgY3VycmVudCB2YWx1ZXMgZm9yIGFueVxuICAgICAqIGRldGFpbHMgbm90IHNwZWNpZmllZCBpbiBgb3B0aW9uc2AuXG4gICAgICpcbiAgICAgKiBAbWVtYmVyb2YgTWFwI1xuICAgICAqIEBwYXJhbSBvcHRpb25zIE9wdGlvbnMgZGVzY3JpYmluZyB0aGUgZGVzdGluYXRpb24gYW5kIGFuaW1hdGlvbiBvZiB0aGUgdHJhbnNpdGlvbi5cbiAgICAgKiAgICAgICAgICAgIEFjY2VwdHMge0BsaW5rIENhbWVyYU9wdGlvbnN9IGFuZCB7QGxpbmsgQW5pbWF0aW9uT3B0aW9uc30uXG4gICAgICogQHBhcmFtIGV2ZW50RGF0YSBBZGRpdGlvbmFsIHByb3BlcnRpZXMgdG8gYmUgYWRkZWQgdG8gZXZlbnQgb2JqZWN0cyBvZiBldmVudHMgdHJpZ2dlcmVkIGJ5IHRoaXMgbWV0aG9kLlxuICAgICAqIEBmaXJlcyBtb3Zlc3RhcnRcbiAgICAgKiBAZmlyZXMgem9vbXN0YXJ0XG4gICAgICogQGZpcmVzIHBpdGNoc3RhcnRcbiAgICAgKiBAZmlyZXMgcm90YXRlXG4gICAgICogQGZpcmVzIG1vdmVcbiAgICAgKiBAZmlyZXMgem9vbVxuICAgICAqIEBmaXJlcyBwaXRjaFxuICAgICAqIEBmaXJlcyBtb3ZlZW5kXG4gICAgICogQGZpcmVzIHpvb21lbmRcbiAgICAgKiBAZmlyZXMgcGl0Y2hlbmRcbiAgICAgKiBAcmV0dXJucyB7TWFwfSBgdGhpc2BcbiAgICAgKiBAc2VlIFtOYXZpZ2F0ZSB0aGUgbWFwIHdpdGggZ2FtZS1saWtlIGNvbnRyb2xzXShodHRwczovL3d3dy5tYXBib3guY29tL21hcGJveC1nbC1qcy9leGFtcGxlL2dhbWUtY29udHJvbHMvKVxuICAgICAqL1xuICAgIGVhc2VUbyhvcHRpb25zOiBDYW1lcmFPcHRpb25zICYgQW5pbWF0aW9uT3B0aW9ucyAmIHtkZWxheUVuZEV2ZW50cz86IG51bWJlcn0sIGV2ZW50RGF0YT86IE9iamVjdCkge1xuICAgICAgICB0aGlzLnN0b3AoKTtcblxuICAgICAgICBvcHRpb25zID0gZXh0ZW5kKHtcbiAgICAgICAgICAgIG9mZnNldDogWzAsIDBdLFxuICAgICAgICAgICAgZHVyYXRpb246IDUwMCxcbiAgICAgICAgICAgIGVhc2luZzogZGVmYXVsdEVhc2luZ1xuICAgICAgICB9LCBvcHRpb25zKTtcblxuICAgICAgICBpZiAob3B0aW9ucy5hbmltYXRlID09PSBmYWxzZSkgb3B0aW9ucy5kdXJhdGlvbiA9IDA7XG5cbiAgICAgICAgY29uc3QgdHIgPSB0aGlzLnRyYW5zZm9ybSxcbiAgICAgICAgICAgIHN0YXJ0Wm9vbSA9IHRoaXMuZ2V0Wm9vbSgpLFxuICAgICAgICAgICAgc3RhcnRCZWFyaW5nID0gdGhpcy5nZXRCZWFyaW5nKCksXG4gICAgICAgICAgICBzdGFydFBpdGNoID0gdGhpcy5nZXRQaXRjaCgpLFxuXG4gICAgICAgICAgICB6b29tID0gJ3pvb20nIGluIG9wdGlvbnMgPyArb3B0aW9ucy56b29tIDogc3RhcnRab29tLFxuICAgICAgICAgICAgYmVhcmluZyA9ICdiZWFyaW5nJyBpbiBvcHRpb25zID8gdGhpcy5fbm9ybWFsaXplQmVhcmluZyhvcHRpb25zLmJlYXJpbmcsIHN0YXJ0QmVhcmluZykgOiBzdGFydEJlYXJpbmcsXG4gICAgICAgICAgICBwaXRjaCA9ICdwaXRjaCcgaW4gb3B0aW9ucyA/ICtvcHRpb25zLnBpdGNoIDogc3RhcnRQaXRjaDtcblxuICAgICAgICBjb25zdCBwb2ludEF0T2Zmc2V0ID0gdHIuY2VudGVyUG9pbnQuYWRkKFBvaW50LmNvbnZlcnQob3B0aW9ucy5vZmZzZXQpKTtcbiAgICAgICAgY29uc3QgbG9jYXRpb25BdE9mZnNldCA9IHRyLnBvaW50TG9jYXRpb24ocG9pbnRBdE9mZnNldCk7XG4gICAgICAgIGNvbnN0IGNlbnRlciA9IExuZ0xhdC5jb252ZXJ0KG9wdGlvbnMuY2VudGVyIHx8IGxvY2F0aW9uQXRPZmZzZXQpO1xuICAgICAgICB0aGlzLl9ub3JtYWxpemVDZW50ZXIoY2VudGVyKTtcblxuICAgICAgICBjb25zdCBmcm9tID0gdHIucHJvamVjdChsb2NhdGlvbkF0T2Zmc2V0KTtcbiAgICAgICAgY29uc3QgZGVsdGEgPSB0ci5wcm9qZWN0KGNlbnRlcikuc3ViKGZyb20pO1xuICAgICAgICBjb25zdCBmaW5hbFNjYWxlID0gdHIuem9vbVNjYWxlKHpvb20gLSBzdGFydFpvb20pO1xuXG4gICAgICAgIGxldCBhcm91bmQsIGFyb3VuZFBvaW50O1xuXG4gICAgICAgIGlmIChvcHRpb25zLmFyb3VuZCkge1xuICAgICAgICAgICAgYXJvdW5kID0gTG5nTGF0LmNvbnZlcnQob3B0aW9ucy5hcm91bmQpO1xuICAgICAgICAgICAgYXJvdW5kUG9pbnQgPSB0ci5sb2NhdGlvblBvaW50KGFyb3VuZCk7XG4gICAgICAgIH1cblxuICAgICAgICB0aGlzLl96b29taW5nID0gKHpvb20gIT09IHN0YXJ0Wm9vbSk7XG4gICAgICAgIHRoaXMuX3JvdGF0aW5nID0gKHN0YXJ0QmVhcmluZyAhPT0gYmVhcmluZyk7XG4gICAgICAgIHRoaXMuX3BpdGNoaW5nID0gKHBpdGNoICE9PSBzdGFydFBpdGNoKTtcblxuICAgICAgICB0aGlzLl9wcmVwYXJlRWFzZShldmVudERhdGEsIG9wdGlvbnMubm9Nb3ZlU3RhcnQpO1xuXG4gICAgICAgIGNsZWFyVGltZW91dCh0aGlzLl9lYXNlRW5kVGltZW91dElEKTtcblxuICAgICAgICB0aGlzLl9lYXNlKChrKSA9PiB7XG4gICAgICAgICAgICBpZiAodGhpcy5fem9vbWluZykge1xuICAgICAgICAgICAgICAgIHRyLnpvb20gPSBpbnRlcnBvbGF0ZShzdGFydFpvb20sIHpvb20sIGspO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgaWYgKHRoaXMuX3JvdGF0aW5nKSB7XG4gICAgICAgICAgICAgICAgdHIuYmVhcmluZyA9IGludGVycG9sYXRlKHN0YXJ0QmVhcmluZywgYmVhcmluZywgayk7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBpZiAodGhpcy5fcGl0Y2hpbmcpIHtcbiAgICAgICAgICAgICAgICB0ci5waXRjaCA9IGludGVycG9sYXRlKHN0YXJ0UGl0Y2gsIHBpdGNoLCBrKTtcbiAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgaWYgKGFyb3VuZCkge1xuICAgICAgICAgICAgICAgIHRyLnNldExvY2F0aW9uQXRQb2ludChhcm91bmQsIGFyb3VuZFBvaW50KTtcbiAgICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICAgICAgY29uc3Qgc2NhbGUgPSB0ci56b29tU2NhbGUodHIuem9vbSAtIHN0YXJ0Wm9vbSk7XG4gICAgICAgICAgICAgICAgY29uc3QgYmFzZSA9IHpvb20gPiBzdGFydFpvb20gP1xuICAgICAgICAgICAgICAgICAgICBNYXRoLm1pbigyLCBmaW5hbFNjYWxlKSA6XG4gICAgICAgICAgICAgICAgICAgIE1hdGgubWF4KDAuNSwgZmluYWxTY2FsZSk7XG4gICAgICAgICAgICAgICAgY29uc3Qgc3BlZWR1cCA9IE1hdGgucG93KGJhc2UsIDEgLSBrKTtcbiAgICAgICAgICAgICAgICBjb25zdCBuZXdDZW50ZXIgPSB0ci51bnByb2plY3QoZnJvbS5hZGQoZGVsdGEubXVsdChrICogc3BlZWR1cCkpLm11bHQoc2NhbGUpKTtcbiAgICAgICAgICAgICAgICB0ci5zZXRMb2NhdGlvbkF0UG9pbnQodHIucmVuZGVyV29ybGRDb3BpZXMgPyBuZXdDZW50ZXIud3JhcCgpIDogbmV3Q2VudGVyLCBwb2ludEF0T2Zmc2V0KTtcbiAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgdGhpcy5fZmlyZU1vdmVFdmVudHMoZXZlbnREYXRhKTtcblxuICAgICAgICB9LCAoKSA9PiB7XG4gICAgICAgICAgICBpZiAob3B0aW9ucy5kZWxheUVuZEV2ZW50cykge1xuICAgICAgICAgICAgICAgIHRoaXMuX2Vhc2VFbmRUaW1lb3V0SUQgPSBzZXRUaW1lb3V0KCgpID0+IHRoaXMuX2FmdGVyRWFzZShldmVudERhdGEpLCBvcHRpb25zLmRlbGF5RW5kRXZlbnRzKTtcbiAgICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICAgICAgdGhpcy5fYWZ0ZXJFYXNlKGV2ZW50RGF0YSk7XG4gICAgICAgICAgICB9XG4gICAgICAgIH0sIG9wdGlvbnMpO1xuXG4gICAgICAgIHJldHVybiB0aGlzO1xuICAgIH1cblxuICAgIF9wcmVwYXJlRWFzZShldmVudERhdGE/OiBPYmplY3QsIG5vTW92ZVN0YXJ0OiBib29sZWFuKSB7XG4gICAgICAgIHRoaXMuX21vdmluZyA9IHRydWU7XG5cbiAgICAgICAgaWYgKCFub01vdmVTdGFydCkge1xuICAgICAgICAgICAgdGhpcy5maXJlKG5ldyBFdmVudCgnbW92ZXN0YXJ0JywgZXZlbnREYXRhKSk7XG4gICAgICAgIH1cbiAgICAgICAgaWYgKHRoaXMuX3pvb21pbmcpIHtcbiAgICAgICAgICAgIHRoaXMuZmlyZShuZXcgRXZlbnQoJ3pvb21zdGFydCcsIGV2ZW50RGF0YSkpO1xuICAgICAgICB9XG4gICAgICAgIGlmICh0aGlzLl9yb3RhdGluZykge1xuICAgICAgICAgICAgdGhpcy5maXJlKG5ldyBFdmVudCgncm90YXRlc3RhcnQnLCBldmVudERhdGEpKTtcbiAgICAgICAgfVxuICAgICAgICBpZiAodGhpcy5fcGl0Y2hpbmcpIHtcbiAgICAgICAgICAgIHRoaXMuZmlyZShuZXcgRXZlbnQoJ3BpdGNoc3RhcnQnLCBldmVudERhdGEpKTtcbiAgICAgICAgfVxuICAgIH1cblxuICAgIF9maXJlTW92ZUV2ZW50cyhldmVudERhdGE/OiBPYmplY3QpIHtcbiAgICAgICAgdGhpcy5maXJlKG5ldyBFdmVudCgnbW92ZScsIGV2ZW50RGF0YSkpO1xuICAgICAgICBpZiAodGhpcy5fem9vbWluZykge1xuICAgICAgICAgICAgdGhpcy5maXJlKG5ldyBFdmVudCgnem9vbScsIGV2ZW50RGF0YSkpO1xuICAgICAgICB9XG4gICAgICAgIGlmICh0aGlzLl9yb3RhdGluZykge1xuICAgICAgICAgICAgdGhpcy5maXJlKG5ldyBFdmVudCgncm90YXRlJywgZXZlbnREYXRhKSk7XG4gICAgICAgIH1cbiAgICAgICAgaWYgKHRoaXMuX3BpdGNoaW5nKSB7XG4gICAgICAgICAgICB0aGlzLmZpcmUobmV3IEV2ZW50KCdwaXRjaCcsIGV2ZW50RGF0YSkpO1xuICAgICAgICB9XG4gICAgfVxuXG4gICAgX2FmdGVyRWFzZShldmVudERhdGE/OiBPYmplY3QpIHtcbiAgICAgICAgY29uc3Qgd2FzWm9vbWluZyA9IHRoaXMuX3pvb21pbmc7XG4gICAgICAgIGNvbnN0IHdhc1JvdGF0aW5nID0gdGhpcy5fcm90YXRpbmc7XG4gICAgICAgIGNvbnN0IHdhc1BpdGNoaW5nID0gdGhpcy5fcGl0Y2hpbmc7XG4gICAgICAgIHRoaXMuX21vdmluZyA9IGZhbHNlO1xuICAgICAgICB0aGlzLl96b29taW5nID0gZmFsc2U7XG4gICAgICAgIHRoaXMuX3JvdGF0aW5nID0gZmFsc2U7XG4gICAgICAgIHRoaXMuX3BpdGNoaW5nID0gZmFsc2U7XG5cbiAgICAgICAgaWYgKHdhc1pvb21pbmcpIHtcbiAgICAgICAgICAgIHRoaXMuZmlyZShuZXcgRXZlbnQoJ3pvb21lbmQnLCBldmVudERhdGEpKTtcbiAgICAgICAgfVxuICAgICAgICBpZiAod2FzUm90YXRpbmcpIHtcbiAgICAgICAgICAgIHRoaXMuZmlyZShuZXcgRXZlbnQoJ3JvdGF0ZWVuZCcsIGV2ZW50RGF0YSkpO1xuICAgICAgICB9XG4gICAgICAgIGlmICh3YXNQaXRjaGluZykge1xuICAgICAgICAgICAgdGhpcy5maXJlKG5ldyBFdmVudCgncGl0Y2hlbmQnLCBldmVudERhdGEpKTtcbiAgICAgICAgfVxuICAgICAgICB0aGlzLmZpcmUobmV3IEV2ZW50KCdtb3ZlZW5kJywgZXZlbnREYXRhKSk7XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogQ2hhbmdlcyBhbnkgY29tYmluYXRpb24gb2YgY2VudGVyLCB6b29tLCBiZWFyaW5nLCBhbmQgcGl0Y2gsIGFuaW1hdGluZyB0aGUgdHJhbnNpdGlvbiBhbG9uZyBhIGN1cnZlIHRoYXRcbiAgICAgKiBldm9rZXMgZmxpZ2h0LiBUaGUgYW5pbWF0aW9uIHNlYW1sZXNzbHkgaW5jb3Jwb3JhdGVzIHpvb21pbmcgYW5kIHBhbm5pbmcgdG8gaGVscFxuICAgICAqIHRoZSB1c2VyIG1haW50YWluIGhlciBiZWFyaW5ncyBldmVuIGFmdGVyIHRyYXZlcnNpbmcgYSBncmVhdCBkaXN0YW5jZS5cbiAgICAgKlxuICAgICAqIEBtZW1iZXJvZiBNYXAjXG4gICAgICogQHBhcmFtIHtPYmplY3R9IG9wdGlvbnMgT3B0aW9ucyBkZXNjcmliaW5nIHRoZSBkZXN0aW5hdGlvbiBhbmQgYW5pbWF0aW9uIG9mIHRoZSB0cmFuc2l0aW9uLlxuICAgICAqICAgICBBY2NlcHRzIHtAbGluayBDYW1lcmFPcHRpb25zfSwge0BsaW5rIEFuaW1hdGlvbk9wdGlvbnN9LFxuICAgICAqICAgICBhbmQgdGhlIGZvbGxvd2luZyBhZGRpdGlvbmFsIG9wdGlvbnMuXG4gICAgICogQHBhcmFtIHtudW1iZXJ9IFtvcHRpb25zLmN1cnZlPTEuNDJdIFRoZSB6b29taW5nIFwiY3VydmVcIiB0aGF0IHdpbGwgb2NjdXIgYWxvbmcgdGhlXG4gICAgICogICAgIGZsaWdodCBwYXRoLiBBIGhpZ2ggdmFsdWUgbWF4aW1pemVzIHpvb21pbmcgZm9yIGFuIGV4YWdnZXJhdGVkIGFuaW1hdGlvbiwgd2hpbGUgYSBsb3dcbiAgICAgKiAgICAgdmFsdWUgbWluaW1pemVzIHpvb21pbmcgZm9yIGFuIGVmZmVjdCBjbG9zZXIgdG8ge0BsaW5rIE1hcCNlYXNlVG99LiAxLjQyIGlzIHRoZSBhdmVyYWdlXG4gICAgICogICAgIHZhbHVlIHNlbGVjdGVkIGJ5IHBhcnRpY2lwYW50cyBpbiB0aGUgdXNlciBzdHVkeSBkaXNjdXNzZWQgaW5cbiAgICAgKiAgICAgW3ZhbiBXaWprICgyMDAzKV0oaHR0cHM6Ly93d3cud2luLnR1ZS5ubC9+dmFud2lqay96b29tcGFuLnBkZikuIEEgdmFsdWUgb2ZcbiAgICAgKiAgICAgYE1hdGgucG93KDYsIDAuMjUpYCB3b3VsZCBiZSBlcXVpdmFsZW50IHRvIHRoZSByb290IG1lYW4gc3F1YXJlZCBhdmVyYWdlIHZlbG9jaXR5LiBBXG4gICAgICogICAgIHZhbHVlIG9mIDEgd291bGQgcHJvZHVjZSBhIGNpcmN1bGFyIG1vdGlvbi5cbiAgICAgKiBAcGFyYW0ge251bWJlcn0gW29wdGlvbnMubWluWm9vbV0gVGhlIHplcm8tYmFzZWQgem9vbSBsZXZlbCBhdCB0aGUgcGVhayBvZiB0aGUgZmxpZ2h0IHBhdGguIElmXG4gICAgICogICAgIGBvcHRpb25zLmN1cnZlYCBpcyBzcGVjaWZpZWQsIHRoaXMgb3B0aW9uIGlzIGlnbm9yZWQuXG4gICAgICogQHBhcmFtIHtudW1iZXJ9IFtvcHRpb25zLnNwZWVkPTEuMl0gVGhlIGF2ZXJhZ2Ugc3BlZWQgb2YgdGhlIGFuaW1hdGlvbiBkZWZpbmVkIGluIHJlbGF0aW9uIHRvXG4gICAgICogICAgIGBvcHRpb25zLmN1cnZlYC4gQSBzcGVlZCBvZiAxLjIgbWVhbnMgdGhhdCB0aGUgbWFwIGFwcGVhcnMgdG8gbW92ZSBhbG9uZyB0aGUgZmxpZ2h0IHBhdGhcbiAgICAgKiAgICAgYnkgMS4yIHRpbWVzIGBvcHRpb25zLmN1cnZlYCBzY3JlZW5mdWxzIGV2ZXJ5IHNlY29uZC4gQSBfc2NyZWVuZnVsXyBpcyB0aGUgbWFwJ3MgdmlzaWJsZSBzcGFuLlxuICAgICAqICAgICBJdCBkb2VzIG5vdCBjb3JyZXNwb25kIHRvIGEgZml4ZWQgcGh5c2ljYWwgZGlzdGFuY2UsIGJ1dCB2YXJpZXMgYnkgem9vbSBsZXZlbC5cbiAgICAgKiBAcGFyYW0ge251bWJlcn0gW29wdGlvbnMuc2NyZWVuU3BlZWRdIFRoZSBhdmVyYWdlIHNwZWVkIG9mIHRoZSBhbmltYXRpb24gbWVhc3VyZWQgaW4gc2NyZWVuZnVsc1xuICAgICAqICAgICBwZXIgc2Vjb25kLCBhc3N1bWluZyBhIGxpbmVhciB0aW1pbmcgY3VydmUuIElmIGBvcHRpb25zLnNwZWVkYCBpcyBzcGVjaWZpZWQsIHRoaXMgb3B0aW9uIGlzIGlnbm9yZWQuXG4gICAgICogQHBhcmFtIHtudW1iZXJ9IFtvcHRpb25zLm1heER1cmF0aW9uXSBUaGUgYW5pbWF0aW9uJ3MgbWF4aW11bSBkdXJhdGlvbiwgbWVhc3VyZWQgaW4gbWlsbGlzZWNvbmRzLlxuICAgICAqICAgICBJZiBkdXJhdGlvbiBleGNlZWRzIG1heGltdW0gZHVyYXRpb24sIGl0IHJlc2V0cyB0byAwLlxuICAgICAqIEBwYXJhbSBldmVudERhdGEgQWRkaXRpb25hbCBwcm9wZXJ0aWVzIHRvIGJlIGFkZGVkIHRvIGV2ZW50IG9iamVjdHMgb2YgZXZlbnRzIHRyaWdnZXJlZCBieSB0aGlzIG1ldGhvZC5cbiAgICAgKiBAZmlyZXMgbW92ZXN0YXJ0XG4gICAgICogQGZpcmVzIHpvb21zdGFydFxuICAgICAqIEBmaXJlcyBwaXRjaHN0YXJ0XG4gICAgICogQGZpcmVzIG1vdmVcbiAgICAgKiBAZmlyZXMgem9vbVxuICAgICAqIEBmaXJlcyByb3RhdGVcbiAgICAgKiBAZmlyZXMgcGl0Y2hcbiAgICAgKiBAZmlyZXMgbW92ZWVuZFxuICAgICAqIEBmaXJlcyB6b29tZW5kXG4gICAgICogQGZpcmVzIHBpdGNoZW5kXG4gICAgICogQHJldHVybnMge01hcH0gYHRoaXNgXG4gICAgICogQGV4YW1wbGVcbiAgICAgKiAvLyBmbHkgd2l0aCBkZWZhdWx0IG9wdGlvbnMgdG8gbnVsbCBpc2xhbmRcbiAgICAgKiBtYXAuZmx5VG8oe2NlbnRlcjogWzAsIDBdLCB6b29tOiA5fSk7XG4gICAgICogLy8gdXNpbmcgZmx5VG8gb3B0aW9uc1xuICAgICAqIG1hcC5mbHlUbyh7XG4gICAgICogICBjZW50ZXI6IFswLCAwXSxcbiAgICAgKiAgIHpvb206IDksXG4gICAgICogICBzcGVlZDogMC4yLFxuICAgICAqICAgY3VydmU6IDEsXG4gICAgICogICBlYXNpbmcodCkge1xuICAgICAqICAgICByZXR1cm4gdDtcbiAgICAgKiAgIH1cbiAgICAgKiB9KTtcbiAgICAgKiBAc2VlIFtGbHkgdG8gYSBsb2NhdGlvbl0oaHR0cHM6Ly93d3cubWFwYm94LmNvbS9tYXBib3gtZ2wtanMvZXhhbXBsZS9mbHl0by8pXG4gICAgICogQHNlZSBbU2xvd2x5IGZseSB0byBhIGxvY2F0aW9uXShodHRwczovL3d3dy5tYXBib3guY29tL21hcGJveC1nbC1qcy9leGFtcGxlL2ZseXRvLW9wdGlvbnMvKVxuICAgICAqIEBzZWUgW0ZseSB0byBhIGxvY2F0aW9uIGJhc2VkIG9uIHNjcm9sbCBwb3NpdGlvbl0oaHR0cHM6Ly93d3cubWFwYm94LmNvbS9tYXBib3gtZ2wtanMvZXhhbXBsZS9zY3JvbGwtZmx5LXRvLylcbiAgICAgKi9cbiAgICBmbHlUbyhvcHRpb25zOiBPYmplY3QsIGV2ZW50RGF0YT86IE9iamVjdCkge1xuICAgICAgICAvLyBUaGlzIG1ldGhvZCBpbXBsZW1lbnRzIGFuIOKAnG9wdGltYWwgcGF0aOKAnSBhbmltYXRpb24sIGFzIGRldGFpbGVkIGluOlxuICAgICAgICAvL1xuICAgICAgICAvLyBWYW4gV2lqaywgSmFya2UgSi47IE51aWosIFdpbSBBLiBBLiDigJxTbW9vdGggYW5kIGVmZmljaWVudCB6b29taW5nIGFuZCBwYW5uaW5nLuKAnSBJTkZPVklTXG4gICAgICAgIC8vICAg4oCZMDMuIHBwLiAxNeKAkzIyLiA8aHR0cHM6Ly93d3cud2luLnR1ZS5ubC9+dmFud2lqay96b29tcGFuLnBkZiNwYWdlPTU+LlxuICAgICAgICAvL1xuICAgICAgICAvLyBXaGVyZSBhcHBsaWNhYmxlLCBsb2NhbCB2YXJpYWJsZSBkb2N1bWVudGF0aW9uIGJlZ2lucyB3aXRoIHRoZSBhc3NvY2lhdGVkIHZhcmlhYmxlIG9yXG4gICAgICAgIC8vIGZ1bmN0aW9uIGluIHZhbiBXaWprICgyMDAzKS5cblxuICAgICAgICB0aGlzLnN0b3AoKTtcblxuICAgICAgICBvcHRpb25zID0gZXh0ZW5kKHtcbiAgICAgICAgICAgIG9mZnNldDogWzAsIDBdLFxuICAgICAgICAgICAgc3BlZWQ6IDEuMixcbiAgICAgICAgICAgIGN1cnZlOiAxLjQyLFxuICAgICAgICAgICAgZWFzaW5nOiBkZWZhdWx0RWFzaW5nXG4gICAgICAgIH0sIG9wdGlvbnMpO1xuXG4gICAgICAgIGNvbnN0IHRyID0gdGhpcy50cmFuc2Zvcm0sXG4gICAgICAgICAgICBzdGFydFpvb20gPSB0aGlzLmdldFpvb20oKSxcbiAgICAgICAgICAgIHN0YXJ0QmVhcmluZyA9IHRoaXMuZ2V0QmVhcmluZygpLFxuICAgICAgICAgICAgc3RhcnRQaXRjaCA9IHRoaXMuZ2V0UGl0Y2goKTtcblxuICAgICAgICBjb25zdCB6b29tID0gJ3pvb20nIGluIG9wdGlvbnMgPyBjbGFtcCgrb3B0aW9ucy56b29tLCB0ci5taW5ab29tLCB0ci5tYXhab29tKSA6IHN0YXJ0Wm9vbTtcbiAgICAgICAgY29uc3QgYmVhcmluZyA9ICdiZWFyaW5nJyBpbiBvcHRpb25zID8gdGhpcy5fbm9ybWFsaXplQmVhcmluZyhvcHRpb25zLmJlYXJpbmcsIHN0YXJ0QmVhcmluZykgOiBzdGFydEJlYXJpbmc7XG4gICAgICAgIGNvbnN0IHBpdGNoID0gJ3BpdGNoJyBpbiBvcHRpb25zID8gK29wdGlvbnMucGl0Y2ggOiBzdGFydFBpdGNoO1xuXG4gICAgICAgIGNvbnN0IHNjYWxlID0gdHIuem9vbVNjYWxlKHpvb20gLSBzdGFydFpvb20pO1xuICAgICAgICBjb25zdCBwb2ludEF0T2Zmc2V0ID0gdHIuY2VudGVyUG9pbnQuYWRkKFBvaW50LmNvbnZlcnQob3B0aW9ucy5vZmZzZXQpKTtcbiAgICAgICAgY29uc3QgbG9jYXRpb25BdE9mZnNldCA9IHRyLnBvaW50TG9jYXRpb24ocG9pbnRBdE9mZnNldCk7XG4gICAgICAgIGNvbnN0IGNlbnRlciA9IExuZ0xhdC5jb252ZXJ0KG9wdGlvbnMuY2VudGVyIHx8IGxvY2F0aW9uQXRPZmZzZXQpO1xuICAgICAgICB0aGlzLl9ub3JtYWxpemVDZW50ZXIoY2VudGVyKTtcblxuICAgICAgICBjb25zdCBmcm9tID0gdHIucHJvamVjdChsb2NhdGlvbkF0T2Zmc2V0KTtcbiAgICAgICAgY29uc3QgZGVsdGEgPSB0ci5wcm9qZWN0KGNlbnRlcikuc3ViKGZyb20pO1xuXG4gICAgICAgIGxldCByaG8gPSBvcHRpb25zLmN1cnZlO1xuXG4gICAgICAgIC8vIHfigoA6IEluaXRpYWwgdmlzaWJsZSBzcGFuLCBtZWFzdXJlZCBpbiBwaXhlbHMgYXQgdGhlIGluaXRpYWwgc2NhbGUuXG4gICAgICAgIGNvbnN0IHcwID0gTWF0aC5tYXgodHIud2lkdGgsIHRyLmhlaWdodCksXG4gICAgICAgICAgICAvLyB34oKBOiBGaW5hbCB2aXNpYmxlIHNwYW4sIG1lYXN1cmVkIGluIHBpeGVscyB3aXRoIHJlc3BlY3QgdG8gdGhlIGluaXRpYWwgc2NhbGUuXG4gICAgICAgICAgICB3MSA9IHcwIC8gc2NhbGUsXG4gICAgICAgICAgICAvLyBMZW5ndGggb2YgdGhlIGZsaWdodCBwYXRoIGFzIHByb2plY3RlZCBvbnRvIHRoZSBncm91bmQgcGxhbmUsIG1lYXN1cmVkIGluIHBpeGVscyBmcm9tXG4gICAgICAgICAgICAvLyB0aGUgd29ybGQgaW1hZ2Ugb3JpZ2luIGF0IHRoZSBpbml0aWFsIHNjYWxlLlxuICAgICAgICAgICAgdTEgPSBkZWx0YS5tYWcoKTtcblxuICAgICAgICBpZiAoJ21pblpvb20nIGluIG9wdGlvbnMpIHtcbiAgICAgICAgICAgIGNvbnN0IG1pblpvb20gPSBjbGFtcChNYXRoLm1pbihvcHRpb25zLm1pblpvb20sIHN0YXJ0Wm9vbSwgem9vbSksIHRyLm1pblpvb20sIHRyLm1heFpvb20pO1xuICAgICAgICAgICAgLy8gdzxzdWI+bTwvc3ViPjogTWF4aW11bSB2aXNpYmxlIHNwYW4sIG1lYXN1cmVkIGluIHBpeGVscyB3aXRoIHJlc3BlY3QgdG8gdGhlIGluaXRpYWxcbiAgICAgICAgICAgIC8vIHNjYWxlLlxuICAgICAgICAgICAgY29uc3Qgd01heCA9IHcwIC8gdHIuem9vbVNjYWxlKG1pblpvb20gLSBzdGFydFpvb20pO1xuICAgICAgICAgICAgcmhvID0gTWF0aC5zcXJ0KHdNYXggLyB1MSAqIDIpO1xuICAgICAgICB9XG5cbiAgICAgICAgLy8gz4HCslxuICAgICAgICBjb25zdCByaG8yID0gcmhvICogcmhvO1xuXG4gICAgICAgIC8qKlxuICAgICAgICAgKiBy4bWiOiBSZXR1cm5zIHRoZSB6b29tLW91dCBmYWN0b3IgYXQgb25lIGVuZCBvZiB0aGUgYW5pbWF0aW9uLlxuICAgICAgICAgKlxuICAgICAgICAgKiBAcGFyYW0gaSAwIGZvciB0aGUgYXNjZW50IG9yIDEgZm9yIHRoZSBkZXNjZW50LlxuICAgICAgICAgKiBAcHJpdmF0ZVxuICAgICAgICAgKi9cbiAgICAgICAgZnVuY3Rpb24gcihpKSB7XG4gICAgICAgICAgICBjb25zdCBiID0gKHcxICogdzEgLSB3MCAqIHcwICsgKGkgPyAtMSA6IDEpICogcmhvMiAqIHJobzIgKiB1MSAqIHUxKSAvICgyICogKGkgPyB3MSA6IHcwKSAqIHJobzIgKiB1MSk7XG4gICAgICAgICAgICByZXR1cm4gTWF0aC5sb2coTWF0aC5zcXJ0KGIgKiBiICsgMSkgLSBiKTtcbiAgICAgICAgfVxuXG4gICAgICAgIGZ1bmN0aW9uIHNpbmgobikgeyByZXR1cm4gKE1hdGguZXhwKG4pIC0gTWF0aC5leHAoLW4pKSAvIDI7IH1cbiAgICAgICAgZnVuY3Rpb24gY29zaChuKSB7IHJldHVybiAoTWF0aC5leHAobikgKyBNYXRoLmV4cCgtbikpIC8gMjsgfVxuICAgICAgICBmdW5jdGlvbiB0YW5oKG4pIHsgcmV0dXJuIHNpbmgobikgLyBjb3NoKG4pOyB9XG5cbiAgICAgICAgLy8gcuKCgDogWm9vbS1vdXQgZmFjdG9yIGR1cmluZyBhc2NlbnQuXG4gICAgICAgIGNvbnN0IHIwID0gcigwKTtcblxuICAgICAgICAvLyB3KHMpOiBSZXR1cm5zIHRoZSB2aXNpYmxlIHNwYW4gb24gdGhlIGdyb3VuZCwgbWVhc3VyZWQgaW4gcGl4ZWxzIHdpdGggcmVzcGVjdCB0byB0aGVcbiAgICAgICAgLy8gaW5pdGlhbCBzY2FsZS4gQXNzdW1lcyBhbiBhbmd1bGFyIGZpZWxkIG9mIHZpZXcgb2YgMiBhcmN0YW4gwr0g4omIIDUzwrAuXG4gICAgICAgIGxldCB3OiAobnVtYmVyKSA9PiBudW1iZXIgPSBmdW5jdGlvbiAocykge1xuICAgICAgICAgICAgcmV0dXJuIChjb3NoKHIwKSAvIGNvc2gocjAgKyByaG8gKiBzKSk7XG4gICAgICAgIH07XG5cbiAgICAgICAgLy8gdShzKTogUmV0dXJucyB0aGUgZGlzdGFuY2UgYWxvbmcgdGhlIGZsaWdodCBwYXRoIGFzIHByb2plY3RlZCBvbnRvIHRoZSBncm91bmQgcGxhbmUsXG4gICAgICAgIC8vIG1lYXN1cmVkIGluIHBpeGVscyBmcm9tIHRoZSB3b3JsZCBpbWFnZSBvcmlnaW4gYXQgdGhlIGluaXRpYWwgc2NhbGUuXG4gICAgICAgIGxldCB1OiAobnVtYmVyKSA9PiBudW1iZXIgPSBmdW5jdGlvbiAocykge1xuICAgICAgICAgICAgcmV0dXJuIHcwICogKChjb3NoKHIwKSAqIHRhbmgocjAgKyByaG8gKiBzKSAtIHNpbmgocjApKSAvIHJobzIpIC8gdTE7XG4gICAgICAgIH07XG5cbiAgICAgICAgLy8gUzogVG90YWwgbGVuZ3RoIG9mIHRoZSBmbGlnaHQgcGF0aCwgbWVhc3VyZWQgaW4gz4Etc2NyZWVuZnVscy5cbiAgICAgICAgbGV0IFMgPSAocigxKSAtIHIwKSAvIHJobztcblxuICAgICAgICAvLyBXaGVuIHXigoAgPSB14oKBLCB0aGUgb3B0aW1hbCBwYXRoIGRvZXNu4oCZdCByZXF1aXJlIGJvdGggYXNjZW50IGFuZCBkZXNjZW50LlxuICAgICAgICBpZiAoTWF0aC5hYnModTEpIDwgMC4wMDAwMDEgfHwgIWlzRmluaXRlKFMpKSB7XG4gICAgICAgICAgICAvLyBQZXJmb3JtIGEgbW9yZSBvciBsZXNzIGluc3RhbnRhbmVvdXMgdHJhbnNpdGlvbiBpZiB0aGUgcGF0aCBpcyB0b28gc2hvcnQuXG4gICAgICAgICAgICBpZiAoTWF0aC5hYnModzAgLSB3MSkgPCAwLjAwMDAwMSkgcmV0dXJuIHRoaXMuZWFzZVRvKG9wdGlvbnMsIGV2ZW50RGF0YSk7XG5cbiAgICAgICAgICAgIGNvbnN0IGsgPSB3MSA8IHcwID8gLTEgOiAxO1xuICAgICAgICAgICAgUyA9IE1hdGguYWJzKE1hdGgubG9nKHcxIC8gdzApKSAvIHJobztcblxuICAgICAgICAgICAgdSA9IGZ1bmN0aW9uKCkgeyByZXR1cm4gMDsgfTtcbiAgICAgICAgICAgIHcgPSBmdW5jdGlvbihzKSB7IHJldHVybiBNYXRoLmV4cChrICogcmhvICogcyk7IH07XG4gICAgICAgIH1cblxuICAgICAgICBpZiAoJ2R1cmF0aW9uJyBpbiBvcHRpb25zKSB7XG4gICAgICAgICAgICBvcHRpb25zLmR1cmF0aW9uID0gK29wdGlvbnMuZHVyYXRpb247XG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICBjb25zdCBWID0gJ3NjcmVlblNwZWVkJyBpbiBvcHRpb25zID8gK29wdGlvbnMuc2NyZWVuU3BlZWQgLyByaG8gOiArb3B0aW9ucy5zcGVlZDtcbiAgICAgICAgICAgIG9wdGlvbnMuZHVyYXRpb24gPSAxMDAwICogUyAvIFY7XG4gICAgICAgIH1cblxuICAgICAgICBpZiAob3B0aW9ucy5tYXhEdXJhdGlvbiAmJiBvcHRpb25zLmR1cmF0aW9uID4gb3B0aW9ucy5tYXhEdXJhdGlvbikge1xuICAgICAgICAgICAgb3B0aW9ucy5kdXJhdGlvbiA9IDA7XG4gICAgICAgIH1cblxuICAgICAgICB0aGlzLl96b29taW5nID0gdHJ1ZTtcbiAgICAgICAgdGhpcy5fcm90YXRpbmcgPSAoc3RhcnRCZWFyaW5nICE9PSBiZWFyaW5nKTtcbiAgICAgICAgdGhpcy5fcGl0Y2hpbmcgPSAocGl0Y2ggIT09IHN0YXJ0UGl0Y2gpO1xuXG4gICAgICAgIHRoaXMuX3ByZXBhcmVFYXNlKGV2ZW50RGF0YSwgZmFsc2UpO1xuXG4gICAgICAgIHRoaXMuX2Vhc2UoKGspID0+IHtcbiAgICAgICAgICAgIC8vIHM6IFRoZSBkaXN0YW5jZSB0cmF2ZWxlZCBhbG9uZyB0aGUgZmxpZ2h0IHBhdGgsIG1lYXN1cmVkIGluIM+BLXNjcmVlbmZ1bHMuXG4gICAgICAgICAgICBjb25zdCBzID0gayAqIFM7XG4gICAgICAgICAgICBjb25zdCBzY2FsZSA9IDEgLyB3KHMpO1xuICAgICAgICAgICAgdHIuem9vbSA9IGsgPT09IDEgPyB6b29tIDogc3RhcnRab29tICsgdHIuc2NhbGVab29tKHNjYWxlKTtcblxuICAgICAgICAgICAgaWYgKHRoaXMuX3JvdGF0aW5nKSB7XG4gICAgICAgICAgICAgICAgdHIuYmVhcmluZyA9IGludGVycG9sYXRlKHN0YXJ0QmVhcmluZywgYmVhcmluZywgayk7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBpZiAodGhpcy5fcGl0Y2hpbmcpIHtcbiAgICAgICAgICAgICAgICB0ci5waXRjaCA9IGludGVycG9sYXRlKHN0YXJ0UGl0Y2gsIHBpdGNoLCBrKTtcbiAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgY29uc3QgbmV3Q2VudGVyID0gayA9PT0gMSA/IGNlbnRlciA6IHRyLnVucHJvamVjdChmcm9tLmFkZChkZWx0YS5tdWx0KHUocykpKS5tdWx0KHNjYWxlKSk7XG4gICAgICAgICAgICB0ci5zZXRMb2NhdGlvbkF0UG9pbnQodHIucmVuZGVyV29ybGRDb3BpZXMgPyBuZXdDZW50ZXIud3JhcCgpIDogbmV3Q2VudGVyLCBwb2ludEF0T2Zmc2V0KTtcblxuICAgICAgICAgICAgdGhpcy5fZmlyZU1vdmVFdmVudHMoZXZlbnREYXRhKTtcblxuICAgICAgICB9LCAoKSA9PiB0aGlzLl9hZnRlckVhc2UoZXZlbnREYXRhKSwgb3B0aW9ucyk7XG5cbiAgICAgICAgcmV0dXJuIHRoaXM7XG4gICAgfVxuXG4gICAgaXNFYXNpbmcoKSB7XG4gICAgICAgIHJldHVybiAhIXRoaXMuX2Vhc2VGcmFtZUlkO1xuICAgIH1cblxuICAgIC8qKlxuICAgICAqIFN0b3BzIGFueSBhbmltYXRlZCB0cmFuc2l0aW9uIHVuZGVyd2F5LlxuICAgICAqXG4gICAgICogQG1lbWJlcm9mIE1hcCNcbiAgICAgKiBAcmV0dXJucyB7TWFwfSBgdGhpc2BcbiAgICAgKi9cbiAgICBzdG9wKCk6IHRoaXMge1xuICAgICAgICBpZiAodGhpcy5fZWFzZUZyYW1lSWQpIHtcbiAgICAgICAgICAgIHRoaXMuX2NhbmNlbFJlbmRlckZyYW1lKHRoaXMuX2Vhc2VGcmFtZUlkKTtcbiAgICAgICAgICAgIGRlbGV0ZSB0aGlzLl9lYXNlRnJhbWVJZDtcbiAgICAgICAgICAgIGRlbGV0ZSB0aGlzLl9vbkVhc2VGcmFtZTtcbiAgICAgICAgfVxuXG4gICAgICAgIGlmICh0aGlzLl9vbkVhc2VFbmQpIHtcbiAgICAgICAgICAgIC8vIFRoZSBfb25FYXNlRW5kIGZ1bmN0aW9uIG1pZ2h0IGVtaXQgZXZlbnRzIHdoaWNoIHRyaWdnZXIgbmV3XG4gICAgICAgICAgICAvLyBhbmltYXRpb24sIHdoaWNoIHNldHMgYSBuZXcgX29uRWFzZUVuZC4gRW5zdXJlIHdlIGRvbid0IGRlbGV0ZVxuICAgICAgICAgICAgLy8gaXQgdW5pbnRlbnRpb25hbGx5LlxuICAgICAgICAgICAgY29uc3Qgb25FYXNlRW5kID0gdGhpcy5fb25FYXNlRW5kO1xuICAgICAgICAgICAgZGVsZXRlIHRoaXMuX29uRWFzZUVuZDtcbiAgICAgICAgICAgIG9uRWFzZUVuZC5jYWxsKHRoaXMpO1xuICAgICAgICB9XG4gICAgICAgIHJldHVybiB0aGlzO1xuICAgIH1cblxuICAgIF9lYXNlKGZyYW1lOiAobnVtYmVyKSA9PiB2b2lkLFxuICAgICAgICAgIGZpbmlzaDogKCkgPT4gdm9pZCxcbiAgICAgICAgICBvcHRpb25zOiB7YW5pbWF0ZTogYm9vbGVhbiwgZHVyYXRpb246IG51bWJlciwgZWFzaW5nOiAobnVtYmVyKSA9PiBudW1iZXJ9KSB7XG4gICAgICAgIGlmIChvcHRpb25zLmFuaW1hdGUgPT09IGZhbHNlIHx8IG9wdGlvbnMuZHVyYXRpb24gPT09IDApIHtcbiAgICAgICAgICAgIGZyYW1lKDEpO1xuICAgICAgICAgICAgZmluaXNoKCk7XG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICB0aGlzLl9lYXNlU3RhcnQgPSBicm93c2VyLm5vdygpO1xuICAgICAgICAgICAgdGhpcy5fZWFzZU9wdGlvbnMgPSBvcHRpb25zO1xuICAgICAgICAgICAgdGhpcy5fb25FYXNlRnJhbWUgPSBmcmFtZTtcbiAgICAgICAgICAgIHRoaXMuX29uRWFzZUVuZCA9IGZpbmlzaDtcbiAgICAgICAgICAgIHRoaXMuX2Vhc2VGcmFtZUlkID0gdGhpcy5fcmVxdWVzdFJlbmRlckZyYW1lKHRoaXMuX3JlbmRlckZyYW1lQ2FsbGJhY2spO1xuICAgICAgICB9XG4gICAgfVxuXG4gICAgLy8gQ2FsbGJhY2sgZm9yIG1hcC5fcmVxdWVzdFJlbmRlckZyYW1lXG4gICAgX3JlbmRlckZyYW1lQ2FsbGJhY2soKSB7XG4gICAgICAgIGNvbnN0IHQgPSBNYXRoLm1pbigoYnJvd3Nlci5ub3coKSAtIHRoaXMuX2Vhc2VTdGFydCkgLyB0aGlzLl9lYXNlT3B0aW9ucy5kdXJhdGlvbiwgMSk7XG4gICAgICAgIHRoaXMuX29uRWFzZUZyYW1lKHRoaXMuX2Vhc2VPcHRpb25zLmVhc2luZyh0KSk7XG4gICAgICAgIGlmICh0IDwgMSkge1xuICAgICAgICAgICAgdGhpcy5fZWFzZUZyYW1lSWQgPSB0aGlzLl9yZXF1ZXN0UmVuZGVyRnJhbWUodGhpcy5fcmVuZGVyRnJhbWVDYWxsYmFjayk7XG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICB0aGlzLnN0b3AoKTtcbiAgICAgICAgfVxuICAgIH1cblxuICAgIC8vIGNvbnZlcnQgYmVhcmluZyBzbyB0aGF0IGl0J3MgbnVtZXJpY2FsbHkgY2xvc2UgdG8gdGhlIGN1cnJlbnQgb25lIHNvIHRoYXQgaXQgaW50ZXJwb2xhdGVzIHByb3Blcmx5XG4gICAgX25vcm1hbGl6ZUJlYXJpbmcoYmVhcmluZzogbnVtYmVyLCBjdXJyZW50QmVhcmluZzogbnVtYmVyKSB7XG4gICAgICAgIGJlYXJpbmcgPSB3cmFwKGJlYXJpbmcsIC0xODAsIDE4MCk7XG4gICAgICAgIGNvbnN0IGRpZmYgPSBNYXRoLmFicyhiZWFyaW5nIC0gY3VycmVudEJlYXJpbmcpO1xuICAgICAgICBpZiAoTWF0aC5hYnMoYmVhcmluZyAtIDM2MCAtIGN1cnJlbnRCZWFyaW5nKSA8IGRpZmYpIGJlYXJpbmcgLT0gMzYwO1xuICAgICAgICBpZiAoTWF0aC5hYnMoYmVhcmluZyArIDM2MCAtIGN1cnJlbnRCZWFyaW5nKSA8IGRpZmYpIGJlYXJpbmcgKz0gMzYwO1xuICAgICAgICByZXR1cm4gYmVhcmluZztcbiAgICB9XG5cbiAgICAvLyBJZiBhIHBhdGggY3Jvc3NpbmcgdGhlIGFudGltZXJpZGlhbiB3b3VsZCBiZSBzaG9ydGVyLCBleHRlbmQgdGhlIGZpbmFsIGNvb3JkaW5hdGUgc28gdGhhdFxuICAgIC8vIGludGVycG9sYXRpbmcgYmV0d2VlbiB0aGUgdHdvIGVuZHBvaW50cyB3aWxsIGNyb3NzIGl0LlxuICAgIF9ub3JtYWxpemVDZW50ZXIoY2VudGVyOiBMbmdMYXQpIHtcbiAgICAgICAgY29uc3QgdHIgPSB0aGlzLnRyYW5zZm9ybTtcbiAgICAgICAgaWYgKCF0ci5yZW5kZXJXb3JsZENvcGllcyB8fCB0ci5sbmdSYW5nZSkgcmV0dXJuO1xuXG4gICAgICAgIGNvbnN0IGRlbHRhID0gY2VudGVyLmxuZyAtIHRyLmNlbnRlci5sbmc7XG4gICAgICAgIGNlbnRlci5sbmcgKz1cbiAgICAgICAgICAgIGRlbHRhID4gMTgwID8gLTM2MCA6XG4gICAgICAgICAgICBkZWx0YSA8IC0xODAgPyAzNjAgOiAwO1xuICAgIH1cbn1cblxuZXhwb3J0IGRlZmF1bHQgQ2FtZXJhO1xuIiwiLy8gQGZsb3dcblxuaW1wb3J0IERPTSBmcm9tICcuLi8uLi91dGlsL2RvbSc7XG5pbXBvcnQgeyBiaW5kQWxsIH0gZnJvbSAnLi4vLi4vdXRpbC91dGlsJztcbmltcG9ydCBjb25maWcgZnJvbSAnLi4vLi4vdXRpbC9jb25maWcnO1xuXG5pbXBvcnQgdHlwZSBNYXAgZnJvbSAnLi4vbWFwJztcblxudHlwZSBPcHRpb25zID0ge1xuICAgIGNvbXBhY3Q/OiBib29sZWFuLFxuICAgIGN1c3RvbUF0dHJpYnV0aW9uPzogc3RyaW5nIHwgQXJyYXk8c3RyaW5nPlxufTtcblxuLyoqXG4gKiBBbiBgQXR0cmlidXRpb25Db250cm9sYCBjb250cm9sIHByZXNlbnRzIHRoZSBtYXAncyBbYXR0cmlidXRpb24gaW5mb3JtYXRpb25dKGh0dHBzOi8vd3d3Lm1hcGJveC5jb20vaGVscC9hdHRyaWJ1dGlvbi8pLlxuICpcbiAqIEBpbXBsZW1lbnRzIHtJQ29udHJvbH1cbiAqIEBwYXJhbSB7T2JqZWN0fSBbb3B0aW9uc11cbiAqIEBwYXJhbSB7Ym9vbGVhbn0gW29wdGlvbnMuY29tcGFjdF0gSWYgYHRydWVgIGZvcmNlIGEgY29tcGFjdCBhdHRyaWJ1dGlvbiB0aGF0IHNob3dzIHRoZSBmdWxsIGF0dHJpYnV0aW9uIG9uIG1vdXNlIGhvdmVyLCBvciBpZiBgZmFsc2VgIGZvcmNlIHRoZSBmdWxsIGF0dHJpYnV0aW9uIGNvbnRyb2wuIFRoZSBkZWZhdWx0IGlzIGEgcmVzcG9uc2l2ZSBhdHRyaWJ1dGlvbiB0aGF0IGNvbGxhcHNlcyB3aGVuIHRoZSBtYXAgaXMgbGVzcyB0aGFuIDY0MCBwaXhlbHMgd2lkZS5cbiAqIEBwYXJhbSB7c3RyaW5nIHwgQXJyYXk8c3RyaW5nPn0gW29wdGlvbnMuY3VzdG9tQXR0cmlidXRpb25dIFN0cmluZyBvciBzdHJpbmdzIHRvIHNob3cgaW4gYWRkaXRpb24gdG8gYW55IG90aGVyIGF0dHJpYnV0aW9ucy5cbiAqIEBleGFtcGxlXG4gKiB2YXIgbWFwID0gbmV3IG1hcGJveGdsLk1hcCh7YXR0cmlidXRpb25Db250cm9sOiBmYWxzZX0pXG4gKiAgICAgLmFkZENvbnRyb2wobmV3IG1hcGJveGdsLkF0dHJpYnV0aW9uQ29udHJvbCh7XG4gKiAgICAgICAgIGNvbXBhY3Q6IHRydWVcbiAqICAgICB9KSk7XG4gKi9cbmNsYXNzIEF0dHJpYnV0aW9uQ29udHJvbCB7XG4gICAgb3B0aW9uczogT3B0aW9ucztcbiAgICBfbWFwOiBNYXA7XG4gICAgX2NvbnRhaW5lcjogSFRNTEVsZW1lbnQ7XG4gICAgX2VkaXRMaW5rOiA/SFRNTEFuY2hvckVsZW1lbnQ7XG4gICAgc3R5bGVJZDogc3RyaW5nO1xuICAgIHN0eWxlT3duZXI6IHN0cmluZztcblxuICAgIGNvbnN0cnVjdG9yKG9wdGlvbnM6IE9wdGlvbnMgPSB7fSkge1xuICAgICAgICB0aGlzLm9wdGlvbnMgPSBvcHRpb25zO1xuXG4gICAgICAgIGJpbmRBbGwoW1xuICAgICAgICAgICAgJ191cGRhdGVFZGl0TGluaycsXG4gICAgICAgICAgICAnX3VwZGF0ZURhdGEnLFxuICAgICAgICAgICAgJ191cGRhdGVDb21wYWN0J1xuICAgICAgICBdLCB0aGlzKTtcbiAgICB9XG5cbiAgICBnZXREZWZhdWx0UG9zaXRpb24oKSB7XG4gICAgICAgIHJldHVybiAnYm90dG9tLXJpZ2h0JztcbiAgICB9XG5cbiAgICBvbkFkZChtYXA6IE1hcCkge1xuICAgICAgICBjb25zdCBjb21wYWN0ID0gdGhpcy5vcHRpb25zICYmIHRoaXMub3B0aW9ucy5jb21wYWN0O1xuXG4gICAgICAgIHRoaXMuX21hcCA9IG1hcDtcbiAgICAgICAgdGhpcy5fY29udGFpbmVyID0gRE9NLmNyZWF0ZSgnZGl2JywgJ21hcGJveGdsLWN0cmwgbWFwYm94Z2wtY3RybC1hdHRyaWInKTtcblxuICAgICAgICBpZiAoY29tcGFjdCkge1xuICAgICAgICAgICAgdGhpcy5fY29udGFpbmVyLmNsYXNzTGlzdC5hZGQoJ21hcGJveGdsLWNvbXBhY3QnKTtcbiAgICAgICAgfVxuXG4gICAgICAgIHRoaXMuX3VwZGF0ZUF0dHJpYnV0aW9ucygpO1xuICAgICAgICB0aGlzLl91cGRhdGVFZGl0TGluaygpO1xuXG4gICAgICAgIHRoaXMuX21hcC5vbignc291cmNlZGF0YScsIHRoaXMuX3VwZGF0ZURhdGEpO1xuICAgICAgICB0aGlzLl9tYXAub24oJ21vdmVlbmQnLCB0aGlzLl91cGRhdGVFZGl0TGluayk7XG5cbiAgICAgICAgaWYgKGNvbXBhY3QgPT09IHVuZGVmaW5lZCkge1xuICAgICAgICAgICAgdGhpcy5fbWFwLm9uKCdyZXNpemUnLCB0aGlzLl91cGRhdGVDb21wYWN0KTtcbiAgICAgICAgICAgIHRoaXMuX3VwZGF0ZUNvbXBhY3QoKTtcbiAgICAgICAgfVxuXG4gICAgICAgIHJldHVybiB0aGlzLl9jb250YWluZXI7XG4gICAgfVxuXG4gICAgb25SZW1vdmUoKSB7XG4gICAgICAgIERPTS5yZW1vdmUodGhpcy5fY29udGFpbmVyKTtcblxuICAgICAgICB0aGlzLl9tYXAub2ZmKCdzb3VyY2VkYXRhJywgdGhpcy5fdXBkYXRlRGF0YSk7XG4gICAgICAgIHRoaXMuX21hcC5vZmYoJ21vdmVlbmQnLCB0aGlzLl91cGRhdGVFZGl0TGluayk7XG4gICAgICAgIHRoaXMuX21hcC5vZmYoJ3Jlc2l6ZScsIHRoaXMuX3VwZGF0ZUNvbXBhY3QpO1xuXG4gICAgICAgIHRoaXMuX21hcCA9ICh1bmRlZmluZWQ6IGFueSk7XG4gICAgfVxuXG4gICAgX3VwZGF0ZUVkaXRMaW5rKCkge1xuICAgICAgICBsZXQgZWRpdExpbmsgPSB0aGlzLl9lZGl0TGluaztcbiAgICAgICAgaWYgKCFlZGl0TGluaykge1xuICAgICAgICAgICAgZWRpdExpbmsgPSB0aGlzLl9lZGl0TGluayA9ICh0aGlzLl9jb250YWluZXIucXVlcnlTZWxlY3RvcignLm1hcGJveC1pbXByb3ZlLW1hcCcpOiBhbnkpO1xuICAgICAgICB9XG5cbiAgICAgICAgY29uc3QgcGFyYW1zID0gW1xuICAgICAgICAgICAge2tleTogXCJvd25lclwiLCB2YWx1ZTogdGhpcy5zdHlsZU93bmVyfSxcbiAgICAgICAgICAgIHtrZXk6IFwiaWRcIiwgdmFsdWU6IHRoaXMuc3R5bGVJZH0sXG4gICAgICAgICAgICB7a2V5OiBcImFjY2Vzc190b2tlblwiLCB2YWx1ZTogY29uZmlnLkFDQ0VTU19UT0tFTn1cbiAgICAgICAgXTtcblxuICAgICAgICBpZiAoZWRpdExpbmspIHtcbiAgICAgICAgICAgIGNvbnN0IHBhcmFtU3RyaW5nID0gcGFyYW1zLnJlZHVjZSgoYWNjLCBuZXh0LCBpKSA9PiB7XG4gICAgICAgICAgICAgICAgaWYgKG5leHQudmFsdWUpIHtcbiAgICAgICAgICAgICAgICAgICAgYWNjICs9IGAke25leHQua2V5fT0ke25leHQudmFsdWV9JHtpIDwgcGFyYW1zLmxlbmd0aCAtIDEgPyAnJicgOiAnJ31gO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICByZXR1cm4gYWNjO1xuICAgICAgICAgICAgfSwgYD9gKTtcbiAgICAgICAgICAgIGVkaXRMaW5rLmhyZWYgPSBgaHR0cHM6Ly93d3cubWFwYm94LmNvbS9mZWVkYmFjay8ke3BhcmFtU3RyaW5nfSR7dGhpcy5fbWFwLl9oYXNoID8gdGhpcy5fbWFwLl9oYXNoLmdldEhhc2hTdHJpbmcodHJ1ZSkgOiAnJ31gO1xuICAgICAgICB9XG4gICAgfVxuXG4gICAgX3VwZGF0ZURhdGEoZTogYW55KSB7XG4gICAgICAgIGlmIChlICYmIGUuc291cmNlRGF0YVR5cGUgPT09ICdtZXRhZGF0YScpIHtcbiAgICAgICAgICAgIHRoaXMuX3VwZGF0ZUF0dHJpYnV0aW9ucygpO1xuICAgICAgICAgICAgdGhpcy5fdXBkYXRlRWRpdExpbmsoKTtcbiAgICAgICAgfVxuICAgIH1cblxuICAgIF91cGRhdGVBdHRyaWJ1dGlvbnMoKSB7XG4gICAgICAgIGlmICghdGhpcy5fbWFwLnN0eWxlKSByZXR1cm47XG4gICAgICAgIGxldCBhdHRyaWJ1dGlvbnM6IEFycmF5PHN0cmluZz4gPSBbXTtcbiAgICAgICAgaWYgKHRoaXMub3B0aW9ucy5jdXN0b21BdHRyaWJ1dGlvbikge1xuICAgICAgICAgICAgaWYgKEFycmF5LmlzQXJyYXkodGhpcy5vcHRpb25zLmN1c3RvbUF0dHJpYnV0aW9uKSkge1xuICAgICAgICAgICAgICAgIGF0dHJpYnV0aW9ucyA9IGF0dHJpYnV0aW9ucy5jb25jYXQodGhpcy5vcHRpb25zLmN1c3RvbUF0dHJpYnV0aW9uKTtcbiAgICAgICAgICAgIH0gZWxzZSBpZiAodHlwZW9mIHRoaXMub3B0aW9ucy5jdXN0b21BdHRyaWJ1dGlvbiA9PT0gJ3N0cmluZycpIHtcbiAgICAgICAgICAgICAgICBhdHRyaWJ1dGlvbnMucHVzaCh0aGlzLm9wdGlvbnMuY3VzdG9tQXR0cmlidXRpb24pO1xuICAgICAgICAgICAgfVxuICAgICAgICB9XG5cbiAgICAgICAgaWYgKHRoaXMuX21hcC5zdHlsZS5zdHlsZXNoZWV0KSB7XG4gICAgICAgICAgICBjb25zdCBzdHlsZXNoZWV0OiBhbnkgPSB0aGlzLl9tYXAuc3R5bGUuc3R5bGVzaGVldDtcbiAgICAgICAgICAgIHRoaXMuc3R5bGVPd25lciA9IHN0eWxlc2hlZXQub3duZXI7XG4gICAgICAgICAgICB0aGlzLnN0eWxlSWQgPSBzdHlsZXNoZWV0LmlkO1xuICAgICAgICB9XG5cbiAgICAgICAgY29uc3Qgc291cmNlQ2FjaGVzID0gdGhpcy5fbWFwLnN0eWxlLnNvdXJjZUNhY2hlcztcbiAgICAgICAgZm9yIChjb25zdCBpZCBpbiBzb3VyY2VDYWNoZXMpIHtcbiAgICAgICAgICAgIGNvbnN0IHNvdXJjZSA9IHNvdXJjZUNhY2hlc1tpZF0uZ2V0U291cmNlKCk7XG4gICAgICAgICAgICBpZiAoc291cmNlLmF0dHJpYnV0aW9uICYmIGF0dHJpYnV0aW9ucy5pbmRleE9mKHNvdXJjZS5hdHRyaWJ1dGlvbikgPCAwKSB7XG4gICAgICAgICAgICAgICAgYXR0cmlidXRpb25zLnB1c2goc291cmNlLmF0dHJpYnV0aW9uKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfVxuXG4gICAgICAgIC8vIHJlbW92ZSBhbnkgZW50cmllcyB0aGF0IGFyZSBzdWJzdHJpbmdzIG9mIGFub3RoZXIgZW50cnkuXG4gICAgICAgIC8vIGZpcnN0IHNvcnQgYnkgbGVuZ3RoIHNvIHRoYXQgc3Vic3RyaW5ncyBjb21lIGZpcnN0XG4gICAgICAgIGF0dHJpYnV0aW9ucy5zb3J0KChhLCBiKSA9PiBhLmxlbmd0aCAtIGIubGVuZ3RoKTtcbiAgICAgICAgYXR0cmlidXRpb25zID0gYXR0cmlidXRpb25zLmZpbHRlcigoYXR0cmliLCBpKSA9PiB7XG4gICAgICAgICAgICBmb3IgKGxldCBqID0gaSArIDE7IGogPCBhdHRyaWJ1dGlvbnMubGVuZ3RoOyBqKyspIHtcbiAgICAgICAgICAgICAgICBpZiAoYXR0cmlidXRpb25zW2pdLmluZGV4T2YoYXR0cmliKSA+PSAwKSB7IHJldHVybiBmYWxzZTsgfVxuICAgICAgICAgICAgfVxuICAgICAgICAgICAgcmV0dXJuIHRydWU7XG4gICAgICAgIH0pO1xuICAgICAgICBpZiAoYXR0cmlidXRpb25zLmxlbmd0aCkge1xuICAgICAgICAgICAgdGhpcy5fY29udGFpbmVyLmlubmVySFRNTCA9IGF0dHJpYnV0aW9ucy5qb2luKCcgfCAnKTtcbiAgICAgICAgICAgIHRoaXMuX2NvbnRhaW5lci5jbGFzc0xpc3QucmVtb3ZlKCdtYXBib3hnbC1hdHRyaWItZW1wdHknKTtcbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgIHRoaXMuX2NvbnRhaW5lci5jbGFzc0xpc3QuYWRkKCdtYXBib3hnbC1hdHRyaWItZW1wdHknKTtcbiAgICAgICAgfVxuICAgICAgICAvLyByZW1vdmUgb2xkIERPTSBub2RlIGZyb20gX2VkaXRMaW5rXG4gICAgICAgIHRoaXMuX2VkaXRMaW5rID0gbnVsbDtcbiAgICB9XG5cbiAgICBfdXBkYXRlQ29tcGFjdCgpIHtcbiAgICAgICAgaWYgKHRoaXMuX21hcC5nZXRDYW52YXNDb250YWluZXIoKS5vZmZzZXRXaWR0aCA8PSA2NDApIHtcbiAgICAgICAgICAgIHRoaXMuX2NvbnRhaW5lci5jbGFzc0xpc3QuYWRkKCdtYXBib3hnbC1jb21wYWN0Jyk7XG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICB0aGlzLl9jb250YWluZXIuY2xhc3NMaXN0LnJlbW92ZSgnbWFwYm94Z2wtY29tcGFjdCcpO1xuICAgICAgICB9XG4gICAgfVxuXG59XG5cbmV4cG9ydCBkZWZhdWx0IEF0dHJpYnV0aW9uQ29udHJvbDtcbiIsIi8vIEBmbG93XG5cbmltcG9ydCBET00gZnJvbSAnLi4vLi4vdXRpbC9kb20nO1xuXG5pbXBvcnQgeyBiaW5kQWxsIH0gZnJvbSAnLi4vLi4vdXRpbC91dGlsJztcblxuaW1wb3J0IHR5cGUgTWFwIGZyb20gJy4uL21hcCc7XG5cbi8qKlxuICogQSBgTG9nb0NvbnRyb2xgIGlzIGEgY29udHJvbCB0aGF0IGFkZHMgdGhlIE1hcGJveCB3YXRlcm1hcmtcbiAqIHRvIHRoZSBtYXAgYXMgcmVxdWlyZWQgYnkgdGhlIFt0ZXJtcyBvZiBzZXJ2aWNlXShodHRwczovL3d3dy5tYXBib3guY29tL3Rvcy8pIGZvciBNYXBib3hcbiAqIHZlY3RvciB0aWxlcyBhbmQgY29yZSBzdHlsZXMuXG4gKlxuICogQGltcGxlbWVudHMge0lDb250cm9sfVxuICogQHByaXZhdGVcbioqL1xuXG5jbGFzcyBMb2dvQ29udHJvbCB7XG4gICAgX21hcDogTWFwO1xuICAgIF9jb250YWluZXI6IEhUTUxFbGVtZW50O1xuXG4gICAgY29uc3RydWN0b3IoKSB7XG4gICAgICAgIGJpbmRBbGwoWydfdXBkYXRlTG9nbyddLCB0aGlzKTtcbiAgICAgICAgYmluZEFsbChbJ191cGRhdGVDb21wYWN0J10sIHRoaXMpO1xuICAgIH1cblxuICAgIG9uQWRkKG1hcDogTWFwKSB7XG4gICAgICAgIHRoaXMuX21hcCA9IG1hcDtcbiAgICAgICAgdGhpcy5fY29udGFpbmVyID0gRE9NLmNyZWF0ZSgnZGl2JywgJ21hcGJveGdsLWN0cmwnKTtcbiAgICAgICAgY29uc3QgYW5jaG9yID0gRE9NLmNyZWF0ZSgnYScsICdtYXBib3hnbC1jdHJsLWxvZ28nKTtcbiAgICAgICAgYW5jaG9yLnRhcmdldCA9IFwiX2JsYW5rXCI7XG4gICAgICAgIGFuY2hvci5ocmVmID0gXCJodHRwczovL3d3dy5tYXBib3guY29tL1wiO1xuICAgICAgICBhbmNob3Iuc2V0QXR0cmlidXRlKFwiYXJpYS1sYWJlbFwiLCBcIk1hcGJveCBsb2dvXCIpO1xuICAgICAgICBhbmNob3Iuc2V0QXR0cmlidXRlKFwicmVsXCIsIFwibm9vcGVuZXJcIik7XG4gICAgICAgIHRoaXMuX2NvbnRhaW5lci5hcHBlbmRDaGlsZChhbmNob3IpO1xuICAgICAgICB0aGlzLl9jb250YWluZXIuc3R5bGUuZGlzcGxheSA9ICdub25lJztcblxuICAgICAgICB0aGlzLl9tYXAub24oJ3NvdXJjZWRhdGEnLCB0aGlzLl91cGRhdGVMb2dvKTtcbiAgICAgICAgdGhpcy5fdXBkYXRlTG9nbygpO1xuXG4gICAgICAgIHRoaXMuX21hcC5vbigncmVzaXplJywgdGhpcy5fdXBkYXRlQ29tcGFjdCk7XG4gICAgICAgIHRoaXMuX3VwZGF0ZUNvbXBhY3QoKTtcblxuICAgICAgICByZXR1cm4gdGhpcy5fY29udGFpbmVyO1xuICAgIH1cblxuICAgIG9uUmVtb3ZlKCkge1xuICAgICAgICBET00ucmVtb3ZlKHRoaXMuX2NvbnRhaW5lcik7XG4gICAgICAgIHRoaXMuX21hcC5vZmYoJ3NvdXJjZWRhdGEnLCB0aGlzLl91cGRhdGVMb2dvKTtcbiAgICAgICAgdGhpcy5fbWFwLm9mZigncmVzaXplJywgdGhpcy5fdXBkYXRlQ29tcGFjdCk7XG4gICAgfVxuXG4gICAgZ2V0RGVmYXVsdFBvc2l0aW9uKCkge1xuICAgICAgICByZXR1cm4gJ2JvdHRvbS1sZWZ0JztcbiAgICB9XG5cbiAgICBfdXBkYXRlTG9nbyhlOiBhbnkpIHtcbiAgICAgICAgaWYgKCFlIHx8IGUuc291cmNlRGF0YVR5cGUgPT09ICdtZXRhZGF0YScpIHtcbiAgICAgICAgICAgIHRoaXMuX2NvbnRhaW5lci5zdHlsZS5kaXNwbGF5ID0gdGhpcy5fbG9nb1JlcXVpcmVkKCkgPyAnYmxvY2snIDogJ25vbmUnO1xuICAgICAgICB9XG4gICAgfVxuXG4gICAgX2xvZ29SZXF1aXJlZCgpIHtcbiAgICAgICAgaWYgKCF0aGlzLl9tYXAuc3R5bGUpIHJldHVybjtcblxuICAgICAgICBjb25zdCBzb3VyY2VDYWNoZXMgPSB0aGlzLl9tYXAuc3R5bGUuc291cmNlQ2FjaGVzO1xuICAgICAgICBmb3IgKGNvbnN0IGlkIGluIHNvdXJjZUNhY2hlcykge1xuICAgICAgICAgICAgY29uc3Qgc291cmNlID0gc291cmNlQ2FjaGVzW2lkXS5nZXRTb3VyY2UoKTtcbiAgICAgICAgICAgIGlmIChzb3VyY2UubWFwYm94X2xvZ28pIHtcbiAgICAgICAgICAgICAgICByZXR1cm4gdHJ1ZTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfVxuXG4gICAgICAgIHJldHVybiBmYWxzZTtcbiAgICB9XG5cbiAgICBfdXBkYXRlQ29tcGFjdCgpIHtcbiAgICAgICAgY29uc3QgY29udGFpbmVyQ2hpbGRyZW4gPSB0aGlzLl9jb250YWluZXIuY2hpbGRyZW47XG4gICAgICAgIGlmIChjb250YWluZXJDaGlsZHJlbi5sZW5ndGgpIHtcbiAgICAgICAgICAgIGNvbnN0IGFuY2hvciA9IGNvbnRhaW5lckNoaWxkcmVuWzBdO1xuICAgICAgICAgICAgaWYgKHRoaXMuX21hcC5nZXRDYW52YXNDb250YWluZXIoKS5vZmZzZXRXaWR0aCA8IDI1MCkge1xuICAgICAgICAgICAgICAgIGFuY2hvci5jbGFzc0xpc3QuYWRkKCdtYXBib3hnbC1jb21wYWN0Jyk7XG4gICAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgICAgIGFuY2hvci5jbGFzc0xpc3QucmVtb3ZlKCdtYXBib3hnbC1jb21wYWN0Jyk7XG4gICAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICB9XG5cbn1cblxuXG5leHBvcnQgZGVmYXVsdCBMb2dvQ29udHJvbDtcbiIsIi8vIEBmbG93XG5pbXBvcnQgYXNzZXJ0IGZyb20gJ2Fzc2VydCc7XG5cbmV4cG9ydCB0eXBlIFRhc2tJRCA9IG51bWJlcjsgLy8gY2FuJ3QgbWFyayBvcGFxdWUgZHVlIHRvIGh0dHBzOi8vZ2l0aHViLmNvbS9mbG93dHlwZS9mbG93LXJlbW92ZS10eXBlcy9wdWxsLzYxXG50eXBlIFRhc2sgPSB7XG4gICAgY2FsbGJhY2s6ICgpID0+IHZvaWQ7XG4gICAgaWQ6IFRhc2tJRDtcbiAgICBjYW5jZWxsZWQ6IGJvb2xlYW47XG59O1xuXG5jbGFzcyBUYXNrUXVldWUge1xuICAgIF9xdWV1ZTogQXJyYXk8VGFzaz47XG4gICAgX2lkOiBUYXNrSUQ7XG4gICAgX2NsZWFyZWQ6IGJvb2xlYW47XG4gICAgX2N1cnJlbnRseVJ1bm5pbmc6IEFycmF5PFRhc2s+IHwgZmFsc2U7XG5cbiAgICBjb25zdHJ1Y3RvcigpICB7XG4gICAgICAgIHRoaXMuX3F1ZXVlID0gW107XG4gICAgICAgIHRoaXMuX2lkID0gMDtcbiAgICAgICAgdGhpcy5fY2xlYXJlZCA9IGZhbHNlO1xuICAgICAgICB0aGlzLl9jdXJyZW50bHlSdW5uaW5nID0gZmFsc2U7XG4gICAgfVxuXG4gICAgYWRkKGNhbGxiYWNrOiAoKSA9PiB2b2lkKTogVGFza0lEIHtcbiAgICAgICAgY29uc3QgaWQgPSArK3RoaXMuX2lkO1xuICAgICAgICBjb25zdCBxdWV1ZSA9IHRoaXMuX3F1ZXVlO1xuICAgICAgICBxdWV1ZS5wdXNoKHtjYWxsYmFjaywgaWQsIGNhbmNlbGxlZDogZmFsc2V9KTtcbiAgICAgICAgcmV0dXJuIGlkO1xuICAgIH1cblxuICAgIHJlbW92ZShpZDogVGFza0lEKSB7XG4gICAgICAgIGNvbnN0IHJ1bm5pbmcgPSB0aGlzLl9jdXJyZW50bHlSdW5uaW5nO1xuICAgICAgICBjb25zdCBxdWV1ZSA9IHJ1bm5pbmcgPyB0aGlzLl9xdWV1ZS5jb25jYXQocnVubmluZykgOiB0aGlzLl9xdWV1ZTtcbiAgICAgICAgZm9yIChjb25zdCB0YXNrIG9mIHF1ZXVlKSB7XG4gICAgICAgICAgICBpZiAodGFzay5pZCA9PT0gaWQpIHtcbiAgICAgICAgICAgICAgICB0YXNrLmNhbmNlbGxlZCA9IHRydWU7XG4gICAgICAgICAgICAgICAgcmV0dXJuO1xuICAgICAgICAgICAgfVxuICAgICAgICB9XG4gICAgfVxuXG4gICAgcnVuKCkge1xuICAgICAgICBhc3NlcnQoIXRoaXMuX2N1cnJlbnRseVJ1bm5pbmcpO1xuICAgICAgICBjb25zdCBxdWV1ZSA9IHRoaXMuX2N1cnJlbnRseVJ1bm5pbmcgPSB0aGlzLl9xdWV1ZTtcblxuICAgICAgICAvLyBUYXNrcyBxdWV1ZWQgYnkgY2FsbGJhY2tzIGluIHRoZSBjdXJyZW50IHF1ZXVlIHNob3VsZCBiZSBleGVjdXRlZFxuICAgICAgICAvLyBvbiB0aGUgbmV4dCBydW4sIG5vdCB0aGUgY3VycmVudCBydW4uXG4gICAgICAgIHRoaXMuX3F1ZXVlID0gW107XG5cbiAgICAgICAgZm9yIChjb25zdCB0YXNrIG9mIHF1ZXVlKSB7XG4gICAgICAgICAgICBpZiAodGFzay5jYW5jZWxsZWQpIGNvbnRpbnVlO1xuICAgICAgICAgICAgdGFzay5jYWxsYmFjaygpO1xuICAgICAgICAgICAgaWYgKHRoaXMuX2NsZWFyZWQpIGJyZWFrO1xuICAgICAgICB9XG5cbiAgICAgICAgdGhpcy5fY2xlYXJlZCA9IGZhbHNlO1xuICAgICAgICB0aGlzLl9jdXJyZW50bHlSdW5uaW5nID0gZmFsc2U7XG4gICAgfVxuXG4gICAgY2xlYXIoKSB7XG4gICAgICAgIGlmICh0aGlzLl9jdXJyZW50bHlSdW5uaW5nKSB7XG4gICAgICAgICAgICB0aGlzLl9jbGVhcmVkID0gdHJ1ZTtcbiAgICAgICAgfVxuICAgICAgICB0aGlzLl9xdWV1ZSA9IFtdO1xuICAgIH1cbn1cblxuZXhwb3J0IGRlZmF1bHQgVGFza1F1ZXVlO1xuIiwiLy8gQGZsb3dcblxuaW1wb3J0IHsgZXh0ZW5kLCBiaW5kQWxsLCB3YXJuT25jZSB9IGZyb20gJy4uL3V0aWwvdXRpbCc7XG5cbmltcG9ydCBicm93c2VyIGZyb20gJy4uL3V0aWwvYnJvd3Nlcic7XG5pbXBvcnQgd2luZG93IGZyb20gJy4uL3V0aWwvd2luZG93JztcbmNvbnN0IHsgSFRNTEltYWdlRWxlbWVudCwgSFRNTEVsZW1lbnQgfSA9IHdpbmRvdztcbmltcG9ydCBET00gZnJvbSAnLi4vdXRpbC9kb20nO1xuaW1wb3J0IHsgZ2V0SW1hZ2UsIFJlc291cmNlVHlwZSB9IGZyb20gJy4uL3V0aWwvYWpheCc7XG5pbXBvcnQgU3R5bGUgZnJvbSAnLi4vc3R5bGUvc3R5bGUnO1xuaW1wb3J0IEV2YWx1YXRpb25QYXJhbWV0ZXJzIGZyb20gJy4uL3N0eWxlL2V2YWx1YXRpb25fcGFyYW1ldGVycyc7XG5pbXBvcnQgUGFpbnRlciBmcm9tICcuLi9yZW5kZXIvcGFpbnRlcic7XG5pbXBvcnQgVHJhbnNmb3JtIGZyb20gJy4uL2dlby90cmFuc2Zvcm0nO1xuaW1wb3J0IEhhc2ggZnJvbSAnLi9oYXNoJztcbmltcG9ydCBiaW5kSGFuZGxlcnMgZnJvbSAnLi9iaW5kX2hhbmRsZXJzJztcbmltcG9ydCBDYW1lcmEgZnJvbSAnLi9jYW1lcmEnO1xuaW1wb3J0IExuZ0xhdCBmcm9tICcuLi9nZW8vbG5nX2xhdCc7XG5pbXBvcnQgTG5nTGF0Qm91bmRzIGZyb20gJy4uL2dlby9sbmdfbGF0X2JvdW5kcyc7XG5pbXBvcnQgUG9pbnQgZnJvbSAnQG1hcGJveC9wb2ludC1nZW9tZXRyeSc7XG5pbXBvcnQgQXR0cmlidXRpb25Db250cm9sIGZyb20gJy4vY29udHJvbC9hdHRyaWJ1dGlvbl9jb250cm9sJztcbmltcG9ydCBMb2dvQ29udHJvbCBmcm9tICcuL2NvbnRyb2wvbG9nb19jb250cm9sJztcbmltcG9ydCBpc1N1cHBvcnRlZCBmcm9tICdAbWFwYm94L21hcGJveC1nbC1zdXBwb3J0ZWQnO1xuaW1wb3J0IHsgUkdCQUltYWdlIH0gZnJvbSAnLi4vdXRpbC9pbWFnZSc7XG5pbXBvcnQgeyBFdmVudCwgRXJyb3JFdmVudCB9IGZyb20gJy4uL3V0aWwvZXZlbnRlZCc7XG5pbXBvcnQgeyBNYXBNb3VzZUV2ZW50IH0gZnJvbSAnLi9ldmVudHMnO1xuaW1wb3J0IFRhc2tRdWV1ZSBmcm9tICcuLi91dGlsL3Rhc2tfcXVldWUnO1xuXG5pbXBvcnQgdHlwZSB7UG9pbnRMaWtlfSBmcm9tICdAbWFwYm94L3BvaW50LWdlb21ldHJ5JztcbmltcG9ydCB0eXBlIHtMbmdMYXRMaWtlfSBmcm9tICcuLi9nZW8vbG5nX2xhdCc7XG5pbXBvcnQgdHlwZSB7TG5nTGF0Qm91bmRzTGlrZX0gZnJvbSAnLi4vZ2VvL2xuZ19sYXRfYm91bmRzJztcbmltcG9ydCB0eXBlIHtSZXF1ZXN0UGFyYW1ldGVyc30gZnJvbSAnLi4vdXRpbC9hamF4JztcbmltcG9ydCB0eXBlIHtTdHlsZU9wdGlvbnN9IGZyb20gJy4uL3N0eWxlL3N0eWxlJztcbmltcG9ydCB0eXBlIHtNYXBFdmVudCwgTWFwRGF0YUV2ZW50fSBmcm9tICcuL2V2ZW50cyc7XG5cbmltcG9ydCB0eXBlIFNjcm9sbFpvb21IYW5kbGVyIGZyb20gJy4vaGFuZGxlci9zY3JvbGxfem9vbSc7XG5pbXBvcnQgdHlwZSBCb3hab29tSGFuZGxlciBmcm9tICcuL2hhbmRsZXIvYm94X3pvb20nO1xuaW1wb3J0IHR5cGUgRHJhZ1JvdGF0ZUhhbmRsZXIgZnJvbSAnLi9oYW5kbGVyL2RyYWdfcm90YXRlJztcbmltcG9ydCB0eXBlIERyYWdQYW5IYW5kbGVyIGZyb20gJy4vaGFuZGxlci9kcmFnX3Bhbic7XG5pbXBvcnQgdHlwZSBLZXlib2FyZEhhbmRsZXIgZnJvbSAnLi9oYW5kbGVyL2tleWJvYXJkJztcbmltcG9ydCB0eXBlIERvdWJsZUNsaWNrWm9vbUhhbmRsZXIgZnJvbSAnLi9oYW5kbGVyL2RibGNsaWNrX3pvb20nO1xuaW1wb3J0IHR5cGUgVG91Y2hab29tUm90YXRlSGFuZGxlciBmcm9tICcuL2hhbmRsZXIvdG91Y2hfem9vbV9yb3RhdGUnO1xuaW1wb3J0IHR5cGUge1Rhc2tJRH0gZnJvbSAnLi4vdXRpbC90YXNrX3F1ZXVlJztcbmltcG9ydCB0eXBlIHtDYW5jZWxhYmxlfSBmcm9tICcuLi90eXBlcy9jYW5jZWxhYmxlJztcbmltcG9ydCB0eXBlIHtcbiAgICBMYXllclNwZWNpZmljYXRpb24sXG4gICAgRmlsdGVyU3BlY2lmaWNhdGlvbixcbiAgICBTdHlsZVNwZWNpZmljYXRpb24sXG4gICAgTGlnaHRTcGVjaWZpY2F0aW9uLFxuICAgIFNvdXJjZVNwZWNpZmljYXRpb25cbn0gZnJvbSAnLi4vc3R5bGUtc3BlYy90eXBlcyc7XG5cbnR5cGUgQ29udHJvbFBvc2l0aW9uID0gJ3RvcC1sZWZ0JyB8ICd0b3AtcmlnaHQnIHwgJ2JvdHRvbS1sZWZ0JyB8ICdib3R0b20tcmlnaHQnO1xuXG4vKiBlc2xpbnQtZGlzYWJsZSBuby11c2UtYmVmb3JlLWRlZmluZSAqL1xudHlwZSBJQ29udHJvbCA9IHtcbiAgICBvbkFkZChtYXA6IE1hcCk6IEhUTUxFbGVtZW50O1xuICAgIG9uUmVtb3ZlKG1hcDogTWFwKTogdm9pZDtcblxuICAgICtnZXREZWZhdWx0UG9zaXRpb24/OiAoKSA9PiBDb250cm9sUG9zaXRpb247XG59XG4vKiBlc2xpbnQtZW5hYmxlIG5vLXVzZS1iZWZvcmUtZGVmaW5lICovXG5cbnR5cGUgUmVzb3VyY2VUeXBlRW51bSA9ICRLZXlzPHR5cGVvZiBSZXNvdXJjZVR5cGU+O1xuZXhwb3J0IHR5cGUgUmVxdWVzdFRyYW5zZm9ybUZ1bmN0aW9uID0gKHVybDogc3RyaW5nLCByZXNvdXJjZVR5cGU/OiBSZXNvdXJjZVR5cGVFbnVtKSA9PiBSZXF1ZXN0UGFyYW1ldGVycztcblxudHlwZSBNYXBPcHRpb25zID0ge1xuICAgIGhhc2g/OiBib29sZWFuLFxuICAgIGludGVyYWN0aXZlPzogYm9vbGVhbixcbiAgICBjb250YWluZXI6IEhUTUxFbGVtZW50IHwgc3RyaW5nLFxuICAgIGJlYXJpbmdTbmFwPzogbnVtYmVyLFxuICAgIGF0dHJpYnV0aW9uQ29udHJvbD86IGJvb2xlYW4sXG4gICAgY3VzdG9tQXR0cmlidXRpb24/OiBzdHJpbmcgfCBBcnJheTxzdHJpbmc+LFxuICAgIGxvZ29Qb3NpdGlvbj86IENvbnRyb2xQb3NpdGlvbixcbiAgICBmYWlsSWZNYWpvclBlcmZvcm1hbmNlQ2F2ZWF0PzogYm9vbGVhbixcbiAgICBwcmVzZXJ2ZURyYXdpbmdCdWZmZXI/OiBib29sZWFuLFxuICAgIHJlZnJlc2hFeHBpcmVkVGlsZXM/OiBib29sZWFuLFxuICAgIG1heEJvdW5kcz86IExuZ0xhdEJvdW5kc0xpa2UsXG4gICAgc2Nyb2xsWm9vbT86IGJvb2xlYW4sXG4gICAgbWluWm9vbT86ID9udW1iZXIsXG4gICAgbWF4Wm9vbT86ID9udW1iZXIsXG4gICAgYm94Wm9vbT86IGJvb2xlYW4sXG4gICAgZHJhZ1JvdGF0ZT86IGJvb2xlYW4sXG4gICAgZHJhZ1Bhbj86IGJvb2xlYW4sXG4gICAga2V5Ym9hcmQ/OiBib29sZWFuLFxuICAgIGRvdWJsZUNsaWNrWm9vbT86IGJvb2xlYW4sXG4gICAgdG91Y2hab29tUm90YXRlPzogYm9vbGVhbixcbiAgICB0cmFja1Jlc2l6ZT86IGJvb2xlYW4sXG4gICAgY2VudGVyPzogTG5nTGF0TGlrZSxcbiAgICB6b29tPzogbnVtYmVyLFxuICAgIGJlYXJpbmc/OiBudW1iZXIsXG4gICAgcGl0Y2g/OiBudW1iZXIsXG4gICAgcmVuZGVyV29ybGRDb3BpZXM/OiBib29sZWFuLFxuICAgIG1heFRpbGVDYWNoZVNpemU/OiBudW1iZXIsXG4gICAgdHJhbnNmb3JtUmVxdWVzdD86IFJlcXVlc3RUcmFuc2Zvcm1GdW5jdGlvblxufTtcblxuY29uc3QgZGVmYXVsdE1pblpvb20gPSAwO1xuY29uc3QgZGVmYXVsdE1heFpvb20gPSAyMjtcbmNvbnN0IGRlZmF1bHRPcHRpb25zID0ge1xuICAgIGNlbnRlcjogWzAsIDBdLFxuICAgIHpvb206IDAsXG4gICAgYmVhcmluZzogMCxcbiAgICBwaXRjaDogMCxcblxuICAgIG1pblpvb206IGRlZmF1bHRNaW5ab29tLFxuICAgIG1heFpvb206IGRlZmF1bHRNYXhab29tLFxuXG4gICAgaW50ZXJhY3RpdmU6IHRydWUsXG4gICAgc2Nyb2xsWm9vbTogdHJ1ZSxcbiAgICBib3hab29tOiB0cnVlLFxuICAgIGRyYWdSb3RhdGU6IHRydWUsXG4gICAgZHJhZ1BhbjogdHJ1ZSxcbiAgICBrZXlib2FyZDogdHJ1ZSxcbiAgICBkb3VibGVDbGlja1pvb206IHRydWUsXG4gICAgdG91Y2hab29tUm90YXRlOiB0cnVlLFxuXG4gICAgYmVhcmluZ1NuYXA6IDcsXG4gICAgY2xpY2tUb2xlcmFuY2U6IDMsXG5cbiAgICBoYXNoOiBmYWxzZSxcbiAgICBhdHRyaWJ1dGlvbkNvbnRyb2w6IHRydWUsXG5cbiAgICBmYWlsSWZNYWpvclBlcmZvcm1hbmNlQ2F2ZWF0OiBmYWxzZSxcbiAgICBwcmVzZXJ2ZURyYXdpbmdCdWZmZXI6IGZhbHNlLFxuICAgIHRyYWNrUmVzaXplOiB0cnVlLFxuICAgIHJlbmRlcldvcmxkQ29waWVzOiB0cnVlLFxuICAgIHJlZnJlc2hFeHBpcmVkVGlsZXM6IHRydWUsXG4gICAgbWF4VGlsZUNhY2hlU2l6ZTogbnVsbCxcbiAgICB0cmFuc2Zvcm1SZXF1ZXN0OiBudWxsLFxuICAgIGZhZGVEdXJhdGlvbjogMzAwLFxuICAgIGNyb3NzU291cmNlQ29sbGlzaW9uczogdHJ1ZVxufTtcblxuLyoqXG4gKiBUaGUgYE1hcGAgb2JqZWN0IHJlcHJlc2VudHMgdGhlIG1hcCBvbiB5b3VyIHBhZ2UuIEl0IGV4cG9zZXMgbWV0aG9kc1xuICogYW5kIHByb3BlcnRpZXMgdGhhdCBlbmFibGUgeW91IHRvIHByb2dyYW1tYXRpY2FsbHkgY2hhbmdlIHRoZSBtYXAsXG4gKiBhbmQgZmlyZXMgZXZlbnRzIGFzIHVzZXJzIGludGVyYWN0IHdpdGggaXQuXG4gKlxuICogWW91IGNyZWF0ZSBhIGBNYXBgIGJ5IHNwZWNpZnlpbmcgYSBgY29udGFpbmVyYCBhbmQgb3RoZXIgb3B0aW9ucy5cbiAqIFRoZW4gTWFwYm94IEdMIEpTIGluaXRpYWxpemVzIHRoZSBtYXAgb24gdGhlIHBhZ2UgYW5kIHJldHVybnMgeW91ciBgTWFwYFxuICogb2JqZWN0LlxuICpcbiAqIEBleHRlbmRzIEV2ZW50ZWRcbiAqIEBwYXJhbSB7T2JqZWN0fSBvcHRpb25zXG4gKiBAcGFyYW0ge0hUTUxFbGVtZW50fHN0cmluZ30gb3B0aW9ucy5jb250YWluZXIgVGhlIEhUTUwgZWxlbWVudCBpbiB3aGljaCBNYXBib3ggR0wgSlMgd2lsbCByZW5kZXIgdGhlIG1hcCwgb3IgdGhlIGVsZW1lbnQncyBzdHJpbmcgYGlkYC4gVGhlIHNwZWNpZmllZCBlbGVtZW50IG11c3QgaGF2ZSBubyBjaGlsZHJlbi5cbiAqIEBwYXJhbSB7bnVtYmVyfSBbb3B0aW9ucy5taW5ab29tPTBdIFRoZSBtaW5pbXVtIHpvb20gbGV2ZWwgb2YgdGhlIG1hcCAoMC0yNCkuXG4gKiBAcGFyYW0ge251bWJlcn0gW29wdGlvbnMubWF4Wm9vbT0yMl0gVGhlIG1heGltdW0gem9vbSBsZXZlbCBvZiB0aGUgbWFwICgwLTI0KS5cbiAqIEBwYXJhbSB7T2JqZWN0fHN0cmluZ30gW29wdGlvbnMuc3R5bGVdIFRoZSBtYXAncyBNYXBib3ggc3R5bGUuIFRoaXMgbXVzdCBiZSBhbiBhIEpTT04gb2JqZWN0IGNvbmZvcm1pbmcgdG9cbiAqIHRoZSBzY2hlbWEgZGVzY3JpYmVkIGluIHRoZSBbTWFwYm94IFN0eWxlIFNwZWNpZmljYXRpb25dKGh0dHBzOi8vbWFwYm94LmNvbS9tYXBib3gtZ2wtc3R5bGUtc3BlYy8pLCBvciBhIFVSTCB0b1xuICogc3VjaCBKU09OLlxuICpcbiAqIFRvIGxvYWQgYSBzdHlsZSBmcm9tIHRoZSBNYXBib3ggQVBJLCB5b3UgY2FuIHVzZSBhIFVSTCBvZiB0aGUgZm9ybSBgbWFwYm94Oi8vc3R5bGVzLzpvd25lci86c3R5bGVgLFxuICogd2hlcmUgYDpvd25lcmAgaXMgeW91ciBNYXBib3ggYWNjb3VudCBuYW1lIGFuZCBgOnN0eWxlYCBpcyB0aGUgc3R5bGUgSUQuIE9yIHlvdSBjYW4gdXNlIG9uZSBvZiB0aGUgZm9sbG93aW5nXG4gKiBbdGhlIHByZWRlZmluZWQgTWFwYm94IHN0eWxlc10oaHR0cHM6Ly93d3cubWFwYm94LmNvbS9tYXBzLyk6XG4gKlxuICogICogYG1hcGJveDovL3N0eWxlcy9tYXBib3gvc3RyZWV0cy12MTBgXG4gKiAgKiBgbWFwYm94Oi8vc3R5bGVzL21hcGJveC9vdXRkb29ycy12MTBgXG4gKiAgKiBgbWFwYm94Oi8vc3R5bGVzL21hcGJveC9saWdodC12OWBcbiAqICAqIGBtYXBib3g6Ly9zdHlsZXMvbWFwYm94L2RhcmstdjlgXG4gKiAgKiBgbWFwYm94Oi8vc3R5bGVzL21hcGJveC9zYXRlbGxpdGUtdjlgXG4gKiAgKiBgbWFwYm94Oi8vc3R5bGVzL21hcGJveC9zYXRlbGxpdGUtc3RyZWV0cy12MTBgXG4gKiAgKiBgbWFwYm94Oi8vc3R5bGVzL21hcGJveC9uYXZpZ2F0aW9uLXByZXZpZXctZGF5LXYyYFxuICogICogYG1hcGJveDovL3N0eWxlcy9tYXBib3gvbmF2aWdhdGlvbi1wcmV2aWV3LW5pZ2h0LXYyYFxuICogICogYG1hcGJveDovL3N0eWxlcy9tYXBib3gvbmF2aWdhdGlvbi1ndWlkYW5jZS1kYXktdjJgXG4gKiAgKiBgbWFwYm94Oi8vc3R5bGVzL21hcGJveC9uYXZpZ2F0aW9uLWd1aWRhbmNlLW5pZ2h0LXYyYFxuICpcbiAqIFRpbGVzZXRzIGhvc3RlZCB3aXRoIE1hcGJveCBjYW4gYmUgc3R5bGUtb3B0aW1pemVkIGlmIHlvdSBhcHBlbmQgYD9vcHRpbWl6ZT10cnVlYCB0byB0aGUgZW5kIG9mIHlvdXIgc3R5bGUgVVJMLCBsaWtlIGBtYXBib3g6Ly9zdHlsZXMvbWFwYm94L3N0cmVldHMtdjk/b3B0aW1pemU9dHJ1ZWAuXG4gKiBMZWFybiBtb3JlIGFib3V0IHN0eWxlLW9wdGltaXplZCB2ZWN0b3IgdGlsZXMgaW4gb3VyIFtBUEkgZG9jdW1lbnRhdGlvbl0oaHR0cHM6Ly93d3cubWFwYm94LmNvbS9hcGktZG9jdW1lbnRhdGlvbi8jcmV0cmlldmUtdGlsZXMpLlxuICpcbiAqIEBwYXJhbSB7Ym9vbGVhbn0gW29wdGlvbnMuaGFzaD1mYWxzZV0gSWYgYHRydWVgLCB0aGUgbWFwJ3MgcG9zaXRpb24gKHpvb20sIGNlbnRlciBsYXRpdHVkZSwgY2VudGVyIGxvbmdpdHVkZSwgYmVhcmluZywgYW5kIHBpdGNoKSB3aWxsIGJlIHN5bmNlZCB3aXRoIHRoZSBoYXNoIGZyYWdtZW50IG9mIHRoZSBwYWdlJ3MgVVJMLlxuICogICBGb3IgZXhhbXBsZSwgYGh0dHA6Ly9wYXRoL3RvL215L3BhZ2UuaHRtbCMyLjU5LzM5LjI2LzUzLjA3Ly0yNC4xLzYwYC5cbiAqIEBwYXJhbSB7Ym9vbGVhbn0gW29wdGlvbnMuaW50ZXJhY3RpdmU9dHJ1ZV0gSWYgYGZhbHNlYCwgbm8gbW91c2UsIHRvdWNoLCBvciBrZXlib2FyZCBsaXN0ZW5lcnMgd2lsbCBiZSBhdHRhY2hlZCB0byB0aGUgbWFwLCBzbyBpdCB3aWxsIG5vdCByZXNwb25kIHRvIGludGVyYWN0aW9uLlxuICogQHBhcmFtIHtudW1iZXJ9IFtvcHRpb25zLmJlYXJpbmdTbmFwPTddIFRoZSB0aHJlc2hvbGQsIG1lYXN1cmVkIGluIGRlZ3JlZXMsIHRoYXQgZGV0ZXJtaW5lcyB3aGVuIHRoZSBtYXAnc1xuICogICBiZWFyaW5nIHdpbGwgc25hcCB0byBub3J0aC4gRm9yIGV4YW1wbGUsIHdpdGggYSBgYmVhcmluZ1NuYXBgIG9mIDcsIGlmIHRoZSB1c2VyIHJvdGF0ZXNcbiAqICAgdGhlIG1hcCB3aXRoaW4gNyBkZWdyZWVzIG9mIG5vcnRoLCB0aGUgbWFwIHdpbGwgYXV0b21hdGljYWxseSBzbmFwIHRvIGV4YWN0IG5vcnRoLlxuICogQHBhcmFtIHtib29sZWFufSBbb3B0aW9ucy5waXRjaFdpdGhSb3RhdGU9dHJ1ZV0gSWYgYGZhbHNlYCwgdGhlIG1hcCdzIHBpdGNoICh0aWx0KSBjb250cm9sIHdpdGggXCJkcmFnIHRvIHJvdGF0ZVwiIGludGVyYWN0aW9uIHdpbGwgYmUgZGlzYWJsZWQuXG4gKiBAcGFyYW0ge251bWJlcn0gW29wdGlvbnMuY2xpY2tUb2xlcmFuY2U9M10gVGhlIG1heCBudW1iZXIgb2YgcGl4ZWxzIGEgdXNlciBjYW4gc2hpZnQgdGhlIG1vdXNlIHBvaW50ZXIgZHVyaW5nIGEgY2xpY2sgZm9yIGl0IHRvIGJlIGNvbnNpZGVyZWQgYSB2YWxpZCBjbGljayAoYXMgb3Bwb3NlZCB0byBhIG1vdXNlIGRyYWcpLlxuICogQHBhcmFtIHtib29sZWFufSBbb3B0aW9ucy5hdHRyaWJ1dGlvbkNvbnRyb2w9dHJ1ZV0gSWYgYHRydWVgLCBhbiB7QGxpbmsgQXR0cmlidXRpb25Db250cm9sfSB3aWxsIGJlIGFkZGVkIHRvIHRoZSBtYXAuXG4gKiBAcGFyYW0ge3N0cmluZyB8IEFycmF5PHN0cmluZz59IFtvcHRpb25zLmN1c3RvbUF0dHJpYnV0aW9uXSBTdHJpbmcgb3Igc3RyaW5ncyB0byBzaG93IGluIGFuIHtAbGluayBBdHRyaWJ1dGlvbkNvbnRyb2x9LiBPbmx5IGFwcGxpY2FibGUgaWYgYG9wdGlvbnMuYXR0cmlidXRpb25Db250cm9sYCBpcyBgdHJ1ZWAuXG4gKiBAcGFyYW0ge3N0cmluZ30gW29wdGlvbnMubG9nb1Bvc2l0aW9uPSdib3R0b20tbGVmdCddIEEgc3RyaW5nIHJlcHJlc2VudGluZyB0aGUgcG9zaXRpb24gb2YgdGhlIE1hcGJveCB3b3JkbWFyayBvbiB0aGUgbWFwLiBWYWxpZCBvcHRpb25zIGFyZSBgdG9wLWxlZnRgLGB0b3AtcmlnaHRgLCBgYm90dG9tLWxlZnRgLCBgYm90dG9tLXJpZ2h0YC5cbiAqIEBwYXJhbSB7Ym9vbGVhbn0gW29wdGlvbnMuZmFpbElmTWFqb3JQZXJmb3JtYW5jZUNhdmVhdD1mYWxzZV0gSWYgYHRydWVgLCBtYXAgY3JlYXRpb24gd2lsbCBmYWlsIGlmIHRoZSBwZXJmb3JtYW5jZSBvZiBNYXBib3hcbiAqICAgR0wgSlMgd291bGQgYmUgZHJhbWF0aWNhbGx5IHdvcnNlIHRoYW4gZXhwZWN0ZWQgKGkuZS4gYSBzb2Z0d2FyZSByZW5kZXJlciB3b3VsZCBiZSB1c2VkKS5cbiAqIEBwYXJhbSB7Ym9vbGVhbn0gW29wdGlvbnMucHJlc2VydmVEcmF3aW5nQnVmZmVyPWZhbHNlXSBJZiBgdHJ1ZWAsIHRoZSBtYXAncyBjYW52YXMgY2FuIGJlIGV4cG9ydGVkIHRvIGEgUE5HIHVzaW5nIGBtYXAuZ2V0Q2FudmFzKCkudG9EYXRhVVJMKClgLiBUaGlzIGlzIGBmYWxzZWAgYnkgZGVmYXVsdCBhcyBhIHBlcmZvcm1hbmNlIG9wdGltaXphdGlvbi5cbiAqIEBwYXJhbSB7Ym9vbGVhbn0gW29wdGlvbnMucmVmcmVzaEV4cGlyZWRUaWxlcz10cnVlXSBJZiBgZmFsc2VgLCB0aGUgbWFwIHdvbid0IGF0dGVtcHQgdG8gcmUtcmVxdWVzdCB0aWxlcyBvbmNlIHRoZXkgZXhwaXJlIHBlciB0aGVpciBIVFRQIGBjYWNoZUNvbnRyb2xgL2BleHBpcmVzYCBoZWFkZXJzLlxuICogQHBhcmFtIHtMbmdMYXRCb3VuZHNMaWtlfSBbb3B0aW9ucy5tYXhCb3VuZHNdIElmIHNldCwgdGhlIG1hcCB3aWxsIGJlIGNvbnN0cmFpbmVkIHRvIHRoZSBnaXZlbiBib3VuZHMuXG4gKiBAcGFyYW0ge2Jvb2xlYW58T2JqZWN0fSBbb3B0aW9ucy5zY3JvbGxab29tPXRydWVdIElmIGB0cnVlYCwgdGhlIFwic2Nyb2xsIHRvIHpvb21cIiBpbnRlcmFjdGlvbiBpcyBlbmFibGVkLiBBbiBgT2JqZWN0YCB2YWx1ZSBpcyBwYXNzZWQgYXMgb3B0aW9ucyB0byB7QGxpbmsgU2Nyb2xsWm9vbUhhbmRsZXIjZW5hYmxlfS5cbiAqIEBwYXJhbSB7Ym9vbGVhbn0gW29wdGlvbnMuYm94Wm9vbT10cnVlXSBJZiBgdHJ1ZWAsIHRoZSBcImJveCB6b29tXCIgaW50ZXJhY3Rpb24gaXMgZW5hYmxlZCAoc2VlIHtAbGluayBCb3hab29tSGFuZGxlcn0pLlxuICogQHBhcmFtIHtib29sZWFufSBbb3B0aW9ucy5kcmFnUm90YXRlPXRydWVdIElmIGB0cnVlYCwgdGhlIFwiZHJhZyB0byByb3RhdGVcIiBpbnRlcmFjdGlvbiBpcyBlbmFibGVkIChzZWUge0BsaW5rIERyYWdSb3RhdGVIYW5kbGVyfSkuXG4gKiBAcGFyYW0ge2Jvb2xlYW59IFtvcHRpb25zLmRyYWdQYW49dHJ1ZV0gSWYgYHRydWVgLCB0aGUgXCJkcmFnIHRvIHBhblwiIGludGVyYWN0aW9uIGlzIGVuYWJsZWQgKHNlZSB7QGxpbmsgRHJhZ1BhbkhhbmRsZXJ9KS5cbiAqIEBwYXJhbSB7Ym9vbGVhbn0gW29wdGlvbnMua2V5Ym9hcmQ9dHJ1ZV0gSWYgYHRydWVgLCBrZXlib2FyZCBzaG9ydGN1dHMgYXJlIGVuYWJsZWQgKHNlZSB7QGxpbmsgS2V5Ym9hcmRIYW5kbGVyfSkuXG4gKiBAcGFyYW0ge2Jvb2xlYW59IFtvcHRpb25zLmRvdWJsZUNsaWNrWm9vbT10cnVlXSBJZiBgdHJ1ZWAsIHRoZSBcImRvdWJsZSBjbGljayB0byB6b29tXCIgaW50ZXJhY3Rpb24gaXMgZW5hYmxlZCAoc2VlIHtAbGluayBEb3VibGVDbGlja1pvb21IYW5kbGVyfSkuXG4gKiBAcGFyYW0ge2Jvb2xlYW58T2JqZWN0fSBbb3B0aW9ucy50b3VjaFpvb21Sb3RhdGU9dHJ1ZV0gSWYgYHRydWVgLCB0aGUgXCJwaW5jaCB0byByb3RhdGUgYW5kIHpvb21cIiBpbnRlcmFjdGlvbiBpcyBlbmFibGVkLiBBbiBgT2JqZWN0YCB2YWx1ZSBpcyBwYXNzZWQgYXMgb3B0aW9ucyB0byB7QGxpbmsgVG91Y2hab29tUm90YXRlSGFuZGxlciNlbmFibGV9LlxuICogQHBhcmFtIHtib29sZWFufSBbb3B0aW9ucy50cmFja1Jlc2l6ZT10cnVlXSAgSWYgYHRydWVgLCB0aGUgbWFwIHdpbGwgYXV0b21hdGljYWxseSByZXNpemUgd2hlbiB0aGUgYnJvd3NlciB3aW5kb3cgcmVzaXplcy5cbiAqIEBwYXJhbSB7TG5nTGF0TGlrZX0gW29wdGlvbnMuY2VudGVyPVswLCAwXV0gVGhlIGluaXRhbCBnZW9ncmFwaGljYWwgY2VudGVycG9pbnQgb2YgdGhlIG1hcC4gSWYgYGNlbnRlcmAgaXMgbm90IHNwZWNpZmllZCBpbiB0aGUgY29uc3RydWN0b3Igb3B0aW9ucywgTWFwYm94IEdMIEpTIHdpbGwgbG9vayBmb3IgaXQgaW4gdGhlIG1hcCdzIHN0eWxlIG9iamVjdC4gSWYgaXQgaXMgbm90IHNwZWNpZmllZCBpbiB0aGUgc3R5bGUsIGVpdGhlciwgaXQgd2lsbCBkZWZhdWx0IHRvIGBbMCwgMF1gIE5vdGU6IE1hcGJveCBHTCB1c2VzIGxvbmdpdHVkZSwgbGF0aXR1ZGUgY29vcmRpbmF0ZSBvcmRlciAoYXMgb3Bwb3NlZCB0byBsYXRpdHVkZSwgbG9uZ2l0dWRlKSB0byBtYXRjaCBHZW9KU09OLlxuICogQHBhcmFtIHtudW1iZXJ9IFtvcHRpb25zLnpvb209MF0gVGhlIGluaXRpYWwgem9vbSBsZXZlbCBvZiB0aGUgbWFwLiBJZiBgem9vbWAgaXMgbm90IHNwZWNpZmllZCBpbiB0aGUgY29uc3RydWN0b3Igb3B0aW9ucywgTWFwYm94IEdMIEpTIHdpbGwgbG9vayBmb3IgaXQgaW4gdGhlIG1hcCdzIHN0eWxlIG9iamVjdC4gSWYgaXQgaXMgbm90IHNwZWNpZmllZCBpbiB0aGUgc3R5bGUsIGVpdGhlciwgaXQgd2lsbCBkZWZhdWx0IHRvIGAwYC5cbiAqIEBwYXJhbSB7bnVtYmVyfSBbb3B0aW9ucy5iZWFyaW5nPTBdIFRoZSBpbml0aWFsIGJlYXJpbmcgKHJvdGF0aW9uKSBvZiB0aGUgbWFwLCBtZWFzdXJlZCBpbiBkZWdyZWVzIGNvdW50ZXItY2xvY2t3aXNlIGZyb20gbm9ydGguIElmIGBiZWFyaW5nYCBpcyBub3Qgc3BlY2lmaWVkIGluIHRoZSBjb25zdHJ1Y3RvciBvcHRpb25zLCBNYXBib3ggR0wgSlMgd2lsbCBsb29rIGZvciBpdCBpbiB0aGUgbWFwJ3Mgc3R5bGUgb2JqZWN0LiBJZiBpdCBpcyBub3Qgc3BlY2lmaWVkIGluIHRoZSBzdHlsZSwgZWl0aGVyLCBpdCB3aWxsIGRlZmF1bHQgdG8gYDBgLlxuICogQHBhcmFtIHtudW1iZXJ9IFtvcHRpb25zLnBpdGNoPTBdIFRoZSBpbml0aWFsIHBpdGNoICh0aWx0KSBvZiB0aGUgbWFwLCBtZWFzdXJlZCBpbiBkZWdyZWVzIGF3YXkgZnJvbSB0aGUgcGxhbmUgb2YgdGhlIHNjcmVlbiAoMC02MCkuIElmIGBwaXRjaGAgaXMgbm90IHNwZWNpZmllZCBpbiB0aGUgY29uc3RydWN0b3Igb3B0aW9ucywgTWFwYm94IEdMIEpTIHdpbGwgbG9vayBmb3IgaXQgaW4gdGhlIG1hcCdzIHN0eWxlIG9iamVjdC4gSWYgaXQgaXMgbm90IHNwZWNpZmllZCBpbiB0aGUgc3R5bGUsIGVpdGhlciwgaXQgd2lsbCBkZWZhdWx0IHRvIGAwYC5cbiAqIEBwYXJhbSB7Ym9vbGVhbn0gW29wdGlvbnMucmVuZGVyV29ybGRDb3BpZXM9dHJ1ZV0gIElmIGB0cnVlYCwgbXVsdGlwbGUgY29waWVzIG9mIHRoZSB3b3JsZCB3aWxsIGJlIHJlbmRlcmVkLCB3aGVuIHpvb21lZCBvdXQuXG4gKiBAcGFyYW0ge251bWJlcn0gW29wdGlvbnMubWF4VGlsZUNhY2hlU2l6ZT1udWxsXSAgVGhlIG1heGltdW0gbnVtYmVyIG9mIHRpbGVzIHN0b3JlZCBpbiB0aGUgdGlsZSBjYWNoZSBmb3IgYSBnaXZlbiBzb3VyY2UuIElmIG9taXR0ZWQsIHRoZSBjYWNoZSB3aWxsIGJlIGR5bmFtaWNhbGx5IHNpemVkIGJhc2VkIG9uIHRoZSBjdXJyZW50IHZpZXdwb3J0LlxuICogQHBhcmFtIHtzdHJpbmd9IFtvcHRpb25zLmxvY2FsSWRlb2dyYXBoRm9udEZhbWlseT1udWxsXSBJZiBzcGVjaWZpZWQsIGRlZmluZXMgYSBDU1MgZm9udC1mYW1pbHlcbiAqICAgZm9yIGxvY2FsbHkgb3ZlcnJpZGluZyBnZW5lcmF0aW9uIG9mIGdseXBocyBpbiB0aGUgJ0NKSyBVbmlmaWVkIElkZW9ncmFwaHMnIGFuZCAnSGFuZ3VsIFN5bGxhYmxlcycgcmFuZ2VzLlxuICogICBJbiB0aGVzZSByYW5nZXMsIGZvbnQgc2V0dGluZ3MgZnJvbSB0aGUgbWFwJ3Mgc3R5bGUgd2lsbCBiZSBpZ25vcmVkLCBleGNlcHQgZm9yIGZvbnQtd2VpZ2h0IGtleXdvcmRzIChsaWdodC9yZWd1bGFyL21lZGl1bS9ib2xkKS5cbiAqICAgVGhlIHB1cnBvc2Ugb2YgdGhpcyBvcHRpb24gaXMgdG8gYXZvaWQgYmFuZHdpZHRoLWludGVuc2l2ZSBnbHlwaCBzZXJ2ZXIgcmVxdWVzdHMuIChzZWUgW1VzZSBsb2NhbGx5IGdlbmVyYXRlZCBpZGVvZ3JhcGhzXShodHRwczovL3d3dy5tYXBib3guY29tL21hcGJveC1nbC1qcy9leGFtcGxlL2xvY2FsLWlkZW9ncmFwaHMpKVxuICogQHBhcmFtIHtSZXF1ZXN0VHJhbnNmb3JtRnVuY3Rpb259IFtvcHRpb25zLnRyYW5zZm9ybVJlcXVlc3Q9bnVsbF0gQSBjYWxsYmFjayBydW4gYmVmb3JlIHRoZSBNYXAgbWFrZXMgYSByZXF1ZXN0IGZvciBhbiBleHRlcm5hbCBVUkwuIFRoZSBjYWxsYmFjayBjYW4gYmUgdXNlZCB0byBtb2RpZnkgdGhlIHVybCwgc2V0IGhlYWRlcnMsIG9yIHNldCB0aGUgY3JlZGVudGlhbHMgcHJvcGVydHkgZm9yIGNyb3NzLW9yaWdpbiByZXF1ZXN0cy5cbiAqICAgRXhwZWN0ZWQgdG8gcmV0dXJuIGFuIG9iamVjdCB3aXRoIGEgYHVybGAgcHJvcGVydHkgYW5kIG9wdGlvbmFsbHkgYGhlYWRlcnNgIGFuZCBgY3JlZGVudGlhbHNgIHByb3BlcnRpZXMuXG4gKiBAcGFyYW0ge2Jvb2xlYW59IFtvcHRpb25zLmNvbGxlY3RSZXNvdXJjZVRpbWluZz1mYWxzZV0gSWYgYHRydWVgLCBSZXNvdXJjZSBUaW1pbmcgQVBJIGluZm9ybWF0aW9uIHdpbGwgYmUgY29sbGVjdGVkIGZvciByZXF1ZXN0cyBtYWRlIGJ5IEdlb0pTT04gYW5kIFZlY3RvciBUaWxlIHdlYiB3b3JrZXJzICh0aGlzIGluZm9ybWF0aW9uIGlzIG5vcm1hbGx5IGluYWNjZXNzaWJsZSBmcm9tIHRoZSBtYWluIEphdmFzY3JpcHQgdGhyZWFkKS4gSW5mb3JtYXRpb24gd2lsbCBiZSByZXR1cm5lZCBpbiBhIGByZXNvdXJjZVRpbWluZ2AgcHJvcGVydHkgb2YgcmVsZXZhbnQgYGRhdGFgIGV2ZW50cy5cbiAqIEBwYXJhbSB7bnVtYmVyfSBbb3B0aW9ucy5mYWRlRHVyYXRpb249MzAwXSBDb250cm9scyB0aGUgZHVyYXRpb24gb2YgdGhlIGZhZGUtaW4vZmFkZS1vdXQgYW5pbWF0aW9uIGZvciBsYWJlbCBjb2xsaXNpb25zLCBpbiBtaWxsaXNlY29uZHMuIFRoaXMgc2V0dGluZyBhZmZlY3RzIGFsbCBzeW1ib2wgbGF5ZXJzLiBUaGlzIHNldHRpbmcgZG9lcyBub3QgYWZmZWN0IHRoZSBkdXJhdGlvbiBvZiBydW50aW1lIHN0eWxpbmcgdHJhbnNpdGlvbnMgb3IgcmFzdGVyIHRpbGUgY3Jvc3MtZmFkaW5nLlxuICogQHBhcmFtIHtib29sZWFufSBbb3B0aW9ucy5jcm9zc1NvdXJjZUNvbGxpc2lvbnM9dHJ1ZV0gSWYgYHRydWVgLCBzeW1ib2xzIGZyb20gbXVsdGlwbGUgc291cmNlcyBjYW4gY29sbGlkZSB3aXRoIGVhY2ggb3RoZXIgZHVyaW5nIGNvbGxpc2lvbiBkZXRlY3Rpb24uIElmIGBmYWxzZWAsIGNvbGxpc2lvbiBkZXRlY3Rpb24gaXMgcnVuIHNlcGFyYXRlbHkgZm9yIHRoZSBzeW1ib2xzIGluIGVhY2ggc291cmNlLlxuICogQGV4YW1wbGVcbiAqIHZhciBtYXAgPSBuZXcgbWFwYm94Z2wuTWFwKHtcbiAqICAgY29udGFpbmVyOiAnbWFwJyxcbiAqICAgY2VudGVyOiBbLTEyMi40MjA2NzksIDM3Ljc3MjUzN10sXG4gKiAgIHpvb206IDEzLFxuICogICBzdHlsZTogc3R5bGVfb2JqZWN0LFxuICogICBoYXNoOiB0cnVlLFxuICogICB0cmFuc2Zvcm1SZXF1ZXN0OiAodXJsLCByZXNvdXJjZVR5cGUpPT4ge1xuICogICAgIGlmKHJlc291cmNlVHlwZSA9PT0gJ1NvdXJjZScgJiYgdXJsLnN0YXJ0c1dpdGgoJ2h0dHA6Ly9teUhvc3QnKSkge1xuICogICAgICAgcmV0dXJuIHtcbiAqICAgICAgICB1cmw6IHVybC5yZXBsYWNlKCdodHRwJywgJ2h0dHBzJyksXG4gKiAgICAgICAgaGVhZGVyczogeyAnbXktY3VzdG9tLWhlYWRlcic6IHRydWV9LFxuICogICAgICAgIGNyZWRlbnRpYWxzOiAnaW5jbHVkZScgIC8vIEluY2x1ZGUgY29va2llcyBmb3IgY3Jvc3Mtb3JpZ2luIHJlcXVlc3RzXG4gKiAgICAgIH1cbiAqICAgICB9XG4gKiAgIH1cbiAqIH0pO1xuICogQHNlZSBbRGlzcGxheSBhIG1hcF0oaHR0cHM6Ly93d3cubWFwYm94LmNvbS9tYXBib3gtZ2wtanMvZXhhbXBsZXMvKVxuICovXG5jbGFzcyBNYXAgZXh0ZW5kcyBDYW1lcmEge1xuICAgIHN0eWxlOiBTdHlsZTtcbiAgICBwYWludGVyOiBQYWludGVyO1xuXG4gICAgX2NvbnRhaW5lcjogSFRNTEVsZW1lbnQ7XG4gICAgX21pc3NpbmdDU1NDYW5hcnk6IEhUTUxFbGVtZW50O1xuICAgIF9jYW52YXNDb250YWluZXI6IEhUTUxFbGVtZW50O1xuICAgIF9jb250cm9sQ29udGFpbmVyOiBIVE1MRWxlbWVudDtcbiAgICBfY29udHJvbFBvc2l0aW9uczoge1tzdHJpbmddOiBIVE1MRWxlbWVudH07XG4gICAgX2ludGVyYWN0aXZlOiA/Ym9vbGVhbjtcbiAgICBfc2hvd1RpbGVCb3VuZGFyaWVzOiA/Ym9vbGVhbjtcbiAgICBfc2hvd0NvbGxpc2lvbkJveGVzOiA/Ym9vbGVhbjtcbiAgICBfc2hvd092ZXJkcmF3SW5zcGVjdG9yOiBib29sZWFuO1xuICAgIF9yZXBhaW50OiA/Ym9vbGVhbjtcbiAgICBfdmVydGljZXM6ID9ib29sZWFuO1xuICAgIF9jYW52YXM6IEhUTUxDYW52YXNFbGVtZW50O1xuICAgIF90cmFuc2Zvcm1SZXF1ZXN0OiBSZXF1ZXN0VHJhbnNmb3JtRnVuY3Rpb247XG4gICAgX21heFRpbGVDYWNoZVNpemU6IG51bWJlcjtcbiAgICBfZnJhbWU6ID9DYW5jZWxhYmxlO1xuICAgIF9zdHlsZURpcnR5OiA/Ym9vbGVhbjtcbiAgICBfc291cmNlc0RpcnR5OiA/Ym9vbGVhbjtcbiAgICBfcGxhY2VtZW50RGlydHk6ID9ib29sZWFuO1xuICAgIF9sb2FkZWQ6IGJvb2xlYW47XG4gICAgX3RyYWNrUmVzaXplOiBib29sZWFuO1xuICAgIF9wcmVzZXJ2ZURyYXdpbmdCdWZmZXI6IGJvb2xlYW47XG4gICAgX2ZhaWxJZk1ham9yUGVyZm9ybWFuY2VDYXZlYXQ6IGJvb2xlYW47XG4gICAgX3JlZnJlc2hFeHBpcmVkVGlsZXM6IGJvb2xlYW47XG4gICAgX2hhc2g6IEhhc2g7XG4gICAgX2RlbGVnYXRlZExpc3RlbmVyczogYW55O1xuICAgIF9mYWRlRHVyYXRpb246IG51bWJlcjtcbiAgICBfY3Jvc3NTb3VyY2VDb2xsaXNpb25zOiBib29sZWFuO1xuICAgIF9jcm9zc0ZhZGluZ0ZhY3RvcjogbnVtYmVyO1xuICAgIF9jb2xsZWN0UmVzb3VyY2VUaW1pbmc6IGJvb2xlYW47XG4gICAgX3JlbmRlclRhc2tRdWV1ZTogVGFza1F1ZXVlO1xuICAgIF9jb250cm9sczogQXJyYXk8SUNvbnRyb2w+O1xuXG4gICAgLyoqXG4gICAgICogVGhlIG1hcCdzIHtAbGluayBTY3JvbGxab29tSGFuZGxlcn0sIHdoaWNoIGltcGxlbWVudHMgem9vbWluZyBpbiBhbmQgb3V0IHdpdGggYSBzY3JvbGwgd2hlZWwgb3IgdHJhY2twYWQuXG4gICAgICovXG4gICAgc2Nyb2xsWm9vbTogU2Nyb2xsWm9vbUhhbmRsZXI7XG5cbiAgICAvKipcbiAgICAgKiBUaGUgbWFwJ3Mge0BsaW5rIEJveFpvb21IYW5kbGVyfSwgd2hpY2ggaW1wbGVtZW50cyB6b29taW5nIHVzaW5nIGEgZHJhZyBnZXN0dXJlIHdpdGggdGhlIFNoaWZ0IGtleSBwcmVzc2VkLlxuICAgICAqL1xuICAgIGJveFpvb206IEJveFpvb21IYW5kbGVyO1xuXG4gICAgLyoqXG4gICAgICogVGhlIG1hcCdzIHtAbGluayBEcmFnUm90YXRlSGFuZGxlcn0sIHdoaWNoIGltcGxlbWVudHMgcm90YXRpbmcgdGhlIG1hcCB3aGlsZSBkcmFnZ2luZyB3aXRoIHRoZSByaWdodFxuICAgICAqIG1vdXNlIGJ1dHRvbiBvciB3aXRoIHRoZSBDb250cm9sIGtleSBwcmVzc2VkLlxuICAgICAqL1xuICAgIGRyYWdSb3RhdGU6IERyYWdSb3RhdGVIYW5kbGVyO1xuXG4gICAgLyoqXG4gICAgICogVGhlIG1hcCdzIHtAbGluayBEcmFnUGFuSGFuZGxlcn0sIHdoaWNoIGltcGxlbWVudHMgZHJhZ2dpbmcgdGhlIG1hcCB3aXRoIGEgbW91c2Ugb3IgdG91Y2ggZ2VzdHVyZS5cbiAgICAgKi9cbiAgICBkcmFnUGFuOiBEcmFnUGFuSGFuZGxlcjtcblxuICAgIC8qKlxuICAgICAqIFRoZSBtYXAncyB7QGxpbmsgS2V5Ym9hcmRIYW5kbGVyfSwgd2hpY2ggYWxsb3dzIHRoZSB1c2VyIHRvIHpvb20sIHJvdGF0ZSwgYW5kIHBhbiB0aGUgbWFwIHVzaW5nIGtleWJvYXJkXG4gICAgICogc2hvcnRjdXRzLlxuICAgICAqL1xuICAgIGtleWJvYXJkOiBLZXlib2FyZEhhbmRsZXI7XG5cbiAgICAvKipcbiAgICAgKiBUaGUgbWFwJ3Mge0BsaW5rIERvdWJsZUNsaWNrWm9vbUhhbmRsZXJ9LCB3aGljaCBhbGxvd3MgdGhlIHVzZXIgdG8gem9vbSBieSBkb3VibGUgY2xpY2tpbmcuXG4gICAgICovXG4gICAgZG91YmxlQ2xpY2tab29tOiBEb3VibGVDbGlja1pvb21IYW5kbGVyO1xuXG4gICAgLyoqXG4gICAgICogVGhlIG1hcCdzIHtAbGluayBUb3VjaFpvb21Sb3RhdGVIYW5kbGVyfSwgd2hpY2ggYWxsb3dzIHRoZSB1c2VyIHRvIHpvb20gb3Igcm90YXRlIHRoZSBtYXAgd2l0aCB0b3VjaCBnZXN0dXJlcy5cbiAgICAgKi9cbiAgICB0b3VjaFpvb21Sb3RhdGU6IFRvdWNoWm9vbVJvdGF0ZUhhbmRsZXI7XG5cbiAgICBjb25zdHJ1Y3RvcihvcHRpb25zOiBNYXBPcHRpb25zKSB7XG4gICAgICAgIG9wdGlvbnMgPSBleHRlbmQoe30sIGRlZmF1bHRPcHRpb25zLCBvcHRpb25zKTtcblxuICAgICAgICBpZiAob3B0aW9ucy5taW5ab29tICE9IG51bGwgJiYgb3B0aW9ucy5tYXhab29tICE9IG51bGwgJiYgb3B0aW9ucy5taW5ab29tID4gb3B0aW9ucy5tYXhab29tKSB7XG4gICAgICAgICAgICB0aHJvdyBuZXcgRXJyb3IoYG1heFpvb20gbXVzdCBiZSBncmVhdGVyIHRoYW4gbWluWm9vbWApO1xuICAgICAgICB9XG5cbiAgICAgICAgY29uc3QgdHJhbnNmb3JtID0gbmV3IFRyYW5zZm9ybShvcHRpb25zLm1pblpvb20sIG9wdGlvbnMubWF4Wm9vbSwgb3B0aW9ucy5yZW5kZXJXb3JsZENvcGllcyk7XG4gICAgICAgIHN1cGVyKHRyYW5zZm9ybSwgb3B0aW9ucyk7XG5cbiAgICAgICAgdGhpcy5faW50ZXJhY3RpdmUgPSBvcHRpb25zLmludGVyYWN0aXZlO1xuICAgICAgICB0aGlzLl9tYXhUaWxlQ2FjaGVTaXplID0gb3B0aW9ucy5tYXhUaWxlQ2FjaGVTaXplO1xuICAgICAgICB0aGlzLl9mYWlsSWZNYWpvclBlcmZvcm1hbmNlQ2F2ZWF0ID0gb3B0aW9ucy5mYWlsSWZNYWpvclBlcmZvcm1hbmNlQ2F2ZWF0O1xuICAgICAgICB0aGlzLl9wcmVzZXJ2ZURyYXdpbmdCdWZmZXIgPSBvcHRpb25zLnByZXNlcnZlRHJhd2luZ0J1ZmZlcjtcbiAgICAgICAgdGhpcy5fdHJhY2tSZXNpemUgPSBvcHRpb25zLnRyYWNrUmVzaXplO1xuICAgICAgICB0aGlzLl9iZWFyaW5nU25hcCA9IG9wdGlvbnMuYmVhcmluZ1NuYXA7XG4gICAgICAgIHRoaXMuX3JlZnJlc2hFeHBpcmVkVGlsZXMgPSBvcHRpb25zLnJlZnJlc2hFeHBpcmVkVGlsZXM7XG4gICAgICAgIHRoaXMuX2ZhZGVEdXJhdGlvbiA9IG9wdGlvbnMuZmFkZUR1cmF0aW9uO1xuICAgICAgICB0aGlzLl9jcm9zc1NvdXJjZUNvbGxpc2lvbnMgPSBvcHRpb25zLmNyb3NzU291cmNlQ29sbGlzaW9ucztcbiAgICAgICAgdGhpcy5fY3Jvc3NGYWRpbmdGYWN0b3IgPSAxO1xuICAgICAgICB0aGlzLl9jb2xsZWN0UmVzb3VyY2VUaW1pbmcgPSBvcHRpb25zLmNvbGxlY3RSZXNvdXJjZVRpbWluZztcbiAgICAgICAgdGhpcy5fcmVuZGVyVGFza1F1ZXVlID0gbmV3IFRhc2tRdWV1ZSgpO1xuICAgICAgICB0aGlzLl9jb250cm9scyA9IFtdO1xuXG4gICAgICAgIGNvbnN0IHRyYW5zZm9ybVJlcXVlc3RGbiA9IG9wdGlvbnMudHJhbnNmb3JtUmVxdWVzdDtcbiAgICAgICAgdGhpcy5fdHJhbnNmb3JtUmVxdWVzdCA9IHRyYW5zZm9ybVJlcXVlc3RGbiA/XG4gICAgICAgICAgICAodXJsLCB0eXBlKSA9PiB0cmFuc2Zvcm1SZXF1ZXN0Rm4odXJsLCB0eXBlKSB8fCAoeyB1cmwgfSkgOlxuICAgICAgICAgICAgKHVybCkgPT4gKHsgdXJsIH0pO1xuXG4gICAgICAgIGlmICh0eXBlb2Ygb3B0aW9ucy5jb250YWluZXIgPT09ICdzdHJpbmcnKSB7XG4gICAgICAgICAgICB0aGlzLl9jb250YWluZXIgPSB3aW5kb3cuZG9jdW1lbnQuZ2V0RWxlbWVudEJ5SWQob3B0aW9ucy5jb250YWluZXIpO1xuICAgICAgICAgICAgaWYgKCF0aGlzLl9jb250YWluZXIpIHtcbiAgICAgICAgICAgICAgICB0aHJvdyBuZXcgRXJyb3IoYENvbnRhaW5lciAnJHtvcHRpb25zLmNvbnRhaW5lcn0nIG5vdCBmb3VuZC5gKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfSBlbHNlIGlmIChvcHRpb25zLmNvbnRhaW5lciBpbnN0YW5jZW9mIEhUTUxFbGVtZW50KSB7XG4gICAgICAgICAgICB0aGlzLl9jb250YWluZXIgPSBvcHRpb25zLmNvbnRhaW5lcjtcbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgIHRocm93IG5ldyBFcnJvcihgSW52YWxpZCB0eXBlOiAnY29udGFpbmVyJyBtdXN0IGJlIGEgU3RyaW5nIG9yIEhUTUxFbGVtZW50LmApO1xuICAgICAgICB9XG5cbiAgICAgICAgaWYgKG9wdGlvbnMubWF4Qm91bmRzKSB7XG4gICAgICAgICAgICB0aGlzLnNldE1heEJvdW5kcyhvcHRpb25zLm1heEJvdW5kcyk7XG4gICAgICAgIH1cblxuICAgICAgICBiaW5kQWxsKFtcbiAgICAgICAgICAgICdfb25XaW5kb3dPbmxpbmUnLFxuICAgICAgICAgICAgJ19vbldpbmRvd1Jlc2l6ZScsXG4gICAgICAgICAgICAnX2NvbnRleHRMb3N0JyxcbiAgICAgICAgICAgICdfY29udGV4dFJlc3RvcmVkJ1xuICAgICAgICBdLCB0aGlzKTtcblxuICAgICAgICB0aGlzLl9zZXR1cENvbnRhaW5lcigpO1xuICAgICAgICB0aGlzLl9zZXR1cFBhaW50ZXIoKTtcbiAgICAgICAgaWYgKHRoaXMucGFpbnRlciA9PT0gdW5kZWZpbmVkKSB7XG4gICAgICAgICAgICB0aHJvdyBuZXcgRXJyb3IoYEZhaWxlZCB0byBpbml0aWFsaXplIFdlYkdMLmApO1xuICAgICAgICB9XG5cbiAgICAgICAgdGhpcy5vbignbW92ZScsICgpID0+IHRoaXMuX3VwZGF0ZShmYWxzZSkpO1xuICAgICAgICB0aGlzLm9uKCd6b29tJywgKCkgPT4gdGhpcy5fdXBkYXRlKHRydWUpKTtcblxuICAgICAgICBpZiAodHlwZW9mIHdpbmRvdyAhPT0gJ3VuZGVmaW5lZCcpIHtcbiAgICAgICAgICAgIHdpbmRvdy5hZGRFdmVudExpc3RlbmVyKCdvbmxpbmUnLCB0aGlzLl9vbldpbmRvd09ubGluZSwgZmFsc2UpO1xuICAgICAgICAgICAgd2luZG93LmFkZEV2ZW50TGlzdGVuZXIoJ3Jlc2l6ZScsIHRoaXMuX29uV2luZG93UmVzaXplLCBmYWxzZSk7XG4gICAgICAgIH1cblxuICAgICAgICBiaW5kSGFuZGxlcnModGhpcywgb3B0aW9ucyk7XG5cbiAgICAgICAgdGhpcy5faGFzaCA9IG9wdGlvbnMuaGFzaCAmJiAobmV3IEhhc2goKSkuYWRkVG8odGhpcyk7XG4gICAgICAgIC8vIGRvbid0IHNldCBwb3NpdGlvbiBmcm9tIG9wdGlvbnMgaWYgc2V0IHRocm91Z2ggaGFzaFxuICAgICAgICBpZiAoIXRoaXMuX2hhc2ggfHwgIXRoaXMuX2hhc2guX29uSGFzaENoYW5nZSgpKSB7XG4gICAgICAgICAgICB0aGlzLmp1bXBUbyh7XG4gICAgICAgICAgICAgICAgY2VudGVyOiBvcHRpb25zLmNlbnRlcixcbiAgICAgICAgICAgICAgICB6b29tOiBvcHRpb25zLnpvb20sXG4gICAgICAgICAgICAgICAgYmVhcmluZzogb3B0aW9ucy5iZWFyaW5nLFxuICAgICAgICAgICAgICAgIHBpdGNoOiBvcHRpb25zLnBpdGNoXG4gICAgICAgICAgICB9KTtcbiAgICAgICAgfVxuXG4gICAgICAgIHRoaXMucmVzaXplKCk7XG5cbiAgICAgICAgaWYgKG9wdGlvbnMuc3R5bGUpIHRoaXMuc2V0U3R5bGUob3B0aW9ucy5zdHlsZSwgeyBsb2NhbElkZW9ncmFwaEZvbnRGYW1pbHk6IG9wdGlvbnMubG9jYWxJZGVvZ3JhcGhGb250RmFtaWx5IH0pO1xuXG4gICAgICAgIGlmIChvcHRpb25zLmF0dHJpYnV0aW9uQ29udHJvbClcbiAgICAgICAgICAgIHRoaXMuYWRkQ29udHJvbChuZXcgQXR0cmlidXRpb25Db250cm9sKHsgY3VzdG9tQXR0cmlidXRpb246IG9wdGlvbnMuY3VzdG9tQXR0cmlidXRpb24gfSkpO1xuXG4gICAgICAgIHRoaXMuYWRkQ29udHJvbChuZXcgTG9nb0NvbnRyb2woKSwgb3B0aW9ucy5sb2dvUG9zaXRpb24pO1xuXG4gICAgICAgIHRoaXMub24oJ3N0eWxlLmxvYWQnLCAoKSA9PiB7XG4gICAgICAgICAgICBpZiAodGhpcy50cmFuc2Zvcm0udW5tb2RpZmllZCkge1xuICAgICAgICAgICAgICAgIHRoaXMuanVtcFRvKCh0aGlzLnN0eWxlLnN0eWxlc2hlZXQ6IGFueSkpO1xuICAgICAgICAgICAgfVxuICAgICAgICB9KTtcbiAgICAgICAgdGhpcy5vbignZGF0YScsIChldmVudDogTWFwRGF0YUV2ZW50KSA9PiB7XG4gICAgICAgICAgICB0aGlzLl91cGRhdGUoZXZlbnQuZGF0YVR5cGUgPT09ICdzdHlsZScpO1xuICAgICAgICAgICAgdGhpcy5maXJlKG5ldyBFdmVudChgJHtldmVudC5kYXRhVHlwZX1kYXRhYCwgZXZlbnQpKTtcbiAgICAgICAgfSk7XG4gICAgICAgIHRoaXMub24oJ2RhdGFsb2FkaW5nJywgKGV2ZW50OiBNYXBEYXRhRXZlbnQpID0+IHtcbiAgICAgICAgICAgIHRoaXMuZmlyZShuZXcgRXZlbnQoYCR7ZXZlbnQuZGF0YVR5cGV9ZGF0YWxvYWRpbmdgLCBldmVudCkpO1xuICAgICAgICB9KTtcbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBBZGRzIGEge0BsaW5rIElDb250cm9sfSB0byB0aGUgbWFwLCBjYWxsaW5nIGBjb250cm9sLm9uQWRkKHRoaXMpYC5cbiAgICAgKlxuICAgICAqIEBwYXJhbSB7SUNvbnRyb2x9IGNvbnRyb2wgVGhlIHtAbGluayBJQ29udHJvbH0gdG8gYWRkLlxuICAgICAqIEBwYXJhbSB7c3RyaW5nfSBbcG9zaXRpb25dIHBvc2l0aW9uIG9uIHRoZSBtYXAgdG8gd2hpY2ggdGhlIGNvbnRyb2wgd2lsbCBiZSBhZGRlZC5cbiAgICAgKiBWYWxpZCB2YWx1ZXMgYXJlIGAndG9wLWxlZnQnYCwgYCd0b3AtcmlnaHQnYCwgYCdib3R0b20tbGVmdCdgLCBhbmQgYCdib3R0b20tcmlnaHQnYC4gRGVmYXVsdHMgdG8gYCd0b3AtcmlnaHQnYC5cbiAgICAgKiBAcmV0dXJucyB7TWFwfSBgdGhpc2BcbiAgICAgKiBAc2VlIFtEaXNwbGF5IG1hcCBuYXZpZ2F0aW9uIGNvbnRyb2xzXShodHRwczovL3d3dy5tYXBib3guY29tL21hcGJveC1nbC1qcy9leGFtcGxlL25hdmlnYXRpb24vKVxuICAgICAqL1xuICAgIGFkZENvbnRyb2woY29udHJvbDogSUNvbnRyb2wsIHBvc2l0aW9uPzogQ29udHJvbFBvc2l0aW9uKSB7XG4gICAgICAgIGlmIChwb3NpdGlvbiA9PT0gdW5kZWZpbmVkICYmIGNvbnRyb2wuZ2V0RGVmYXVsdFBvc2l0aW9uKSB7XG4gICAgICAgICAgICBwb3NpdGlvbiA9IGNvbnRyb2wuZ2V0RGVmYXVsdFBvc2l0aW9uKCk7XG4gICAgICAgIH1cbiAgICAgICAgaWYgKHBvc2l0aW9uID09PSB1bmRlZmluZWQpIHtcbiAgICAgICAgICAgIHBvc2l0aW9uID0gJ3RvcC1yaWdodCc7XG4gICAgICAgIH1cbiAgICAgICAgaWYgKCFjb250cm9sIHx8ICFjb250cm9sLm9uQWRkKSB7XG4gICAgICAgICAgICByZXR1cm4gdGhpcy5maXJlKG5ldyBFcnJvckV2ZW50KG5ldyBFcnJvcihcbiAgICAgICAgICAgICAgICAnSW52YWxpZCBhcmd1bWVudCB0byBtYXAuYWRkQ29udHJvbCgpLiBBcmd1bWVudCBtdXN0IGJlIGEgY29udHJvbCB3aXRoIG9uQWRkIGFuZCBvblJlbW92ZSBtZXRob2RzLicpKSk7XG4gICAgICAgIH1cbiAgICAgICAgY29uc3QgY29udHJvbEVsZW1lbnQgPSBjb250cm9sLm9uQWRkKHRoaXMpO1xuICAgICAgICB0aGlzLl9jb250cm9scy5wdXNoKGNvbnRyb2wpO1xuXG4gICAgICAgIGNvbnN0IHBvc2l0aW9uQ29udGFpbmVyID0gdGhpcy5fY29udHJvbFBvc2l0aW9uc1twb3NpdGlvbl07XG4gICAgICAgIGlmIChwb3NpdGlvbi5pbmRleE9mKCdib3R0b20nKSAhPT0gLTEpIHtcbiAgICAgICAgICAgIHBvc2l0aW9uQ29udGFpbmVyLmluc2VydEJlZm9yZShjb250cm9sRWxlbWVudCwgcG9zaXRpb25Db250YWluZXIuZmlyc3RDaGlsZCk7XG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICBwb3NpdGlvbkNvbnRhaW5lci5hcHBlbmRDaGlsZChjb250cm9sRWxlbWVudCk7XG4gICAgICAgIH1cbiAgICAgICAgcmV0dXJuIHRoaXM7XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogUmVtb3ZlcyB0aGUgY29udHJvbCBmcm9tIHRoZSBtYXAuXG4gICAgICpcbiAgICAgKiBAcGFyYW0ge0lDb250cm9sfSBjb250cm9sIFRoZSB7QGxpbmsgSUNvbnRyb2x9IHRvIHJlbW92ZS5cbiAgICAgKiBAcmV0dXJucyB7TWFwfSBgdGhpc2BcbiAgICAgKi9cbiAgICByZW1vdmVDb250cm9sKGNvbnRyb2w6IElDb250cm9sKSB7XG4gICAgICAgIGlmICghY29udHJvbCB8fCAhY29udHJvbC5vblJlbW92ZSkge1xuICAgICAgICAgICAgcmV0dXJuIHRoaXMuZmlyZShuZXcgRXJyb3JFdmVudChuZXcgRXJyb3IoXG4gICAgICAgICAgICAgICAgJ0ludmFsaWQgYXJndW1lbnQgdG8gbWFwLnJlbW92ZUNvbnRyb2woKS4gQXJndW1lbnQgbXVzdCBiZSBhIGNvbnRyb2wgd2l0aCBvbkFkZCBhbmQgb25SZW1vdmUgbWV0aG9kcy4nKSkpO1xuICAgICAgICB9XG4gICAgICAgIGNvbnN0IGNpID0gdGhpcy5fY29udHJvbHMuaW5kZXhPZihjb250cm9sKTtcbiAgICAgICAgaWYgKGNpID4gLTEpIHRoaXMuX2NvbnRyb2xzLnNwbGljZShjaSwgMSk7XG4gICAgICAgIGNvbnRyb2wub25SZW1vdmUodGhpcyk7XG4gICAgICAgIHJldHVybiB0aGlzO1xuICAgIH1cblxuICAgIC8qKlxuICAgICAqIFJlc2l6ZXMgdGhlIG1hcCBhY2NvcmRpbmcgdG8gdGhlIGRpbWVuc2lvbnMgb2YgaXRzXG4gICAgICogYGNvbnRhaW5lcmAgZWxlbWVudC5cbiAgICAgKlxuICAgICAqIFRoaXMgbWV0aG9kIG11c3QgYmUgY2FsbGVkIGFmdGVyIHRoZSBtYXAncyBgY29udGFpbmVyYCBpcyByZXNpemVkIGJ5IGFub3RoZXIgc2NyaXB0LFxuICAgICAqIG9yIHdoZW4gdGhlIG1hcCBpcyBzaG93biBhZnRlciBiZWluZyBpbml0aWFsbHkgaGlkZGVuIHdpdGggQ1NTLlxuICAgICAqXG4gICAgICogQHBhcmFtIGV2ZW50RGF0YSBBZGRpdGlvbmFsIHByb3BlcnRpZXMgdG8gYmUgYWRkZWQgdG8gZXZlbnQgb2JqZWN0cyBvZiBldmVudHMgdHJpZ2dlcmVkIGJ5IHRoaXMgbWV0aG9kLlxuICAgICAqIEByZXR1cm5zIHtNYXB9IGB0aGlzYFxuICAgICAqL1xuICAgIHJlc2l6ZShldmVudERhdGE/OiBPYmplY3QpIHtcbiAgICAgICAgY29uc3QgZGltZW5zaW9ucyA9IHRoaXMuX2NvbnRhaW5lckRpbWVuc2lvbnMoKTtcbiAgICAgICAgY29uc3Qgd2lkdGggPSBkaW1lbnNpb25zWzBdO1xuICAgICAgICBjb25zdCBoZWlnaHQgPSBkaW1lbnNpb25zWzFdO1xuXG4gICAgICAgIHRoaXMuX3Jlc2l6ZUNhbnZhcyh3aWR0aCwgaGVpZ2h0KTtcbiAgICAgICAgdGhpcy50cmFuc2Zvcm0ucmVzaXplKHdpZHRoLCBoZWlnaHQpO1xuICAgICAgICB0aGlzLnBhaW50ZXIucmVzaXplKHdpZHRoLCBoZWlnaHQpO1xuXG4gICAgICAgIHRoaXMuZmlyZShuZXcgRXZlbnQoJ21vdmVzdGFydCcsIGV2ZW50RGF0YSkpXG4gICAgICAgICAgICAuZmlyZShuZXcgRXZlbnQoJ21vdmUnLCBldmVudERhdGEpKVxuICAgICAgICAgICAgLmZpcmUobmV3IEV2ZW50KCdyZXNpemUnLCBldmVudERhdGEpKVxuICAgICAgICAgICAgLmZpcmUobmV3IEV2ZW50KCdtb3ZlZW5kJywgZXZlbnREYXRhKSk7XG4gICAgICAgIHJldHVybiB0aGlzO1xuICAgIH1cblxuICAgIC8qKlxuICAgICAqIFJldHVybnMgdGhlIG1hcCdzIGdlb2dyYXBoaWNhbCBib3VuZHMuIFdoZW4gdGhlIGJlYXJpbmcgb3IgcGl0Y2ggaXMgbm9uLXplcm8sIHRoZSB2aXNpYmxlIHJlZ2lvbiBpcyBub3RcbiAgICAgKiBhbiBheGlzLWFsaWduZWQgcmVjdGFuZ2xlLCBhbmQgdGhlIHJlc3VsdCBpcyB0aGUgc21hbGxlc3QgYm91bmRzIHRoYXQgZW5jb21wYXNzZXMgdGhlIHZpc2libGUgcmVnaW9uLlxuICAgICAqL1xuICAgIGdldEJvdW5kcygpOiBMbmdMYXRCb3VuZHMge1xuICAgICAgICByZXR1cm4gdGhpcy50cmFuc2Zvcm0uZ2V0Qm91bmRzKCk7XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogUmV0dXJucyB0aGUgbWF4aW11bSBnZW9ncmFwaGljYWwgYm91bmRzIHRoZSBtYXAgaXMgY29uc3RyYWluZWQgdG8sIG9yIGBudWxsYCBpZiBub25lIHNldC5cbiAgICAgKi9cbiAgICBnZXRNYXhCb3VuZHMoKTogTG5nTGF0Qm91bmRzIHwgbnVsbCB7XG4gICAgICAgIHJldHVybiB0aGlzLnRyYW5zZm9ybS5nZXRNYXhCb3VuZHMoKTtcbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBTZXRzIG9yIGNsZWFycyB0aGUgbWFwJ3MgZ2VvZ3JhcGhpY2FsIGJvdW5kcy5cbiAgICAgKlxuICAgICAqIFBhbiBhbmQgem9vbSBvcGVyYXRpb25zIGFyZSBjb25zdHJhaW5lZCB3aXRoaW4gdGhlc2UgYm91bmRzLlxuICAgICAqIElmIGEgcGFuIG9yIHpvb20gaXMgcGVyZm9ybWVkIHRoYXQgd291bGRcbiAgICAgKiBkaXNwbGF5IHJlZ2lvbnMgb3V0c2lkZSB0aGVzZSBib3VuZHMsIHRoZSBtYXAgd2lsbFxuICAgICAqIGluc3RlYWQgZGlzcGxheSBhIHBvc2l0aW9uIGFuZCB6b29tIGxldmVsXG4gICAgICogYXMgY2xvc2UgYXMgcG9zc2libGUgdG8gdGhlIG9wZXJhdGlvbidzIHJlcXVlc3Qgd2hpbGUgc3RpbGxcbiAgICAgKiByZW1haW5pbmcgd2l0aGluIHRoZSBib3VuZHMuXG4gICAgICpcbiAgICAgKiBAcGFyYW0ge0xuZ0xhdEJvdW5kc0xpa2UgfCBudWxsIHwgdW5kZWZpbmVkfSBib3VuZHMgVGhlIG1heGltdW0gYm91bmRzIHRvIHNldC4gSWYgYG51bGxgIG9yIGB1bmRlZmluZWRgIGlzIHByb3ZpZGVkLCB0aGUgZnVuY3Rpb24gcmVtb3ZlcyB0aGUgbWFwJ3MgbWF4aW11bSBib3VuZHMuXG4gICAgICogQHJldHVybnMge01hcH0gYHRoaXNgXG4gICAgICovXG4gICAgc2V0TWF4Qm91bmRzKGJvdW5kczogTG5nTGF0Qm91bmRzTGlrZSkge1xuICAgICAgICB0aGlzLnRyYW5zZm9ybS5zZXRNYXhCb3VuZHMoTG5nTGF0Qm91bmRzLmNvbnZlcnQoYm91bmRzKSk7XG4gICAgICAgIHJldHVybiB0aGlzLl91cGRhdGUoKTtcbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBTZXRzIG9yIGNsZWFycyB0aGUgbWFwJ3MgbWluaW11bSB6b29tIGxldmVsLlxuICAgICAqIElmIHRoZSBtYXAncyBjdXJyZW50IHpvb20gbGV2ZWwgaXMgbG93ZXIgdGhhbiB0aGUgbmV3IG1pbmltdW0sXG4gICAgICogdGhlIG1hcCB3aWxsIHpvb20gdG8gdGhlIG5ldyBtaW5pbXVtLlxuICAgICAqXG4gICAgICogQHBhcmFtIHtudW1iZXIgfCBudWxsIHwgdW5kZWZpbmVkfSBtaW5ab29tIFRoZSBtaW5pbXVtIHpvb20gbGV2ZWwgdG8gc2V0ICgwLTI0KS5cbiAgICAgKiAgIElmIGBudWxsYCBvciBgdW5kZWZpbmVkYCBpcyBwcm92aWRlZCwgdGhlIGZ1bmN0aW9uIHJlbW92ZXMgdGhlIGN1cnJlbnQgbWluaW11bSB6b29tIChpLmUuIHNldHMgaXQgdG8gMCkuXG4gICAgICogQHJldHVybnMge01hcH0gYHRoaXNgXG4gICAgICovXG4gICAgc2V0TWluWm9vbShtaW5ab29tPzogP251bWJlcikge1xuXG4gICAgICAgIG1pblpvb20gPSBtaW5ab29tID09PSBudWxsIHx8IG1pblpvb20gPT09IHVuZGVmaW5lZCA/IGRlZmF1bHRNaW5ab29tIDogbWluWm9vbTtcblxuICAgICAgICBpZiAobWluWm9vbSA+PSBkZWZhdWx0TWluWm9vbSAmJiBtaW5ab29tIDw9IHRoaXMudHJhbnNmb3JtLm1heFpvb20pIHtcbiAgICAgICAgICAgIHRoaXMudHJhbnNmb3JtLm1pblpvb20gPSBtaW5ab29tO1xuICAgICAgICAgICAgdGhpcy5fdXBkYXRlKCk7XG5cbiAgICAgICAgICAgIGlmICh0aGlzLmdldFpvb20oKSA8IG1pblpvb20pIHRoaXMuc2V0Wm9vbShtaW5ab29tKTtcblxuICAgICAgICAgICAgcmV0dXJuIHRoaXM7XG5cbiAgICAgICAgfSBlbHNlIHRocm93IG5ldyBFcnJvcihgbWluWm9vbSBtdXN0IGJlIGJldHdlZW4gJHtkZWZhdWx0TWluWm9vbX0gYW5kIHRoZSBjdXJyZW50IG1heFpvb20sIGluY2x1c2l2ZWApO1xuICAgIH1cblxuICAgIC8qKlxuICAgICAqIFJldHVybnMgdGhlIG1hcCdzIG1pbmltdW0gYWxsb3dhYmxlIHpvb20gbGV2ZWwuXG4gICAgICpcbiAgICAgKiBAcmV0dXJucyB7bnVtYmVyfSBtaW5ab29tXG4gICAgICovXG4gICAgZ2V0TWluWm9vbSgpIHsgcmV0dXJuIHRoaXMudHJhbnNmb3JtLm1pblpvb207IH1cblxuICAgIC8qKlxuICAgICAqIFNldHMgb3IgY2xlYXJzIHRoZSBtYXAncyBtYXhpbXVtIHpvb20gbGV2ZWwuXG4gICAgICogSWYgdGhlIG1hcCdzIGN1cnJlbnQgem9vbSBsZXZlbCBpcyBoaWdoZXIgdGhhbiB0aGUgbmV3IG1heGltdW0sXG4gICAgICogdGhlIG1hcCB3aWxsIHpvb20gdG8gdGhlIG5ldyBtYXhpbXVtLlxuICAgICAqXG4gICAgICogQHBhcmFtIHtudW1iZXIgfCBudWxsIHwgdW5kZWZpbmVkfSBtYXhab29tIFRoZSBtYXhpbXVtIHpvb20gbGV2ZWwgdG8gc2V0LlxuICAgICAqICAgSWYgYG51bGxgIG9yIGB1bmRlZmluZWRgIGlzIHByb3ZpZGVkLCB0aGUgZnVuY3Rpb24gcmVtb3ZlcyB0aGUgY3VycmVudCBtYXhpbXVtIHpvb20gKHNldHMgaXQgdG8gMjIpLlxuICAgICAqIEByZXR1cm5zIHtNYXB9IGB0aGlzYFxuICAgICAqL1xuICAgIHNldE1heFpvb20obWF4Wm9vbT86ID9udW1iZXIpIHtcblxuICAgICAgICBtYXhab29tID0gbWF4Wm9vbSA9PT0gbnVsbCB8fCBtYXhab29tID09PSB1bmRlZmluZWQgPyBkZWZhdWx0TWF4Wm9vbSA6IG1heFpvb207XG5cbiAgICAgICAgaWYgKG1heFpvb20gPj0gdGhpcy50cmFuc2Zvcm0ubWluWm9vbSkge1xuICAgICAgICAgICAgdGhpcy50cmFuc2Zvcm0ubWF4Wm9vbSA9IG1heFpvb207XG4gICAgICAgICAgICB0aGlzLl91cGRhdGUoKTtcblxuICAgICAgICAgICAgaWYgKHRoaXMuZ2V0Wm9vbSgpID4gbWF4Wm9vbSkgdGhpcy5zZXRab29tKG1heFpvb20pO1xuXG4gICAgICAgICAgICByZXR1cm4gdGhpcztcblxuICAgICAgICB9IGVsc2UgdGhyb3cgbmV3IEVycm9yKGBtYXhab29tIG11c3QgYmUgZ3JlYXRlciB0aGFuIHRoZSBjdXJyZW50IG1pblpvb21gKTtcbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBSZXR1cm5zIHRoZSBzdGF0ZSBvZiByZW5kZXJXb3JsZENvcGllcy5cbiAgICAgKlxuICAgICAqIEByZXR1cm5zIHtib29sZWFufSByZW5kZXJXb3JsZENvcGllc1xuICAgICAqL1xuICAgIGdldFJlbmRlcldvcmxkQ29waWVzKCkgeyByZXR1cm4gdGhpcy50cmFuc2Zvcm0ucmVuZGVyV29ybGRDb3BpZXM7IH1cblxuICAgIC8qKlxuICAgICAqIFNldHMgdGhlIHN0YXRlIG9mIHJlbmRlcldvcmxkQ29waWVzLlxuICAgICAqXG4gICAgICogQHBhcmFtIHtib29sZWFufSByZW5kZXJXb3JsZENvcGllcyBJZiBgdHJ1ZWAsIG11bHRpcGxlIGNvcGllcyBvZiB0aGUgd29ybGQgd2lsbCBiZSByZW5kZXJlZCwgd2hlbiB6b29tZWQgb3V0LiBgdW5kZWZpbmVkYCBpcyB0cmVhdGVkIGFzIGB0cnVlYCwgYG51bGxgIGlzIHRyZWF0ZWQgYXMgYGZhbHNlYC5cbiAgICAgKiBAcmV0dXJucyB7TWFwfSBgdGhpc2BcbiAgICAgKi9cbiAgICBzZXRSZW5kZXJXb3JsZENvcGllcyhyZW5kZXJXb3JsZENvcGllcz86ID9ib29sZWFuKSB7XG4gICAgICAgIHRoaXMudHJhbnNmb3JtLnJlbmRlcldvcmxkQ29waWVzID0gcmVuZGVyV29ybGRDb3BpZXM7XG4gICAgICAgIHJldHVybiB0aGlzLl91cGRhdGUoKTtcbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBSZXR1cm5zIHRoZSBtYXAncyBtYXhpbXVtIGFsbG93YWJsZSB6b29tIGxldmVsLlxuICAgICAqXG4gICAgICogQHJldHVybnMge251bWJlcn0gbWF4Wm9vbVxuICAgICAqL1xuICAgIGdldE1heFpvb20oKSB7IHJldHVybiB0aGlzLnRyYW5zZm9ybS5tYXhab29tOyB9XG5cbiAgICAvKipcbiAgICAgKiBSZXR1cm5zIGEge0BsaW5rIFBvaW50fSByZXByZXNlbnRpbmcgcGl4ZWwgY29vcmRpbmF0ZXMsIHJlbGF0aXZlIHRvIHRoZSBtYXAncyBgY29udGFpbmVyYCxcbiAgICAgKiB0aGF0IGNvcnJlc3BvbmQgdG8gdGhlIHNwZWNpZmllZCBnZW9ncmFwaGljYWwgbG9jYXRpb24uXG4gICAgICpcbiAgICAgKiBAcGFyYW0ge0xuZ0xhdExpa2V9IGxuZ2xhdCBUaGUgZ2VvZ3JhcGhpY2FsIGxvY2F0aW9uIHRvIHByb2plY3QuXG4gICAgICogQHJldHVybnMge1BvaW50fSBUaGUge0BsaW5rIFBvaW50fSBjb3JyZXNwb25kaW5nIHRvIGBsbmdsYXRgLCByZWxhdGl2ZSB0byB0aGUgbWFwJ3MgYGNvbnRhaW5lcmAuXG4gICAgICovXG4gICAgcHJvamVjdChsbmdsYXQ6IExuZ0xhdExpa2UpIHtcbiAgICAgICAgcmV0dXJuIHRoaXMudHJhbnNmb3JtLmxvY2F0aW9uUG9pbnQoTG5nTGF0LmNvbnZlcnQobG5nbGF0KSk7XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogUmV0dXJucyBhIHtAbGluayBMbmdMYXR9IHJlcHJlc2VudGluZyBnZW9ncmFwaGljYWwgY29vcmRpbmF0ZXMgdGhhdCBjb3JyZXNwb25kXG4gICAgICogdG8gdGhlIHNwZWNpZmllZCBwaXhlbCBjb29yZGluYXRlcy5cbiAgICAgKlxuICAgICAqIEBwYXJhbSB7UG9pbnRMaWtlfSBwb2ludCBUaGUgcGl4ZWwgY29vcmRpbmF0ZXMgdG8gdW5wcm9qZWN0LlxuICAgICAqIEByZXR1cm5zIHtMbmdMYXR9IFRoZSB7QGxpbmsgTG5nTGF0fSBjb3JyZXNwb25kaW5nIHRvIGBwb2ludGAuXG4gICAgICogQHNlZSBbU2hvdyBwb2x5Z29uIGluZm9ybWF0aW9uIG9uIGNsaWNrXShodHRwczovL3d3dy5tYXBib3guY29tL21hcGJveC1nbC1qcy9leGFtcGxlL3BvbHlnb24tcG9wdXAtb24tY2xpY2svKVxuICAgICAqL1xuICAgIHVucHJvamVjdChwb2ludDogUG9pbnRMaWtlKSB7XG4gICAgICAgIHJldHVybiB0aGlzLnRyYW5zZm9ybS5wb2ludExvY2F0aW9uKFBvaW50LmNvbnZlcnQocG9pbnQpKTtcbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBSZXR1cm5zIHRydWUgaWYgdGhlIG1hcCBpcyBwYW5uaW5nLCB6b29taW5nLCByb3RhdGluZywgb3IgcGl0Y2hpbmcgZHVlIHRvIGEgY2FtZXJhIGFuaW1hdGlvbiBvciB1c2VyIGdlc3R1cmUuXG4gICAgICovXG4gICAgaXNNb3ZpbmcoKTogYm9vbGVhbiB7XG4gICAgICAgIHJldHVybiB0aGlzLl9tb3ZpbmcgfHxcbiAgICAgICAgICAgIHRoaXMuZHJhZ1Bhbi5pc0FjdGl2ZSgpIHx8XG4gICAgICAgICAgICB0aGlzLmRyYWdSb3RhdGUuaXNBY3RpdmUoKSB8fFxuICAgICAgICAgICAgdGhpcy5zY3JvbGxab29tLmlzQWN0aXZlKCk7XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogUmV0dXJucyB0cnVlIGlmIHRoZSBtYXAgaXMgem9vbWluZyBkdWUgdG8gYSBjYW1lcmEgYW5pbWF0aW9uIG9yIHVzZXIgZ2VzdHVyZS5cbiAgICAgKi9cbiAgICBpc1pvb21pbmcoKTogYm9vbGVhbiB7XG4gICAgICAgIHJldHVybiB0aGlzLl96b29taW5nIHx8XG4gICAgICAgICAgICB0aGlzLnNjcm9sbFpvb20uaXNBY3RpdmUoKTtcbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBSZXR1cm5zIHRydWUgaWYgdGhlIG1hcCBpcyByb3RhdGluZyBkdWUgdG8gYSBjYW1lcmEgYW5pbWF0aW9uIG9yIHVzZXIgZ2VzdHVyZS5cbiAgICAgKi9cbiAgICBpc1JvdGF0aW5nKCk6IGJvb2xlYW4ge1xuICAgICAgICByZXR1cm4gdGhpcy5fcm90YXRpbmcgfHxcbiAgICAgICAgICAgIHRoaXMuZHJhZ1JvdGF0ZS5pc0FjdGl2ZSgpO1xuICAgIH1cblxuICAgIC8qKlxuICAgICAqIEFkZHMgYSBsaXN0ZW5lciBmb3IgZXZlbnRzIG9mIGEgc3BlY2lmaWVkIHR5cGUuXG4gICAgICpcbiAgICAgKiBAbWV0aG9kXG4gICAgICogQG5hbWUgb25cbiAgICAgKiBAbWVtYmVyb2YgTWFwXG4gICAgICogQGluc3RhbmNlXG4gICAgICogQHBhcmFtIHtzdHJpbmd9IHR5cGUgVGhlIGV2ZW50IHR5cGUgdG8gYWRkIGEgbGlzdGVuIGZvci5cbiAgICAgKiBAcGFyYW0ge0Z1bmN0aW9ufSBsaXN0ZW5lciBUaGUgZnVuY3Rpb24gdG8gYmUgY2FsbGVkIHdoZW4gdGhlIGV2ZW50IGlzIGZpcmVkLlxuICAgICAqICAgVGhlIGxpc3RlbmVyIGZ1bmN0aW9uIGlzIGNhbGxlZCB3aXRoIHRoZSBkYXRhIG9iamVjdCBwYXNzZWQgdG8gYGZpcmVgLFxuICAgICAqICAgZXh0ZW5kZWQgd2l0aCBgdGFyZ2V0YCBhbmQgYHR5cGVgIHByb3BlcnRpZXMuXG4gICAgICogQHJldHVybnMge01hcH0gYHRoaXNgXG4gICAgICovXG5cbiAgICAvKipcbiAgICAgKiBBZGRzIGEgbGlzdGVuZXIgZm9yIGV2ZW50cyBvZiBhIHNwZWNpZmllZCB0eXBlIG9jY3VycmluZyBvbiBmZWF0dXJlcyBpbiBhIHNwZWNpZmllZCBzdHlsZSBsYXllci5cbiAgICAgKlxuICAgICAqIEBwYXJhbSB7c3RyaW5nfSB0eXBlIFRoZSBldmVudCB0eXBlIHRvIGxpc3RlbiBmb3I7IG9uZSBvZiBgJ21vdXNlZG93bidgLCBgJ21vdXNldXAnYCwgYCdjbGljaydgLCBgJ2RibGNsaWNrJ2AsXG4gICAgICogYCdtb3VzZW1vdmUnYCwgYCdtb3VzZWVudGVyJ2AsIGAnbW91c2VsZWF2ZSdgLCBgJ21vdXNlb3ZlcidgLCBgJ21vdXNlb3V0J2AsIGAnY29udGV4dG1lbnUnYCwgYCd0b3VjaHN0YXJ0J2AsXG4gICAgICogYCd0b3VjaGVuZCdgLCBvciBgJ3RvdWNoY2FuY2VsJ2AuIGBtb3VzZWVudGVyYCBhbmQgYG1vdXNlb3ZlcmAgZXZlbnRzIGFyZSB0cmlnZ2VyZWQgd2hlbiB0aGUgY3Vyc29yIGVudGVyc1xuICAgICAqIGEgdmlzaWJsZSBwb3J0aW9uIG9mIHRoZSBzcGVjaWZpZWQgbGF5ZXIgZnJvbSBvdXRzaWRlIHRoYXQgbGF5ZXIgb3Igb3V0c2lkZSB0aGUgbWFwIGNhbnZhcy4gYG1vdXNlbGVhdmVgXG4gICAgICogYW5kIGBtb3VzZW91dGAgZXZlbnRzIGFyZSB0cmlnZ2VyZWQgd2hlbiB0aGUgY3Vyc29yIGxlYXZlcyBhIHZpc2libGUgcG9ydGlvbiBvZiB0aGUgc3BlY2lmaWVkIGxheWVyLCBvciBsZWF2ZXNcbiAgICAgKiB0aGUgbWFwIGNhbnZhcy5cbiAgICAgKiBAcGFyYW0ge3N0cmluZ30gbGF5ZXIgVGhlIElEIG9mIGEgc3R5bGUgbGF5ZXIuIE9ubHkgZXZlbnRzIHdob3NlIGxvY2F0aW9uIGlzIHdpdGhpbiBhIHZpc2libGVcbiAgICAgKiBmZWF0dXJlIGluIHRoaXMgbGF5ZXIgd2lsbCB0cmlnZ2VyIHRoZSBsaXN0ZW5lci4gVGhlIGV2ZW50IHdpbGwgaGF2ZSBhIGBmZWF0dXJlc2AgcHJvcGVydHkgY29udGFpbmluZ1xuICAgICAqIGFuIGFycmF5IG9mIHRoZSBtYXRjaGluZyBmZWF0dXJlcy5cbiAgICAgKiBAcGFyYW0ge0Z1bmN0aW9ufSBsaXN0ZW5lciBUaGUgZnVuY3Rpb24gdG8gYmUgY2FsbGVkIHdoZW4gdGhlIGV2ZW50IGlzIGZpcmVkLlxuICAgICAqIEByZXR1cm5zIHtNYXB9IGB0aGlzYFxuICAgICAqL1xuICAgIG9uKHR5cGU6IE1hcEV2ZW50LCBsYXllcjogYW55LCBsaXN0ZW5lcjogYW55KSB7XG4gICAgICAgIGlmIChsaXN0ZW5lciA9PT0gdW5kZWZpbmVkKSB7XG4gICAgICAgICAgICByZXR1cm4gc3VwZXIub24odHlwZSwgbGF5ZXIpO1xuICAgICAgICB9XG5cbiAgICAgICAgY29uc3QgZGVsZWdhdGVkTGlzdGVuZXIgPSAoKCkgPT4ge1xuICAgICAgICAgICAgaWYgKHR5cGUgPT09ICdtb3VzZWVudGVyJyB8fCB0eXBlID09PSAnbW91c2VvdmVyJykge1xuICAgICAgICAgICAgICAgIGxldCBtb3VzZWluID0gZmFsc2U7XG4gICAgICAgICAgICAgICAgY29uc3QgbW91c2Vtb3ZlID0gKGUpID0+IHtcbiAgICAgICAgICAgICAgICAgICAgY29uc3QgZmVhdHVyZXMgPSB0aGlzLmdldExheWVyKGxheWVyKSA/IHRoaXMucXVlcnlSZW5kZXJlZEZlYXR1cmVzKGUucG9pbnQsIHtsYXllcnM6IFtsYXllcl19KSA6IFtdO1xuICAgICAgICAgICAgICAgICAgICBpZiAoIWZlYXR1cmVzLmxlbmd0aCkge1xuICAgICAgICAgICAgICAgICAgICAgICAgbW91c2VpbiA9IGZhbHNlO1xuICAgICAgICAgICAgICAgICAgICB9IGVsc2UgaWYgKCFtb3VzZWluKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICBtb3VzZWluID0gdHJ1ZTtcbiAgICAgICAgICAgICAgICAgICAgICAgIGxpc3RlbmVyLmNhbGwodGhpcywgbmV3IE1hcE1vdXNlRXZlbnQodHlwZSwgdGhpcywgZS5vcmlnaW5hbEV2ZW50LCB7ZmVhdHVyZXN9KSk7XG4gICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICB9O1xuICAgICAgICAgICAgICAgIGNvbnN0IG1vdXNlb3V0ID0gKCkgPT4ge1xuICAgICAgICAgICAgICAgICAgICBtb3VzZWluID0gZmFsc2U7XG4gICAgICAgICAgICAgICAgfTtcbiAgICAgICAgICAgICAgICByZXR1cm4ge2xheWVyLCBsaXN0ZW5lciwgZGVsZWdhdGVzOiB7bW91c2Vtb3ZlLCBtb3VzZW91dH19O1xuICAgICAgICAgICAgfSBlbHNlIGlmICh0eXBlID09PSAnbW91c2VsZWF2ZScgfHwgdHlwZSA9PT0gJ21vdXNlb3V0Jykge1xuICAgICAgICAgICAgICAgIGxldCBtb3VzZWluID0gZmFsc2U7XG4gICAgICAgICAgICAgICAgY29uc3QgbW91c2Vtb3ZlID0gKGUpID0+IHtcbiAgICAgICAgICAgICAgICAgICAgY29uc3QgZmVhdHVyZXMgPSB0aGlzLmdldExheWVyKGxheWVyKSA/IHRoaXMucXVlcnlSZW5kZXJlZEZlYXR1cmVzKGUucG9pbnQsIHtsYXllcnM6IFtsYXllcl19KSA6IFtdO1xuICAgICAgICAgICAgICAgICAgICBpZiAoZmVhdHVyZXMubGVuZ3RoKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICBtb3VzZWluID0gdHJ1ZTtcbiAgICAgICAgICAgICAgICAgICAgfSBlbHNlIGlmIChtb3VzZWluKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICBtb3VzZWluID0gZmFsc2U7XG4gICAgICAgICAgICAgICAgICAgICAgICBsaXN0ZW5lci5jYWxsKHRoaXMsIG5ldyBNYXBNb3VzZUV2ZW50KHR5cGUsIHRoaXMsIGUub3JpZ2luYWxFdmVudCkpO1xuICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgfTtcbiAgICAgICAgICAgICAgICBjb25zdCBtb3VzZW91dCA9IChlKSA9PiB7XG4gICAgICAgICAgICAgICAgICAgIGlmIChtb3VzZWluKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICBtb3VzZWluID0gZmFsc2U7XG4gICAgICAgICAgICAgICAgICAgICAgICBsaXN0ZW5lci5jYWxsKHRoaXMsIG5ldyBNYXBNb3VzZUV2ZW50KHR5cGUsIHRoaXMsIGUub3JpZ2luYWxFdmVudCkpO1xuICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgfTtcbiAgICAgICAgICAgICAgICByZXR1cm4ge2xheWVyLCBsaXN0ZW5lciwgZGVsZWdhdGVzOiB7bW91c2Vtb3ZlLCBtb3VzZW91dH19O1xuICAgICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgICAgICBjb25zdCBkZWxlZ2F0ZSA9IChlKSA9PiB7XG4gICAgICAgICAgICAgICAgICAgIGNvbnN0IGZlYXR1cmVzID0gdGhpcy5nZXRMYXllcihsYXllcikgPyB0aGlzLnF1ZXJ5UmVuZGVyZWRGZWF0dXJlcyhlLnBvaW50LCB7bGF5ZXJzOiBbbGF5ZXJdfSkgOiBbXTtcbiAgICAgICAgICAgICAgICAgICAgaWYgKGZlYXR1cmVzLmxlbmd0aCkge1xuICAgICAgICAgICAgICAgICAgICAgICAgLy8gSGVyZSB3ZSBuZWVkIHRvIG11dGF0ZSB0aGUgb3JpZ2luYWwgZXZlbnQsIHNvIHRoYXQgcHJldmVudERlZmF1bHQgd29ya3MgYXMgZXhwZWN0ZWQuXG4gICAgICAgICAgICAgICAgICAgICAgICBlLmZlYXR1cmVzID0gZmVhdHVyZXM7XG4gICAgICAgICAgICAgICAgICAgICAgICBsaXN0ZW5lci5jYWxsKHRoaXMsIGUpO1xuICAgICAgICAgICAgICAgICAgICAgICAgZGVsZXRlIGUuZmVhdHVyZXM7XG4gICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICB9O1xuICAgICAgICAgICAgICAgIHJldHVybiB7bGF5ZXIsIGxpc3RlbmVyLCBkZWxlZ2F0ZXM6IHtbdHlwZV06IGRlbGVnYXRlfX07XG4gICAgICAgICAgICB9XG4gICAgICAgIH0pKCk7XG5cbiAgICAgICAgdGhpcy5fZGVsZWdhdGVkTGlzdGVuZXJzID0gdGhpcy5fZGVsZWdhdGVkTGlzdGVuZXJzIHx8IHt9O1xuICAgICAgICB0aGlzLl9kZWxlZ2F0ZWRMaXN0ZW5lcnNbdHlwZV0gPSB0aGlzLl9kZWxlZ2F0ZWRMaXN0ZW5lcnNbdHlwZV0gfHwgW107XG4gICAgICAgIHRoaXMuX2RlbGVnYXRlZExpc3RlbmVyc1t0eXBlXS5wdXNoKGRlbGVnYXRlZExpc3RlbmVyKTtcblxuICAgICAgICBmb3IgKGNvbnN0IGV2ZW50IGluIGRlbGVnYXRlZExpc3RlbmVyLmRlbGVnYXRlcykge1xuICAgICAgICAgICAgdGhpcy5vbigoZXZlbnQ6IGFueSksIGRlbGVnYXRlZExpc3RlbmVyLmRlbGVnYXRlc1tldmVudF0pO1xuICAgICAgICB9XG5cbiAgICAgICAgcmV0dXJuIHRoaXM7XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogUmVtb3ZlcyBhbiBldmVudCBsaXN0ZW5lciBwcmV2aW91c2x5IGFkZGVkIHdpdGggYE1hcCNvbmAuXG4gICAgICpcbiAgICAgKiBAbWV0aG9kXG4gICAgICogQG5hbWUgb2ZmXG4gICAgICogQG1lbWJlcm9mIE1hcFxuICAgICAqIEBpbnN0YW5jZVxuICAgICAqIEBwYXJhbSB7c3RyaW5nfSB0eXBlIFRoZSBldmVudCB0eXBlIHByZXZpb3VzbHkgdXNlZCB0byBpbnN0YWxsIHRoZSBsaXN0ZW5lci5cbiAgICAgKiBAcGFyYW0ge0Z1bmN0aW9ufSBsaXN0ZW5lciBUaGUgZnVuY3Rpb24gcHJldmlvdXNseSBpbnN0YWxsZWQgYXMgYSBsaXN0ZW5lci5cbiAgICAgKiBAcmV0dXJucyB7TWFwfSBgdGhpc2BcbiAgICAgKi9cblxuICAgIC8qKlxuICAgICAqIFJlbW92ZXMgYW4gZXZlbnQgbGlzdGVuZXIgZm9yIGxheWVyLXNwZWNpZmljIGV2ZW50cyBwcmV2aW91c2x5IGFkZGVkIHdpdGggYE1hcCNvbmAuXG4gICAgICpcbiAgICAgKiBAcGFyYW0ge3N0cmluZ30gdHlwZSBUaGUgZXZlbnQgdHlwZSBwcmV2aW91c2x5IHVzZWQgdG8gaW5zdGFsbCB0aGUgbGlzdGVuZXIuXG4gICAgICogQHBhcmFtIHtzdHJpbmd9IGxheWVyIFRoZSBsYXllciBJRCBwcmV2aW91c2x5IHVzZWQgdG8gaW5zdGFsbCB0aGUgbGlzdGVuZXIuXG4gICAgICogQHBhcmFtIHtGdW5jdGlvbn0gbGlzdGVuZXIgVGhlIGZ1bmN0aW9uIHByZXZpb3VzbHkgaW5zdGFsbGVkIGFzIGEgbGlzdGVuZXIuXG4gICAgICogQHJldHVybnMge01hcH0gYHRoaXNgXG4gICAgICovXG4gICAgb2ZmKHR5cGU6IE1hcEV2ZW50LCBsYXllcjogYW55LCBsaXN0ZW5lcjogYW55KSB7XG4gICAgICAgIGlmIChsaXN0ZW5lciA9PT0gdW5kZWZpbmVkKSB7XG4gICAgICAgICAgICByZXR1cm4gc3VwZXIub2ZmKHR5cGUsIGxheWVyKTtcbiAgICAgICAgfVxuXG4gICAgICAgIGlmICh0aGlzLl9kZWxlZ2F0ZWRMaXN0ZW5lcnMgJiYgdGhpcy5fZGVsZWdhdGVkTGlzdGVuZXJzW3R5cGVdKSB7XG4gICAgICAgICAgICBjb25zdCBsaXN0ZW5lcnMgPSB0aGlzLl9kZWxlZ2F0ZWRMaXN0ZW5lcnNbdHlwZV07XG4gICAgICAgICAgICBmb3IgKGxldCBpID0gMDsgaSA8IGxpc3RlbmVycy5sZW5ndGg7IGkrKykge1xuICAgICAgICAgICAgICAgIGNvbnN0IGRlbGVnYXRlZExpc3RlbmVyID0gbGlzdGVuZXJzW2ldO1xuICAgICAgICAgICAgICAgIGlmIChkZWxlZ2F0ZWRMaXN0ZW5lci5sYXllciA9PT0gbGF5ZXIgJiYgZGVsZWdhdGVkTGlzdGVuZXIubGlzdGVuZXIgPT09IGxpc3RlbmVyKSB7XG4gICAgICAgICAgICAgICAgICAgIGZvciAoY29uc3QgZXZlbnQgaW4gZGVsZWdhdGVkTGlzdGVuZXIuZGVsZWdhdGVzKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICB0aGlzLm9mZigoZXZlbnQ6IGFueSksIGRlbGVnYXRlZExpc3RlbmVyLmRlbGVnYXRlc1tldmVudF0pO1xuICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgIGxpc3RlbmVycy5zcGxpY2UoaSwgMSk7XG4gICAgICAgICAgICAgICAgICAgIHJldHVybiB0aGlzO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH1cbiAgICAgICAgfVxuXG4gICAgICAgIHJldHVybiB0aGlzO1xuICAgIH1cblxuICAgIC8qKlxuICAgICAqIFJldHVybnMgYW4gYXJyYXkgb2YgW0dlb0pTT05dKGh0dHA6Ly9nZW9qc29uLm9yZy8pXG4gICAgICogW0ZlYXR1cmUgb2JqZWN0c10oaHR0cHM6Ly90b29scy5pZXRmLm9yZy9odG1sL3JmYzc5NDYjc2VjdGlvbi0zLjIpXG4gICAgICogcmVwcmVzZW50aW5nIHZpc2libGUgZmVhdHVyZXMgdGhhdCBzYXRpc2Z5IHRoZSBxdWVyeSBwYXJhbWV0ZXJzLlxuICAgICAqXG4gICAgICogQHBhcmFtIHtQb2ludExpa2V8QXJyYXk8UG9pbnRMaWtlPn0gW2dlb21ldHJ5XSAtIFRoZSBnZW9tZXRyeSBvZiB0aGUgcXVlcnkgcmVnaW9uOlxuICAgICAqIGVpdGhlciBhIHNpbmdsZSBwb2ludCBvciBzb3V0aHdlc3QgYW5kIG5vcnRoZWFzdCBwb2ludHMgZGVzY3JpYmluZyBhIGJvdW5kaW5nIGJveC5cbiAgICAgKiBPbWl0dGluZyB0aGlzIHBhcmFtZXRlciAoaS5lLiBjYWxsaW5nIHtAbGluayBNYXAjcXVlcnlSZW5kZXJlZEZlYXR1cmVzfSB3aXRoIHplcm8gYXJndW1lbnRzLFxuICAgICAqIG9yIHdpdGggb25seSBhIGBvcHRpb25zYCBhcmd1bWVudCkgaXMgZXF1aXZhbGVudCB0byBwYXNzaW5nIGEgYm91bmRpbmcgYm94IGVuY29tcGFzc2luZyB0aGUgZW50aXJlXG4gICAgICogbWFwIHZpZXdwb3J0LlxuICAgICAqIEBwYXJhbSB7T2JqZWN0fSBbb3B0aW9uc11cbiAgICAgKiBAcGFyYW0ge0FycmF5PHN0cmluZz59IFtvcHRpb25zLmxheWVyc10gQW4gYXJyYXkgb2Ygc3R5bGUgbGF5ZXIgSURzIGZvciB0aGUgcXVlcnkgdG8gaW5zcGVjdC5cbiAgICAgKiAgIE9ubHkgZmVhdHVyZXMgd2l0aGluIHRoZXNlIGxheWVycyB3aWxsIGJlIHJldHVybmVkLiBJZiB0aGlzIHBhcmFtZXRlciBpcyB1bmRlZmluZWQsIGFsbCBsYXllcnMgd2lsbCBiZSBjaGVja2VkLlxuICAgICAqIEBwYXJhbSB7QXJyYXl9IFtvcHRpb25zLmZpbHRlcl0gQSBbZmlsdGVyXShodHRwczovL3d3dy5tYXBib3guY29tL21hcGJveC1nbC1qcy9zdHlsZS1zcGVjLyNvdGhlci1maWx0ZXIpXG4gICAgICogICB0byBsaW1pdCBxdWVyeSByZXN1bHRzLlxuICAgICAqXG4gICAgICogQHJldHVybnMge0FycmF5PE9iamVjdD59IEFuIGFycmF5IG9mIFtHZW9KU09OXShodHRwOi8vZ2VvanNvbi5vcmcvKVxuICAgICAqIFtmZWF0dXJlIG9iamVjdHNdKGh0dHBzOi8vdG9vbHMuaWV0Zi5vcmcvaHRtbC9yZmM3OTQ2I3NlY3Rpb24tMy4yKS5cbiAgICAgKlxuICAgICAqIFRoZSBgcHJvcGVydGllc2AgdmFsdWUgb2YgZWFjaCByZXR1cm5lZCBmZWF0dXJlIG9iamVjdCBjb250YWlucyB0aGUgcHJvcGVydGllcyBvZiBpdHMgc291cmNlIGZlYXR1cmUuIEZvciBHZW9KU09OIHNvdXJjZXMsIG9ubHlcbiAgICAgKiBzdHJpbmcgYW5kIG51bWVyaWMgcHJvcGVydHkgdmFsdWVzIGFyZSBzdXBwb3J0ZWQgKGkuZS4gYG51bGxgLCBgQXJyYXlgLCBhbmQgYE9iamVjdGAgdmFsdWVzIGFyZSBub3Qgc3VwcG9ydGVkKS5cbiAgICAgKlxuICAgICAqIEVhY2ggZmVhdHVyZSBpbmNsdWRlcyB0b3AtbGV2ZWwgYGxheWVyYCwgYHNvdXJjZWAsIGFuZCBgc291cmNlTGF5ZXJgIHByb3BlcnRpZXMuIFRoZSBgbGF5ZXJgIHByb3BlcnR5IGlzIGFuIG9iamVjdFxuICAgICAqIHJlcHJlc2VudGluZyB0aGUgc3R5bGUgbGF5ZXIgdG8gIHdoaWNoIHRoZSBmZWF0dXJlIGJlbG9uZ3MuIExheW91dCBhbmQgcGFpbnQgcHJvcGVydGllcyBpbiB0aGlzIG9iamVjdCBjb250YWluIHZhbHVlc1xuICAgICAqIHdoaWNoIGFyZSBmdWxseSBldmFsdWF0ZWQgZm9yIHRoZSBnaXZlbiB6b29tIGxldmVsIGFuZCBmZWF0dXJlLlxuICAgICAqXG4gICAgICogRmVhdHVyZXMgZnJvbSBsYXllcnMgd2hvc2UgYHZpc2liaWxpdHlgIHByb3BlcnR5IGlzIGBcIm5vbmVcImAsIG9yIGZyb20gbGF5ZXJzIHdob3NlIHpvb20gcmFuZ2UgZXhjbHVkZXMgdGhlXG4gICAgICogY3VycmVudCB6b29tIGxldmVsIGFyZSBub3QgaW5jbHVkZWQuIFN5bWJvbCBmZWF0dXJlcyB0aGF0IGhhdmUgYmVlbiBoaWRkZW4gZHVlIHRvIHRleHQgb3IgaWNvbiBjb2xsaXNpb24gYXJlXG4gICAgICogbm90IGluY2x1ZGVkLiBGZWF0dXJlcyBmcm9tIGFsbCBvdGhlciBsYXllcnMgYXJlIGluY2x1ZGVkLCBpbmNsdWRpbmcgZmVhdHVyZXMgdGhhdCBtYXkgaGF2ZSBubyB2aXNpYmxlXG4gICAgICogY29udHJpYnV0aW9uIHRvIHRoZSByZW5kZXJlZCByZXN1bHQ7IGZvciBleGFtcGxlLCBiZWNhdXNlIHRoZSBsYXllcidzIG9wYWNpdHkgb3IgY29sb3IgYWxwaGEgY29tcG9uZW50IGlzIHNldCB0b1xuICAgICAqIDAuXG4gICAgICpcbiAgICAgKiBUaGUgdG9wbW9zdCByZW5kZXJlZCBmZWF0dXJlIGFwcGVhcnMgZmlyc3QgaW4gdGhlIHJldHVybmVkIGFycmF5LCBhbmQgc3Vic2VxdWVudCBmZWF0dXJlcyBhcmUgc29ydGVkIGJ5XG4gICAgICogZGVzY2VuZGluZyB6LW9yZGVyLiBGZWF0dXJlcyB0aGF0IGFyZSByZW5kZXJlZCBtdWx0aXBsZSB0aW1lcyAoZHVlIHRvIHdyYXBwaW5nIGFjcm9zcyB0aGUgYW50aW1lcmlkaWFuIGF0IGxvd1xuICAgICAqIHpvb20gbGV2ZWxzKSBhcmUgcmV0dXJuZWQgb25seSBvbmNlICh0aG91Z2ggc3ViamVjdCB0byB0aGUgZm9sbG93aW5nIGNhdmVhdCkuXG4gICAgICpcbiAgICAgKiBCZWNhdXNlIGZlYXR1cmVzIGNvbWUgZnJvbSB0aWxlZCB2ZWN0b3IgZGF0YSBvciBHZW9KU09OIGRhdGEgdGhhdCBpcyBjb252ZXJ0ZWQgdG8gdGlsZXMgaW50ZXJuYWxseSwgZmVhdHVyZVxuICAgICAqIGdlb21ldHJpZXMgbWF5IGJlIHNwbGl0IG9yIGR1cGxpY2F0ZWQgYWNyb3NzIHRpbGUgYm91bmRhcmllcyBhbmQsIGFzIGEgcmVzdWx0LCBmZWF0dXJlcyBtYXkgYXBwZWFyIG11bHRpcGxlXG4gICAgICogdGltZXMgaW4gcXVlcnkgcmVzdWx0cy4gRm9yIGV4YW1wbGUsIHN1cHBvc2UgdGhlcmUgaXMgYSBoaWdod2F5IHJ1bm5pbmcgdGhyb3VnaCB0aGUgYm91bmRpbmcgcmVjdGFuZ2xlIG9mIGEgcXVlcnkuXG4gICAgICogVGhlIHJlc3VsdHMgb2YgdGhlIHF1ZXJ5IHdpbGwgYmUgdGhvc2UgcGFydHMgb2YgdGhlIGhpZ2h3YXkgdGhhdCBsaWUgd2l0aGluIHRoZSBtYXAgdGlsZXMgY292ZXJpbmcgdGhlIGJvdW5kaW5nXG4gICAgICogcmVjdGFuZ2xlLCBldmVuIGlmIHRoZSBoaWdod2F5IGV4dGVuZHMgaW50byBvdGhlciB0aWxlcywgYW5kIHRoZSBwb3J0aW9uIG9mIHRoZSBoaWdod2F5IHdpdGhpbiBlYWNoIG1hcCB0aWxlXG4gICAgICogd2lsbCBiZSByZXR1cm5lZCBhcyBhIHNlcGFyYXRlIGZlYXR1cmUuIFNpbWlsYXJseSwgYSBwb2ludCBmZWF0dXJlIG5lYXIgYSB0aWxlIGJvdW5kYXJ5IG1heSBhcHBlYXIgaW4gbXVsdGlwbGVcbiAgICAgKiB0aWxlcyBkdWUgdG8gdGlsZSBidWZmZXJpbmcuXG4gICAgICpcbiAgICAgKiBAZXhhbXBsZVxuICAgICAqIC8vIEZpbmQgYWxsIGZlYXR1cmVzIGF0IGEgcG9pbnRcbiAgICAgKiB2YXIgZmVhdHVyZXMgPSBtYXAucXVlcnlSZW5kZXJlZEZlYXR1cmVzKFxuICAgICAqICAgWzIwLCAzNV0sXG4gICAgICogICB7IGxheWVyczogWydteS1sYXllci1uYW1lJ10gfVxuICAgICAqICk7XG4gICAgICpcbiAgICAgKiBAZXhhbXBsZVxuICAgICAqIC8vIEZpbmQgYWxsIGZlYXR1cmVzIHdpdGhpbiBhIHN0YXRpYyBib3VuZGluZyBib3hcbiAgICAgKiB2YXIgZmVhdHVyZXMgPSBtYXAucXVlcnlSZW5kZXJlZEZlYXR1cmVzKFxuICAgICAqICAgW1sxMCwgMjBdLCBbMzAsIDUwXV0sXG4gICAgICogICB7IGxheWVyczogWydteS1sYXllci1uYW1lJ10gfVxuICAgICAqICk7XG4gICAgICpcbiAgICAgKiBAZXhhbXBsZVxuICAgICAqIC8vIEZpbmQgYWxsIGZlYXR1cmVzIHdpdGhpbiBhIGJvdW5kaW5nIGJveCBhcm91bmQgYSBwb2ludFxuICAgICAqIHZhciB3aWR0aCA9IDEwO1xuICAgICAqIHZhciBoZWlnaHQgPSAyMDtcbiAgICAgKiB2YXIgZmVhdHVyZXMgPSBtYXAucXVlcnlSZW5kZXJlZEZlYXR1cmVzKFtcbiAgICAgKiAgIFtwb2ludC54IC0gd2lkdGggLyAyLCBwb2ludC55IC0gaGVpZ2h0IC8gMl0sXG4gICAgICogICBbcG9pbnQueCArIHdpZHRoIC8gMiwgcG9pbnQueSArIGhlaWdodCAvIDJdXG4gICAgICogXSwgeyBsYXllcnM6IFsnbXktbGF5ZXItbmFtZSddIH0pO1xuICAgICAqXG4gICAgICogQGV4YW1wbGVcbiAgICAgKiAvLyBRdWVyeSBhbGwgcmVuZGVyZWQgZmVhdHVyZXMgZnJvbSBhIHNpbmdsZSBsYXllclxuICAgICAqIHZhciBmZWF0dXJlcyA9IG1hcC5xdWVyeVJlbmRlcmVkRmVhdHVyZXMoeyBsYXllcnM6IFsnbXktbGF5ZXItbmFtZSddIH0pO1xuICAgICAqIEBzZWUgW0dldCBmZWF0dXJlcyB1bmRlciB0aGUgbW91c2UgcG9pbnRlcl0oaHR0cHM6Ly93d3cubWFwYm94LmNvbS9tYXBib3gtZ2wtanMvZXhhbXBsZS9xdWVyeXJlbmRlcmVkZmVhdHVyZXMvKVxuICAgICAqIEBzZWUgW0hpZ2hsaWdodCBmZWF0dXJlcyB3aXRoaW4gYSBib3VuZGluZyBib3hdKGh0dHBzOi8vd3d3Lm1hcGJveC5jb20vbWFwYm94LWdsLWpzL2V4YW1wbGUvdXNpbmctYm94LXF1ZXJ5cmVuZGVyZWRmZWF0dXJlcy8pXG4gICAgICogQHNlZSBbQ2VudGVyIHRoZSBtYXAgb24gYSBjbGlja2VkIHN5bWJvbF0oaHR0cHM6Ly93d3cubWFwYm94LmNvbS9tYXBib3gtZ2wtanMvZXhhbXBsZS9jZW50ZXItb24tc3ltYm9sLylcbiAgICAgKi9cbiAgICBxdWVyeVJlbmRlcmVkRmVhdHVyZXMoZ2VvbWV0cnk/OiBQb2ludExpa2UgfCBbUG9pbnRMaWtlLCBQb2ludExpa2VdLCBvcHRpb25zPzogT2JqZWN0KSB7XG4gICAgICAgIC8vIFRoZSBmaXJzdCBwYXJhbWV0ZXIgY2FuIGJlIG9taXR0ZWQgZW50aXJlbHksIG1ha2luZyB0aGlzIGVmZmVjdGl2ZWx5IGFuIG92ZXJsb2FkZWQgbWV0aG9kXG4gICAgICAgIC8vIHdpdGggdHdvIHNpZ25hdHVyZXM6XG4gICAgICAgIC8vXG4gICAgICAgIC8vICAgICBxdWVyeVJlbmRlcmVkRmVhdHVyZXMoZ2VvbWV0cnk6IFBvaW50TGlrZSB8IFtQb2ludExpa2UsIFBvaW50TGlrZV0sIG9wdGlvbnM/OiBPYmplY3QpXG4gICAgICAgIC8vICAgICBxdWVyeVJlbmRlcmVkRmVhdHVyZXMob3B0aW9ucz86IE9iamVjdClcbiAgICAgICAgLy9cbiAgICAgICAgLy8gVGhlcmUgbm8gd2F5IHRvIGV4cHJlc3MgdGhhdCBpbiBhIHdheSB0aGF0J3MgY29tcGF0aWJsZSB3aXRoIGJvdGggZmxvdyBhbmQgZG9jdW1lbnRhdGlvbi5qcy5cbiAgICAgICAgLy8gUmVsYXRlZDogaHR0cHM6Ly9naXRodWIuY29tL2ZhY2Vib29rL2Zsb3cvaXNzdWVzLzE1NTZcblxuICAgICAgICBpZiAoIXRoaXMuc3R5bGUpIHtcbiAgICAgICAgICAgIHJldHVybiBbXTtcbiAgICAgICAgfVxuXG4gICAgICAgIGlmIChvcHRpb25zID09PSB1bmRlZmluZWQgJiYgZ2VvbWV0cnkgIT09IHVuZGVmaW5lZCAmJiAhKGdlb21ldHJ5IGluc3RhbmNlb2YgUG9pbnQpICYmICFBcnJheS5pc0FycmF5KGdlb21ldHJ5KSkge1xuICAgICAgICAgICAgb3B0aW9ucyA9IChnZW9tZXRyeTogT2JqZWN0KTtcbiAgICAgICAgICAgIGdlb21ldHJ5ID0gdW5kZWZpbmVkO1xuICAgICAgICB9XG5cbiAgICAgICAgb3B0aW9ucyA9IG9wdGlvbnMgfHwge307XG4gICAgICAgIGdlb21ldHJ5ID0gZ2VvbWV0cnkgfHwgW1swLCAwXSwgW3RoaXMudHJhbnNmb3JtLndpZHRoLCB0aGlzLnRyYW5zZm9ybS5oZWlnaHRdXTtcblxuICAgICAgICBsZXQgcXVlcnlHZW9tZXRyeTtcbiAgICAgICAgaWYgKGdlb21ldHJ5IGluc3RhbmNlb2YgUG9pbnQgfHwgdHlwZW9mIGdlb21ldHJ5WzBdID09PSAnbnVtYmVyJykge1xuICAgICAgICAgICAgcXVlcnlHZW9tZXRyeSA9IFtQb2ludC5jb252ZXJ0KGdlb21ldHJ5KV07XG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICBjb25zdCB0bCA9IFBvaW50LmNvbnZlcnQoZ2VvbWV0cnlbMF0pO1xuICAgICAgICAgICAgY29uc3QgYnIgPSBQb2ludC5jb252ZXJ0KGdlb21ldHJ5WzFdKTtcbiAgICAgICAgICAgIHF1ZXJ5R2VvbWV0cnkgPSBbdGwsIG5ldyBQb2ludChici54LCB0bC55KSwgYnIsIG5ldyBQb2ludCh0bC54LCBici55KSwgdGxdO1xuICAgICAgICB9XG5cbiAgICAgICAgcmV0dXJuIHRoaXMuc3R5bGUucXVlcnlSZW5kZXJlZEZlYXR1cmVzKHF1ZXJ5R2VvbWV0cnksIG9wdGlvbnMsIHRoaXMudHJhbnNmb3JtKTtcbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBSZXR1cm5zIGFuIGFycmF5IG9mIFtHZW9KU09OXShodHRwOi8vZ2VvanNvbi5vcmcvKVxuICAgICAqIFtGZWF0dXJlIG9iamVjdHNdKGh0dHBzOi8vdG9vbHMuaWV0Zi5vcmcvaHRtbC9yZmM3OTQ2I3NlY3Rpb24tMy4yKVxuICAgICAqIHJlcHJlc2VudGluZyBmZWF0dXJlcyB3aXRoaW4gdGhlIHNwZWNpZmllZCB2ZWN0b3IgdGlsZSBvciBHZW9KU09OIHNvdXJjZSB0aGF0IHNhdGlzZnkgdGhlIHF1ZXJ5IHBhcmFtZXRlcnMuXG4gICAgICpcbiAgICAgKiBAcGFyYW0ge3N0cmluZ30gc291cmNlSUQgVGhlIElEIG9mIHRoZSB2ZWN0b3IgdGlsZSBvciBHZW9KU09OIHNvdXJjZSB0byBxdWVyeS5cbiAgICAgKiBAcGFyYW0ge09iamVjdH0gW3BhcmFtZXRlcnNdXG4gICAgICogQHBhcmFtIHtzdHJpbmd9IFtwYXJhbWV0ZXJzLnNvdXJjZUxheWVyXSBUaGUgbmFtZSBvZiB0aGUgdmVjdG9yIHRpbGUgbGF5ZXIgdG8gcXVlcnkuICpGb3IgdmVjdG9yIHRpbGVcbiAgICAgKiAgIHNvdXJjZXMsIHRoaXMgcGFyYW1ldGVyIGlzIHJlcXVpcmVkLiogRm9yIEdlb0pTT04gc291cmNlcywgaXQgaXMgaWdub3JlZC5cbiAgICAgKiBAcGFyYW0ge0FycmF5fSBbcGFyYW1ldGVycy5maWx0ZXJdIEEgW2ZpbHRlcl0oaHR0cHM6Ly93d3cubWFwYm94LmNvbS9tYXBib3gtZ2wtanMvc3R5bGUtc3BlYy8jb3RoZXItZmlsdGVyKVxuICAgICAqICAgdG8gbGltaXQgcXVlcnkgcmVzdWx0cy5cbiAgICAgKlxuICAgICAqIEByZXR1cm5zIHtBcnJheTxPYmplY3Q+fSBBbiBhcnJheSBvZiBbR2VvSlNPTl0oaHR0cDovL2dlb2pzb24ub3JnLylcbiAgICAgKiBbRmVhdHVyZSBvYmplY3RzXShodHRwczovL3Rvb2xzLmlldGYub3JnL2h0bWwvcmZjNzk0NiNzZWN0aW9uLTMuMikuXG4gICAgICpcbiAgICAgKiBJbiBjb250cmFzdCB0byB7QGxpbmsgTWFwI3F1ZXJ5UmVuZGVyZWRGZWF0dXJlc30sIHRoaXMgZnVuY3Rpb25cbiAgICAgKiByZXR1cm5zIGFsbCBmZWF0dXJlcyBtYXRjaGluZyB0aGUgcXVlcnkgcGFyYW1ldGVycyxcbiAgICAgKiB3aGV0aGVyIG9yIG5vdCB0aGV5IGFyZSByZW5kZXJlZCBieSB0aGUgY3VycmVudCBzdHlsZSAoaS5lLiB2aXNpYmxlKS4gVGhlIGRvbWFpbiBvZiB0aGUgcXVlcnkgaW5jbHVkZXMgYWxsIGN1cnJlbnRseS1sb2FkZWRcbiAgICAgKiB2ZWN0b3IgdGlsZXMgYW5kIEdlb0pTT04gc291cmNlIHRpbGVzOiB0aGlzIGZ1bmN0aW9uIGRvZXMgbm90IGNoZWNrIHRpbGVzIG91dHNpZGUgdGhlIGN1cnJlbnRseVxuICAgICAqIHZpc2libGUgdmlld3BvcnQuXG4gICAgICpcbiAgICAgKiBCZWNhdXNlIGZlYXR1cmVzIGNvbWUgZnJvbSB0aWxlZCB2ZWN0b3IgZGF0YSBvciBHZW9KU09OIGRhdGEgdGhhdCBpcyBjb252ZXJ0ZWQgdG8gdGlsZXMgaW50ZXJuYWxseSwgZmVhdHVyZVxuICAgICAqIGdlb21ldHJpZXMgbWF5IGJlIHNwbGl0IG9yIGR1cGxpY2F0ZWQgYWNyb3NzIHRpbGUgYm91bmRhcmllcyBhbmQsIGFzIGEgcmVzdWx0LCBmZWF0dXJlcyBtYXkgYXBwZWFyIG11bHRpcGxlXG4gICAgICogdGltZXMgaW4gcXVlcnkgcmVzdWx0cy4gRm9yIGV4YW1wbGUsIHN1cHBvc2UgdGhlcmUgaXMgYSBoaWdod2F5IHJ1bm5pbmcgdGhyb3VnaCB0aGUgYm91bmRpbmcgcmVjdGFuZ2xlIG9mIGEgcXVlcnkuXG4gICAgICogVGhlIHJlc3VsdHMgb2YgdGhlIHF1ZXJ5IHdpbGwgYmUgdGhvc2UgcGFydHMgb2YgdGhlIGhpZ2h3YXkgdGhhdCBsaWUgd2l0aGluIHRoZSBtYXAgdGlsZXMgY292ZXJpbmcgdGhlIGJvdW5kaW5nXG4gICAgICogcmVjdGFuZ2xlLCBldmVuIGlmIHRoZSBoaWdod2F5IGV4dGVuZHMgaW50byBvdGhlciB0aWxlcywgYW5kIHRoZSBwb3J0aW9uIG9mIHRoZSBoaWdod2F5IHdpdGhpbiBlYWNoIG1hcCB0aWxlXG4gICAgICogd2lsbCBiZSByZXR1cm5lZCBhcyBhIHNlcGFyYXRlIGZlYXR1cmUuIFNpbWlsYXJseSwgYSBwb2ludCBmZWF0dXJlIG5lYXIgYSB0aWxlIGJvdW5kYXJ5IG1heSBhcHBlYXIgaW4gbXVsdGlwbGVcbiAgICAgKiB0aWxlcyBkdWUgdG8gdGlsZSBidWZmZXJpbmcuXG4gICAgICogQHNlZSBbRmlsdGVyIGZlYXR1cmVzIHdpdGhpbiBtYXAgdmlld10oaHR0cHM6Ly93d3cubWFwYm94LmNvbS9tYXBib3gtZ2wtanMvZXhhbXBsZS9maWx0ZXItZmVhdHVyZXMtd2l0aGluLW1hcC12aWV3LylcbiAgICAgKiBAc2VlIFtIaWdobGlnaHQgZmVhdHVyZXMgY29udGFpbmluZyBzaW1pbGFyIGRhdGFdKGh0dHBzOi8vd3d3Lm1hcGJveC5jb20vbWFwYm94LWdsLWpzL2V4YW1wbGUvcXVlcnktc2ltaWxhci1mZWF0dXJlcy8pXG4gICAgICovXG4gICAgcXVlcnlTb3VyY2VGZWF0dXJlcyhzb3VyY2VJRDogc3RyaW5nLCBwYXJhbWV0ZXJzOiA/e3NvdXJjZUxheWVyOiA/c3RyaW5nLCBmaWx0ZXI6ID9BcnJheTxhbnk+fSkge1xuICAgICAgICByZXR1cm4gdGhpcy5zdHlsZS5xdWVyeVNvdXJjZUZlYXR1cmVzKHNvdXJjZUlELCBwYXJhbWV0ZXJzKTtcbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBVcGRhdGVzIHRoZSBtYXAncyBNYXBib3ggc3R5bGUgb2JqZWN0IHdpdGggYSBuZXcgdmFsdWUuICBJZiB0aGUgZ2l2ZW5cbiAgICAgKiB2YWx1ZSBpcyBzdHlsZSBKU09OIG9iamVjdCwgY29tcGFyZXMgaXQgYWdhaW5zdCB0aGUgdGhlIG1hcCdzIGN1cnJlbnRcbiAgICAgKiBzdGF0ZSBhbmQgcGVyZm9ybSBvbmx5IHRoZSBjaGFuZ2VzIG5lY2Vzc2FyeSB0byBtYWtlIHRoZSBtYXAgc3R5bGUgbWF0Y2hcbiAgICAgKiB0aGUgZGVzaXJlZCBzdGF0ZS5cbiAgICAgKlxuICAgICAqIEBwYXJhbSBzdHlsZSBBIEpTT04gb2JqZWN0IGNvbmZvcm1pbmcgdG8gdGhlIHNjaGVtYSBkZXNjcmliZWQgaW4gdGhlXG4gICAgICogICBbTWFwYm94IFN0eWxlIFNwZWNpZmljYXRpb25dKGh0dHBzOi8vbWFwYm94LmNvbS9tYXBib3gtZ2wtc3R5bGUtc3BlYy8pLCBvciBhIFVSTCB0byBzdWNoIEpTT04uXG4gICAgICogQHBhcmFtIHtPYmplY3R9IFtvcHRpb25zXVxuICAgICAqIEBwYXJhbSB7Ym9vbGVhbn0gW29wdGlvbnMuZGlmZj10cnVlXSBJZiBmYWxzZSwgZm9yY2UgYSAnZnVsbCcgdXBkYXRlLCByZW1vdmluZyB0aGUgY3VycmVudCBzdHlsZVxuICAgICAqICAgYW5kIGFkZGluZyBidWlsZGluZyB0aGUgZ2l2ZW4gb25lIGluc3RlYWQgb2YgYXR0ZW1wdGluZyBhIGRpZmYtYmFzZWQgdXBkYXRlLlxuICAgICAqIEBwYXJhbSB7c3RyaW5nfSBbb3B0aW9ucy5sb2NhbElkZW9ncmFwaEZvbnRGYW1pbHk9bnVsbF0gSWYgbm9uLW51bGwsIGRlZmluZXMgYSBjc3MgZm9udC1mYW1pbHlcbiAgICAgKiAgIGZvciBsb2NhbGx5IG92ZXJyaWRpbmcgZ2VuZXJhdGlvbiBvZiBnbHlwaHMgaW4gdGhlICdDSksgVW5pZmllZCBJZGVvZ3JhcGhzJyBhbmQgJ0hhbmd1bCBTeWxsYWJsZXMnXG4gICAgICogICByYW5nZXMuIEZvcmNlcyBhIGZ1bGwgdXBkYXRlLlxuICAgICAqIEByZXR1cm5zIHtNYXB9IGB0aGlzYFxuICAgICAqIEBzZWUgW0NoYW5nZSBhIG1hcCdzIHN0eWxlXShodHRwczovL3d3dy5tYXBib3guY29tL21hcGJveC1nbC1qcy9leGFtcGxlL3NldHN0eWxlLylcbiAgICAgKi9cbiAgICBzZXRTdHlsZShzdHlsZTogU3R5bGVTcGVjaWZpY2F0aW9uIHwgc3RyaW5nIHwgbnVsbCwgb3B0aW9ucz86IHtkaWZmPzogYm9vbGVhbn0gJiBTdHlsZU9wdGlvbnMpIHtcbiAgICAgICAgY29uc3Qgc2hvdWxkVHJ5RGlmZiA9ICghb3B0aW9ucyB8fCAob3B0aW9ucy5kaWZmICE9PSBmYWxzZSAmJiAhb3B0aW9ucy5sb2NhbElkZW9ncmFwaEZvbnRGYW1pbHkpKSAmJiB0aGlzLnN0eWxlO1xuICAgICAgICBpZiAoc2hvdWxkVHJ5RGlmZiAmJiBzdHlsZSAmJiB0eXBlb2Ygc3R5bGUgPT09ICdvYmplY3QnKSB7XG4gICAgICAgICAgICB0cnkge1xuICAgICAgICAgICAgICAgIGlmICh0aGlzLnN0eWxlLnNldFN0YXRlKHN0eWxlKSkge1xuICAgICAgICAgICAgICAgICAgICB0aGlzLl91cGRhdGUodHJ1ZSk7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIHJldHVybiB0aGlzO1xuICAgICAgICAgICAgfSBjYXRjaCAoZSkge1xuICAgICAgICAgICAgICAgIHdhcm5PbmNlKFxuICAgICAgICAgICAgICAgICAgICBgVW5hYmxlIHRvIHBlcmZvcm0gc3R5bGUgZGlmZjogJHtlLm1lc3NhZ2UgfHwgZS5lcnJvciB8fCBlfS4gIFJlYnVpbGRpbmcgdGhlIHN0eWxlIGZyb20gc2NyYXRjaC5gXG4gICAgICAgICAgICAgICAgKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfVxuXG4gICAgICAgIGlmICh0aGlzLnN0eWxlKSB7XG4gICAgICAgICAgICB0aGlzLnN0eWxlLnNldEV2ZW50ZWRQYXJlbnQobnVsbCk7XG4gICAgICAgICAgICB0aGlzLnN0eWxlLl9yZW1vdmUoKTtcbiAgICAgICAgfVxuXG4gICAgICAgIGlmICghc3R5bGUpIHtcbiAgICAgICAgICAgIGRlbGV0ZSB0aGlzLnN0eWxlO1xuICAgICAgICAgICAgcmV0dXJuIHRoaXM7XG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICB0aGlzLnN0eWxlID0gbmV3IFN0eWxlKHRoaXMsIG9wdGlvbnMgfHwge30pO1xuICAgICAgICB9XG5cbiAgICAgICAgdGhpcy5zdHlsZS5zZXRFdmVudGVkUGFyZW50KHRoaXMsIHtzdHlsZTogdGhpcy5zdHlsZX0pO1xuXG4gICAgICAgIGlmICh0eXBlb2Ygc3R5bGUgPT09ICdzdHJpbmcnKSB7XG4gICAgICAgICAgICB0aGlzLnN0eWxlLmxvYWRVUkwoc3R5bGUpO1xuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgdGhpcy5zdHlsZS5sb2FkSlNPTihzdHlsZSk7XG4gICAgICAgIH1cblxuICAgICAgICByZXR1cm4gdGhpcztcbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBSZXR1cm5zIHRoZSBtYXAncyBNYXBib3ggc3R5bGUgb2JqZWN0LCB3aGljaCBjYW4gYmUgdXNlZCB0byByZWNyZWF0ZSB0aGUgbWFwJ3Mgc3R5bGUuXG4gICAgICpcbiAgICAgKiBAcmV0dXJucyB7T2JqZWN0fSBUaGUgbWFwJ3Mgc3R5bGUgb2JqZWN0LlxuICAgICAqL1xuICAgIGdldFN0eWxlKCkge1xuICAgICAgICBpZiAodGhpcy5zdHlsZSkge1xuICAgICAgICAgICAgcmV0dXJuIHRoaXMuc3R5bGUuc2VyaWFsaXplKCk7XG4gICAgICAgIH1cbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBSZXR1cm5zIGEgQm9vbGVhbiBpbmRpY2F0aW5nIHdoZXRoZXIgdGhlIG1hcCdzIHN0eWxlIGlzIGZ1bGx5IGxvYWRlZC5cbiAgICAgKlxuICAgICAqIEByZXR1cm5zIHtib29sZWFufSBBIEJvb2xlYW4gaW5kaWNhdGluZyB3aGV0aGVyIHRoZSBzdHlsZSBpcyBmdWxseSBsb2FkZWQuXG4gICAgICovXG4gICAgaXNTdHlsZUxvYWRlZCgpIHtcbiAgICAgICAgaWYgKCF0aGlzLnN0eWxlKSByZXR1cm4gd2Fybk9uY2UoJ1RoZXJlIGlzIG5vIHN0eWxlIGFkZGVkIHRvIHRoZSBtYXAuJyk7XG4gICAgICAgIHJldHVybiB0aGlzLnN0eWxlLmxvYWRlZCgpO1xuICAgIH1cblxuICAgIC8qKlxuICAgICAqIEFkZHMgYSBzb3VyY2UgdG8gdGhlIG1hcCdzIHN0eWxlLlxuICAgICAqXG4gICAgICogQHBhcmFtIHtzdHJpbmd9IGlkIFRoZSBJRCBvZiB0aGUgc291cmNlIHRvIGFkZC4gTXVzdCBub3QgY29uZmxpY3Qgd2l0aCBleGlzdGluZyBzb3VyY2VzLlxuICAgICAqIEBwYXJhbSB7T2JqZWN0fSBzb3VyY2UgVGhlIHNvdXJjZSBvYmplY3QsIGNvbmZvcm1pbmcgdG8gdGhlXG4gICAgICogTWFwYm94IFN0eWxlIFNwZWNpZmljYXRpb24ncyBbc291cmNlIGRlZmluaXRpb25dKGh0dHBzOi8vd3d3Lm1hcGJveC5jb20vbWFwYm94LWdsLXN0eWxlLXNwZWMvI3NvdXJjZXMpIG9yXG4gICAgICoge0BsaW5rIENhbnZhc1NvdXJjZU9wdGlvbnN9LlxuICAgICAqIEBmaXJlcyBzb3VyY2UuYWRkXG4gICAgICogQHJldHVybnMge01hcH0gYHRoaXNgXG4gICAgICogQHNlZSBbRHJhdyBHZW9KU09OIHBvaW50c10oaHR0cHM6Ly93d3cubWFwYm94LmNvbS9tYXBib3gtZ2wtanMvZXhhbXBsZS9nZW9qc29uLW1hcmtlcnMvKVxuICAgICAqIEBzZWUgW1N0eWxlIGNpcmNsZXMgdXNpbmcgZGF0YS1kcml2ZW4gc3R5bGluZ10oaHR0cHM6Ly93d3cubWFwYm94LmNvbS9tYXBib3gtZ2wtanMvZXhhbXBsZS9kYXRhLWRyaXZlbi1jaXJjbGUtY29sb3JzLylcbiAgICAgKiBAc2VlIFtTZXQgYSBwb2ludCBhZnRlciBHZW9jb2RlciByZXN1bHRdKGh0dHBzOi8vd3d3Lm1hcGJveC5jb20vbWFwYm94LWdsLWpzL2V4YW1wbGUvcG9pbnQtZnJvbS1nZW9jb2Rlci1yZXN1bHQvKVxuICAgICAqL1xuICAgIGFkZFNvdXJjZShpZDogc3RyaW5nLCBzb3VyY2U6IFNvdXJjZVNwZWNpZmljYXRpb24pIHtcbiAgICAgICAgdGhpcy5zdHlsZS5hZGRTb3VyY2UoaWQsIHNvdXJjZSk7XG4gICAgICAgIHJldHVybiB0aGlzLl91cGRhdGUodHJ1ZSk7XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogUmV0dXJucyBhIEJvb2xlYW4gaW5kaWNhdGluZyB3aGV0aGVyIHRoZSBzb3VyY2UgaXMgbG9hZGVkLlxuICAgICAqXG4gICAgICogQHBhcmFtIHtzdHJpbmd9IGlkIFRoZSBJRCBvZiB0aGUgc291cmNlIHRvIGJlIGNoZWNrZWQuXG4gICAgICogQHJldHVybnMge2Jvb2xlYW59IEEgQm9vbGVhbiBpbmRpY2F0aW5nIHdoZXRoZXIgdGhlIHNvdXJjZSBpcyBsb2FkZWQuXG4gICAgICovXG4gICAgaXNTb3VyY2VMb2FkZWQoaWQ6IHN0cmluZykge1xuICAgICAgICBjb25zdCBzb3VyY2UgPSB0aGlzLnN0eWxlICYmIHRoaXMuc3R5bGUuc291cmNlQ2FjaGVzW2lkXTtcbiAgICAgICAgaWYgKHNvdXJjZSA9PT0gdW5kZWZpbmVkKSB7XG4gICAgICAgICAgICB0aGlzLmZpcmUobmV3IEVycm9yRXZlbnQobmV3IEVycm9yKGBUaGVyZSBpcyBubyBzb3VyY2Ugd2l0aCBJRCAnJHtpZH0nYCkpKTtcbiAgICAgICAgICAgIHJldHVybjtcbiAgICAgICAgfVxuICAgICAgICByZXR1cm4gc291cmNlLmxvYWRlZCgpO1xuICAgIH1cblxuICAgIC8qKlxuICAgICAqIFJldHVybnMgYSBCb29sZWFuIGluZGljYXRpbmcgd2hldGhlciBhbGwgdGlsZXMgaW4gdGhlIHZpZXdwb3J0IGZyb20gYWxsIHNvdXJjZXMgb25cbiAgICAgKiB0aGUgc3R5bGUgYXJlIGxvYWRlZC5cbiAgICAgKlxuICAgICAqIEByZXR1cm5zIHtib29sZWFufSBBIEJvb2xlYW4gaW5kaWNhdGluZyB3aGV0aGVyIGFsbCB0aWxlcyBhcmUgbG9hZGVkLlxuICAgICAqL1xuXG4gICAgYXJlVGlsZXNMb2FkZWQoKSB7XG4gICAgICAgIGNvbnN0IHNvdXJjZXMgPSB0aGlzLnN0eWxlICYmIHRoaXMuc3R5bGUuc291cmNlQ2FjaGVzO1xuICAgICAgICBmb3IgKGNvbnN0IGlkIGluIHNvdXJjZXMpIHtcbiAgICAgICAgICAgIGNvbnN0IHNvdXJjZSA9IHNvdXJjZXNbaWRdO1xuICAgICAgICAgICAgY29uc3QgdGlsZXMgPSBzb3VyY2UuX3RpbGVzO1xuICAgICAgICAgICAgZm9yIChjb25zdCB0IGluIHRpbGVzKSB7XG4gICAgICAgICAgICAgICAgY29uc3QgdGlsZSA9IHRpbGVzW3RdO1xuICAgICAgICAgICAgICAgIGlmICghKHRpbGUuc3RhdGUgPT09ICdsb2FkZWQnIHx8IHRpbGUuc3RhdGUgPT09ICdlcnJvcmVkJykpIHJldHVybiBmYWxzZTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgICAgICByZXR1cm4gdHJ1ZTtcbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBBZGRzIGEgW2N1c3RvbSBzb3VyY2UgdHlwZV0oI0N1c3RvbSBTb3VyY2VzKSwgbWFraW5nIGl0IGF2YWlsYWJsZSBmb3IgdXNlIHdpdGhcbiAgICAgKiB7QGxpbmsgTWFwI2FkZFNvdXJjZX0uXG4gICAgICogQHByaXZhdGVcbiAgICAgKiBAcGFyYW0ge3N0cmluZ30gbmFtZSBUaGUgbmFtZSBvZiB0aGUgc291cmNlIHR5cGU7IHNvdXJjZSBkZWZpbml0aW9uIG9iamVjdHMgdXNlIHRoaXMgbmFtZSBpbiB0aGUgYHt0eXBlOiAuLi59YCBmaWVsZC5cbiAgICAgKiBAcGFyYW0ge0Z1bmN0aW9ufSBTb3VyY2VUeXBlIEEge0BsaW5rIFNvdXJjZX0gY29uc3RydWN0b3IuXG4gICAgICogQHBhcmFtIHtGdW5jdGlvbn0gY2FsbGJhY2sgQ2FsbGVkIHdoZW4gdGhlIHNvdXJjZSB0eXBlIGlzIHJlYWR5IG9yIHdpdGggYW4gZXJyb3IgYXJndW1lbnQgaWYgdGhlcmUgaXMgYW4gZXJyb3IuXG4gICAgICovXG4gICAgYWRkU291cmNlVHlwZShuYW1lOiBzdHJpbmcsIFNvdXJjZVR5cGU6IGFueSwgY2FsbGJhY2s6IEZ1bmN0aW9uKSB7XG4gICAgICAgIHJldHVybiB0aGlzLnN0eWxlLmFkZFNvdXJjZVR5cGUobmFtZSwgU291cmNlVHlwZSwgY2FsbGJhY2spO1xuICAgIH1cblxuICAgIC8qKlxuICAgICAqIFJlbW92ZXMgYSBzb3VyY2UgZnJvbSB0aGUgbWFwJ3Mgc3R5bGUuXG4gICAgICpcbiAgICAgKiBAcGFyYW0ge3N0cmluZ30gaWQgVGhlIElEIG9mIHRoZSBzb3VyY2UgdG8gcmVtb3ZlLlxuICAgICAqIEByZXR1cm5zIHtNYXB9IGB0aGlzYFxuICAgICAqL1xuICAgIHJlbW92ZVNvdXJjZShpZDogc3RyaW5nKSB7XG4gICAgICAgIHRoaXMuc3R5bGUucmVtb3ZlU291cmNlKGlkKTtcbiAgICAgICAgcmV0dXJuIHRoaXMuX3VwZGF0ZSh0cnVlKTtcbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBSZXR1cm5zIHRoZSBzb3VyY2Ugd2l0aCB0aGUgc3BlY2lmaWVkIElEIGluIHRoZSBtYXAncyBzdHlsZS5cbiAgICAgKlxuICAgICAqIEBwYXJhbSB7c3RyaW5nfSBpZCBUaGUgSUQgb2YgdGhlIHNvdXJjZSB0byBnZXQuXG4gICAgICogQHJldHVybnMgez9PYmplY3R9IFRoZSBzdHlsZSBzb3VyY2Ugd2l0aCB0aGUgc3BlY2lmaWVkIElELCBvciBgdW5kZWZpbmVkYFxuICAgICAqICAgaWYgdGhlIElEIGNvcnJlc3BvbmRzIHRvIG5vIGV4aXN0aW5nIHNvdXJjZXMuXG4gICAgICogQHNlZSBbQ3JlYXRlIGEgZHJhZ2dhYmxlIHBvaW50XShodHRwczovL3d3dy5tYXBib3guY29tL21hcGJveC1nbC1qcy9leGFtcGxlL2RyYWctYS1wb2ludC8pXG4gICAgICogQHNlZSBbQW5pbWF0ZSBhIHBvaW50XShodHRwczovL3d3dy5tYXBib3guY29tL21hcGJveC1nbC1qcy9leGFtcGxlL2FuaW1hdGUtcG9pbnQtYWxvbmctbGluZS8pXG4gICAgICogQHNlZSBbQWRkIGxpdmUgcmVhbHRpbWUgZGF0YV0oaHR0cHM6Ly93d3cubWFwYm94LmNvbS9tYXBib3gtZ2wtanMvZXhhbXBsZS9saXZlLWdlb2pzb24vKVxuICAgICAqL1xuICAgIGdldFNvdXJjZShpZDogc3RyaW5nKSB7XG4gICAgICAgIHJldHVybiB0aGlzLnN0eWxlLmdldFNvdXJjZShpZCk7XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogQWRkIGFuIGltYWdlIHRvIHRoZSBzdHlsZS4gVGhpcyBpbWFnZSBjYW4gYmUgdXNlZCBpbiBgaWNvbi1pbWFnZWAsXG4gICAgICogYGJhY2tncm91bmQtcGF0dGVybmAsIGBmaWxsLXBhdHRlcm5gLCBhbmQgYGxpbmUtcGF0dGVybmAuIEFuXG4gICAgICoge0BsaW5rIE1hcCNlcnJvcn0gZXZlbnQgd2lsbCBiZSBmaXJlZCBpZiB0aGVyZSBpcyBub3QgZW5vdWdoIHNwYWNlIGluIHRoZVxuICAgICAqIHNwcml0ZSB0byBhZGQgdGhpcyBpbWFnZS5cbiAgICAgKlxuICAgICAqIEBzZWUgW0FkZCBhbiBpY29uIHRvIHRoZSBtYXBdKGh0dHBzOi8vd3d3Lm1hcGJveC5jb20vbWFwYm94LWdsLWpzL2V4YW1wbGUvYWRkLWltYWdlLylcbiAgICAgKiBAc2VlIFtBZGQgYSBnZW5lcmF0ZWQgaWNvbiB0byB0aGUgbWFwXShodHRwczovL3d3dy5tYXBib3guY29tL21hcGJveC1nbC1qcy9leGFtcGxlL2FkZC1pbWFnZS1nZW5lcmF0ZWQvKVxuICAgICAqIEBwYXJhbSBpZCBUaGUgSUQgb2YgdGhlIGltYWdlLlxuICAgICAqIEBwYXJhbSBpbWFnZSBUaGUgaW1hZ2UgYXMgYW4gYEhUTUxJbWFnZUVsZW1lbnRgLCBgSW1hZ2VEYXRhYCwgb3Igb2JqZWN0IHdpdGggYHdpZHRoYCwgYGhlaWdodGAsIGFuZCBgZGF0YWBcbiAgICAgKiBwcm9wZXJ0aWVzIHdpdGggdGhlIHNhbWUgZm9ybWF0IGFzIGBJbWFnZURhdGFgLlxuICAgICAqIEBwYXJhbSBvcHRpb25zXG4gICAgICogQHBhcmFtIG9wdGlvbnMucGl4ZWxSYXRpbyBUaGUgcmF0aW8gb2YgcGl4ZWxzIGluIHRoZSBpbWFnZSB0byBwaHlzaWNhbCBwaXhlbHMgb24gdGhlIHNjcmVlblxuICAgICAqIEBwYXJhbSBvcHRpb25zLnNkZiBXaGV0aGVyIHRoZSBpbWFnZSBzaG91bGQgYmUgaW50ZXJwcmV0ZWQgYXMgYW4gU0RGIGltYWdlXG4gICAgICovXG4gICAgYWRkSW1hZ2UoaWQ6IHN0cmluZyxcbiAgICAgICAgICAgICBpbWFnZTogSFRNTEltYWdlRWxlbWVudCB8IEltYWdlRGF0YSB8IHt3aWR0aDogbnVtYmVyLCBoZWlnaHQ6IG51bWJlciwgZGF0YTogVWludDhBcnJheSB8IFVpbnQ4Q2xhbXBlZEFycmF5fSxcbiAgICAgICAgICAgICB7cGl4ZWxSYXRpbyA9IDEsIHNkZiA9IGZhbHNlfToge3BpeGVsUmF0aW8/OiBudW1iZXIsIHNkZj86IGJvb2xlYW59ID0ge30pIHtcbiAgICAgICAgaWYgKGltYWdlIGluc3RhbmNlb2YgSFRNTEltYWdlRWxlbWVudCkge1xuICAgICAgICAgICAgY29uc3Qge3dpZHRoLCBoZWlnaHQsIGRhdGF9ID0gYnJvd3Nlci5nZXRJbWFnZURhdGEoaW1hZ2UpO1xuICAgICAgICAgICAgdGhpcy5zdHlsZS5hZGRJbWFnZShpZCwgeyBkYXRhOiBuZXcgUkdCQUltYWdlKHt3aWR0aCwgaGVpZ2h0fSwgZGF0YSksIHBpeGVsUmF0aW8sIHNkZiB9KTtcbiAgICAgICAgfSBlbHNlIGlmIChpbWFnZS53aWR0aCA9PT0gdW5kZWZpbmVkIHx8IGltYWdlLmhlaWdodCA9PT0gdW5kZWZpbmVkKSB7XG4gICAgICAgICAgICByZXR1cm4gdGhpcy5maXJlKG5ldyBFcnJvckV2ZW50KG5ldyBFcnJvcihcbiAgICAgICAgICAgICAgICAnSW52YWxpZCBhcmd1bWVudHMgdG8gbWFwLmFkZEltYWdlKCkuIFRoZSBzZWNvbmQgYXJndW1lbnQgbXVzdCBiZSBhbiBgSFRNTEltYWdlRWxlbWVudGAsIGBJbWFnZURhdGFgLCAnICtcbiAgICAgICAgICAgICAgICAnb3Igb2JqZWN0IHdpdGggYHdpZHRoYCwgYGhlaWdodGAsIGFuZCBgZGF0YWAgcHJvcGVydGllcyB3aXRoIHRoZSBzYW1lIGZvcm1hdCBhcyBgSW1hZ2VEYXRhYCcpKSk7XG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICBjb25zdCB7d2lkdGgsIGhlaWdodCwgZGF0YX0gPSBpbWFnZTtcbiAgICAgICAgICAgIHRoaXMuc3R5bGUuYWRkSW1hZ2UoaWQsIHsgZGF0YTogbmV3IFJHQkFJbWFnZSh7d2lkdGgsIGhlaWdodH0sIG5ldyBVaW50OEFycmF5KGRhdGEpKSwgcGl4ZWxSYXRpbywgc2RmIH0pO1xuICAgICAgICB9XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogRGVmaW5lIHdldGhlciB0aGUgaW1hZ2UgaGFzIGJlZW4gYWRkZWQgb3Igbm90XG4gICAgICpcbiAgICAgKiBAcGFyYW0gaWQgVGhlIElEIG9mIHRoZSBpbWFnZS5cbiAgICAgKi9cbiAgICBoYXNJbWFnZShpZDogc3RyaW5nKTogYm9vbGVhbiB7XG4gICAgICAgIGlmICghaWQpIHtcbiAgICAgICAgICAgIHRoaXMuZmlyZShuZXcgRXJyb3JFdmVudChuZXcgRXJyb3IoJ01pc3NpbmcgcmVxdWlyZWQgaW1hZ2UgaWQnKSkpO1xuICAgICAgICAgICAgcmV0dXJuIGZhbHNlO1xuICAgICAgICB9XG5cbiAgICAgICAgcmV0dXJuICEhdGhpcy5zdHlsZS5nZXRJbWFnZShpZCk7XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogUmVtb3ZlIGFuIGltYWdlIGZyb20gdGhlIHN0eWxlIChzdWNoIGFzIG9uZSB1c2VkIGJ5IGBpY29uLWltYWdlYCBvciBgYmFja2dyb3VuZC1wYXR0ZXJuYCkuXG4gICAgICpcbiAgICAgKiBAcGFyYW0gaWQgVGhlIElEIG9mIHRoZSBpbWFnZS5cbiAgICAgKi9cbiAgICByZW1vdmVJbWFnZShpZDogc3RyaW5nKSB7XG4gICAgICAgIHRoaXMuc3R5bGUucmVtb3ZlSW1hZ2UoaWQpO1xuICAgIH1cblxuICAgIC8qKlxuICAgICAqIExvYWQgYW4gaW1hZ2UgZnJvbSBhbiBleHRlcm5hbCBVUkwgZm9yIHVzZSB3aXRoIGBNYXAjYWRkSW1hZ2VgLiBFeHRlcm5hbFxuICAgICAqIGRvbWFpbnMgbXVzdCBzdXBwb3J0IFtDT1JTXShodHRwczovL2RldmVsb3Blci5tb3ppbGxhLm9yZy9lbi1VUy9kb2NzL1dlYi9IVFRQL0FjY2Vzc19jb250cm9sX0NPUlMpLlxuICAgICAqXG4gICAgICogQHBhcmFtIHtzdHJpbmd9IHVybCBUaGUgVVJMIG9mIHRoZSBpbWFnZSBmaWxlLiBJbWFnZSBmaWxlIG11c3QgYmUgaW4gcG5nLCB3ZWJwLCBvciBqcGcgZm9ybWF0LlxuICAgICAqIEBwYXJhbSB7RnVuY3Rpb259IGNhbGxiYWNrIEV4cGVjdGluZyBgY2FsbGJhY2soZXJyb3IsIGRhdGEpYC4gQ2FsbGVkIHdoZW4gdGhlIGltYWdlIGhhcyBsb2FkZWQgb3Igd2l0aCBhbiBlcnJvciBhcmd1bWVudCBpZiB0aGVyZSBpcyBhbiBlcnJvci5cbiAgICAgKiBAc2VlIFtBZGQgYW4gaWNvbiB0byB0aGUgbWFwXShodHRwczovL3d3dy5tYXBib3guY29tL21hcGJveC1nbC1qcy9leGFtcGxlL2FkZC1pbWFnZS8pXG4gICAgICovXG4gICAgbG9hZEltYWdlKHVybDogc3RyaW5nLCBjYWxsYmFjazogRnVuY3Rpb24pIHtcbiAgICAgICAgZ2V0SW1hZ2UodGhpcy5fdHJhbnNmb3JtUmVxdWVzdCh1cmwsIFJlc291cmNlVHlwZS5JbWFnZSksIGNhbGxiYWNrKTtcbiAgICB9XG5cbiAgICAvKipcbiAgICAqIFJldHVybnMgYW4gQXJyYXkgb2Ygc3RyaW5ncyBjb250YWluaW5nIHRoZSBuYW1lcyBvZiBhbGwgc3ByaXRlcy9pbWFnZXMgY3VycmVudGx5IGF2YWlsYWJsZSBpbiB0aGUgbWFwXG4gICAgKlxuICAgICogQHJldHVybnMge0FycmF5PHN0cmluZz59IEFuIEFycmF5IG9mIHN0cmluZ3MgY29udGFpbmluZyB0aGUgbmFtZXMgb2YgYWxsIHNwcml0ZXMvaW1hZ2VzIGN1cnJlbnRseSBhdmFpbGFibGUgaW4gdGhlIG1hcFxuICAgICpcbiAgICAqL1xuICAgIGxpc3RJbWFnZXMoKSB7XG4gICAgICAgIHJldHVybiB0aGlzLnN0eWxlLmxpc3RJbWFnZXMoKTtcbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBBZGRzIGEgW01hcGJveCBzdHlsZSBsYXllcl0oaHR0cHM6Ly93d3cubWFwYm94LmNvbS9tYXBib3gtZ2wtc3R5bGUtc3BlYy8jbGF5ZXJzKVxuICAgICAqIHRvIHRoZSBtYXAncyBzdHlsZS5cbiAgICAgKlxuICAgICAqIEEgbGF5ZXIgZGVmaW5lcyBzdHlsaW5nIGZvciBkYXRhIGZyb20gYSBzcGVjaWZpZWQgc291cmNlLlxuICAgICAqXG4gICAgICogQHBhcmFtIHtPYmplY3R9IGxheWVyIFRoZSBzdHlsZSBsYXllciB0byBhZGQsIGNvbmZvcm1pbmcgdG8gdGhlIE1hcGJveCBTdHlsZSBTcGVjaWZpY2F0aW9uJ3NcbiAgICAgKiAgIFtsYXllciBkZWZpbml0aW9uXShodHRwczovL3d3dy5tYXBib3guY29tL21hcGJveC1nbC1zdHlsZS1zcGVjLyNsYXllcnMpLlxuICAgICAqIEBwYXJhbSB7c3RyaW5nfSBbYmVmb3JlXSBUaGUgSUQgb2YgYW4gZXhpc3RpbmcgbGF5ZXIgdG8gaW5zZXJ0IHRoZSBuZXcgbGF5ZXIgYmVmb3JlLlxuICAgICAqICAgSWYgdGhpcyBhcmd1bWVudCBpcyBvbWl0dGVkLCB0aGUgbGF5ZXIgd2lsbCBiZSBhcHBlbmRlZCB0byB0aGUgZW5kIG9mIHRoZSBsYXllcnMgYXJyYXkuXG4gICAgICogQHJldHVybnMge01hcH0gYHRoaXNgXG4gICAgICogQHNlZSBbQ3JlYXRlIGFuZCBzdHlsZSBjbHVzdGVyc10oaHR0cHM6Ly93d3cubWFwYm94LmNvbS9tYXBib3gtZ2wtanMvZXhhbXBsZS9jbHVzdGVyLylcbiAgICAgKiBAc2VlIFtBZGQgYSB2ZWN0b3IgdGlsZSBzb3VyY2VdKGh0dHBzOi8vd3d3Lm1hcGJveC5jb20vbWFwYm94LWdsLWpzL2V4YW1wbGUvdmVjdG9yLXNvdXJjZS8pXG4gICAgICogQHNlZSBbQWRkIGEgV01TIHNvdXJjZV0oaHR0cHM6Ly93d3cubWFwYm94LmNvbS9tYXBib3gtZ2wtanMvZXhhbXBsZS93bXMvKVxuICAgICAqL1xuICAgIGFkZExheWVyKGxheWVyOiBMYXllclNwZWNpZmljYXRpb24sIGJlZm9yZT86IHN0cmluZykge1xuICAgICAgICB0aGlzLnN0eWxlLmFkZExheWVyKGxheWVyLCBiZWZvcmUpO1xuICAgICAgICByZXR1cm4gdGhpcy5fdXBkYXRlKHRydWUpO1xuICAgIH1cblxuICAgIC8qKlxuICAgICAqIE1vdmVzIGEgbGF5ZXIgdG8gYSBkaWZmZXJlbnQgei1wb3NpdGlvbi5cbiAgICAgKlxuICAgICAqIEBwYXJhbSB7c3RyaW5nfSBpZCBUaGUgSUQgb2YgdGhlIGxheWVyIHRvIG1vdmUuXG4gICAgICogQHBhcmFtIHtzdHJpbmd9IFtiZWZvcmVJZF0gVGhlIElEIG9mIGFuIGV4aXN0aW5nIGxheWVyIHRvIGluc2VydCB0aGUgbmV3IGxheWVyIGJlZm9yZS5cbiAgICAgKiAgIElmIHRoaXMgYXJndW1lbnQgaXMgb21pdHRlZCwgdGhlIGxheWVyIHdpbGwgYmUgYXBwZW5kZWQgdG8gdGhlIGVuZCBvZiB0aGUgbGF5ZXJzIGFycmF5LlxuICAgICAqIEByZXR1cm5zIHtNYXB9IGB0aGlzYFxuICAgICAqL1xuICAgIG1vdmVMYXllcihpZDogc3RyaW5nLCBiZWZvcmVJZD86IHN0cmluZykge1xuICAgICAgICB0aGlzLnN0eWxlLm1vdmVMYXllcihpZCwgYmVmb3JlSWQpO1xuICAgICAgICByZXR1cm4gdGhpcy5fdXBkYXRlKHRydWUpO1xuICAgIH1cblxuICAgIC8qKlxuICAgICAqIFJlbW92ZXMgdGhlIGxheWVyIHdpdGggdGhlIGdpdmVuIGlkIGZyb20gdGhlIG1hcCdzIHN0eWxlLlxuICAgICAqXG4gICAgICogSWYgbm8gc3VjaCBsYXllciBleGlzdHMsIGFuIGBlcnJvcmAgZXZlbnQgaXMgZmlyZWQuXG4gICAgICpcbiAgICAgKiBAcGFyYW0ge3N0cmluZ30gaWQgaWQgb2YgdGhlIGxheWVyIHRvIHJlbW92ZVxuICAgICAqIEBmaXJlcyBlcnJvclxuICAgICAqL1xuICAgIHJlbW92ZUxheWVyKGlkOiBzdHJpbmcpIHtcbiAgICAgICAgdGhpcy5zdHlsZS5yZW1vdmVMYXllcihpZCk7XG4gICAgICAgIHJldHVybiB0aGlzLl91cGRhdGUodHJ1ZSk7XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogUmV0dXJucyB0aGUgbGF5ZXIgd2l0aCB0aGUgc3BlY2lmaWVkIElEIGluIHRoZSBtYXAncyBzdHlsZS5cbiAgICAgKlxuICAgICAqIEBwYXJhbSB7c3RyaW5nfSBpZCBUaGUgSUQgb2YgdGhlIGxheWVyIHRvIGdldC5cbiAgICAgKiBAcmV0dXJucyB7P09iamVjdH0gVGhlIGxheWVyIHdpdGggdGhlIHNwZWNpZmllZCBJRCwgb3IgYHVuZGVmaW5lZGBcbiAgICAgKiAgIGlmIHRoZSBJRCBjb3JyZXNwb25kcyB0byBubyBleGlzdGluZyBsYXllcnMuXG4gICAgICogQHNlZSBbRmlsdGVyIHN5bWJvbHMgYnkgdG9nZ2xpbmcgYSBsaXN0XShodHRwczovL3d3dy5tYXBib3guY29tL21hcGJveC1nbC1qcy9leGFtcGxlL2ZpbHRlci1tYXJrZXJzLylcbiAgICAgKiBAc2VlIFtGaWx0ZXIgc3ltYm9scyBieSB0ZXh0IGlucHV0XShodHRwczovL3d3dy5tYXBib3guY29tL21hcGJveC1nbC1qcy9leGFtcGxlL2ZpbHRlci1tYXJrZXJzLWJ5LWlucHV0LylcbiAgICAgKi9cbiAgICBnZXRMYXllcihpZDogc3RyaW5nKSB7XG4gICAgICAgIHJldHVybiB0aGlzLnN0eWxlLmdldExheWVyKGlkKTtcbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBTZXRzIHRoZSBmaWx0ZXIgZm9yIHRoZSBzcGVjaWZpZWQgc3R5bGUgbGF5ZXIuXG4gICAgICpcbiAgICAgKiBAcGFyYW0ge3N0cmluZ30gbGF5ZXIgVGhlIElEIG9mIHRoZSBsYXllciB0byB3aGljaCB0aGUgZmlsdGVyIHdpbGwgYmUgYXBwbGllZC5cbiAgICAgKiBAcGFyYW0ge0FycmF5IHwgbnVsbCB8IHVuZGVmaW5lZH0gZmlsdGVyIFRoZSBmaWx0ZXIsIGNvbmZvcm1pbmcgdG8gdGhlIE1hcGJveCBTdHlsZSBTcGVjaWZpY2F0aW9uJ3NcbiAgICAgKiAgIFtmaWx0ZXIgZGVmaW5pdGlvbl0oaHR0cHM6Ly93d3cubWFwYm94LmNvbS9tYXBib3gtZ2wtanMvc3R5bGUtc3BlYy8jb3RoZXItZmlsdGVyKS4gIElmIGBudWxsYCBvciBgdW5kZWZpbmVkYCBpcyBwcm92aWRlZCwgdGhlIGZ1bmN0aW9uIHJlbW92ZXMgYW55IGV4aXN0aW5nIGZpbHRlciBmcm9tIHRoZSBsYXllci5cbiAgICAgKiBAcmV0dXJucyB7TWFwfSBgdGhpc2BcbiAgICAgKiBAZXhhbXBsZVxuICAgICAqIG1hcC5zZXRGaWx0ZXIoJ215LWxheWVyJywgWyc9PScsICduYW1lJywgJ1VTQSddKTtcbiAgICAgKiBAc2VlIFtGaWx0ZXIgZmVhdHVyZXMgd2l0aGluIG1hcCB2aWV3XShodHRwczovL3d3dy5tYXBib3guY29tL21hcGJveC1nbC1qcy9leGFtcGxlL2ZpbHRlci1mZWF0dXJlcy13aXRoaW4tbWFwLXZpZXcvKVxuICAgICAqIEBzZWUgW0hpZ2hsaWdodCBmZWF0dXJlcyBjb250YWluaW5nIHNpbWlsYXIgZGF0YV0oaHR0cHM6Ly93d3cubWFwYm94LmNvbS9tYXBib3gtZ2wtanMvZXhhbXBsZS9xdWVyeS1zaW1pbGFyLWZlYXR1cmVzLylcbiAgICAgKiBAc2VlIFtDcmVhdGUgYSB0aW1lbGluZSBhbmltYXRpb25dKGh0dHBzOi8vd3d3Lm1hcGJveC5jb20vbWFwYm94LWdsLWpzL2V4YW1wbGUvdGltZWxpbmUtYW5pbWF0aW9uLylcbiAgICAgKi9cbiAgICBzZXRGaWx0ZXIobGF5ZXI6IHN0cmluZywgZmlsdGVyOiA/RmlsdGVyU3BlY2lmaWNhdGlvbikge1xuICAgICAgICB0aGlzLnN0eWxlLnNldEZpbHRlcihsYXllciwgZmlsdGVyKTtcbiAgICAgICAgcmV0dXJuIHRoaXMuX3VwZGF0ZSh0cnVlKTtcbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBTZXRzIHRoZSB6b29tIGV4dGVudCBmb3IgdGhlIHNwZWNpZmllZCBzdHlsZSBsYXllci5cbiAgICAgKlxuICAgICAqIEBwYXJhbSB7c3RyaW5nfSBsYXllcklkIFRoZSBJRCBvZiB0aGUgbGF5ZXIgdG8gd2hpY2ggdGhlIHpvb20gZXh0ZW50IHdpbGwgYmUgYXBwbGllZC5cbiAgICAgKiBAcGFyYW0ge251bWJlcn0gbWluem9vbSBUaGUgbWluaW11bSB6b29tIHRvIHNldCAoMC0yNCkuXG4gICAgICogQHBhcmFtIHtudW1iZXJ9IG1heHpvb20gVGhlIG1heGltdW0gem9vbSB0byBzZXQgKDAtMjQpLlxuICAgICAqIEByZXR1cm5zIHtNYXB9IGB0aGlzYFxuICAgICAqIEBleGFtcGxlXG4gICAgICogbWFwLnNldExheWVyWm9vbVJhbmdlKCdteS1sYXllcicsIDIsIDUpO1xuICAgICAqL1xuICAgIHNldExheWVyWm9vbVJhbmdlKGxheWVySWQ6IHN0cmluZywgbWluem9vbTogbnVtYmVyLCBtYXh6b29tOiBudW1iZXIpIHtcbiAgICAgICAgdGhpcy5zdHlsZS5zZXRMYXllclpvb21SYW5nZShsYXllcklkLCBtaW56b29tLCBtYXh6b29tKTtcbiAgICAgICAgcmV0dXJuIHRoaXMuX3VwZGF0ZSh0cnVlKTtcbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBSZXR1cm5zIHRoZSBmaWx0ZXIgYXBwbGllZCB0byB0aGUgc3BlY2lmaWVkIHN0eWxlIGxheWVyLlxuICAgICAqXG4gICAgICogQHBhcmFtIHtzdHJpbmd9IGxheWVyIFRoZSBJRCBvZiB0aGUgc3R5bGUgbGF5ZXIgd2hvc2UgZmlsdGVyIHRvIGdldC5cbiAgICAgKiBAcmV0dXJucyB7QXJyYXl9IFRoZSBsYXllcidzIGZpbHRlci5cbiAgICAgKi9cbiAgICBnZXRGaWx0ZXIobGF5ZXI6IHN0cmluZykge1xuICAgICAgICByZXR1cm4gdGhpcy5zdHlsZS5nZXRGaWx0ZXIobGF5ZXIpO1xuICAgIH1cblxuICAgIC8qKlxuICAgICAqIFNldHMgdGhlIHZhbHVlIG9mIGEgcGFpbnQgcHJvcGVydHkgaW4gdGhlIHNwZWNpZmllZCBzdHlsZSBsYXllci5cbiAgICAgKlxuICAgICAqIEBwYXJhbSB7c3RyaW5nfSBsYXllciBUaGUgSUQgb2YgdGhlIGxheWVyIHRvIHNldCB0aGUgcGFpbnQgcHJvcGVydHkgaW4uXG4gICAgICogQHBhcmFtIHtzdHJpbmd9IG5hbWUgVGhlIG5hbWUgb2YgdGhlIHBhaW50IHByb3BlcnR5IHRvIHNldC5cbiAgICAgKiBAcGFyYW0geyp9IHZhbHVlIFRoZSB2YWx1ZSBvZiB0aGUgcGFpbnQgcHJvcGVyeSB0byBzZXQuXG4gICAgICogICBNdXN0IGJlIG9mIGEgdHlwZSBhcHByb3ByaWF0ZSBmb3IgdGhlIHByb3BlcnR5LCBhcyBkZWZpbmVkIGluIHRoZSBbTWFwYm94IFN0eWxlIFNwZWNpZmljYXRpb25dKGh0dHBzOi8vd3d3Lm1hcGJveC5jb20vbWFwYm94LWdsLXN0eWxlLXNwZWMvKS5cbiAgICAgKiBAcmV0dXJucyB7TWFwfSBgdGhpc2BcbiAgICAgKiBAZXhhbXBsZVxuICAgICAqIG1hcC5zZXRQYWludFByb3BlcnR5KCdteS1sYXllcicsICdmaWxsLWNvbG9yJywgJyNmYWFmZWUnKTtcbiAgICAgKiBAc2VlIFtDaGFuZ2UgYSBsYXllcidzIGNvbG9yIHdpdGggYnV0dG9uc10oaHR0cHM6Ly93d3cubWFwYm94LmNvbS9tYXBib3gtZ2wtanMvZXhhbXBsZS9jb2xvci1zd2l0Y2hlci8pXG4gICAgICogQHNlZSBbQWRqdXN0IGEgbGF5ZXIncyBvcGFjaXR5XShodHRwczovL3d3dy5tYXBib3guY29tL21hcGJveC1nbC1qcy9leGFtcGxlL2FkanVzdC1sYXllci1vcGFjaXR5LylcbiAgICAgKiBAc2VlIFtDcmVhdGUgYSBkcmFnZ2FibGUgcG9pbnRdKGh0dHBzOi8vd3d3Lm1hcGJveC5jb20vbWFwYm94LWdsLWpzL2V4YW1wbGUvZHJhZy1hLXBvaW50LylcbiAgICAgKi9cbiAgICBzZXRQYWludFByb3BlcnR5KGxheWVyOiBzdHJpbmcsIG5hbWU6IHN0cmluZywgdmFsdWU6IGFueSkge1xuICAgICAgICB0aGlzLnN0eWxlLnNldFBhaW50UHJvcGVydHkobGF5ZXIsIG5hbWUsIHZhbHVlKTtcbiAgICAgICAgcmV0dXJuIHRoaXMuX3VwZGF0ZSh0cnVlKTtcbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBSZXR1cm5zIHRoZSB2YWx1ZSBvZiBhIHBhaW50IHByb3BlcnR5IGluIHRoZSBzcGVjaWZpZWQgc3R5bGUgbGF5ZXIuXG4gICAgICpcbiAgICAgKiBAcGFyYW0ge3N0cmluZ30gbGF5ZXIgVGhlIElEIG9mIHRoZSBsYXllciB0byBnZXQgdGhlIHBhaW50IHByb3BlcnR5IGZyb20uXG4gICAgICogQHBhcmFtIHtzdHJpbmd9IG5hbWUgVGhlIG5hbWUgb2YgYSBwYWludCBwcm9wZXJ0eSB0byBnZXQuXG4gICAgICogQHJldHVybnMgeyp9IFRoZSB2YWx1ZSBvZiB0aGUgc3BlY2lmaWVkIHBhaW50IHByb3BlcnR5LlxuICAgICAqL1xuICAgIGdldFBhaW50UHJvcGVydHkobGF5ZXI6IHN0cmluZywgbmFtZTogc3RyaW5nKSB7XG4gICAgICAgIHJldHVybiB0aGlzLnN0eWxlLmdldFBhaW50UHJvcGVydHkobGF5ZXIsIG5hbWUpO1xuICAgIH1cblxuICAgIC8qKlxuICAgICAqIFNldHMgdGhlIHZhbHVlIG9mIGEgbGF5b3V0IHByb3BlcnR5IGluIHRoZSBzcGVjaWZpZWQgc3R5bGUgbGF5ZXIuXG4gICAgICpcbiAgICAgKiBAcGFyYW0ge3N0cmluZ30gbGF5ZXIgVGhlIElEIG9mIHRoZSBsYXllciB0byBzZXQgdGhlIGxheW91dCBwcm9wZXJ0eSBpbi5cbiAgICAgKiBAcGFyYW0ge3N0cmluZ30gbmFtZSBUaGUgbmFtZSBvZiB0aGUgbGF5b3V0IHByb3BlcnR5IHRvIHNldC5cbiAgICAgKiBAcGFyYW0geyp9IHZhbHVlIFRoZSB2YWx1ZSBvZiB0aGUgbGF5b3V0IHByb3BlcnkuIE11c3QgYmUgb2YgYSB0eXBlIGFwcHJvcHJpYXRlIGZvciB0aGUgcHJvcGVydHksIGFzIGRlZmluZWQgaW4gdGhlIFtNYXBib3ggU3R5bGUgU3BlY2lmaWNhdGlvbl0oaHR0cHM6Ly93d3cubWFwYm94LmNvbS9tYXBib3gtZ2wtc3R5bGUtc3BlYy8pLlxuICAgICAqIEByZXR1cm5zIHtNYXB9IGB0aGlzYFxuICAgICAqIEBleGFtcGxlXG4gICAgICogbWFwLnNldExheW91dFByb3BlcnR5KCdteS1sYXllcicsICd2aXNpYmlsaXR5JywgJ25vbmUnKTtcbiAgICAgKi9cbiAgICBzZXRMYXlvdXRQcm9wZXJ0eShsYXllcjogc3RyaW5nLCBuYW1lOiBzdHJpbmcsIHZhbHVlOiBhbnkpIHtcbiAgICAgICAgdGhpcy5zdHlsZS5zZXRMYXlvdXRQcm9wZXJ0eShsYXllciwgbmFtZSwgdmFsdWUpO1xuICAgICAgICByZXR1cm4gdGhpcy5fdXBkYXRlKHRydWUpO1xuICAgIH1cblxuICAgIC8qKlxuICAgICAqIFJldHVybnMgdGhlIHZhbHVlIG9mIGEgbGF5b3V0IHByb3BlcnR5IGluIHRoZSBzcGVjaWZpZWQgc3R5bGUgbGF5ZXIuXG4gICAgICpcbiAgICAgKiBAcGFyYW0ge3N0cmluZ30gbGF5ZXIgVGhlIElEIG9mIHRoZSBsYXllciB0byBnZXQgdGhlIGxheW91dCBwcm9wZXJ0eSBmcm9tLlxuICAgICAqIEBwYXJhbSB7c3RyaW5nfSBuYW1lIFRoZSBuYW1lIG9mIHRoZSBsYXlvdXQgcHJvcGVydHkgdG8gZ2V0LlxuICAgICAqIEByZXR1cm5zIHsqfSBUaGUgdmFsdWUgb2YgdGhlIHNwZWNpZmllZCBsYXlvdXQgcHJvcGVydHkuXG4gICAgICovXG4gICAgZ2V0TGF5b3V0UHJvcGVydHkobGF5ZXI6IHN0cmluZywgbmFtZTogc3RyaW5nKSB7XG4gICAgICAgIHJldHVybiB0aGlzLnN0eWxlLmdldExheW91dFByb3BlcnR5KGxheWVyLCBuYW1lKTtcbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBTZXRzIHRoZSBhbnkgY29tYmluYXRpb24gb2YgbGlnaHQgdmFsdWVzLlxuICAgICAqXG4gICAgICogQHBhcmFtIGxpZ2h0IExpZ2h0IHByb3BlcnRpZXMgdG8gc2V0LiBNdXN0IGNvbmZvcm0gdG8gdGhlIFtNYXBib3ggU3R5bGUgU3BlY2lmaWNhdGlvbl0oaHR0cHM6Ly93d3cubWFwYm94LmNvbS9tYXBib3gtZ2wtc3R5bGUtc3BlYy8jbGlnaHQpLlxuICAgICAqIEByZXR1cm5zIHtNYXB9IGB0aGlzYFxuICAgICAqL1xuICAgIHNldExpZ2h0KGxpZ2h0OiBMaWdodFNwZWNpZmljYXRpb24pIHtcbiAgICAgICAgdGhpcy5zdHlsZS5zZXRMaWdodChsaWdodCk7XG4gICAgICAgIHJldHVybiB0aGlzLl91cGRhdGUodHJ1ZSk7XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogUmV0dXJucyB0aGUgdmFsdWUgb2YgdGhlIGxpZ2h0IG9iamVjdC5cbiAgICAgKlxuICAgICAqIEByZXR1cm5zIHtPYmplY3R9IGxpZ2h0IExpZ2h0IHByb3BlcnRpZXMgb2YgdGhlIHN0eWxlLlxuICAgICAqL1xuICAgIGdldExpZ2h0KCkge1xuICAgICAgICByZXR1cm4gdGhpcy5zdHlsZS5nZXRMaWdodCgpO1xuICAgIH1cblxuICAgIC8qKlxuICAgICAqIFNldHMgdGhlIHN0YXRlIG9mIGEgZmVhdHVyZS4gVGhlIGBzdGF0ZWAgb2JqZWN0IGlzIG1lcmdlZCBpbiB3aXRoIHRoZSBleGlzdGluZyBzdGF0ZSBvZiB0aGUgZmVhdHVyZS5cbiAgICAgKlxuICAgICAqIEBwYXJhbSB7T2JqZWN0fSBmZWF0dXJlIEZlYXR1cmUgaWRlbnRpZmllci4gRmVhdHVyZSBvYmplY3RzIHJldHVybmVkIGZyb21cbiAgICAgKiB7QGxpbmsgTWFwI3F1ZXJ5UmVuZGVyZWRGZWF0dXJlc30gb3IgZXZlbnQgaGFuZGxlcnMgY2FuIGJlIHVzZWQgYXMgZmVhdHVyZSBpZGVudGlmaWVycy5cbiAgICAgKiBAcGFyYW0ge3N0cmluZyB8IG51bWJlcn0gZmVhdHVyZS5pZCBVbmlxdWUgaWQgb2YgdGhlIGZlYXR1cmUuXG4gICAgICogQHBhcmFtIHtzdHJpbmd9IGZlYXR1cmUuc291cmNlIFRoZSBJZCBvZiB0aGUgdmVjdG9yIHNvdXJjZSBvciBHZW9KU09OIHNvdXJjZSBmb3IgdGhlIGZlYXR1cmUuXG4gICAgICogQHBhcmFtIHtzdHJpbmd9IFtmZWF0dXJlLnNvdXJjZUxheWVyXSAob3B0aW9uYWwpICAqRm9yIHZlY3RvciB0aWxlIHNvdXJjZXMsIHRoZSBzb3VyY2VMYXllciBpc1xuICAgICAqICByZXF1aXJlZC4qXG4gICAgICogQHBhcmFtIHtPYmplY3R9IHN0YXRlIEEgc2V0IG9mIGtleS12YWx1ZSBwYWlycy4gVGhlIHZhbHVlcyBzaG91bGQgYmUgdmFsaWQgSlNPTiB0eXBlcy5cbiAgICAgKlxuICAgICAqIFRoaXMgbWV0aG9kIHJlcXVpcmVzIHRoZSBgZmVhdHVyZS5pZGAgYXR0cmlidXRlIG9uIGRhdGEgc2V0cy4gRm9yIEdlb0pTT04gc291cmNlcyB3aXRob3V0XG4gICAgICogZmVhdHVyZSBpZHMsIHNldCB0aGUgYGdlbmVyYXRlSWRzYCBvcHRpb24gaW4gdGhlIGBHZW9KU09OU291cmNlU3BlY2lmaWNhdGlvbmAgdG8gYXV0by1hc3NpZ24gdGhlbS4gVGhpc1xuICAgICAqIG9wdGlvbiBhc3NpZ25zIGlkcyBiYXNlZCBvbiBhIGZlYXR1cmUncyBpbmRleCBpbiB0aGUgc291cmNlIGRhdGEuIElmIHlvdSBjaGFuZ2UgZmVhdHVyZSBkYXRhIHVzaW5nXG4gICAgICogYG1hcC5nZXRTb3VyY2UoJ3NvbWUgaWQnKS5zZXREYXRhKC4uKWAsIHlvdSBtYXkgbmVlZCB0byByZS1hcHBseSBzdGF0ZSB0YWtpbmcgaW50byBhY2NvdW50IHVwZGF0ZWQgYGlkYCB2YWx1ZXMuXG4gICAgICovXG4gICAgc2V0RmVhdHVyZVN0YXRlKGZlYXR1cmU6IHsgc291cmNlOiBzdHJpbmc7IHNvdXJjZUxheWVyPzogc3RyaW5nOyBpZDogc3RyaW5nIHwgbnVtYmVyOyB9LCBzdGF0ZTogT2JqZWN0KSB7XG4gICAgICAgIHRoaXMuc3R5bGUuc2V0RmVhdHVyZVN0YXRlKGZlYXR1cmUsIHN0YXRlKTtcbiAgICAgICAgcmV0dXJuIHRoaXMuX3VwZGF0ZSgpO1xuICAgIH1cblxuICAgIC8qKlxuICAgICAqIEdldHMgdGhlIHN0YXRlIG9mIGEgZmVhdHVyZS5cbiAgICAgKlxuICAgICAqIEBwYXJhbSB7T2JqZWN0fSBmZWF0dXJlIEZlYXR1cmUgaWRlbnRpZmllci4gRmVhdHVyZSBvYmplY3RzIHJldHVybmVkIGZyb21cbiAgICAgKiB7QGxpbmsgTWFwI3F1ZXJ5UmVuZGVyZWRGZWF0dXJlc30gb3IgZXZlbnQgaGFuZGxlcnMgY2FuIGJlIHVzZWQgYXMgZmVhdHVyZSBpZGVudGlmaWVycy5cbiAgICAgKiBAcGFyYW0ge3N0cmluZyB8IG51bWJlcn0gZmVhdHVyZS5pZCBVbmlxdWUgaWQgb2YgdGhlIGZlYXR1cmUuXG4gICAgICogQHBhcmFtIHtzdHJpbmd9IGZlYXR1cmUuc291cmNlIFRoZSBJZCBvZiB0aGUgdmVjdG9yIHNvdXJjZSBvciBHZW9KU09OIHNvdXJjZSBmb3IgdGhlIGZlYXR1cmUuXG4gICAgICogQHBhcmFtIHtzdHJpbmd9IFtmZWF0dXJlLnNvdXJjZUxheWVyXSAob3B0aW9uYWwpICAqRm9yIHZlY3RvciB0aWxlIHNvdXJjZXMsIHRoZSBzb3VyY2VMYXllciBpc1xuICAgICAqICByZXF1aXJlZC4qXG4gICAgICpcbiAgICAgKiBAcmV0dXJucyB7T2JqZWN0fSBUaGUgc3RhdGUgb2YgdGhlIGZlYXR1cmUuXG4gICAgICovXG4gICAgZ2V0RmVhdHVyZVN0YXRlKGZlYXR1cmU6IHsgc291cmNlOiBzdHJpbmc7IHNvdXJjZUxheWVyPzogc3RyaW5nOyBpZDogc3RyaW5nIHwgbnVtYmVyOyB9KTogYW55IHtcbiAgICAgICAgcmV0dXJuIHRoaXMuc3R5bGUuZ2V0RmVhdHVyZVN0YXRlKGZlYXR1cmUpO1xuICAgIH1cblxuICAgIC8qKlxuICAgICAqIFJldHVybnMgdGhlIG1hcCdzIGNvbnRhaW5pbmcgSFRNTCBlbGVtZW50LlxuICAgICAqXG4gICAgICogQHJldHVybnMge0hUTUxFbGVtZW50fSBUaGUgbWFwJ3MgY29udGFpbmVyLlxuICAgICAqL1xuICAgIGdldENvbnRhaW5lcigpIHtcbiAgICAgICAgcmV0dXJuIHRoaXMuX2NvbnRhaW5lcjtcbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBSZXR1cm5zIHRoZSBIVE1MIGVsZW1lbnQgY29udGFpbmluZyB0aGUgbWFwJ3MgYDxjYW52YXM+YCBlbGVtZW50LlxuICAgICAqXG4gICAgICogSWYgeW91IHdhbnQgdG8gYWRkIG5vbi1HTCBvdmVybGF5cyB0byB0aGUgbWFwLCB5b3Ugc2hvdWxkIGFwcGVuZCB0aGVtIHRvIHRoaXMgZWxlbWVudC5cbiAgICAgKlxuICAgICAqIFRoaXMgaXMgdGhlIGVsZW1lbnQgdG8gd2hpY2ggZXZlbnQgYmluZGluZ3MgZm9yIG1hcCBpbnRlcmFjdGl2aXR5IChzdWNoIGFzIHBhbm5pbmcgYW5kIHpvb21pbmcpIGFyZVxuICAgICAqIGF0dGFjaGVkLiBJdCB3aWxsIHJlY2VpdmUgYnViYmxlZCBldmVudHMgZnJvbSBjaGlsZCBlbGVtZW50cyBzdWNoIGFzIHRoZSBgPGNhbnZhcz5gLCBidXQgbm90IGZyb21cbiAgICAgKiBtYXAgY29udHJvbHMuXG4gICAgICpcbiAgICAgKiBAcmV0dXJucyB7SFRNTEVsZW1lbnR9IFRoZSBjb250YWluZXIgb2YgdGhlIG1hcCdzIGA8Y2FudmFzPmAuXG4gICAgICogQHNlZSBbQ3JlYXRlIGEgZHJhZ2dhYmxlIHBvaW50XShodHRwczovL3d3dy5tYXBib3guY29tL21hcGJveC1nbC1qcy9leGFtcGxlL2RyYWctYS1wb2ludC8pXG4gICAgICogQHNlZSBbSGlnaGxpZ2h0IGZlYXR1cmVzIHdpdGhpbiBhIGJvdW5kaW5nIGJveF0oaHR0cHM6Ly93d3cubWFwYm94LmNvbS9tYXBib3gtZ2wtanMvZXhhbXBsZS91c2luZy1ib3gtcXVlcnlyZW5kZXJlZGZlYXR1cmVzLylcbiAgICAgKi9cbiAgICBnZXRDYW52YXNDb250YWluZXIoKSB7XG4gICAgICAgIHJldHVybiB0aGlzLl9jYW52YXNDb250YWluZXI7XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogUmV0dXJucyB0aGUgbWFwJ3MgYDxjYW52YXM+YCBlbGVtZW50LlxuICAgICAqXG4gICAgICogQHJldHVybnMge0hUTUxDYW52YXNFbGVtZW50fSBUaGUgbWFwJ3MgYDxjYW52YXM+YCBlbGVtZW50LlxuICAgICAqIEBzZWUgW01lYXN1cmUgZGlzdGFuY2VzXShodHRwczovL3d3dy5tYXBib3guY29tL21hcGJveC1nbC1qcy9leGFtcGxlL21lYXN1cmUvKVxuICAgICAqIEBzZWUgW0Rpc3BsYXkgYSBwb3B1cCBvbiBob3Zlcl0oaHR0cHM6Ly93d3cubWFwYm94LmNvbS9tYXBib3gtZ2wtanMvZXhhbXBsZS9wb3B1cC1vbi1ob3Zlci8pXG4gICAgICogQHNlZSBbQ2VudGVyIHRoZSBtYXAgb24gYSBjbGlja2VkIHN5bWJvbF0oaHR0cHM6Ly93d3cubWFwYm94LmNvbS9tYXBib3gtZ2wtanMvZXhhbXBsZS9jZW50ZXItb24tc3ltYm9sLylcbiAgICAgKi9cbiAgICBnZXRDYW52YXMoKSB7XG4gICAgICAgIHJldHVybiB0aGlzLl9jYW52YXM7XG4gICAgfVxuXG4gICAgX2NvbnRhaW5lckRpbWVuc2lvbnMoKSB7XG4gICAgICAgIGxldCB3aWR0aCA9IDA7XG4gICAgICAgIGxldCBoZWlnaHQgPSAwO1xuXG4gICAgICAgIGlmICh0aGlzLl9jb250YWluZXIpIHtcbiAgICAgICAgICAgIHdpZHRoID0gdGhpcy5fY29udGFpbmVyLmNsaWVudFdpZHRoIHx8IDQwMDtcbiAgICAgICAgICAgIGhlaWdodCA9IHRoaXMuX2NvbnRhaW5lci5jbGllbnRIZWlnaHQgfHwgMzAwO1xuICAgICAgICB9XG5cbiAgICAgICAgcmV0dXJuIFt3aWR0aCwgaGVpZ2h0XTtcbiAgICB9XG5cbiAgICBfZGV0ZWN0TWlzc2luZ0NTUygpOiB2b2lkIHtcbiAgICAgICAgY29uc3QgY29tcHV0ZWRDb2xvciA9IHdpbmRvdy5nZXRDb21wdXRlZFN0eWxlKHRoaXMuX21pc3NpbmdDU1NDYW5hcnkpLmdldFByb3BlcnR5VmFsdWUoJ2JhY2tncm91bmQtY29sb3InKTtcbiAgICAgICAgaWYgKGNvbXB1dGVkQ29sb3IgIT09ICdyZ2IoMjUwLCAxMjgsIDExNCknKSB7XG4gICAgICAgICAgICB3YXJuT25jZSgnVGhpcyBwYWdlIGFwcGVhcnMgdG8gYmUgbWlzc2luZyBDU1MgZGVjbGFyYXRpb25zIGZvciAnICtcbiAgICAgICAgICAgICAgICAnTWFwYm94IEdMIEpTLCB3aGljaCBtYXkgY2F1c2UgdGhlIG1hcCB0byBkaXNwbGF5IGluY29ycmVjdGx5LiAnICtcbiAgICAgICAgICAgICAgICAnUGxlYXNlIGVuc3VyZSB5b3VyIHBhZ2UgaW5jbHVkZXMgbWFwYm94LWdsLmNzcywgYXMgZGVzY3JpYmVkICcgK1xuICAgICAgICAgICAgICAgICdpbiBodHRwczovL3d3dy5tYXBib3guY29tL21hcGJveC1nbC1qcy9hcGkvLicpO1xuICAgICAgICB9XG4gICAgfVxuXG4gICAgX3NldHVwQ29udGFpbmVyKCkge1xuICAgICAgICBjb25zdCBjb250YWluZXIgPSB0aGlzLl9jb250YWluZXI7XG4gICAgICAgIGNvbnRhaW5lci5jbGFzc0xpc3QuYWRkKCdtYXBib3hnbC1tYXAnKTtcblxuICAgICAgICBjb25zdCBtaXNzaW5nQ1NTQ2FuYXJ5ID0gdGhpcy5fbWlzc2luZ0NTU0NhbmFyeSA9IERPTS5jcmVhdGUoJ2RpdicsICdtYXBib3hnbC1jYW5hcnknLCBjb250YWluZXIpO1xuICAgICAgICBtaXNzaW5nQ1NTQ2FuYXJ5LnN0eWxlLnZpc2liaWxpdHkgPSAnaGlkZGVuJztcbiAgICAgICAgdGhpcy5fZGV0ZWN0TWlzc2luZ0NTUygpO1xuXG4gICAgICAgIGNvbnN0IGNhbnZhc0NvbnRhaW5lciA9IHRoaXMuX2NhbnZhc0NvbnRhaW5lciA9IERPTS5jcmVhdGUoJ2RpdicsICdtYXBib3hnbC1jYW52YXMtY29udGFpbmVyJywgY29udGFpbmVyKTtcbiAgICAgICAgaWYgKHRoaXMuX2ludGVyYWN0aXZlKSB7XG4gICAgICAgICAgICBjYW52YXNDb250YWluZXIuY2xhc3NMaXN0LmFkZCgnbWFwYm94Z2wtaW50ZXJhY3RpdmUnKTtcbiAgICAgICAgfVxuXG4gICAgICAgIHRoaXMuX2NhbnZhcyA9IERPTS5jcmVhdGUoJ2NhbnZhcycsICdtYXBib3hnbC1jYW52YXMnLCBjYW52YXNDb250YWluZXIpO1xuICAgICAgICB0aGlzLl9jYW52YXMuc3R5bGUucG9zaXRpb24gPSAnYWJzb2x1dGUnO1xuICAgICAgICB0aGlzLl9jYW52YXMuYWRkRXZlbnRMaXN0ZW5lcignd2ViZ2xjb250ZXh0bG9zdCcsIHRoaXMuX2NvbnRleHRMb3N0LCBmYWxzZSk7XG4gICAgICAgIHRoaXMuX2NhbnZhcy5hZGRFdmVudExpc3RlbmVyKCd3ZWJnbGNvbnRleHRyZXN0b3JlZCcsIHRoaXMuX2NvbnRleHRSZXN0b3JlZCwgZmFsc2UpO1xuICAgICAgICB0aGlzLl9jYW52YXMuc2V0QXR0cmlidXRlKCd0YWJpbmRleCcsICcwJyk7XG4gICAgICAgIHRoaXMuX2NhbnZhcy5zZXRBdHRyaWJ1dGUoJ2FyaWEtbGFiZWwnLCAnTWFwJyk7XG5cbiAgICAgICAgY29uc3QgZGltZW5zaW9ucyA9IHRoaXMuX2NvbnRhaW5lckRpbWVuc2lvbnMoKTtcbiAgICAgICAgdGhpcy5fcmVzaXplQ2FudmFzKGRpbWVuc2lvbnNbMF0sIGRpbWVuc2lvbnNbMV0pO1xuXG4gICAgICAgIGNvbnN0IGNvbnRyb2xDb250YWluZXIgPSB0aGlzLl9jb250cm9sQ29udGFpbmVyID0gRE9NLmNyZWF0ZSgnZGl2JywgJ21hcGJveGdsLWNvbnRyb2wtY29udGFpbmVyJywgY29udGFpbmVyKTtcbiAgICAgICAgY29uc3QgcG9zaXRpb25zID0gdGhpcy5fY29udHJvbFBvc2l0aW9ucyA9IHt9O1xuICAgICAgICBbJ3RvcC1sZWZ0JywgJ3RvcC1yaWdodCcsICdib3R0b20tbGVmdCcsICdib3R0b20tcmlnaHQnXS5mb3JFYWNoKChwb3NpdGlvbk5hbWUpID0+IHtcbiAgICAgICAgICAgIHBvc2l0aW9uc1twb3NpdGlvbk5hbWVdID0gRE9NLmNyZWF0ZSgnZGl2JywgYG1hcGJveGdsLWN0cmwtJHtwb3NpdGlvbk5hbWV9YCwgY29udHJvbENvbnRhaW5lcik7XG4gICAgICAgIH0pO1xuICAgIH1cblxuICAgIF9yZXNpemVDYW52YXMod2lkdGg6IG51bWJlciwgaGVpZ2h0OiBudW1iZXIpIHtcbiAgICAgICAgY29uc3QgcGl4ZWxSYXRpbyA9IHdpbmRvdy5kZXZpY2VQaXhlbFJhdGlvIHx8IDE7XG5cbiAgICAgICAgLy8gUmVxdWVzdCB0aGUgcmVxdWlyZWQgY2FudmFzIHNpemUgdGFraW5nIHRoZSBwaXhlbHJhdGlvIGludG8gYWNjb3VudC5cbiAgICAgICAgdGhpcy5fY2FudmFzLndpZHRoID0gcGl4ZWxSYXRpbyAqIHdpZHRoO1xuICAgICAgICB0aGlzLl9jYW52YXMuaGVpZ2h0ID0gcGl4ZWxSYXRpbyAqIGhlaWdodDtcblxuICAgICAgICAvLyBNYWludGFpbiB0aGUgc2FtZSBjYW52YXMgc2l6ZSwgcG90ZW50aWFsbHkgZG93bnNjYWxpbmcgaXQgZm9yIEhpRFBJIGRpc3BsYXlzXG4gICAgICAgIHRoaXMuX2NhbnZhcy5zdHlsZS53aWR0aCA9IGAke3dpZHRofXB4YDtcbiAgICAgICAgdGhpcy5fY2FudmFzLnN0eWxlLmhlaWdodCA9IGAke2hlaWdodH1weGA7XG4gICAgfVxuXG4gICAgX3NldHVwUGFpbnRlcigpIHtcbiAgICAgICAgY29uc3QgYXR0cmlidXRlcyA9IGV4dGVuZCh7XG4gICAgICAgICAgICBmYWlsSWZNYWpvclBlcmZvcm1hbmNlQ2F2ZWF0OiB0aGlzLl9mYWlsSWZNYWpvclBlcmZvcm1hbmNlQ2F2ZWF0LFxuICAgICAgICAgICAgcHJlc2VydmVEcmF3aW5nQnVmZmVyOiB0aGlzLl9wcmVzZXJ2ZURyYXdpbmdCdWZmZXJcbiAgICAgICAgfSwgaXNTdXBwb3J0ZWQud2ViR0xDb250ZXh0QXR0cmlidXRlcyk7XG5cbiAgICAgICAgY29uc3QgZ2wgPSB0aGlzLl9jYW52YXMuZ2V0Q29udGV4dCgnd2ViZ2wnLCBhdHRyaWJ1dGVzKSB8fFxuICAgICAgICAgICAgdGhpcy5fY2FudmFzLmdldENvbnRleHQoJ2V4cGVyaW1lbnRhbC13ZWJnbCcsIGF0dHJpYnV0ZXMpO1xuXG4gICAgICAgIGlmICghZ2wpIHtcbiAgICAgICAgICAgIHRoaXMuZmlyZShuZXcgRXJyb3JFdmVudChuZXcgRXJyb3IoJ0ZhaWxlZCB0byBpbml0aWFsaXplIFdlYkdMJykpKTtcbiAgICAgICAgICAgIHJldHVybjtcbiAgICAgICAgfVxuXG4gICAgICAgIHRoaXMucGFpbnRlciA9IG5ldyBQYWludGVyKGdsLCB0aGlzLnRyYW5zZm9ybSk7XG4gICAgfVxuXG4gICAgX2NvbnRleHRMb3N0KGV2ZW50OiAqKSB7XG4gICAgICAgIGV2ZW50LnByZXZlbnREZWZhdWx0KCk7XG4gICAgICAgIGlmICh0aGlzLl9mcmFtZSkge1xuICAgICAgICAgICAgdGhpcy5fZnJhbWUuY2FuY2VsKCk7XG4gICAgICAgICAgICB0aGlzLl9mcmFtZSA9IG51bGw7XG4gICAgICAgIH1cbiAgICAgICAgdGhpcy5maXJlKG5ldyBFdmVudCgnd2ViZ2xjb250ZXh0bG9zdCcsIHtvcmlnaW5hbEV2ZW50OiBldmVudH0pKTtcbiAgICB9XG5cbiAgICBfY29udGV4dFJlc3RvcmVkKGV2ZW50OiAqKSB7XG4gICAgICAgIHRoaXMuX3NldHVwUGFpbnRlcigpO1xuICAgICAgICB0aGlzLnJlc2l6ZSgpO1xuICAgICAgICB0aGlzLl91cGRhdGUoKTtcbiAgICAgICAgdGhpcy5maXJlKG5ldyBFdmVudCgnd2ViZ2xjb250ZXh0cmVzdG9yZWQnLCB7b3JpZ2luYWxFdmVudDogZXZlbnR9KSk7XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogUmV0dXJucyBhIEJvb2xlYW4gaW5kaWNhdGluZyB3aGV0aGVyIHRoZSBtYXAgaXMgZnVsbHkgbG9hZGVkLlxuICAgICAqXG4gICAgICogUmV0dXJucyBgZmFsc2VgIGlmIHRoZSBzdHlsZSBpcyBub3QgeWV0IGZ1bGx5IGxvYWRlZCxcbiAgICAgKiBvciBpZiB0aGVyZSBoYXMgYmVlbiBhIGNoYW5nZSB0byB0aGUgc291cmNlcyBvciBzdHlsZSB0aGF0XG4gICAgICogaGFzIG5vdCB5ZXQgZnVsbHkgbG9hZGVkLlxuICAgICAqXG4gICAgICogQHJldHVybnMge2Jvb2xlYW59IEEgQm9vbGVhbiBpbmRpY2F0aW5nIHdoZXRoZXIgdGhlIG1hcCBpcyBmdWxseSBsb2FkZWQuXG4gICAgICovXG4gICAgbG9hZGVkKCkge1xuICAgICAgICByZXR1cm4gIXRoaXMuX3N0eWxlRGlydHkgJiYgIXRoaXMuX3NvdXJjZXNEaXJ0eSAmJiAhIXRoaXMuc3R5bGUgJiYgdGhpcy5zdHlsZS5sb2FkZWQoKTtcbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBVcGRhdGUgdGhpcyBtYXAncyBzdHlsZSBhbmQgc291cmNlcywgYW5kIHJlLXJlbmRlciB0aGUgbWFwLlxuICAgICAqXG4gICAgICogQHBhcmFtIHtib29sZWFufSB1cGRhdGVTdHlsZSBtYXJrIHRoZSBtYXAncyBzdHlsZSBmb3IgcmVwcm9jZXNzaW5nIGFzXG4gICAgICogd2VsbCBhcyBpdHMgc291cmNlc1xuICAgICAqIEByZXR1cm5zIHtNYXB9IHRoaXNcbiAgICAgKiBAcHJpdmF0ZVxuICAgICAqL1xuICAgIF91cGRhdGUodXBkYXRlU3R5bGU/OiBib29sZWFuKSB7XG4gICAgICAgIGlmICghdGhpcy5zdHlsZSkgcmV0dXJuIHRoaXM7XG5cbiAgICAgICAgdGhpcy5fc3R5bGVEaXJ0eSA9IHRoaXMuX3N0eWxlRGlydHkgfHwgdXBkYXRlU3R5bGU7XG4gICAgICAgIHRoaXMuX3NvdXJjZXNEaXJ0eSA9IHRydWU7XG4gICAgICAgIHRoaXMuX3JlcmVuZGVyKCk7XG5cbiAgICAgICAgcmV0dXJuIHRoaXM7XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogUmVxdWVzdCB0aGF0IHRoZSBnaXZlbiBjYWxsYmFjayBiZSBleGVjdXRlZCBkdXJpbmcgdGhlIG5leHQgcmVuZGVyXG4gICAgICogZnJhbWUuICBTY2hlZHVsZSBhIHJlbmRlciBmcmFtZSBpZiBvbmUgaXMgbm90IGFscmVhZHkgc2NoZWR1bGVkLlxuICAgICAqIEByZXR1cm5zIEFuIGlkIHRoYXQgY2FuIGJlIHVzZWQgdG8gY2FuY2VsIHRoZSBjYWxsYmFja1xuICAgICAqIEBwcml2YXRlXG4gICAgICovXG4gICAgX3JlcXVlc3RSZW5kZXJGcmFtZShjYWxsYmFjazogKCkgPT4gdm9pZCk6IFRhc2tJRCB7XG4gICAgICAgIHRoaXMuX3VwZGF0ZSgpO1xuICAgICAgICByZXR1cm4gdGhpcy5fcmVuZGVyVGFza1F1ZXVlLmFkZChjYWxsYmFjayk7XG4gICAgfVxuXG4gICAgX2NhbmNlbFJlbmRlckZyYW1lKGlkOiBUYXNrSUQpIHtcbiAgICAgICAgdGhpcy5fcmVuZGVyVGFza1F1ZXVlLnJlbW92ZShpZCk7XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogQ2FsbCB3aGVuIGEgKHJlLSlyZW5kZXIgb2YgdGhlIG1hcCBpcyByZXF1aXJlZDpcbiAgICAgKiAtIFRoZSBzdHlsZSBoYXMgY2hhbmdlZCAoYHNldFBhaW50UHJvcGVydHkoKWAsIGV0Yy4pXG4gICAgICogLSBTb3VyY2UgZGF0YSBoYXMgY2hhbmdlZCAoZS5nLiB0aWxlcyBoYXZlIGZpbmlzaGVkIGxvYWRpbmcpXG4gICAgICogLSBUaGUgbWFwIGhhcyBpcyBtb3ZpbmcgKG9yIGp1c3QgZmluaXNoZWQgbW92aW5nKVxuICAgICAqIC0gQSB0cmFuc2l0aW9uIGlzIGluIHByb2dyZXNzXG4gICAgICpcbiAgICAgKiBAcmV0dXJucyB7TWFwfSB0aGlzXG4gICAgICogQHByaXZhdGVcbiAgICAgKi9cbiAgICBfcmVuZGVyKCkge1xuICAgICAgICB0aGlzLl9yZW5kZXJUYXNrUXVldWUucnVuKCk7XG5cbiAgICAgICAgbGV0IGNyb3NzRmFkaW5nID0gZmFsc2U7XG5cbiAgICAgICAgLy8gSWYgdGhlIHN0eWxlIGhhcyBjaGFuZ2VkLCB0aGUgbWFwIGlzIGJlaW5nIHpvb21lZCwgb3IgYSB0cmFuc2l0aW9uIG9yIGZhZGUgaXMgaW4gcHJvZ3Jlc3M6XG4gICAgICAgIC8vICAtIEFwcGx5IHN0eWxlIGNoYW5nZXMgKGluIGEgYmF0Y2gpXG4gICAgICAgIC8vICAtIFJlY2FsY3VsYXRlIHBhaW50IHByb3BlcnRpZXMuXG4gICAgICAgIGlmICh0aGlzLnN0eWxlICYmIHRoaXMuX3N0eWxlRGlydHkpIHtcbiAgICAgICAgICAgIHRoaXMuX3N0eWxlRGlydHkgPSBmYWxzZTtcblxuICAgICAgICAgICAgY29uc3Qgem9vbSA9IHRoaXMudHJhbnNmb3JtLnpvb207XG4gICAgICAgICAgICBjb25zdCBub3cgPSBicm93c2VyLm5vdygpO1xuICAgICAgICAgICAgdGhpcy5zdHlsZS56b29tSGlzdG9yeS51cGRhdGUoem9vbSwgbm93KTtcblxuICAgICAgICAgICAgY29uc3QgcGFyYW1ldGVycyA9IG5ldyBFdmFsdWF0aW9uUGFyYW1ldGVycyh6b29tLCB7XG4gICAgICAgICAgICAgICAgbm93LFxuICAgICAgICAgICAgICAgIGZhZGVEdXJhdGlvbjogdGhpcy5fZmFkZUR1cmF0aW9uLFxuICAgICAgICAgICAgICAgIHpvb21IaXN0b3J5OiB0aGlzLnN0eWxlLnpvb21IaXN0b3J5LFxuICAgICAgICAgICAgICAgIHRyYW5zaXRpb246IHRoaXMuc3R5bGUuZ2V0VHJhbnNpdGlvbigpXG4gICAgICAgICAgICB9KTtcblxuICAgICAgICAgICAgY29uc3QgZmFjdG9yID0gcGFyYW1ldGVycy5jcm9zc0ZhZGluZ0ZhY3RvcigpO1xuICAgICAgICAgICAgaWYgKGZhY3RvciAhPT0gMSB8fCBmYWN0b3IgIT09IHRoaXMuX2Nyb3NzRmFkaW5nRmFjdG9yKSB7XG4gICAgICAgICAgICAgICAgY3Jvc3NGYWRpbmcgPSB0cnVlO1xuICAgICAgICAgICAgICAgIHRoaXMuX2Nyb3NzRmFkaW5nRmFjdG9yID0gZmFjdG9yO1xuICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICB0aGlzLnN0eWxlLnVwZGF0ZShwYXJhbWV0ZXJzKTtcbiAgICAgICAgfVxuXG4gICAgICAgIC8vIElmIHdlIGFyZSBpbiBfcmVuZGVyIGZvciBhbnkgcmVhc29uIG90aGVyIHRoYW4gYW4gaW4tcHJvZ3Jlc3MgcGFpbnRcbiAgICAgICAgLy8gdHJhbnNpdGlvbiwgdXBkYXRlIHNvdXJjZSBjYWNoZXMgdG8gY2hlY2sgZm9yIGFuZCBsb2FkIGFueSB0aWxlcyB3ZVxuICAgICAgICAvLyBuZWVkIGZvciB0aGUgY3VycmVudCB0cmFuc2Zvcm1cbiAgICAgICAgaWYgKHRoaXMuc3R5bGUgJiYgdGhpcy5fc291cmNlc0RpcnR5KSB7XG4gICAgICAgICAgICB0aGlzLl9zb3VyY2VzRGlydHkgPSBmYWxzZTtcbiAgICAgICAgICAgIHRoaXMuc3R5bGUuX3VwZGF0ZVNvdXJjZXModGhpcy50cmFuc2Zvcm0pO1xuICAgICAgICB9XG5cbiAgICAgICAgdGhpcy5fcGxhY2VtZW50RGlydHkgPSB0aGlzLnN0eWxlICYmIHRoaXMuc3R5bGUuX3VwZGF0ZVBsYWNlbWVudCh0aGlzLnBhaW50ZXIudHJhbnNmb3JtLCB0aGlzLnNob3dDb2xsaXNpb25Cb3hlcywgdGhpcy5fZmFkZUR1cmF0aW9uLCB0aGlzLl9jcm9zc1NvdXJjZUNvbGxpc2lvbnMpO1xuXG4gICAgICAgIC8vIEFjdHVhbGx5IGRyYXdcbiAgICAgICAgdGhpcy5wYWludGVyLnJlbmRlcih0aGlzLnN0eWxlLCB7XG4gICAgICAgICAgICBzaG93VGlsZUJvdW5kYXJpZXM6IHRoaXMuc2hvd1RpbGVCb3VuZGFyaWVzLFxuICAgICAgICAgICAgc2hvd092ZXJkcmF3SW5zcGVjdG9yOiB0aGlzLl9zaG93T3ZlcmRyYXdJbnNwZWN0b3IsXG4gICAgICAgICAgICByb3RhdGluZzogdGhpcy5pc1JvdGF0aW5nKCksXG4gICAgICAgICAgICB6b29taW5nOiB0aGlzLmlzWm9vbWluZygpLFxuICAgICAgICAgICAgZmFkZUR1cmF0aW9uOiB0aGlzLl9mYWRlRHVyYXRpb25cbiAgICAgICAgfSk7XG5cbiAgICAgICAgdGhpcy5maXJlKG5ldyBFdmVudCgncmVuZGVyJykpO1xuXG4gICAgICAgIGlmICh0aGlzLmxvYWRlZCgpICYmICF0aGlzLl9sb2FkZWQpIHtcbiAgICAgICAgICAgIHRoaXMuX2xvYWRlZCA9IHRydWU7XG4gICAgICAgICAgICB0aGlzLmZpcmUobmV3IEV2ZW50KCdsb2FkJykpO1xuICAgICAgICB9XG5cbiAgICAgICAgaWYgKHRoaXMuc3R5bGUgJiYgKHRoaXMuc3R5bGUuaGFzVHJhbnNpdGlvbnMoKSB8fCBjcm9zc0ZhZGluZykpIHtcbiAgICAgICAgICAgIHRoaXMuX3N0eWxlRGlydHkgPSB0cnVlO1xuICAgICAgICB9XG5cbiAgICAgICAgaWYgKHRoaXMuc3R5bGUgJiYgIXRoaXMuX3BsYWNlbWVudERpcnR5KSB7XG4gICAgICAgICAgICAvLyBTaW5jZSBubyBmYWRlIG9wZXJhdGlvbnMgYXJlIGluIHByb2dyZXNzLCB3ZSBjYW4gcmVsZWFzZVxuICAgICAgICAgICAgLy8gYWxsIHRpbGVzIGhlbGQgZm9yIGZhZGluZy4gSWYgd2UgZGlkbid0IGRvIHRoaXMsIHRoZSB0aWxlc1xuICAgICAgICAgICAgLy8gd291bGQganVzdCBzaXQgaW4gdGhlIFNvdXJjZUNhY2hlcyB1bnRpbCB0aGUgbmV4dCByZW5kZXJcbiAgICAgICAgICAgIHRoaXMuc3R5bGUuX3JlbGVhc2VTeW1ib2xGYWRlVGlsZXMoKTtcbiAgICAgICAgfVxuXG4gICAgICAgIC8vIFNjaGVkdWxlIGFub3RoZXIgcmVuZGVyIGZyYW1lIGlmIGl0J3MgbmVlZGVkLlxuICAgICAgICAvL1xuICAgICAgICAvLyBFdmVuIHRob3VnaCBgX3N0eWxlRGlydHlgIGFuZCBgX3NvdXJjZXNEaXJ0eWAgYXJlIHJlc2V0IGluIHRoaXNcbiAgICAgICAgLy8gbWV0aG9kLCBzeW5jaHJvbm91cyBldmVudHMgZmlyZWQgZHVyaW5nIFN0eWxlI3VwZGF0ZSBvclxuICAgICAgICAvLyBTdHlsZSNfdXBkYXRlU291cmNlcyBjb3VsZCBoYXZlIGNhdXNlZCB0aGVtIHRvIGJlIHNldCBhZ2Fpbi5cbiAgICAgICAgaWYgKHRoaXMuX3NvdXJjZXNEaXJ0eSB8fCB0aGlzLl9yZXBhaW50IHx8IHRoaXMuX3N0eWxlRGlydHkgfHwgdGhpcy5fcGxhY2VtZW50RGlydHkpIHtcbiAgICAgICAgICAgIHRoaXMuX3JlcmVuZGVyKCk7XG4gICAgICAgIH1cblxuICAgICAgICByZXR1cm4gdGhpcztcbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBDbGVhbiB1cCBhbmQgcmVsZWFzZSBhbGwgaW50ZXJuYWwgcmVzb3VyY2VzIGFzc29jaWF0ZWQgd2l0aCB0aGlzIG1hcC5cbiAgICAgKlxuICAgICAqIFRoaXMgaW5jbHVkZXMgRE9NIGVsZW1lbnRzLCBldmVudCBiaW5kaW5ncywgd2ViIHdvcmtlcnMsIGFuZCBXZWJHTCByZXNvdXJjZXMuXG4gICAgICpcbiAgICAgKiBVc2UgdGhpcyBtZXRob2Qgd2hlbiB5b3UgYXJlIGRvbmUgdXNpbmcgdGhlIG1hcCBhbmQgd2lzaCB0byBlbnN1cmUgdGhhdCBpdCBub1xuICAgICAqIGxvbmdlciBjb25zdW1lcyBicm93c2VyIHJlc291cmNlcy4gQWZ0ZXJ3YXJkcywgeW91IG11c3Qgbm90IGNhbGwgYW55IG90aGVyXG4gICAgICogbWV0aG9kcyBvbiB0aGUgbWFwLlxuICAgICAqL1xuICAgIHJlbW92ZSgpIHtcbiAgICAgICAgaWYgKHRoaXMuX2hhc2gpIHRoaXMuX2hhc2gucmVtb3ZlKCk7XG4gICAgICAgIGlmICh0aGlzLl9mcmFtZSkge1xuICAgICAgICAgICAgdGhpcy5fZnJhbWUuY2FuY2VsKCk7XG4gICAgICAgICAgICB0aGlzLl9mcmFtZSA9IG51bGw7XG4gICAgICAgIH1cbiAgICAgICAgdGhpcy5fcmVuZGVyVGFza1F1ZXVlLmNsZWFyKCk7XG4gICAgICAgIHRoaXMuc2V0U3R5bGUobnVsbCk7XG4gICAgICAgIGlmICh0eXBlb2Ygd2luZG93ICE9PSAndW5kZWZpbmVkJykge1xuICAgICAgICAgICAgd2luZG93LnJlbW92ZUV2ZW50TGlzdGVuZXIoJ3Jlc2l6ZScsIHRoaXMuX29uV2luZG93UmVzaXplLCBmYWxzZSk7XG4gICAgICAgICAgICB3aW5kb3cucmVtb3ZlRXZlbnRMaXN0ZW5lcignb25saW5lJywgdGhpcy5fb25XaW5kb3dPbmxpbmUsIGZhbHNlKTtcbiAgICAgICAgfVxuXG4gICAgICAgIGZvciAoY29uc3QgY29udHJvbCBvZiB0aGlzLl9jb250cm9scykgY29udHJvbC5vblJlbW92ZSh0aGlzKTtcbiAgICAgICAgdGhpcy5fY29udHJvbHMgPSBbXTtcblxuICAgICAgICBjb25zdCBleHRlbnNpb24gPSB0aGlzLnBhaW50ZXIuY29udGV4dC5nbC5nZXRFeHRlbnNpb24oJ1dFQkdMX2xvc2VfY29udGV4dCcpO1xuICAgICAgICBpZiAoZXh0ZW5zaW9uKSBleHRlbnNpb24ubG9zZUNvbnRleHQoKTtcbiAgICAgICAgcmVtb3ZlTm9kZSh0aGlzLl9jYW52YXNDb250YWluZXIpO1xuICAgICAgICByZW1vdmVOb2RlKHRoaXMuX2NvbnRyb2xDb250YWluZXIpO1xuICAgICAgICByZW1vdmVOb2RlKHRoaXMuX21pc3NpbmdDU1NDYW5hcnkpO1xuICAgICAgICB0aGlzLl9jb250YWluZXIuY2xhc3NMaXN0LnJlbW92ZSgnbWFwYm94Z2wtbWFwJyk7XG4gICAgICAgIHRoaXMuZmlyZShuZXcgRXZlbnQoJ3JlbW92ZScpKTtcbiAgICB9XG5cbiAgICBfcmVyZW5kZXIoKSB7XG4gICAgICAgIGlmICh0aGlzLnN0eWxlICYmICF0aGlzLl9mcmFtZSkge1xuICAgICAgICAgICAgdGhpcy5fZnJhbWUgPSBicm93c2VyLmZyYW1lKCgpID0+IHtcbiAgICAgICAgICAgICAgICB0aGlzLl9mcmFtZSA9IG51bGw7XG4gICAgICAgICAgICAgICAgdGhpcy5fcmVuZGVyKCk7XG4gICAgICAgICAgICB9KTtcbiAgICAgICAgfVxuICAgIH1cblxuICAgIF9vbldpbmRvd09ubGluZSgpIHtcbiAgICAgICAgdGhpcy5fdXBkYXRlKCk7XG4gICAgfVxuXG4gICAgX29uV2luZG93UmVzaXplKCkge1xuICAgICAgICBpZiAodGhpcy5fdHJhY2tSZXNpemUpIHtcbiAgICAgICAgICAgIHRoaXMucmVzaXplKCkuX3VwZGF0ZSgpO1xuICAgICAgICB9XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogR2V0cyBhbmQgc2V0cyBhIEJvb2xlYW4gaW5kaWNhdGluZyB3aGV0aGVyIHRoZSBtYXAgd2lsbCByZW5kZXIgYW4gb3V0bGluZVxuICAgICAqIGFyb3VuZCBlYWNoIHRpbGUuIFRoZXNlIHRpbGUgYm91bmRhcmllcyBhcmUgdXNlZnVsIGZvciBkZWJ1Z2dpbmcuXG4gICAgICpcbiAgICAgKiBAbmFtZSBzaG93VGlsZUJvdW5kYXJpZXNcbiAgICAgKiBAdHlwZSB7Ym9vbGVhbn1cbiAgICAgKiBAaW5zdGFuY2VcbiAgICAgKiBAbWVtYmVyb2YgTWFwXG4gICAgICovXG4gICAgZ2V0IHNob3dUaWxlQm91bmRhcmllcygpOiBib29sZWFuIHsgcmV0dXJuICEhdGhpcy5fc2hvd1RpbGVCb3VuZGFyaWVzOyB9XG4gICAgc2V0IHNob3dUaWxlQm91bmRhcmllcyh2YWx1ZTogYm9vbGVhbikge1xuICAgICAgICBpZiAodGhpcy5fc2hvd1RpbGVCb3VuZGFyaWVzID09PSB2YWx1ZSkgcmV0dXJuO1xuICAgICAgICB0aGlzLl9zaG93VGlsZUJvdW5kYXJpZXMgPSB2YWx1ZTtcbiAgICAgICAgdGhpcy5fdXBkYXRlKCk7XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogR2V0cyBhbmQgc2V0cyBhIEJvb2xlYW4gaW5kaWNhdGluZyB3aGV0aGVyIHRoZSBtYXAgd2lsbCByZW5kZXIgYm94ZXNcbiAgICAgKiBhcm91bmQgYWxsIHN5bWJvbHMgaW4gdGhlIGRhdGEgc291cmNlLCByZXZlYWxpbmcgd2hpY2ggc3ltYm9sc1xuICAgICAqIHdlcmUgcmVuZGVyZWQgb3Igd2hpY2ggd2VyZSBoaWRkZW4gZHVlIHRvIGNvbGxpc2lvbnMuXG4gICAgICogVGhpcyBpbmZvcm1hdGlvbiBpcyB1c2VmdWwgZm9yIGRlYnVnZ2luZy5cbiAgICAgKlxuICAgICAqIEBuYW1lIHNob3dDb2xsaXNpb25Cb3hlc1xuICAgICAqIEB0eXBlIHtib29sZWFufVxuICAgICAqIEBpbnN0YW5jZVxuICAgICAqIEBtZW1iZXJvZiBNYXBcbiAgICAgKi9cbiAgICBnZXQgc2hvd0NvbGxpc2lvbkJveGVzKCk6IGJvb2xlYW4geyByZXR1cm4gISF0aGlzLl9zaG93Q29sbGlzaW9uQm94ZXM7IH1cbiAgICBzZXQgc2hvd0NvbGxpc2lvbkJveGVzKHZhbHVlOiBib29sZWFuKSB7XG4gICAgICAgIGlmICh0aGlzLl9zaG93Q29sbGlzaW9uQm94ZXMgPT09IHZhbHVlKSByZXR1cm47XG4gICAgICAgIHRoaXMuX3Nob3dDb2xsaXNpb25Cb3hlcyA9IHZhbHVlO1xuICAgICAgICBpZiAodmFsdWUpIHtcbiAgICAgICAgICAgIC8vIFdoZW4gd2UgdHVybiBjb2xsaXNpb24gYm94ZXMgb24gd2UgaGF2ZSB0byBnZW5lcmF0ZSB0aGVtIGZvciBleGlzdGluZyB0aWxlc1xuICAgICAgICAgICAgLy8gV2hlbiB3ZSB0dXJuIHRoZW0gb2ZmLCB0aGVyZSdzIG5vIGNvc3QgdG8gbGVhdmluZyBleGlzdGluZyBib3hlcyBpbiBwbGFjZVxuICAgICAgICAgICAgdGhpcy5zdHlsZS5fZ2VuZXJhdGVDb2xsaXNpb25Cb3hlcygpO1xuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgLy8gT3RoZXJ3aXNlLCBjYWxsIGFuIHVwZGF0ZSB0byByZW1vdmUgY29sbGlzaW9uIGJveGVzXG4gICAgICAgICAgICB0aGlzLl91cGRhdGUoKTtcbiAgICAgICAgfVxuICAgIH1cblxuICAgIC8qXG4gICAgICogR2V0cyBhbmQgc2V0cyBhIEJvb2xlYW4gaW5kaWNhdGluZyB3aGV0aGVyIHRoZSBtYXAgc2hvdWxkIGNvbG9yLWNvZGVcbiAgICAgKiBlYWNoIGZyYWdtZW50IHRvIHNob3cgaG93IG1hbnkgdGltZXMgaXQgaGFzIGJlZW4gc2hhZGVkLlxuICAgICAqIFdoaXRlIGZyYWdtZW50cyBoYXZlIGJlZW4gc2hhZGVkIDggb3IgbW9yZSB0aW1lcy5cbiAgICAgKiBCbGFjayBmcmFnbWVudHMgaGF2ZSBiZWVuIHNoYWRlZCAwIHRpbWVzLlxuICAgICAqIFRoaXMgaW5mb3JtYXRpb24gaXMgdXNlZnVsIGZvciBkZWJ1Z2dpbmcuXG4gICAgICpcbiAgICAgKiBAbmFtZSBzaG93T3ZlcmRyYXdcbiAgICAgKiBAdHlwZSB7Ym9vbGVhbn1cbiAgICAgKiBAaW5zdGFuY2VcbiAgICAgKiBAbWVtYmVyb2YgTWFwXG4gICAgICovXG4gICAgZ2V0IHNob3dPdmVyZHJhd0luc3BlY3RvcigpOiBib29sZWFuIHsgcmV0dXJuICEhdGhpcy5fc2hvd092ZXJkcmF3SW5zcGVjdG9yOyB9XG4gICAgc2V0IHNob3dPdmVyZHJhd0luc3BlY3Rvcih2YWx1ZTogYm9vbGVhbikge1xuICAgICAgICBpZiAodGhpcy5fc2hvd092ZXJkcmF3SW5zcGVjdG9yID09PSB2YWx1ZSkgcmV0dXJuO1xuICAgICAgICB0aGlzLl9zaG93T3ZlcmRyYXdJbnNwZWN0b3IgPSB2YWx1ZTtcbiAgICAgICAgdGhpcy5fdXBkYXRlKCk7XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogR2V0cyBhbmQgc2V0cyBhIEJvb2xlYW4gaW5kaWNhdGluZyB3aGV0aGVyIHRoZSBtYXAgd2lsbFxuICAgICAqIGNvbnRpbnVvdXNseSByZXBhaW50LiBUaGlzIGluZm9ybWF0aW9uIGlzIHVzZWZ1bCBmb3IgYW5hbHl6aW5nIHBlcmZvcm1hbmNlLlxuICAgICAqXG4gICAgICogQG5hbWUgcmVwYWludFxuICAgICAqIEB0eXBlIHtib29sZWFufVxuICAgICAqIEBpbnN0YW5jZVxuICAgICAqIEBtZW1iZXJvZiBNYXBcbiAgICAgKi9cbiAgICBnZXQgcmVwYWludCgpOiBib29sZWFuIHsgcmV0dXJuICEhdGhpcy5fcmVwYWludDsgfVxuICAgIHNldCByZXBhaW50KHZhbHVlOiBib29sZWFuKSB7IHRoaXMuX3JlcGFpbnQgPSB2YWx1ZTsgdGhpcy5fdXBkYXRlKCk7IH1cblxuICAgIC8vIHNob3cgdmVydGljZXNcbiAgICBnZXQgdmVydGljZXMoKTogYm9vbGVhbiB7IHJldHVybiAhIXRoaXMuX3ZlcnRpY2VzOyB9XG4gICAgc2V0IHZlcnRpY2VzKHZhbHVlOiBib29sZWFuKSB7IHRoaXMuX3ZlcnRpY2VzID0gdmFsdWU7IHRoaXMuX3VwZGF0ZSgpOyB9XG59XG5cbmV4cG9ydCBkZWZhdWx0IE1hcDtcblxuZnVuY3Rpb24gcmVtb3ZlTm9kZShub2RlKSB7XG4gICAgaWYgKG5vZGUucGFyZW50Tm9kZSkge1xuICAgICAgICBub2RlLnBhcmVudE5vZGUucmVtb3ZlQ2hpbGQobm9kZSk7XG4gICAgfVxufVxuXG4vKipcbiAqIEludGVyZmFjZSBmb3IgaW50ZXJhY3RpdmUgY29udHJvbHMgYWRkZWQgdG8gdGhlIG1hcC4gVGhpcyBpcyBhblxuICogc3BlY2lmaWNhdGlvbiBmb3IgaW1wbGVtZW50ZXJzIHRvIG1vZGVsOiBpdCBpcyBub3RcbiAqIGFuIGV4cG9ydGVkIG1ldGhvZCBvciBjbGFzcy5cbiAqXG4gKiBDb250cm9scyBtdXN0IGltcGxlbWVudCBgb25BZGRgIGFuZCBgb25SZW1vdmVgLCBhbmQgbXVzdCBvd24gYW5cbiAqIGVsZW1lbnQsIHdoaWNoIGlzIG9mdGVuIGEgYGRpdmAgZWxlbWVudC4gVG8gdXNlIE1hcGJveCBHTCBKUydzXG4gKiBkZWZhdWx0IGNvbnRyb2wgc3R5bGluZywgYWRkIHRoZSBgbWFwYm94Z2wtY3RybGAgY2xhc3MgdG8geW91ciBjb250cm9sJ3NcbiAqIG5vZGUuXG4gKlxuICogQGludGVyZmFjZSBJQ29udHJvbFxuICogQGV4YW1wbGVcbiAqIC8vIENvbnRyb2wgaW1wbGVtZW50ZWQgYXMgRVM2IGNsYXNzXG4gKiBjbGFzcyBIZWxsb1dvcmxkQ29udHJvbCB7XG4gKiAgICAgb25BZGQobWFwKSB7XG4gKiAgICAgICAgIHRoaXMuX21hcCA9IG1hcDtcbiAqICAgICAgICAgdGhpcy5fY29udGFpbmVyID0gZG9jdW1lbnQuY3JlYXRlRWxlbWVudCgnZGl2Jyk7XG4gKiAgICAgICAgIHRoaXMuX2NvbnRhaW5lci5jbGFzc05hbWUgPSAnbWFwYm94Z2wtY3RybCc7XG4gKiAgICAgICAgIHRoaXMuX2NvbnRhaW5lci50ZXh0Q29udGVudCA9ICdIZWxsbywgd29ybGQnO1xuICogICAgICAgICByZXR1cm4gdGhpcy5fY29udGFpbmVyO1xuICogICAgIH1cbiAqXG4gKiAgICAgb25SZW1vdmUoKSB7XG4gKiAgICAgICAgIHRoaXMuX2NvbnRhaW5lci5wYXJlbnROb2RlLnJlbW92ZUNoaWxkKHRoaXMuX2NvbnRhaW5lcik7XG4gKiAgICAgICAgIHRoaXMuX21hcCA9IHVuZGVmaW5lZDtcbiAqICAgICB9XG4gKiB9XG4gKlxuICogLy8gQ29udHJvbCBpbXBsZW1lbnRlZCBhcyBFUzUgcHJvdG90eXBpY2FsIGNsYXNzXG4gKiBmdW5jdGlvbiBIZWxsb1dvcmxkQ29udHJvbCgpIHsgfVxuICpcbiAqIEhlbGxvV29ybGRDb250cm9sLnByb3RvdHlwZS5vbkFkZCA9IGZ1bmN0aW9uKG1hcCkge1xuICogICAgIHRoaXMuX21hcCA9IG1hcDtcbiAqICAgICB0aGlzLl9jb250YWluZXIgPSBkb2N1bWVudC5jcmVhdGVFbGVtZW50KCdkaXYnKTtcbiAqICAgICB0aGlzLl9jb250YWluZXIuY2xhc3NOYW1lID0gJ21hcGJveGdsLWN0cmwnO1xuICogICAgIHRoaXMuX2NvbnRhaW5lci50ZXh0Q29udGVudCA9ICdIZWxsbywgd29ybGQnO1xuICogICAgIHJldHVybiB0aGlzLl9jb250YWluZXI7XG4gKiB9O1xuICpcbiAqIEhlbGxvV29ybGRDb250cm9sLnByb3RvdHlwZS5vblJlbW92ZSA9IGZ1bmN0aW9uICgpIHtcbiAqICAgICAgdGhpcy5fY29udGFpbmVyLnBhcmVudE5vZGUucmVtb3ZlQ2hpbGQodGhpcy5fY29udGFpbmVyKTtcbiAqICAgICAgdGhpcy5fbWFwID0gdW5kZWZpbmVkO1xuICogfTtcbiAqL1xuXG4vKipcbiAqIFJlZ2lzdGVyIGEgY29udHJvbCBvbiB0aGUgbWFwIGFuZCBnaXZlIGl0IGEgY2hhbmNlIHRvIHJlZ2lzdGVyIGV2ZW50IGxpc3RlbmVyc1xuICogYW5kIHJlc291cmNlcy4gVGhpcyBtZXRob2QgaXMgY2FsbGVkIGJ5IHtAbGluayBNYXAjYWRkQ29udHJvbH1cbiAqIGludGVybmFsbHkuXG4gKlxuICogQGZ1bmN0aW9uXG4gKiBAbWVtYmVyb2YgSUNvbnRyb2xcbiAqIEBpbnN0YW5jZVxuICogQG5hbWUgb25BZGRcbiAqIEBwYXJhbSB7TWFwfSBtYXAgdGhlIE1hcCB0aGlzIGNvbnRyb2wgd2lsbCBiZSBhZGRlZCB0b1xuICogQHJldHVybnMge0hUTUxFbGVtZW50fSBUaGUgY29udHJvbCdzIGNvbnRhaW5lciBlbGVtZW50LiBUaGlzIHNob3VsZFxuICogYmUgY3JlYXRlZCBieSB0aGUgY29udHJvbCBhbmQgcmV0dXJuZWQgYnkgb25BZGQgd2l0aG91dCBiZWluZyBhdHRhY2hlZFxuICogdG8gdGhlIERPTTogdGhlIG1hcCB3aWxsIGluc2VydCB0aGUgY29udHJvbCdzIGVsZW1lbnQgaW50byB0aGUgRE9NXG4gKiBhcyBuZWNlc3NhcnkuXG4gKi9cblxuLyoqXG4gKiBVbnJlZ2lzdGVyIGEgY29udHJvbCBvbiB0aGUgbWFwIGFuZCBnaXZlIGl0IGEgY2hhbmNlIHRvIGRldGFjaCBldmVudCBsaXN0ZW5lcnNcbiAqIGFuZCByZXNvdXJjZXMuIFRoaXMgbWV0aG9kIGlzIGNhbGxlZCBieSB7QGxpbmsgTWFwI3JlbW92ZUNvbnRyb2x9XG4gKiBpbnRlcm5hbGx5LlxuICpcbiAqIEBmdW5jdGlvblxuICogQG1lbWJlcm9mIElDb250cm9sXG4gKiBAaW5zdGFuY2VcbiAqIEBuYW1lIG9uUmVtb3ZlXG4gKiBAcGFyYW0ge01hcH0gbWFwIHRoZSBNYXAgdGhpcyBjb250cm9sIHdpbGwgYmUgcmVtb3ZlZCBmcm9tXG4gKiBAcmV0dXJucyB7dW5kZWZpbmVkfSB0aGVyZSBpcyBubyByZXF1aXJlZCByZXR1cm4gdmFsdWUgZm9yIHRoaXMgbWV0aG9kXG4gKi9cblxuLyoqXG4gKiBPcHRpb25hbGx5IHByb3ZpZGUgYSBkZWZhdWx0IHBvc2l0aW9uIGZvciB0aGlzIGNvbnRyb2wuIElmIHRoaXMgbWV0aG9kXG4gKiBpcyBpbXBsZW1lbnRlZCBhbmQge0BsaW5rIE1hcCNhZGRDb250cm9sfSBpcyBjYWxsZWQgd2l0aG91dCB0aGUgYHBvc2l0aW9uYFxuICogcGFyYW1ldGVyLCB0aGUgdmFsdWUgcmV0dXJuZWQgYnkgZ2V0RGVmYXVsdFBvc2l0aW9uIHdpbGwgYmUgdXNlZCBhcyB0aGVcbiAqIGNvbnRyb2wncyBwb3NpdGlvbi5cbiAqXG4gKiBAZnVuY3Rpb25cbiAqIEBtZW1iZXJvZiBJQ29udHJvbFxuICogQGluc3RhbmNlXG4gKiBAbmFtZSBnZXREZWZhdWx0UG9zaXRpb25cbiAqIEByZXR1cm5zIHtzdHJpbmd9IGEgY29udHJvbCBwb3NpdGlvbiwgb25lIG9mIHRoZSB2YWx1ZXMgdmFsaWQgaW4gYWRkQ29udHJvbC5cbiAqL1xuXG4vKipcbiAqIEEgW2BQb2ludGAgZ2VvbWV0cnldKGh0dHBzOi8vZ2l0aHViLmNvbS9tYXBib3gvcG9pbnQtZ2VvbWV0cnkpIG9iamVjdCwgd2hpY2ggaGFzXG4gKiBgeGAgYW5kIGB5YCBwcm9wZXJ0aWVzIHJlcHJlc2VudGluZyBzY3JlZW4gY29vcmRpbmF0ZXMgaW4gcGl4ZWxzLlxuICpcbiAqIEB0eXBlZGVmIHtPYmplY3R9IFBvaW50XG4gKi9cblxuLyoqXG4gKiBBIHtAbGluayBQb2ludH0gb3IgYW4gYXJyYXkgb2YgdHdvIG51bWJlcnMgcmVwcmVzZW50aW5nIGB4YCBhbmQgYHlgIHNjcmVlbiBjb29yZGluYXRlcyBpbiBwaXhlbHMuXG4gKlxuICogQHR5cGVkZWYgeyhQb2ludCB8IEFycmF5PG51bWJlcj4pfSBQb2ludExpa2VcbiAqL1xuIiwiLy8gQGZsb3dcblxuaW1wb3J0IERPTSBmcm9tICcuLi8uLi91dGlsL2RvbSc7XG5pbXBvcnQgeyBleHRlbmQsIGJpbmRBbGwgfSBmcm9tICcuLi8uLi91dGlsL3V0aWwnO1xuaW1wb3J0IERyYWdSb3RhdGVIYW5kbGVyIGZyb20gJy4uL2hhbmRsZXIvZHJhZ19yb3RhdGUnO1xuXG5pbXBvcnQgdHlwZSBNYXAgZnJvbSAnLi4vbWFwJztcblxudHlwZSBPcHRpb25zID0ge1xuICAgIHNob3dDb21wYXNzPzogYm9vbGVhbixcbiAgICBzaG93Wm9vbT86IGJvb2xlYW5cbn07XG5cbmNvbnN0IGRlZmF1bHRPcHRpb25zOiBPcHRpb25zID0ge1xuICAgIHNob3dDb21wYXNzOiB0cnVlLFxuICAgIHNob3dab29tOiB0cnVlXG59O1xuXG4vKipcbiAqIEEgYE5hdmlnYXRpb25Db250cm9sYCBjb250cm9sIGNvbnRhaW5zIHpvb20gYnV0dG9ucyBhbmQgYSBjb21wYXNzLlxuICpcbiAqIEBpbXBsZW1lbnRzIHtJQ29udHJvbH1cbiAqIEBwYXJhbSB7T2JqZWN0fSBbb3B0aW9uc11cbiAqIEBwYXJhbSB7Qm9vbGVhbn0gW29wdGlvbnMuc2hvd0NvbXBhc3M9dHJ1ZV0gSWYgYHRydWVgIHRoZSBjb21wYXNzIGJ1dHRvbiBpcyBpbmNsdWRlZC5cbiAqIEBwYXJhbSB7Qm9vbGVhbn0gW29wdGlvbnMuc2hvd1pvb209dHJ1ZV0gSWYgYHRydWVgIHRoZSB6b29tLWluIGFuZCB6b29tLW91dCBidXR0b25zIGFyZSBpbmNsdWRlZC5cbiAqIEBleGFtcGxlXG4gKiB2YXIgbmF2ID0gbmV3IG1hcGJveGdsLk5hdmlnYXRpb25Db250cm9sKCk7XG4gKiBtYXAuYWRkQ29udHJvbChuYXYsICd0b3AtbGVmdCcpO1xuICogQHNlZSBbRGlzcGxheSBtYXAgbmF2aWdhdGlvbiBjb250cm9sc10oaHR0cHM6Ly93d3cubWFwYm94LmNvbS9tYXBib3gtZ2wtanMvZXhhbXBsZS9uYXZpZ2F0aW9uLylcbiAqIEBzZWUgW0FkZCBhIHRoaXJkIHBhcnR5IHZlY3RvciB0aWxlIHNvdXJjZV0oaHR0cHM6Ly93d3cubWFwYm94LmNvbS9tYXBib3gtZ2wtanMvZXhhbXBsZS90aGlyZC1wYXJ0eS8pXG4gKi9cbmNsYXNzIE5hdmlnYXRpb25Db250cm9sIHtcbiAgICBfbWFwOiBNYXA7XG4gICAgb3B0aW9uczogT3B0aW9ucztcbiAgICBfY29udGFpbmVyOiBIVE1MRWxlbWVudDtcbiAgICBfem9vbUluQnV0dG9uOiBIVE1MRWxlbWVudDtcbiAgICBfem9vbU91dEJ1dHRvbjogSFRNTEVsZW1lbnQ7XG4gICAgX2NvbXBhc3M6IEhUTUxFbGVtZW50O1xuICAgIF9jb21wYXNzQXJyb3c6IEhUTUxFbGVtZW50O1xuICAgIF9oYW5kbGVyOiBEcmFnUm90YXRlSGFuZGxlcjtcblxuICAgIGNvbnN0cnVjdG9yKG9wdGlvbnM6IE9wdGlvbnMpIHtcbiAgICAgICAgdGhpcy5vcHRpb25zID0gZXh0ZW5kKHt9LCBkZWZhdWx0T3B0aW9ucywgb3B0aW9ucyk7XG5cbiAgICAgICAgdGhpcy5fY29udGFpbmVyID0gRE9NLmNyZWF0ZSgnZGl2JywgJ21hcGJveGdsLWN0cmwgbWFwYm94Z2wtY3RybC1ncm91cCcpO1xuICAgICAgICB0aGlzLl9jb250YWluZXIuYWRkRXZlbnRMaXN0ZW5lcignY29udGV4dG1lbnUnLCAoZSkgPT4gZS5wcmV2ZW50RGVmYXVsdCgpKTtcblxuICAgICAgICBpZiAodGhpcy5vcHRpb25zLnNob3dab29tKSB7XG4gICAgICAgICAgICB0aGlzLl96b29tSW5CdXR0b24gPSB0aGlzLl9jcmVhdGVCdXR0b24oJ21hcGJveGdsLWN0cmwtaWNvbiBtYXBib3hnbC1jdHJsLXpvb20taW4nLCAnWm9vbSBJbicsICgpID0+IHRoaXMuX21hcC56b29tSW4oKSk7XG4gICAgICAgICAgICB0aGlzLl96b29tT3V0QnV0dG9uID0gdGhpcy5fY3JlYXRlQnV0dG9uKCdtYXBib3hnbC1jdHJsLWljb24gbWFwYm94Z2wtY3RybC16b29tLW91dCcsICdab29tIE91dCcsICgpID0+IHRoaXMuX21hcC56b29tT3V0KCkpO1xuICAgICAgICB9XG4gICAgICAgIGlmICh0aGlzLm9wdGlvbnMuc2hvd0NvbXBhc3MpIHtcbiAgICAgICAgICAgIGJpbmRBbGwoW1xuICAgICAgICAgICAgICAgICdfcm90YXRlQ29tcGFzc0Fycm93J1xuICAgICAgICAgICAgXSwgdGhpcyk7XG4gICAgICAgICAgICB0aGlzLl9jb21wYXNzID0gdGhpcy5fY3JlYXRlQnV0dG9uKCdtYXBib3hnbC1jdHJsLWljb24gbWFwYm94Z2wtY3RybC1jb21wYXNzJywgJ1Jlc2V0IE5vcnRoJywgKCkgPT4gdGhpcy5fbWFwLnJlc2V0Tm9ydGgoKSk7XG4gICAgICAgICAgICB0aGlzLl9jb21wYXNzQXJyb3cgPSBET00uY3JlYXRlKCdzcGFuJywgJ21hcGJveGdsLWN0cmwtY29tcGFzcy1hcnJvdycsIHRoaXMuX2NvbXBhc3MpO1xuICAgICAgICB9XG4gICAgfVxuXG4gICAgX3JvdGF0ZUNvbXBhc3NBcnJvdygpIHtcbiAgICAgICAgY29uc3Qgcm90YXRlID0gYHJvdGF0ZSgke3RoaXMuX21hcC50cmFuc2Zvcm0uYW5nbGUgKiAoMTgwIC8gTWF0aC5QSSl9ZGVnKWA7XG4gICAgICAgIHRoaXMuX2NvbXBhc3NBcnJvdy5zdHlsZS50cmFuc2Zvcm0gPSByb3RhdGU7XG4gICAgfVxuXG4gICAgb25BZGQobWFwOiBNYXApIHtcbiAgICAgICAgdGhpcy5fbWFwID0gbWFwO1xuICAgICAgICBpZiAodGhpcy5vcHRpb25zLnNob3dDb21wYXNzKSB7XG4gICAgICAgICAgICB0aGlzLl9tYXAub24oJ3JvdGF0ZScsIHRoaXMuX3JvdGF0ZUNvbXBhc3NBcnJvdyk7XG4gICAgICAgICAgICB0aGlzLl9yb3RhdGVDb21wYXNzQXJyb3coKTtcbiAgICAgICAgICAgIHRoaXMuX2hhbmRsZXIgPSBuZXcgRHJhZ1JvdGF0ZUhhbmRsZXIobWFwLCB7YnV0dG9uOiAnbGVmdCcsIGVsZW1lbnQ6IHRoaXMuX2NvbXBhc3N9KTtcbiAgICAgICAgICAgIERPTS5hZGRFdmVudExpc3RlbmVyKHRoaXMuX2NvbXBhc3MsICdtb3VzZWRvd24nLCB0aGlzLl9oYW5kbGVyLm9uTW91c2VEb3duKTtcbiAgICAgICAgICAgIHRoaXMuX2hhbmRsZXIuZW5hYmxlKCk7XG4gICAgICAgIH1cbiAgICAgICAgcmV0dXJuIHRoaXMuX2NvbnRhaW5lcjtcbiAgICB9XG5cbiAgICBvblJlbW92ZSgpIHtcbiAgICAgICAgRE9NLnJlbW92ZSh0aGlzLl9jb250YWluZXIpO1xuICAgICAgICBpZiAodGhpcy5vcHRpb25zLnNob3dDb21wYXNzKSB7XG4gICAgICAgICAgICB0aGlzLl9tYXAub2ZmKCdyb3RhdGUnLCB0aGlzLl9yb3RhdGVDb21wYXNzQXJyb3cpO1xuICAgICAgICAgICAgRE9NLnJlbW92ZUV2ZW50TGlzdGVuZXIodGhpcy5fY29tcGFzcywgJ21vdXNlZG93bicsIHRoaXMuX2hhbmRsZXIub25Nb3VzZURvd24pO1xuICAgICAgICAgICAgdGhpcy5faGFuZGxlci5kaXNhYmxlKCk7XG4gICAgICAgICAgICBkZWxldGUgdGhpcy5faGFuZGxlcjtcbiAgICAgICAgfVxuXG4gICAgICAgIGRlbGV0ZSB0aGlzLl9tYXA7XG4gICAgfVxuXG4gICAgX2NyZWF0ZUJ1dHRvbihjbGFzc05hbWU6IHN0cmluZywgYXJpYUxhYmVsOiBzdHJpbmcsIGZuOiAoKSA9PiBtaXhlZCkge1xuICAgICAgICBjb25zdCBhID0gRE9NLmNyZWF0ZSgnYnV0dG9uJywgY2xhc3NOYW1lLCB0aGlzLl9jb250YWluZXIpO1xuICAgICAgICBhLnR5cGUgPSAnYnV0dG9uJztcbiAgICAgICAgYS5zZXRBdHRyaWJ1dGUoJ2FyaWEtbGFiZWwnLCBhcmlhTGFiZWwpO1xuICAgICAgICBhLmFkZEV2ZW50TGlzdGVuZXIoJ2NsaWNrJywgZm4pO1xuICAgICAgICByZXR1cm4gYTtcbiAgICB9XG59XG5cbmV4cG9ydCBkZWZhdWx0IE5hdmlnYXRpb25Db250cm9sO1xuIiwiLy8gQGZsb3dcblxuZXhwb3J0IHR5cGUgQW5jaG9yID1cbiAgICB8ICdjZW50ZXInXG4gICAgfCAndG9wJ1xuICAgIHwgJ2JvdHRvbSdcbiAgICB8ICdsZWZ0J1xuICAgIHwgJ3JpZ2h0J1xuICAgIHwgJ3RvcC1sZWZ0J1xuICAgIHwgJ3RvcC1yaWdodCdcbiAgICB8ICdib3R0b20tbGVmdCdcbiAgICB8ICdib3R0b20tcmlnaHQnO1xuXG5leHBvcnQgY29uc3QgYW5jaG9yVHJhbnNsYXRlOiB7W0FuY2hvcl06IHN0cmluZ30gPSB7XG4gICAgJ2NlbnRlcic6ICd0cmFuc2xhdGUoLTUwJSwtNTAlKScsXG4gICAgJ3RvcCc6ICd0cmFuc2xhdGUoLTUwJSwwKScsXG4gICAgJ3RvcC1sZWZ0JzogJ3RyYW5zbGF0ZSgwLDApJyxcbiAgICAndG9wLXJpZ2h0JzogJ3RyYW5zbGF0ZSgtMTAwJSwwKScsXG4gICAgJ2JvdHRvbSc6ICd0cmFuc2xhdGUoLTUwJSwtMTAwJSknLFxuICAgICdib3R0b20tbGVmdCc6ICd0cmFuc2xhdGUoMCwtMTAwJSknLFxuICAgICdib3R0b20tcmlnaHQnOiAndHJhbnNsYXRlKC0xMDAlLC0xMDAlKScsXG4gICAgJ2xlZnQnOiAndHJhbnNsYXRlKDAsLTUwJSknLFxuICAgICdyaWdodCc6ICd0cmFuc2xhdGUoLTEwMCUsLTUwJSknXG59O1xuXG5leHBvcnQgZnVuY3Rpb24gYXBwbHlBbmNob3JDbGFzcyhlbGVtZW50OiBIVE1MRWxlbWVudCwgYW5jaG9yOiBBbmNob3IsIHByZWZpeDogc3RyaW5nKSB7XG4gICAgY29uc3QgY2xhc3NMaXN0ID0gZWxlbWVudC5jbGFzc0xpc3Q7XG4gICAgZm9yIChjb25zdCBrZXkgaW4gYW5jaG9yVHJhbnNsYXRlKSB7XG4gICAgICAgIGNsYXNzTGlzdC5yZW1vdmUoYG1hcGJveGdsLSR7cHJlZml4fS1hbmNob3ItJHtrZXl9YCk7XG4gICAgfVxuICAgIGNsYXNzTGlzdC5hZGQoYG1hcGJveGdsLSR7cHJlZml4fS1hbmNob3ItJHthbmNob3J9YCk7XG59XG4iLCIvLyBAZmxvd1xuXG5pbXBvcnQgRE9NIGZyb20gJy4uL3V0aWwvZG9tJztcbmltcG9ydCB3aW5kb3cgZnJvbSAnLi4vdXRpbC93aW5kb3cnO1xuaW1wb3J0IExuZ0xhdCBmcm9tICcuLi9nZW8vbG5nX2xhdCc7XG5pbXBvcnQgUG9pbnQgZnJvbSAnQG1hcGJveC9wb2ludC1nZW9tZXRyeSc7XG5pbXBvcnQgc21hcnRXcmFwIGZyb20gJy4uL3V0aWwvc21hcnRfd3JhcCc7XG5pbXBvcnQgeyBiaW5kQWxsLCBleHRlbmQgfSBmcm9tICcuLi91dGlsL3V0aWwnO1xuaW1wb3J0IHsgdHlwZSBBbmNob3IsIGFuY2hvclRyYW5zbGF0ZSwgYXBwbHlBbmNob3JDbGFzcyB9IGZyb20gJy4vYW5jaG9yJztcbmltcG9ydCB7IEV2ZW50LCBFdmVudGVkIH0gZnJvbSAnLi4vdXRpbC9ldmVudGVkJztcbmltcG9ydCB0eXBlIE1hcCBmcm9tICcuL21hcCc7XG5pbXBvcnQgdHlwZSBQb3B1cCBmcm9tICcuL3BvcHVwJztcbmltcG9ydCB0eXBlIHtMbmdMYXRMaWtlfSBmcm9tIFwiLi4vZ2VvL2xuZ19sYXRcIjtcbmltcG9ydCB0eXBlIHtNYXBNb3VzZUV2ZW50LCBNYXBUb3VjaEV2ZW50fSBmcm9tICcuL2V2ZW50cyc7XG5pbXBvcnQgdHlwZSB7UG9pbnRMaWtlfSBmcm9tICdAbWFwYm94L3BvaW50LWdlb21ldHJ5JztcblxudHlwZSBPcHRpb25zID0ge1xuICAgIGVsZW1lbnQ/OiBIVE1MRWxlbWVudCxcbiAgICBvZmZzZXQ/OiBQb2ludExpa2UsXG4gICAgYW5jaG9yPzogQW5jaG9yLFxuICAgIGNvbG9yPzogc3RyaW5nLFxuICAgIGRyYWdnYWJsZT86IGJvb2xlYW5cbn07XG5cbi8qKlxuICogQ3JlYXRlcyBhIG1hcmtlciBjb21wb25lbnRcbiAqIEBwYXJhbSB7T2JqZWN0fSBbb3B0aW9uc11cbiAqIEBwYXJhbSB7SFRNTEVsZW1lbnR9IFtvcHRpb25zLmVsZW1lbnRdIERPTSBlbGVtZW50IHRvIHVzZSBhcyBhIG1hcmtlci4gVGhlIGRlZmF1bHQgaXMgYSBsaWdodCBibHVlLCBkcm9wbGV0LXNoYXBlZCBTVkcgbWFya2VyLlxuICogQHBhcmFtIHtzdHJpbmd9IFtvcHRpb25zLmFuY2hvcj0nY2VudGVyJ10gQSBzdHJpbmcgaW5kaWNhdGluZyB0aGUgcGFydCBvZiB0aGUgTWFya2VyIHRoYXQgc2hvdWxkIGJlIHBvc2l0aW9uZWQgY2xvc2VzdCB0byB0aGUgY29vcmRpbmF0ZSBzZXQgdmlhIHtAbGluayBNYXJrZXIjc2V0TG5nTGF0fS5cbiAqICAgT3B0aW9ucyBhcmUgYCdjZW50ZXInYCwgYCd0b3AnYCwgYCdib3R0b20nYCwgYCdsZWZ0J2AsIGAncmlnaHQnYCwgYCd0b3AtbGVmdCdgLCBgJ3RvcC1yaWdodCdgLCBgJ2JvdHRvbS1sZWZ0J2AsIGFuZCBgJ2JvdHRvbS1yaWdodCdgLlxuICogQHBhcmFtIHtQb2ludExpa2V9IFtvcHRpb25zLm9mZnNldF0gVGhlIG9mZnNldCBpbiBwaXhlbHMgYXMgYSB7QGxpbmsgUG9pbnRMaWtlfSBvYmplY3QgdG8gYXBwbHkgcmVsYXRpdmUgdG8gdGhlIGVsZW1lbnQncyBjZW50ZXIuIE5lZ2F0aXZlcyBpbmRpY2F0ZSBsZWZ0IGFuZCB1cC5cbiAqIEBwYXJhbSB7c3RyaW5nfSBbb3B0aW9ucy5jb2xvcj0nIzNGQjFDRSddIFRoZSBjb2xvciB0byB1c2UgZm9yIHRoZSBkZWZhdWx0IG1hcmtlciBpZiBvcHRpb25zLmVsZW1lbnQgaXMgbm90IHByb3ZpZGVkLiBUaGUgZGVmYXVsdCBpcyBsaWdodCBibHVlLlxuICogQHBhcmFtIHtib29sZWFufSBbb3B0aW9ucy5kcmFnZ2FibGU9ZmFsc2VdIEEgYm9vbGVhbiBpbmRpY2F0aW5nIHdoZXRoZXIgb3Igbm90IGEgbWFya2VyIGlzIGFibGUgdG8gYmUgZHJhZ2dlZCB0byBhIG5ldyBwb3NpdGlvbiBvbiB0aGUgbWFwLlxuICogQGV4YW1wbGVcbiAqIHZhciBtYXJrZXIgPSBuZXcgbWFwYm94Z2wuTWFya2VyKClcbiAqICAgLnNldExuZ0xhdChbMzAuNSwgNTAuNV0pXG4gKiAgIC5hZGRUbyhtYXApO1xuICogQHNlZSBbQWRkIGN1c3RvbSBpY29ucyB3aXRoIE1hcmtlcnNdKGh0dHBzOi8vd3d3Lm1hcGJveC5jb20vbWFwYm94LWdsLWpzL2V4YW1wbGUvY3VzdG9tLW1hcmtlci1pY29ucy8pXG4gKiBAc2VlIFtDcmVhdGUgYSBkcmFnZ2FibGUgTWFya2VyXShodHRwczovL3d3dy5tYXBib3guY29tL21hcGJveC1nbC1qcy9leGFtcGxlL2RyYWctYS1tYXJrZXIvKVxuICovXG5leHBvcnQgZGVmYXVsdCBjbGFzcyBNYXJrZXIgZXh0ZW5kcyBFdmVudGVkIHtcbiAgICBfbWFwOiBNYXA7XG4gICAgX2FuY2hvcjogQW5jaG9yO1xuICAgIF9vZmZzZXQ6IFBvaW50O1xuICAgIF9lbGVtZW50OiBIVE1MRWxlbWVudDtcbiAgICBfcG9wdXA6ID9Qb3B1cDtcbiAgICBfbG5nTGF0OiBMbmdMYXQ7XG4gICAgX3BvczogP1BvaW50O1xuICAgIF9jb2xvcjogP3N0cmluZztcbiAgICBfZGVmYXVsdE1hcmtlcjogYm9vbGVhbjtcbiAgICBfZHJhZ2dhYmxlOiBib29sZWFuO1xuICAgIF9zdGF0ZTogJ2luYWN0aXZlJyB8ICdwZW5kaW5nJyB8ICdhY3RpdmUnOyAvLyB1c2VkIGZvciBoYW5kbGluZyBkcmFnIGV2ZW50c1xuICAgIF9wb3NpdGlvbkRlbHRhOiA/bnVtYmVyO1xuXG4gICAgY29uc3RydWN0b3Iob3B0aW9ucz86IE9wdGlvbnMpIHtcbiAgICAgICAgc3VwZXIoKTtcbiAgICAgICAgLy8gRm9yIGJhY2t3YXJkIGNvbXBhdGliaWxpdHkgLS0gdGhlIGNvbnN0cnVjdG9yIHVzZWQgdG8gYWNjZXB0IHRoZSBlbGVtZW50IGFzIGFcbiAgICAgICAgLy8gcmVxdWlyZWQgZmlyc3QgYXJndW1lbnQsIGJlZm9yZSBpdCB3YXMgbWFkZSBvcHRpb25hbC5cbiAgICAgICAgaWYgKGFyZ3VtZW50c1swXSBpbnN0YW5jZW9mIHdpbmRvdy5IVE1MRWxlbWVudCB8fCBhcmd1bWVudHMubGVuZ3RoID09PSAyKSB7XG4gICAgICAgICAgICBvcHRpb25zID0gZXh0ZW5kKHtlbGVtZW50OiBvcHRpb25zfSwgYXJndW1lbnRzWzFdKTtcbiAgICAgICAgfVxuXG4gICAgICAgIGJpbmRBbGwoW1xuICAgICAgICAgICAgJ191cGRhdGUnLFxuICAgICAgICAgICAgJ19vbk1vdmUnLFxuICAgICAgICAgICAgJ19vblVwJyxcbiAgICAgICAgICAgICdfYWRkRHJhZ0hhbmRsZXInLFxuICAgICAgICAgICAgJ19vbk1hcENsaWNrJ1xuICAgICAgICBdLCB0aGlzKTtcblxuICAgICAgICB0aGlzLl9hbmNob3IgPSBvcHRpb25zICYmIG9wdGlvbnMuYW5jaG9yIHx8ICdjZW50ZXInO1xuICAgICAgICB0aGlzLl9jb2xvciA9IG9wdGlvbnMgJiYgb3B0aW9ucy5jb2xvciB8fCAnIzNGQjFDRSc7XG4gICAgICAgIHRoaXMuX2RyYWdnYWJsZSA9IG9wdGlvbnMgJiYgb3B0aW9ucy5kcmFnZ2FibGUgfHwgZmFsc2U7XG4gICAgICAgIHRoaXMuX3N0YXRlID0gJ2luYWN0aXZlJztcblxuICAgICAgICBpZiAoIW9wdGlvbnMgfHwgIW9wdGlvbnMuZWxlbWVudCkge1xuICAgICAgICAgICAgdGhpcy5fZGVmYXVsdE1hcmtlciA9IHRydWU7XG4gICAgICAgICAgICB0aGlzLl9lbGVtZW50ID0gRE9NLmNyZWF0ZSgnZGl2Jyk7XG5cbiAgICAgICAgICAgIC8vIGNyZWF0ZSBkZWZhdWx0IG1hcCBtYXJrZXIgU1ZHXG4gICAgICAgICAgICBjb25zdCBzdmcgPSBET00uY3JlYXRlTlMoJ2h0dHA6Ly93d3cudzMub3JnLzIwMDAvc3ZnJywgJ3N2ZycpO1xuICAgICAgICAgICAgc3ZnLnNldEF0dHJpYnV0ZU5TKG51bGwsICdoZWlnaHQnLCAnNDFweCcpO1xuICAgICAgICAgICAgc3ZnLnNldEF0dHJpYnV0ZU5TKG51bGwsICd3aWR0aCcsICcyN3B4Jyk7XG4gICAgICAgICAgICBzdmcuc2V0QXR0cmlidXRlTlMobnVsbCwgJ3ZpZXdCb3gnLCAnMCAwIDI3IDQxJyk7XG5cbiAgICAgICAgICAgIGNvbnN0IG1hcmtlckxhcmdlID0gRE9NLmNyZWF0ZU5TKCdodHRwOi8vd3d3LnczLm9yZy8yMDAwL3N2ZycsICdnJyk7XG4gICAgICAgICAgICBtYXJrZXJMYXJnZS5zZXRBdHRyaWJ1dGVOUyhudWxsLCAnc3Ryb2tlJywgJ25vbmUnKTtcbiAgICAgICAgICAgIG1hcmtlckxhcmdlLnNldEF0dHJpYnV0ZU5TKG51bGwsICdzdHJva2Utd2lkdGgnLCAnMScpO1xuICAgICAgICAgICAgbWFya2VyTGFyZ2Uuc2V0QXR0cmlidXRlTlMobnVsbCwgJ2ZpbGwnLCAnbm9uZScpO1xuICAgICAgICAgICAgbWFya2VyTGFyZ2Uuc2V0QXR0cmlidXRlTlMobnVsbCwgJ2ZpbGwtcnVsZScsICdldmVub2RkJyk7XG5cbiAgICAgICAgICAgIGNvbnN0IHBhZ2UxID0gRE9NLmNyZWF0ZU5TKCdodHRwOi8vd3d3LnczLm9yZy8yMDAwL3N2ZycsICdnJyk7XG4gICAgICAgICAgICBwYWdlMS5zZXRBdHRyaWJ1dGVOUyhudWxsLCAnZmlsbC1ydWxlJywgJ25vbnplcm8nKTtcblxuICAgICAgICAgICAgY29uc3Qgc2hhZG93ID0gRE9NLmNyZWF0ZU5TKCdodHRwOi8vd3d3LnczLm9yZy8yMDAwL3N2ZycsICdnJyk7XG4gICAgICAgICAgICBzaGFkb3cuc2V0QXR0cmlidXRlTlMobnVsbCwgJ3RyYW5zZm9ybScsICd0cmFuc2xhdGUoMy4wLCAyOS4wKScpO1xuICAgICAgICAgICAgc2hhZG93LnNldEF0dHJpYnV0ZU5TKG51bGwsICdmaWxsJywgJyMwMDAwMDAnKTtcblxuICAgICAgICAgICAgY29uc3QgZWxsaXBzZXMgPSBbXG4gICAgICAgICAgICAgICAgeydyeCc6ICcxMC41JywgJ3J5JzogJzUuMjUwMDIyNzMnfSxcbiAgICAgICAgICAgICAgICB7J3J4JzogJzEwLjUnLCAncnknOiAnNS4yNTAwMjI3Myd9LFxuICAgICAgICAgICAgICAgIHsncngnOiAnOS41JywgJ3J5JzogJzQuNzcyNzUwMDcnfSxcbiAgICAgICAgICAgICAgICB7J3J4JzogJzguNScsICdyeSc6ICc0LjI5NTQ5OTM2J30sXG4gICAgICAgICAgICAgICAgeydyeCc6ICc3LjUnLCAncnknOiAnMy44MTgyMjMwOCd9LFxuICAgICAgICAgICAgICAgIHsncngnOiAnNi41JywgJ3J5JzogJzMuMzQwOTQ2NzknfSxcbiAgICAgICAgICAgICAgICB7J3J4JzogJzUuNScsICdyeSc6ICcyLjg2MzY3MDUxJ30sXG4gICAgICAgICAgICAgICAgeydyeCc6ICc0LjUnLCAncnknOiAnMi4zODYzNjg2NCd9XG4gICAgICAgICAgICBdO1xuXG4gICAgICAgICAgICBmb3IgKGNvbnN0IGRhdGEgb2YgZWxsaXBzZXMpIHtcbiAgICAgICAgICAgICAgICBjb25zdCBlbGxpcHNlID0gRE9NLmNyZWF0ZU5TKCdodHRwOi8vd3d3LnczLm9yZy8yMDAwL3N2ZycsICdlbGxpcHNlJyk7XG4gICAgICAgICAgICAgICAgZWxsaXBzZS5zZXRBdHRyaWJ1dGVOUyhudWxsLCAnb3BhY2l0eScsICcwLjA0Jyk7XG4gICAgICAgICAgICAgICAgZWxsaXBzZS5zZXRBdHRyaWJ1dGVOUyhudWxsLCAnY3gnLCAnMTAuNScpO1xuICAgICAgICAgICAgICAgIGVsbGlwc2Uuc2V0QXR0cmlidXRlTlMobnVsbCwgJ2N5JywgJzUuODAwMjkwMDgnKTtcbiAgICAgICAgICAgICAgICBlbGxpcHNlLnNldEF0dHJpYnV0ZU5TKG51bGwsICdyeCcsIGRhdGFbJ3J4J10pO1xuICAgICAgICAgICAgICAgIGVsbGlwc2Uuc2V0QXR0cmlidXRlTlMobnVsbCwgJ3J5JywgZGF0YVsncnknXSk7XG4gICAgICAgICAgICAgICAgc2hhZG93LmFwcGVuZENoaWxkKGVsbGlwc2UpO1xuICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICBjb25zdCBiYWNrZ3JvdW5kID0gRE9NLmNyZWF0ZU5TKCdodHRwOi8vd3d3LnczLm9yZy8yMDAwL3N2ZycsICdnJyk7XG4gICAgICAgICAgICBiYWNrZ3JvdW5kLnNldEF0dHJpYnV0ZU5TKG51bGwsICdmaWxsJywgdGhpcy5fY29sb3IpO1xuXG4gICAgICAgICAgICBjb25zdCBiZ1BhdGggPSBET00uY3JlYXRlTlMoJ2h0dHA6Ly93d3cudzMub3JnLzIwMDAvc3ZnJywgJ3BhdGgnKTtcbiAgICAgICAgICAgIGJnUGF0aC5zZXRBdHRyaWJ1dGVOUyhudWxsLCAnZCcsICdNMjcsMTMuNSBDMjcsMTkuMDc0NjQ0IDIwLjI1MDAwMSwyNy4wMDAwMDIgMTQuNzUsMzQuNTAwMDAyIEMxNC4wMTY2NjUsMzUuNTAwMDA0IDEyLjk4MzMzNSwzNS41MDAwMDQgMTIuMjUsMzQuNTAwMDAyIEM2Ljc0OTk5OTMsMjcuMDAwMDAyIDAsMTkuMjIyNTYyIDAsMTMuNSBDMCw2LjA0NDE1NTkgNi4wNDQxNTU5LDAgMTMuNSwwIEMyMC45NTU4NDQsMCAyNyw2LjA0NDE1NTkgMjcsMTMuNSBaJyk7XG5cbiAgICAgICAgICAgIGJhY2tncm91bmQuYXBwZW5kQ2hpbGQoYmdQYXRoKTtcblxuICAgICAgICAgICAgY29uc3QgYm9yZGVyID0gRE9NLmNyZWF0ZU5TKCdodHRwOi8vd3d3LnczLm9yZy8yMDAwL3N2ZycsICdnJyk7XG4gICAgICAgICAgICBib3JkZXIuc2V0QXR0cmlidXRlTlMobnVsbCwgJ29wYWNpdHknLCAnMC4yNScpO1xuICAgICAgICAgICAgYm9yZGVyLnNldEF0dHJpYnV0ZU5TKG51bGwsICdmaWxsJywgJyMwMDAwMDAnKTtcblxuICAgICAgICAgICAgY29uc3QgYm9yZGVyUGF0aCA9IERPTS5jcmVhdGVOUygnaHR0cDovL3d3dy53My5vcmcvMjAwMC9zdmcnLCAncGF0aCcpO1xuICAgICAgICAgICAgYm9yZGVyUGF0aC5zZXRBdHRyaWJ1dGVOUyhudWxsLCAnZCcsICdNMTMuNSwwIEM2LjA0NDE1NTksMCAwLDYuMDQ0MTU1OSAwLDEzLjUgQzAsMTkuMjIyNTYyIDYuNzQ5OTk5MywyNyAxMi4yNSwzNC41IEMxMywzNS41MjI3MjcgMTQuMDE2NjY0LDM1LjUwMDAwNCAxNC43NSwzNC41IEMyMC4yNTAwMDEsMjcgMjcsMTkuMDc0NjQ0IDI3LDEzLjUgQzI3LDYuMDQ0MTU1OSAyMC45NTU4NDQsMCAxMy41LDAgWiBNMTMuNSwxIEMyMC40MTU0MDQsMSAyNiw2LjU4NDU5NiAyNiwxMy41IEMyNiwxNS44OTg2NTcgMjQuNDk1NTg0LDE5LjE4MTQzMSAyMi4yMjA3MDMsMjIuNzM4MjgxIEMxOS45NDU4MjMsMjYuMjk1MTMyIDE2LjcwNTExOSwzMC4xNDIxNjcgMTMuOTQzMzU5LDMzLjkwODIwMyBDMTMuNzQzNDQ1LDM0LjE4MDgxNCAxMy42MTI3MTUsMzQuMzIyNzM4IDEzLjUsMzQuNDQxNDA2IEMxMy4zODcyODUsMzQuMzIyNzM4IDEzLjI1NjU1NSwzNC4xODA4MTQgMTMuMDU2NjQxLDMzLjkwODIwMyBDMTAuMjg0NDgxLDMwLjEyNzk4NSA3LjQxNDg2ODQsMjYuMzE0MTU5IDUuMDE1NjI1LDIyLjc3MzQzOCBDMi42MTYzODE2LDE5LjIzMjcxNSAxLDE1Ljk1MzUzOCAxLDEzLjUgQzEsNi41ODQ1OTYgNi41ODQ1OTYsMSAxMy41LDEgWicpO1xuXG4gICAgICAgICAgICBib3JkZXIuYXBwZW5kQ2hpbGQoYm9yZGVyUGF0aCk7XG5cbiAgICAgICAgICAgIGNvbnN0IG1ha2kgPSBET00uY3JlYXRlTlMoJ2h0dHA6Ly93d3cudzMub3JnLzIwMDAvc3ZnJywgJ2cnKTtcbiAgICAgICAgICAgIG1ha2kuc2V0QXR0cmlidXRlTlMobnVsbCwgJ3RyYW5zZm9ybScsICd0cmFuc2xhdGUoNi4wLCA3LjApJyk7XG4gICAgICAgICAgICBtYWtpLnNldEF0dHJpYnV0ZU5TKG51bGwsICdmaWxsJywgJyNGRkZGRkYnKTtcblxuICAgICAgICAgICAgY29uc3QgY2lyY2xlQ29udGFpbmVyID0gRE9NLmNyZWF0ZU5TKCdodHRwOi8vd3d3LnczLm9yZy8yMDAwL3N2ZycsICdnJyk7XG4gICAgICAgICAgICBjaXJjbGVDb250YWluZXIuc2V0QXR0cmlidXRlTlMobnVsbCwgJ3RyYW5zZm9ybScsICd0cmFuc2xhdGUoOC4wLCA4LjApJyk7XG5cbiAgICAgICAgICAgIGNvbnN0IGNpcmNsZTEgPSBET00uY3JlYXRlTlMoJ2h0dHA6Ly93d3cudzMub3JnLzIwMDAvc3ZnJywgJ2NpcmNsZScpO1xuICAgICAgICAgICAgY2lyY2xlMS5zZXRBdHRyaWJ1dGVOUyhudWxsLCAnZmlsbCcsICcjMDAwMDAwJyk7XG4gICAgICAgICAgICBjaXJjbGUxLnNldEF0dHJpYnV0ZU5TKG51bGwsICdvcGFjaXR5JywgJzAuMjUnKTtcbiAgICAgICAgICAgIGNpcmNsZTEuc2V0QXR0cmlidXRlTlMobnVsbCwgJ2N4JywgJzUuNScpO1xuICAgICAgICAgICAgY2lyY2xlMS5zZXRBdHRyaWJ1dGVOUyhudWxsLCAnY3knLCAnNS41Jyk7XG4gICAgICAgICAgICBjaXJjbGUxLnNldEF0dHJpYnV0ZU5TKG51bGwsICdyJywgJzUuNDk5OTk2MicpO1xuXG4gICAgICAgICAgICBjb25zdCBjaXJjbGUyID0gRE9NLmNyZWF0ZU5TKCdodHRwOi8vd3d3LnczLm9yZy8yMDAwL3N2ZycsICdjaXJjbGUnKTtcbiAgICAgICAgICAgIGNpcmNsZTIuc2V0QXR0cmlidXRlTlMobnVsbCwgJ2ZpbGwnLCAnI0ZGRkZGRicpO1xuICAgICAgICAgICAgY2lyY2xlMi5zZXRBdHRyaWJ1dGVOUyhudWxsLCAnY3gnLCAnNS41Jyk7XG4gICAgICAgICAgICBjaXJjbGUyLnNldEF0dHJpYnV0ZU5TKG51bGwsICdjeScsICc1LjUnKTtcbiAgICAgICAgICAgIGNpcmNsZTIuc2V0QXR0cmlidXRlTlMobnVsbCwgJ3InLCAnNS40OTk5OTYyJyk7XG5cbiAgICAgICAgICAgIGNpcmNsZUNvbnRhaW5lci5hcHBlbmRDaGlsZChjaXJjbGUxKTtcbiAgICAgICAgICAgIGNpcmNsZUNvbnRhaW5lci5hcHBlbmRDaGlsZChjaXJjbGUyKTtcblxuICAgICAgICAgICAgcGFnZTEuYXBwZW5kQ2hpbGQoc2hhZG93KTtcbiAgICAgICAgICAgIHBhZ2UxLmFwcGVuZENoaWxkKGJhY2tncm91bmQpO1xuICAgICAgICAgICAgcGFnZTEuYXBwZW5kQ2hpbGQoYm9yZGVyKTtcbiAgICAgICAgICAgIHBhZ2UxLmFwcGVuZENoaWxkKG1ha2kpO1xuICAgICAgICAgICAgcGFnZTEuYXBwZW5kQ2hpbGQoY2lyY2xlQ29udGFpbmVyKTtcblxuICAgICAgICAgICAgc3ZnLmFwcGVuZENoaWxkKHBhZ2UxKTtcblxuICAgICAgICAgICAgdGhpcy5fZWxlbWVudC5hcHBlbmRDaGlsZChzdmcpO1xuXG4gICAgICAgICAgICAvLyBpZiBubyBlbGVtZW50IGFuZCBubyBvZmZzZXQgb3B0aW9uIGdpdmVuIGFwcGx5IGFuIG9mZnNldCBmb3IgdGhlIGRlZmF1bHQgbWFya2VyXG4gICAgICAgICAgICAvLyB0aGUgLTE0IGFzIHRoZSB5IHZhbHVlIG9mIHRoZSBkZWZhdWx0IG1hcmtlciBvZmZzZXQgd2FzIGRldGVybWluZWQgYXMgZm9sbG93c1xuICAgICAgICAgICAgLy9cbiAgICAgICAgICAgIC8vIHRoZSBtYXJrZXIgdGlwIGlzIGF0IHRoZSBjZW50ZXIgb2YgdGhlIHNoYWRvdyBlbGxpcHNlIGZyb20gdGhlIGRlZmF1bHQgc3ZnXG4gICAgICAgICAgICAvLyB0aGUgeSB2YWx1ZSBvZiB0aGUgY2VudGVyIG9mIHRoZSBzaGFkb3cgZWxsaXBzZSByZWxhdGl2ZSB0byB0aGUgc3ZnIHRvcCBsZWZ0IGlzIFwic2hhZG93IHRyYW5zZm9ybSB0cmFuc2xhdGUteSAoMjkuMCkgKyBlbGxpcHNlIGN5ICg1LjgwMDI5MDA4KVwiXG4gICAgICAgICAgICAvLyBvZmZzZXQgdG8gdGhlIHN2ZyBjZW50ZXIgXCJoZWlnaHQgKDQxIC8gMilcIiBnaXZlcyAoMjkuMCArIDUuODAwMjkwMDgpIC0gKDQxIC8gMikgYW5kIHJvdW5kZWQgZm9yIGFuIGludGVnZXIgcGl4ZWwgb2Zmc2V0IGdpdmVzIDE0XG4gICAgICAgICAgICAvLyBuZWdhdGl2ZSBpcyB1c2VkIHRvIG1vdmUgdGhlIG1hcmtlciB1cCBmcm9tIHRoZSBjZW50ZXIgc28gdGhlIHRpcCBpcyBhdCB0aGUgTWFya2VyIGxuZ0xhdFxuICAgICAgICAgICAgdGhpcy5fb2Zmc2V0ID0gUG9pbnQuY29udmVydChvcHRpb25zICYmIG9wdGlvbnMub2Zmc2V0IHx8IFswLCAtMTRdKTtcbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgIHRoaXMuX2VsZW1lbnQgPSBvcHRpb25zLmVsZW1lbnQ7XG4gICAgICAgICAgICB0aGlzLl9vZmZzZXQgPSBQb2ludC5jb252ZXJ0KG9wdGlvbnMgJiYgb3B0aW9ucy5vZmZzZXQgfHwgWzAsIDBdKTtcbiAgICAgICAgfVxuXG4gICAgICAgIHRoaXMuX2VsZW1lbnQuY2xhc3NMaXN0LmFkZCgnbWFwYm94Z2wtbWFya2VyJyk7XG5cbiAgICAgICAgdGhpcy5fcG9wdXAgPSBudWxsO1xuICAgIH1cblxuICAgIC8qKlxuICAgICAqIEF0dGFjaGVzIHRoZSBtYXJrZXIgdG8gYSBtYXBcbiAgICAgKiBAcGFyYW0ge01hcH0gbWFwXG4gICAgICogQHJldHVybnMge01hcmtlcn0gYHRoaXNgXG4gICAgICovXG4gICAgYWRkVG8obWFwOiBNYXApIHtcbiAgICAgICAgdGhpcy5yZW1vdmUoKTtcbiAgICAgICAgdGhpcy5fbWFwID0gbWFwO1xuICAgICAgICBtYXAuZ2V0Q2FudmFzQ29udGFpbmVyKCkuYXBwZW5kQ2hpbGQodGhpcy5fZWxlbWVudCk7XG4gICAgICAgIG1hcC5vbignbW92ZScsIHRoaXMuX3VwZGF0ZSk7XG4gICAgICAgIG1hcC5vbignbW92ZWVuZCcsIHRoaXMuX3VwZGF0ZSk7XG4gICAgICAgIHRoaXMuc2V0RHJhZ2dhYmxlKHRoaXMuX2RyYWdnYWJsZSk7XG4gICAgICAgIHRoaXMuX3VwZGF0ZSgpO1xuXG4gICAgICAgIC8vIElmIHdlIGF0dGFjaGVkIHRoZSBgY2xpY2tgIGxpc3RlbmVyIHRvIHRoZSBtYXJrZXIgZWxlbWVudCwgdGhlIHBvcHVwXG4gICAgICAgIC8vIHdvdWxkIGNsb3NlIG9uY2UgdGhlIGV2ZW50IHByb3BvZ2F0ZWQgdG8gYG1hcGAgZHVlIHRvIHRoZVxuICAgICAgICAvLyBgUG9wdXAjX29uQ2xpY2tDbG9zZWAgbGlzdGVuZXIuXG4gICAgICAgIHRoaXMuX21hcC5vbignY2xpY2snLCB0aGlzLl9vbk1hcENsaWNrKTtcblxuICAgICAgICByZXR1cm4gdGhpcztcbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBSZW1vdmVzIHRoZSBtYXJrZXIgZnJvbSBhIG1hcFxuICAgICAqIEBleGFtcGxlXG4gICAgICogdmFyIG1hcmtlciA9IG5ldyBtYXBib3hnbC5NYXJrZXIoKS5hZGRUbyhtYXApO1xuICAgICAqIG1hcmtlci5yZW1vdmUoKTtcbiAgICAgKiBAcmV0dXJucyB7TWFya2VyfSBgdGhpc2BcbiAgICAgKi9cbiAgICByZW1vdmUoKSB7XG4gICAgICAgIGlmICh0aGlzLl9tYXApIHtcbiAgICAgICAgICAgIHRoaXMuX21hcC5vZmYoJ2NsaWNrJywgdGhpcy5fb25NYXBDbGljayk7XG4gICAgICAgICAgICB0aGlzLl9tYXAub2ZmKCdtb3ZlJywgdGhpcy5fdXBkYXRlKTtcbiAgICAgICAgICAgIHRoaXMuX21hcC5vZmYoJ21vdmVlbmQnLCB0aGlzLl91cGRhdGUpO1xuICAgICAgICAgICAgdGhpcy5fbWFwLm9mZignbW91c2Vkb3duJywgdGhpcy5fYWRkRHJhZ0hhbmRsZXIpO1xuICAgICAgICAgICAgdGhpcy5fbWFwLm9mZigndG91Y2hzdGFydCcsIHRoaXMuX2FkZERyYWdIYW5kbGVyKTtcbiAgICAgICAgICAgIGRlbGV0ZSB0aGlzLl9tYXA7XG4gICAgICAgIH1cbiAgICAgICAgRE9NLnJlbW92ZSh0aGlzLl9lbGVtZW50KTtcbiAgICAgICAgaWYgKHRoaXMuX3BvcHVwKSB0aGlzLl9wb3B1cC5yZW1vdmUoKTtcbiAgICAgICAgcmV0dXJuIHRoaXM7XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogR2V0IHRoZSBtYXJrZXIncyBnZW9ncmFwaGljYWwgbG9jYXRpb24uXG4gICAgICpcbiAgICAgKiBUaGUgbG9uZ2l0dWRlIG9mIHRoZSByZXN1bHQgbWF5IGRpZmZlciBieSBhIG11bHRpcGxlIG9mIDM2MCBkZWdyZWVzIGZyb20gdGhlIGxvbmdpdHVkZSBwcmV2aW91c2x5XG4gICAgICogc2V0IGJ5IGBzZXRMbmdMYXRgIGJlY2F1c2UgYE1hcmtlcmAgd3JhcHMgdGhlIGFuY2hvciBsb25naXR1ZGUgYWNyb3NzIGNvcGllcyBvZiB0aGUgd29ybGQgdG8ga2VlcFxuICAgICAqIHRoZSBtYXJrZXIgb24gc2NyZWVuLlxuICAgICAqXG4gICAgICogQHJldHVybnMge0xuZ0xhdH1cbiAgICAgKi9cbiAgICBnZXRMbmdMYXQoKSB7XG4gICAgICAgIHJldHVybiB0aGlzLl9sbmdMYXQ7XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogU2V0IHRoZSBtYXJrZXIncyBnZW9ncmFwaGljYWwgcG9zaXRpb24gYW5kIG1vdmUgaXQuXG4gICAgICogQHJldHVybnMge01hcmtlcn0gYHRoaXNgXG4gICAgICovXG4gICAgc2V0TG5nTGF0KGxuZ2xhdDogTG5nTGF0TGlrZSkge1xuICAgICAgICB0aGlzLl9sbmdMYXQgPSBMbmdMYXQuY29udmVydChsbmdsYXQpO1xuICAgICAgICB0aGlzLl9wb3MgPSBudWxsO1xuICAgICAgICBpZiAodGhpcy5fcG9wdXApIHRoaXMuX3BvcHVwLnNldExuZ0xhdCh0aGlzLl9sbmdMYXQpO1xuICAgICAgICB0aGlzLl91cGRhdGUoKTtcbiAgICAgICAgcmV0dXJuIHRoaXM7XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogUmV0dXJucyB0aGUgYE1hcmtlcmAncyBIVE1MIGVsZW1lbnQuXG4gICAgICogQHJldHVybnMge0hUTUxFbGVtZW50fSBlbGVtZW50XG4gICAgICovXG4gICAgZ2V0RWxlbWVudCgpIHtcbiAgICAgICAgcmV0dXJuIHRoaXMuX2VsZW1lbnQ7XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogQmluZHMgYSBQb3B1cCB0byB0aGUgTWFya2VyXG4gICAgICogQHBhcmFtIHBvcHVwIGFuIGluc3RhbmNlIG9mIHRoZSBgUG9wdXBgIGNsYXNzLiBJZiB1bmRlZmluZWQgb3IgbnVsbCwgYW55IHBvcHVwXG4gICAgICogc2V0IG9uIHRoaXMgYE1hcmtlcmAgaW5zdGFuY2UgaXMgdW5zZXRcbiAgICAgKiBAcmV0dXJucyB7TWFya2VyfSBgdGhpc2BcbiAgICAgKi9cbiAgICBzZXRQb3B1cChwb3B1cDogP1BvcHVwKSB7XG4gICAgICAgIGlmICh0aGlzLl9wb3B1cCkge1xuICAgICAgICAgICAgdGhpcy5fcG9wdXAucmVtb3ZlKCk7XG4gICAgICAgICAgICB0aGlzLl9wb3B1cCA9IG51bGw7XG4gICAgICAgIH1cblxuICAgICAgICBpZiAocG9wdXApIHtcbiAgICAgICAgICAgIGlmICghKCdvZmZzZXQnIGluIHBvcHVwLm9wdGlvbnMpKSB7XG4gICAgICAgICAgICAgICAgY29uc3QgbWFya2VySGVpZ2h0ID0gNDEgLSAoNS44IC8gMik7XG4gICAgICAgICAgICAgICAgY29uc3QgbWFya2VyUmFkaXVzID0gMTMuNTtcbiAgICAgICAgICAgICAgICBjb25zdCBsaW5lYXJPZmZzZXQgPSBNYXRoLnNxcnQoTWF0aC5wb3cobWFya2VyUmFkaXVzLCAyKSAvIDIpO1xuICAgICAgICAgICAgICAgIHBvcHVwLm9wdGlvbnMub2Zmc2V0ID0gdGhpcy5fZGVmYXVsdE1hcmtlciA/IHtcbiAgICAgICAgICAgICAgICAgICAgJ3RvcCc6IFswLCAwXSxcbiAgICAgICAgICAgICAgICAgICAgJ3RvcC1sZWZ0JzogWzAsIDBdLFxuICAgICAgICAgICAgICAgICAgICAndG9wLXJpZ2h0JzogWzAsIDBdLFxuICAgICAgICAgICAgICAgICAgICAnYm90dG9tJzogWzAsIC1tYXJrZXJIZWlnaHRdLFxuICAgICAgICAgICAgICAgICAgICAnYm90dG9tLWxlZnQnOiBbbGluZWFyT2Zmc2V0LCAobWFya2VySGVpZ2h0IC0gbWFya2VyUmFkaXVzICsgbGluZWFyT2Zmc2V0KSAqIC0xXSxcbiAgICAgICAgICAgICAgICAgICAgJ2JvdHRvbS1yaWdodCc6IFstbGluZWFyT2Zmc2V0LCAobWFya2VySGVpZ2h0IC0gbWFya2VyUmFkaXVzICsgbGluZWFyT2Zmc2V0KSAqIC0xXSxcbiAgICAgICAgICAgICAgICAgICAgJ2xlZnQnOiBbbWFya2VyUmFkaXVzLCAobWFya2VySGVpZ2h0IC0gbWFya2VyUmFkaXVzKSAqIC0xXSxcbiAgICAgICAgICAgICAgICAgICAgJ3JpZ2h0JzogWy1tYXJrZXJSYWRpdXMsIChtYXJrZXJIZWlnaHQgLSBtYXJrZXJSYWRpdXMpICogLTFdXG4gICAgICAgICAgICAgICAgfSA6IHRoaXMuX29mZnNldDtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIHRoaXMuX3BvcHVwID0gcG9wdXA7XG4gICAgICAgICAgICBpZiAodGhpcy5fbG5nTGF0KSB0aGlzLl9wb3B1cC5zZXRMbmdMYXQodGhpcy5fbG5nTGF0KTtcbiAgICAgICAgfVxuXG4gICAgICAgIHJldHVybiB0aGlzO1xuICAgIH1cblxuICAgIF9vbk1hcENsaWNrKGU6IE1hcE1vdXNlRXZlbnQpIHtcbiAgICAgICAgY29uc3QgdGFyZ2V0RWxlbWVudCA9IGUub3JpZ2luYWxFdmVudC50YXJnZXQ7XG4gICAgICAgIGNvbnN0IGVsZW1lbnQgPSB0aGlzLl9lbGVtZW50O1xuXG4gICAgICAgIGlmICh0aGlzLl9wb3B1cCAmJiAodGFyZ2V0RWxlbWVudCA9PT0gZWxlbWVudCB8fCBlbGVtZW50LmNvbnRhaW5zKCh0YXJnZXRFbGVtZW50OiBhbnkpKSkpIHtcbiAgICAgICAgICAgIHRoaXMudG9nZ2xlUG9wdXAoKTtcbiAgICAgICAgfVxuICAgIH1cblxuICAgIC8qKlxuICAgICAqIFJldHVybnMgdGhlIFBvcHVwIGluc3RhbmNlIHRoYXQgaXMgYm91bmQgdG8gdGhlIE1hcmtlclxuICAgICAqIEByZXR1cm5zIHtQb3B1cH0gcG9wdXBcbiAgICAgKi9cbiAgICBnZXRQb3B1cCgpIHtcbiAgICAgICAgcmV0dXJuIHRoaXMuX3BvcHVwO1xuICAgIH1cblxuICAgIC8qKlxuICAgICAqIE9wZW5zIG9yIGNsb3NlcyB0aGUgYm91bmQgcG9wdXAsIGRlcGVuZGluZyBvbiB0aGUgY3VycmVudCBzdGF0ZVxuICAgICAqIEByZXR1cm5zIHtNYXJrZXJ9IGB0aGlzYFxuICAgICAqL1xuICAgIHRvZ2dsZVBvcHVwKCkge1xuICAgICAgICBjb25zdCBwb3B1cCA9IHRoaXMuX3BvcHVwO1xuXG4gICAgICAgIGlmICghcG9wdXApIHJldHVybiB0aGlzO1xuICAgICAgICBlbHNlIGlmIChwb3B1cC5pc09wZW4oKSkgcG9wdXAucmVtb3ZlKCk7XG4gICAgICAgIGVsc2UgcG9wdXAuYWRkVG8odGhpcy5fbWFwKTtcbiAgICAgICAgcmV0dXJuIHRoaXM7XG4gICAgfVxuXG4gICAgX3VwZGF0ZShlPzoge3R5cGU6ICdtb3ZlJyB8ICdtb3ZlZW5kJ30pIHtcbiAgICAgICAgaWYgKCF0aGlzLl9tYXApIHJldHVybjtcblxuICAgICAgICBpZiAodGhpcy5fbWFwLnRyYW5zZm9ybS5yZW5kZXJXb3JsZENvcGllcykge1xuICAgICAgICAgICAgdGhpcy5fbG5nTGF0ID0gc21hcnRXcmFwKHRoaXMuX2xuZ0xhdCwgdGhpcy5fcG9zLCB0aGlzLl9tYXAudHJhbnNmb3JtKTtcbiAgICAgICAgfVxuXG4gICAgICAgIHRoaXMuX3BvcyA9IHRoaXMuX21hcC5wcm9qZWN0KHRoaXMuX2xuZ0xhdCkuX2FkZCh0aGlzLl9vZmZzZXQpO1xuXG4gICAgICAgIC8vIGJlY2F1c2Ugcm91bmRpbmcgdGhlIGNvb3JkaW5hdGVzIGF0IGV2ZXJ5IGBtb3ZlYCBldmVudCBjYXVzZXMgc3R1dHRlcmVkIHpvb21pbmdcbiAgICAgICAgLy8gd2Ugb25seSByb3VuZCB0aGVtIHdoZW4gX3VwZGF0ZSBpcyBjYWxsZWQgd2l0aCBgbW92ZWVuZGAgb3Igd2hlbiBpdHMgY2FsbGVkIHdpdGhcbiAgICAgICAgLy8gbm8gYXJndW1lbnRzICh3aGVuIHRoZSBNYXJrZXIgaXMgaW5pdGlhbGl6ZWQgb3IgTWFya2VyI3NldExuZ0xhdCBpcyBpbnZva2VkKS5cbiAgICAgICAgaWYgKCFlIHx8IGUudHlwZSA9PT0gXCJtb3ZlZW5kXCIpIHtcbiAgICAgICAgICAgIHRoaXMuX3BvcyA9IHRoaXMuX3Bvcy5yb3VuZCgpO1xuICAgICAgICB9XG5cbiAgICAgICAgRE9NLnNldFRyYW5zZm9ybSh0aGlzLl9lbGVtZW50LCBgJHthbmNob3JUcmFuc2xhdGVbdGhpcy5fYW5jaG9yXX0gdHJhbnNsYXRlKCR7dGhpcy5fcG9zLnh9cHgsICR7dGhpcy5fcG9zLnl9cHgpYCk7XG4gICAgICAgIGFwcGx5QW5jaG9yQ2xhc3ModGhpcy5fZWxlbWVudCwgdGhpcy5fYW5jaG9yLCAnbWFya2VyJyk7XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogR2V0IHRoZSBtYXJrZXIncyBvZmZzZXQuXG4gICAgICogQHJldHVybnMge1BvaW50fVxuICAgICAqL1xuICAgIGdldE9mZnNldCgpIHtcbiAgICAgICAgcmV0dXJuIHRoaXMuX29mZnNldDtcbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBTZXRzIHRoZSBvZmZzZXQgb2YgdGhlIG1hcmtlclxuICAgICAqIEBwYXJhbSB7UG9pbnRMaWtlfSBvZmZzZXQgVGhlIG9mZnNldCBpbiBwaXhlbHMgYXMgYSB7QGxpbmsgUG9pbnRMaWtlfSBvYmplY3QgdG8gYXBwbHkgcmVsYXRpdmUgdG8gdGhlIGVsZW1lbnQncyBjZW50ZXIuIE5lZ2F0aXZlcyBpbmRpY2F0ZSBsZWZ0IGFuZCB1cC5cbiAgICAgKiBAcmV0dXJucyB7TWFya2VyfSBgdGhpc2BcbiAgICAgKi9cbiAgICBzZXRPZmZzZXQob2Zmc2V0OiBQb2ludExpa2UpIHtcbiAgICAgICAgdGhpcy5fb2Zmc2V0ID0gUG9pbnQuY29udmVydChvZmZzZXQpO1xuICAgICAgICB0aGlzLl91cGRhdGUoKTtcbiAgICAgICAgcmV0dXJuIHRoaXM7XG4gICAgfVxuXG4gICAgX29uTW92ZShlOiBNYXBNb3VzZUV2ZW50IHwgTWFwVG91Y2hFdmVudCkge1xuICAgICAgICB0aGlzLl9wb3MgPSBlLnBvaW50LnN1Yih0aGlzLl9wb3NpdGlvbkRlbHRhKTtcbiAgICAgICAgdGhpcy5fbG5nTGF0ID0gdGhpcy5fbWFwLnVucHJvamVjdCh0aGlzLl9wb3MpO1xuICAgICAgICB0aGlzLnNldExuZ0xhdCh0aGlzLl9sbmdMYXQpO1xuICAgICAgICAvLyBzdXBwcmVzcyBjbGljayBldmVudCBzbyB0aGF0IHBvcHVwcyBkb24ndCB0b2dnbGUgb24gZHJhZ1xuICAgICAgICB0aGlzLl9lbGVtZW50LnN0eWxlLnBvaW50ZXJFdmVudHMgPSAnbm9uZSc7XG5cbiAgICAgICAgLy8gbWFrZSBzdXJlIGRyYWdzdGFydCBvbmx5IGZpcmVzIG9uIHRoZSBmaXJzdCBtb3ZlIGV2ZW50IGFmdGVyIG1vdXNlZG93bi5cbiAgICAgICAgLy8gdGhpcyBjYW4ndCBiZSBvbiBtb3VzZWRvd24gYmVjYXVzZSB0aGF0IGV2ZW50IGRvZXNuJ3QgbmVjZXNzYXJpbHlcbiAgICAgICAgLy8gaW1wbHkgdGhhdCBhIGRyYWcgaXMgYWJvdXQgdG8gaGFwcGVuLlxuICAgICAgICBpZiAodGhpcy5fc3RhdGUgPT09ICdwZW5kaW5nJykge1xuICAgICAgICAgICAgdGhpcy5fc3RhdGUgPSAnYWN0aXZlJztcblxuICAgICAgICAgICAgLyoqXG4gICAgICAgICAgICAgKiBGaXJlZCB3aGVuIGRyYWdnaW5nIHN0YXJ0c1xuICAgICAgICAgICAgICpcbiAgICAgICAgICAgICAqIEBldmVudCBkcmFnc3RhcnRcbiAgICAgICAgICAgICAqIEBtZW1iZXJvZiBNYXJrZXJcbiAgICAgICAgICAgICAqIEBpbnN0YW5jZVxuICAgICAgICAgICAgICogQHR5cGUge09iamVjdH1cbiAgICAgICAgICAgICAqIEBwcm9wZXJ0eSB7TWFya2VyfSBtYXJrZXIgb2JqZWN0IHRoYXQgaXMgYmVpbmcgZHJhZ2dlZFxuICAgICAgICAgICAgICovXG4gICAgICAgICAgICB0aGlzLmZpcmUobmV3IEV2ZW50KCdkcmFnc3RhcnQnKSk7XG4gICAgICAgIH1cblxuICAgICAgICAvKipcbiAgICAgICAgICogRmlyZWQgd2hpbGUgZHJhZ2dpbmdcbiAgICAgICAgICpcbiAgICAgICAgICogQGV2ZW50IGRyYWdcbiAgICAgICAgICogQG1lbWJlcm9mIE1hcmtlclxuICAgICAgICAgKiBAaW5zdGFuY2VcbiAgICAgICAgICogQHR5cGUge09iamVjdH1cbiAgICAgICAgICogQHByb3BlcnR5IHtNYXJrZXJ9IG1hcmtlciBvYmplY3QgdGhhdCBpcyBiZWluZyBkcmFnZ2VkXG4gICAgICAgICAqL1xuICAgICAgICB0aGlzLmZpcmUobmV3IEV2ZW50KCdkcmFnJykpO1xuICAgIH1cblxuICAgIF9vblVwKCkge1xuICAgICAgICAvLyByZXZlcnQgdG8gbm9ybWFsIHBvaW50ZXIgZXZlbnQgaGFuZGxpbmdcbiAgICAgICAgdGhpcy5fZWxlbWVudC5zdHlsZS5wb2ludGVyRXZlbnRzID0gJ2F1dG8nO1xuICAgICAgICB0aGlzLl9wb3NpdGlvbkRlbHRhID0gbnVsbDtcbiAgICAgICAgdGhpcy5fbWFwLm9mZignbW91c2Vtb3ZlJywgdGhpcy5fb25Nb3ZlKTtcbiAgICAgICAgdGhpcy5fbWFwLm9mZigndG91Y2htb3ZlJywgdGhpcy5fb25Nb3ZlKTtcblxuICAgICAgICAvLyBvbmx5IGZpcmUgZHJhZ2VuZCBpZiBpdCB3YXMgcHJlY2VkZWQgYnkgYXQgbGVhc3Qgb25lIGRyYWcgZXZlbnRcbiAgICAgICAgaWYgKHRoaXMuX3N0YXRlID09PSAnYWN0aXZlJykge1xuICAgICAgICAgICAgLyoqXG4gICAgICAgICAgICAqIEZpcmVkIHdoZW4gdGhlIG1hcmtlciBpcyBmaW5pc2hlZCBiZWluZyBkcmFnZ2VkXG4gICAgICAgICAgICAqXG4gICAgICAgICAgICAqIEBldmVudCBkcmFnZW5kXG4gICAgICAgICAgICAqIEBtZW1iZXJvZiBNYXJrZXJcbiAgICAgICAgICAgICogQGluc3RhbmNlXG4gICAgICAgICAgICAqIEB0eXBlIHtPYmplY3R9XG4gICAgICAgICAgICAqIEBwcm9wZXJ0eSB7TWFya2VyfSBtYXJrZXIgb2JqZWN0IHRoYXQgd2FzIGRyYWdnZWRcbiAgICAgICAgICAgICovXG4gICAgICAgICAgICB0aGlzLmZpcmUobmV3IEV2ZW50KCdkcmFnZW5kJykpO1xuICAgICAgICB9XG5cbiAgICAgICAgdGhpcy5fc3RhdGUgPSAnaW5hY3RpdmUnO1xuICAgIH1cblxuICAgIF9hZGREcmFnSGFuZGxlcihlOiBNYXBNb3VzZUV2ZW50IHwgTWFwVG91Y2hFdmVudCkge1xuICAgICAgICBpZiAodGhpcy5fZWxlbWVudC5jb250YWlucygoZS5vcmlnaW5hbEV2ZW50LnRhcmdldDogYW55KSkpIHtcbiAgICAgICAgICAgIGUucHJldmVudERlZmF1bHQoKTtcblxuICAgICAgICAgICAgLy8gV2UgbmVlZCB0byBjYWxjdWxhdGUgdGhlIHBpeGVsIGRpc3RhbmNlIGJldHdlZW4gdGhlIGNsaWNrIHBvaW50XG4gICAgICAgICAgICAvLyBhbmQgdGhlIG1hcmtlciBwb3NpdGlvbiwgd2l0aCB0aGUgb2Zmc2V0IGFjY291bnRlZCBmb3IuIFRoZW4gd2VcbiAgICAgICAgICAgIC8vIGNhbiBzdWJ0cmFjdCB0aGlzIGRpc3RhbmNlIGZyb20gdGhlIG1vdXNlbW92ZSBldmVudCdzIHBvc2l0aW9uXG4gICAgICAgICAgICAvLyB0byBjYWxjdWxhdGUgdGhlIG5ldyBtYXJrZXIgcG9zaXRpb24uXG4gICAgICAgICAgICAvLyBJZiB3ZSBkb24ndCBkbyB0aGlzLCB0aGUgbWFya2VyICdqdW1wcycgdG8gdGhlIGNsaWNrIHBvc2l0aW9uXG4gICAgICAgICAgICAvLyBjcmVhdGluZyBhIGphcnJpbmcgVVggZWZmZWN0LlxuICAgICAgICAgICAgdGhpcy5fcG9zaXRpb25EZWx0YSA9IGUucG9pbnQuc3ViKHRoaXMuX3BvcykuYWRkKHRoaXMuX29mZnNldCk7XG5cbiAgICAgICAgICAgIHRoaXMuX3N0YXRlID0gJ3BlbmRpbmcnO1xuICAgICAgICAgICAgdGhpcy5fbWFwLm9uKCdtb3VzZW1vdmUnLCB0aGlzLl9vbk1vdmUpO1xuICAgICAgICAgICAgdGhpcy5fbWFwLm9uKCd0b3VjaG1vdmUnLCB0aGlzLl9vbk1vdmUpO1xuICAgICAgICAgICAgdGhpcy5fbWFwLm9uY2UoJ21vdXNldXAnLCB0aGlzLl9vblVwKTtcbiAgICAgICAgICAgIHRoaXMuX21hcC5vbmNlKCd0b3VjaGVuZCcsIHRoaXMuX29uVXApO1xuICAgICAgICB9XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogU2V0cyB0aGUgYGRyYWdnYWJsZWAgcHJvcGVydHkgYW5kIGZ1bmN0aW9uYWxpdHkgb2YgdGhlIG1hcmtlclxuICAgICAqIEBwYXJhbSB7Ym9vbGVhbn0gW3Nob3VsZEJlRHJhZ2dhYmxlPWZhbHNlXSBUdXJucyBkcmFnIGZ1bmN0aW9uYWxpdHkgb24vb2ZmXG4gICAgICogQHJldHVybnMge01hcmtlcn0gYHRoaXNgXG4gICAgICovXG4gICAgc2V0RHJhZ2dhYmxlKHNob3VsZEJlRHJhZ2dhYmxlOiBib29sZWFuKSB7XG4gICAgICAgIHRoaXMuX2RyYWdnYWJsZSA9ICEhc2hvdWxkQmVEcmFnZ2FibGU7IC8vIGNvbnZlcnQgcG9zc2libGUgdW5kZWZpbmVkIHZhbHVlIHRvIGZhbHNlXG5cbiAgICAgICAgLy8gaGFuZGxlIGNhc2Ugd2hlcmUgbWFwIG1heSBub3QgZXhpc3QgeWV0XG4gICAgICAgIC8vIGUuZy4gd2hlbiBzZXREcmFnZ2FibGUgaXMgY2FsbGVkIGJlZm9yZSBhZGRUb1xuICAgICAgICBpZiAodGhpcy5fbWFwKSB7XG4gICAgICAgICAgICBpZiAoc2hvdWxkQmVEcmFnZ2FibGUpIHtcbiAgICAgICAgICAgICAgICB0aGlzLl9tYXAub24oJ21vdXNlZG93bicsIHRoaXMuX2FkZERyYWdIYW5kbGVyKTtcbiAgICAgICAgICAgICAgICB0aGlzLl9tYXAub24oJ3RvdWNoc3RhcnQnLCB0aGlzLl9hZGREcmFnSGFuZGxlcik7XG4gICAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgICAgIHRoaXMuX21hcC5vZmYoJ21vdXNlZG93bicsIHRoaXMuX2FkZERyYWdIYW5kbGVyKTtcbiAgICAgICAgICAgICAgICB0aGlzLl9tYXAub2ZmKCd0b3VjaHN0YXJ0JywgdGhpcy5fYWRkRHJhZ0hhbmRsZXIpO1xuICAgICAgICAgICAgfVxuICAgICAgICB9XG5cbiAgICAgICAgcmV0dXJuIHRoaXM7XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogUmV0dXJucyB0cnVlIGlmIHRoZSBtYXJrZXIgY2FuIGJlIGRyYWdnZWRcbiAgICAgKiBAcmV0dXJucyB7Ym9vbGVhbn1cbiAgICAgKi9cbiAgICBpc0RyYWdnYWJsZSgpIHtcbiAgICAgICAgcmV0dXJuIHRoaXMuX2RyYWdnYWJsZTtcbiAgICB9XG59XG4iLCIvLyBAZmxvd1xuXG5pbXBvcnQgeyBFdmVudCwgRXZlbnRlZCB9IGZyb20gJy4uLy4uL3V0aWwvZXZlbnRlZCc7XG5pbXBvcnQgRE9NIGZyb20gJy4uLy4uL3V0aWwvZG9tJztcbmltcG9ydCB3aW5kb3cgZnJvbSAnLi4vLi4vdXRpbC93aW5kb3cnO1xuaW1wb3J0IHsgZXh0ZW5kLCBiaW5kQWxsLCB3YXJuT25jZSB9IGZyb20gJy4uLy4uL3V0aWwvdXRpbCc7XG5pbXBvcnQgYXNzZXJ0IGZyb20gJ2Fzc2VydCc7XG5pbXBvcnQgTG5nTGF0IGZyb20gJy4uLy4uL2dlby9sbmdfbGF0JztcbmltcG9ydCBNYXJrZXIgZnJvbSAnLi4vbWFya2VyJztcblxuaW1wb3J0IHR5cGUgTWFwIGZyb20gJy4uL21hcCc7XG5pbXBvcnQgdHlwZSB7IEFuaW1hdGlvbk9wdGlvbnMsIENhbWVyYU9wdGlvbnMgfSBmcm9tICcuLi9jYW1lcmEnO1xuXG50eXBlIE9wdGlvbnMgPSB7XG4gICAgcG9zaXRpb25PcHRpb25zPzogUG9zaXRpb25PcHRpb25zLFxuICAgIGZpdEJvdW5kc09wdGlvbnM/OiBBbmltYXRpb25PcHRpb25zICYgQ2FtZXJhT3B0aW9ucyxcbiAgICB0cmFja1VzZXJMb2NhdGlvbj86IGJvb2xlYW4sXG4gICAgc2hvd1VzZXJMb2NhdGlvbj86IGJvb2xlYW5cbn07XG5cbmNvbnN0IGRlZmF1bHRPcHRpb25zOiBPcHRpb25zID0ge1xuICAgIHBvc2l0aW9uT3B0aW9uczoge1xuICAgICAgICBlbmFibGVIaWdoQWNjdXJhY3k6IGZhbHNlLFxuICAgICAgICBtYXhpbXVtQWdlOiAwLFxuICAgICAgICB0aW1lb3V0OiA2MDAwIC8qIDYgc2VjICovXG4gICAgfSxcbiAgICBmaXRCb3VuZHNPcHRpb25zOiB7XG4gICAgICAgIG1heFpvb206IDE1XG4gICAgfSxcbiAgICB0cmFja1VzZXJMb2NhdGlvbjogZmFsc2UsXG4gICAgc2hvd1VzZXJMb2NhdGlvbjogdHJ1ZVxufTtcbmNvbnN0IGNsYXNzTmFtZSA9ICdtYXBib3hnbC1jdHJsJztcblxubGV0IHN1cHBvcnRzR2VvbG9jYXRpb247XG5cbmZ1bmN0aW9uIGNoZWNrR2VvbG9jYXRpb25TdXBwb3J0KGNhbGxiYWNrKSB7XG4gICAgaWYgKHN1cHBvcnRzR2VvbG9jYXRpb24gIT09IHVuZGVmaW5lZCkge1xuICAgICAgICBjYWxsYmFjayhzdXBwb3J0c0dlb2xvY2F0aW9uKTtcblxuICAgIH0gZWxzZSBpZiAod2luZG93Lm5hdmlnYXRvci5wZXJtaXNzaW9ucyAhPT0gdW5kZWZpbmVkKSB7XG4gICAgICAgIC8vIG5hdmlnYXRvci5wZXJtaXNzaW9ucyBoYXMgaW5jb21wbGV0ZSBicm93c2VyIHN1cHBvcnRcbiAgICAgICAgLy8gaHR0cDovL2Nhbml1c2UuY29tLyNmZWF0PXBlcm1pc3Npb25zLWFwaVxuICAgICAgICAvLyBUZXN0IGZvciB0aGUgY2FzZSB3aGVyZSBhIGJyb3dzZXIgZGlzYWJsZXMgR2VvbG9jYXRpb24gYmVjYXVzZSBvZiBhblxuICAgICAgICAvLyBpbnNlY3VyZSBvcmlnaW5cbiAgICAgICAgd2luZG93Lm5hdmlnYXRvci5wZXJtaXNzaW9ucy5xdWVyeSh7IG5hbWU6ICdnZW9sb2NhdGlvbicgfSkudGhlbigocCkgPT4ge1xuICAgICAgICAgICAgc3VwcG9ydHNHZW9sb2NhdGlvbiA9IHAuc3RhdGUgIT09ICdkZW5pZWQnO1xuICAgICAgICAgICAgY2FsbGJhY2soc3VwcG9ydHNHZW9sb2NhdGlvbik7XG4gICAgICAgIH0pO1xuXG4gICAgfSBlbHNlIHtcbiAgICAgICAgc3VwcG9ydHNHZW9sb2NhdGlvbiA9ICEhd2luZG93Lm5hdmlnYXRvci5nZW9sb2NhdGlvbjtcbiAgICAgICAgY2FsbGJhY2soc3VwcG9ydHNHZW9sb2NhdGlvbik7XG4gICAgfVxufVxuXG4vKipcbiAqIEEgYEdlb2xvY2F0ZUNvbnRyb2xgIGNvbnRyb2wgcHJvdmlkZXMgYSBidXR0b24gdGhhdCB1c2VzIHRoZSBicm93c2VyJ3MgZ2VvbG9jYXRpb25cbiAqIEFQSSB0byBsb2NhdGUgdGhlIHVzZXIgb24gdGhlIG1hcC5cbiAqXG4gKiBOb3QgYWxsIGJyb3dzZXJzIHN1cHBvcnQgZ2VvbG9jYXRpb24sXG4gKiBhbmQgc29tZSB1c2VycyBtYXkgZGlzYWJsZSB0aGUgZmVhdHVyZS4gR2VvbG9jYXRpb24gc3VwcG9ydCBmb3IgbW9kZXJuXG4gKiBicm93c2VycyBpbmNsdWRpbmcgQ2hyb21lIHJlcXVpcmVzIHNpdGVzIHRvIGJlIHNlcnZlZCBvdmVyIEhUVFBTLiBJZlxuICogZ2VvbG9jYXRpb24gc3VwcG9ydCBpcyBub3QgYXZhaWxhYmxlLCB0aGUgR2VvbG9jYXRlQ29udHJvbCB3aWxsIG5vdFxuICogYmUgdmlzaWJsZS5cbiAqXG4gKiBUaGUgem9vbSBsZXZlbCBhcHBsaWVkIHdpbGwgZGVwZW5kIG9uIHRoZSBhY2N1cmFjeSBvZiB0aGUgZ2VvbG9jYXRpb24gcHJvdmlkZWQgYnkgdGhlIGRldmljZS5cbiAqXG4gKiBUaGUgR2VvbG9jYXRlQ29udHJvbCBoYXMgdHdvIG1vZGVzLiBJZiBgdHJhY2tVc2VyTG9jYXRpb25gIGlzIGBmYWxzZWAgKGRlZmF1bHQpIHRoZSBjb250cm9sIGFjdHMgYXMgYSBidXR0b24sIHdoaWNoIHdoZW4gcHJlc3NlZCB3aWxsIHNldCB0aGUgbWFwJ3MgY2FtZXJhIHRvIHRhcmdldCB0aGUgdXNlciBsb2NhdGlvbi4gSWYgdGhlIHVzZXIgbW92ZXMsIHRoZSBtYXAgd29uJ3QgdXBkYXRlLiBUaGlzIGlzIG1vc3Qgc3VpdGVkIGZvciB0aGUgZGVza3RvcC4gSWYgYHRyYWNrVXNlckxvY2F0aW9uYCBpcyBgdHJ1ZWAgdGhlIGNvbnRyb2wgYWN0cyBhcyBhIHRvZ2dsZSBidXR0b24gdGhhdCB3aGVuIGFjdGl2ZSB0aGUgdXNlcidzIGxvY2F0aW9uIGlzIGFjdGl2ZWx5IG1vbml0b3JlZCBmb3IgY2hhbmdlcy4gSW4gdGhpcyBtb2RlIHRoZSBHZW9sb2NhdGVDb250cm9sIGhhcyB0aHJlZSBzdGF0ZXM6XG4gKiAqIGFjdGl2ZSAtIHRoZSBtYXAncyBjYW1lcmEgYXV0b21hdGljYWxseSB1cGRhdGVzIGFzIHRoZSB1c2VyJ3MgbG9jYXRpb24gY2hhbmdlcywga2VlcGluZyB0aGUgbG9jYXRpb24gZG90IGluIHRoZSBjZW50ZXIuXG4gKiAqIHBhc3NpdmUgLSB0aGUgdXNlcidzIGxvY2F0aW9uIGRvdCBhdXRvbWF0aWNhbGx5IHVwZGF0ZXMsIGJ1dCB0aGUgbWFwJ3MgY2FtZXJhIGRvZXMgbm90LlxuICogKiBkaXNhYmxlZFxuICpcbiAqIEBpbXBsZW1lbnRzIHtJQ29udHJvbH1cbiAqIEBwYXJhbSB7T2JqZWN0fSBbb3B0aW9uc11cbiAqIEBwYXJhbSB7T2JqZWN0fSBbb3B0aW9ucy5wb3NpdGlvbk9wdGlvbnM9e2VuYWJsZUhpZ2hBY2N1cmFjeTogZmFsc2UsIHRpbWVvdXQ6IDYwMDB9XSBBIEdlb2xvY2F0aW9uIEFQSSBbUG9zaXRpb25PcHRpb25zXShodHRwczovL2RldmVsb3Blci5tb3ppbGxhLm9yZy9lbi1VUy9kb2NzL1dlYi9BUEkvUG9zaXRpb25PcHRpb25zKSBvYmplY3QuXG4gKiBAcGFyYW0ge09iamVjdH0gW29wdGlvbnMuZml0Qm91bmRzT3B0aW9ucz17bWF4Wm9vbTogMTV9XSBBIFtgZml0Qm91bmRzYF0oI01hcCNmaXRCb3VuZHMpIG9wdGlvbnMgb2JqZWN0IHRvIHVzZSB3aGVuIHRoZSBtYXAgaXMgcGFubmVkIGFuZCB6b29tZWQgdG8gdGhlIHVzZXIncyBsb2NhdGlvbi4gVGhlIGRlZmF1bHQgaXMgdG8gdXNlIGEgYG1heFpvb21gIG9mIDE1IHRvIGxpbWl0IGhvdyBmYXIgdGhlIG1hcCB3aWxsIHpvb20gaW4gZm9yIHZlcnkgYWNjdXJhdGUgbG9jYXRpb25zLlxuICogQHBhcmFtIHtPYmplY3R9IFtvcHRpb25zLnRyYWNrVXNlckxvY2F0aW9uPWZhbHNlXSBJZiBgdHJ1ZWAgdGhlIEdlb2xvY2F0ZSBDb250cm9sIGJlY29tZXMgYSB0b2dnbGUgYnV0dG9uIGFuZCB3aGVuIGFjdGl2ZSB0aGUgbWFwIHdpbGwgcmVjZWl2ZSB1cGRhdGVzIHRvIHRoZSB1c2VyJ3MgbG9jYXRpb24gYXMgaXQgY2hhbmdlcy5cbiAqIEBwYXJhbSB7T2JqZWN0fSBbb3B0aW9ucy5zaG93VXNlckxvY2F0aW9uPXRydWVdIEJ5IGRlZmF1bHQgYSBkb3Qgd2lsbCBiZSBzaG93biBvbiB0aGUgbWFwIGF0IHRoZSB1c2VyJ3MgbG9jYXRpb24uIFNldCB0byBgZmFsc2VgIHRvIGRpc2FibGUuXG4gKlxuICogQGV4YW1wbGVcbiAqIG1hcC5hZGRDb250cm9sKG5ldyBtYXBib3hnbC5HZW9sb2NhdGVDb250cm9sKHtcbiAqICAgICBwb3NpdGlvbk9wdGlvbnM6IHtcbiAqICAgICAgICAgZW5hYmxlSGlnaEFjY3VyYWN5OiB0cnVlXG4gKiAgICAgfSxcbiAqICAgICB0cmFja1VzZXJMb2NhdGlvbjogdHJ1ZVxuICogfSkpO1xuICogQHNlZSBbTG9jYXRlIHRoZSB1c2VyXShodHRwczovL3d3dy5tYXBib3guY29tL21hcGJveC1nbC1qcy9leGFtcGxlL2xvY2F0ZS11c2VyLylcbiAqL1xuY2xhc3MgR2VvbG9jYXRlQ29udHJvbCBleHRlbmRzIEV2ZW50ZWQge1xuICAgIF9tYXA6IE1hcDtcbiAgICBvcHRpb25zOiBPcHRpb25zO1xuICAgIF9jb250YWluZXI6IEhUTUxFbGVtZW50O1xuICAgIF9kb3RFbGVtZW50OiBIVE1MRWxlbWVudDtcbiAgICBfZ2VvbG9jYXRlQnV0dG9uOiBIVE1MRWxlbWVudDtcbiAgICBfZ2VvbG9jYXRpb25XYXRjaElEOiBudW1iZXI7XG4gICAgX3RpbWVvdXRJZDogP1RpbWVvdXRJRDtcbiAgICBfd2F0Y2hTdGF0ZTogc3RyaW5nO1xuICAgIF9sYXN0S25vd25Qb3NpdGlvbjogYW55O1xuICAgIF91c2VyTG9jYXRpb25Eb3RNYXJrZXI6IE1hcmtlcjtcbiAgICBfc2V0dXA6IGJvb2xlYW47IC8vIHNldCB0byB0cnVlIG9uY2UgdGhlIGNvbnRyb2wgaGFzIGJlZW4gc2V0dXBcblxuICAgIGNvbnN0cnVjdG9yKG9wdGlvbnM6IE9wdGlvbnMpIHtcbiAgICAgICAgc3VwZXIoKTtcbiAgICAgICAgdGhpcy5vcHRpb25zID0gZXh0ZW5kKHt9LCBkZWZhdWx0T3B0aW9ucywgb3B0aW9ucyk7XG5cbiAgICAgICAgYmluZEFsbChbXG4gICAgICAgICAgICAnX29uU3VjY2VzcycsXG4gICAgICAgICAgICAnX29uRXJyb3InLFxuICAgICAgICAgICAgJ19maW5pc2gnLFxuICAgICAgICAgICAgJ19zZXR1cFVJJyxcbiAgICAgICAgICAgICdfdXBkYXRlQ2FtZXJhJyxcbiAgICAgICAgICAgICdfdXBkYXRlTWFya2VyJ1xuICAgICAgICBdLCB0aGlzKTtcbiAgICB9XG5cbiAgICBvbkFkZChtYXA6IE1hcCkge1xuICAgICAgICB0aGlzLl9tYXAgPSBtYXA7XG4gICAgICAgIHRoaXMuX2NvbnRhaW5lciA9IERPTS5jcmVhdGUoJ2RpdicsIGAke2NsYXNzTmFtZX0gJHtjbGFzc05hbWV9LWdyb3VwYCk7XG4gICAgICAgIGNoZWNrR2VvbG9jYXRpb25TdXBwb3J0KHRoaXMuX3NldHVwVUkpO1xuICAgICAgICByZXR1cm4gdGhpcy5fY29udGFpbmVyO1xuICAgIH1cblxuICAgIG9uUmVtb3ZlKCkge1xuICAgICAgICAvLyBjbGVhciB0aGUgZ2VvbG9jYXRpb24gd2F0Y2ggaWYgZXhpc3RzXG4gICAgICAgIGlmICh0aGlzLl9nZW9sb2NhdGlvbldhdGNoSUQgIT09IHVuZGVmaW5lZCkge1xuICAgICAgICAgICAgd2luZG93Lm5hdmlnYXRvci5nZW9sb2NhdGlvbi5jbGVhcldhdGNoKHRoaXMuX2dlb2xvY2F0aW9uV2F0Y2hJRCk7XG4gICAgICAgICAgICB0aGlzLl9nZW9sb2NhdGlvbldhdGNoSUQgPSAodW5kZWZpbmVkOiBhbnkpO1xuICAgICAgICB9XG5cbiAgICAgICAgLy8gY2xlYXIgdGhlIG1hcmtlciBmcm9tIHRoZSBtYXBcbiAgICAgICAgaWYgKHRoaXMub3B0aW9ucy5zaG93VXNlckxvY2F0aW9uICYmIHRoaXMuX3VzZXJMb2NhdGlvbkRvdE1hcmtlcikge1xuICAgICAgICAgICAgdGhpcy5fdXNlckxvY2F0aW9uRG90TWFya2VyLnJlbW92ZSgpO1xuICAgICAgICB9XG5cbiAgICAgICAgRE9NLnJlbW92ZSh0aGlzLl9jb250YWluZXIpO1xuICAgICAgICB0aGlzLl9tYXAgPSAodW5kZWZpbmVkOiBhbnkpO1xuICAgIH1cblxuICAgIF9vblN1Y2Nlc3MocG9zaXRpb246IFBvc2l0aW9uKSB7XG4gICAgICAgIGlmICh0aGlzLm9wdGlvbnMudHJhY2tVc2VyTG9jYXRpb24pIHtcbiAgICAgICAgICAgIC8vIGtlZXAgYSByZWNvcmQgb2YgdGhlIHBvc2l0aW9uIHNvIHRoYXQgaWYgdGhlIHN0YXRlIGlzIEJBQ0tHUk9VTkQgYW5kIHRoZSB1c2VyXG4gICAgICAgICAgICAvLyBjbGlja3MgdGhlIGJ1dHRvbiwgd2UgY2FuIG1vdmUgdG8gQUNUSVZFX0xPQ0sgaW1tZWRpYXRlbHkgd2l0aG91dCB3YWl0aW5nIGZvclxuICAgICAgICAgICAgLy8gd2F0Y2hQb3NpdGlvbiB0byB0cmlnZ2VyIF9vblN1Y2Nlc3NcbiAgICAgICAgICAgIHRoaXMuX2xhc3RLbm93blBvc2l0aW9uID0gcG9zaXRpb247XG5cbiAgICAgICAgICAgIHN3aXRjaCAodGhpcy5fd2F0Y2hTdGF0ZSkge1xuICAgICAgICAgICAgY2FzZSAnV0FJVElOR19BQ1RJVkUnOlxuICAgICAgICAgICAgY2FzZSAnQUNUSVZFX0xPQ0snOlxuICAgICAgICAgICAgY2FzZSAnQUNUSVZFX0VSUk9SJzpcbiAgICAgICAgICAgICAgICB0aGlzLl93YXRjaFN0YXRlID0gJ0FDVElWRV9MT0NLJztcbiAgICAgICAgICAgICAgICB0aGlzLl9nZW9sb2NhdGVCdXR0b24uY2xhc3NMaXN0LnJlbW92ZSgnbWFwYm94Z2wtY3RybC1nZW9sb2NhdGUtd2FpdGluZycpO1xuICAgICAgICAgICAgICAgIHRoaXMuX2dlb2xvY2F0ZUJ1dHRvbi5jbGFzc0xpc3QucmVtb3ZlKCdtYXBib3hnbC1jdHJsLWdlb2xvY2F0ZS1hY3RpdmUtZXJyb3InKTtcbiAgICAgICAgICAgICAgICB0aGlzLl9nZW9sb2NhdGVCdXR0b24uY2xhc3NMaXN0LmFkZCgnbWFwYm94Z2wtY3RybC1nZW9sb2NhdGUtYWN0aXZlJyk7XG4gICAgICAgICAgICAgICAgYnJlYWs7XG4gICAgICAgICAgICBjYXNlICdCQUNLR1JPVU5EJzpcbiAgICAgICAgICAgIGNhc2UgJ0JBQ0tHUk9VTkRfRVJST1InOlxuICAgICAgICAgICAgICAgIHRoaXMuX3dhdGNoU3RhdGUgPSAnQkFDS0dST1VORCc7XG4gICAgICAgICAgICAgICAgdGhpcy5fZ2VvbG9jYXRlQnV0dG9uLmNsYXNzTGlzdC5yZW1vdmUoJ21hcGJveGdsLWN0cmwtZ2VvbG9jYXRlLXdhaXRpbmcnKTtcbiAgICAgICAgICAgICAgICB0aGlzLl9nZW9sb2NhdGVCdXR0b24uY2xhc3NMaXN0LnJlbW92ZSgnbWFwYm94Z2wtY3RybC1nZW9sb2NhdGUtYmFja2dyb3VuZC1lcnJvcicpO1xuICAgICAgICAgICAgICAgIHRoaXMuX2dlb2xvY2F0ZUJ1dHRvbi5jbGFzc0xpc3QuYWRkKCdtYXBib3hnbC1jdHJsLWdlb2xvY2F0ZS1iYWNrZ3JvdW5kJyk7XG4gICAgICAgICAgICAgICAgYnJlYWs7XG4gICAgICAgICAgICBkZWZhdWx0OlxuICAgICAgICAgICAgICAgIGFzc2VydChmYWxzZSwgYFVuZXhwZWN0ZWQgd2F0Y2hTdGF0ZSAke3RoaXMuX3dhdGNoU3RhdGV9YCk7XG4gICAgICAgICAgICB9XG4gICAgICAgIH1cblxuICAgICAgICAvLyBpZiBzaG93VXNlckxvY2F0aW9uIGFuZCB0aGUgd2F0Y2ggc3RhdGUgaXNuJ3Qgb2ZmIHRoZW4gdXBkYXRlIHRoZSBtYXJrZXIgbG9jYXRpb25cbiAgICAgICAgaWYgKHRoaXMub3B0aW9ucy5zaG93VXNlckxvY2F0aW9uICYmIHRoaXMuX3dhdGNoU3RhdGUgIT09ICdPRkYnKSB7XG4gICAgICAgICAgICB0aGlzLl91cGRhdGVNYXJrZXIocG9zaXRpb24pO1xuICAgICAgICB9XG5cbiAgICAgICAgLy8gaWYgaW4gbm9ybWFsIG1vZGUgKG5vdCB3YXRjaCBtb2RlKSwgb3IgaWYgaW4gd2F0Y2ggbW9kZSBhbmQgdGhlIHN0YXRlIGlzIGFjdGl2ZSB3YXRjaFxuICAgICAgICAvLyB0aGVuIHVwZGF0ZSB0aGUgY2FtZXJhXG4gICAgICAgIGlmICghdGhpcy5vcHRpb25zLnRyYWNrVXNlckxvY2F0aW9uIHx8IHRoaXMuX3dhdGNoU3RhdGUgPT09ICdBQ1RJVkVfTE9DSycpIHtcbiAgICAgICAgICAgIHRoaXMuX3VwZGF0ZUNhbWVyYShwb3NpdGlvbik7XG4gICAgICAgIH1cblxuICAgICAgICBpZiAodGhpcy5vcHRpb25zLnNob3dVc2VyTG9jYXRpb24pIHtcbiAgICAgICAgICAgIHRoaXMuX2RvdEVsZW1lbnQuY2xhc3NMaXN0LnJlbW92ZSgnbWFwYm94Z2wtdXNlci1sb2NhdGlvbi1kb3Qtc3RhbGUnKTtcbiAgICAgICAgfVxuXG4gICAgICAgIHRoaXMuZmlyZShuZXcgRXZlbnQoJ2dlb2xvY2F0ZScsIHBvc2l0aW9uKSk7XG4gICAgICAgIHRoaXMuX2ZpbmlzaCgpO1xuICAgIH1cblxuICAgIF91cGRhdGVDYW1lcmEocG9zaXRpb246IFBvc2l0aW9uKSB7XG4gICAgICAgIGNvbnN0IGNlbnRlciA9IG5ldyBMbmdMYXQocG9zaXRpb24uY29vcmRzLmxvbmdpdHVkZSwgcG9zaXRpb24uY29vcmRzLmxhdGl0dWRlKTtcbiAgICAgICAgY29uc3QgcmFkaXVzID0gcG9zaXRpb24uY29vcmRzLmFjY3VyYWN5O1xuXG4gICAgICAgIHRoaXMuX21hcC5maXRCb3VuZHMoY2VudGVyLnRvQm91bmRzKHJhZGl1cyksIHRoaXMub3B0aW9ucy5maXRCb3VuZHNPcHRpb25zLCB7XG4gICAgICAgICAgICBnZW9sb2NhdGVTb3VyY2U6IHRydWUgLy8gdGFnIHRoaXMgY2FtZXJhIGNoYW5nZSBzbyBpdCB3b24ndCBjYXVzZSB0aGUgY29udHJvbCB0byBjaGFuZ2UgdG8gYmFja2dyb3VuZCBzdGF0ZVxuICAgICAgICB9KTtcbiAgICB9XG5cbiAgICBfdXBkYXRlTWFya2VyKHBvc2l0aW9uOiA/UG9zaXRpb24pIHtcbiAgICAgICAgaWYgKHBvc2l0aW9uKSB7XG4gICAgICAgICAgICB0aGlzLl91c2VyTG9jYXRpb25Eb3RNYXJrZXIuc2V0TG5nTGF0KFtwb3NpdGlvbi5jb29yZHMubG9uZ2l0dWRlLCBwb3NpdGlvbi5jb29yZHMubGF0aXR1ZGVdKS5hZGRUbyh0aGlzLl9tYXApO1xuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgdGhpcy5fdXNlckxvY2F0aW9uRG90TWFya2VyLnJlbW92ZSgpO1xuICAgICAgICB9XG4gICAgfVxuXG4gICAgX29uRXJyb3IoZXJyb3I6IFBvc2l0aW9uRXJyb3IpIHtcbiAgICAgICAgaWYgKHRoaXMub3B0aW9ucy50cmFja1VzZXJMb2NhdGlvbikge1xuICAgICAgICAgICAgaWYgKGVycm9yLmNvZGUgPT09IDEpIHtcbiAgICAgICAgICAgICAgICAvLyBQRVJNSVNTSU9OX0RFTklFRFxuICAgICAgICAgICAgICAgIHRoaXMuX3dhdGNoU3RhdGUgPSAnT0ZGJztcbiAgICAgICAgICAgICAgICB0aGlzLl9nZW9sb2NhdGVCdXR0b24uY2xhc3NMaXN0LnJlbW92ZSgnbWFwYm94Z2wtY3RybC1nZW9sb2NhdGUtd2FpdGluZycpO1xuICAgICAgICAgICAgICAgIHRoaXMuX2dlb2xvY2F0ZUJ1dHRvbi5jbGFzc0xpc3QucmVtb3ZlKCdtYXBib3hnbC1jdHJsLWdlb2xvY2F0ZS1hY3RpdmUnKTtcbiAgICAgICAgICAgICAgICB0aGlzLl9nZW9sb2NhdGVCdXR0b24uY2xhc3NMaXN0LnJlbW92ZSgnbWFwYm94Z2wtY3RybC1nZW9sb2NhdGUtYWN0aXZlLWVycm9yJyk7XG4gICAgICAgICAgICAgICAgdGhpcy5fZ2VvbG9jYXRlQnV0dG9uLmNsYXNzTGlzdC5yZW1vdmUoJ21hcGJveGdsLWN0cmwtZ2VvbG9jYXRlLWJhY2tncm91bmQnKTtcbiAgICAgICAgICAgICAgICB0aGlzLl9nZW9sb2NhdGVCdXR0b24uY2xhc3NMaXN0LnJlbW92ZSgnbWFwYm94Z2wtY3RybC1nZW9sb2NhdGUtYmFja2dyb3VuZC1lcnJvcicpO1xuXG4gICAgICAgICAgICAgICAgaWYgKHRoaXMuX2dlb2xvY2F0aW9uV2F0Y2hJRCAhPT0gdW5kZWZpbmVkKSB7XG4gICAgICAgICAgICAgICAgICAgIHRoaXMuX2NsZWFyV2F0Y2goKTtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgICAgIHN3aXRjaCAodGhpcy5fd2F0Y2hTdGF0ZSkge1xuICAgICAgICAgICAgICAgIGNhc2UgJ1dBSVRJTkdfQUNUSVZFJzpcbiAgICAgICAgICAgICAgICAgICAgdGhpcy5fd2F0Y2hTdGF0ZSA9ICdBQ1RJVkVfRVJST1InO1xuICAgICAgICAgICAgICAgICAgICB0aGlzLl9nZW9sb2NhdGVCdXR0b24uY2xhc3NMaXN0LnJlbW92ZSgnbWFwYm94Z2wtY3RybC1nZW9sb2NhdGUtYWN0aXZlJyk7XG4gICAgICAgICAgICAgICAgICAgIHRoaXMuX2dlb2xvY2F0ZUJ1dHRvbi5jbGFzc0xpc3QuYWRkKCdtYXBib3hnbC1jdHJsLWdlb2xvY2F0ZS1hY3RpdmUtZXJyb3InKTtcbiAgICAgICAgICAgICAgICAgICAgYnJlYWs7XG4gICAgICAgICAgICAgICAgY2FzZSAnQUNUSVZFX0xPQ0snOlxuICAgICAgICAgICAgICAgICAgICB0aGlzLl93YXRjaFN0YXRlID0gJ0FDVElWRV9FUlJPUic7XG4gICAgICAgICAgICAgICAgICAgIHRoaXMuX2dlb2xvY2F0ZUJ1dHRvbi5jbGFzc0xpc3QucmVtb3ZlKCdtYXBib3hnbC1jdHJsLWdlb2xvY2F0ZS1hY3RpdmUnKTtcbiAgICAgICAgICAgICAgICAgICAgdGhpcy5fZ2VvbG9jYXRlQnV0dG9uLmNsYXNzTGlzdC5hZGQoJ21hcGJveGdsLWN0cmwtZ2VvbG9jYXRlLWFjdGl2ZS1lcnJvcicpO1xuICAgICAgICAgICAgICAgICAgICB0aGlzLl9nZW9sb2NhdGVCdXR0b24uY2xhc3NMaXN0LmFkZCgnbWFwYm94Z2wtY3RybC1nZW9sb2NhdGUtd2FpdGluZycpO1xuICAgICAgICAgICAgICAgICAgICAvLyB0dXJuIG1hcmtlciBncmV5XG4gICAgICAgICAgICAgICAgICAgIGJyZWFrO1xuICAgICAgICAgICAgICAgIGNhc2UgJ0JBQ0tHUk9VTkQnOlxuICAgICAgICAgICAgICAgICAgICB0aGlzLl93YXRjaFN0YXRlID0gJ0JBQ0tHUk9VTkRfRVJST1InO1xuICAgICAgICAgICAgICAgICAgICB0aGlzLl9nZW9sb2NhdGVCdXR0b24uY2xhc3NMaXN0LnJlbW92ZSgnbWFwYm94Z2wtY3RybC1nZW9sb2NhdGUtYmFja2dyb3VuZCcpO1xuICAgICAgICAgICAgICAgICAgICB0aGlzLl9nZW9sb2NhdGVCdXR0b24uY2xhc3NMaXN0LmFkZCgnbWFwYm94Z2wtY3RybC1nZW9sb2NhdGUtYmFja2dyb3VuZC1lcnJvcicpO1xuICAgICAgICAgICAgICAgICAgICB0aGlzLl9nZW9sb2NhdGVCdXR0b24uY2xhc3NMaXN0LmFkZCgnbWFwYm94Z2wtY3RybC1nZW9sb2NhdGUtd2FpdGluZycpO1xuICAgICAgICAgICAgICAgICAgICAvLyB0dXJuIG1hcmtlciBncmV5XG4gICAgICAgICAgICAgICAgICAgIGJyZWFrO1xuICAgICAgICAgICAgICAgIGNhc2UgJ0FDVElWRV9FUlJPUic6XG4gICAgICAgICAgICAgICAgICAgIGJyZWFrO1xuICAgICAgICAgICAgICAgIGRlZmF1bHQ6XG4gICAgICAgICAgICAgICAgICAgIGFzc2VydChmYWxzZSwgYFVuZXhwZWN0ZWQgd2F0Y2hTdGF0ZSAke3RoaXMuX3dhdGNoU3RhdGV9YCk7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfVxuICAgICAgICB9XG5cbiAgICAgICAgaWYgKHRoaXMuX3dhdGNoU3RhdGUgIT09ICdPRkYnICYmIHRoaXMub3B0aW9ucy5zaG93VXNlckxvY2F0aW9uKSB7XG4gICAgICAgICAgICB0aGlzLl9kb3RFbGVtZW50LmNsYXNzTGlzdC5hZGQoJ21hcGJveGdsLXVzZXItbG9jYXRpb24tZG90LXN0YWxlJyk7XG4gICAgICAgIH1cblxuICAgICAgICB0aGlzLmZpcmUobmV3IEV2ZW50KCdlcnJvcicsIGVycm9yKSk7XG5cbiAgICAgICAgdGhpcy5fZmluaXNoKCk7XG4gICAgfVxuXG4gICAgX2ZpbmlzaCgpIHtcbiAgICAgICAgaWYgKHRoaXMuX3RpbWVvdXRJZCkgeyBjbGVhclRpbWVvdXQodGhpcy5fdGltZW91dElkKTsgfVxuICAgICAgICB0aGlzLl90aW1lb3V0SWQgPSB1bmRlZmluZWQ7XG4gICAgfVxuXG4gICAgX3NldHVwVUkoc3VwcG9ydGVkOiBib29sZWFuKSB7XG4gICAgICAgIGlmIChzdXBwb3J0ZWQgPT09IGZhbHNlKSB7XG4gICAgICAgICAgICB3YXJuT25jZSgnR2VvbG9jYXRpb24gc3VwcG9ydCBpcyBub3QgYXZhaWxhYmxlLCB0aGUgR2VvbG9jYXRlQ29udHJvbCB3aWxsIG5vdCBiZSB2aXNpYmxlLicpO1xuICAgICAgICAgICAgcmV0dXJuO1xuICAgICAgICB9XG4gICAgICAgIHRoaXMuX2NvbnRhaW5lci5hZGRFdmVudExpc3RlbmVyKCdjb250ZXh0bWVudScsIChlOiBNb3VzZUV2ZW50KSA9PiBlLnByZXZlbnREZWZhdWx0KCkpO1xuICAgICAgICB0aGlzLl9nZW9sb2NhdGVCdXR0b24gPSBET00uY3JlYXRlKCdidXR0b24nLFxuICAgICAgICAgICAgYCR7Y2xhc3NOYW1lfS1pY29uICR7Y2xhc3NOYW1lfS1nZW9sb2NhdGVgLFxuICAgICAgICAgICAgdGhpcy5fY29udGFpbmVyKTtcbiAgICAgICAgdGhpcy5fZ2VvbG9jYXRlQnV0dG9uLnR5cGUgPSAnYnV0dG9uJztcbiAgICAgICAgdGhpcy5fZ2VvbG9jYXRlQnV0dG9uLnNldEF0dHJpYnV0ZSgnYXJpYS1sYWJlbCcsICdHZW9sb2NhdGUnKTtcblxuICAgICAgICBpZiAodGhpcy5vcHRpb25zLnRyYWNrVXNlckxvY2F0aW9uKSB7XG4gICAgICAgICAgICB0aGlzLl9nZW9sb2NhdGVCdXR0b24uc2V0QXR0cmlidXRlKCdhcmlhLXByZXNzZWQnLCAnZmFsc2UnKTtcbiAgICAgICAgICAgIHRoaXMuX3dhdGNoU3RhdGUgPSAnT0ZGJztcbiAgICAgICAgfVxuXG4gICAgICAgIC8vIHdoZW4gc2hvd1VzZXJMb2NhdGlvbiBpcyBlbmFibGVkLCBrZWVwIHRoZSBHZW9sb2NhdGUgYnV0dG9uIGRpc2FibGVkIHVudGlsIHRoZSBkZXZpY2UgbG9jYXRpb24gbWFya2VyIGlzIHNldHVwIG9uIHRoZSBtYXBcbiAgICAgICAgaWYgKHRoaXMub3B0aW9ucy5zaG93VXNlckxvY2F0aW9uKSB7XG4gICAgICAgICAgICB0aGlzLl9kb3RFbGVtZW50ID0gRE9NLmNyZWF0ZSgnZGl2JywgJ21hcGJveGdsLXVzZXItbG9jYXRpb24tZG90Jyk7XG5cbiAgICAgICAgICAgIHRoaXMuX3VzZXJMb2NhdGlvbkRvdE1hcmtlciA9IG5ldyBNYXJrZXIodGhpcy5fZG90RWxlbWVudCk7XG5cbiAgICAgICAgICAgIGlmICh0aGlzLm9wdGlvbnMudHJhY2tVc2VyTG9jYXRpb24pIHRoaXMuX3dhdGNoU3RhdGUgPSAnT0ZGJztcbiAgICAgICAgfVxuXG4gICAgICAgIHRoaXMuX2dlb2xvY2F0ZUJ1dHRvbi5hZGRFdmVudExpc3RlbmVyKCdjbGljaycsXG4gICAgICAgICAgICB0aGlzLnRyaWdnZXIuYmluZCh0aGlzKSk7XG5cbiAgICAgICAgdGhpcy5fc2V0dXAgPSB0cnVlO1xuXG4gICAgICAgIC8vIHdoZW4gdGhlIGNhbWVyYSBpcyBjaGFuZ2VkIChhbmQgaXQncyBub3QgYXMgYSByZXN1bHQgb2YgdGhlIEdlb2xvY2F0aW9uIENvbnRyb2wpIGNoYW5nZVxuICAgICAgICAvLyB0aGUgd2F0Y2ggbW9kZSB0byBiYWNrZ3JvdW5kIHdhdGNoLCBzbyB0aGF0IHRoZSBtYXJrZXIgaXMgdXBkYXRlZCBidXQgbm90IHRoZSBjYW1lcmEuXG4gICAgICAgIGlmICh0aGlzLm9wdGlvbnMudHJhY2tVc2VyTG9jYXRpb24pIHtcbiAgICAgICAgICAgIHRoaXMuX21hcC5vbignbW92ZXN0YXJ0JywgKGV2ZW50KSA9PiB7XG4gICAgICAgICAgICAgICAgaWYgKCFldmVudC5nZW9sb2NhdGVTb3VyY2UgJiYgdGhpcy5fd2F0Y2hTdGF0ZSA9PT0gJ0FDVElWRV9MT0NLJykge1xuICAgICAgICAgICAgICAgICAgICB0aGlzLl93YXRjaFN0YXRlID0gJ0JBQ0tHUk9VTkQnO1xuICAgICAgICAgICAgICAgICAgICB0aGlzLl9nZW9sb2NhdGVCdXR0b24uY2xhc3NMaXN0LmFkZCgnbWFwYm94Z2wtY3RybC1nZW9sb2NhdGUtYmFja2dyb3VuZCcpO1xuICAgICAgICAgICAgICAgICAgICB0aGlzLl9nZW9sb2NhdGVCdXR0b24uY2xhc3NMaXN0LnJlbW92ZSgnbWFwYm94Z2wtY3RybC1nZW9sb2NhdGUtYWN0aXZlJyk7XG5cbiAgICAgICAgICAgICAgICAgICAgdGhpcy5maXJlKG5ldyBFdmVudCgndHJhY2t1c2VybG9jYXRpb25lbmQnKSk7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfSk7XG4gICAgICAgIH1cbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBUcmlnZ2VyIGEgZ2VvbG9jYXRpb25cbiAgICAgKlxuICAgICAqIEByZXR1cm5zIHtib29sZWFufSBSZXR1cm5zIGBmYWxzZWAgaWYgY2FsbGVkIGJlZm9yZSBjb250cm9sIHdhcyBhZGRlZCB0byBhIG1hcCwgb3RoZXJ3aXNlIHJldHVybnMgYHRydWVgLlxuICAgICAqL1xuICAgIHRyaWdnZXIoKSB7XG4gICAgICAgIGlmICghdGhpcy5fc2V0dXApIHtcbiAgICAgICAgICAgIHdhcm5PbmNlKCdHZW9sb2NhdGUgY29udHJvbCB0cmlnZ2VyZWQgYmVmb3JlIGFkZGVkIHRvIGEgbWFwJyk7XG4gICAgICAgICAgICByZXR1cm4gZmFsc2U7XG4gICAgICAgIH1cbiAgICAgICAgaWYgKHRoaXMub3B0aW9ucy50cmFja1VzZXJMb2NhdGlvbikge1xuICAgICAgICAgICAgLy8gdXBkYXRlIHdhdGNoU3RhdGUgYW5kIGRvIGFueSBvdXRnb2luZyBzdGF0ZSBjbGVhbnVwXG4gICAgICAgICAgICBzd2l0Y2ggKHRoaXMuX3dhdGNoU3RhdGUpIHtcbiAgICAgICAgICAgIGNhc2UgJ09GRic6XG4gICAgICAgICAgICAgICAgLy8gdHVybiBvbiB0aGUgR2VvbG9jYXRlIENvbnRyb2xcbiAgICAgICAgICAgICAgICB0aGlzLl93YXRjaFN0YXRlID0gJ1dBSVRJTkdfQUNUSVZFJztcblxuICAgICAgICAgICAgICAgIHRoaXMuZmlyZShuZXcgRXZlbnQoJ3RyYWNrdXNlcmxvY2F0aW9uc3RhcnQnKSk7XG4gICAgICAgICAgICAgICAgYnJlYWs7XG4gICAgICAgICAgICBjYXNlICdXQUlUSU5HX0FDVElWRSc6XG4gICAgICAgICAgICBjYXNlICdBQ1RJVkVfTE9DSyc6XG4gICAgICAgICAgICBjYXNlICdBQ1RJVkVfRVJST1InOlxuICAgICAgICAgICAgY2FzZSAnQkFDS0dST1VORF9FUlJPUic6XG4gICAgICAgICAgICAgICAgLy8gdHVybiBvZmYgdGhlIEdlb2xvY2F0ZSBDb250cm9sXG4gICAgICAgICAgICAgICAgdGhpcy5fd2F0Y2hTdGF0ZSA9ICdPRkYnO1xuICAgICAgICAgICAgICAgIHRoaXMuX2dlb2xvY2F0ZUJ1dHRvbi5jbGFzc0xpc3QucmVtb3ZlKCdtYXBib3hnbC1jdHJsLWdlb2xvY2F0ZS13YWl0aW5nJyk7XG4gICAgICAgICAgICAgICAgdGhpcy5fZ2VvbG9jYXRlQnV0dG9uLmNsYXNzTGlzdC5yZW1vdmUoJ21hcGJveGdsLWN0cmwtZ2VvbG9jYXRlLWFjdGl2ZScpO1xuICAgICAgICAgICAgICAgIHRoaXMuX2dlb2xvY2F0ZUJ1dHRvbi5jbGFzc0xpc3QucmVtb3ZlKCdtYXBib3hnbC1jdHJsLWdlb2xvY2F0ZS1hY3RpdmUtZXJyb3InKTtcbiAgICAgICAgICAgICAgICB0aGlzLl9nZW9sb2NhdGVCdXR0b24uY2xhc3NMaXN0LnJlbW92ZSgnbWFwYm94Z2wtY3RybC1nZW9sb2NhdGUtYmFja2dyb3VuZCcpO1xuICAgICAgICAgICAgICAgIHRoaXMuX2dlb2xvY2F0ZUJ1dHRvbi5jbGFzc0xpc3QucmVtb3ZlKCdtYXBib3hnbC1jdHJsLWdlb2xvY2F0ZS1iYWNrZ3JvdW5kLWVycm9yJyk7XG5cbiAgICAgICAgICAgICAgICB0aGlzLmZpcmUobmV3IEV2ZW50KCd0cmFja3VzZXJsb2NhdGlvbmVuZCcpKTtcbiAgICAgICAgICAgICAgICBicmVhaztcbiAgICAgICAgICAgIGNhc2UgJ0JBQ0tHUk9VTkQnOlxuICAgICAgICAgICAgICAgIHRoaXMuX3dhdGNoU3RhdGUgPSAnQUNUSVZFX0xPQ0snO1xuICAgICAgICAgICAgICAgIHRoaXMuX2dlb2xvY2F0ZUJ1dHRvbi5jbGFzc0xpc3QucmVtb3ZlKCdtYXBib3hnbC1jdHJsLWdlb2xvY2F0ZS1iYWNrZ3JvdW5kJyk7XG4gICAgICAgICAgICAgICAgLy8gc2V0IGNhbWVyYSB0byBsYXN0IGtub3duIGxvY2F0aW9uXG4gICAgICAgICAgICAgICAgaWYgKHRoaXMuX2xhc3RLbm93blBvc2l0aW9uKSB0aGlzLl91cGRhdGVDYW1lcmEodGhpcy5fbGFzdEtub3duUG9zaXRpb24pO1xuXG4gICAgICAgICAgICAgICAgdGhpcy5maXJlKG5ldyBFdmVudCgndHJhY2t1c2VybG9jYXRpb25zdGFydCcpKTtcbiAgICAgICAgICAgICAgICBicmVhaztcbiAgICAgICAgICAgIGRlZmF1bHQ6XG4gICAgICAgICAgICAgICAgYXNzZXJ0KGZhbHNlLCBgVW5leHBlY3RlZCB3YXRjaFN0YXRlICR7dGhpcy5fd2F0Y2hTdGF0ZX1gKTtcbiAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgLy8gaW5jb21pbmcgc3RhdGUgc2V0dXBcbiAgICAgICAgICAgIHN3aXRjaCAodGhpcy5fd2F0Y2hTdGF0ZSkge1xuICAgICAgICAgICAgY2FzZSAnV0FJVElOR19BQ1RJVkUnOlxuICAgICAgICAgICAgICAgIHRoaXMuX2dlb2xvY2F0ZUJ1dHRvbi5jbGFzc0xpc3QuYWRkKCdtYXBib3hnbC1jdHJsLWdlb2xvY2F0ZS13YWl0aW5nJyk7XG4gICAgICAgICAgICAgICAgdGhpcy5fZ2VvbG9jYXRlQnV0dG9uLmNsYXNzTGlzdC5hZGQoJ21hcGJveGdsLWN0cmwtZ2VvbG9jYXRlLWFjdGl2ZScpO1xuICAgICAgICAgICAgICAgIGJyZWFrO1xuICAgICAgICAgICAgY2FzZSAnQUNUSVZFX0xPQ0snOlxuICAgICAgICAgICAgICAgIHRoaXMuX2dlb2xvY2F0ZUJ1dHRvbi5jbGFzc0xpc3QuYWRkKCdtYXBib3hnbC1jdHJsLWdlb2xvY2F0ZS1hY3RpdmUnKTtcbiAgICAgICAgICAgICAgICBicmVhaztcbiAgICAgICAgICAgIGNhc2UgJ0FDVElWRV9FUlJPUic6XG4gICAgICAgICAgICAgICAgdGhpcy5fZ2VvbG9jYXRlQnV0dG9uLmNsYXNzTGlzdC5hZGQoJ21hcGJveGdsLWN0cmwtZ2VvbG9jYXRlLXdhaXRpbmcnKTtcbiAgICAgICAgICAgICAgICB0aGlzLl9nZW9sb2NhdGVCdXR0b24uY2xhc3NMaXN0LmFkZCgnbWFwYm94Z2wtY3RybC1nZW9sb2NhdGUtYWN0aXZlLWVycm9yJyk7XG4gICAgICAgICAgICAgICAgYnJlYWs7XG4gICAgICAgICAgICBjYXNlICdCQUNLR1JPVU5EJzpcbiAgICAgICAgICAgICAgICB0aGlzLl9nZW9sb2NhdGVCdXR0b24uY2xhc3NMaXN0LmFkZCgnbWFwYm94Z2wtY3RybC1nZW9sb2NhdGUtYmFja2dyb3VuZCcpO1xuICAgICAgICAgICAgICAgIGJyZWFrO1xuICAgICAgICAgICAgY2FzZSAnQkFDS0dST1VORF9FUlJPUic6XG4gICAgICAgICAgICAgICAgdGhpcy5fZ2VvbG9jYXRlQnV0dG9uLmNsYXNzTGlzdC5hZGQoJ21hcGJveGdsLWN0cmwtZ2VvbG9jYXRlLXdhaXRpbmcnKTtcbiAgICAgICAgICAgICAgICB0aGlzLl9nZW9sb2NhdGVCdXR0b24uY2xhc3NMaXN0LmFkZCgnbWFwYm94Z2wtY3RybC1nZW9sb2NhdGUtYmFja2dyb3VuZC1lcnJvcicpO1xuICAgICAgICAgICAgICAgIGJyZWFrO1xuICAgICAgICAgICAgY2FzZSAnT0ZGJzpcbiAgICAgICAgICAgICAgICBicmVhaztcbiAgICAgICAgICAgIGRlZmF1bHQ6XG4gICAgICAgICAgICAgICAgYXNzZXJ0KGZhbHNlLCBgVW5leHBlY3RlZCB3YXRjaFN0YXRlICR7dGhpcy5fd2F0Y2hTdGF0ZX1gKTtcbiAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgLy8gbWFuYWdlIGdlb2xvY2F0aW9uLndhdGNoUG9zaXRpb24gLyBnZW9sb2NhdGlvbi5jbGVhcldhdGNoXG4gICAgICAgICAgICBpZiAodGhpcy5fd2F0Y2hTdGF0ZSA9PT0gJ09GRicgJiYgdGhpcy5fZ2VvbG9jYXRpb25XYXRjaElEICE9PSB1bmRlZmluZWQpIHtcbiAgICAgICAgICAgICAgICAvLyBjbGVhciB3YXRjaFBvc2l0aW9uIGFzIHdlJ3ZlIGNoYW5nZWQgdG8gYW4gT0ZGIHN0YXRlXG4gICAgICAgICAgICAgICAgdGhpcy5fY2xlYXJXYXRjaCgpO1xuICAgICAgICAgICAgfSBlbHNlIGlmICh0aGlzLl9nZW9sb2NhdGlvbldhdGNoSUQgPT09IHVuZGVmaW5lZCkge1xuICAgICAgICAgICAgICAgIC8vIGVuYWJsZSB3YXRjaFBvc2l0aW9uIHNpbmNlIHdhdGNoU3RhdGUgaXMgbm90IE9GRiBhbmQgdGhlcmUgaXMgbm8gd2F0Y2hQb3NpdGlvbiBhbHJlYWR5IHJ1bm5pbmdcblxuICAgICAgICAgICAgICAgIHRoaXMuX2dlb2xvY2F0ZUJ1dHRvbi5jbGFzc0xpc3QuYWRkKCdtYXBib3hnbC1jdHJsLWdlb2xvY2F0ZS13YWl0aW5nJyk7XG4gICAgICAgICAgICAgICAgdGhpcy5fZ2VvbG9jYXRlQnV0dG9uLnNldEF0dHJpYnV0ZSgnYXJpYS1wcmVzc2VkJywgJ3RydWUnKTtcblxuICAgICAgICAgICAgICAgIHRoaXMuX2dlb2xvY2F0aW9uV2F0Y2hJRCA9IHdpbmRvdy5uYXZpZ2F0b3IuZ2VvbG9jYXRpb24ud2F0Y2hQb3NpdGlvbihcbiAgICAgICAgICAgICAgICAgICAgdGhpcy5fb25TdWNjZXNzLCB0aGlzLl9vbkVycm9yLCB0aGlzLm9wdGlvbnMucG9zaXRpb25PcHRpb25zKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgIHdpbmRvdy5uYXZpZ2F0b3IuZ2VvbG9jYXRpb24uZ2V0Q3VycmVudFBvc2l0aW9uKFxuICAgICAgICAgICAgICAgIHRoaXMuX29uU3VjY2VzcywgdGhpcy5fb25FcnJvciwgdGhpcy5vcHRpb25zLnBvc2l0aW9uT3B0aW9ucyk7XG5cbiAgICAgICAgICAgIC8vIFRoaXMgdGltZW91dCBlbnN1cmVzIHRoYXQgd2Ugc3RpbGwgY2FsbCBmaW5pc2goKSBldmVuIGlmXG4gICAgICAgICAgICAvLyB0aGUgdXNlciBkZWNsaW5lcyB0byBzaGFyZSB0aGVpciBsb2NhdGlvbiBpbiBGaXJlZm94XG4gICAgICAgICAgICB0aGlzLl90aW1lb3V0SWQgPSBzZXRUaW1lb3V0KHRoaXMuX2ZpbmlzaCwgMTAwMDAgLyogMTBzZWMgKi8pO1xuICAgICAgICB9XG5cbiAgICAgICAgcmV0dXJuIHRydWU7XG4gICAgfVxuXG4gICAgX2NsZWFyV2F0Y2goKSB7XG4gICAgICAgIHdpbmRvdy5uYXZpZ2F0b3IuZ2VvbG9jYXRpb24uY2xlYXJXYXRjaCh0aGlzLl9nZW9sb2NhdGlvbldhdGNoSUQpO1xuXG4gICAgICAgIHRoaXMuX2dlb2xvY2F0aW9uV2F0Y2hJRCA9ICh1bmRlZmluZWQ6IGFueSk7XG4gICAgICAgIHRoaXMuX2dlb2xvY2F0ZUJ1dHRvbi5jbGFzc0xpc3QucmVtb3ZlKCdtYXBib3hnbC1jdHJsLWdlb2xvY2F0ZS13YWl0aW5nJyk7XG4gICAgICAgIHRoaXMuX2dlb2xvY2F0ZUJ1dHRvbi5zZXRBdHRyaWJ1dGUoJ2FyaWEtcHJlc3NlZCcsICdmYWxzZScpO1xuXG4gICAgICAgIGlmICh0aGlzLm9wdGlvbnMuc2hvd1VzZXJMb2NhdGlvbikge1xuICAgICAgICAgICAgdGhpcy5fdXBkYXRlTWFya2VyKG51bGwpO1xuICAgICAgICB9XG4gICAgfVxufVxuXG5leHBvcnQgZGVmYXVsdCBHZW9sb2NhdGVDb250cm9sO1xuXG4vKiBHZW9sb2NhdGUgQ29udHJvbCBXYXRjaCBTdGF0ZXNcbiAqIFRoaXMgaXMgdGhlIHByaXZhdGUgc3RhdGUgb2YgdGhlIGNvbnRyb2wuXG4gKlxuICogT0ZGXG4gKiAgICBvZmYvaW5hY3RpdmVcbiAqIFdBSVRJTkdfQUNUSVZFXG4gKiAgICBHZW9sb2NhdGUgQ29udHJvbCB3YXMgY2xpY2tlZCBidXQgc3RpbGwgd2FpdGluZyBmb3IgR2VvbG9jYXRpb24gQVBJIHJlc3BvbnNlIHdpdGggdXNlciBsb2NhdGlvblxuICogQUNUSVZFX0xPQ0tcbiAqICAgIFNob3dpbmcgdGhlIHVzZXIgbG9jYXRpb24gYXMgYSBkb3QgQU5EIHRyYWNraW5nIHRoZSBjYW1lcmEgdG8gYmUgZml4ZWQgdG8gdGhlaXIgbG9jYXRpb24uIElmIHRoZWlyIGxvY2F0aW9uIGNoYW5nZXMgdGhlIG1hcCBtb3ZlcyB0byBmb2xsb3cuXG4gKiBBQ1RJVkVfRVJST1JcbiAqICAgIFRoZXJlIHdhcyBlbiBlcnJvciBmcm9tIHRoZSBHZW9sb2NhdGlvbiBBUEkgd2hpbGUgdHJ5aW5nIHRvIHNob3cgYW5kIHRyYWNrIHRoZSB1c2VyIGxvY2F0aW9uLlxuICogQkFDS0dST1VORFxuICogICAgU2hvd2luZyB0aGUgdXNlciBsb2NhdGlvbiBhcyBhIGRvdCBidXQgdGhlIGNhbWVyYSBkb2Vzbid0IGZvbGxvdyB0aGVpciBsb2NhdGlvbiBhcyBpdCBjaGFuZ2VzLlxuICogQkFDS0dST1VORF9FUlJPUlxuICogICAgVGhlcmUgd2FzIGFuIGVycm9yIGZyb20gdGhlIEdlb2xvY2F0aW9uIEFQSSB3aGlsZSB0cnlpbmcgdG8gc2hvdyAoYnV0IG5vdCB0cmFjaykgdGhlIHVzZXIgbG9jYXRpb24uXG4gKi9cblxuXG4vKipcbiAqIEZpcmVkIG9uIGVhY2ggR2VvbG9jYXRpb24gQVBJIHBvc2l0aW9uIHVwZGF0ZSB3aGljaCByZXR1cm5lZCBhcyBzdWNjZXNzLlxuICpcbiAqIEBldmVudCBnZW9sb2NhdGVcbiAqIEBtZW1iZXJvZiBHZW9sb2NhdGVDb250cm9sXG4gKiBAaW5zdGFuY2VcbiAqIEBwcm9wZXJ0eSB7UG9zaXRpb259IGRhdGEgVGhlIHJldHVybmVkIFtQb3NpdGlvbl0oaHR0cHM6Ly9kZXZlbG9wZXIubW96aWxsYS5vcmcvZW4tVVMvZG9jcy9XZWIvQVBJL1Bvc2l0aW9uKSBvYmplY3QgZnJvbSB0aGUgY2FsbGJhY2sgaW4gW0dlb2xvY2F0aW9uLmdldEN1cnJlbnRQb3NpdGlvbigpXShodHRwczovL2RldmVsb3Blci5tb3ppbGxhLm9yZy9lbi1VUy9kb2NzL1dlYi9BUEkvR2VvbG9jYXRpb24vZ2V0Q3VycmVudFBvc2l0aW9uKSBvciBbR2VvbG9jYXRpb24ud2F0Y2hQb3NpdGlvbigpXShodHRwczovL2RldmVsb3Blci5tb3ppbGxhLm9yZy9lbi1VUy9kb2NzL1dlYi9BUEkvR2VvbG9jYXRpb24vd2F0Y2hQb3NpdGlvbikuXG4gKlxuICovXG5cbi8qKlxuICogRmlyZWQgb24gZWFjaCBHZW9sb2NhdGlvbiBBUEkgcG9zaXRpb24gdXBkYXRlIHdoaWNoIHJldHVybmVkIGFzIGFuIGVycm9yLlxuICpcbiAqIEBldmVudCBlcnJvclxuICogQG1lbWJlcm9mIEdlb2xvY2F0ZUNvbnRyb2xcbiAqIEBpbnN0YW5jZVxuICogQHByb3BlcnR5IHtQb3NpdGlvbkVycm9yfSBkYXRhIFRoZSByZXR1cm5lZCBbUG9zaXRpb25FcnJvcl0oaHR0cHM6Ly9kZXZlbG9wZXIubW96aWxsYS5vcmcvZW4tVVMvZG9jcy9XZWIvQVBJL1Bvc2l0aW9uRXJyb3IpIG9iamVjdCBmcm9tIHRoZSBjYWxsYmFjayBpbiBbR2VvbG9jYXRpb24uZ2V0Q3VycmVudFBvc2l0aW9uKCldKGh0dHBzOi8vZGV2ZWxvcGVyLm1vemlsbGEub3JnL2VuLVVTL2RvY3MvV2ViL0FQSS9HZW9sb2NhdGlvbi9nZXRDdXJyZW50UG9zaXRpb24pIG9yIFtHZW9sb2NhdGlvbi53YXRjaFBvc2l0aW9uKCldKGh0dHBzOi8vZGV2ZWxvcGVyLm1vemlsbGEub3JnL2VuLVVTL2RvY3MvV2ViL0FQSS9HZW9sb2NhdGlvbi93YXRjaFBvc2l0aW9uKS5cbiAqXG4gKi9cblxuLyoqXG4gKiBGaXJlZCB3aGVuIHRoZSBHZW9sb2NhdGUgQ29udHJvbCBjaGFuZ2VzIHRvIHRoZSBhY3RpdmUgbG9jayBzdGF0ZSwgd2hpY2ggaGFwcGVucyBlaXRoZXIgdXBvbiBmaXJzdCBvYnRhaW5pbmcgYSBzdWNjZXNzZnVsIEdlb2xvY2F0aW9uIEFQSSBwb3NpdGlvbiBmb3IgdGhlIHVzZXIgKGEgZ2VvbG9jYXRlIGV2ZW50IHdpbGwgZm9sbG93KSwgb3IgdGhlIHVzZXIgY2xpY2tzIHRoZSBnZW9sb2NhdGUgYnV0dG9uIHdoZW4gaW4gdGhlIGJhY2tncm91bmQgc3RhdGUgd2hpY2ggdXNlcyB0aGUgbGFzdCBrbm93biBwb3NpdGlvbiB0byByZWNlbnRlciB0aGUgbWFwIGFuZCBlbnRlciBhY3RpdmUgbG9jayBzdGF0ZSAobm8gZ2VvbG9jYXRlIGV2ZW50IHdpbGwgZm9sbG93IHVubGVzcyB0aGUgdXNlcnMncyBsb2NhdGlvbiBjaGFuZ2VzKS5cbiAqXG4gKiBAZXZlbnQgdHJhY2t1c2VybG9jYXRpb25zdGFydFxuICogQG1lbWJlcm9mIEdlb2xvY2F0ZUNvbnRyb2xcbiAqIEBpbnN0YW5jZVxuICpcbiAqL1xuXG4vKipcbiAqIEZpcmVkIHdoZW4gdGhlIEdlb2xvY2F0ZSBDb250cm9sIGNoYW5nZXMgdG8gdGhlIGJhY2tncm91bmQgc3RhdGUsIHdoaWNoIGhhcHBlbnMgd2hlbiBhIHVzZXIgY2hhbmdlcyB0aGUgY2FtZXJhIGR1cmluZyBhbiBhY3RpdmUgcG9zaXRpb24gbG9jay4gVGhpcyBvbmx5IGFwcGxpZXMgd2hlbiB0cmFja1VzZXJMb2NhdGlvbiBpcyB0cnVlLiBJbiB0aGUgYmFja2dyb3VuZCBzdGF0ZSwgdGhlIGRvdCBvbiB0aGUgbWFwIHdpbGwgdXBkYXRlIHdpdGggbG9jYXRpb24gdXBkYXRlcyBidXQgdGhlIGNhbWVyYSB3aWxsIG5vdC5cbiAqXG4gKiBAZXZlbnQgdHJhY2t1c2VybG9jYXRpb25lbmRcbiAqIEBtZW1iZXJvZiBHZW9sb2NhdGVDb250cm9sXG4gKiBAaW5zdGFuY2VcbiAqXG4gKi9cbiIsIi8vIEBmbG93XG5cbmltcG9ydCBET00gZnJvbSAnLi4vLi4vdXRpbC9kb20nO1xuaW1wb3J0IHsgZXh0ZW5kLCBiaW5kQWxsIH0gZnJvbSAnLi4vLi4vdXRpbC91dGlsJztcblxuaW1wb3J0IHR5cGUgTWFwIGZyb20gJy4uL21hcCc7XG5cbnR5cGUgVW5pdCA9ICdpbXBlcmlhbCcgfCAnbWV0cmljJyB8ICduYXV0aWNhbCc7XG5cbnR5cGUgT3B0aW9ucyA9IHtcbiAgICBtYXhXaWR0aD86IG51bWJlcixcbiAgICB1bml0PzogVW5pdDtcbn07XG5cbmNvbnN0IGRlZmF1bHRPcHRpb25zOiBPcHRpb25zID0ge1xuICAgIG1heFdpZHRoOiAxMDAsXG4gICAgdW5pdDogJ21ldHJpYydcbn07XG5cbi8qKlxuICogQSBgU2NhbGVDb250cm9sYCBjb250cm9sIGRpc3BsYXlzIHRoZSByYXRpbyBvZiBhIGRpc3RhbmNlIG9uIHRoZSBtYXAgdG8gdGhlIGNvcnJlc3BvbmRpbmcgZGlzdGFuY2Ugb24gdGhlIGdyb3VuZC5cbiAqXG4gKiBAaW1wbGVtZW50cyB7SUNvbnRyb2x9XG4gKiBAcGFyYW0ge09iamVjdH0gW29wdGlvbnNdXG4gKiBAcGFyYW0ge251bWJlcn0gW29wdGlvbnMubWF4V2lkdGg9JzEwMCddIFRoZSBtYXhpbXVtIGxlbmd0aCBvZiB0aGUgc2NhbGUgY29udHJvbCBpbiBwaXhlbHMuXG4gKiBAcGFyYW0ge3N0cmluZ30gW29wdGlvbnMudW5pdD0nbWV0cmljJ10gVW5pdCBvZiB0aGUgZGlzdGFuY2UgKGAnaW1wZXJpYWwnYCwgYCdtZXRyaWMnYCBvciBgJ25hdXRpY2FsJ2ApLlxuICogQGV4YW1wbGVcbiAqIHZhciBzY2FsZSA9IG5ldyBtYXBib3hnbC5TY2FsZUNvbnRyb2woe1xuICogICAgIG1heFdpZHRoOiA4MCxcbiAqICAgICB1bml0OiAnaW1wZXJpYWwnXG4gKiB9KTtcbiAqIG1hcC5hZGRDb250cm9sKHNjYWxlKTtcbiAqXG4gKiBzY2FsZS5zZXRVbml0KCdtZXRyaWMnKTtcbiAqL1xuY2xhc3MgU2NhbGVDb250cm9sIHtcbiAgICBfbWFwOiBNYXA7XG4gICAgX2NvbnRhaW5lcjogSFRNTEVsZW1lbnQ7XG4gICAgb3B0aW9uczogT3B0aW9ucztcblxuICAgIGNvbnN0cnVjdG9yKG9wdGlvbnM6IE9wdGlvbnMpIHtcbiAgICAgICAgdGhpcy5vcHRpb25zID0gZXh0ZW5kKHt9LCBkZWZhdWx0T3B0aW9ucywgb3B0aW9ucyk7XG5cbiAgICAgICAgYmluZEFsbChbXG4gICAgICAgICAgICAnX29uTW92ZScsXG4gICAgICAgICAgICAnc2V0VW5pdCdcbiAgICAgICAgXSwgdGhpcyk7XG4gICAgfVxuXG4gICAgZ2V0RGVmYXVsdFBvc2l0aW9uKCkge1xuICAgICAgICByZXR1cm4gJ2JvdHRvbS1sZWZ0JztcbiAgICB9XG5cbiAgICBfb25Nb3ZlKCkge1xuICAgICAgICB1cGRhdGVTY2FsZSh0aGlzLl9tYXAsIHRoaXMuX2NvbnRhaW5lciwgdGhpcy5vcHRpb25zKTtcbiAgICB9XG5cbiAgICBvbkFkZChtYXA6IE1hcCkge1xuICAgICAgICB0aGlzLl9tYXAgPSBtYXA7XG4gICAgICAgIHRoaXMuX2NvbnRhaW5lciA9IERPTS5jcmVhdGUoJ2RpdicsICdtYXBib3hnbC1jdHJsIG1hcGJveGdsLWN0cmwtc2NhbGUnLCBtYXAuZ2V0Q29udGFpbmVyKCkpO1xuXG4gICAgICAgIHRoaXMuX21hcC5vbignbW92ZScsIHRoaXMuX29uTW92ZSk7XG4gICAgICAgIHRoaXMuX29uTW92ZSgpO1xuXG4gICAgICAgIHJldHVybiB0aGlzLl9jb250YWluZXI7XG4gICAgfVxuXG4gICAgb25SZW1vdmUoKSB7XG4gICAgICAgIERPTS5yZW1vdmUodGhpcy5fY29udGFpbmVyKTtcbiAgICAgICAgdGhpcy5fbWFwLm9mZignbW92ZScsIHRoaXMuX29uTW92ZSk7XG4gICAgICAgIHRoaXMuX21hcCA9ICh1bmRlZmluZWQ6IGFueSk7XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogU2V0IHRoZSBzY2FsZSdzIHVuaXQgb2YgdGhlIGRpc3RhbmNlXG4gICAgICpcbiAgICAgKiBAcGFyYW0gdW5pdCBVbml0IG9mIHRoZSBkaXN0YW5jZSAoYCdpbXBlcmlhbCdgLCBgJ21ldHJpYydgIG9yIGAnbmF1dGljYWwnYCkuXG4gICAgICovXG4gICAgc2V0VW5pdCh1bml0OiBVbml0KSB7XG4gICAgICAgIHRoaXMub3B0aW9ucy51bml0ID0gdW5pdDtcbiAgICAgICAgdXBkYXRlU2NhbGUodGhpcy5fbWFwLCB0aGlzLl9jb250YWluZXIsIHRoaXMub3B0aW9ucyk7XG4gICAgfVxufVxuXG5leHBvcnQgZGVmYXVsdCBTY2FsZUNvbnRyb2w7XG5cbmZ1bmN0aW9uIHVwZGF0ZVNjYWxlKG1hcCwgY29udGFpbmVyLCBvcHRpb25zKSB7XG4gICAgLy8gQSBob3Jpem9udGFsIHNjYWxlIGlzIGltYWdpbmVkIHRvIGJlIHByZXNlbnQgYXQgY2VudGVyIG9mIHRoZSBtYXBcbiAgICAvLyBjb250YWluZXIgd2l0aCBtYXhpbXVtIGxlbmd0aCAoRGVmYXVsdCkgYXMgMTAwcHguXG4gICAgLy8gVXNpbmcgc3BoZXJpY2FsIGxhdyBvZiBjb3NpbmVzIGFwcHJveGltYXRpb24sIHRoZSByZWFsIGRpc3RhbmNlIGlzXG4gICAgLy8gZm91bmQgYmV0d2VlbiB0aGUgdHdvIGNvb3JkaW5hdGVzLlxuICAgIGNvbnN0IG1heFdpZHRoID0gb3B0aW9ucyAmJiBvcHRpb25zLm1heFdpZHRoIHx8IDEwMDtcblxuICAgIGNvbnN0IHkgPSBtYXAuX2NvbnRhaW5lci5jbGllbnRIZWlnaHQgLyAyO1xuICAgIGNvbnN0IG1heE1ldGVycyA9IGdldERpc3RhbmNlKG1hcC51bnByb2plY3QoWzAsIHldKSwgbWFwLnVucHJvamVjdChbbWF4V2lkdGgsIHldKSk7XG4gICAgLy8gVGhlIHJlYWwgZGlzdGFuY2UgY29ycmVzcG9uZGluZyB0byAxMDBweCBzY2FsZSBsZW5ndGggaXMgcm91bmRlZCBvZmYgdG9cbiAgICAvLyBuZWFyIHByZXR0eSBudW1iZXIgYW5kIHRoZSBzY2FsZSBsZW5ndGggZm9yIHRoZSBzYW1lIGlzIGZvdW5kIG91dC5cbiAgICAvLyBEZWZhdWx0IHVuaXQgb2YgdGhlIHNjYWxlIGlzIGJhc2VkIG9uIFVzZXIncyBsb2NhbGUuXG4gICAgaWYgKG9wdGlvbnMgJiYgb3B0aW9ucy51bml0ID09PSAnaW1wZXJpYWwnKSB7XG4gICAgICAgIGNvbnN0IG1heEZlZXQgPSAzLjI4MDggKiBtYXhNZXRlcnM7XG4gICAgICAgIGlmIChtYXhGZWV0ID4gNTI4MCkge1xuICAgICAgICAgICAgY29uc3QgbWF4TWlsZXMgPSBtYXhGZWV0IC8gNTI4MDtcbiAgICAgICAgICAgIHNldFNjYWxlKGNvbnRhaW5lciwgbWF4V2lkdGgsIG1heE1pbGVzLCAnbWknKTtcbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgIHNldFNjYWxlKGNvbnRhaW5lciwgbWF4V2lkdGgsIG1heEZlZXQsICdmdCcpO1xuICAgICAgICB9XG4gICAgfSBlbHNlIGlmIChvcHRpb25zICYmIG9wdGlvbnMudW5pdCA9PT0gJ25hdXRpY2FsJykge1xuICAgICAgICBjb25zdCBtYXhOYXV0aWNhbHMgPSBtYXhNZXRlcnMgLyAxODUyO1xuICAgICAgICBzZXRTY2FsZShjb250YWluZXIsIG1heFdpZHRoLCBtYXhOYXV0aWNhbHMsICdubScpO1xuICAgIH0gZWxzZSB7XG4gICAgICAgIHNldFNjYWxlKGNvbnRhaW5lciwgbWF4V2lkdGgsIG1heE1ldGVycywgJ20nKTtcbiAgICB9XG59XG5cbmZ1bmN0aW9uIHNldFNjYWxlKGNvbnRhaW5lciwgbWF4V2lkdGgsIG1heERpc3RhbmNlLCB1bml0KSB7XG4gICAgbGV0IGRpc3RhbmNlID0gZ2V0Um91bmROdW0obWF4RGlzdGFuY2UpO1xuICAgIGNvbnN0IHJhdGlvID0gZGlzdGFuY2UgLyBtYXhEaXN0YW5jZTtcblxuICAgIGlmICh1bml0ID09PSAnbScgJiYgZGlzdGFuY2UgPj0gMTAwMCkge1xuICAgICAgICBkaXN0YW5jZSA9IGRpc3RhbmNlIC8gMTAwMDtcbiAgICAgICAgdW5pdCA9ICdrbSc7XG4gICAgfVxuXG4gICAgY29udGFpbmVyLnN0eWxlLndpZHRoID0gYCR7bWF4V2lkdGggKiByYXRpb31weGA7XG4gICAgY29udGFpbmVyLmlubmVySFRNTCA9IGRpc3RhbmNlICsgdW5pdDtcbn1cblxuZnVuY3Rpb24gZ2V0RGlzdGFuY2UobGF0bG5nMSwgbGF0bG5nMikge1xuICAgIC8vIFVzZXMgc3BoZXJpY2FsIGxhdyBvZiBjb3NpbmVzIGFwcHJveGltYXRpb24uXG4gICAgY29uc3QgUiA9IDYzNzEwMDA7XG5cbiAgICBjb25zdCByYWQgPSBNYXRoLlBJIC8gMTgwLFxuICAgICAgICBsYXQxID0gbGF0bG5nMS5sYXQgKiByYWQsXG4gICAgICAgIGxhdDIgPSBsYXRsbmcyLmxhdCAqIHJhZCxcbiAgICAgICAgYSA9IE1hdGguc2luKGxhdDEpICogTWF0aC5zaW4obGF0MikgK1xuICAgICAgICAgIE1hdGguY29zKGxhdDEpICogTWF0aC5jb3MobGF0MikgKiBNYXRoLmNvcygobGF0bG5nMi5sbmcgLSBsYXRsbmcxLmxuZykgKiByYWQpO1xuXG4gICAgY29uc3QgbWF4TWV0ZXJzID0gUiAqIE1hdGguYWNvcyhNYXRoLm1pbihhLCAxKSk7XG4gICAgcmV0dXJuIG1heE1ldGVycztcblxufVxuXG5mdW5jdGlvbiBnZXRSb3VuZE51bShudW0pIHtcbiAgICBjb25zdCBwb3cxMCA9IE1hdGgucG93KDEwLCAoYCR7TWF0aC5mbG9vcihudW0pfWApLmxlbmd0aCAtIDEpO1xuICAgIGxldCBkID0gbnVtIC8gcG93MTA7XG5cbiAgICBkID0gZCA+PSAxMCA/IDEwIDpcbiAgICAgICAgZCA+PSA1ID8gNSA6XG4gICAgICAgIGQgPj0gMyA/IDMgOlxuICAgICAgICBkID49IDIgPyAyIDogMTtcblxuICAgIHJldHVybiBwb3cxMCAqIGQ7XG59XG4iLCIvLyBAZmxvd1xuXG5pbXBvcnQgRE9NIGZyb20gJy4uLy4uL3V0aWwvZG9tJztcblxuaW1wb3J0IHsgYmluZEFsbCwgd2Fybk9uY2UgfSBmcm9tICcuLi8uLi91dGlsL3V0aWwnO1xuaW1wb3J0IHdpbmRvdyBmcm9tICcuLi8uLi91dGlsL3dpbmRvdyc7XG5cbmltcG9ydCB0eXBlIE1hcCBmcm9tICcuLi9tYXAnO1xuXG4vKipcbiAqIEEgYEZ1bGxzY3JlZW5Db250cm9sYCBjb250cm9sIGNvbnRhaW5zIGEgYnV0dG9uIGZvciB0b2dnbGluZyB0aGUgbWFwIGluIGFuZCBvdXQgb2YgZnVsbHNjcmVlbiBtb2RlLlxuICpcbiAqIEBpbXBsZW1lbnRzIHtJQ29udHJvbH1cbiAqIEBleGFtcGxlXG4gKiBtYXAuYWRkQ29udHJvbChuZXcgbWFwYm94Z2wuRnVsbHNjcmVlbkNvbnRyb2woKSk7XG4gKiBAc2VlIFtWaWV3IGEgZnVsbHNjcmVlbiBtYXBdKGh0dHBzOi8vd3d3Lm1hcGJveC5jb20vbWFwYm94LWdsLWpzL2V4YW1wbGUvZnVsbHNjcmVlbi8pXG4gKi9cblxuY2xhc3MgRnVsbHNjcmVlbkNvbnRyb2wge1xuICAgIF9tYXA6IE1hcDtcbiAgICBfbWFwQ29udGFpbmVyOiBIVE1MRWxlbWVudDtcbiAgICBfY29udGFpbmVyOiBIVE1MRWxlbWVudDtcbiAgICBfZnVsbHNjcmVlbjogYm9vbGVhbjtcbiAgICBfZnVsbHNjcmVlbmNoYW5nZTogc3RyaW5nO1xuICAgIF9mdWxsc2NyZWVuQnV0dG9uOiBIVE1MRWxlbWVudDtcbiAgICBfY2xhc3NOYW1lOiBzdHJpbmc7XG5cbiAgICBjb25zdHJ1Y3RvcigpIHtcbiAgICAgICAgdGhpcy5fZnVsbHNjcmVlbiA9IGZhbHNlO1xuICAgICAgICBiaW5kQWxsKFtcbiAgICAgICAgICAgICdfb25DbGlja0Z1bGxzY3JlZW4nLFxuICAgICAgICAgICAgJ19jaGFuZ2VJY29uJ1xuICAgICAgICBdLCB0aGlzKTtcbiAgICAgICAgaWYgKCdvbmZ1bGxzY3JlZW5jaGFuZ2UnIGluIHdpbmRvdy5kb2N1bWVudCkge1xuICAgICAgICAgICAgdGhpcy5fZnVsbHNjcmVlbmNoYW5nZSA9ICdmdWxsc2NyZWVuY2hhbmdlJztcbiAgICAgICAgfSBlbHNlIGlmICgnb25tb3pmdWxsc2NyZWVuY2hhbmdlJyBpbiB3aW5kb3cuZG9jdW1lbnQpIHtcbiAgICAgICAgICAgIHRoaXMuX2Z1bGxzY3JlZW5jaGFuZ2UgPSAnbW96ZnVsbHNjcmVlbmNoYW5nZSc7XG4gICAgICAgIH0gZWxzZSBpZiAoJ29ud2Via2l0ZnVsbHNjcmVlbmNoYW5nZScgaW4gd2luZG93LmRvY3VtZW50KSB7XG4gICAgICAgICAgICB0aGlzLl9mdWxsc2NyZWVuY2hhbmdlID0gJ3dlYmtpdGZ1bGxzY3JlZW5jaGFuZ2UnO1xuICAgICAgICB9IGVsc2UgaWYgKCdvbm1zZnVsbHNjcmVlbmNoYW5nZScgaW4gd2luZG93LmRvY3VtZW50KSB7XG4gICAgICAgICAgICB0aGlzLl9mdWxsc2NyZWVuY2hhbmdlID0gJ01TRnVsbHNjcmVlbkNoYW5nZSc7XG4gICAgICAgIH1cbiAgICAgICAgdGhpcy5fY2xhc3NOYW1lID0gJ21hcGJveGdsLWN0cmwnO1xuICAgIH1cblxuICAgIG9uQWRkKG1hcDogTWFwKSB7XG4gICAgICAgIHRoaXMuX21hcCA9IG1hcDtcbiAgICAgICAgdGhpcy5fbWFwQ29udGFpbmVyID0gdGhpcy5fbWFwLmdldENvbnRhaW5lcigpO1xuICAgICAgICB0aGlzLl9jb250YWluZXIgPSBET00uY3JlYXRlKCdkaXYnLCBgJHt0aGlzLl9jbGFzc05hbWV9IG1hcGJveGdsLWN0cmwtZ3JvdXBgKTtcbiAgICAgICAgaWYgKHRoaXMuX2NoZWNrRnVsbHNjcmVlblN1cHBvcnQoKSkge1xuICAgICAgICAgICAgdGhpcy5fc2V0dXBVSSgpO1xuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgdGhpcy5fY29udGFpbmVyLnN0eWxlLmRpc3BsYXkgPSAnbm9uZSc7XG4gICAgICAgICAgICB3YXJuT25jZSgnVGhpcyBkZXZpY2UgZG9lcyBub3Qgc3VwcG9ydCBmdWxsc2NyZWVuIG1vZGUuJyk7XG4gICAgICAgIH1cbiAgICAgICAgcmV0dXJuIHRoaXMuX2NvbnRhaW5lcjtcbiAgICB9XG5cbiAgICBvblJlbW92ZSgpIHtcbiAgICAgICAgRE9NLnJlbW92ZSh0aGlzLl9jb250YWluZXIpO1xuICAgICAgICB0aGlzLl9tYXAgPSAobnVsbDogYW55KTtcbiAgICAgICAgd2luZG93LmRvY3VtZW50LnJlbW92ZUV2ZW50TGlzdGVuZXIodGhpcy5fZnVsbHNjcmVlbmNoYW5nZSwgdGhpcy5fY2hhbmdlSWNvbik7XG4gICAgfVxuXG4gICAgX2NoZWNrRnVsbHNjcmVlblN1cHBvcnQoKSB7XG4gICAgICAgIHJldHVybiAhIShcbiAgICAgICAgICAgIHdpbmRvdy5kb2N1bWVudC5mdWxsc2NyZWVuRW5hYmxlZCB8fFxuICAgICAgICAgICAgKHdpbmRvdy5kb2N1bWVudDogYW55KS5tb3pGdWxsU2NyZWVuRW5hYmxlZCB8fFxuICAgICAgICAgICAgKHdpbmRvdy5kb2N1bWVudDogYW55KS5tc0Z1bGxzY3JlZW5FbmFibGVkIHx8XG4gICAgICAgICAgICAod2luZG93LmRvY3VtZW50OiBhbnkpLndlYmtpdEZ1bGxzY3JlZW5FbmFibGVkXG4gICAgICAgICk7XG4gICAgfVxuXG4gICAgX3NldHVwVUkoKSB7XG4gICAgICAgIGNvbnN0IGJ1dHRvbiA9IHRoaXMuX2Z1bGxzY3JlZW5CdXR0b24gPSBET00uY3JlYXRlKCdidXR0b24nLCAoYCR7dGhpcy5fY2xhc3NOYW1lfS1pY29uICR7dGhpcy5fY2xhc3NOYW1lfS1mdWxsc2NyZWVuYCksIHRoaXMuX2NvbnRhaW5lcik7XG4gICAgICAgIGJ1dHRvbi5zZXRBdHRyaWJ1dGUoXCJhcmlhLWxhYmVsXCIsIFwiVG9nZ2xlIGZ1bGxzY3JlZW5cIik7XG4gICAgICAgIGJ1dHRvbi50eXBlID0gJ2J1dHRvbic7XG4gICAgICAgIHRoaXMuX2Z1bGxzY3JlZW5CdXR0b24uYWRkRXZlbnRMaXN0ZW5lcignY2xpY2snLCB0aGlzLl9vbkNsaWNrRnVsbHNjcmVlbik7XG4gICAgICAgIHdpbmRvdy5kb2N1bWVudC5hZGRFdmVudExpc3RlbmVyKHRoaXMuX2Z1bGxzY3JlZW5jaGFuZ2UsIHRoaXMuX2NoYW5nZUljb24pO1xuICAgIH1cblxuICAgIF9pc0Z1bGxzY3JlZW4oKSB7XG4gICAgICAgIHJldHVybiB0aGlzLl9mdWxsc2NyZWVuO1xuICAgIH1cblxuICAgIF9jaGFuZ2VJY29uKCkge1xuICAgICAgICBjb25zdCBmdWxsc2NyZWVuRWxlbWVudCA9XG4gICAgICAgICAgICB3aW5kb3cuZG9jdW1lbnQuZnVsbHNjcmVlbkVsZW1lbnQgfHxcbiAgICAgICAgICAgICh3aW5kb3cuZG9jdW1lbnQ6IGFueSkubW96RnVsbFNjcmVlbkVsZW1lbnQgfHxcbiAgICAgICAgICAgICh3aW5kb3cuZG9jdW1lbnQ6IGFueSkud2Via2l0RnVsbHNjcmVlbkVsZW1lbnQgfHxcbiAgICAgICAgICAgICh3aW5kb3cuZG9jdW1lbnQ6IGFueSkubXNGdWxsc2NyZWVuRWxlbWVudDtcblxuICAgICAgICBpZiAoKGZ1bGxzY3JlZW5FbGVtZW50ID09PSB0aGlzLl9tYXBDb250YWluZXIpICE9PSB0aGlzLl9mdWxsc2NyZWVuKSB7XG4gICAgICAgICAgICB0aGlzLl9mdWxsc2NyZWVuID0gIXRoaXMuX2Z1bGxzY3JlZW47XG4gICAgICAgICAgICB0aGlzLl9mdWxsc2NyZWVuQnV0dG9uLmNsYXNzTGlzdC50b2dnbGUoYCR7dGhpcy5fY2xhc3NOYW1lfS1zaHJpbmtgKTtcbiAgICAgICAgICAgIHRoaXMuX2Z1bGxzY3JlZW5CdXR0b24uY2xhc3NMaXN0LnRvZ2dsZShgJHt0aGlzLl9jbGFzc05hbWV9LWZ1bGxzY3JlZW5gKTtcbiAgICAgICAgfVxuICAgIH1cblxuICAgIF9vbkNsaWNrRnVsbHNjcmVlbigpIHtcbiAgICAgICAgaWYgKHRoaXMuX2lzRnVsbHNjcmVlbigpKSB7XG4gICAgICAgICAgICBpZiAod2luZG93LmRvY3VtZW50LmV4aXRGdWxsc2NyZWVuKSB7XG4gICAgICAgICAgICAgICAgKHdpbmRvdy5kb2N1bWVudDogYW55KS5leGl0RnVsbHNjcmVlbigpO1xuICAgICAgICAgICAgfSBlbHNlIGlmICh3aW5kb3cuZG9jdW1lbnQubW96Q2FuY2VsRnVsbFNjcmVlbikge1xuICAgICAgICAgICAgICAgICh3aW5kb3cuZG9jdW1lbnQ6IGFueSkubW96Q2FuY2VsRnVsbFNjcmVlbigpO1xuICAgICAgICAgICAgfSBlbHNlIGlmICh3aW5kb3cuZG9jdW1lbnQubXNFeGl0RnVsbHNjcmVlbikge1xuICAgICAgICAgICAgICAgICh3aW5kb3cuZG9jdW1lbnQ6IGFueSkubXNFeGl0RnVsbHNjcmVlbigpO1xuICAgICAgICAgICAgfSBlbHNlIGlmICh3aW5kb3cuZG9jdW1lbnQud2Via2l0Q2FuY2VsRnVsbFNjcmVlbikge1xuICAgICAgICAgICAgICAgICh3aW5kb3cuZG9jdW1lbnQ6IGFueSkud2Via2l0Q2FuY2VsRnVsbFNjcmVlbigpO1xuICAgICAgICAgICAgfVxuICAgICAgICB9IGVsc2UgaWYgKHRoaXMuX21hcENvbnRhaW5lci5yZXF1ZXN0RnVsbHNjcmVlbikge1xuICAgICAgICAgICAgdGhpcy5fbWFwQ29udGFpbmVyLnJlcXVlc3RGdWxsc2NyZWVuKCk7XG4gICAgICAgIH0gZWxzZSBpZiAoKHRoaXMuX21hcENvbnRhaW5lcjogYW55KS5tb3pSZXF1ZXN0RnVsbFNjcmVlbikge1xuICAgICAgICAgICAgKHRoaXMuX21hcENvbnRhaW5lcjogYW55KS5tb3pSZXF1ZXN0RnVsbFNjcmVlbigpO1xuICAgICAgICB9IGVsc2UgaWYgKCh0aGlzLl9tYXBDb250YWluZXI6IGFueSkubXNSZXF1ZXN0RnVsbHNjcmVlbikge1xuICAgICAgICAgICAgKHRoaXMuX21hcENvbnRhaW5lcjogYW55KS5tc1JlcXVlc3RGdWxsc2NyZWVuKCk7XG4gICAgICAgIH0gZWxzZSBpZiAoKHRoaXMuX21hcENvbnRhaW5lcjogYW55KS53ZWJraXRSZXF1ZXN0RnVsbHNjcmVlbikge1xuICAgICAgICAgICAgKHRoaXMuX21hcENvbnRhaW5lcjogYW55KS53ZWJraXRSZXF1ZXN0RnVsbHNjcmVlbigpO1xuICAgICAgICB9XG4gICAgfVxufVxuXG5leHBvcnQgZGVmYXVsdCBGdWxsc2NyZWVuQ29udHJvbDtcbiIsIi8vIEBmbG93XG5cbmltcG9ydCB7IGV4dGVuZCwgYmluZEFsbCB9IGZyb20gJy4uL3V0aWwvdXRpbCc7XG5pbXBvcnQgeyBFdmVudCwgRXZlbnRlZCB9IGZyb20gJy4uL3V0aWwvZXZlbnRlZCc7XG5pbXBvcnQgRE9NIGZyb20gJy4uL3V0aWwvZG9tJztcbmltcG9ydCBMbmdMYXQgZnJvbSAnLi4vZ2VvL2xuZ19sYXQnO1xuaW1wb3J0IFBvaW50IGZyb20gJ0BtYXBib3gvcG9pbnQtZ2VvbWV0cnknO1xuaW1wb3J0IHdpbmRvdyBmcm9tICcuLi91dGlsL3dpbmRvdyc7XG5pbXBvcnQgc21hcnRXcmFwIGZyb20gJy4uL3V0aWwvc21hcnRfd3JhcCc7XG5pbXBvcnQgeyB0eXBlIEFuY2hvciwgYW5jaG9yVHJhbnNsYXRlLCBhcHBseUFuY2hvckNsYXNzIH0gZnJvbSAnLi9hbmNob3InO1xuXG5pbXBvcnQgdHlwZSBNYXAgZnJvbSAnLi9tYXAnO1xuaW1wb3J0IHR5cGUge0xuZ0xhdExpa2V9IGZyb20gJy4uL2dlby9sbmdfbGF0JztcbmltcG9ydCB0eXBlIHtQb2ludExpa2V9IGZyb20gJ0BtYXBib3gvcG9pbnQtZ2VvbWV0cnknO1xuXG5jb25zdCBkZWZhdWx0T3B0aW9ucyA9IHtcbiAgICBjbG9zZUJ1dHRvbjogdHJ1ZSxcbiAgICBjbG9zZU9uQ2xpY2s6IHRydWUsXG4gICAgY2xhc3NOYW1lOiAnJ1xufTtcblxuZXhwb3J0IHR5cGUgT2Zmc2V0ID0gbnVtYmVyIHwgUG9pbnRMaWtlIHwge1tBbmNob3JdOiBQb2ludExpa2V9O1xuXG5leHBvcnQgdHlwZSBQb3B1cE9wdGlvbnMgPSB7XG4gICAgY2xvc2VCdXR0b24/OiBib29sZWFuLFxuICAgIGNsb3NlT25DbGljaz86IGJvb2xlYW4sXG4gICAgYW5jaG9yPzogQW5jaG9yLFxuICAgIG9mZnNldD86IE9mZnNldCxcbiAgICBjbGFzc05hbWU/OiBzdHJpbmdcbn07XG5cbi8qKlxuICogQSBwb3B1cCBjb21wb25lbnQuXG4gKlxuICogQHBhcmFtIHtPYmplY3R9IFtvcHRpb25zXVxuICogQHBhcmFtIHtib29sZWFufSBbb3B0aW9ucy5jbG9zZUJ1dHRvbj10cnVlXSBJZiBgdHJ1ZWAsIGEgY2xvc2UgYnV0dG9uIHdpbGwgYXBwZWFyIGluIHRoZVxuICogICB0b3AgcmlnaHQgY29ybmVyIG9mIHRoZSBwb3B1cC5cbiAqIEBwYXJhbSB7Ym9vbGVhbn0gW29wdGlvbnMuY2xvc2VPbkNsaWNrPXRydWVdIElmIGB0cnVlYCwgdGhlIHBvcHVwIHdpbGwgY2xvc2VkIHdoZW4gdGhlXG4gKiAgIG1hcCBpcyBjbGlja2VkLlxuICogQHBhcmFtIHtzdHJpbmd9IFtvcHRpb25zLmFuY2hvcl0gLSBBIHN0cmluZyBpbmRpY2F0aW5nIHRoZSBwYXJ0IG9mIHRoZSBQb3B1cCB0aGF0IHNob3VsZFxuICogICBiZSBwb3NpdGlvbmVkIGNsb3Nlc3QgdG8gdGhlIGNvb3JkaW5hdGUgc2V0IHZpYSB7QGxpbmsgUG9wdXAjc2V0TG5nTGF0fS5cbiAqICAgT3B0aW9ucyBhcmUgYCdjZW50ZXInYCwgYCd0b3AnYCwgYCdib3R0b20nYCwgYCdsZWZ0J2AsIGAncmlnaHQnYCwgYCd0b3AtbGVmdCdgLFxuICogICBgJ3RvcC1yaWdodCdgLCBgJ2JvdHRvbS1sZWZ0J2AsIGFuZCBgJ2JvdHRvbS1yaWdodCdgLiBJZiB1bnNldCB0aGUgYW5jaG9yIHdpbGwgYmVcbiAqICAgZHluYW1pY2FsbHkgc2V0IHRvIGVuc3VyZSB0aGUgcG9wdXAgZmFsbHMgd2l0aGluIHRoZSBtYXAgY29udGFpbmVyIHdpdGggYSBwcmVmZXJlbmNlXG4gKiAgIGZvciBgJ2JvdHRvbSdgLlxuICogQHBhcmFtIHtudW1iZXJ8UG9pbnRMaWtlfE9iamVjdH0gW29wdGlvbnMub2Zmc2V0XSAtXG4gKiAgQSBwaXhlbCBvZmZzZXQgYXBwbGllZCB0byB0aGUgcG9wdXAncyBsb2NhdGlvbiBzcGVjaWZpZWQgYXM6XG4gKiAgIC0gYSBzaW5nbGUgbnVtYmVyIHNwZWNpZnlpbmcgYSBkaXN0YW5jZSBmcm9tIHRoZSBwb3B1cCdzIGxvY2F0aW9uXG4gKiAgIC0gYSB7QGxpbmsgUG9pbnRMaWtlfSBzcGVjaWZ5aW5nIGEgY29uc3RhbnQgb2Zmc2V0XG4gKiAgIC0gYW4gb2JqZWN0IG9mIHtAbGluayBQb2ludH1zIHNwZWNpZmluZyBhbiBvZmZzZXQgZm9yIGVhY2ggYW5jaG9yIHBvc2l0aW9uXG4gKiAgTmVnYXRpdmUgb2Zmc2V0cyBpbmRpY2F0ZSBsZWZ0IGFuZCB1cC5cbiAqIEBwYXJhbSB7c3RyaW5nfSBbb3B0aW9ucy5jbGFzc05hbWVdIFNwYWNlLXNlcGFyYXRlZCBDU1MgY2xhc3MgbmFtZXMgdG8gYWRkIHRvIHBvcHVwIGNvbnRhaW5lclxuICogQGV4YW1wbGVcbiAqIHZhciBtYXJrZXJIZWlnaHQgPSA1MCwgbWFya2VyUmFkaXVzID0gMTAsIGxpbmVhck9mZnNldCA9IDI1O1xuICogdmFyIHBvcHVwT2Zmc2V0cyA9IHtcbiAqICAndG9wJzogWzAsIDBdLFxuICogICd0b3AtbGVmdCc6IFswLDBdLFxuICogICd0b3AtcmlnaHQnOiBbMCwwXSxcbiAqICAnYm90dG9tJzogWzAsIC1tYXJrZXJIZWlnaHRdLFxuICogICdib3R0b20tbGVmdCc6IFtsaW5lYXJPZmZzZXQsIChtYXJrZXJIZWlnaHQgLSBtYXJrZXJSYWRpdXMgKyBsaW5lYXJPZmZzZXQpICogLTFdLFxuICogICdib3R0b20tcmlnaHQnOiBbLWxpbmVhck9mZnNldCwgKG1hcmtlckhlaWdodCAtIG1hcmtlclJhZGl1cyArIGxpbmVhck9mZnNldCkgKiAtMV0sXG4gKiAgJ2xlZnQnOiBbbWFya2VyUmFkaXVzLCAobWFya2VySGVpZ2h0IC0gbWFya2VyUmFkaXVzKSAqIC0xXSxcbiAqICAncmlnaHQnOiBbLW1hcmtlclJhZGl1cywgKG1hcmtlckhlaWdodCAtIG1hcmtlclJhZGl1cykgKiAtMV1cbiAqICB9O1xuICogdmFyIHBvcHVwID0gbmV3IG1hcGJveGdsLlBvcHVwKHtvZmZzZXQ6IHBvcHVwT2Zmc2V0cywgY2xhc3NOYW1lOiAnbXktY2xhc3MnfSlcbiAqICAgLnNldExuZ0xhdChlLmxuZ0xhdClcbiAqICAgLnNldEhUTUwoXCI8aDE+SGVsbG8gV29ybGQhPC9oMT5cIilcbiAqICAgLmFkZFRvKG1hcCk7XG4gKiBAc2VlIFtEaXNwbGF5IGEgcG9wdXBdKGh0dHBzOi8vd3d3Lm1hcGJveC5jb20vbWFwYm94LWdsLWpzL2V4YW1wbGUvcG9wdXAvKVxuICogQHNlZSBbRGlzcGxheSBhIHBvcHVwIG9uIGhvdmVyXShodHRwczovL3d3dy5tYXBib3guY29tL21hcGJveC1nbC1qcy9leGFtcGxlL3BvcHVwLW9uLWhvdmVyLylcbiAqIEBzZWUgW0Rpc3BsYXkgYSBwb3B1cCBvbiBjbGlja10oaHR0cHM6Ly93d3cubWFwYm94LmNvbS9tYXBib3gtZ2wtanMvZXhhbXBsZS9wb3B1cC1vbi1jbGljay8pXG4gKiBAc2VlIFtBdHRhY2ggYSBwb3B1cCB0byBhIG1hcmtlciBpbnN0YW5jZV0oaHR0cHM6Ly93d3cubWFwYm94LmNvbS9tYXBib3gtZ2wtanMvZXhhbXBsZS9zZXQtcG9wdXAvKVxuICovXG5leHBvcnQgZGVmYXVsdCBjbGFzcyBQb3B1cCBleHRlbmRzIEV2ZW50ZWQge1xuICAgIF9tYXA6IE1hcDtcbiAgICBvcHRpb25zOiBQb3B1cE9wdGlvbnM7XG4gICAgX2NvbnRlbnQ6IEhUTUxFbGVtZW50O1xuICAgIF9jb250YWluZXI6IEhUTUxFbGVtZW50O1xuICAgIF9jbG9zZUJ1dHRvbjogSFRNTEVsZW1lbnQ7XG4gICAgX3RpcDogSFRNTEVsZW1lbnQ7XG4gICAgX2xuZ0xhdDogTG5nTGF0O1xuICAgIF9wb3M6ID9Qb2ludDtcblxuICAgIGNvbnN0cnVjdG9yKG9wdGlvbnM6IFBvcHVwT3B0aW9ucykge1xuICAgICAgICBzdXBlcigpO1xuICAgICAgICB0aGlzLm9wdGlvbnMgPSBleHRlbmQoT2JqZWN0LmNyZWF0ZShkZWZhdWx0T3B0aW9ucyksIG9wdGlvbnMpO1xuICAgICAgICBiaW5kQWxsKFsnX3VwZGF0ZScsICdfb25DbGlja0Nsb3NlJ10sIHRoaXMpO1xuICAgIH1cblxuICAgIC8qKlxuICAgICAqIEFkZHMgdGhlIHBvcHVwIHRvIGEgbWFwLlxuICAgICAqXG4gICAgICogQHBhcmFtIHtNYXB9IG1hcCBUaGUgTWFwYm94IEdMIEpTIG1hcCB0byBhZGQgdGhlIHBvcHVwIHRvLlxuICAgICAqIEByZXR1cm5zIHtQb3B1cH0gYHRoaXNgXG4gICAgICovXG4gICAgYWRkVG8obWFwOiBNYXApIHtcbiAgICAgICAgdGhpcy5fbWFwID0gbWFwO1xuICAgICAgICB0aGlzLl9tYXAub24oJ21vdmUnLCB0aGlzLl91cGRhdGUpO1xuICAgICAgICBpZiAodGhpcy5vcHRpb25zLmNsb3NlT25DbGljaykge1xuICAgICAgICAgICAgdGhpcy5fbWFwLm9uKCdjbGljaycsIHRoaXMuX29uQ2xpY2tDbG9zZSk7XG4gICAgICAgIH1cbiAgICAgICAgdGhpcy5fdXBkYXRlKCk7XG5cbiAgICAgICAgLyoqXG4gICAgICAgICAqIEZpcmVkIHdoZW4gdGhlIHBvcHVwIGlzIG9wZW5lZCBtYW51YWxseSBvciBwcm9ncmFtYXRpY2FsbHkuXG4gICAgICAgICAqXG4gICAgICAgICAqIEBldmVudCBvcGVuXG4gICAgICAgICAqIEBtZW1iZXJvZiBQb3B1cFxuICAgICAgICAgKiBAaW5zdGFuY2VcbiAgICAgICAgICogQHR5cGUge09iamVjdH1cbiAgICAgICAgICogQHByb3BlcnR5IHtQb3B1cH0gcG9wdXAgb2JqZWN0IHRoYXQgd2FzIG9wZW5lZFxuICAgICAgICAgKi9cbiAgICAgICAgdGhpcy5maXJlKG5ldyBFdmVudCgnb3BlbicpKTtcblxuICAgICAgICByZXR1cm4gdGhpcztcbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBAcmV0dXJucyB7Ym9vbGVhbn0gYHRydWVgIGlmIHRoZSBwb3B1cCBpcyBvcGVuLCBgZmFsc2VgIGlmIGl0IGlzIGNsb3NlZC5cbiAgICAgKi9cbiAgICBpc09wZW4oKSB7XG4gICAgICAgIHJldHVybiAhIXRoaXMuX21hcDtcbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBSZW1vdmVzIHRoZSBwb3B1cCBmcm9tIHRoZSBtYXAgaXQgaGFzIGJlZW4gYWRkZWQgdG8uXG4gICAgICpcbiAgICAgKiBAZXhhbXBsZVxuICAgICAqIHZhciBwb3B1cCA9IG5ldyBtYXBib3hnbC5Qb3B1cCgpLmFkZFRvKG1hcCk7XG4gICAgICogcG9wdXAucmVtb3ZlKCk7XG4gICAgICogQHJldHVybnMge1BvcHVwfSBgdGhpc2BcbiAgICAgKi9cbiAgICByZW1vdmUoKSB7XG4gICAgICAgIGlmICh0aGlzLl9jb250ZW50KSB7XG4gICAgICAgICAgICBET00ucmVtb3ZlKHRoaXMuX2NvbnRlbnQpO1xuICAgICAgICB9XG5cbiAgICAgICAgaWYgKHRoaXMuX2NvbnRhaW5lcikge1xuICAgICAgICAgICAgRE9NLnJlbW92ZSh0aGlzLl9jb250YWluZXIpO1xuICAgICAgICAgICAgZGVsZXRlIHRoaXMuX2NvbnRhaW5lcjtcbiAgICAgICAgfVxuXG4gICAgICAgIGlmICh0aGlzLl9tYXApIHtcbiAgICAgICAgICAgIHRoaXMuX21hcC5vZmYoJ21vdmUnLCB0aGlzLl91cGRhdGUpO1xuICAgICAgICAgICAgdGhpcy5fbWFwLm9mZignY2xpY2snLCB0aGlzLl9vbkNsaWNrQ2xvc2UpO1xuICAgICAgICAgICAgZGVsZXRlIHRoaXMuX21hcDtcbiAgICAgICAgfVxuXG4gICAgICAgIC8qKlxuICAgICAgICAgKiBGaXJlZCB3aGVuIHRoZSBwb3B1cCBpcyBjbG9zZWQgbWFudWFsbHkgb3IgcHJvZ3JhbWF0aWNhbGx5LlxuICAgICAgICAgKlxuICAgICAgICAgKiBAZXZlbnQgY2xvc2VcbiAgICAgICAgICogQG1lbWJlcm9mIFBvcHVwXG4gICAgICAgICAqIEBpbnN0YW5jZVxuICAgICAgICAgKiBAdHlwZSB7T2JqZWN0fVxuICAgICAgICAgKiBAcHJvcGVydHkge1BvcHVwfSBwb3B1cCBvYmplY3QgdGhhdCB3YXMgY2xvc2VkXG4gICAgICAgICAqL1xuICAgICAgICB0aGlzLmZpcmUobmV3IEV2ZW50KCdjbG9zZScpKTtcblxuICAgICAgICByZXR1cm4gdGhpcztcbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBSZXR1cm5zIHRoZSBnZW9ncmFwaGljYWwgbG9jYXRpb24gb2YgdGhlIHBvcHVwJ3MgYW5jaG9yLlxuICAgICAqXG4gICAgICogVGhlIGxvbmdpdHVkZSBvZiB0aGUgcmVzdWx0IG1heSBkaWZmZXIgYnkgYSBtdWx0aXBsZSBvZiAzNjAgZGVncmVlcyBmcm9tIHRoZSBsb25naXR1ZGUgcHJldmlvdXNseVxuICAgICAqIHNldCBieSBgc2V0TG5nTGF0YCBiZWNhdXNlIGBQb3B1cGAgd3JhcHMgdGhlIGFuY2hvciBsb25naXR1ZGUgYWNyb3NzIGNvcGllcyBvZiB0aGUgd29ybGQgdG8ga2VlcFxuICAgICAqIHRoZSBwb3B1cCBvbiBzY3JlZW4uXG4gICAgICpcbiAgICAgKiBAcmV0dXJucyB7TG5nTGF0fSBUaGUgZ2VvZ3JhcGhpY2FsIGxvY2F0aW9uIG9mIHRoZSBwb3B1cCdzIGFuY2hvci5cbiAgICAgKi9cbiAgICBnZXRMbmdMYXQoKSB7XG4gICAgICAgIHJldHVybiB0aGlzLl9sbmdMYXQ7XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogU2V0cyB0aGUgZ2VvZ3JhcGhpY2FsIGxvY2F0aW9uIG9mIHRoZSBwb3B1cCdzIGFuY2hvciwgYW5kIG1vdmVzIHRoZSBwb3B1cCB0byBpdC5cbiAgICAgKlxuICAgICAqIEBwYXJhbSBsbmdsYXQgVGhlIGdlb2dyYXBoaWNhbCBsb2NhdGlvbiB0byBzZXQgYXMgdGhlIHBvcHVwJ3MgYW5jaG9yLlxuICAgICAqIEByZXR1cm5zIHtQb3B1cH0gYHRoaXNgXG4gICAgICovXG4gICAgc2V0TG5nTGF0KGxuZ2xhdDogTG5nTGF0TGlrZSkge1xuICAgICAgICB0aGlzLl9sbmdMYXQgPSBMbmdMYXQuY29udmVydChsbmdsYXQpO1xuICAgICAgICB0aGlzLl9wb3MgPSBudWxsO1xuICAgICAgICB0aGlzLl91cGRhdGUoKTtcbiAgICAgICAgcmV0dXJuIHRoaXM7XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogU2V0cyB0aGUgcG9wdXAncyBjb250ZW50IHRvIGEgc3RyaW5nIG9mIHRleHQuXG4gICAgICpcbiAgICAgKiBUaGlzIGZ1bmN0aW9uIGNyZWF0ZXMgYSBbVGV4dF0oaHR0cHM6Ly9kZXZlbG9wZXIubW96aWxsYS5vcmcvZW4tVVMvZG9jcy9XZWIvQVBJL1RleHQpIG5vZGUgaW4gdGhlIERPTSxcbiAgICAgKiBzbyBpdCBjYW5ub3QgaW5zZXJ0IHJhdyBIVE1MLiBVc2UgdGhpcyBtZXRob2QgZm9yIHNlY3VyaXR5IGFnYWluc3QgWFNTXG4gICAgICogaWYgdGhlIHBvcHVwIGNvbnRlbnQgaXMgdXNlci1wcm92aWRlZC5cbiAgICAgKlxuICAgICAqIEBwYXJhbSB0ZXh0IFRleHR1YWwgY29udGVudCBmb3IgdGhlIHBvcHVwLlxuICAgICAqIEByZXR1cm5zIHtQb3B1cH0gYHRoaXNgXG4gICAgICogQGV4YW1wbGVcbiAgICAgKiB2YXIgcG9wdXAgPSBuZXcgbWFwYm94Z2wuUG9wdXAoKVxuICAgICAqICAgLnNldExuZ0xhdChlLmxuZ0xhdClcbiAgICAgKiAgIC5zZXRUZXh0KCdIZWxsbywgd29ybGQhJylcbiAgICAgKiAgIC5hZGRUbyhtYXApO1xuICAgICAqL1xuICAgIHNldFRleHQodGV4dDogc3RyaW5nKSB7XG4gICAgICAgIHJldHVybiB0aGlzLnNldERPTUNvbnRlbnQod2luZG93LmRvY3VtZW50LmNyZWF0ZVRleHROb2RlKHRleHQpKTtcbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBTZXRzIHRoZSBwb3B1cCdzIGNvbnRlbnQgdG8gdGhlIEhUTUwgcHJvdmlkZWQgYXMgYSBzdHJpbmcuXG4gICAgICpcbiAgICAgKiBUaGlzIG1ldGhvZCBkb2VzIG5vdCBwZXJmb3JtIEhUTUwgZmlsdGVyaW5nIG9yIHNhbml0aXphdGlvbiwgYW5kIG11c3QgYmVcbiAgICAgKiB1c2VkIG9ubHkgd2l0aCB0cnVzdGVkIGNvbnRlbnQuIENvbnNpZGVyIHtAbGluayBQb3B1cCNzZXRUZXh0fSBpZlxuICAgICAqIHRoZSBjb250ZW50IGlzIGFuIHVudHJ1c3RlZCB0ZXh0IHN0cmluZy5cbiAgICAgKlxuICAgICAqIEBwYXJhbSBodG1sIEEgc3RyaW5nIHJlcHJlc2VudGluZyBIVE1MIGNvbnRlbnQgZm9yIHRoZSBwb3B1cC5cbiAgICAgKiBAcmV0dXJucyB7UG9wdXB9IGB0aGlzYFxuICAgICAqL1xuICAgIHNldEhUTUwoaHRtbDogc3RyaW5nKSB7XG4gICAgICAgIGNvbnN0IGZyYWcgPSB3aW5kb3cuZG9jdW1lbnQuY3JlYXRlRG9jdW1lbnRGcmFnbWVudCgpO1xuICAgICAgICBjb25zdCB0ZW1wID0gd2luZG93LmRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoJ2JvZHknKTtcbiAgICAgICAgbGV0IGNoaWxkO1xuICAgICAgICB0ZW1wLmlubmVySFRNTCA9IGh0bWw7XG4gICAgICAgIHdoaWxlICh0cnVlKSB7XG4gICAgICAgICAgICBjaGlsZCA9IHRlbXAuZmlyc3RDaGlsZDtcbiAgICAgICAgICAgIGlmICghY2hpbGQpIGJyZWFrO1xuICAgICAgICAgICAgZnJhZy5hcHBlbmRDaGlsZChjaGlsZCk7XG4gICAgICAgIH1cblxuICAgICAgICByZXR1cm4gdGhpcy5zZXRET01Db250ZW50KGZyYWcpO1xuICAgIH1cblxuICAgIC8qKlxuICAgICAqIFNldHMgdGhlIHBvcHVwJ3MgY29udGVudCB0byB0aGUgZWxlbWVudCBwcm92aWRlZCBhcyBhIERPTSBub2RlLlxuICAgICAqXG4gICAgICogQHBhcmFtIGh0bWxOb2RlIEEgRE9NIG5vZGUgdG8gYmUgdXNlZCBhcyBjb250ZW50IGZvciB0aGUgcG9wdXAuXG4gICAgICogQHJldHVybnMge1BvcHVwfSBgdGhpc2BcbiAgICAgKiBAZXhhbXBsZVxuICAgICAqIC8vIGNyZWF0ZSBhbiBlbGVtZW50IHdpdGggdGhlIHBvcHVwIGNvbnRlbnRcbiAgICAgKiB2YXIgZGl2ID0gd2luZG93LmRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoJ2RpdicpO1xuICAgICAqIGRpdi5pbm5lckhUTUwgPSAnSGVsbG8sIHdvcmxkISc7XG4gICAgICogdmFyIHBvcHVwID0gbmV3IG1hcGJveGdsLlBvcHVwKClcbiAgICAgKiAgIC5zZXRMbmdMYXQoZS5sbmdMYXQpXG4gICAgICogICAuc2V0RE9NQ29udGVudChkaXYpXG4gICAgICogICAuYWRkVG8obWFwKTtcbiAgICAgKi9cbiAgICBzZXRET01Db250ZW50KGh0bWxOb2RlOiBOb2RlKSB7XG4gICAgICAgIHRoaXMuX2NyZWF0ZUNvbnRlbnQoKTtcbiAgICAgICAgdGhpcy5fY29udGVudC5hcHBlbmRDaGlsZChodG1sTm9kZSk7XG4gICAgICAgIHRoaXMuX3VwZGF0ZSgpO1xuICAgICAgICByZXR1cm4gdGhpcztcbiAgICB9XG5cbiAgICBfY3JlYXRlQ29udGVudCgpIHtcbiAgICAgICAgaWYgKHRoaXMuX2NvbnRlbnQpIHtcbiAgICAgICAgICAgIERPTS5yZW1vdmUodGhpcy5fY29udGVudCk7XG4gICAgICAgIH1cblxuICAgICAgICB0aGlzLl9jb250ZW50ID0gRE9NLmNyZWF0ZSgnZGl2JywgJ21hcGJveGdsLXBvcHVwLWNvbnRlbnQnLCB0aGlzLl9jb250YWluZXIpO1xuXG4gICAgICAgIGlmICh0aGlzLm9wdGlvbnMuY2xvc2VCdXR0b24pIHtcbiAgICAgICAgICAgIHRoaXMuX2Nsb3NlQnV0dG9uID0gRE9NLmNyZWF0ZSgnYnV0dG9uJywgJ21hcGJveGdsLXBvcHVwLWNsb3NlLWJ1dHRvbicsIHRoaXMuX2NvbnRlbnQpO1xuICAgICAgICAgICAgdGhpcy5fY2xvc2VCdXR0b24udHlwZSA9ICdidXR0b24nO1xuICAgICAgICAgICAgdGhpcy5fY2xvc2VCdXR0b24uc2V0QXR0cmlidXRlKCdhcmlhLWxhYmVsJywgJ0Nsb3NlIHBvcHVwJyk7XG4gICAgICAgICAgICB0aGlzLl9jbG9zZUJ1dHRvbi5pbm5lckhUTUwgPSAnJiMyMTU7JztcbiAgICAgICAgICAgIHRoaXMuX2Nsb3NlQnV0dG9uLmFkZEV2ZW50TGlzdGVuZXIoJ2NsaWNrJywgdGhpcy5fb25DbGlja0Nsb3NlKTtcbiAgICAgICAgfVxuICAgIH1cblxuICAgIF91cGRhdGUoKSB7XG4gICAgICAgIGlmICghdGhpcy5fbWFwIHx8ICF0aGlzLl9sbmdMYXQgfHwgIXRoaXMuX2NvbnRlbnQpIHsgcmV0dXJuOyB9XG5cbiAgICAgICAgaWYgKCF0aGlzLl9jb250YWluZXIpIHtcbiAgICAgICAgICAgIHRoaXMuX2NvbnRhaW5lciA9IERPTS5jcmVhdGUoJ2RpdicsICdtYXBib3hnbC1wb3B1cCcsIHRoaXMuX21hcC5nZXRDb250YWluZXIoKSk7XG4gICAgICAgICAgICB0aGlzLl90aXAgICAgICAgPSBET00uY3JlYXRlKCdkaXYnLCAnbWFwYm94Z2wtcG9wdXAtdGlwJywgdGhpcy5fY29udGFpbmVyKTtcbiAgICAgICAgICAgIHRoaXMuX2NvbnRhaW5lci5hcHBlbmRDaGlsZCh0aGlzLl9jb250ZW50KTtcblxuICAgICAgICAgICAgaWYgKHRoaXMub3B0aW9ucy5jbGFzc05hbWUpIHtcbiAgICAgICAgICAgICAgICB0aGlzLm9wdGlvbnMuY2xhc3NOYW1lLnNwbGl0KCcgJykuZm9yRWFjaChuYW1lID0+XG4gICAgICAgICAgICAgICAgICAgIHRoaXMuX2NvbnRhaW5lci5jbGFzc0xpc3QuYWRkKG5hbWUpKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfVxuXG4gICAgICAgIGlmICh0aGlzLl9tYXAudHJhbnNmb3JtLnJlbmRlcldvcmxkQ29waWVzKSB7XG4gICAgICAgICAgICB0aGlzLl9sbmdMYXQgPSBzbWFydFdyYXAodGhpcy5fbG5nTGF0LCB0aGlzLl9wb3MsIHRoaXMuX21hcC50cmFuc2Zvcm0pO1xuICAgICAgICB9XG5cbiAgICAgICAgY29uc3QgcG9zID0gdGhpcy5fcG9zID0gdGhpcy5fbWFwLnByb2plY3QodGhpcy5fbG5nTGF0KTtcblxuICAgICAgICBsZXQgYW5jaG9yOiA/QW5jaG9yID0gdGhpcy5vcHRpb25zLmFuY2hvcjtcbiAgICAgICAgY29uc3Qgb2Zmc2V0ID0gbm9ybWFsaXplT2Zmc2V0KHRoaXMub3B0aW9ucy5vZmZzZXQpO1xuXG4gICAgICAgIGlmICghYW5jaG9yKSB7XG4gICAgICAgICAgICBjb25zdCB3aWR0aCA9IHRoaXMuX2NvbnRhaW5lci5vZmZzZXRXaWR0aDtcbiAgICAgICAgICAgIGNvbnN0IGhlaWdodCA9IHRoaXMuX2NvbnRhaW5lci5vZmZzZXRIZWlnaHQ7XG4gICAgICAgICAgICBsZXQgYW5jaG9yQ29tcG9uZW50cztcblxuICAgICAgICAgICAgaWYgKHBvcy55ICsgb2Zmc2V0LmJvdHRvbS55IDwgaGVpZ2h0KSB7XG4gICAgICAgICAgICAgICAgYW5jaG9yQ29tcG9uZW50cyA9IFsndG9wJ107XG4gICAgICAgICAgICB9IGVsc2UgaWYgKHBvcy55ID4gdGhpcy5fbWFwLnRyYW5zZm9ybS5oZWlnaHQgLSBoZWlnaHQpIHtcbiAgICAgICAgICAgICAgICBhbmNob3JDb21wb25lbnRzID0gWydib3R0b20nXTtcbiAgICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICAgICAgYW5jaG9yQ29tcG9uZW50cyA9IFtdO1xuICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICBpZiAocG9zLnggPCB3aWR0aCAvIDIpIHtcbiAgICAgICAgICAgICAgICBhbmNob3JDb21wb25lbnRzLnB1c2goJ2xlZnQnKTtcbiAgICAgICAgICAgIH0gZWxzZSBpZiAocG9zLnggPiB0aGlzLl9tYXAudHJhbnNmb3JtLndpZHRoIC0gd2lkdGggLyAyKSB7XG4gICAgICAgICAgICAgICAgYW5jaG9yQ29tcG9uZW50cy5wdXNoKCdyaWdodCcpO1xuICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICBpZiAoYW5jaG9yQ29tcG9uZW50cy5sZW5ndGggPT09IDApIHtcbiAgICAgICAgICAgICAgICBhbmNob3IgPSAnYm90dG9tJztcbiAgICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICAgICAgYW5jaG9yID0gKGFuY2hvckNvbXBvbmVudHMuam9pbignLScpOiBhbnkpO1xuICAgICAgICAgICAgfVxuICAgICAgICB9XG5cbiAgICAgICAgY29uc3Qgb2Zmc2V0ZWRQb3MgPSBwb3MuYWRkKG9mZnNldFthbmNob3JdKS5yb3VuZCgpO1xuXG4gICAgICAgIERPTS5zZXRUcmFuc2Zvcm0odGhpcy5fY29udGFpbmVyLCBgJHthbmNob3JUcmFuc2xhdGVbYW5jaG9yXX0gdHJhbnNsYXRlKCR7b2Zmc2V0ZWRQb3MueH1weCwke29mZnNldGVkUG9zLnl9cHgpYCk7XG4gICAgICAgIGFwcGx5QW5jaG9yQ2xhc3ModGhpcy5fY29udGFpbmVyLCBhbmNob3IsICdwb3B1cCcpO1xuICAgIH1cblxuICAgIF9vbkNsaWNrQ2xvc2UoKSB7XG4gICAgICAgIHRoaXMucmVtb3ZlKCk7XG4gICAgfVxufVxuXG5mdW5jdGlvbiBub3JtYWxpemVPZmZzZXQob2Zmc2V0OiA/T2Zmc2V0KSB7XG4gICAgaWYgKCFvZmZzZXQpIHtcbiAgICAgICAgcmV0dXJuIG5vcm1hbGl6ZU9mZnNldChuZXcgUG9pbnQoMCwgMCkpO1xuXG4gICAgfSBlbHNlIGlmICh0eXBlb2Ygb2Zmc2V0ID09PSAnbnVtYmVyJykge1xuICAgICAgICAvLyBpbnB1dCBzcGVjaWZpZXMgYSByYWRpdXMgZnJvbSB3aGljaCB0byBjYWxjdWxhdGUgb2Zmc2V0cyBhdCBhbGwgcG9zaXRpb25zXG4gICAgICAgIGNvbnN0IGNvcm5lck9mZnNldCA9IE1hdGgucm91bmQoTWF0aC5zcXJ0KDAuNSAqIE1hdGgucG93KG9mZnNldCwgMikpKTtcbiAgICAgICAgcmV0dXJuIHtcbiAgICAgICAgICAgICdjZW50ZXInOiBuZXcgUG9pbnQoMCwgMCksXG4gICAgICAgICAgICAndG9wJzogbmV3IFBvaW50KDAsIG9mZnNldCksXG4gICAgICAgICAgICAndG9wLWxlZnQnOiBuZXcgUG9pbnQoY29ybmVyT2Zmc2V0LCBjb3JuZXJPZmZzZXQpLFxuICAgICAgICAgICAgJ3RvcC1yaWdodCc6IG5ldyBQb2ludCgtY29ybmVyT2Zmc2V0LCBjb3JuZXJPZmZzZXQpLFxuICAgICAgICAgICAgJ2JvdHRvbSc6IG5ldyBQb2ludCgwLCAtb2Zmc2V0KSxcbiAgICAgICAgICAgICdib3R0b20tbGVmdCc6IG5ldyBQb2ludChjb3JuZXJPZmZzZXQsIC1jb3JuZXJPZmZzZXQpLFxuICAgICAgICAgICAgJ2JvdHRvbS1yaWdodCc6IG5ldyBQb2ludCgtY29ybmVyT2Zmc2V0LCAtY29ybmVyT2Zmc2V0KSxcbiAgICAgICAgICAgICdsZWZ0JzogbmV3IFBvaW50KG9mZnNldCwgMCksXG4gICAgICAgICAgICAncmlnaHQnOiBuZXcgUG9pbnQoLW9mZnNldCwgMClcbiAgICAgICAgfTtcblxuICAgIH0gZWxzZSBpZiAob2Zmc2V0IGluc3RhbmNlb2YgUG9pbnQgfHwgQXJyYXkuaXNBcnJheShvZmZzZXQpKSB7XG4gICAgICAgIC8vIGlucHV0IHNwZWNpZmllcyBhIHNpbmdsZSBvZmZzZXQgdG8gYmUgYXBwbGllZCB0byBhbGwgcG9zaXRpb25zXG4gICAgICAgIGNvbnN0IGNvbnZlcnRlZE9mZnNldCA9IFBvaW50LmNvbnZlcnQob2Zmc2V0KTtcbiAgICAgICAgcmV0dXJuIHtcbiAgICAgICAgICAgICdjZW50ZXInOiBjb252ZXJ0ZWRPZmZzZXQsXG4gICAgICAgICAgICAndG9wJzogY29udmVydGVkT2Zmc2V0LFxuICAgICAgICAgICAgJ3RvcC1sZWZ0JzogY29udmVydGVkT2Zmc2V0LFxuICAgICAgICAgICAgJ3RvcC1yaWdodCc6IGNvbnZlcnRlZE9mZnNldCxcbiAgICAgICAgICAgICdib3R0b20nOiBjb252ZXJ0ZWRPZmZzZXQsXG4gICAgICAgICAgICAnYm90dG9tLWxlZnQnOiBjb252ZXJ0ZWRPZmZzZXQsXG4gICAgICAgICAgICAnYm90dG9tLXJpZ2h0JzogY29udmVydGVkT2Zmc2V0LFxuICAgICAgICAgICAgJ2xlZnQnOiBjb252ZXJ0ZWRPZmZzZXQsXG4gICAgICAgICAgICAncmlnaHQnOiBjb252ZXJ0ZWRPZmZzZXRcbiAgICAgICAgfTtcblxuICAgIH0gZWxzZSB7XG4gICAgICAgIC8vIGlucHV0IHNwZWNpZmllcyBhbiBvZmZzZXQgcGVyIHBvc2l0aW9uXG4gICAgICAgIHJldHVybiB7XG4gICAgICAgICAgICAnY2VudGVyJzogUG9pbnQuY29udmVydChvZmZzZXRbJ2NlbnRlciddIHx8IFswLCAwXSksXG4gICAgICAgICAgICAndG9wJzogUG9pbnQuY29udmVydChvZmZzZXRbJ3RvcCddIHx8IFswLCAwXSksXG4gICAgICAgICAgICAndG9wLWxlZnQnOiBQb2ludC5jb252ZXJ0KG9mZnNldFsndG9wLWxlZnQnXSB8fCBbMCwgMF0pLFxuICAgICAgICAgICAgJ3RvcC1yaWdodCc6IFBvaW50LmNvbnZlcnQob2Zmc2V0Wyd0b3AtcmlnaHQnXSB8fCBbMCwgMF0pLFxuICAgICAgICAgICAgJ2JvdHRvbSc6IFBvaW50LmNvbnZlcnQob2Zmc2V0Wydib3R0b20nXSB8fCBbMCwgMF0pLFxuICAgICAgICAgICAgJ2JvdHRvbS1sZWZ0JzogUG9pbnQuY29udmVydChvZmZzZXRbJ2JvdHRvbS1sZWZ0J10gfHwgWzAsIDBdKSxcbiAgICAgICAgICAgICdib3R0b20tcmlnaHQnOiBQb2ludC5jb252ZXJ0KG9mZnNldFsnYm90dG9tLXJpZ2h0J10gfHwgWzAsIDBdKSxcbiAgICAgICAgICAgICdsZWZ0JzogUG9pbnQuY29udmVydChvZmZzZXRbJ2xlZnQnXSB8fCBbMCwgMF0pLFxuICAgICAgICAgICAgJ3JpZ2h0JzogUG9pbnQuY29udmVydChvZmZzZXRbJ3JpZ2h0J10gfHwgWzAsIDBdKVxuICAgICAgICB9O1xuICAgIH1cbn1cbiIsIi8vIEBmbG93XG5cbmltcG9ydCBhc3NlcnQgZnJvbSAnYXNzZXJ0JztcbmltcG9ydCBzdXBwb3J0ZWQgZnJvbSAnQG1hcGJveC9tYXBib3gtZ2wtc3VwcG9ydGVkJztcblxuaW1wb3J0IHsgdmVyc2lvbiB9IGZyb20gJy4uL3BhY2thZ2UuanNvbic7XG5pbXBvcnQgTWFwIGZyb20gJy4vdWkvbWFwJztcbmltcG9ydCBOYXZpZ2F0aW9uQ29udHJvbCBmcm9tICcuL3VpL2NvbnRyb2wvbmF2aWdhdGlvbl9jb250cm9sJztcbmltcG9ydCBHZW9sb2NhdGVDb250cm9sIGZyb20gJy4vdWkvY29udHJvbC9nZW9sb2NhdGVfY29udHJvbCc7XG5pbXBvcnQgQXR0cmlidXRpb25Db250cm9sIGZyb20gJy4vdWkvY29udHJvbC9hdHRyaWJ1dGlvbl9jb250cm9sJztcbmltcG9ydCBTY2FsZUNvbnRyb2wgZnJvbSAnLi91aS9jb250cm9sL3NjYWxlX2NvbnRyb2wnO1xuaW1wb3J0IEZ1bGxzY3JlZW5Db250cm9sIGZyb20gJy4vdWkvY29udHJvbC9mdWxsc2NyZWVuX2NvbnRyb2wnO1xuaW1wb3J0IFBvcHVwIGZyb20gJy4vdWkvcG9wdXAnO1xuaW1wb3J0IE1hcmtlciBmcm9tICcuL3VpL21hcmtlcic7XG5pbXBvcnQgU3R5bGUgZnJvbSAnLi9zdHlsZS9zdHlsZSc7XG5pbXBvcnQgTG5nTGF0IGZyb20gJy4vZ2VvL2xuZ19sYXQnO1xuaW1wb3J0IExuZ0xhdEJvdW5kcyBmcm9tICcuL2dlby9sbmdfbGF0X2JvdW5kcyc7XG5pbXBvcnQgUG9pbnQgZnJvbSAnQG1hcGJveC9wb2ludC1nZW9tZXRyeSc7XG5pbXBvcnQge0V2ZW50ZWR9IGZyb20gJy4vdXRpbC9ldmVudGVkJztcbmltcG9ydCBjb25maWcgZnJvbSAnLi91dGlsL2NvbmZpZyc7XG5pbXBvcnQge3NldFJUTFRleHRQbHVnaW59IGZyb20gJy4vc291cmNlL3J0bF90ZXh0X3BsdWdpbic7XG5pbXBvcnQgV29ya2VyUG9vbCBmcm9tICcuL3V0aWwvd29ya2VyX3Bvb2wnO1xuXG5jb25zdCBleHBvcnRlZCA9IHtcbiAgICB2ZXJzaW9uLFxuICAgIHN1cHBvcnRlZCxcbiAgICBzZXRSVExUZXh0UGx1Z2luOiBzZXRSVExUZXh0UGx1Z2luLFxuICAgIE1hcCxcbiAgICBOYXZpZ2F0aW9uQ29udHJvbCxcbiAgICBHZW9sb2NhdGVDb250cm9sLFxuICAgIEF0dHJpYnV0aW9uQ29udHJvbCxcbiAgICBTY2FsZUNvbnRyb2wsXG4gICAgRnVsbHNjcmVlbkNvbnRyb2wsXG4gICAgUG9wdXAsXG4gICAgTWFya2VyLFxuICAgIFN0eWxlLFxuICAgIExuZ0xhdCxcbiAgICBMbmdMYXRCb3VuZHMsXG4gICAgUG9pbnQsXG4gICAgRXZlbnRlZCxcbiAgICBjb25maWcsXG5cbiAgICAvKipcbiAgICAgKiBHZXRzIGFuZCBzZXRzIHRoZSBtYXAncyBbYWNjZXNzIHRva2VuXShodHRwczovL3d3dy5tYXBib3guY29tL2hlbHAvZGVmaW5lLWFjY2Vzcy10b2tlbi8pLlxuICAgICAqXG4gICAgICogQHZhciB7c3RyaW5nfSBhY2Nlc3NUb2tlblxuICAgICAqIEBleGFtcGxlXG4gICAgICogbWFwYm94Z2wuYWNjZXNzVG9rZW4gPSBteUFjY2Vzc1Rva2VuO1xuICAgICAqIEBzZWUgW0Rpc3BsYXkgYSBtYXBdKGh0dHBzOi8vd3d3Lm1hcGJveC5jb20vbWFwYm94LWdsLWpzL2V4YW1wbGVzLylcbiAgICAgKi9cbiAgICBnZXQgYWNjZXNzVG9rZW4oKSB7XG4gICAgICAgIHJldHVybiBjb25maWcuQUNDRVNTX1RPS0VOO1xuICAgIH0sXG5cbiAgICBzZXQgYWNjZXNzVG9rZW4odG9rZW46IHN0cmluZykge1xuICAgICAgICBjb25maWcuQUNDRVNTX1RPS0VOID0gdG9rZW47XG4gICAgfSxcblxuICAgIGdldCB3b3JrZXJDb3VudCgpIHtcbiAgICAgICAgcmV0dXJuIFdvcmtlclBvb2wud29ya2VyQ291bnQ7XG4gICAgfSxcblxuICAgIHNldCB3b3JrZXJDb3VudChjb3VudDogbnVtYmVyKSB7XG4gICAgICAgIFdvcmtlclBvb2wud29ya2VyQ291bnQgPSBjb3VudDtcbiAgICB9LFxuXG4gICAgd29ya2VyVXJsOiAnJ1xufTtcblxuLyoqXG4gKiBUaGUgdmVyc2lvbiBvZiBNYXBib3ggR0wgSlMgaW4gdXNlIGFzIHNwZWNpZmllZCBpbiBgcGFja2FnZS5qc29uYCxcbiAqIGBDSEFOR0VMT0cubWRgLCBhbmQgdGhlIEdpdEh1YiByZWxlYXNlLlxuICpcbiAqIEB2YXIge3N0cmluZ30gdmVyc2lvblxuICovXG5cbi8qKlxuICogVGVzdCB3aGV0aGVyIHRoZSBicm93c2VyIFtzdXBwb3J0cyBNYXBib3ggR0wgSlNdKGh0dHBzOi8vd3d3Lm1hcGJveC5jb20vaGVscC9tYXBib3gtYnJvd3Nlci1zdXBwb3J0LyNtYXBib3gtZ2wtanMpLlxuICpcbiAqIEBmdW5jdGlvbiBzdXBwb3J0ZWRcbiAqIEBwYXJhbSB7T2JqZWN0fSBbb3B0aW9uc11cbiAqIEBwYXJhbSB7Ym9vbGVhbn0gW29wdGlvbnMuZmFpbElmTWFqb3JQZXJmb3JtYW5jZUNhdmVhdD1mYWxzZV0gSWYgYHRydWVgLFxuICogICB0aGUgZnVuY3Rpb24gd2lsbCByZXR1cm4gYGZhbHNlYCBpZiB0aGUgcGVyZm9ybWFuY2Ugb2YgTWFwYm94IEdMIEpTIHdvdWxkXG4gKiAgIGJlIGRyYW1hdGljYWxseSB3b3JzZSB0aGFuIGV4cGVjdGVkIChlLmcuIGEgc29mdHdhcmUgV2ViR0wgcmVuZGVyZXIgd291bGQgYmUgdXNlZCkuXG4gKiBAcmV0dXJuIHtib29sZWFufVxuICogQGV4YW1wbGVcbiAqIG1hcGJveGdsLnN1cHBvcnRlZCgpIC8vID0gdHJ1ZVxuICogQHNlZSBbQ2hlY2sgZm9yIGJyb3dzZXIgc3VwcG9ydF0oaHR0cHM6Ly93d3cubWFwYm94LmNvbS9tYXBib3gtZ2wtanMvZXhhbXBsZS9jaGVjay1mb3Itc3VwcG9ydC8pXG4gKi9cblxuLyoqXG4gKiBTZXRzIHRoZSBtYXAncyBbUlRMIHRleHQgcGx1Z2luXShodHRwczovL3d3dy5tYXBib3guY29tL21hcGJveC1nbC1qcy9wbHVnaW5zLyNtYXBib3gtZ2wtcnRsLXRleHQpLlxuICogTmVjZXNzYXJ5IGZvciBzdXBwb3J0aW5nIGxhbmd1YWdlcyBsaWtlIEFyYWJpYyBhbmQgSGVicmV3IHRoYXQgYXJlIHdyaXR0ZW4gcmlnaHQtdG8tbGVmdC5cbiAqXG4gKiBAZnVuY3Rpb24gc2V0UlRMVGV4dFBsdWdpblxuICogQHBhcmFtIHtzdHJpbmd9IHBsdWdpblVSTCBVUkwgcG9pbnRpbmcgdG8gdGhlIE1hcGJveCBSVEwgdGV4dCBwbHVnaW4gc291cmNlLlxuICogQHBhcmFtIHtGdW5jdGlvbn0gY2FsbGJhY2sgQ2FsbGVkIHdpdGggYW4gZXJyb3IgYXJndW1lbnQgaWYgdGhlcmUgaXMgYW4gZXJyb3IuXG4gKiBAZXhhbXBsZVxuICogbWFwYm94Z2wuc2V0UlRMVGV4dFBsdWdpbignaHR0cHM6Ly9hcGkubWFwYm94LmNvbS9tYXBib3gtZ2wtanMvcGx1Z2lucy9tYXBib3gtZ2wtcnRsLXRleHQvdjAuMi4wL21hcGJveC1nbC1ydGwtdGV4dC5qcycpO1xuICogQHNlZSBbQWRkIHN1cHBvcnQgZm9yIHJpZ2h0LXRvLWxlZnQgc2NyaXB0c10oaHR0cHM6Ly93d3cubWFwYm94LmNvbS9tYXBib3gtZ2wtanMvZXhhbXBsZS9tYXBib3gtZ2wtcnRsLXRleHQvKVxuICovXG5cbmV4cG9ydCBkZWZhdWx0IGV4cG9ydGVkO1xuXG4vLyBjYW5hcnkgYXNzZXJ0OiB1c2VkIHRvIGNvbmZpcm0gdGhhdCBhc3NlcnRzIGhhdmUgYmVlbiByZW1vdmVkIGZyb20gcHJvZHVjdGlvbiBidWlsZFxuYXNzZXJ0KHRydWUsICdjYW5hcnkgYXNzZXJ0Jyk7XG4iXSwibmFtZXMiOlsiaXNTdXBwb3J0ZWQiLCJvcHRpb25zIiwid2luZG93IiwiZG9jdW1lbnQiLCJBcnJheSIsInByb3RvdHlwZSIsImV2ZXJ5IiwiZmlsdGVyIiwiZm9yRWFjaCIsImluZGV4T2YiLCJsYXN0SW5kZXhPZiIsIm1hcCIsInNvbWUiLCJyZWR1Y2UiLCJyZWR1Y2VSaWdodCIsImlzQXJyYXkiLCJGdW5jdGlvbiIsImJpbmQiLCJPYmplY3QiLCJrZXlzIiwiY3JlYXRlIiwiZ2V0UHJvdG90eXBlT2YiLCJnZXRPd25Qcm9wZXJ0eU5hbWVzIiwiaXNTZWFsZWQiLCJpc0Zyb3plbiIsImlzRXh0ZW5zaWJsZSIsImdldE93blByb3BlcnR5RGVzY3JpcHRvciIsImRlZmluZVByb3BlcnR5IiwiZGVmaW5lUHJvcGVydGllcyIsInNlYWwiLCJmcmVlemUiLCJwcmV2ZW50RXh0ZW5zaW9ucyIsIkpTT04iLCJzdXBwb3J0ZWQiLCJ3b3JrZXIiLCJibG9iIiwiQmxvYiIsInR5cGUiLCJ3b3JrZXJVUkwiLCJVUkwiLCJjcmVhdGVPYmplY3RVUkwiLCJXb3JrZXIiLCJlIiwidGVybWluYXRlIiwicmV2b2tlT2JqZWN0VVJMIiwiaXNXb3JrZXJTdXBwb3J0ZWQiLCJBcnJheUJ1ZmZlciIsImlzVmlldyIsImZhaWxJZk1ham9yUGVyZm9ybWFuY2VDYXZlYXQiLCJ1bmRlZmluZWQiLCJpc1dlYkdMU3VwcG9ydGVkQ2FjaGUiLCJjYW52YXMiLCJjcmVhdGVFbGVtZW50IiwiYXR0cmlidXRlcyIsIndlYkdMQ29udGV4dEF0dHJpYnV0ZXMiLCJwcm9iYWJseVN1cHBvcnRzQ29udGV4dCIsInN1cHBvcnRzQ29udGV4dCIsImdldENvbnRleHQiLCJpc1dlYkdMU3VwcG9ydGVkIiwiaXNXZWJHTFN1cHBvcnRlZENhY2hlZCIsIm1vZHVsZSIsImV4cG9ydHMiLCJtYXBib3hnbCIsImFudGlhbGlhcyIsImFscGhhIiwic3RlbmNpbCIsImRlcHRoIiwiRE9NIiwidGFnTmFtZSIsImNsYXNzTmFtZSIsImNvbnRhaW5lciIsImNvbnN0IiwiZWwiLCJhcHBlbmRDaGlsZCIsIm5hbWVzcGFjZVVSSSIsImNyZWF0ZUVsZW1lbnROUyIsImRvY1N0eWxlIiwiZG9jdW1lbnRFbGVtZW50Iiwic3R5bGUiLCJ0ZXN0UHJvcCIsInByb3BzIiwibGV0IiwiaSIsImxlbmd0aCIsInVzZXJTZWxlY3QiLCJzZWxlY3RQcm9wIiwiZGlzYWJsZURyYWciLCJlbmFibGVEcmFnIiwidHJhbnNmb3JtUHJvcCIsInNldFRyYW5zZm9ybSIsInZhbHVlIiwicGFzc2l2ZVN1cHBvcnRlZCIsImdldCIsImFkZEV2ZW50TGlzdGVuZXIiLCJyZW1vdmVFdmVudExpc3RlbmVyIiwiZXJyIiwidGFyZ2V0IiwiY2FsbGJhY2siLCJjYXB0dXJlIiwic3VwcHJlc3NDbGljayIsInByZXZlbnREZWZhdWx0Iiwic3RvcFByb3BhZ2F0aW9uIiwic2V0VGltZW91dCIsIm1vdXNlUG9zIiwicmVjdCIsImdldEJvdW5kaW5nQ2xpZW50UmVjdCIsInRvdWNoZXMiLCJQb2ludCIsImNsaWVudFgiLCJsZWZ0IiwiY2xpZW50TGVmdCIsImNsaWVudFkiLCJ0b3AiLCJjbGllbnRUb3AiLCJ0b3VjaFBvcyIsInBvaW50cyIsImNoYW5nZWRUb3VjaGVzIiwicHVzaCIsIm1vdXNlQnV0dG9uIiwiSW5zdGFsbFRyaWdnZXIiLCJidXR0b24iLCJjdHJsS2V5IiwibmF2aWdhdG9yIiwicGxhdGZvcm0iLCJ0b1VwcGVyQ2FzZSIsInJlbW92ZSIsIm5vZGUiLCJwYXJlbnROb2RlIiwicmVtb3ZlQ2hpbGQiLCJjb25maWciLCJBUElfVVJMIiwiRVZFTlRTX1VSTCIsInRoaXMiLCJSRVFVSVJFX0FDQ0VTU19UT0tFTiIsIkFDQ0VTU19UT0tFTiIsImhlbHAiLCJtYWtlQVBJVVJMIiwidXJsT2JqZWN0IiwiYWNjZXNzVG9rZW4iLCJhcGlVcmxPYmplY3QiLCJwYXJzZVVybCIsInByb3RvY29sIiwiYXV0aG9yaXR5IiwicGF0aCIsImZvcm1hdFVybCIsIkVycm9yIiwicGFyYW1zIiwiaXNNYXBib3hVUkwiLCJ1cmwiLCJub3JtYWxpemVHbHlwaHNVUkwiLCJub3JtYWxpemVTb3VyY2VVUkwiLCJub3JtYWxpemVTcHJpdGVVUkwiLCJmb3JtYXQiLCJleHRlbnNpb24iLCJpbWFnZUV4dGVuc2lvblJlIiwibm9ybWFsaXplVGlsZVVSTCIsInRpbGVVUkwiLCJzb3VyY2VVUkwiLCJ0aWxlU2l6ZSIsInN1ZmZpeCIsImJyb3dzZXIiLCJkZXZpY2VQaXhlbFJhdGlvIiwic3VwcG9ydHNXZWJwIiwicmVwbGFjZSIsInJlcGxhY2VUZW1wQWNjZXNzVG9rZW4iLCJ1cmxSZSIsInBhcnRzIiwibWF0Y2giLCJzcGxpdCIsIm9iaiIsImpvaW4iLCJUdXJuc3RpbGVFdmVudCIsImV2ZW50RGF0YSIsImFub25JZCIsImxhc3RTdWNjZXNzIiwicXVldWUiLCJwZW5kaW5nIiwicGVuZGluZ1JlcXVlc3QiLCJwb3N0VHVybnN0aWxlRXZlbnQiLCJ0aWxlVXJscyIsInRlc3QiLCJxdWV1ZVJlcXVlc3QiLCJub3ciLCJkYXRlIiwicHJvY2Vzc1JlcXVlc3RzIiwic3RvcmFnZUtleSIsInR1cm5zdGlsZUV2ZW50U3RvcmFnZUtleSIsImlzTG9jYWxTdG9yYWdlQXZhaWxhYmxlIiwic3RvcmFnZUF2YWlsYWJsZSIsImR1ZUZvckV2ZW50IiwiZGF0YSIsImxvY2FsU3RvcmFnZSIsImdldEl0ZW0iLCJwYXJzZSIsIndhcm5PbmNlIiwidmFsaWRhdGVVdWlkIiwidXVpZCIsIm5leHRVcGRhdGUiLCJzaGlmdCIsImxhc3RVcGRhdGUiLCJEYXRlIiwibmV4dERhdGUiLCJkYXlzRWxhcHNlZCIsImdldERhdGUiLCJldmVuc3RVcmxPYmplY3QiLCJyZXF1ZXN0IiwiaGVhZGVycyIsIkNvbnRlbnQtVHlwZSIsInBheWxvYWQiLCJzdHJpbmdpZnkiLCJldmVudCIsImNyZWF0ZWQiLCJ0b0lTT1N0cmluZyIsInNka0lkZW50aWZpZXIiLCJzZGtWZXJzaW9uIiwiZW5hYmxlZC50ZWxlbWV0cnkiLCJ1c2VySWQiLCJwb3N0RGF0YSIsImVycm9yIiwidGhpcyQxIiwic2V0SXRlbSIsInR1cm5zdGlsZUV2ZW50XyIsIkltYWdlTWFuYWdlciIsImltYWdlcyIsImxvYWRlZCIsInJlcXVlc3RvcnMiLCJwYXR0ZXJucyIsImF0bGFzSW1hZ2UiLCJSR0JBSW1hZ2UiLCJ3aWR0aCIsImhlaWdodCIsImRpcnR5IiwiaXNMb2FkZWQiLCJzZXRMb2FkZWQiLCJyZWYiLCJpZHMiLCJfbm90aWZ5IiwiZ2V0SW1hZ2UiLCJpZCIsImFkZEltYWdlIiwiaW1hZ2UiLCJyZW1vdmVJbWFnZSIsImxpc3RJbWFnZXMiLCJnZXRJbWFnZXMiLCJoYXNBbGxEZXBlbmRlbmNpZXMiLCJyZXNwb25zZSIsImNsb25lIiwicGl4ZWxSYXRpbyIsInNkZiIsImdldFBpeGVsU2l6ZSIsImdldFBhdHRlcm4iLCJwYXR0ZXJuIiwicG9zaXRpb24iLCJiaW4iLCJwYWRkaW5nIiwieCIsInkiLCJJbWFnZVBvc2l0aW9uIiwiX3VwZGF0ZVBhdHRlcm5BdGxhcyIsImNvbnRleHQiLCJnbCIsImF0bGFzVGV4dHVyZSIsInVwZGF0ZSIsIlRleHR1cmUiLCJSR0JBIiwiTElORUFSIiwiQ0xBTVBfVE9fRURHRSIsImJpbnMiLCJwb3RwYWNrIiwidyIsImgiLCJkc3QiLCJyZXNpemUiLCJzcmMiLCJjb3B5IiwiVGlueVNERiIsIklORiIsImZvbnRTaXplIiwiYnVmZmVyIiwicmFkaXVzIiwiY3V0b2ZmIiwiZm9udEZhbWlseSIsImZvbnRXZWlnaHQiLCJzaXplIiwiY3R4IiwiZm9udCIsInRleHRCYXNlbGluZSIsImZpbGxTdHlsZSIsImdyaWRPdXRlciIsIkZsb2F0NjRBcnJheSIsImdyaWRJbm5lciIsImYiLCJkIiwieiIsInYiLCJJbnQxNkFycmF5IiwibWlkZGxlIiwiTWF0aCIsInJvdW5kIiwidXNlckFnZW50IiwiZWR0IiwiZWR0MWQiLCJzcXJ0IiwibiIsInEiLCJrIiwicyIsImRyYXciLCJjaGFyIiwiY2xlYXJSZWN0IiwiZmlsbFRleHQiLCJpbWdEYXRhIiwiZ2V0SW1hZ2VEYXRhIiwiYWxwaGFDaGFubmVsIiwiVWludDhDbGFtcGVkQXJyYXkiLCJhIiwicG93IiwibWF4IiwibWluIiwiR2x5cGhNYW5hZ2VyIiwicmVxdWVzdFRyYW5zZm9ybSIsImxvY2FsSWRlb2dyYXBoRm9udEZhbWlseSIsImVudHJpZXMiLCJzZXRVUkwiLCJnZXRHbHlwaHMiLCJnbHlwaHMiLCJhbGwiLCJzdGFjayIsImFzeW5jQWxsIiwiZW50cnkiLCJyZXF1ZXN0cyIsImdseXBoIiwiX3RpbnlTREYiLCJyYW5nZSIsImZsb29yIiwibG9hZEdseXBoUmFuZ2UiLCJjYiIsInJlc3VsdCIsImJpdG1hcCIsIm1ldHJpY3MiLCJmYW1pbHkiLCJpc0NoYXIiLCJ0aW55U0RGIiwiQWxwaGFJbWFnZSIsIlN0cmluZyIsImZyb21DaGFyQ29kZSIsImFkdmFuY2UiLCJMaWdodFBvc2l0aW9uUHJvcGVydHkiLCJzcGVjaWZpY2F0aW9uIiwic3R5bGVTcGVjIiwibGlnaHQiLCJwb3NzaWJseUV2YWx1YXRlIiwicGFyYW1ldGVycyIsInNwaGVyaWNhbFRvQ2FydGVzaWFuIiwiZXhwcmVzc2lvbiIsImV2YWx1YXRlIiwiaW50ZXJwb2xhdGUiLCJiIiwidCIsInByb3BlcnRpZXMiLCJQcm9wZXJ0aWVzIiwiYW5jaG9yIiwiRGF0YUNvbnN0YW50UHJvcGVydHkiLCJjb2xvciIsImludGVuc2l0eSIsIkxpZ2h0IiwibGlnaHRPcHRpb25zIiwic3VwZXIiLCJfdHJhbnNpdGlvbmFibGUiLCJUcmFuc2l0aW9uYWJsZSIsInNldExpZ2h0IiwiX3RyYW5zaXRpb25pbmciLCJ1bnRyYW5zaXRpb25lZCIsImdldExpZ2h0Iiwic2VyaWFsaXplIiwiX3ZhbGlkYXRlIiwidmFsaWRhdGVMaWdodCIsIm5hbWUiLCJlbmRzV2l0aCIsInNldFRyYW5zaXRpb24iLCJzbGljZSIsInNldFZhbHVlIiwidXBkYXRlVHJhbnNpdGlvbnMiLCJ0cmFuc2l0aW9uZWQiLCJoYXNUcmFuc2l0aW9uIiwicmVjYWxjdWxhdGUiLCJ2YWxpZGF0ZSIsImVtaXRWYWxpZGF0aW9uRXJyb3JzIiwiY2FsbCIsInZhbGlkYXRlU3R5bGUiLCJleHRlbmQiLCJzcHJpdGUiLCJFdmVudGVkIiwiTGluZUF0bGFzIiwibmV4dFJvdyIsImJ5dGVzIiwiVWludDhBcnJheSIsInBvc2l0aW9ucyIsImdldERhc2giLCJkYXNoYXJyYXkiLCJrZXkiLCJhZGREYXNoIiwic3RyZXRjaCIsImhhbGZXaWR0aCIsIm9kZExlbmd0aCIsInJvdyIsImluZGV4IiwicmlnaHQiLCJwYXJ0SW5kZXgiLCJkaXN0TGVmdCIsImFicyIsImRpc3RSaWdodCIsImRpc3QiLCJpbnNpZGUiLCJzaWduZWREaXN0YW5jZSIsImRpc3RNaWRkbGUiLCJkaXN0RWRnZSIsInBvcyIsInRleHR1cmUiLCJiaW5kVGV4dHVyZSIsIlRFWFRVUkVfMkQiLCJ0ZXhTdWJJbWFnZTJEIiwiVU5TSUdORURfQllURSIsImNyZWF0ZVRleHR1cmUiLCJ0ZXhQYXJhbWV0ZXJpIiwiVEVYVFVSRV9XUkFQX1MiLCJSRVBFQVQiLCJURVhUVVJFX1dSQVBfVCIsIlRFWFRVUkVfTUlOX0ZJTFRFUiIsIlRFWFRVUkVfTUFHX0ZJTFRFUiIsInRleEltYWdlMkQiLCJEaXNwYXRjaGVyIiwid29ya2VyUG9vbCIsInBhcmVudCIsImFjdG9ycyIsImN1cnJlbnRBY3RvciIsInVuaXF1ZUlkIiwid29ya2VycyIsImFjcXVpcmUiLCJhY3RvciIsIkFjdG9yIiwiYnJvYWRjYXN0IiwiZG9uZSIsInNlbmQiLCJ0YXJnZXRJRCIsImlzTmFOIiwicmVsZWFzZSIsIkxuZ0xhdCIsImxuZyIsImxhdCIsIndyYXAiLCJ0b0FycmF5IiwidG9TdHJpbmciLCJ0b0JvdW5kcyIsImxhdEFjY3VyYWN5IiwibG5nQWNjdXJhY3kiLCJjb3MiLCJQSSIsIkxuZ0xhdEJvdW5kcyIsImNvbnZlcnQiLCJpbnB1dCIsIk51bWJlciIsInN3IiwibmUiLCJzZXRTb3V0aFdlc3QiLCJzZXROb3J0aEVhc3QiLCJfbmUiLCJfc3ciLCJzdzIiLCJuZTIiLCJnZXRDZW50ZXIiLCJnZXRTb3V0aFdlc3QiLCJnZXROb3J0aEVhc3QiLCJnZXROb3J0aFdlc3QiLCJnZXRXZXN0IiwiZ2V0Tm9ydGgiLCJnZXRTb3V0aEVhc3QiLCJnZXRFYXN0IiwiZ2V0U291dGgiLCJpc0VtcHR5IiwiVGlsZUJvdW5kcyIsImJvdW5kcyIsIm1pbnpvb20iLCJtYXh6b29tIiwidmFsaWRhdGVCb3VuZHMiLCJjb250YWlucyIsInRpbGVJRCIsImxldmVsIiwibG5nWCIsImxhdFkiLCJjZWlsIiwiem9vbSIsImNsYW1wIiwic2luIiwic2NhbGUiLCJsb2ciLCJWZWN0b3JUaWxlU291cmNlIiwiZGlzcGF0Y2hlciIsImV2ZW50ZWRQYXJlbnQiLCJzY2hlbWUiLCJyZXBhcnNlT3ZlcnNjYWxlZCIsImlzVGlsZUNsaXBwZWQiLCJwaWNrIiwiX29wdGlvbnMiLCJfY29sbGVjdFJlc291cmNlVGltaW5nIiwiY29sbGVjdFJlc291cmNlVGltaW5nIiwic2V0RXZlbnRlZFBhcmVudCIsImxvYWQiLCJmaXJlIiwiRXZlbnQiLCJkYXRhVHlwZSIsIl90aWxlSlNPTlJlcXVlc3QiLCJsb2FkVGlsZUpTT04iLCJfdHJhbnNmb3JtUmVxdWVzdCIsInRpbGVKU09OIiwiRXJyb3JFdmVudCIsInRpbGVCb3VuZHMiLCJ0aWxlcyIsInNvdXJjZURhdGFUeXBlIiwiaGFzVGlsZSIsImNhbm9uaWNhbCIsIm9uQWRkIiwib25SZW1vdmUiLCJjYW5jZWwiLCJsb2FkVGlsZSIsInRpbGUiLCJub3JtYWxpemVVUkwiLCJSZXNvdXJjZVR5cGUiLCJUaWxlIiwidWlkIiwib3ZlcnNjYWxlZFoiLCJvdmVyc2NhbGVGYWN0b3IiLCJzb3VyY2UiLCJzaG93Q29sbGlzaW9uQm94ZXMiLCJhYm9ydGVkIiwic3RhdHVzIiwicmVzb3VyY2VUaW1pbmciLCJfcmVmcmVzaEV4cGlyZWRUaWxlcyIsInNldEV4cGlyeURhdGEiLCJsb2FkVmVjdG9yRGF0YSIsInBhaW50ZXIiLCJyZWxvYWRDYWxsYmFjayIsIndvcmtlcklEIiwic3RhdGUiLCJhYm9ydFRpbGUiLCJ1bmxvYWRUaWxlIiwidW5sb2FkVmVjdG9yRGF0YSIsIlJhc3RlclRpbGVTb3VyY2UiLCJyb3VuZFpvb20iLCJfbG9hZGVkIiwiaW1nIiwiY2FjaGVDb250cm9sIiwiZXhwaXJlcyIsImdldFRpbGVUZXh0dXJlIiwidXNlTWlwbWFwIiwiTElORUFSX01JUE1BUF9ORUFSRVNUIiwiZXh0VGV4dHVyZUZpbHRlckFuaXNvdHJvcGljIiwidGV4UGFyYW1ldGVyZiIsIlRFWFRVUkVfTUFYX0FOSVNPVFJPUFlfRVhUIiwiZXh0VGV4dHVyZUZpbHRlckFuaXNvdHJvcGljTWF4Iiwic2F2ZVRpbGVUZXh0dXJlIiwiUmFzdGVyREVNVGlsZVNvdXJjZSIsImVuY29kaW5nIiwicmF3SW1hZ2VEYXRhIiwiY29vcmQiLCJkZW0iLCJuZWVkc0hpbGxzaGFkZVByZXBhcmUiLCJuZWlnaGJvcmluZ1RpbGVzIiwiX2dldE5laWdoYm9yaW5nVGlsZXMiLCJkaW0iLCJweCIsInB4dyIsIm54Iiwibnh3IiwiT3ZlcnNjYWxlZFRpbGVJRCIsImJhY2tmaWxsZWQiLCJkZW1UZXh0dXJlIiwiZmJvIiwiZGVzdHJveSIsIkdlb0pTT05Tb3VyY2UiLCJfcmVtb3ZlZCIsIl9kYXRhIiwiX3Jlc291cmNlVGltaW5nIiwiYXR0cmlidXRpb24iLCJFWFRFTlQiLCJ3b3JrZXJPcHRpb25zIiwiY2x1c3RlciIsImdlb2pzb25WdE9wdGlvbnMiLCJ0b2xlcmFuY2UiLCJleHRlbnQiLCJtYXhab29tIiwibGluZU1ldHJpY3MiLCJnZW5lcmF0ZUlkIiwic3VwZXJjbHVzdGVyT3B0aW9ucyIsImNsdXN0ZXJNYXhab29tIiwiY2x1c3RlclJhZGl1cyIsIl91cGRhdGVXb3JrZXJEYXRhIiwic2V0RGF0YSIsImdldENsdXN0ZXJFeHBhbnNpb25ab29tIiwiY2x1c3RlcklkIiwiZ2V0Q2x1c3RlckNoaWxkcmVuIiwiZ2V0Q2x1c3RlckxlYXZlcyIsImxpbWl0Iiwib2Zmc2V0IiwicmVzb2x2ZVVSTCIsIlNvdXJjZSIsImFiYW5kb25lZCIsIm1lc3NhZ2UiLCJJbWFnZVNvdXJjZSIsImNvb3JkaW5hdGVzIiwiSW1hZ2UiLCJfZmluaXNoTG9hZGluZyIsInNldENvb3JkaW5hdGVzIiwiY29ybmVyWjBDb29yZHMiLCJ0cmFuc2Zvcm0iLCJsb2NhdGlvbkNvb3JkaW5hdGUiLCJ6b29tVG8iLCJjZW50ZXJDb29yZCIsImdldENvb3JkaW5hdGVzQ2VudGVyIiwiY29sdW1uIiwiQ2Fub25pY2FsVGlsZUlEIiwidGlsZUNvb3JkcyIsInpvb21lZENvb3JkIiwiX2JvdW5kc0FycmF5IiwiUmFzdGVyQm91bmRzQXJyYXkiLCJlbXBsYWNlQmFjayIsImJvdW5kc0J1ZmZlciIsInByZXBhcmUiLCJjcmVhdGVWZXJ0ZXhCdWZmZXIiLCJyYXN0ZXJCb3VuZHNBdHRyaWJ1dGVzIiwibWVtYmVycyIsImJvdW5kc1NlZ21lbnRzIiwiU2VnbWVudFZlY3RvciIsInNpbXBsZVNlZ21lbnQiLCJlcXVhbHMiLCJidWNrZXRzIiwiVmlkZW9Tb3VyY2UiLCJ1cmxzIiwiZ2V0VmlkZW8iLCJ2aWRlbyIsImxvb3AiLCJfcmVyZW5kZXIiLCJwbGF5IiwicmVhZHlTdGF0ZSIsInBhdXNlZCIsIkNhbnZhc1NvdXJjZSIsImMiLCJsIiwiVmFsaWRhdGlvbkVycm9yIiwiYW5pbWF0ZSIsIkhUTUxDYW52YXNFbGVtZW50IiwiZ2V0RWxlbWVudEJ5SWQiLCJfaGFzSW52YWxpZERpbWVuc2lvbnMiLCJfcGxheWluZyIsInBhdXNlIiwiZ2V0Q2FudmFzIiwic291cmNlVHlwZXMiLCJ2ZWN0b3IiLCJyYXN0ZXIiLCJyYXN0ZXItZGVtIiwicmFzdGVyRGVtIiwiZ2VvanNvbiIsImJpbmRBbGwiLCJxdWVyeVJlbmRlcmVkRmVhdHVyZXMiLCJzb3VyY2VDYWNoZSIsInN0eWxlTGF5ZXJzIiwicXVlcnlHZW9tZXRyeSIsIm1heFBpdGNoU2NhbGVGYWN0b3IiLCJ0aWxlc0luIiwic29ydCIsInNvcnRUaWxlc0luIiwicmVuZGVyZWRGZWF0dXJlTGF5ZXJzIiwidGlsZUluIiwid3JhcHBlZFRpbGVJRCIsIndyYXBwZWQiLCJxdWVyeVJlc3VsdHMiLCJfc3RhdGUiLCJjYWxjdWxhdGVQb3NNYXRyaXgiLCJ0b1Vud3JhcHBlZCIsIndyYXBwZWRJRExheWVyTWFwIiwid3JhcHBlZElEIiwid3JhcHBlZElETGF5ZXJzIiwibGF5ZXJJRCIsInRpbGVGZWF0dXJlcyIsIndyYXBwZWRJREZlYXR1cmVzIiwicmVzdWx0RmVhdHVyZXMiLCJ0aWxlRmVhdHVyZSIsImZlYXR1cmVJbmRleCIsImZlYXR1cmUiLCJtZXJnZVJlbmRlcmVkRmVhdHVyZUxheWVycyIsImdldEZlYXR1cmVTdGF0ZSIsImxheWVyIiwic291cmNlTGF5ZXIiLCJpZEEiLCJpZEIiLCJUaWxlQ2FjaGUiLCJyZXNldCIsInJlbW92ZWREYXRhIiwidGltZW91dCIsImNsZWFyVGltZW91dCIsIm9yZGVyIiwiYWRkIiwiZXhwaXJ5VGltZW91dCIsImRhdGFXcmFwcGVyIiwiX2dldEFuZFJlbW92ZUJ5S2V5IiwiaGFzIiwiZ2V0QW5kUmVtb3ZlIiwic3BsaWNlIiwiZGF0YUluZGV4Iiwic2V0TWF4U2l6ZSIsIkluZGV4QnVmZmVyIiwiYXJyYXkiLCJkeW5hbWljRHJhdyIsImNyZWF0ZUJ1ZmZlciIsIkJvb2xlYW4iLCJ1bmJpbmRWQU8iLCJiaW5kRWxlbWVudEJ1ZmZlciIsInNldCIsImJ1ZmZlckRhdGEiLCJFTEVNRU5UX0FSUkFZX0JVRkZFUiIsImFycmF5QnVmZmVyIiwiRFlOQU1JQ19EUkFXIiwiU1RBVElDX0RSQVciLCJleHRWZXJ0ZXhBcnJheU9iamVjdCIsImJpbmRWZXJ0ZXhBcnJheU9FUyIsInVwZGF0ZURhdGEiLCJidWZmZXJTdWJEYXRhIiwiZGVsZXRlQnVmZmVyIiwiQXR0cmlidXRlVHlwZSIsIkludDgiLCJVaW50OCIsIkludDE2IiwiVWludDE2IiwiSW50MzIiLCJVaW50MzIiLCJGbG9hdDMyIiwiVmVydGV4QnVmZmVyIiwiaXRlbVNpemUiLCJieXRlc1BlckVsZW1lbnQiLCJiaW5kVmVydGV4QnVmZmVyIiwiQVJSQVlfQlVGRkVSIiwiZW5hYmxlQXR0cmlidXRlcyIsInByb2dyYW0iLCJqIiwibWVtYmVyIiwiYXR0cmliSW5kZXgiLCJlbmFibGVWZXJ0ZXhBdHRyaWJBcnJheSIsInNldFZlcnRleEF0dHJpYlBvaW50ZXJzIiwidmVydGV4T2Zmc2V0IiwidmVydGV4QXR0cmliUG9pbnRlciIsImNvbXBvbmVudHMiLCJDbGVhckNvbG9yIiwiY3VycmVudCIsIkNvbG9yIiwidHJhbnNwYXJlbnQiLCJyIiwiZyIsImNsZWFyQ29sb3IiLCJDbGVhckRlcHRoIiwiY2xlYXJEZXB0aCIsIkNsZWFyU3RlbmNpbCIsImNsZWFyU3RlbmNpbCIsIkNvbG9yTWFzayIsImNvbG9yTWFzayIsIkRlcHRoTWFzayIsImRlcHRoTWFzayIsIlN0ZW5jaWxNYXNrIiwic3RlbmNpbE1hc2siLCJTdGVuY2lsRnVuYyIsImZ1bmMiLCJBTFdBWVMiLCJtYXNrIiwic3RlbmNpbEZ1bmMiLCJTdGVuY2lsT3AiLCJLRUVQIiwic3RlbmNpbE9wIiwiU3RlbmNpbFRlc3QiLCJlbmFibGUiLCJTVEVOQ0lMX1RFU1QiLCJkaXNhYmxlIiwiRGVwdGhSYW5nZSIsImRlcHRoUmFuZ2UiLCJEZXB0aFRlc3QiLCJERVBUSF9URVNUIiwiRGVwdGhGdW5jIiwiTEVTUyIsImRlcHRoRnVuYyIsIkJsZW5kIiwiQkxFTkQiLCJCbGVuZEZ1bmMiLCJPTkUiLCJaRVJPIiwiYmxlbmRGdW5jIiwiQmxlbmRDb2xvciIsImJsZW5kQ29sb3IiLCJQcm9ncmFtIiwidXNlUHJvZ3JhbSIsIkFjdGl2ZVRleHR1cmVVbml0IiwiVEVYVFVSRTAiLCJhY3RpdmVUZXh0dXJlIiwiVmlld3BvcnQiLCJkcmF3aW5nQnVmZmVyV2lkdGgiLCJkcmF3aW5nQnVmZmVySGVpZ2h0Iiwidmlld3BvcnQiLCJCaW5kRnJhbWVidWZmZXIiLCJiaW5kRnJhbWVidWZmZXIiLCJGUkFNRUJVRkZFUiIsIkJpbmRSZW5kZXJidWZmZXIiLCJiaW5kUmVuZGVyYnVmZmVyIiwiUkVOREVSQlVGRkVSIiwiQmluZFRleHR1cmUiLCJCaW5kVmVydGV4QnVmZmVyIiwiYmluZEJ1ZmZlciIsIkJpbmRFbGVtZW50QnVmZmVyIiwiQmluZFZlcnRleEFycmF5T0VTIiwiUGl4ZWxTdG9yZVVucGFjayIsInBpeGVsU3RvcmVpIiwiVU5QQUNLX0FMSUdOTUVOVCIsIlBpeGVsU3RvcmVVbnBhY2tQcmVtdWx0aXBseUFscGhhIiwiVU5QQUNLX1BSRU1VTFRJUExZX0FMUEhBX1dFQkdMIiwiRnJhbWVidWZmZXJWYWx1ZSIsIkNvbG9yQXR0YWNobWVudCIsImZyYW1lYnVmZmVyVGV4dHVyZTJEIiwiQ09MT1JfQVRUQUNITUVOVDAiLCJzZXREaXJ0eSIsIkRlcHRoQXR0YWNobWVudCIsImZyYW1lYnVmZmVyUmVuZGVyYnVmZmVyIiwiREVQVEhfQVRUQUNITUVOVCIsIkZyYW1lYnVmZmVyIiwiZnJhbWVidWZmZXIiLCJjcmVhdGVGcmFtZWJ1ZmZlciIsImNvbG9yQXR0YWNobWVudCIsImRlcHRoQXR0YWNobWVudCIsImRlbGV0ZVRleHR1cmUiLCJyZW5kZXJidWZmZXIiLCJkZWxldGVSZW5kZXJidWZmZXIiLCJkZWxldGVGcmFtZWJ1ZmZlciIsIkRlcHRoTW9kZSIsIlJlYWRPbmx5IiwiUmVhZFdyaXRlIiwiZGlzYWJsZWQiLCJTdGVuY2lsTW9kZSIsImZhaWwiLCJkZXB0aEZhaWwiLCJwYXNzIiwiQ29sb3JNb2RlIiwiYmxlbmRGdW5jdGlvbiIsIlJlcGxhY2UiLCJ1bmJsZW5kZWQiLCJhbHBoYUJsZW5kZWQiLCJDb250ZXh0IiwiZ2V0RXh0ZW5zaW9uIiwic3RlbmNpbFRlc3QiLCJkZXB0aFRlc3QiLCJibGVuZCIsInBpeGVsU3RvcmVVbnBhY2siLCJwaXhlbFN0b3JlVW5wYWNrUHJlbXVsdGlwbHlBbHBoYSIsImdldFBhcmFtZXRlciIsIk1BWF9URVhUVVJFX01BWF9BTklTT1RST1BZX0VYVCIsImV4dFRleHR1cmVIYWxmRmxvYXQiLCJjcmVhdGVJbmRleEJ1ZmZlciIsImNyZWF0ZVJlbmRlcmJ1ZmZlciIsInN0b3JhZ2VGb3JtYXQiLCJyYm8iLCJyZW5kZXJidWZmZXJTdG9yYWdlIiwiY2xlYXIiLCJDT0xPUl9CVUZGRVJfQklUIiwiREVQVEhfQlVGRkVSX0JJVCIsInNldERlcHRoTW9kZSIsImRlcHRoTW9kZSIsInNldFN0ZW5jaWxNb2RlIiwic3RlbmNpbE1vZGUiLCJzZXRDb2xvck1vZGUiLCJjb2xvck1vZGUiLCJkZWVwRXF1YWwiLCJTb3VyY2VDYWNoZSIsIm9uIiwiX3NvdXJjZUxvYWRlZCIsIl9wYXVzZWQiLCJyZWxvYWQiLCJfc291cmNlRXJyb3JlZCIsIl9zb3VyY2UiLCJjcmVhdGVTb3VyY2UiLCJfdGlsZXMiLCJfY2FjaGUiLCJfdW5sb2FkVGlsZSIsIl90aW1lcnMiLCJfY2FjaGVUaW1lcnMiLCJfbWF4VGlsZUNhY2hlU2l6ZSIsIl9jb3ZlcmVkVGlsZXMiLCJTb3VyY2VGZWF0dXJlU3RhdGUiLCJnZXRTb3VyY2UiLCJyZXN1bWUiLCJzaG91bGRSZWxvYWQiLCJfc2hvdWxkUmVsb2FkT25SZXN1bWUiLCJfbG9hZFRpbGUiLCJfYWJvcnRUaWxlIiwiY29hbGVzY2VDaGFuZ2VzIiwidXBsb2FkIiwiZ2V0SWRzIiwiY29tcGFyZUtleVpvb20iLCJnZXRSZW5kZXJhYmxlSWRzIiwic3ltYm9sTGF5ZXIiLCJfaXNJZFJlbmRlcmFibGUiLCJhXyIsImJfIiwicm90YXRlZEEiLCJfcm90YXRlIiwiYW5nbGUiLCJyb3RhdGVkQiIsImhhc1JlbmRlcmFibGVQYXJlbnQiLCJwYXJlbnRUaWxlIiwiZmluZExvYWRlZFBhcmVudCIsImhhc0RhdGEiLCJob2xkaW5nRm9yRmFkZSIsIl9yZWxvYWRUaWxlIiwiX3RpbGVMb2FkZWQiLCJwcmV2aW91c1N0YXRlIiwidGltZUFkZGVkIiwicmVmcmVzaGVkVXBvbkV4cGlyYXRpb24iLCJfc2V0VGlsZVJlbG9hZFRpbWVyIiwiX2JhY2tmaWxsREVNIiwiaW5pdGlhbGl6ZVRpbGVTdGF0ZSIsInJlbmRlcmFibGVzIiwiYm9yZGVySWQiLCJib3JkZXJUaWxlIiwiZ2V0VGlsZUJ5SUQiLCJmaWxsQm9yZGVyIiwiZHgiLCJkeSIsImJhY2tmaWxsQm9yZGVyIiwiZ2V0VGlsZSIsImdldFpvb20iLCJzY2FsZVpvb20iLCJfcmV0YWluTG9hZGVkQ2hpbGRyZW4iLCJpZGVhbFRpbGVzIiwibWF4Q292ZXJpbmdab29tIiwicmV0YWluIiwidG9wbW9zdExvYWRlZElEIiwicGFyZW50SUQiLCJzY2FsZWRUbyIsIm1pbkNvdmVyaW5nWm9vbSIsInVwZGF0ZUNhY2hlU2l6ZSIsImFwcHJveFRpbGVzSW5WaWV3Iiwidmlld0RlcGVuZGVudE1heFNpemUiLCJtYXhTaXplIiwiaGFuZGxlV3JhcEp1bXAiLCJ3b3JsZERpZmZlcmVuY2UiLCJfcHJldkxuZyIsIndyYXBEZWx0YSIsInVud3JhcFRvIiwiaWRlYWxUaWxlSURzIiwiY2VudGVyIiwidXNlZCIsImdldFZpc2libGVVbndyYXBwZWRDb29yZGluYXRlcyIsInVud3JhcHBlZCIsImNvdmVyaW5nVGlsZXMiLCJtYXhPdmVyem9vbWluZyIsIm1heFVuZGVyem9vbWluZyIsIl91cGRhdGVSZXRhaW5lZFRpbGVzIiwiaXNSYXN0ZXJUeXBlIiwicGFyZW50c0ZvckZhZGluZyIsImZhZGluZ1RpbGVzIiwiZmFkZUVuZFRpbWUiLCJfYWRkVGlsZSIsInJldGFpbmVkSWQiLCJjbGVhckZhZGVIb2xkIiwia2V5c0RpZmZlcmVuY2UiLCJoYXNTeW1ib2xCdWNrZXRzIiwic2V0SG9sZER1cmF0aW9uIiwiX2ZhZGVEdXJhdGlvbiIsInN5bWJvbEZhZGVGaW5pc2hlZCIsIl9yZW1vdmVUaWxlIiwicmVsZWFzZVN5bWJvbEZhZGVUaWxlcyIsImNoZWNrZWQiLCJtaXNzaW5nVGlsZXMiLCJjaGlsZENvb3JkIiwiY2hpbGRyZW4iLCJjaGlsZFRpbGUiLCJwYXJlbnRXYXNSZXF1ZXN0ZWQiLCJ3YXNSZXF1ZXN0ZWQiLCJwYXJlbnRJZCIsImNhY2hlZCIsInVzZXMiLCJnZXRFeHBpcnlUaW1lb3V0IiwiY2xlYXJUaWxlcyIsInRpbGVSZXN1bHRzIiwibWluWCIsIkluZmluaXR5IiwibWluWSIsIm1heFgiLCJtYXhZIiwicCIsInF1ZXJ5UGFkZGluZyIsInRpbGVTcGFjZUJvdW5kcyIsImNvb3JkaW5hdGVUb1RpbGVQb2ludCIsIkNvb3JkaW5hdGUiLCJ0aWxlU3BhY2VRdWVyeUdlb21ldHJ5IiwiZ2V0VmlzaWJsZUNvb3JkaW5hdGVzIiwiY29vcmRzIiwicG9zTWF0cml4Iiwic2V0RmVhdHVyZVN0YXRlIiwidXBkYXRlU3RhdGUiLCJnZXRTdGF0ZSIsImdsb2JhbFdvcmtlclBvb2wiLCJXb3JrZXJQb29sIiwiYWN0aXZlIiwiZGVyZWYiLCJyZWZQcm9wZXJ0aWVzIiwiZGVyZWZMYXllcnMiLCJsYXllcnMiLCJtYXBJZCIsIndvcmtlckNvdW50IiwiV2ViV29ya2VyIiwiaGFyZHdhcmVDb25jdXJyZW5jeSIsIm9wZXJhdGlvbnMiLCJzZXRTdHlsZSIsImFkZExheWVyIiwicmVtb3ZlTGF5ZXIiLCJzZXRQYWludFByb3BlcnR5Iiwic2V0TGF5b3V0UHJvcGVydHkiLCJzZXRGaWx0ZXIiLCJhZGRTb3VyY2UiLCJyZW1vdmVTb3VyY2UiLCJzZXRHZW9KU09OU291cmNlRGF0YSIsInNldExheWVyWm9vbVJhbmdlIiwic2V0TGF5ZXJQcm9wZXJ0eSIsInNldENlbnRlciIsInNldFpvb20iLCJzZXRCZWFyaW5nIiwic2V0UGl0Y2giLCJzZXRTcHJpdGUiLCJzZXRHbHlwaHMiLCJzb3VyY2VJZCIsImFmdGVyIiwiY29tbWFuZHMiLCJjb21tYW5kIiwiYXJncyIsInNvdXJjZXNSZW1vdmVkIiwidXBkYXRlU291cmNlIiwiY2FuVXBkYXRlR2VvSlNPTiIsImJlZm9yZSIsInByb3AiLCJoYXNPd25Qcm9wZXJ0eSIsImlzRXF1YWwiLCJkaWZmTGF5ZXJQcm9wZXJ0eUNoYW5nZXMiLCJsYXllcklkIiwia2xhc3MiLCJwbHVja0lkIiwiaW5kZXhCeUlkIiwiZ3JvdXAiLCJkaWZmU3R5bGVzIiwidmVyc2lvbiIsImJlYXJpbmciLCJwaXRjaCIsInRyYW5zaXRpb24iLCJyZW1vdmVPckFkZFNvdXJjZUNvbW1hbmRzIiwiZGlmZlNvdXJjZXMiLCJzb3VyY2VzIiwiYmVmb3JlTGF5ZXJzIiwiY29uY2F0IiwiYmVmb3JlTGF5ZXIiLCJhZnRlckxheWVyIiwiaW5zZXJ0QmVmb3JlTGF5ZXJJZCIsImJlZm9yZU9yZGVyIiwiYWZ0ZXJPcmRlciIsImJlZm9yZUluZGV4IiwiYWZ0ZXJJbmRleCIsInRyYWNrZXIiLCJjbGVhbiIsImxheW91dCIsInBhaW50IiwiZGlmZkxheWVycyIsImNvbnNvbGUiLCJ3YXJuIiwiR3JpZEluZGV4IiwiY2VsbFNpemUiLCJib3hDZWxscyIsImNpcmNsZUNlbGxzIiwieENlbGxDb3VudCIsInlDZWxsQ291bnQiLCJjaXJjbGVLZXlzIiwiYm94S2V5cyIsImJib3hlcyIsImNpcmNsZXMiLCJ4U2NhbGUiLCJ5U2NhbGUiLCJib3hVaWQiLCJjaXJjbGVVaWQiLCJrZXlzTGVuZ3RoIiwiaW5zZXJ0IiwieDEiLCJ5MSIsIngyIiwieTIiLCJfZm9yRWFjaENlbGwiLCJfaW5zZXJ0Qm94Q2VsbCIsImluc2VydENpcmNsZSIsIl9pbnNlcnRDaXJjbGVDZWxsIiwiY2VsbEluZGV4IiwiX3F1ZXJ5IiwiaGl0VGVzdCIsInByZWRpY2F0ZSIsInF1ZXJ5QXJncyIsInNlZW5VaWRzIiwiYm94IiwiY2lyY2xlIiwiX3F1ZXJ5Q2VsbCIsIl9xdWVyeUNpcmNsZSIsIl9xdWVyeUNlbGxDaXJjbGUiLCJxdWVyeSIsImhpdFRlc3RDaXJjbGUiLCJib3hDZWxsIiwiY2lyY2xlQ2VsbCIsIl9jaXJjbGVBbmRSZWN0Q29sbGlkZSIsIl9jaXJjbGVzQ29sbGlkZSIsImZuIiwiYXJnMSIsImFyZzIiLCJjeDEiLCJfY29udmVydFRvWENlbGxDb29yZCIsImN5MSIsIl9jb252ZXJ0VG9ZQ2VsbENvb3JkIiwiY3gyIiwiY3kyIiwicjEiLCJyMiIsImJvdGhSYWRpaSIsImNpcmNsZVgiLCJjaXJjbGVZIiwiaGFsZlJlY3RXaWR0aCIsImRpc3RYIiwiaGFsZlJlY3RIZWlnaHQiLCJkaXN0WSIsInN5bWJvbExheW91dFByb3BlcnRpZXMiLCJnZXRMYWJlbFBsYW5lTWF0cml4IiwicGl0Y2hXaXRoTWFwIiwicm90YXRlV2l0aE1hcCIsInBpeGVsc1RvVGlsZVVuaXRzIiwibSIsIm1hdDQiLCJGbG9hdDMyQXJyYXkiLCJnZXRHbENvb3JkTWF0cml4IiwicHJvamVjdCIsInBvaW50IiwibWF0cml4IiwieHlUcmFuc2Zvcm1NYXQ0Iiwic2lnbmVkRGlzdGFuY2VGcm9tQ2FtZXJhIiwiaXNWaXNpYmxlIiwiYW5jaG9yUG9zIiwiY2xpcHBpbmdCdWZmZXIiLCJ1cGRhdGVMaW5lTGFiZWxzIiwiYnVja2V0IiwiaXNUZXh0IiwibGFiZWxQbGFuZU1hdHJpeCIsImdsQ29vcmRNYXRyaXgiLCJrZWVwVXByaWdodCIsInNpemVEYXRhIiwidGV4dFNpemVEYXRhIiwiaWNvblNpemVEYXRhIiwicGFydGlhbGx5RXZhbHVhdGVkU2l6ZSIsInN5bWJvbFNpemUiLCJkeW5hbWljTGF5b3V0VmVydGV4QXJyYXkiLCJ0ZXh0IiwiaWNvbiIsImxpbmVWZXJ0ZXhBcnJheSIsInBsYWNlZFN5bWJvbHMiLCJwbGFjZWRTeW1ib2xBcnJheSIsImFzcGVjdFJhdGlvIiwidXNlVmVydGljYWwiLCJzeW1ib2wiLCJoaWRkZW4iLCJ3cml0aW5nTW9kZSIsIldyaXRpbmdNb2RlIiwidmVydGljYWwiLCJoaWRlR2x5cGhzIiwibnVtR2x5cGhzIiwiYW5jaG9yWCIsImFuY2hvclkiLCJ2ZWM0IiwicGVyc3BlY3RpdmVSYXRpbyIsImNhbWVyYVRvQ2VudGVyRGlzdGFuY2UiLCJwaXRjaFNjYWxlZEZvbnRTaXplIiwidGlsZUFuY2hvclBvaW50IiwiYW5jaG9yUG9pbnQiLCJwcm9qZWN0aW9uQ2FjaGUiLCJwbGFjZVVuZmxpcHBlZCIsInBsYWNlR2x5cGhzQWxvbmdMaW5lIiwiZ2x5cGhPZmZzZXRBcnJheSIsIm5vdEVub3VnaFJvb20iLCJuZWVkc0ZsaXBwaW5nIiwiZHluYW1pY0xheW91dFZlcnRleEJ1ZmZlciIsInBsYWNlRmlyc3RBbmRMYXN0R2x5cGgiLCJmb250U2NhbGUiLCJsaW5lT2Zmc2V0WCIsImxpbmVPZmZzZXRZIiwiZmxpcCIsInJldHVyblRpbGVEaXN0YW5jZSIsImdseXBoRW5kSW5kZXgiLCJnbHlwaFN0YXJ0SW5kZXgiLCJsaW5lU3RhcnRJbmRleCIsImxpbmVFbmRJbmRleCIsImxpbmVMZW5ndGgiLCJmaXJzdEdseXBoT2Zmc2V0IiwiZ2V0b2Zmc2V0WCIsImxhc3RHbHlwaE9mZnNldCIsImZpcnN0UGxhY2VkR2x5cGgiLCJwbGFjZUdseXBoQWxvbmdMaW5lIiwic2VnbWVudCIsImxhc3RQbGFjZWRHbHlwaCIsImZpcnN0IiwibGFzdCIsInJlcXVpcmVzT3JpZW50YXRpb25DaGFuZ2UiLCJmaXJzdFBvaW50IiwibGFzdFBvaW50IiwiaG9yaXpvbnRhbCIsInBsYWNlZEdseXBocyIsImZpcnN0QW5kTGFzdEdseXBoIiwib3JpZW50YXRpb25DaGFuZ2UiLCJnbHlwaEluZGV4IiwidGlsZVZlcnRleEluZGV4IiwidGlsZVNlZ21lbnRFbmQiLCJnZXR4IiwiZ2V0eSIsInByb2plY3RlZFZlcnRleCIsInByb2plY3RUcnVuY2F0ZWRMaW5lU2VnbWVudCIsInNpbmdsZUdseXBoIiwiYWRkRHluYW1pY0F0dHJpYnV0ZXMiLCJwcmV2aW91c1RpbGVQb2ludCIsImN1cnJlbnRUaWxlUG9pbnQiLCJwcmV2aW91c1Byb2plY3RlZFBvaW50IiwibWluaW11bUxlbmd0aCIsInByb2plY3Rpb25NYXRyaXgiLCJwcm9qZWN0ZWRVbml0VmVydGV4Iiwic3ViIiwiX3VuaXQiLCJwcm9qZWN0ZWRVbml0U2VnbWVudCIsIl9tdWx0IiwibWFnIiwib2Zmc2V0WCIsImFuY2hvclNlZ21lbnQiLCJjb21iaW5lZE9mZnNldFgiLCJkaXIiLCJjdXJyZW50SW5kZXgiLCJpbml0aWFsSW5kZXgiLCJwcmV2IiwiZGlzdGFuY2VUb1ByZXYiLCJjdXJyZW50U2VnbWVudERpc3RhbmNlIiwiYWJzT2Zmc2V0WCIsImN1cnJlbnRWZXJ0ZXgiLCJwcm9qZWN0aW9uIiwicHJldmlvdXNMaW5lVmVydGV4SW5kZXgiLCJzZWdtZW50SW50ZXJwb2xhdGlvblQiLCJwcmV2VG9DdXJyZW50IiwibXVsdCIsIl9hZGQiLCJfcGVycCIsImF0YW4yIiwidGlsZURpc3RhbmNlIiwicHJldlRpbGVEaXN0YW5jZSIsImdldHRpbGVVbml0RGlzdGFuY2VGcm9tQW5jaG9yIiwibGFzdFNlZ21lbnRWaWV3cG9ydERpc3RhbmNlIiwiaGlkZGVuR2x5cGhBdHRyaWJ1dGVzIiwibnVtIiwiZmxvYXQzMiIsIm91dCIsIkNvbGxpc2lvbkluZGV4IiwiZ3JpZCIsImlnbm9yZWRHcmlkIiwiR3JpZCIsInBpdGNoZmFjdG9yIiwiX3BpdGNoIiwic2NyZWVuUmlnaHRCb3VuZGFyeSIsInNjcmVlbkJvdHRvbUJvdW5kYXJ5IiwiZ3JpZFJpZ2h0Qm91bmRhcnkiLCJncmlkQm90dG9tQm91bmRhcnkiLCJtYXJrQ29sbGlzaW9uQ2lyY2xlVXNlZCIsImNvbGxpc2lvbkNpcmNsZXMiLCJwbGFjZUNvbGxpc2lvbkJveCIsImNvbGxpc2lvbkJveCIsImFsbG93T3ZlcmxhcCIsInRleHRQaXhlbFJhdGlvIiwiY29sbGlzaW9uR3JvdXBQcmVkaWNhdGUiLCJwcm9qZWN0ZWRQb2ludCIsInByb2plY3RBbmRHZXRQZXJzcGVjdGl2ZVJhdGlvIiwiYW5jaG9yUG9pbnRYIiwiYW5jaG9yUG9pbnRZIiwidGlsZVRvVmlld3BvcnQiLCJ0bFgiLCJ0bFkiLCJiclgiLCJiclkiLCJpc0luc2lkZUdyaWQiLCJvZmZzY3JlZW4iLCJpc09mZnNjcmVlbiIsImFwcHJveGltYXRlVGlsZURpc3RhbmNlIiwibGFzdFNlZ21lbnRBbmdsZSIsImNhbWVyYVRvQW5jaG9yRGlzdGFuY2UiLCJpbmNpZGVuY2VTdHJldGNoIiwibGFzdFNlZ21lbnRUaWxlIiwicGxhY2VDb2xsaXNpb25DaXJjbGVzIiwic2hvd0NvbGxpc2lvbkNpcmNsZXMiLCJwbGFjZWRDb2xsaXNpb25DaXJjbGVzIiwicHJvamVjdGVkQW5jaG9yIiwicHJvamVjdEFuY2hvciIsInRpbGVVbml0QW5jaG9yUG9pbnQiLCJjb2xsaXNpb25EZXRlY3RlZCIsImluR3JpZCIsImVudGlyZWx5T2Zmc2NyZWVuIiwiZmlyc3RUaWxlRGlzdGFuY2UiLCJsYXN0VGlsZURpc3RhbmNlIiwiY2FtZXJhRGlzdGFuY2UiLCJ0aWxlVW5pdFJhZGl1cyIsImJveFNpZ25lZERpc3RhbmNlRnJvbUFuY2hvciIsInByb2plY3RQb2ludCIsIm5leHRCb3hEaXN0YW5jZVRvQW5jaG9yIiwiY29sbGlzaW9uQm94QXJyYXlJbmRleCIsInF1ZXJ5UmVuZGVyZWRTeW1ib2xzIiwidmlld3BvcnRRdWVyeUdlb21ldHJ5IiwiZ3JpZFBvaW50Iiwic2VlbkZlYXR1cmVzIiwiZmVhdHVyZUtleSIsImJ1Y2tldEluc3RhbmNlSWQiLCJiYm94IiwiaW50ZXJzZWN0aW9uVGVzdHMiLCJpbnNlcnRDb2xsaXNpb25Cb3giLCJpZ25vcmVQbGFjZW1lbnQiLCJjb2xsaXNpb25Hcm91cElEIiwiaW5zZXJ0Q29sbGlzaW9uQ2lyY2xlcyIsIk9wYWNpdHlTdGF0ZSIsInByZXZTdGF0ZSIsImluY3JlbWVudCIsInBsYWNlZCIsInNraXBGYWRlIiwib3BhY2l0eSIsImlzSGlkZGVuIiwiSm9pbnRPcGFjaXR5U3RhdGUiLCJwbGFjZWRUZXh0IiwicGxhY2VkSWNvbiIsIkpvaW50UGxhY2VtZW50IiwiQ29sbGlzaW9uR3JvdXBzIiwiY3Jvc3NTb3VyY2VDb2xsaXNpb25zIiwibWF4R3JvdXBJRCIsImNvbGxpc2lvbkdyb3VwcyIsInNvdXJjZUlEIiwiSUQiLCJuZXh0R3JvdXBJRCIsIlBsYWNlbWVudCIsImZhZGVEdXJhdGlvbiIsImNvbGxpc2lvbkluZGV4IiwicGxhY2VtZW50cyIsIm9wYWNpdGllcyIsInN0YWxlIiwicmV0YWluZWRRdWVyeURhdGEiLCJ1cGRhdGVDb2xsaXNpb25WZXJ0aWNlcyIsImNvbGxpc2lvblZlcnRleEFycmF5Iiwibm90VXNlZCIsInBsYWNlTGF5ZXJUaWxlIiwic3R5bGVMYXllciIsInNlZW5Dcm9zc1RpbGVJRHMiLCJzeW1ib2xCdWNrZXQiLCJnZXRCdWNrZXQiLCJidWNrZXRGZWF0dXJlSW5kZXgiLCJsYXRlc3RGZWF0dXJlSW5kZXgiLCJsYXllcklkcyIsImNvbGxpc2lvbkJveEFycmF5IiwidGV4dExhYmVsUGxhbmVNYXRyaXgiLCJpY29uTGFiZWxQbGFuZU1hdHJpeCIsInNvdXJjZUxheWVySW5kZXgiLCJidWNrZXRJbmRleCIsInBsYWNlTGF5ZXJCdWNrZXQiLCJwYXJ0aWFsbHlFdmFsdWF0ZWRUZXh0U2l6ZSIsInN5bWJvbExheWVyUHJvcGVydGllcyIsInRleHRPcHRpb25hbCIsImljb25PcHRpb25hbCIsImNvbGxpc2lvbkdyb3VwIiwiY29sbGlzaW9uQXJyYXlzIiwiZGVzZXJpYWxpemVDb2xsaXNpb25Cb3hlcyIsInN5bWJvbEluc3RhbmNlcyIsInN5bWJvbEluc3RhbmNlIiwiY3Jvc3NUaWxlSUQiLCJwbGFjZVRleHQiLCJwbGFjZUljb24iLCJwbGFjZWRHbHlwaEJveGVzIiwicGxhY2VkR2x5cGhDaXJjbGVzIiwicGxhY2VkSWNvbkJveGVzIiwidGV4dEZlYXR1cmVJbmRleCIsImljb25GZWF0dXJlSW5kZXgiLCJ0ZXh0Qm94IiwidGV4dENpcmNsZXMiLCJwbGFjZWRTeW1ib2wiLCJob3Jpem9udGFsUGxhY2VkVGV4dFN5bWJvbEluZGV4IiwiaWNvbkJveCIsImljb25XaXRob3V0VGV4dCIsIm51bUdseXBoVmVydGljZXMiLCJudW1WZXJ0aWNhbEdseXBoVmVydGljZXMiLCJ0ZXh0V2l0aG91dEljb24iLCJudW1JY29uVmVydGljZXMiLCJqdXN0UmVsb2FkZWQiLCJjb21taXQiLCJwcmV2UGxhY2VtZW50IiwiY29tbWl0VGltZSIsInBsYWNlbWVudENoYW5nZWQiLCJwcmV2T3BhY2l0aWVzIiwiam9pbnRQbGFjZW1lbnQiLCJwcmV2T3BhY2l0eSIsImpvaW50T3BhY2l0eSIsImxhc3RQbGFjZW1lbnRDaGFuZ2VUaW1lIiwidXBkYXRlTGF5ZXJPcGFjaXRpZXMiLCJ1cGRhdGVCdWNrZXRPcGFjaXRpZXMiLCJoYXNUZXh0RGF0YSIsIm9wYWNpdHlWZXJ0ZXhBcnJheSIsImhhc0ljb25EYXRhIiwiaGFzQ29sbGlzaW9uQm94RGF0YSIsImhhc0NvbGxpc2lvbkNpcmNsZURhdGEiLCJjb2xsaXNpb25DaXJjbGUiLCJkdXBsaWNhdGVPcGFjaXR5U3RhdGUiLCJ0ZXh0QWxsb3dPdmVybGFwIiwiaWNvbkFsbG93T3ZlcmxhcCIsImRlZmF1bHRPcGFjaXR5U3RhdGUiLCJpc0R1cGxpY2F0ZSIsIm9wYWNpdHlTdGF0ZSIsImhhc1RleHQiLCJoYXNJY29uIiwicGFja2VkT3BhY2l0eSIsInBhY2tPcGFjaXR5Iiwib3BhY2l0eUVudHJ5Q291bnQiLCJ2ZXJ0aWNhbFBsYWNlZFRleHRTeW1ib2xJbmRleCIsInNvcnRGZWF0dXJlcyIsImZlYXR1cmVTb3J0T3JkZXIiLCJvcGFjaXR5VmVydGV4QnVmZmVyIiwiY29sbGlzaW9uVmVydGV4QnVmZmVyIiwic3ltYm9sRmFkZUNoYW5nZSIsImhhc1RyYW5zaXRpb25zIiwic3RpbGxSZWNlbnQiLCJzZXRTdGFsZSIsInNoaWZ0MjUiLCJzaGlmdDI0Iiwic2hpZnQxNyIsInNoaWZ0MTYiLCJzaGlmdDkiLCJzaGlmdDgiLCJzaGlmdDEiLCJ0YXJnZXRCaXQiLCJvcGFjaXR5Qml0cyIsIkxheWVyUGxhY2VtZW50IiwiX2N1cnJlbnRUaWxlSW5kZXgiLCJfc2VlbkNyb3NzVGlsZUlEcyIsImNvbnRpbnVlUGxhY2VtZW50IiwicGxhY2VtZW50Iiwic2hvdWxkUGF1c2VQbGFjZW1lbnQiLCJQYXVzZWFibGVQbGFjZW1lbnQiLCJmb3JjZUZ1bGxQbGFjZW1lbnQiLCJfY3VycmVudFBsYWNlbWVudEluZGV4IiwiX2ZvcmNlRnVsbFBsYWNlbWVudCIsIl9zaG93Q29sbGlzaW9uQm94ZXMiLCJfZG9uZSIsImlzRG9uZSIsImxheWVyVGlsZXMiLCJzdGFydFRpbWUiLCJlbGFwc2VkVGltZSIsInBsYWNlbWVudFpvb20iLCJfaW5Qcm9ncmVzc0xheWVyIiwicHJldmlvdXNQbGFjZW1lbnQiLCJyb3VuZGluZ0ZhY3RvciIsIlRpbGVMYXllckluZGV4IiwiaW5kZXhlZFN5bWJvbEluc3RhbmNlcyIsImdldFNjYWxlZENvb3JkaW5hdGVzIiwiY2hpbGRUaWxlSUQiLCJ6RGlmZmVyZW5jZSIsImZpbmRNYXRjaGVzIiwibmV3VGlsZUlEIiwiem9vbUNyb3NzVGlsZUlEcyIsImluZGV4ZWRJbnN0YW5jZXMiLCJzY2FsZWRTeW1ib2xDb29yZCIsInRoaXNUaWxlU3ltYm9sIiwiQ3Jvc3NUaWxlSURzIiwibWF4Q3Jvc3NUaWxlSUQiLCJnZW5lcmF0ZSIsIkNyb3NzVGlsZVN5bWJvbExheWVySW5kZXgiLCJpbmRleGVzIiwidXNlZENyb3NzVGlsZUlEcyIsInpvb21JbmRleGVzIiwibmV3Wm9vbUluZGV4IiwiYWRkQnVja2V0IiwiY3Jvc3NUaWxlSURzIiwicmVtb3ZlQnVja2V0Q3Jvc3NUaWxlSURzIiwiY2hpbGRJbmRleCIsImlzQ2hpbGRPZiIsInBhcmVudEluZGV4Iiwic3ltYm9sSW5zdGFuY2UkMSIsInJlbW92ZWRCdWNrZXQiLCJyZW1vdmVTdGFsZUJ1Y2tldHMiLCJjdXJyZW50SURzIiwidGlsZXNDaGFuZ2VkIiwidGlsZUtleSIsIkNyb3NzVGlsZVN5bWJvbEluZGV4IiwibGF5ZXJJbmRleGVzIiwibWF4QnVja2V0SW5zdGFuY2VJZCIsImJ1Y2tldHNJbkN1cnJlbnRQbGFjZW1lbnQiLCJsYXllckluZGV4Iiwic3ltYm9sQnVja2V0c0NoYW5nZWQiLCJjdXJyZW50QnVja2V0SURzIiwicHJ1bmVVbnVzZWRMYXllcnMiLCJ1c2VkTGF5ZXJzIiwidXNlZExheWVyTWFwIiwidXNlZExheWVyIiwiZXZlbnRlZCIsImVycm9ycyIsIl9lbWl0VmFsaWRhdGlvbkVycm9ycyIsImlkZW50aWZpZXIiLCJzdXBwb3J0ZWREaWZmT3BlcmF0aW9ucyIsImRpZmZPcGVyYXRpb25zIiwiaWdub3JlZERpZmZPcGVyYXRpb25zIiwiU3R5bGUiLCJpbWFnZU1hbmFnZXIiLCJnbHlwaE1hbmFnZXIiLCJsaW5lQXRsYXMiLCJjcm9zc1RpbGVTeW1ib2xJbmRleCIsIl9sYXllcnMiLCJfb3JkZXIiLCJzb3VyY2VDYWNoZXMiLCJ6b29tSGlzdG9yeSIsIlpvb21IaXN0b3J5IiwiX3Jlc2V0VXBkYXRlcyIsInNlbGYiLCJfcnRsVGV4dFBsdWdpbkNhbGxiYWNrIiwicmVnaXN0ZXJGb3JQbHVnaW5BdmFpbGFiaWxpdHkiLCJwbHVnaW5VUkwiLCJjb21wbGV0aW9uQ2FsbGJhY2siLCJ2ZWN0b3JMYXllcklkcyIsIl92YWxpZGF0ZUxheWVyIiwibG9hZFVSTCIsIm5vcm1hbGl6ZVN0eWxlVVJMIiwiX3JlcXVlc3QiLCJnZXRKU09OIiwianNvbiIsIl9sb2FkIiwibG9hZEpTT04iLCJmcmFtZSIsInN0eWxlc2hlZXQiLCJfc3ByaXRlUmVxdWVzdCIsImxvYWRTcHJpdGUiLCJjcmVhdGVTdHlsZUxheWVyIiwiX3NlcmlhbGl6ZUxheWVycyIsIl91cGRhdGVkU291cmNlcyIsIl9jaGVja0xvYWRlZCIsIl9jaGFuZ2VkIiwidXBkYXRlZElkcyIsIl91cGRhdGVkTGF5ZXJzIiwicmVtb3ZlZElkcyIsIl9yZW1vdmVkTGF5ZXJzIiwiX3VwZGF0ZVdvcmtlckxheWVycyIsImFjdGlvbiIsIl9yZWxvYWRTb3VyY2UiLCJfY2xlYXJTb3VyY2UiLCJfdXBkYXRlZFBhaW50UHJvcHMiLCJzZXRTdGF0ZSIsIm5leHRTdGF0ZSIsImNoYW5nZXMiLCJvcCIsInVuaW1wbGVtZW50ZWRPcHMiLCJhcHBseSIsImlzU291cmNlTG9hZGVkIiwibGF5ZXJPYmplY3QiLCJnZXRMYXllciIsImFycmF5SW5kZXgiLCJfbGF5ZXJPcmRlckNoYW5nZWQiLCJyZW1vdmVkIiwiX3VwZGF0ZUxheWVyIiwibW92ZUxheWVyIiwibmV3SW5kZXgiLCJnZXRGaWx0ZXIiLCJnZXRMYXlvdXRQcm9wZXJ0eSIsImdldFBhaW50UHJvcGVydHkiLCJmZWF0dXJlSWQiLCJwYXJzZUludCIsImdldFRyYW5zaXRpb24iLCJkdXJhdGlvbiIsImRlbGF5IiwiZmlsdGVyT2JqZWN0IiwibWV0YWRhdGEiLCJtYXBPYmplY3QiLCJfZmxhdHRlblJlbmRlcmVkRmVhdHVyZXMiLCJzb3VyY2VSZXN1bHRzIiwiZmVhdHVyZXMiLCJsYXllckZlYXR1cmVzIiwiaW5jbHVkZWRTb3VyY2VzIiwicXVlcnlDb29yZGluYXRlcyIsInBvaW50Q29vcmRpbmF0ZSIsInJlbmRlcmVkU3ltYm9scyIsImJ1Y2tldFF1ZXJ5RGF0YSIsInF1ZXJ5RGF0YSIsImJ1Y2tldFN5bWJvbHMiLCJsb29rdXBTeW1ib2xGZWF0dXJlcyIsImxheWVyU3ltYm9scyIsInNvcnRlZEEiLCJzeW1ib2xGZWF0dXJlIiwibGF5ZXJOYW1lIiwicXVlcnlTb3VyY2VGZWF0dXJlcyIsImRhdGFUaWxlcyIsImRhdGFJRCIsImFkZFNvdXJjZVR5cGUiLCJTb3VyY2VUeXBlIiwiZ2V0U291cmNlVHlwZSIsInNldFNvdXJjZVR5cGUiLCJ3b3JrZXJTb3VyY2VVUkwiLCJfdXBkYXRlIiwiX3JlbW92ZSIsInJ0bFRleHRQbHVnaW5FdmVudGVkIiwib2ZmIiwiX3VwZGF0ZVNvdXJjZXMiLCJfZ2VuZXJhdGVDb2xsaXNpb25Cb3hlcyIsIl91cGRhdGVQbGFjZW1lbnQiLCJwbGFjZW1lbnRDb21taXR0ZWQiLCJpc0xlc3NUaGFuIiwibGF5ZXJCdWNrZXRzQ2hhbmdlZCIsInBhdXNlYWJsZVBsYWNlbWVudCIsIl9yZWxlYXNlU3ltYm9sRmFkZVRpbGVzIiwiaWNvbnMiLCJzdGFja3MiLCJWZXJ0ZXhBcnJheU9iamVjdCIsImJvdW5kUHJvZ3JhbSIsImJvdW5kTGF5b3V0VmVydGV4QnVmZmVyIiwiYm91bmRQYWludFZlcnRleEJ1ZmZlcnMiLCJib3VuZEluZGV4QnVmZmVyIiwiYm91bmRWZXJ0ZXhPZmZzZXQiLCJib3VuZER5bmFtaWNWZXJ0ZXhCdWZmZXIiLCJ2YW8iLCJsYXlvdXRWZXJ0ZXhCdWZmZXIiLCJwYWludFZlcnRleEJ1ZmZlcnMiLCJpbmRleEJ1ZmZlciIsImR5bmFtaWNWZXJ0ZXhCdWZmZXIiLCJkeW5hbWljVmVydGV4QnVmZmVyMiIsInBhaW50QnVmZmVyc0RpZmZlciIsImlzRnJlc2hCaW5kUmVxdWlyZWQiLCJib3VuZER5bmFtaWNWZXJ0ZXhCdWZmZXIyIiwiZnJlc2hCaW5kIiwibnVtUHJldkF0dHJpYnV0ZXMiLCJudW1OZXh0QXR0cmlidXRlcyIsIm51bUF0dHJpYnV0ZXMiLCJjcmVhdGVWZXJ0ZXhBcnJheU9FUyIsImN1cnJlbnROdW1BdHRyaWJ1dGVzIiwiZGlzYWJsZVZlcnRleEF0dHJpYkFycmF5IiwidmVydGV4QnVmZmVyIiwidmVydGV4QnVmZmVyJDEiLCJkZWxldGVWZXJ0ZXhBcnJheU9FUyIsImNvbmZpZ3VyYXRpb24iLCJmaXhlZFVuaWZvcm1zIiwic2hvd092ZXJkcmF3SW5zcGVjdG9yIiwiY3JlYXRlUHJvZ3JhbSIsImRlZmluZXMiLCJ0b0ZpeGVkIiwiZnJhZ21lbnRTb3VyY2UiLCJzaGFkZXJzIiwicHJlbHVkZSIsInZlcnRleFNvdXJjZSIsImZyYWdtZW50U2hhZGVyIiwiY3JlYXRlU2hhZGVyIiwiRlJBR01FTlRfU0hBREVSIiwic2hhZGVyU291cmNlIiwiY29tcGlsZVNoYWRlciIsImF0dGFjaFNoYWRlciIsInZlcnRleFNoYWRlciIsIlZFUlRFWF9TSEFERVIiLCJsYXlvdXRBdHRyaWJ1dGVzIiwiYmluZEF0dHJpYkxvY2F0aW9uIiwibGlua1Byb2dyYW0iLCJnZXRQcm9ncmFtUGFyYW1ldGVyIiwiQUNUSVZFX0FUVFJJQlVURVMiLCJ1bmlmb3JtTG9jYXRpb25zIiwiYXR0cmlidXRlIiwiZ2V0QWN0aXZlQXR0cmliIiwiZ2V0QXR0cmliTG9jYXRpb24iLCJudW1Vbmlmb3JtcyIsIkFDVElWRV9VTklGT1JNUyIsInVuaWZvcm0iLCJnZXRBY3RpdmVVbmlmb3JtIiwiZ2V0VW5pZm9ybUxvY2F0aW9uIiwiYmluZGVyVW5pZm9ybXMiLCJnZXRVbmlmb3JtcyIsInBhdHRlcm5Vbmlmb3JtVmFsdWVzIiwiY3Jvc3NmYWRlIiwidGlsZVJhdGlvIiwidGlsZVpvb20iLCJudW1UaWxlcyIsInRpbGVTaXplQXROZWFyZXN0Wm9vbSIsInBpeGVsWCIsInBpeGVsWSIsInVfaW1hZ2UiLCJ1X3RleHNpemUiLCJpbWFnZUF0bGFzVGV4dHVyZSIsInVfc2NhbGUiLCJmcm9tU2NhbGUiLCJ0b1NjYWxlIiwidV9mYWRlIiwidV9waXhlbF9jb29yZF91cHBlciIsInVfcGl4ZWxfY29vcmRfbG93ZXIiLCJkcmF3TW9kZSIsInVuaWZvcm1WYWx1ZXMiLCJzZWdtZW50cyIsImN1cnJlbnRQcm9wZXJ0aWVzIiwiZHluYW1pY0xheW91dEJ1ZmZlciIsImR5bmFtaWNMYXlvdXRCdWZmZXIyIiwic2V0VW5pZm9ybXMiLCJwcmltaXRpdmVTaXplIiwiTElORVMiLCJUUklBTkdMRVMiLCJMSU5FX1NUUklQIiwidmFvcyIsImdldFBhaW50VmVydGV4QnVmZmVycyIsImRyYXdFbGVtZW50cyIsInByaW1pdGl2ZUxlbmd0aCIsIlVOU0lHTkVEX1NIT1JUIiwicHJpbWl0aXZlT2Zmc2V0IiwiZmlsbEV4dHJ1c2lvblVuaWZvcm1WYWx1ZXMiLCJfbHAiLCJsaWdodFBvcyIsImxpZ2h0TWF0IiwibWF0MyIsInZlYzMiLCJsaWdodENvbG9yIiwidV9tYXRyaXgiLCJ1X2xpZ2h0cG9zIiwidV9saWdodGludGVuc2l0eSIsInVfbGlnaHRjb2xvciIsImZpbGxFeHRydXNpb25QYXR0ZXJuVW5pZm9ybVZhbHVlcyIsInVfaGVpZ2h0X2ZhY3RvciIsImV4dHJ1c2lvblRleHR1cmVVbmlmb3JtVmFsdWVzIiwidGV4dHVyZVVuaXQiLCJ1X3dvcmxkIiwidV9vcGFjaXR5IiwiZmlsbFVuaWZvcm1WYWx1ZXMiLCJmaWxsUGF0dGVyblVuaWZvcm1WYWx1ZXMiLCJmaWxsT3V0bGluZVVuaWZvcm1WYWx1ZXMiLCJkcmF3aW5nQnVmZmVyU2l6ZSIsImZpbGxPdXRsaW5lUGF0dGVyblVuaWZvcm1WYWx1ZXMiLCJjaXJjbGVVbmlmb3JtVmFsdWVzIiwiZXh0cnVkZVNjYWxlIiwicGl4ZWxzVG9HTFVuaXRzIiwidV9jYW1lcmFfdG9fY2VudGVyX2Rpc3RhbmNlIiwidV9zY2FsZV93aXRoX21hcCIsInRyYW5zbGF0ZVBvc01hdHJpeCIsInVfcGl0Y2hfd2l0aF9tYXAiLCJ1X2V4dHJ1ZGVfc2NhbGUiLCJjb2xsaXNpb25Vbmlmb3JtcyIsImxvY2F0aW9ucyIsIlVuaWZvcm1NYXRyaXg0ZiIsIlVuaWZvcm0xZiIsInVfcGl4ZWxzX3RvX3RpbGVfdW5pdHMiLCJVbmlmb3JtMmYiLCJ1X292ZXJzY2FsZV9mYWN0b3IiLCJjb2xsaXNpb25Vbmlmb3JtVmFsdWVzIiwiZGVidWdVbmlmb3JtVmFsdWVzIiwidV9jb2xvciIsImNsaXBwaW5nTWFza1VuaWZvcm1WYWx1ZXMiLCJoZWF0bWFwVW5pZm9ybVZhbHVlcyIsInVfaW50ZW5zaXR5IiwiaGVhdG1hcFRleHR1cmVVbmlmb3JtVmFsdWVzIiwiY29sb3JSYW1wVW5pdCIsInVfY29sb3JfcmFtcCIsImhpbGxzaGFkZVVuaWZvcm1WYWx1ZXMiLCJzaGFkb3ciLCJoaWdobGlnaHQiLCJhY2NlbnQiLCJhemltdXRoYWwiLCJ1X2xhdHJhbmdlIiwiY29vcmRpbmF0ZTAiLCJ0b0Nvb3JkaW5hdGUiLCJjb29yZGluYXRlMSIsImNvb3JkaW5hdGVMb2NhdGlvbiIsImdldFRpbGVMYXRSYW5nZSIsInVfbGlnaHQiLCJ1X3NoYWRvdyIsInVfaGlnaGxpZ2h0IiwidV9hY2NlbnQiLCJoaWxsc2hhZGVVbmlmb3JtUHJlcGFyZVZhbHVlcyIsInVfZGltZW5zaW9uIiwidV96b29tIiwidV9tYXh6b29tIiwibGluZVVuaWZvcm1WYWx1ZXMiLCJjYWxjdWxhdGVNYXRyaXgiLCJ1X3JhdGlvIiwidV9nbF91bml0c190b19waXhlbHMiLCJsaW5lR3JhZGllbnRVbmlmb3JtVmFsdWVzIiwibGluZVBhdHRlcm5Vbmlmb3JtVmFsdWVzIiwidGlsZVpvb21SYXRpbyIsImNhbGN1bGF0ZVRpbGVSYXRpbyIsImxpbmVTREZVbmlmb3JtVmFsdWVzIiwicG9zQSIsImZyb20iLCJwb3NCIiwidG8iLCJ3aWR0aEEiLCJ3aWR0aEIiLCJ1X3BhdHRlcm5zY2FsZV9hIiwidV9wYXR0ZXJuc2NhbGVfYiIsInVfc2RmZ2FtbWEiLCJ1X3RleF95X2EiLCJ1X3RleF95X2IiLCJ1X21peCIsInJhc3RlclVuaWZvcm1WYWx1ZXMiLCJwYXJlbnRUTCIsInBhcmVudFNjYWxlQnkiLCJmYWRlIiwidV90bF9wYXJlbnQiLCJ1X3NjYWxlX3BhcmVudCIsInVfYnVmZmVyX3NjYWxlIiwidV9mYWRlX3QiLCJtaXgiLCJ1X2ltYWdlMCIsInVfaW1hZ2UxIiwidV9icmlnaHRuZXNzX2xvdyIsInVfYnJpZ2h0bmVzc19oaWdoIiwidV9zYXR1cmF0aW9uX2ZhY3RvciIsInNhdHVyYXRpb24iLCJ1X2NvbnRyYXN0X2ZhY3RvciIsImNvbnRyYXN0IiwidV9zcGluX3dlaWdodHMiLCJzcGluV2VpZ2h0cyIsInN5bWJvbEljb25Vbmlmb3JtVmFsdWVzIiwiZnVuY3Rpb25UeXBlIiwicm90YXRlSW5TaGFkZXIiLCJ0ZXhTaXplIiwidV9pc19zaXplX3pvb21fY29uc3RhbnQiLCJ1X2lzX3NpemVfZmVhdHVyZV9jb25zdGFudCIsInVfc2l6ZV90IiwidVNpemVUIiwidV9zaXplIiwidVNpemUiLCJ1X3BpdGNoIiwidV9yb3RhdGVfc3ltYm9sIiwidV9hc3BlY3RfcmF0aW8iLCJ1X2ZhZGVfY2hhbmdlIiwidV9sYWJlbF9wbGFuZV9tYXRyaXgiLCJ1X2dsX2Nvb3JkX21hdHJpeCIsInVfaXNfdGV4dCIsInVfdGV4dHVyZSIsInN5bWJvbFNERlVuaWZvcm1WYWx1ZXMiLCJpc0hhbG8iLCJ1X2dhbW1hX3NjYWxlIiwidV9pc19oYWxvIiwiYmFja2dyb3VuZFVuaWZvcm1WYWx1ZXMiLCJiYWNrZ3JvdW5kUGF0dGVyblVuaWZvcm1WYWx1ZXMiLCJpbWFnZVBvc0EiLCJpbWFnZVBvc0IiLCJ1X3BhdHRlcm5fdGxfYSIsInRsIiwidV9wYXR0ZXJuX2JyX2EiLCJiciIsInVfcGF0dGVybl90bF9iIiwidV9wYXR0ZXJuX2JyX2IiLCJ1X3BhdHRlcm5fc2l6ZV9hIiwiZGlzcGxheVNpemUiLCJ1X3BhdHRlcm5fc2l6ZV9iIiwidV9zY2FsZV9hIiwidV9zY2FsZV9iIiwidV90aWxlX3VuaXRzX3RvX3BpeGVscyIsImJnUGF0dGVyblVuaWZvcm1WYWx1ZXMiLCJwcm9ncmFtVW5pZm9ybXMiLCJmaWxsRXh0cnVzaW9uIiwiVW5pZm9ybTNmIiwiZmlsbEV4dHJ1c2lvblBhdHRlcm4iLCJVbmlmb3JtMWkiLCJVbmlmb3JtNGYiLCJleHRydXNpb25UZXh0dXJlIiwiZmlsbCIsImZpbGxQYXR0ZXJuIiwiZmlsbE91dGxpbmUiLCJmaWxsT3V0bGluZVBhdHRlcm4iLCJkZWJ1ZyIsIlVuaWZvcm1Db2xvciIsImNsaXBwaW5nTWFzayIsImhlYXRtYXAiLCJoZWF0bWFwVGV4dHVyZSIsImhpbGxzaGFkZSIsImhpbGxzaGFkZVByZXBhcmUiLCJsaW5lIiwibGluZUdyYWRpZW50IiwibGluZVBhdHRlcm4iLCJsaW5lU0RGIiwic3ltYm9sSWNvbiIsInN5bWJvbFNERiIsImJhY2tncm91bmQiLCJiYWNrZ3JvdW5kUGF0dGVybiIsImNvbXB1dGVUaWxlTWFza3MiLCJyb290VGlsZSIsImNoaWxkQXJyYXkiLCJsb3dlckJvdW5kIiwiZGlmZloiLCJtYXNrVGlsZUlkIiwiZHJhd0NvbGxpc2lvbkRlYnVnR2VvbWV0cnkiLCJkcmF3Q2lyY2xlcyIsImJ1ZmZlcnMiLCJjb2xvck1vZGVGb3JSZW5kZXJQYXNzIiwiaWRlbnRpdHlNYXQ0IiwiZHJhd0xheWVyU3ltYm9scyIsInRyYW5zbGF0ZSIsInRyYW5zbGF0ZUFuY2hvciIsInJvdGF0aW9uQWxpZ25tZW50IiwicGl0Y2hBbGlnbm1lbnQiLCJ0ciIsImFsb25nTGluZSIsImRlcHRoTW9kZUZvclN1YmxheWVyIiwicHJvZ3JhbUNvbmZpZ3VyYXRpb24iLCJwcm9ncmFtQ29uZmlndXJhdGlvbnMiLCJpc1NERiIsInNkZkljb25zIiwiZ2x5cGhBdGxhc1RleHR1cmUiLCJpY29uU2NhbGVkIiwiY29uc3RhbnRPciIsImljb25zTmVlZExpbmVhciIsImljb25UcmFuc2Zvcm1lZCIsInJvdGF0aW5nIiwiem9vbWluZyIsIk5FQVJFU1QiLCJzeW1ib2xQcm9qZWN0aW9uIiwidUxhYmVsUGxhbmVNYXRyaXgiLCJ1Z2xDb29yZE1hdHJpeCIsImhhc0hhbG8iLCJkcmF3U3ltYm9sRWxlbWVudHMiLCJkcmF3RmlsbFRpbGVzIiwiaXNPdXRsaW5lIiwicHJvZ3JhbU5hbWUiLCJwYXR0ZXJuUHJvcGVydHkiLCJnZXRDcm9zc2ZhZGVQYXJhbWV0ZXJzIiwicGF0dGVybnNMb2FkZWQiLCJ1cGRhdGVQYXR0ZXJuUGFpbnRCdWZmZXJzIiwiY29uc3RhbnRQYXR0ZXJuIiwiaW1hZ2VBdGxhcyIsInBvc1RvIiwicGF0dGVyblBvc2l0aW9ucyIsInBvc0Zyb20iLCJzZXRDb25zdGFudFBhdHRlcm5Qb3NpdGlvbnMiLCJ0aWxlTWF0cml4IiwiaW5kZXhCdWZmZXIyIiwic2VnbWVudHMyIiwic3RlbmNpbE1vZGVGb3JDbGlwcGluZyIsInJlbmRlckhpbGxzaGFkZSIsIm1hc2tlZEJvdW5kc0J1ZmZlciIsIm1hc2tlZEluZGV4QnVmZmVyIiwicmFzdGVyQm91bmRzQnVmZmVyIiwicXVhZFRyaWFuZ2xlSW5kZXhCdWZmZXIiLCJyYXN0ZXJCb3VuZHNTZWdtZW50cyIsInByZXBhcmVIaWxsc2hhZGUiLCJzb3VyY2VNYXhab29tIiwicGl4ZWxEYXRhIiwiZ2V0UGl4ZWxzIiwiVEVYVFVSRTEiLCJwcmVtdWx0aXBseSIsInJlbmRlclRleHR1cmUiLCJnZXRGYWRlVmFsdWVzIiwic2luY2VUaWxlIiwic2luY2VQYXJlbnQiLCJpZGVhbFoiLCJjb3ZlcmluZ1pvb21MZXZlbCIsImZhZGVJbiIsImNoaWxkT3BhY2l0eSIsImRyYXdEZWJ1Z1RpbGUiLCJyZWQiLCJkZWJ1Z0J1ZmZlciIsInRpbGVCb3JkZXJJbmRleEJ1ZmZlciIsImRlYnVnU2VnbWVudHMiLCJ2ZXJ0aWNlcyIsImJhc2VsaW5lIiwibGVuIiwibGVuMiIsInN0cm9rZXMiLCJzaW1wbGV4Rm9udCIsImNyZWF0ZVRleHRWZXJ0aWNlcyIsImRlYnVnVGV4dEFycmF5IiwiUG9zQXJyYXkiLCJkZWJ1Z1RleHRJbmRpY2VzIiwiTGluZUluZGV4QXJyYXkiLCJkZWJ1Z1RleHRCdWZmZXIiLCJwb3NBdHRyaWJ1dGVzIiwiZGVidWdUZXh0SW5kZXhCdWZmZXIiLCJkZWJ1Z1RleHRTZWdtZW50Iiwib25lUGl4ZWwiLCJ0cmFuc2xhdGlvbnMiLCJ0cmFuc2xhdGlvbiIsIndoaXRlIiwiYmxhY2siLCIgIiwiISIsIlwiIiwiIyIsIiQiLCIlIiwiJiIsIiciLCIoIiwiKSIsIioiLCIrIiwiLCIsIi0iLCIuIiwiLyIsIjAiLCIxIiwiMiIsIjMiLCI0IiwiNSIsIjYiLCI3IiwiOCIsIjkiLCI6IiwiOyIsIjwiLCI9IiwiPiIsIj8iLCJAIiwiQSIsIkIiLCJDIiwiRCIsIkUiLCJGIiwiRyIsIkgiLCJJIiwiSiIsIksiLCJMIiwiTSIsIk4iLCJPIiwiUCIsIlEiLCJSIiwiUyIsIlQiLCJVIiwiViIsIlciLCJYIiwiWSIsIloiLCJbIiwiXFwiLCJdIiwiXiIsIl8iLCJgIiwibyIsInUiLCJ7IiwifCIsIn0iLCJ+IiwicmVuZGVyUGFzcyIsImRyYXdDb2xsaXNpb25EZWJ1ZyIsInN0cm9rZVdpZHRoIiwic3Ryb2tlT3BhY2l0eSIsImhlYXRtYXBGYm8iLCJiaW5kVGV4dHVyZVRvRnJhbWVidWZmZXIiLCJIQUxGX0ZMT0FUX09FUyIsImNoZWNrRnJhbWVidWZmZXJTdGF0dXMiLCJGUkFNRUJVRkZFUl9DT01QTEVURSIsImNvbG9yUmFtcFRleHR1cmUiLCJjb2xvclJhbXAiLCJ2aWV3cG9ydEJ1ZmZlciIsInZpZXdwb3J0U2VnbWVudHMiLCJyZW5kZXJUZXh0dXJlVG9NYXAiLCJncmFkaWVudCIsInByb2dyYW1JZCIsImZpcnN0VGlsZSIsImdyYWRpZW50VGV4dHVyZSIsInByZXZQcm9ncmFtIiwicHJvZ3JhbUNoYW5nZWQiLCJmaWxsLWV4dHJ1c2lvbiIsInJlbmRlclRhcmdldCIsInZpZXdwb3J0RnJhbWUiLCJkZXB0aFJib05lZWRzQ2xlYXIiLCJzZXR1cE9mZnNjcmVlbkRlcHRoUmVuZGVyYnVmZmVyIiwiZGVwdGhSYm8iLCJkcmF3VG9FeHRydXNpb25GcmFtZWJ1ZmZlciIsImRyYXdFeHRydXNpb25UaWxlcyIsIkxFUVVBTCIsInJlbmRlcmVkVGV4dHVyZSIsImRyYXdFeHRydXNpb25UZXh0dXJlIiwidGlsZUlEcyIsIm1pblRpbGVaIiwicmVnaXN0ZXJGYWRlRHVyYXRpb24iLCJ0ZXh0dXJlRmlsdGVyIiwiaXNQYXR0ZXJuTWlzc2luZyIsInRpbGVFeHRlbnRCdWZmZXIiLCJ0aWxlRXh0ZW50U2VnbWVudHMiLCJQYWludGVyIiwiX3RpbGVUZXh0dXJlcyIsInNldHVwIiwibnVtU3VibGF5ZXJzIiwiZGVwdGhFcHNpbG9uIiwiZW1wdHlQcm9ncmFtQ29uZmlndXJhdGlvbiIsIlByb2dyYW1Db25maWd1cmF0aW9uIiwiZWRnZSIsIngwIiwieTAiLCJzY2FuU3BhbnMiLCJlMCIsImUxIiwieW1pbiIsInltYXgiLCJzY2FuTGluZSIsIm0wIiwibTEiLCJkMCIsImQxIiwic2NhblRyaWFuZ2xlIiwiYWIiLCJiYyIsImNhIiwidGlsZUV4dGVudEFycmF5IiwiZGVidWdBcnJheSIsInJhc3RlckJvdW5kc0FycmF5Iiwidmlld3BvcnRBcnJheSIsInRpbGVMaW5lU3RyaXBJbmRpY2VzIiwiTGluZVN0cmlwSW5kZXhBcnJheSIsInF1YWRUcmlhbmdsZUluZGljZXMiLCJUcmlhbmdsZUluZGV4QXJyYXkiLCJzdGVuY2lsQ2xlYXJNb2RlIiwiX3JlbmRlclRpbGVDbGlwcGluZ01hc2tzIiwiaWROZXh0IiwiX3RpbGVDbGlwcGluZ01hc2tJRHMiLCJSRVBMQUNFIiwiRVFVQUwiLCJfc2hvd092ZXJkcmF3SW5zcGVjdG9yIiwiQ09OU1RBTlRfQ09MT1IiLCJmYXJEZXB0aCIsImN1cnJlbnRMYXllciIsIm5lYXJEZXB0aCIsInJlbmRlciIsInByZXZTb3VyY2VJZCIsImNvb3Jkc0FzY2VuZGluZyIsImNvb3Jkc0Rlc2NlbmRpbmciLCJjb29yZHNEZXNjZW5kaW5nU3ltYm9sIiwicmV2ZXJzZSIsInZpc2libGVUaWxlcyIsInVwZGF0ZVRpbGVNYXNrcyIsImhhc09mZnNjcmVlblBhc3MiLCJyZW5kZXJMYXllciIsInNob3dUaWxlQm91bmRhcmllcyIsIkRFUFRIX0NPTVBPTkVOVDE2IiwiaW5WaWV3cG9ydFBpeGVsVW5pdHNVbml0cyIsInNpbkEiLCJjb3NBIiwidHJhbnNsYXRlZE1hdHJpeCIsInRleHR1cmVzIiwicG9wIiwiY2FjaGUiLCJjYWNoZUtleSIsIlRyYW5zZm9ybSIsIm1pblpvb20iLCJyZW5kZXJXb3JsZENvcGllcyIsIm1heFZhbGlkTGF0aXR1ZGUiLCJfcmVuZGVyV29ybGRDb3BpZXMiLCJfbWluWm9vbSIsIl9tYXhab29tIiwic2V0TWF4Qm91bmRzIiwiX2NlbnRlciIsIl9mb3YiLCJfdW5tb2RpZmllZCIsIl9wb3NNYXRyaXhDYWNoZSIsIl9hbGlnbmVkUG9zTWF0cml4Q2FjaGUiLCJsYXRSYW5nZSIsIl9jYWxjTWF0cmljZXMiLCJwcm90b3R5cGVBY2Nlc3NvcnMiLCJ3b3JsZFNpemUiLCJjZW50ZXJQb2ludCIsIl9kaXYiLCJyb3RhdGlvbk1hdHJpeCIsIm1hdDIiLCJmb3YiLCJfem9vbSIsInpvb21TY2FsZSIsInpvb21GcmFjdGlvbiIsIl9jb25zdHJhaW4iLCJVbndyYXBwZWRUaWxlSUQiLCJ1dGwiLCJ1dHIiLCJ1YmwiLCJ1YnIiLCJ3MCIsIncxIiwiYWN0dWFsWiIsInd4IiwidGlsZUNvdmVyIiwidW5tb2RpZmllZCIsIkxOMiIsImxuZ2xhdCIsInVucHJvamVjdCIsInhMbmciLCJ5TGF0IiwidGFuIiwiYXRhbiIsImV4cCIsInNldExvY2F0aW9uQXRQb2ludCIsIl9zdWIiLCJsb2NhdGlvblBvaW50IiwiY29vcmRpbmF0ZVBvaW50IiwicG9pbnRMb2NhdGlvbiIsImNvb3JkMCIsImNvb3JkMSIsInBpeGVsTWF0cml4SW52ZXJzZSIsInowIiwiejEiLCJfem9vbVRvIiwicGl4ZWxNYXRyaXgiLCJnZXRCb3VuZHMiLCJnZXRNYXhCb3VuZHMiLCJsbmdSYW5nZSIsInVud3JhcHBlZFRpbGVJRCIsImFsaWduZWQiLCJwb3NNYXRyaXhLZXkiLCJ1bndyYXBwZWRYIiwiYWxpZ25lZFByb2pNYXRyaXgiLCJwcm9qTWF0cml4IiwiX2NvbnN0cmFpbmluZyIsInN5Iiwic3giLCJoMiIsIncyIiwiaGFsZkZvdiIsImdyb3VuZEFuZ2xlIiwidG9wSGFsZlN1cmZhY2VEaXN0YW5jZSIsImZhcloiLCJ2ZXJ0aWNhbFNjYWxlIiwieFNoaWZ0IiwieVNoaWZ0IiwiYW5nbGVDb3MiLCJhbmdsZVNpbiIsImFsaWduZWRNIiwiSGFzaCIsInRpbWUiLCJ0aW1lcklkIiwibGF0ZXIiLCJfdXBkYXRlSGFzaCIsIl91cGRhdGVIYXNoVW50aHJvdHRsZWQiLCJhZGRUbyIsIl9tYXAiLCJfb25IYXNoQ2hhbmdlIiwiZ2V0SGFzaFN0cmluZyIsIm1hcEZlZWRiYWNrIiwicHJlY2lzaW9uIiwiTE4xMCIsImdldEJlYXJpbmciLCJnZXRQaXRjaCIsImhhc2giLCJsb2MiLCJsb2NhdGlvbiIsImp1bXBUbyIsImhpc3RvcnkiLCJyZXBsYWNlU3RhdGUiLCJNYXBNb3VzZUV2ZW50Iiwib3JpZ2luYWxFdmVudCIsImdldENhbnZhc0NvbnRhaW5lciIsImxuZ0xhdCIsIl9kZWZhdWx0UHJldmVudGVkIiwiZGVmYXVsdFByZXZlbnRlZCIsIk1hcFRvdWNoRXZlbnQiLCJsbmdMYXRzIiwiY3VyciIsImFyciIsImRpdiIsInByb3RvdHlwZUFjY2Vzc29ycyQxIiwiTWFwV2hlZWxFdmVudCIsInByb3RvdHlwZUFjY2Vzc29ycyQyIiwiU2Nyb2xsWm9vbUhhbmRsZXIiLCJfZWwiLCJfZGVsdGEiLCJpc0VuYWJsZWQiLCJfZW5hYmxlZCIsImlzQWN0aXZlIiwiX2FjdGl2ZSIsIl9hcm91bmRDZW50ZXIiLCJhcm91bmQiLCJvbldoZWVsIiwiZGVsdGFNb2RlIiwiV2hlZWxFdmVudCIsIkRPTV9ERUxUQV9MSU5FIiwiZGVsdGFZIiwidGltZURlbHRhIiwiX2xhc3RXaGVlbEV2ZW50VGltZSIsIl90eXBlIiwiX2xhc3RWYWx1ZSIsIl90aW1lb3V0IiwiX29uVGltZW91dCIsInNoaWZ0S2V5IiwiX2xhc3RXaGVlbEV2ZW50IiwiX3N0YXJ0IiwiaW5pdGlhbEV2ZW50IiwiX2ZyYW1lSWQiLCJfY2FuY2VsUmVuZGVyRnJhbWUiLCJfZmluaXNoVGltZW91dCIsIl9hcm91bmQiLCJfYXJvdW5kUG9pbnQiLCJfcmVxdWVzdFJlbmRlckZyYW1lIiwiX29uU2Nyb2xsRnJhbWUiLCJ6b29tUmF0ZSIsIl90YXJnZXRab29tIiwiX3N0YXJ0Wm9vbSIsIl9lYXNpbmciLCJfc21vb3RoT3V0RWFzaW5nIiwidGFyZ2V0Wm9vbSIsInN0YXJ0Wm9vbSIsImVhc2luZyIsImZpbmlzaGVkIiwiX2Vhc2UiLCJfcHJldkVhc2UiLCJlYXNlIiwic3RhcnQiLCJzcGVlZCIsImJlemllciIsIkJveFpvb21IYW5kbGVyIiwiX2NvbnRhaW5lciIsImdldENvbnRhaW5lciIsIl9jbGlja1RvbGVyYW5jZSIsImNsaWNrVG9sZXJhbmNlIiwib25Nb3VzZURvd24iLCJfb25Nb3VzZU1vdmUiLCJfb25LZXlEb3duIiwiX29uTW91c2VVcCIsIl9zdGFydFBvcyIsIl9sYXN0UG9zIiwiX2JveCIsInAwIiwiY2xhc3NMaXN0IiwiX2ZpcmVFdmVudCIsInAxIiwiX2ZpbmlzaCIsImZpdFNjcmVlbkNvb3JkaW5hdGVzIiwibGluZWFyIiwia2V5Q29kZSIsImluZXJ0aWFFYXNpbmciLCJEcmFnUm90YXRlSGFuZGxlciIsImVsZW1lbnQiLCJfYnV0dG9uIiwiX2JlYXJpbmdTbmFwIiwiYmVhcmluZ1NuYXAiLCJfcGl0Y2hXaXRoUm90YXRlIiwicGl0Y2hXaXRoUm90YXRlIiwiX3VuYmluZCIsIl9kZWFjdGl2YXRlIiwiX2V2ZW50QnV0dG9uIiwiX29uQmx1ciIsIl9pbmVydGlhIiwiX2xhc3RNb3ZlRXZlbnQiLCJfb25EcmFnRnJhbWUiLCJwMiIsImJlYXJpbmdEaWZmIiwicGl0Y2hEaWZmIiwiaW5lcnRpYSIsIl9kcmFpbkluZXJ0aWFCdWZmZXIiLCJfbm9ybWFsaXplQmVhcmluZyIsIl9pbmVydGlhbFJvdGF0ZSIsIm1hcEJlYXJpbmciLCJmaW5pc2giLCJyZXNldE5vcnRoIiwibm9Nb3ZlU3RhcnQiLCJwcmV2aW91cyIsImZsaW5nRGlmZiIsInNpZ24iLCJmbGluZ0R1cmF0aW9uIiwicm90YXRlVG8iLCJEcmFnUGFuSGFuZGxlciIsIl9vbk1vdmUiLCJvblRvdWNoU3RhcnQiLCJwYXNzaXZlIiwiX29uVG91Y2hFbmQiLCJfbW91c2VEb3duUG9zIiwiX2luZXJ0aWFsUGFuIiwiZmxpbmdPZmZzZXQiLCJ2ZWxvY2l0eSIsInBhbkJ5IiwiS2V5Ym9hcmRIYW5kbGVyIiwiZWFzZU91dCIsImFsdEtleSIsIm1ldGFLZXkiLCJ6b29tRGlyIiwiYmVhcmluZ0RpciIsInBpdGNoRGlyIiwieERpciIsInlEaXIiLCJlYXNlT3B0aW9ucyIsImRlbGF5RW5kRXZlbnRzIiwiZWFzZVRvIiwiRG91YmxlQ2xpY2tab29tSGFuZGxlciIsIl90YXBwZWQiLCJvbkRibENsaWNrIiwiX29uWm9vbUVuZCIsIlRvdWNoWm9vbVJvdGF0ZUhhbmRsZXIiLCJkaXNhYmxlUm90YXRpb24iLCJfcm90YXRpb25EaXNhYmxlZCIsImVuYWJsZVJvdGF0aW9uIiwib25TdGFydCIsIl9zdGFydFZlYyIsIl9zdGFydEFyb3VuZCIsIl9nZXN0dXJlSW50ZW50IiwiX29uRW5kIiwiX2dldFRvdWNoRXZlbnREYXRhIiwidmVjIiwiYW5nbGVXaXRoIiwic2NhbGluZ1NpZ25pZmljYW50bHkiLCJfbGFzdFRvdWNoRXZlbnQiLCJfb25Ub3VjaEZyYW1lIiwiZ2VzdHVyZUludGVudCIsIl9zdGFydFNjYWxlIiwiX3N0YXJ0QmVhcmluZyIsImFyb3VuZFBvaW50Iiwic3RhcnRTY2FsZSIsInNuYXBUb05vcnRoIiwibGFzdFNjYWxlIiwiZmlyc3RTY2FsZSIsInNjYWxlT2Zmc2V0Iiwic2NhbGVEdXJhdGlvbiIsInRhcmdldFNjYWxlIiwiaGFuZGxlcnMiLCJzY3JvbGxab29tIiwiYm94Wm9vbSIsImRyYWdSb3RhdGUiLCJkcmFnUGFuIiwia2V5Ym9hcmQiLCJkb3VibGVDbGlja1pvb20iLCJ0b3VjaFpvb21Sb3RhdGUiLCJDYW1lcmEiLCJfbW92aW5nIiwiX3pvb21pbmciLCJwYW5UbyIsInpvb21JbiIsInpvb21PdXQiLCJjYW1lcmFGb3JCb3VuZHMiLCJfY2FtZXJhRm9yQm94QW5kQmVhcmluZyIsImJvdHRvbSIsInBhZGRpbmdPZmZzZXQiLCJsYXRlcmFsUGFkZGluZyIsInZlcnRpY2FsUGFkZGluZyIsInAwd29ybGQiLCJwMXdvcmxkIiwicDByb3RhdGVkIiwicm90YXRlIiwicDFyb3RhdGVkIiwidXBwZXJSaWdodCIsImxvd2VyTGVmdCIsInNjYWxlWCIsInNjYWxlWSIsImZpdEJvdW5kcyIsIl9maXRJbnRlcm5hbCIsImNhbGN1bGF0ZWRPcHRpb25zIiwiZmx5VG8iLCJzdG9wIiwiem9vbUNoYW5nZWQiLCJiZWFyaW5nQ2hhbmdlZCIsInBpdGNoQ2hhbmdlZCIsImRlZmF1bHRFYXNpbmciLCJzdGFydEJlYXJpbmciLCJzdGFydFBpdGNoIiwicG9pbnRBdE9mZnNldCIsImxvY2F0aW9uQXRPZmZzZXQiLCJfbm9ybWFsaXplQ2VudGVyIiwiZGVsdGEiLCJmaW5hbFNjYWxlIiwiX3JvdGF0aW5nIiwiX3BpdGNoaW5nIiwiX3ByZXBhcmVFYXNlIiwiX2Vhc2VFbmRUaW1lb3V0SUQiLCJiYXNlIiwic3BlZWR1cCIsIm5ld0NlbnRlciIsIl9maXJlTW92ZUV2ZW50cyIsIl9hZnRlckVhc2UiLCJ3YXNab29taW5nIiwid2FzUm90YXRpbmciLCJ3YXNQaXRjaGluZyIsImN1cnZlIiwicmhvIiwidTEiLCJ3TWF4IiwicmhvMiIsInNpbmgiLCJjb3NoIiwicjAiLCJpc0Zpbml0ZSIsInNjcmVlblNwZWVkIiwibWF4RHVyYXRpb24iLCJpc0Vhc2luZyIsIl9lYXNlRnJhbWVJZCIsIl9vbkVhc2VGcmFtZSIsIl9vbkVhc2VFbmQiLCJvbkVhc2VFbmQiLCJfZWFzZVN0YXJ0IiwiX2Vhc2VPcHRpb25zIiwiX3JlbmRlckZyYW1lQ2FsbGJhY2siLCJjdXJyZW50QmVhcmluZyIsImRpZmYiLCJBdHRyaWJ1dGlvbkNvbnRyb2wiLCJnZXREZWZhdWx0UG9zaXRpb24iLCJjb21wYWN0IiwiX3VwZGF0ZUF0dHJpYnV0aW9ucyIsIl91cGRhdGVFZGl0TGluayIsIl91cGRhdGVEYXRhIiwiX3VwZGF0ZUNvbXBhY3QiLCJlZGl0TGluayIsIl9lZGl0TGluayIsInF1ZXJ5U2VsZWN0b3IiLCJzdHlsZU93bmVyIiwic3R5bGVJZCIsInBhcmFtU3RyaW5nIiwiYWNjIiwibmV4dCIsImhyZWYiLCJfaGFzaCIsImF0dHJpYnV0aW9ucyIsImN1c3RvbUF0dHJpYnV0aW9uIiwib3duZXIiLCJhdHRyaWIiLCJpbm5lckhUTUwiLCJvZmZzZXRXaWR0aCIsIkxvZ29Db250cm9sIiwic2V0QXR0cmlidXRlIiwiZGlzcGxheSIsIl91cGRhdGVMb2dvIiwiX2xvZ29SZXF1aXJlZCIsIm1hcGJveF9sb2dvIiwiY29udGFpbmVyQ2hpbGRyZW4iLCJUYXNrUXVldWUiLCJfcXVldWUiLCJfaWQiLCJfY2xlYXJlZCIsIl9jdXJyZW50bHlSdW5uaW5nIiwiY2FuY2VsbGVkIiwicnVubmluZyIsInRhc2siLCJydW4iLCJIVE1MSW1hZ2VFbGVtZW50IiwiSFRNTEVsZW1lbnQiLCJkZWZhdWx0T3B0aW9ucyIsImludGVyYWN0aXZlIiwiYXR0cmlidXRpb25Db250cm9sIiwicHJlc2VydmVEcmF3aW5nQnVmZmVyIiwidHJhY2tSZXNpemUiLCJyZWZyZXNoRXhwaXJlZFRpbGVzIiwibWF4VGlsZUNhY2hlU2l6ZSIsInRyYW5zZm9ybVJlcXVlc3QiLCJNYXAiLCJfaW50ZXJhY3RpdmUiLCJfZmFpbElmTWFqb3JQZXJmb3JtYW5jZUNhdmVhdCIsIl9wcmVzZXJ2ZURyYXdpbmdCdWZmZXIiLCJfdHJhY2tSZXNpemUiLCJfY3Jvc3NTb3VyY2VDb2xsaXNpb25zIiwiX2Nyb3NzRmFkaW5nRmFjdG9yIiwiX3JlbmRlclRhc2tRdWV1ZSIsIl9jb250cm9scyIsInRyYW5zZm9ybVJlcXVlc3RGbiIsIm1heEJvdW5kcyIsIl9zZXR1cENvbnRhaW5lciIsIl9zZXR1cFBhaW50ZXIiLCJfb25XaW5kb3dPbmxpbmUiLCJfb25XaW5kb3dSZXNpemUiLCJjb250ZXh0TWVudUV2ZW50IiwibW91c2VEb3duIiwic3RhcnRQb3MiLCJtYXBFdmVudCIsImJpbmRIYW5kbGVycyIsImFkZENvbnRyb2wiLCJsb2dvUG9zaXRpb24iLCJjb250cm9sIiwiY29udHJvbEVsZW1lbnQiLCJwb3NpdGlvbkNvbnRhaW5lciIsIl9jb250cm9sUG9zaXRpb25zIiwiaW5zZXJ0QmVmb3JlIiwiZmlyc3RDaGlsZCIsInJlbW92ZUNvbnRyb2wiLCJjaSIsImRpbWVuc2lvbnMiLCJfY29udGFpbmVyRGltZW5zaW9ucyIsIl9yZXNpemVDYW52YXMiLCJzZXRNaW5ab29tIiwiZ2V0TWluWm9vbSIsInNldE1heFpvb20iLCJnZXRSZW5kZXJXb3JsZENvcGllcyIsInNldFJlbmRlcldvcmxkQ29waWVzIiwiZ2V0TWF4Wm9vbSIsImlzTW92aW5nIiwiaXNab29taW5nIiwiaXNSb3RhdGluZyIsImxpc3RlbmVyIiwiZGVsZWdhdGVkTGlzdGVuZXIiLCJtb3VzZWluIiwiZGVsZWdhdGVzIiwiX2RlbGVnYXRlZExpc3RlbmVycyIsImxpc3RlbmVycyIsImdlb21ldHJ5IiwiZ2V0U3R5bGUiLCJpc1N0eWxlTG9hZGVkIiwiYXJlVGlsZXNMb2FkZWQiLCJoYXNJbWFnZSIsImxvYWRJbWFnZSIsImJlZm9yZUlkIiwiX2NhbnZhc0NvbnRhaW5lciIsIl9jYW52YXMiLCJjbGllbnRXaWR0aCIsImNsaWVudEhlaWdodCIsIl9kZXRlY3RNaXNzaW5nQ1NTIiwiZ2V0Q29tcHV0ZWRTdHlsZSIsIl9taXNzaW5nQ1NTQ2FuYXJ5IiwiZ2V0UHJvcGVydHlWYWx1ZSIsInZpc2liaWxpdHkiLCJjYW52YXNDb250YWluZXIiLCJfY29udGV4dExvc3QiLCJfY29udGV4dFJlc3RvcmVkIiwiY29udHJvbENvbnRhaW5lciIsIl9jb250cm9sQ29udGFpbmVyIiwicG9zaXRpb25OYW1lIiwiX2ZyYW1lIiwiX3N0eWxlRGlydHkiLCJfc291cmNlc0RpcnR5IiwidXBkYXRlU3R5bGUiLCJfcmVuZGVyIiwiY3Jvc3NGYWRpbmciLCJFdmFsdWF0aW9uUGFyYW1ldGVycyIsImZhY3RvciIsImNyb3NzRmFkaW5nRmFjdG9yIiwiX3BsYWNlbWVudERpcnR5IiwiX3JlcGFpbnQiLCJsb3NlQ29udGV4dCIsInJlbW92ZU5vZGUiLCJfc2hvd1RpbGVCb3VuZGFyaWVzIiwicmVwYWludCIsIl92ZXJ0aWNlcyIsInNob3dDb21wYXNzIiwic2hvd1pvb20iLCJOYXZpZ2F0aW9uQ29udHJvbCIsIl96b29tSW5CdXR0b24iLCJfY3JlYXRlQnV0dG9uIiwiX3pvb21PdXRCdXR0b24iLCJfY29tcGFzcyIsIl9jb21wYXNzQXJyb3ciLCJfcm90YXRlQ29tcGFzc0Fycm93IiwiX2hhbmRsZXIiLCJhcmlhTGFiZWwiLCJhbmNob3JUcmFuc2xhdGUiLCJ0b3AtbGVmdCIsInRvcC1yaWdodCIsImJvdHRvbS1sZWZ0IiwiYm90dG9tLXJpZ2h0IiwiYXBwbHlBbmNob3JDbGFzcyIsInByZWZpeCIsInN1cHBvcnRzR2VvbG9jYXRpb24iLCJNYXJrZXIiLCJhcmd1bWVudHMiLCJfYW5jaG9yIiwiX2NvbG9yIiwiX2RyYWdnYWJsZSIsImRyYWdnYWJsZSIsIl9lbGVtZW50IiwiX29mZnNldCIsIl9kZWZhdWx0TWFya2VyIiwic3ZnIiwiY3JlYXRlTlMiLCJzZXRBdHRyaWJ1dGVOUyIsIm1hcmtlckxhcmdlIiwicGFnZTEiLCJyeCIsInJ5IiwiZWxsaXBzZSIsImJnUGF0aCIsImJvcmRlciIsImJvcmRlclBhdGgiLCJtYWtpIiwiY2lyY2xlQ29udGFpbmVyIiwiY2lyY2xlMSIsImNpcmNsZTIiLCJfcG9wdXAiLCJzZXREcmFnZ2FibGUiLCJfb25NYXBDbGljayIsIl9hZGREcmFnSGFuZGxlciIsImdldExuZ0xhdCIsIl9sbmdMYXQiLCJzZXRMbmdMYXQiLCJfcG9zIiwiZ2V0RWxlbWVudCIsInNldFBvcHVwIiwicG9wdXAiLCJsaW5lYXJPZmZzZXQiLCJtYXJrZXJIZWlnaHQiLCJ0YXJnZXRFbGVtZW50IiwidG9nZ2xlUG9wdXAiLCJnZXRQb3B1cCIsImlzT3BlbiIsInNtYXJ0V3JhcCIsImdldE9mZnNldCIsInNldE9mZnNldCIsIl9wb3NpdGlvbkRlbHRhIiwicG9pbnRlckV2ZW50cyIsIl9vblVwIiwib25jZSIsInNob3VsZEJlRHJhZ2dhYmxlIiwiaXNEcmFnZ2FibGUiLCJwb3NpdGlvbk9wdGlvbnMiLCJlbmFibGVIaWdoQWNjdXJhY3kiLCJtYXhpbXVtQWdlIiwiZml0Qm91bmRzT3B0aW9ucyIsInRyYWNrVXNlckxvY2F0aW9uIiwic2hvd1VzZXJMb2NhdGlvbiIsIkdlb2xvY2F0ZUNvbnRyb2wiLCJfc2V0dXBVSSIsInBlcm1pc3Npb25zIiwidGhlbiIsImdlb2xvY2F0aW9uIiwiX2dlb2xvY2F0aW9uV2F0Y2hJRCIsImNsZWFyV2F0Y2giLCJfdXNlckxvY2F0aW9uRG90TWFya2VyIiwiX29uU3VjY2VzcyIsIl9sYXN0S25vd25Qb3NpdGlvbiIsIl93YXRjaFN0YXRlIiwiX2dlb2xvY2F0ZUJ1dHRvbiIsIl91cGRhdGVNYXJrZXIiLCJfdXBkYXRlQ2FtZXJhIiwiX2RvdEVsZW1lbnQiLCJsb25naXR1ZGUiLCJsYXRpdHVkZSIsImFjY3VyYWN5IiwiZ2VvbG9jYXRlU291cmNlIiwiX29uRXJyb3IiLCJjb2RlIiwiX2NsZWFyV2F0Y2giLCJfdGltZW91dElkIiwidHJpZ2dlciIsIl9zZXR1cCIsIndhdGNoUG9zaXRpb24iLCJnZXRDdXJyZW50UG9zaXRpb24iLCJtYXhXaWR0aCIsInVuaXQiLCJTY2FsZUNvbnRyb2wiLCJ1cGRhdGVTY2FsZSIsImxhdGxuZzEiLCJsYXRsbmcyIiwicmFkIiwibGF0MSIsImxhdDIiLCJtYXhNZXRlcnMiLCJhY29zIiwibWF4RmVldCIsInNldFNjYWxlIiwibWF4RGlzdGFuY2UiLCJwb3cxMCIsImRpc3RhbmNlIiwicmF0aW8iLCJzZXRVbml0IiwiRnVsbHNjcmVlbkNvbnRyb2wiLCJfZnVsbHNjcmVlbiIsIl9mdWxsc2NyZWVuY2hhbmdlIiwiX2NsYXNzTmFtZSIsIl9tYXBDb250YWluZXIiLCJfY2hlY2tGdWxsc2NyZWVuU3VwcG9ydCIsIl9jaGFuZ2VJY29uIiwiZnVsbHNjcmVlbkVuYWJsZWQiLCJtb3pGdWxsU2NyZWVuRW5hYmxlZCIsIm1zRnVsbHNjcmVlbkVuYWJsZWQiLCJ3ZWJraXRGdWxsc2NyZWVuRW5hYmxlZCIsIl9mdWxsc2NyZWVuQnV0dG9uIiwiX29uQ2xpY2tGdWxsc2NyZWVuIiwiX2lzRnVsbHNjcmVlbiIsImZ1bGxzY3JlZW5FbGVtZW50IiwibW96RnVsbFNjcmVlbkVsZW1lbnQiLCJ3ZWJraXRGdWxsc2NyZWVuRWxlbWVudCIsIm1zRnVsbHNjcmVlbkVsZW1lbnQiLCJ0b2dnbGUiLCJleGl0RnVsbHNjcmVlbiIsIm1vekNhbmNlbEZ1bGxTY3JlZW4iLCJtc0V4aXRGdWxsc2NyZWVuIiwid2Via2l0Q2FuY2VsRnVsbFNjcmVlbiIsInJlcXVlc3RGdWxsc2NyZWVuIiwibW96UmVxdWVzdEZ1bGxTY3JlZW4iLCJtc1JlcXVlc3RGdWxsc2NyZWVuIiwid2Via2l0UmVxdWVzdEZ1bGxzY3JlZW4iLCJjbG9zZUJ1dHRvbiIsImNsb3NlT25DbGljayIsIlBvcHVwIiwiX29uQ2xpY2tDbG9zZSIsIl9jb250ZW50Iiwic2V0VGV4dCIsInNldERPTUNvbnRlbnQiLCJjcmVhdGVUZXh0Tm9kZSIsInNldEhUTUwiLCJodG1sIiwiY2hpbGQiLCJmcmFnIiwiY3JlYXRlRG9jdW1lbnRGcmFnbWVudCIsInRlbXAiLCJodG1sTm9kZSIsIl9jcmVhdGVDb250ZW50IiwiX2Nsb3NlQnV0dG9uIiwiX3RpcCIsIm5vcm1hbGl6ZU9mZnNldCIsImNvcm5lck9mZnNldCIsImNvbnZlcnRlZE9mZnNldCIsImFuY2hvckNvbXBvbmVudHMiLCJvZmZzZXRIZWlnaHQiLCJvZmZzZXRlZFBvcyIsImV4cG9ydGVkIiwic2V0UlRMVGV4dFBsdWdpbiIsInRva2VuIiwiY291bnQiLCJ3b3JrZXJVcmwiXSwibWFwcGluZ3MiOiJ5RkFpQkEsU0FBU0EsRUFBWUMsR0FDakIsU0FjeUIsb0JBQVhDLFFBQThDLG9CQUFiQyxVQUszQ0MsTUFBTUMsV0FDTkQsTUFBTUMsVUFBVUMsT0FDaEJGLE1BQU1DLFVBQVVFLFFBQ2hCSCxNQUFNQyxVQUFVRyxTQUNoQkosTUFBTUMsVUFBVUksU0FDaEJMLE1BQU1DLFVBQVVLLGFBQ2hCTixNQUFNQyxVQUFVTSxLQUNoQlAsTUFBTUMsVUFBVU8sTUFDaEJSLE1BQU1DLFVBQVVRLFFBQ2hCVCxNQUFNQyxVQUFVUyxhQUNoQlYsTUFBTVcsU0FLSEMsU0FBU1gsV0FBYVcsU0FBU1gsVUFBVVksTUFLNUNDLE9BQU9DLE1BQ1BELE9BQU9FLFFBQ1BGLE9BQU9HLGdCQUNQSCxPQUFPSSxxQkFDUEosT0FBT0ssVUFDUEwsT0FBT00sVUFDUE4sT0FBT08sY0FDUFAsT0FBT1EsMEJBQ1BSLE9BQU9TLGdCQUNQVCxPQUFPVSxrQkFDUFYsT0FBT1csTUFDUFgsT0FBT1ksUUFDUFosT0FBT2EsbUJBS0osU0FBVTdCLFFBQVUsVUFBVzhCLE1BQVEsY0FBZUEsTUFHakUsV0FDSSxLQUFNLFdBQVk5QixRQUFVLFNBQVVBLFFBQVUsUUFBU0EsUUFDckQsT0FBTyxFQUdYLElBRUkrQixFQUNBQyxFQUhBQyxFQUFPLElBQUlDLE1BQU0sS0FBT0MsS0FBTSxvQkFDOUJDLEVBQVlDLElB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QUFHLEdBQUksR0FBSSxHQUFJLEdBQUksR0FBSSxFQUFHLEdBQUksRUFBRyxHQUFJLEVBQUcsR0FBSSxFQUFHLEdBQUksRUFBRyxHQUFJLEVBQUcsR0FBSSxFQUFHLEdBQUksRUFBRyxHQUFJLEdBQUksR0FBSSxHQUFJLEdBQUksR0FBSSxHQUFJLEdBQUksR0FBSSxHQUFJLElBQUssR0FBSSxFQUFHLEdBQUksRUFBRyxHQUFJLEVBQUcsR0FBSSxFQUFHLEdBQUksRUFBRyxHQUFJLEVBQUcsR0FBSSxFQUFHLEdBQUksRUFBRyxHQUFJLEVBQUcsR0FBSSxFQUFHLEdBQUksRUFBRyxHQUFJLElBQzFPQyxLQUFNLElBQUssR0FBSSxHQUFJLEdBQUksR0FBSSxHQUFJLEdBQUksR0FBSSxHQUFJLEdBQUksR0FBSSxHQUFJLEdBQUksR0FBSSxFQUFHLEdBQUksRUFBRyxHQUFJLEVBQUcsR0FBSSxFQUFHLEVBQUcsRUFBRyxFQUFHLEVBQUcsRUFBRyxFQUFHLEVBQUcsRUFBRyxFQUFHLEVBQUcsRUFBRyxFQUFHLEVBQUcsRUFBRyxHQUFJLEdBQUksR0FBSSxHQUFJLEdBQUksR0FBSSxHQUFJLEdBQUksR0FBSSxHQUFJLEdBQUksR0FBSSxFQUFHLEdBQUksRUFBRyxHQUFJLEVBQUcsR0FBSSxFQUFHLEdBQUksR0FBSSxHQUFJLEdBQUksRUFBRyxHQUFJLEVBQUcsR0FBSSxFQUFHLEdBQUksRUFBRyxHQUFJLEVBQUcsR0FBSSxJQUM1UEMsS0FBTSxJQUFLLEVBQUcsR0FBSSxFQUFHLEdBQUksRUFBRyxHQUFJLEVBQUcsR0FBSSxFQUFHLEdBQUksRUFBRyxHQUFJLEVBQUcsS0FDeERDLEtBQU0sSUFBSyxHQUFJLEdBQUksRUFBRyxHQUFJLEVBQUcsR0FBSSxFQUFHLEdBQUksRUFBRyxHQUFJLEVBQUcsRUFBRyxFQUFHLEVBQUcsR0FBSSxFQUFHLEdBQUksRUFBRyxJQUFLLElBQzlFQyxLQUFNLElBQUssRUFBRyxHQUFJLEVBQUcsR0FBSSxFQUFHLEdBQUksRUFBRyxHQUFJLEdBQUksR0FBSSxHQUFJLEVBQUcsRUFBRyxFQUFHLEdBQUksRUFBRyxHQUFJLEVBQUcsR0FBSSxJQUM5RUMsS0FBTSxJQUFLLEVBQUcsR0FBSSxFQUFHLEdBQUksR0FBSSxFQUFHLEVBQUcsR0FBSSxHQUFJLElBQUssR0FBSSxFQUFHLEdBQUksR0FBSSxFQUFHLEtBQ2xFQyxLQUFNLElBQUssR0FBSSxHQUFJLEdBQUksR0FBSSxHQUFJLEVBQUcsRUFBRyxFQUFHLEdBQUksSUFDNUNDLEtBQU0sSUFBSyxFQUFHLEVBQUcsRUFBRyxFQUFHLEVBQUcsRUFBRyxFQUFHLEVBQUcsRUFBRyxFQUFHLEdBQUksRUFBRyxHQUFJLEVBQUcsR0FBSSxJQUMzREMsS0FBTSxJQUFLLEVBQUcsRUFBRyxHQUFJLElBQ3JCQyxLQUFNLElBQUssRUFBRyxFQUFHLEVBQUcsRUFBRyxFQUFHLEVBQUcsRUFBRyxFQUFHLEVBQUcsSUFDdENDLEtBQU0sSUFBSyxHQUFJLEdBQUksR0FBSSxJQUN2QkMsR0FBTSxJQUFLLEVBQUcsR0FBSSxFQUFHLEdBQUksRUFBRyxHQUFJLEVBQUcsR0FBSSxFQUFHLEVBQUcsRUFBRyxFQUFHLEVBQUcsRUFBRyxFQUFHLEVBQUcsR0FBSSxFQUFHLEdBQUksRUFBRyxHQUFJLEVBQUcsR0FBSSxFQUFHLEdBQUksR0FBSSxHQUFJLEdBQUksR0FBSSxHQUFJLEdBQUksR0FBSSxFQUFHLEtBQzlIQyxHQUFNLElBQUssRUFBRyxHQUFJLEVBQUcsR0FBSSxHQUFJLEdBQUksR0FBSSxJQUNyQ0MsR0FBTSxJQUFLLEVBQUcsR0FBSSxFQUFHLEdBQUksRUFBRyxHQUFJLEVBQUcsR0FBSSxFQUFHLEdBQUksR0FBSSxHQUFJLEdBQUksR0FBSSxHQUFJLEdBQUksR0FBSSxHQUFJLEdBQUksR0FBSSxHQUFJLEdBQUksR0FBSSxHQUFJLEVBQUcsRUFBRyxHQUFJLElBQ2hIQyxHQUFNLElBQUssRUFBRyxHQUFJLEdBQUksR0FBSSxHQUFJLEdBQUksR0FBSSxHQUFJLEdBQUksR0FBSSxHQUFJLEdBQUksR0FBSSxFQUFHLEdBQUksRUFBRyxHQUFJLEVBQUcsR0FBSSxFQUFHLEdBQUksRUFBRyxFQUFHLEVBQUcsRUFBRyxFQUFHLEVBQUcsRUFBRyxFQUFHLElBQ2xIQyxHQUFNLElBQUssR0FBSSxHQUFJLEVBQUcsRUFBRyxHQUFJLEdBQUksR0FBSSxFQUFHLEdBQUksR0FBSSxHQUFJLElBQ3BEQyxHQUFNLElBQUssR0FBSSxHQUFJLEVBQUcsR0FBSSxFQUFHLEdBQUksRUFBRyxHQUFJLEVBQUcsR0FBSSxHQUFJLEdBQUksR0FBSSxHQUFJLEdBQUksR0FBSSxHQUFJLEVBQUcsR0FBSSxFQUFHLEdBQUksRUFBRyxHQUFJLEVBQUcsR0FBSSxFQUFHLEVBQUcsRUFBRyxFQUFHLEVBQUcsRUFBRyxFQUFHLEVBQUcsSUFDL0hDLEdBQU0sSUFBSyxHQUFJLEdBQUksR0FBSSxHQUFJLEdBQUksR0FBSSxHQUFJLEdBQUksRUFBRyxHQUFJLEVBQUcsR0FBSSxFQUFHLEdBQUksRUFBRyxFQUFHLEVBQUcsRUFBRyxFQUFHLEVBQUcsR0FBSSxFQUFHLEdBQUksRUFBRyxHQUFJLEVBQUcsR0FBSSxFQUFHLEdBQUksRUFBRyxHQUFJLEVBQUcsR0FBSSxHQUFJLEdBQUksR0FBSSxHQUFJLEdBQUksR0FBSSxHQUFJLEVBQUcsR0FBSSxFQUFHLEdBQUksRUFBRyxJQUM3S0MsR0FBTSxJQUFLLEdBQUksR0FBSSxFQUFHLEdBQUksR0FBSSxFQUFHLEVBQUcsR0FBSSxHQUFJLEtBQzVDQyxHQUFNLElBQUssRUFBRyxHQUFJLEVBQUcsR0FBSSxFQUFHLEdBQUksRUFBRyxHQUFJLEVBQUcsR0FBSSxFQUFHLEdBQUksR0FBSSxHQUFJLEdBQUksR0FBSSxHQUFJLEVBQUcsR0FBSSxFQUFHLEdBQUksRUFBRyxHQUFJLEVBQUcsR0FBSSxFQUFHLEdBQUksRUFBRyxFQUFHLEVBQUcsRUFBRyxFQUFHLEVBQUcsRUFBRyxFQUFHLEVBQUcsRUFBRyxFQUFHLEVBQUcsRUFBRyxFQUFHLEdBQUksRUFBRyxHQUFJLEdBQUksR0FBSSxHQUFJLEdBQUksR0FBSSxHQUFJLEdBQUksR0FBSSxHQUFJLEdBQUksR0FBSSxHQUFJLEVBQUcsS0FDcE5DLEdBQU0sSUFBSyxHQUFJLEdBQUksR0FBSSxHQUFJLEdBQUksRUFBRyxHQUFJLEVBQUcsRUFBRyxFQUFHLEVBQUcsRUFBRyxFQUFHLEdBQUksRUFBRyxHQUFJLEVBQUcsR0FBSSxFQUFHLEdBQUksRUFBRyxHQUFJLEVBQUcsR0FBSSxHQUFJLEdBQUksR0FBSSxHQUFJLEdBQUksR0FBSSxHQUFJLEdBQUksR0FBSSxFQUFHLEdBQUksRUFBRyxHQUFJLEVBQUcsR0FBSSxFQUFHLEVBQUcsRUFBRyxFQUFHLEVBQUcsRUFBRyxJQUMxS0MsS0FBTSxJQUFLLEVBQUcsR0FBSSxFQUFHLEdBQUksRUFBRyxHQUFJLEVBQUcsR0FBSSxFQUFHLElBQUssR0FBSSxFQUFHLEVBQUcsRUFBRyxFQUFHLEVBQUcsRUFBRyxFQUFHLEVBQUcsRUFBRyxFQUFHLElBQ2pGQyxLQUFNLElBQUssRUFBRyxHQUFJLEVBQUcsR0FBSSxFQUFHLEdBQUksRUFBRyxHQUFJLEVBQUcsSUFBSyxHQUFJLEVBQUcsRUFBRyxFQUFHLEVBQUcsRUFBRyxFQUFHLEVBQUcsRUFBRyxFQUFHLEVBQUcsRUFBRyxHQUFJLEVBQUcsR0FBSSxFQUFHLEdBQUksSUFDdEdDLEtBQU0sSUFBSyxHQUFJLEdBQUksRUFBRyxFQUFHLEdBQUksSUFDN0JDLEtBQU0sSUFBSyxFQUFHLEdBQUksR0FBSSxJQUFLLEdBQUksRUFBRyxFQUFHLEVBQUcsR0FBSSxJQUM1Q0MsS0FBTSxJQUFLLEVBQUcsR0FBSSxHQUFJLEVBQUcsRUFBRyxJQUM1QkMsS0FBTSxJQUFLLEVBQUcsR0FBSSxFQUFHLEdBQUksRUFBRyxHQUFJLEVBQUcsR0FBSSxFQUFHLEdBQUksR0FBSSxHQUFJLEdBQUksR0FBSSxHQUFJLEdBQUksR0FBSSxHQUFJLEdBQUksR0FBSSxHQUFJLEdBQUksR0FBSSxHQUFJLEVBQUcsR0FBSSxFQUFHLEdBQUksR0FBSSxFQUFHLEVBQUcsRUFBRyxFQUFHLEVBQUcsRUFBRyxFQUFHLEdBQUksRUFBRyxFQUFHLElBQ3ZKQyxLQUFNLElBQUssR0FBSSxHQUFJLEdBQUksR0FBSSxHQUFJLEdBQUksR0FBSSxHQUFJLEdBQUksR0FBSSxFQUFHLEdBQUksRUFBRyxHQUFJLEVBQUcsRUFBRyxFQUFHLEVBQUcsR0FBSSxFQUFHLEdBQUksRUFBRyxHQUFJLEVBQUcsR0FBSSxHQUFJLEdBQUksRUFBRyxHQUFJLEdBQUksR0FBSSxHQUFJLEVBQUcsR0FBSSxFQUFHLEVBQUcsR0FBSSxFQUFHLEdBQUksR0FBSSxHQUFJLEVBQUcsR0FBSSxHQUFJLEdBQUksRUFBRyxHQUFJLEVBQUcsR0FBSSxFQUFHLEdBQUksRUFBRyxHQUFJLEVBQUcsR0FBSSxHQUFJLEdBQUksR0FBSSxHQUFJLEdBQUksR0FBSSxHQUFJLEdBQUksR0FBSSxHQUFJLEdBQUksR0FBSSxHQUFJLEdBQUksR0FBSSxFQUFHLEdBQUksRUFBRyxHQUFJLEVBQUcsR0FBSSxFQUFHLEdBQUksRUFBRyxHQUFJLEVBQUcsRUFBRyxFQUFHLEVBQUcsRUFBRyxFQUFHLEVBQUcsRUFBRyxFQUFHLEVBQUcsR0FBSSxFQUFHLEdBQUksRUFBRyxHQUFJLEVBQUcsR0FBSSxFQUFHLEdBQUksR0FBSSxHQUFJLEVBQUcsR0FBSSxHQUFJLEdBQUksRUFBRyxHQUFJLEVBQUcsR0FBSSxJQUNyWkMsR0FBTSxJQUFLLEVBQUcsR0FBSSxFQUFHLEdBQUksR0FBSSxFQUFHLEVBQUcsR0FBSSxHQUFJLEdBQUksR0FBSSxFQUFHLEVBQUcsRUFBRyxHQUFJLElBQ2hFQyxHQUFNLElBQUssRUFBRyxHQUFJLEVBQUcsR0FBSSxHQUFJLEVBQUcsRUFBRyxHQUFJLEdBQUksR0FBSSxHQUFJLEdBQUksR0FBSSxHQUFJLEdBQUksR0FBSSxHQUFJLEdBQUksR0FBSSxHQUFJLEdBQUksR0FBSSxHQUFJLElBQUssR0FBSSxFQUFHLEVBQUcsR0FBSSxHQUFJLEdBQUksR0FBSSxHQUFJLEdBQUksRUFBRyxHQUFJLEVBQUcsR0FBSSxFQUFHLEdBQUksRUFBRyxHQUFJLEVBQUcsR0FBSSxFQUFHLEVBQUcsSUFDbkxDLEdBQU0sSUFBSyxHQUFJLEdBQUksR0FBSSxHQUFJLEdBQUksR0FBSSxHQUFJLEdBQUksRUFBRyxHQUFJLEVBQUcsR0FBSSxFQUFHLEdBQUksRUFBRyxHQUFJLEVBQUcsR0FBSSxFQUFHLEVBQUcsRUFBRyxFQUFHLEVBQUcsRUFBRyxFQUFHLEVBQUcsRUFBRyxFQUFHLEdBQUksRUFBRyxHQUFJLEVBQUcsR0FBSSxFQUFHLEdBQUksSUFDcklDLEdBQU0sSUFBSyxFQUFHLEdBQUksRUFBRyxHQUFJLEdBQUksRUFBRyxFQUFHLEdBQUksR0FBSSxHQUFJLEdBQUksR0FBSSxHQUFJLEdBQUksR0FBSSxHQUFJLEdBQUksR0FBSSxHQUFJLEVBQUcsR0FBSSxFQUFHLEdBQUksRUFBRyxHQUFJLEVBQUcsR0FBSSxFQUFHLEVBQUcsSUFDckhDLEdBQU0sSUFBSyxFQUFHLEdBQUksRUFBRyxHQUFJLEdBQUksRUFBRyxFQUFHLEdBQUksR0FBSSxJQUFLLEdBQUksRUFBRyxFQUFHLEdBQUksR0FBSSxJQUFLLEdBQUksRUFBRyxFQUFHLEVBQUcsR0FBSSxJQUN4RkMsR0FBTSxJQUFLLEVBQUcsR0FBSSxFQUFHLEdBQUksR0FBSSxFQUFHLEVBQUcsR0FBSSxHQUFJLElBQUssR0FBSSxFQUFHLEVBQUcsR0FBSSxHQUFJLEtBQ2xFQyxHQUFNLElBQUssR0FBSSxHQUFJLEdBQUksR0FBSSxHQUFJLEdBQUksR0FBSSxHQUFJLEVBQUcsR0FBSSxFQUFHLEdBQUksRUFBRyxHQUFJLEVBQUcsR0FBSSxFQUFHLEdBQUksRUFBRyxFQUFHLEVBQUcsRUFBRyxFQUFHLEVBQUcsRUFBRyxFQUFHLEVBQUcsRUFBRyxHQUFJLEVBQUcsR0FBSSxFQUFHLEdBQUksRUFBRyxHQUFJLEVBQUcsR0FBSSxHQUFJLEdBQUksRUFBRyxHQUFJLEVBQUcsR0FBSSxJQUNsS0MsR0FBTSxJQUFLLEVBQUcsR0FBSSxFQUFHLEdBQUksR0FBSSxFQUFHLEdBQUksR0FBSSxHQUFJLEdBQUksR0FBSSxFQUFHLEVBQUcsR0FBSSxHQUFJLEtBQ2xFQyxHQUFNLEdBQUksRUFBRyxHQUFJLEVBQUcsSUFDcEJDLEdBQU0sSUFBSyxHQUFJLEdBQUksR0FBSSxFQUFHLEdBQUksRUFBRyxHQUFJLEVBQUcsRUFBRyxFQUFHLEVBQUcsRUFBRyxFQUFHLEVBQUcsRUFBRyxFQUFHLEVBQUcsRUFBRyxFQUFHLElBQ3pFQyxHQUFNLElBQUssRUFBRyxHQUFJLEVBQUcsR0FBSSxHQUFJLEVBQUcsR0FBSSxHQUFJLEVBQUcsR0FBSSxHQUFJLEVBQUcsRUFBRyxHQUFJLEdBQUksSUFDakVDLEdBQU0sSUFBSyxFQUFHLEdBQUksRUFBRyxHQUFJLEdBQUksRUFBRyxFQUFHLEVBQUcsR0FBSSxJQUMxQ0MsR0FBTSxJQUFLLEVBQUcsR0FBSSxFQUFHLEdBQUksR0FBSSxFQUFHLEVBQUcsR0FBSSxHQUFJLEdBQUksR0FBSSxFQUFHLEdBQUksR0FBSSxHQUFJLEdBQUksR0FBSSxFQUFHLEdBQUksR0FBSSxHQUFJLElBQ3pGQyxHQUFNLElBQUssRUFBRyxHQUFJLEVBQUcsR0FBSSxHQUFJLEVBQUcsRUFBRyxHQUFJLEdBQUksR0FBSSxHQUFJLEVBQUcsR0FBSSxHQUFJLEdBQUksSUFDbEVDLEdBQU0sSUFBSyxFQUFHLEdBQUksRUFBRyxHQUFJLEVBQUcsR0FBSSxFQUFHLEdBQUksRUFBRyxHQUFJLEVBQUcsRUFBRyxFQUFHLEVBQUcsRUFBRyxFQUFHLEVBQUcsRUFBRyxFQUFHLEVBQUcsR0FBSSxFQUFHLEdBQUksRUFBRyxHQUFJLEVBQUcsR0FBSSxFQUFHLEdBQUksRUFBRyxHQUFJLEdBQUksR0FBSSxHQUFJLEdBQUksR0FBSSxHQUFJLEdBQUksR0FBSSxHQUFJLEVBQUcsS0FDMUpDLEdBQU0sSUFBSyxFQUFHLEdBQUksRUFBRyxHQUFJLEdBQUksRUFBRyxFQUFHLEdBQUksR0FBSSxHQUFJLEdBQUksR0FBSSxHQUFJLEdBQUksR0FBSSxHQUFJLEdBQUksR0FBSSxHQUFJLEdBQUksR0FBSSxHQUFJLEdBQUksR0FBSSxFQUFHLEtBQzFHQyxHQUFNLElBQUssRUFBRyxHQUFJLEVBQUcsR0FBSSxFQUFHLEdBQUksRUFBRyxHQUFJLEVBQUcsR0FBSSxFQUFHLEVBQUcsRUFBRyxFQUFHLEVBQUcsRUFBRyxFQUFHLEVBQUcsRUFBRyxFQUFHLEdBQUksRUFBRyxHQUFJLEVBQUcsR0FBSSxFQUFHLEdBQUksRUFBRyxHQUFJLEVBQUcsR0FBSSxHQUFJLEdBQUksR0FBSSxHQUFJLEdBQUksR0FBSSxHQUFJLEdBQUksR0FBSSxFQUFHLElBQUssR0FBSSxFQUFHLEdBQUksRUFBRyxJQUFLLElBQ2xMQyxHQUFNLElBQUssRUFBRyxHQUFJLEVBQUcsR0FBSSxHQUFJLEVBQUcsRUFBRyxHQUFJLEdBQUksR0FBSSxHQUFJLEdBQUksR0FBSSxHQUFJLEdBQUksR0FBSSxHQUFJLEdBQUksR0FBSSxHQUFJLEdBQUksR0FBSSxHQUFJLEdBQUksRUFBRyxJQUFLLEdBQUksRUFBRyxHQUFJLEdBQUksR0FBSSxJQUNsSUMsR0FBTSxJQUFLLEdBQUksR0FBSSxHQUFJLEdBQUksR0FBSSxHQUFJLEVBQUcsR0FBSSxFQUFHLEdBQUksRUFBRyxHQUFJLEVBQUcsR0FBSSxFQUFHLEdBQUksRUFBRyxHQUFJLEVBQUcsR0FBSSxHQUFJLEdBQUksR0FBSSxFQUFHLEdBQUksRUFBRyxHQUFJLEVBQUcsR0FBSSxFQUFHLEdBQUksRUFBRyxHQUFJLEVBQUcsRUFBRyxFQUFHLEVBQUcsRUFBRyxFQUFHLElBQ3JKQyxHQUFNLElBQUssRUFBRyxHQUFJLEVBQUcsR0FBSSxHQUFJLEVBQUcsRUFBRyxHQUFJLEdBQUksS0FDM0NDLEdBQU0sSUFBSyxFQUFHLEdBQUksRUFBRyxFQUFHLEVBQUcsRUFBRyxFQUFHLEVBQUcsR0FBSSxFQUFHLEdBQUksRUFBRyxHQUFJLEVBQUcsR0FBSSxFQUFHLEdBQUksRUFBRyxHQUFJLEtBQzNFQyxHQUFNLElBQUssRUFBRyxHQUFJLEVBQUcsR0FBSSxHQUFJLEVBQUcsR0FBSSxHQUFJLEVBQUcsSUFDM0NDLEdBQU0sSUFBSyxFQUFHLEdBQUksRUFBRyxHQUFJLEdBQUksRUFBRyxHQUFJLEdBQUksRUFBRyxHQUFJLEdBQUksRUFBRyxHQUFJLEdBQUksR0FBSSxHQUFJLEdBQUksRUFBRyxHQUFJLEdBQUksR0FBSSxJQUN6RkMsR0FBTSxJQUFLLEVBQUcsR0FBSSxHQUFJLEdBQUksR0FBSSxFQUFHLEdBQUksR0FBSSxFQUFHLElBQzVDQyxHQUFNLElBQUssRUFBRyxHQUFJLEVBQUcsR0FBSSxFQUFHLEdBQUksR0FBSSxFQUFHLEdBQUksR0FBSSxFQUFHLEtBQ2xEQyxHQUFNLElBQUssR0FBSSxHQUFJLEVBQUcsR0FBSSxHQUFJLEVBQUcsRUFBRyxHQUFJLEdBQUksSUFBSyxHQUFJLEVBQUcsRUFBRyxFQUFHLEdBQUksSUFDbEVDLEtBQU0sSUFBSyxFQUFHLEdBQUksR0FBSSxHQUFJLEdBQUksRUFBRyxFQUFHLEdBQUksR0FBSSxHQUFJLEdBQUksRUFBRyxFQUFHLEdBQUksR0FBSSxJQUFLLEdBQUksRUFBRyxHQUFJLEVBQUcsSUFBSyxJQUMxRkMsTUFBTyxJQUFLLEVBQUcsR0FBSSxJQUFLLElBQ3hCQyxLQUFNLElBQUssRUFBRyxHQUFJLEdBQUksR0FBSSxHQUFJLEVBQUcsR0FBSSxHQUFJLElBQUssR0FBSSxHQUFJLEVBQUcsRUFBRyxHQUFJLEdBQUksSUFBSyxHQUFJLEVBQUcsR0FBSSxFQUFHLElBQUssSUFDNUZDLEtBQU0sSUFBSyxFQUFHLEdBQUksRUFBRyxHQUFJLEdBQUksSUFBSyxHQUFJLEVBQUcsRUFBRyxHQUFJLEVBQUcsR0FBSSxHQUFJLElBQUssR0FBSSxFQUFHLEVBQUcsR0FBSSxFQUFHLElBQ2pGQyxHQUFNLElBQUssR0FBSSxFQUFHLElBQUssSUFDdkJDLEtBQU0sSUFBSyxFQUFHLEdBQUksRUFBRyxHQUFJLEVBQUcsR0FBSSxFQUFHLEdBQUksRUFBRyxHQUFJLEVBQUcsR0FBSSxFQUFHLEtBQ3hEcHNELEdBQU0sSUFBSyxHQUFJLEdBQUksR0FBSSxHQUFJLEdBQUksRUFBRyxHQUFJLEdBQUksR0FBSSxHQUFJLEdBQUksR0FBSSxFQUFHLEdBQUksRUFBRyxHQUFJLEVBQUcsR0FBSSxFQUFHLEVBQUcsRUFBRyxFQUFHLEVBQUcsRUFBRyxFQUFHLEVBQUcsRUFBRyxFQUFHLEdBQUksRUFBRyxHQUFJLEVBQUcsR0FBSSxJQUMvSDBDLEdBQU0sSUFBSyxFQUFHLEdBQUksRUFBRyxHQUFJLEdBQUksRUFBRyxFQUFHLEdBQUksRUFBRyxHQUFJLEVBQUcsR0FBSSxHQUFJLEdBQUksR0FBSSxHQUFJLEdBQUksR0FBSSxHQUFJLEVBQUcsR0FBSSxFQUFHLEdBQUksRUFBRyxHQUFJLEVBQUcsR0FBSSxFQUFHLEVBQUcsRUFBRyxFQUFHLEVBQUcsRUFBRyxJQUMvSGlTLEdBQU0sSUFBSyxHQUFJLEdBQUksR0FBSSxHQUFJLEdBQUksR0FBSSxFQUFHLEdBQUksRUFBRyxHQUFJLEVBQUcsR0FBSSxFQUFHLEVBQUcsRUFBRyxFQUFHLEVBQUcsRUFBRyxFQUFHLEVBQUcsRUFBRyxFQUFHLEdBQUksRUFBRyxHQUFJLEVBQUcsR0FBSSxJQUN4R2xXLEdBQU0sSUFBSyxHQUFJLEdBQUksR0FBSSxHQUFJLEdBQUksRUFBRyxHQUFJLEdBQUksR0FBSSxHQUFJLEdBQUksR0FBSSxFQUFHLEdBQUksRUFBRyxHQUFJLEVBQUcsR0FBSSxFQUFHLEVBQUcsRUFBRyxFQUFHLEVBQUcsRUFBRyxFQUFHLEVBQUcsRUFBRyxFQUFHLEdBQUksRUFBRyxHQUFJLEVBQUcsR0FBSSxJQUMvSDFQLEdBQU0sSUFBSyxFQUFHLEVBQUcsR0FBSSxFQUFHLEdBQUksR0FBSSxHQUFJLEdBQUksR0FBSSxHQUFJLEdBQUksR0FBSSxFQUFHLEdBQUksRUFBRyxHQUFJLEVBQUcsR0FBSSxFQUFHLEVBQUcsRUFBRyxFQUFHLEVBQUcsRUFBRyxFQUFHLEVBQUcsRUFBRyxFQUFHLEdBQUksRUFBRyxHQUFJLEVBQUcsR0FBSSxJQUM3SHlQLEdBQU0sSUFBSyxHQUFJLEdBQUksRUFBRyxHQUFJLEVBQUcsR0FBSSxFQUFHLEdBQUksRUFBRyxHQUFJLEdBQUksRUFBRyxFQUFHLEdBQUksRUFBRyxLQUNoRWlkLEdBQU0sSUFBSyxHQUFJLEdBQUksSUFBSyxFQUFHLElBQUssRUFBRyxJQUFLLEVBQUcsSUFBSyxFQUFHLEdBQUksRUFBRyxHQUFJLEdBQUksR0FBSSxFQUFHLEdBQUksR0FBSSxHQUFJLEdBQUksR0FBSSxHQUFJLEVBQUcsR0FBSSxFQUFHLEdBQUksRUFBRyxHQUFJLEVBQUcsRUFBRyxFQUFHLEVBQUcsRUFBRyxFQUFHLEVBQUcsRUFBRyxFQUFHLEVBQUcsR0FBSSxFQUFHLEdBQUksRUFBRyxHQUFJLElBQ3RLdGUsR0FBTSxJQUFLLEVBQUcsR0FBSSxFQUFHLEdBQUksR0FBSSxFQUFHLEVBQUcsR0FBSSxFQUFHLEdBQUksRUFBRyxHQUFJLEdBQUksR0FBSSxHQUFJLEdBQUksR0FBSSxHQUFJLEdBQUksSUFDakY1TCxHQUFNLEdBQUksRUFBRyxHQUFJLEVBQUcsR0FBSSxFQUFHLEdBQUksRUFBRyxHQUFJLEVBQUcsSUFBSyxHQUFJLEVBQUcsRUFBRyxHQUFJLEVBQUcsSUFDL0RxcEIsR0FBTSxJQUFLLEVBQUcsR0FBSSxFQUFHLEdBQUksRUFBRyxHQUFJLEVBQUcsR0FBSSxFQUFHLElBQUssR0FBSSxFQUFHLEVBQUcsR0FBSSxHQUFJLEVBQUcsR0FBSSxFQUFHLEdBQUksRUFBRyxHQUFJLElBQ3RGdGIsR0FBTSxJQUFLLEVBQUcsR0FBSSxFQUFHLEdBQUksR0FBSSxFQUFHLEdBQUksR0FBSSxFQUFHLEdBQUksR0FBSSxFQUFHLEVBQUcsRUFBRyxHQUFJLElBQ2hFc1YsR0FBTSxHQUFJLEVBQUcsR0FBSSxFQUFHLElBQ3BCNGUsR0FBTSxJQUFLLEVBQUcsR0FBSSxFQUFHLEdBQUksR0FBSSxFQUFHLEVBQUcsR0FBSSxFQUFHLEdBQUksRUFBRyxHQUFJLEdBQUksR0FBSSxHQUFJLEdBQUksR0FBSSxHQUFJLEdBQUksR0FBSSxHQUFJLEVBQUcsR0FBSSxHQUFJLEdBQUksR0FBSSxHQUFJLEdBQUksR0FBSSxHQUFJLEdBQUksR0FBSSxHQUFJLEdBQUksR0FBSSxJQUNoSnAwQixHQUFNLElBQUssRUFBRyxHQUFJLEVBQUcsR0FBSSxHQUFJLEVBQUcsRUFBRyxHQUFJLEVBQUcsR0FBSSxFQUFHLEdBQUksR0FBSSxHQUFJLEdBQUksR0FBSSxHQUFJLEdBQUksR0FBSSxJQUNqRml0RCxHQUFNLElBQUssRUFBRyxHQUFJLEVBQUcsR0FBSSxFQUFHLEdBQUksRUFBRyxFQUFHLEVBQUcsRUFBRyxFQUFHLEVBQUcsRUFBRyxFQUFHLEVBQUcsRUFBRyxHQUFJLEVBQUcsR0FBSSxFQUFHLEdBQUksRUFBRyxHQUFJLEVBQUcsR0FBSSxFQUFHLEdBQUksR0FBSSxHQUFJLEdBQUksR0FBSSxHQUFJLEVBQUcsS0FDNUhoaUMsR0FBTSxJQUFLLEVBQUcsR0FBSSxHQUFJLEdBQUksR0FBSSxFQUFHLEVBQUcsR0FBSSxFQUFHLEdBQUksRUFBRyxHQUFJLEdBQUksR0FBSSxHQUFJLEdBQUksR0FBSSxHQUFJLEdBQUksRUFBRyxHQUFJLEVBQUcsR0FBSSxFQUFHLEdBQUksRUFBRyxHQUFJLEVBQUcsRUFBRyxFQUFHLEVBQUcsRUFBRyxFQUFHLElBQ2hJaHJCLEdBQU0sSUFBSyxHQUFJLEdBQUksSUFBSyxHQUFJLEdBQUksRUFBRyxHQUFJLEdBQUksR0FBSSxHQUFJLEdBQUksR0FBSSxFQUFHLEdBQUksRUFBRyxHQUFJLEVBQUcsR0FBSSxFQUFHLEVBQUcsRUFBRyxFQUFHLEVBQUcsRUFBRyxFQUFHLEVBQUcsRUFBRyxFQUFHLEdBQUksRUFBRyxHQUFJLEVBQUcsR0FBSSxJQUNoSW1jLEdBQU0sSUFBSyxFQUFHLEdBQUksRUFBRyxHQUFJLEdBQUksRUFBRyxFQUFHLEVBQUcsRUFBRyxHQUFJLEVBQUcsR0FBSSxFQUFHLEdBQUksR0FBSSxLQUMvRGpjLEdBQU0sSUFBSyxHQUFJLEdBQUksR0FBSSxHQUFJLEdBQUksR0FBSSxFQUFHLEdBQUksRUFBRyxHQUFJLEVBQUcsR0FBSSxFQUFHLEVBQUcsRUFBRyxFQUFHLEdBQUksRUFBRyxHQUFJLEVBQUcsR0FBSSxFQUFHLEdBQUksRUFBRyxHQUFJLEVBQUcsR0FBSSxFQUFHLEVBQUcsRUFBRyxFQUFHLEVBQUcsRUFBRyxJQUM3SG9ELEdBQU0sSUFBSyxFQUFHLEdBQUksRUFBRyxFQUFHLEVBQUcsRUFBRyxFQUFHLEVBQUcsR0FBSSxHQUFJLEdBQUksRUFBRyxFQUFHLEdBQUksRUFBRyxLQUM3RDJwRCxHQUFNLElBQUssRUFBRyxHQUFJLEVBQUcsRUFBRyxFQUFHLEVBQUcsRUFBRyxFQUFHLEdBQUksRUFBRyxHQUFJLEVBQUcsR0FBSSxHQUFJLEdBQUksRUFBRyxHQUFJLEdBQUksR0FBSSxJQUM3RTN0RCxHQUFNLElBQUssRUFBRyxHQUFJLEVBQUcsR0FBSSxHQUFJLEVBQUcsR0FBSSxHQUFJLEVBQUcsSUFDM0N6QixHQUFNLElBQUssRUFBRyxHQUFJLEVBQUcsR0FBSSxHQUFJLEVBQUcsR0FBSSxHQUFJLEVBQUcsR0FBSSxHQUFJLEVBQUcsR0FBSSxHQUFJLEdBQUksR0FBSSxHQUFJLEVBQUcsR0FBSSxHQUFJLEdBQUksSUFDekZkLEdBQU0sSUFBSyxFQUFHLEdBQUksR0FBSSxHQUFJLEdBQUksRUFBRyxHQUFJLEdBQUksRUFBRyxJQUM1Q0MsR0FBTSxJQUFLLEVBQUcsR0FBSSxFQUFHLEdBQUksR0FBSSxFQUFHLEdBQUksR0FBSSxFQUFHLEVBQUcsR0FBSSxFQUFHLEdBQUksRUFBRyxHQUFJLEVBQUcsR0FBSSxJQUN2RXFDLEdBQU0sSUFBSyxHQUFJLEdBQUksRUFBRyxHQUFJLEdBQUksRUFBRyxFQUFHLEdBQUksR0FBSSxJQUFLLEdBQUksRUFBRyxFQUFHLEVBQUcsR0FBSSxJQUNsRTZ0RCxLQUFNLElBQUssRUFBRyxHQUFJLEVBQUcsR0FBSSxFQUFHLEdBQUksRUFBRyxHQUFJLEVBQUcsR0FBSSxFQUFHLEdBQUksRUFBRyxHQUFJLEVBQUcsR0FBSSxFQUFHLEdBQUksRUFBRyxJQUFLLEdBQUksRUFBRyxFQUFHLEdBQUksRUFBRyxHQUFJLEVBQUcsR0FBSSxFQUFHLEdBQUksRUFBRyxHQUFJLEVBQUcsR0FBSSxFQUFHLEdBQUksRUFBRyxHQUFJLEVBQUcsRUFBRyxFQUFHLEVBQUcsRUFBRyxFQUFHLEVBQUcsRUFBRyxFQUFHLEVBQUcsRUFBRyxFQUFHLEdBQUks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
