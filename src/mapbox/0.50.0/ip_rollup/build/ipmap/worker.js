define(["./shared.js"],function(e){"use strict";function t(e){var r=typeof e;if("number"===r||"boolean"===r||"string"===r||null==e)return JSON.stringify(e);if(Array.isArray(e)){for(var n="[",o=0,i=e;o<i.length;o+=1){n+=t(i[o])+","}return n+"]"}for(var a=Object.keys(e).sort(),s="{",l=0;l<a.length;l++)s+=JSON.stringify(a[l])+":"+t(e[a[l]])+",";return s+"}"}function r(r){for(var n="",o=0,i=e.refProperties;o<i.length;o+=1){n+="/"+t(r[i[o]])}return n}var n=function(e){e&&this.replace(e)};function o(e,t,r,n,o){if(void 0===t.segment)return!0;for(var i=t,a=t.segment+1,s=0;s>-r/2;){if(--a<0)return!1;s-=e[a].dist(i),i=e[a]}s+=e[a].dist(e[a+1]),a++;for(var l=[],u=0;s<r/2;){var h=e[a-1],c=e[a],f=e[a+1];if(!f)return!1;var p=h.angleTo(c)-c.angleTo(f);for(p=Math.abs((p+3*Math.PI)%(2*Math.PI)-Math.PI),l.push({distance:s,angleDelta:p}),u+=p;s-l[0].distance>n;)u-=l.shift().angleDelta;if(u>o)return!1;a++,s+=c.dist(f)}return!0}function i(e){for(var t=0,r=0;r<e.length-1;r++)t+=e[r].dist(e[r+1]);return t}function a(e,t,r){return e?.6*t*r:0}function s(e,t){return Math.max(e?e.right-e.left:0,t?t.right-t.left:0)}function l(t,r,n,l,u,h){for(var c=a(n,u,h),f=s(n,l)*h,p=0,d=i(t)/2,g=0;g<t.length-1;g++){var m=t[g],v=t[g+1],y=m.dist(v);if(p+y>d){var x=(d-p)/y,w=e.number(m.x,v.x,x),M=e.number(m.y,v.y,x),S=new e.Anchor(w,M,v.angleTo(m),g);return S._round(),!c||o(t,S,f,c,r)?S:void 0}p+=y}}function u(t,r,n,l,u,h,c,f,p){var d=a(l,h,c),g=s(l,u),m=g*c,v=0===t[0].x||t[0].x===p||0===t[0].y||t[0].y===p;return r-m<r/4&&(r=m+r/4),function t(r,n,a,s,l,u,h,c,f){var p=u/2;var d=i(r);var g=0,m=n-a;var v=[];for(var y=0;y<r.length-1;y++){for(var x=r[y],w=r[y+1],M=x.dist(w),S=w.angleTo(x);m+a<g+M;){var _=((m+=a)-g)/M,P=e.number(x.x,w.x,_),b=e.number(x.y,w.y,_);if(P>=0&&P<f&&b>=0&&b<f&&m-p>=0&&m+p<=d){var I=new e.Anchor(P,b,S,y);I._round(),s&&!o(r,I,u,s,l)||v.push(I)}}g+=M}c||v.length||h||(v=t(r,g/2,a,s,l,u,h,!0,f));return v}(t,v?r/2*f%r:(g/2+2*h)*c*f%r,r,d,n,m,v,!1,p)}n.prototype.replace=function(e){this._layerConfigs={},this._layers={},this.update(e,[])},n.prototype.update=function(t,n){for(var o=this,i=0,a=t;i<a.length;i+=1){var s=a[i];o._layerConfigs[s.id]=s;var l=o._layers[s.id]=e.createStyleLayer(s);l._featureFilter=e.featureFilter(l.filter)}for(var u=0,h=n;u<h.length;u+=1){var c=h[u];delete o._layerConfigs[c],delete o._layers[c]}this.familiesBySource={};for(var f=0,p=function(e){for(var t={},n=0;n<e.length;n++){var o=r(e[n]),i=t[o];i||(i=t[o]=[]),i.push(e[n])}var a=[];for(var s in t)a.push(t[s]);return a}(e.values(this._layerConfigs));f<p.length;f+=1){var d=p[f].map(function(e){return o._layers[e.id]}),g=d[0];if("none"!==g.visibility){var m=g.source||"",v=o.familiesBySource[m];v||(v=o.familiesBySource[m]={});var y=g.sourceLayer||"_geojsonTileLayer",x=v[y];x||(x=v[y]=[]),x.push(d)}}};var h=function(t,r,n,o,i,a,s,l,u,h,c,f){var p=s.top*l-u,d=s.bottom*l+u,g=s.left*l-u,m=s.right*l+u;if(this.boxStartIndex=t.length,h){var v=d-p,y=m-g;v>0&&(v=Math.max(10*l,v),this._addLineCollisionCircles(t,r,n,n.segment,y,v,o,i,a,c))}else{if(f){var x=new e.Point(g,p),w=new e.Point(m,p),M=new e.Point(g,d),S=new e.Point(m,d),_=f*Math.PI/180;x._rotate(_),w._rotate(_),M._rotate(_),S._rotate(_),g=Math.min(x.x,w.x,M.x,S.x),m=Math.max(x.x,w.x,M.x,S.x),p=Math.min(x.y,w.y,M.y,S.y),d=Math.max(x.y,w.y,M.y,S.y)}t.emplaceBack(n.x,n.y,g,p,m,d,o,i,a,0,0)}this.boxEndIndex=t.length};h.prototype._addLineCollisionCircles=function(e,t,r,n,o,i,a,s,l,u){var h=i/2,c=Math.floor(o/h)||1,f=1+.4*Math.log(u)/Math.LN2,p=Math.floor(c*f/2),d=-i/2,g=r,m=n+1,v=d,y=-o/2,x=y-o/4;do{if(--m<0){if(v>y)return;m=0;break}v-=t[m].dist(g),g=t[m]}while(v>x);for(var w=t[m].dist(t[m+1]),M=-p;M<c+p;M++){var S=M*h,_=y+S;if(S<0&&(_+=S),S>o&&(_+=S-o),!(_<v)){for(;v+w<_;){if(v+=w,++m+1>=t.length)return;w=t[m].dist(t[m+1])}var P=_-v,b=t[m],I=t[m+1].sub(b)._unit()._mult(P)._add(b)._round(),T=Math.abs(_-d)<h?0:.8*(_-d);e.emplaceBack(I.x,I.y,-i/2,-i/2,i/2,i/2,a,s,l,i/2,T)}}};var c=p,f=p;function p(e,t){if(!(this instanceof p))return new p(e,t);if(this.data=e||[],this.length=this.data.length,this.compare=t||d,this.length>0)for(var r=(this.length>>1)-1;r>=0;r--)this._down(r)}function d(e,t){return e<t?-1:e>t?1:0}function g(t,r,n){void 0===r&&(r=1),void 0===n&&(n=!1);for(var o=1/0,i=1/0,a=-1/0,s=-1/0,l=t[0],u=0;u<l.length;u++){var h=l[u];(!u||h.x<o)&&(o=h.x),(!u||h.y<i)&&(i=h.y),(!u||h.x>a)&&(a=h.x),(!u||h.y>s)&&(s=h.y)}var f=a-o,p=s-i,d=Math.min(f,p),g=d/2,y=new c(null,m);if(0===d)return new e.Point(o,i);for(var x=o;x<a;x+=d)for(var w=i;w<s;w+=d)y.push(new v(x+g,w+g,g,t));for(var M=function(e){for(var t=0,r=0,n=0,o=e[0],i=0,a=o.length,s=a-1;i<a;s=i++){var l=o[i],u=o[s],h=l.x*u.y-u.x*l.y;r+=(l.x+u.x)*h,n+=(l.y+u.y)*h,t+=3*h}return new v(r/t,n/t,0,e)}(t),S=y.length;y.length;){var _=y.pop();(_.d>M.d||!M.d)&&(M=_,n&&console.log("found best %d after %d probes",Math.round(1e4*_.d)/1e4,S)),_.max-M.d<=r||(g=_.h/2,y.push(new v(_.p.x-g,_.p.y-g,g,t)),y.push(new v(_.p.x+g,_.p.y-g,g,t)),y.push(new v(_.p.x-g,_.p.y+g,g,t)),y.push(new v(_.p.x+g,_.p.y+g,g,t)),S+=4)}return n&&(console.log("num probes: "+S),console.log("best distance: "+M.d)),M.p}function m(e,t){return t.max-e.max}function v(t,r,n,o){this.p=new e.Point(t,r),this.h=n,this.d=function(t,r){for(var n=!1,o=1/0,i=0;i<r.length;i++)for(var a=r[i],s=0,l=a.length,u=l-1;s<l;u=s++){var h=a[s],c=a[u];h.y>t.y!=c.y>t.y&&t.x<(c.x-h.x)*(t.y-h.y)/(c.y-h.y)+h.x&&(n=!n),o=Math.min(o,e.distToSegmentSquared(t,h,c))}return(n?1:-1)*Math.sqrt(o)}(this.p,o),this.max=this.d+this.h*Math.SQRT2}p.prototype={push:function(e){this.data.push(e),this.length++,this._up(this.length-1)},pop:function(){if(0!==this.length){var e=this.data[0];return this.length--,this.length>0&&(this.data[0]=this.data[this.length],this._down(0)),this.data.pop(),e}},peek:function(){return this.data[0]},_up:function(e){for(var t=this.data,r=this.compare,n=t[e];e>0;){var o=e-1>>1,i=t[o];if(r(n,i)>=0)break;t[e]=i,e=o}t[e]=n},_down:function(e){for(var t=this.data,r=this.compare,n=this.length>>1,o=t[e];e<n;){var i=1+(e<<1),a=i+1,s=t[i];if(a<this.length&&r(t[a],s)<0&&(i=a,s=t[a]),r(s,o)>=0)break;t[e]=s,e=i}t[e]=o}},c.default=f;var y=e.createCommonjsModule(function(e){e.exports=function(e,t){var r,n,o,i,a,s,l,u;for(r=3&e.length,n=e.length-r,o=t,a=3432918353,s=461845907,u=0;u<n;)l=255&e.charCodeAt(u)|(255&e.charCodeAt(++u))<<8|(255&e.charCodeAt(++u))<<16|(255&e.charCodeAt(++u))<<24,++u,o=27492+(65535&(i=5*(65535&(o=(o^=l=(65535&(l=(l=(65535&l)*a+(((l>>>16)*a&65535)<<16)&4294967295)<<15|l>>>17))*s+(((l>>>16)*s&65535)<<16)&4294967295)<<13|o>>>19))+((5*(o>>>16)&65535)<<16)&4294967295))+((58964+(i>>>16)&65535)<<16);switch(l=0,r){case 3:l^=(255&e.charCodeAt(u+2))<<16;case 2:l^=(255&e.charCodeAt(u+1))<<8;case 1:o^=l=(65535&(l=(l=(65535&(l^=255&e.charCodeAt(u)))*a+(((l>>>16)*a&65535)<<16)&4294967295)<<15|l>>>17))*s+(((l>>>16)*s&65535)<<16)&4294967295}return o^=e.length,o=2246822507*(65535&(o^=o>>>16))+((2246822507*(o>>>16)&65535)<<16)&4294967295,o=3266489909*(65535&(o^=o>>>13))+((3266489909*(o>>>16)&65535)<<16)&4294967295,(o^=o>>>16)>>>0}}),x=e.createCommonjsModule(function(e){e.exports=function(e,t){for(var r,n=e.length,o=t^n,i=0;n>=4;)r=1540483477*(65535&(r=255&e.charCodeAt(i)|(255&e.charCodeAt(++i))<<8|(255&e.charCodeAt(++i))<<16|(255&e.charCodeAt(++i))<<24))+((1540483477*(r>>>16)&65535)<<16),o=1540483477*(65535&o)+((1540483477*(o>>>16)&65535)<<16)^(r=1540483477*(65535&(r^=r>>>24))+((1540483477*(r>>>16)&65535)<<16)),n-=4,++i;switch(n){case 3:o^=(255&e.charCodeAt(i+2))<<16;case 2:o^=(255&e.charCodeAt(i+1))<<8;case 1:o=1540483477*(65535&(o^=255&e.charCodeAt(i)))+((1540483477*(o>>>16)&65535)<<16)}return o=1540483477*(65535&(o^=o>>>13))+((1540483477*(o>>>16)&65535)<<16),(o^=o>>>15)>>>0}}),w=y,M=y,S=x;function _(t,r,n,o,i,a){t.createArrays();var s=512*t.overscaling;t.tilePixelRatio=e.EXTENT/s,t.compareText={},t.iconsNeedLinear=!1;var l=t.layers[0].layout,u=t.layers[0]._unevaluatedLayout._values,h={};if("composite"===t.textSizeData.functionType){var c=t.textSizeData.zoomRange,f=c.min,p=c.max;h.compositeTextSizes=[u["text-size"].possiblyEvaluate(new e.EvaluationParameters(f)),u["text-size"].possiblyEvaluate(new e.EvaluationParameters(p))]}if("composite"===t.iconSizeData.functionType){var d=t.iconSizeData.zoomRange,g=d.min,m=d.max;h.compositeIconSizes=[u["icon-size"].possiblyEvaluate(new e.EvaluationParameters(g)),u["icon-size"].possiblyEvaluate(new e.EvaluationParameters(m))]}h.layoutTextSize=u["text-size"].possiblyEvaluate(new e.EvaluationParameters(t.zoom+1)),h.layoutIconSize=u["icon-size"].possiblyEvaluate(new e.EvaluationParameters(t.zoom+1)),h.textMaxSize=u["text-size"].possiblyEvaluate(new e.EvaluationParameters(18));for(var v=24*l.get("text-line-height"),y="map"===l.get("text-rotation-alignment")&&"point"!==l.get("symbol-placement"),x=l.get("text-keep-upright"),w=0,M=t.features;w<M.length;w+=1){var S=M[w],_=l.get("text-font").evaluate(S,{}).join(","),b=n,I={},T=S.text;if(T){var k=T instanceof e.Formatted?T.toString():T,z=l.get("text-offset").evaluate(S,{}).map(function(e){return 24*e}),C=24*l.get("text-letter-spacing").evaluate(S,{}),E=e.allowsLetterSpacing(k)?C:0,L=l.get("text-anchor").evaluate(S,{}),A=l.get("text-justify").evaluate(S,{}),D="point"===l.get("symbol-placement")?24*l.get("text-max-width").evaluate(S,{}):0;I.horizontal=e.shapeText(T,r,_,D,v,L,A,E,z,24,e.WritingMode.horizontal),e.allowsVerticalWritingMode(k)&&y&&x&&(I.vertical=e.shapeText(T,r,_,D,v,L,A,E,z,24,e.WritingMode.vertical))}var O=void 0;if(S.icon){var N=o[S.icon];N&&(O=e.shapeIcon(i[S.icon],l.get("icon-offset").evaluate(S,{}),l.get("icon-anchor").evaluate(S,{})),void 0===t.sdfIcons?t.sdfIcons=N.sdf:t.sdfIcons!==N.sdf&&e.warnOnce("Style sheet warning: Cannot mix SDF and non-SDF icons in one buffer"),N.pixelRatio!==t.pixelRatio?t.iconsNeedLinear=!0:0!==l.get("icon-rotate").constantOr(1)&&(t.iconsNeedLinear=!0))}(I.horizontal||O)&&P(t,S,I,O,b,h)}a&&t.generateCollisionDebugBuffers()}function P(t,r,n,o,i,a){var s=a.layoutTextSize.evaluate(r,{}),c=a.layoutIconSize.evaluate(r,{}),f=a.textMaxSize.evaluate(r,{});void 0===f&&(f=s);var p=t.layers[0].layout,d=p.get("text-offset").evaluate(r,{}),m=p.get("icon-offset").evaluate(r,{}),v=s/24,y=t.tilePixelRatio*v,x=t.tilePixelRatio*f/24,M=t.tilePixelRatio*c,S=t.tilePixelRatio*p.get("symbol-spacing"),_=p.get("text-padding")*t.tilePixelRatio,P=p.get("icon-padding")*t.tilePixelRatio,k=p.get("text-max-angle")/180*Math.PI,z="map"===p.get("text-rotation-alignment")&&"point"!==p.get("symbol-placement"),C="map"===p.get("icon-rotation-alignment")&&"point"!==p.get("symbol-placement"),E=p.get("symbol-placement"),L=S/2,A=function(s,l){l.x<0||l.x>=e.EXTENT||l.y<0||l.y>=e.EXTENT||function(t,r,n,o,i,a,s,l,u,c,f,p,d,g,m,v,y,x,M,S,_){var P,T,k=t.addToLineVertexArray(r,n),z=0,C=0,E=0,L=w(o.horizontal?o.horizontal.text:""),A=[];if(o.horizontal){var D=a.layout.get("text-rotate").evaluate(M,{});P=new h(s,n,r,l,u,c,o.horizontal,f,p,d,t.overscaling,D),C+=I(t,r,o.horizontal,a,d,M,g,k,o.vertical?e.WritingMode.horizontal:e.WritingMode.horizontalOnly,A,S,_),o.vertical&&(E+=I(t,r,o.vertical,a,d,M,g,k,e.WritingMode.vertical,A,S,_))}var O=P?P.boxStartIndex:t.collisionBoxArray.length,N=P?P.boxEndIndex:t.collisionBoxArray.length;if(i){var R=function(t,r,n,o,i,a){var s,l,u,h,c=r.image,f=n.layout,p=r.top-1/c.pixelRatio,d=r.left-1/c.pixelRatio,g=r.bottom+1/c.pixelRatio,m=r.right+1/c.pixelRatio;if("none"!==f.get("icon-text-fit")&&i){var v=m-d,y=g-p,x=f.get("text-size").evaluate(a,{})/24,w=i.left*x,M=i.right*x,S=i.top*x,_=M-w,P=i.bottom*x-S,b=f.get("icon-text-fit-padding")[0],I=f.get("icon-text-fit-padding")[1],T=f.get("icon-text-fit-padding")[2],k=f.get("icon-text-fit-padding")[3],z="width"===f.get("icon-text-fit")?.5*(P-y):0,C="height"===f.get("icon-text-fit")?.5*(_-v):0,E="width"===f.get("icon-text-fit")||"both"===f.get("icon-text-fit")?_:v,L="height"===f.get("icon-text-fit")||"both"===f.get("icon-text-fit")?P:y;s=new e.Point(w+C-k,S+z-b),l=new e.Point(w+C+I+E,S+z-b),u=new e.Point(w+C+I+E,S+z+T+L),h=new e.Point(w+C-k,S+z+T+L)}else s=new e.Point(d,p),l=new e.Point(m,p),u=new e.Point(m,g),h=new e.Point(d,g);var A=n.layout.get("icon-rotate").evaluate(a,{})*Math.PI/180;if(A){var D=Math.sin(A),O=Math.cos(A),N=[O,-D,D,O];s._matMult(N),l._matMult(N),h._matMult(N),u._matMult(N)}return[{tl:s,tr:l,bl:h,br:u,tex:c.paddedRect,writingMode:void 0,glyphOffset:[0,0]}]}(0,i,a,0,o.horizontal,M),F=a.layout.get("icon-rotate").evaluate(M,{});T=new h(s,n,r,l,u,c,i,m,v,!1,t.overscaling,F),z=4*R.length;var B=t.iconSizeData,Z=null;"source"===B.functionType?(Z=[e.SIZE_PACK_FACTOR*a.layout.get("icon-size").evaluate(M,{})])[0]>b&&e.warnOnce(t.layerIds[0]+': Value for "icon-size" is >= 256. Reduce your "icon-size".'):"composite"===B.functionType&&((Z=[e.SIZE_PACK_FACTOR*_.compositeIconSizes[0].evaluate(M,{}),e.SIZE_PACK_FACTOR*_.compositeIconSizes[1].evaluate(M,{})])[0]>b||Z[1]>b)&&e.warnOnce(t.layerIds[0]+': Value for "icon-size" is >= 256. Reduce your "icon-size".'),t.addSymbols(t.icon,R,Z,x,y,M,!1,r,k.lineStartIndex,k.lineLength)}var j=T?T.boxStartIndex:t.collisionBoxArray.length,G=T?T.boxEndIndex:t.collisionBoxArray.length;t.glyphOffsetArray.length>=e.SymbolBucket.MAX_GLYPHS&&e.warnOnce("Too many glyphs being rendered in a tile. See https://github.com/mapbox/mapbox-gl-js/issues/2907");t.symbolInstances.emplaceBack(r.x,r.y,A.length>0?A[0]:-1,A.length>1?A[1]:-1,L,O,N,j,G,l,C,E,z,0)}(t,l,s,n,o,t.layers[0],t.collisionBoxArray,r.index,r.sourceLayerIndex,t.index,y,_,z,d,M,P,C,m,r,i,a)};if("line"===E)for(var D=0,O=function(t,r,n,o,i){for(var a=[],s=0;s<t.length;s++)for(var l=t[s],u=void 0,h=0;h<l.length-1;h++){var c=l[h],f=l[h+1];c.x<r&&f.x<r||(c.x<r?c=new e.Point(r,c.y+(f.y-c.y)*((r-c.x)/(f.x-c.x)))._round():f.x<r&&(f=new e.Point(r,c.y+(f.y-c.y)*((r-c.x)/(f.x-c.x)))._round()),c.y<n&&f.y<n||(c.y<n?c=new e.Point(c.x+(f.x-c.x)*((n-c.y)/(f.y-c.y)),n)._round():f.y<n&&(f=new e.Point(c.x+(f.x-c.x)*((n-c.y)/(f.y-c.y)),n)._round()),c.x>=o&&f.x>=o||(c.x>=o?c=new e.Point(o,c.y+(f.y-c.y)*((o-c.x)/(f.x-c.x)))._round():f.x>=o&&(f=new e.Point(o,c.y+(f.y-c.y)*((o-c.x)/(f.x-c.x)))._round()),c.y>=i&&f.y>=i||(c.y>=i?c=new e.Point(c.x+(f.x-c.x)*((i-c.y)/(f.y-c.y)),i)._round():f.y>=i&&(f=new e.Point(c.x+(f.x-c.x)*((i-c.y)/(f.y-c.y)),i)._round()),u&&c.equals(u[u.length-1])||(u=[c],a.push(u)),u.push(f)))))}return a}(r.geometry,0,0,e.EXTENT,e.EXTENT);D<O.length;D+=1)for(var N=O[D],R=0,F=u(N,S,k,n.vertical||n.horizontal,o,24,x,t.overscaling,e.EXTENT);R<F.length;R+=1){var B=F[R],Z=n.horizontal;Z&&T(t,Z.text,L,B)||A(N,B)}else if("line-center"===E)for(var j=0,G=r.geometry;j<G.length;j+=1){var J=G[j];if(J.length>1){var X=l(J,k,n.vertical||n.horizontal,o,24,x);X&&A(J,X)}}else if("Polygon"===r.type)for(var V=0,W=e.classifyRings(r.geometry,0);V<W.length;V+=1){var Y=W[V],q=g(Y,16);A(Y[0],new e.Anchor(q.x,q.y,0))}else if("LineString"===r.type)for(var K=0,U=r.geometry;K<U.length;K+=1){var H=U[K];A(H,new e.Anchor(H[0].x,H[0].y,0))}else if("Point"===r.type)for(var Q=0,$=r.geometry;Q<$.length;Q+=1)for(var ee=0,te=$[Q];ee<te.length;ee+=1){var re=te[ee];A([re],new e.Anchor(re.x,re.y,0))}}w.murmur3=M,w.murmur2=S;var b=65535;function I(t,r,n,o,i,a,s,l,u,h,c,f){var p=function(t,r,n,o,i,a){for(var s=n.layout.get("text-rotate").evaluate(i,{})*Math.PI/180,l=n.layout.get("text-offset").evaluate(i,{}).map(function(e){return 24*e}),u=r.positionedGlyphs,h=[],c=0;c<u.length;c++){var f=u[c],p=a[f.fontStack],d=p&&p[f.glyph];if(d){var g=d.rect;if(g){var m=e.GLYPH_PBF_BORDER+1,v=d.metrics.advance*f.scale/2,y=o?[f.x+v,f.y]:[0,0],x=o?[0,0]:[f.x+v+l[0],f.y+l[1]],w=(d.metrics.left-m)*f.scale-v+x[0],M=(-d.metrics.top-m)*f.scale+x[1],S=w+g.w*f.scale,_=M+g.h*f.scale,P=new e.Point(w,M),b=new e.Point(S,M),I=new e.Point(w,_),T=new e.Point(S,_);if(o&&f.vertical){var k=new e.Point(-v,v),z=-Math.PI/2,C=new e.Point(5,0);P._rotateAround(z,k)._add(C),b._rotateAround(z,k)._add(C),I._rotateAround(z,k)._add(C),T._rotateAround(z,k)._add(C)}if(s){var E=Math.sin(s),L=Math.cos(s),A=[L,-E,E,L];P._matMult(A),b._matMult(A),I._matMult(A),T._matMult(A)}h.push({tl:P,tr:b,bl:I,br:T,tex:g,writingMode:r.writingMode,glyphOffset:y})}}}return h}(0,n,o,i,a,c),d=t.textSizeData,g=null;return"source"===d.functionType?(g=[e.SIZE_PACK_FACTOR*o.layout.get("text-size").evaluate(a,{})])[0]>b&&e.warnOnce(t.layerIds[0]+': Value for "text-size" is >= 256. Reduce your "text-size".'):"composite"===d.functionType&&((g=[e.SIZE_PACK_FACTOR*f.compositeTextSizes[0].evaluate(a,{}),e.SIZE_PACK_FACTOR*f.compositeTextSizes[1].evaluate(a,{})])[0]>b||g[1]>b)&&e.warnOnce(t.layerIds[0]+': Value for "text-size" is >= 256. Reduce your "text-size".'),t.addSymbols(t.text,p,g,s,i,a,u,r,l.lineStartIndex,l.lineLength),h.push(t.text.placedSymbolArray.length-1),4*p.length}function T(e,t,r,n){var o=e.compareText;if(t in o){for(var i=o[t],a=i.length-1;a>=0;a--)if(n.dist(i[a])<r)return!0}else o[t]=[];return o[t].push(n),!1}var k=function(t){var r={},n=[];for(var o in t){var i=t[o],a=r[o]={};for(var s in i){var l=i[+s];if(l&&0!==l.bitmap.width&&0!==l.bitmap.height){var u={x:0,y:0,w:l.bitmap.width+2,h:l.bitmap.height+2};n.push(u),a[s]={rect:u,metrics:l.metrics}}}}var h=e.potpack(n),c=h.w,f=h.h,p=new e.AlphaImage({width:c||1,height:f||1});for(var d in t){var g=t[d];for(var m in g){var v=g[+m];if(v&&0!==v.bitmap.width&&0!==v.bitmap.height){var y=r[d][m].rect;e.AlphaImage.copy(v.bitmap,p,{x:0,y:0},{x:y.x+1,y:y.y+1},v.bitmap)}}}this.image=p,this.positions=r};e.register("GlyphAtlas",k);var z=function(t){this.tileID=new e.OverscaledTileID(t.tileID.overscaledZ,t.tileID.wrap,t.tileID.canonical.z,t.tileID.canonical.x,t.tileID.canonical.y),this.uid=t.uid,this.zoom=t.zoom,this.pixelRatio=t.pixelRatio,this.tileSize=t.tileSize,this.source=t.source,this.overscaling=this.tileID.overscaleFactor(),this.showCollisionBoxes=t.showCollisionBoxes,this.collectResourceTiming=!!t.collectResourceTiming};function C(t,r){for(var n=new e.EvaluationParameters(r),o=0,i=t;o<i.length;o+=1){i[o].recalculate(n)}}z.prototype.parse=function(t,r,n,o){var i=this;this.status="parsing",this.data=t,this.collisionBoxArray=new e.CollisionBoxArray;var a=new e.DictionaryCoder(Object.keys(t.layers).sort()),s=new e.FeatureIndex(this.tileID);s.bucketLayerIDs=[];var l,u,h,c,f={},p={featureIndex:s,iconDependencies:{},patternDependencies:{},glyphDependencies:{}},d=r.familiesBySource[this.source];for(var g in d){var m=t.layers[g];if(m){1===m.version&&e.warnOnce('Vector tile source "'+i.source+'" layer "'+g+'" does not use vector tile spec v2 and therefore may have some rendering errors.');for(var v=a.encode(g),y=[],x=0;x<m.length;x++){var w=m.feature(x);y.push({feature:w,index:x,sourceLayerIndex:v})}for(var M=0,S=d[g];M<S.length;M+=1){var P=S[M],b=P[0];if(!(b.minzoom&&i.zoom<Math.floor(b.minzoom)))if(!(b.maxzoom&&i.zoom>=b.maxzoom))if("none"!==b.visibility)C(P,i.zoom),(f[b.id]=b.createBucket({index:s.bucketLayerIDs.length,layers:P,zoom:i.zoom,pixelRatio:i.pixelRatio,overscaling:i.overscaling,collisionBoxArray:i.collisionBoxArray,sourceLayerIndex:v,sourceID:i.source})).populate(y,p),s.bucketLayerIDs.push(P.map(function(e){return e.id}))}}}var I=e.mapObject(p.glyphDependencies,function(e){return Object.keys(e).map(Number)});Object.keys(I).length?n.send("getGlyphs",{uid:this.uid,stacks:I},function(e,t){l||(l=e,u=t,E.call(i))}):u={};var T=Object.keys(p.iconDependencies);T.length?n.send("getImages",{icons:T},function(e,t){l||(l=e,h=t,E.call(i))}):h={};var z=Object.keys(p.patternDependencies);function E(){if(l)return o(l);if(u&&h&&c){var t=new k(u),r=new e.ImageAtlas(h,c);for(var n in f){var i=f[n];i instanceof e.SymbolBucket?(C(i.layers,this.zoom),_(i,u,t.positions,h,r.iconPositions,this.showCollisionBoxes)):i.hasPattern&&(i instanceof e.LineBucket||i instanceof e.FillBucket||i instanceof e.FillExtrusionBucket)&&(C(i.layers,this.zoom),i.addFeatures(p,r.patternPositions))}this.status="done",o(null,{buckets:e.values(f).filter(function(e){return!e.isEmpty()}),featureIndex:s,collisionBoxArray:this.collisionBoxArray,glyphAtlasImage:t.image,imageAtlas:r})}}z.length?n.send("getImages",{icons:z},function(e,t){l||(l=e,c=t,E.call(i))}):c={},E.call(this)};var E="undefined"!=typeof performance,L={getEntriesByName:function(e){return!!(E&&performance&&performance.getEntriesByName)&&performance.getEntriesByName(e)},mark:function(e){return!!(E&&performance&&performance.mark)&&performance.mark(e)},measure:function(e,t,r){return!!(E&&performance&&performance.measure)&&performance.measure(e,t,r)},clearMarks:function(e){return!!(E&&performance&&performance.clearMarks)&&performance.clearMarks(e)},clearMeasures:function(e){return!!(E&&performance&&performance.clearMeasures)&&performance.clearMeasures(e)}},A=function(e){this._marks={start:[e.url,"start"].join("#"),end:[e.url,"end"].join("#"),measure:e.url.toString()},L.mark(this._marks.start)};function D(t,r){var n=e.getArrayBuffer(t.request,function(t,n){t?r(t):n&&r(null,{vectorTile:new e.mvt.VectorTile(new e.Protobuf(n.data)),rawData:n.data,cacheControl:n.cacheControl,expires:n.expires})});return function(){n.cancel(),r()}}A.prototype.finish=function(){L.mark(this._marks.end);var e=L.getEntriesByName(this._marks.measure);return 0===e.length&&(L.measure(this._marks.measure,this._marks.start,this._marks.end),e=L.getEntriesByName(this._marks.measure),L.clearMarks(this._marks.start),L.clearMarks(this._marks.end),L.clearMeasures(this._marks.measure)),e},L.Performance=A;var O=function(e,t,r){this.actor=e,this.layerIndex=t,this.loadVectorData=r||D,this.loading={},this.loaded={}};O.prototype.loadTile=function(t,r){var n=this,o=t.uid;this.loading||(this.loading={});var i=!!(t&&t.request&&t.request.collectResourceTiming)&&new L.Performance(t.request),a=this.loading[o]=new z(t);a.abort=this.loadVectorData(t,function(t,s){if(delete n.loading[o],t||!s)return r(t);var l=s.rawData,u={};s.expires&&(u.expires=s.expires),s.cacheControl&&(u.cacheControl=s.cacheControl);var h={};if(i){var c=i.finish();c&&(h.resourceTiming=JSON.parse(JSON.stringify(c)))}a.vectorTile=s.vectorTile,a.parse(s.vectorTile,n.layerIndex,n.actor,function(t,n){if(t||!n)return r(t);r(null,e.extend({rawTileData:l.slice(0)},n,u,h))}),n.loaded=n.loaded||{},n.loaded[o]=a})},O.prototype.reloadTile=function(e,t){var r=this.loaded,n=e.uid,o=this;if(r&&r[n]){var i=r[n];i.showCollisionBoxes=e.showCollisionBoxes;var a=function(e,r){var n=i.reloadCallback;n&&(delete i.reloadCallback,i.parse(i.vectorTile,o.layerIndex,o.actor,n)),t(e,r)};"parsing"===i.status?i.reloadCallback=a:"done"===i.status&&i.parse(i.vectorTile,this.layerIndex,this.actor,a)}},O.prototype.abortTile=function(e,t){var r=this.loading,n=e.uid;r&&r[n]&&r[n].abort&&(r[n].abort(),delete r[n]),t()},O.prototype.removeTile=function(e,t){var r=this.loaded,n=e.uid;r&&r[n]&&delete r[n],t()};var N=function(){this.loaded={}};N.prototype.loadTile=function(t,r){var n=t.uid,o=t.encoding,i=t.rawImageData,a=new e.DEMData(n,i,o);this.loaded=this.loaded||{},this.loaded[n]=a,r(null,a)},N.prototype.removeTile=function(e){var t=this.loaded,r=e.uid;t&&t[r]&&delete t[r]};var R={RADIUS:6378137,FLATTENING:1/298.257223563,POLAR_RADIUS:6356752.3142};function F(e){var t=0;if(e&&e.length>0){t+=Math.abs(B(e[0]));for(var r=1;r<e.length;r++)t-=Math.abs(B(e[r]))}return t}function B(e){var t,r,n,o,i,a,s=0,l=e.length;if(l>2){for(a=0;a<l;a++)a===l-2?(n=l-2,o=l-1,i=0):a===l-1?(n=l-1,o=0,i=1):(n=a,o=a+1,i=a+2),t=e[n],r=e[o],s+=(Z(e[i][0])-Z(t[0]))*Math.sin(Z(r[1]));s=s*R.RADIUS*R.RADIUS/2}return s}function Z(e){return e*Math.PI/180}var j={geometry:function e(t){var r,n=0;switch(t.type){case"Polygon":return F(t.coordinates);case"MultiPolygon":for(r=0;r<t.coordinates.length;r++)n+=F(t.coordinates[r]);return n;case"Point":case"MultiPoint":case"LineString":case"MultiLineString":return 0;case"GeometryCollection":for(r=0;r<t.geometries.length;r++)n+=e(t.geometries[r]);return n}},ring:B},G=function e(t,r){switch(t&&t.type||null){case"FeatureCollection":return t.features=t.features.map(J(e,r)),t;case"Feature":return t.geometry=e(t.geometry,r),t;case"Polygon":case"MultiPolygon":return function(e,t){"Polygon"===e.type?e.coordinates=X(e.coordinates,t):"MultiPolygon"===e.type&&(e.coordinates=e.coordinates.map(J(X,t)));return e}(t,r);default:return t}};function J(e,t){return function(r){return e(r,t)}}function X(e,t){t=!!t,e[0]=V(e[0],t);for(var r=1;r<e.length;r++)e[r]=V(e[r],!t);return e}function V(e,t){return function(e){return j.ring(e)>=0}(e)===t?e:e.reverse()}var W=e.mvt.VectorTileFeature.prototype.toGeoJSON,Y=function(t){this._feature=t,this.extent=e.EXTENT,this.type=t.type,this.properties=t.tags,"id"in t&&!isNaN(t.id)&&(this.id=parseInt(t.id,10))};Y.prototype.loadGeometry=function(){if(1===this._feature.type){for(var t=[],r=0,n=this._feature.geometry;r<n.length;r+=1){var o=n[r];t.push([new e.Point(o[0],o[1])])}return t}for(var i=[],a=0,s=this._feature.geometry;a<s.length;a+=1){for(var l=[],u=0,h=s[a];u<h.length;u+=1){var c=h[u];l.push(new e.Point(c[0],c[1]))}i.push(l)}return i},Y.prototype.toGeoJSON=function(e,t,r){return W.call(this,e,t,r)};var q=function(t){this.layers={_geojsonTileLayer:this},this.name="_geojsonTileLayer",this.extent=e.EXTENT,this.length=t.length,this._features=t};q.prototype.feature=function(e){return new Y(this._features[e])};var K=e.vectorTile.VectorTileFeature,U=H;function H(e,t){this.options=t||{},this.features=e,this.length=e.length}function Q(e,t){this.id="number"==typeof e.id?e.id:void 0,this.type=e.type,this.rawGeometry=1===e.type?[e.geometry]:e.geometry,this.properties=e.tags,this.extent=t||4096}H.prototype.feature=function(e){return new Q(this.features[e],this.options.extent)},Q.prototype.loadGeometry=function(){var t=this.rawGeometry;this.geometry=[];for(var r=0;r<t.length;r++){for(var n=t[r],o=[],i=0;i<n.length;i++)o.push(new e.Point$1(n[i][0],n[i][1]));this.geometry.push(o)}return this.geometry},Q.prototype.bbox=function(){this.geometry||this.loadGeometry();for(var e=this.geometry,t=1/0,r=-1/0,n=1/0,o=-1/0,i=0;i<e.length;i++)for(var a=e[i],s=0;s<a.length;s++){var l=a[s];t=Math.min(t,l.x),r=Math.max(r,l.x),n=Math.min(n,l.y),o=Math.max(o,l.y)}return[t,n,r,o]},Q.prototype.toGeoJSON=K.prototype.toGeoJSON;var $=ne,ee=ne,te=function(e,t){t=t||{};var r={};for(var n in e)r[n]=new U(e[n].features,t),r[n].name=n,r[n].version=t.version,r[n].extent=t.extent;return ne({layers:r})},re=U;function ne(t){var r=new e.pbf;return function(e,t){for(var r in e.layers)t.writeMessage(3,oe,e.layers[r])}(t,r),r.finish()}function oe(e,t){var r;t.writeVarintField(15,e.version||1),t.writeStringField(1,e.name||""),t.writeVarintField(5,e.extent||4096);var n={keys:[],values:[],keycache:{},valuecache:{}};for(r=0;r<e.length;r++)n.feature=e.feature(r),t.writeMessage(2,ie,n);var o=n.keys;for(r=0;r<o.length;r++)t.writeStringField(3,o[r]);var i=n.values;for(r=0;r<i.length;r++)t.writeMessage(4,he,i[r])}function ie(e,t){var r=e.feature;void 0!==r.id&&t.writeVarintField(1,r.id),t.writeMessage(2,ae,e),t.writeVarintField(3,r.type),t.writeMessage(4,ue,r)}function ae(e,t){var r=e.feature,n=e.keys,o=e.values,i=e.keycache,a=e.valuecache;for(var s in r.properties){var l=i[s];void 0===l&&(n.push(s),l=n.length-1,i[s]=l),t.writeVarint(l);var u=r.properties[s],h=typeof u;"string"!==h&&"boolean"!==h&&"number"!==h&&(u=JSON.stringify(u));var c=h+":"+u,f=a[c];void 0===f&&(o.push(u),f=o.length-1,a[c]=f),t.writeVarint(f)}}function se(e,t){return(t<<3)+(7&e)}function le(e){return e<<1^e>>31}function ue(e,t){for(var r=e.loadGeometry(),n=e.type,o=0,i=0,a=r.length,s=0;s<a;s++){var l=r[s],u=1;1===n&&(u=l.length),t.writeVarint(se(1,u));for(var h=3===n?l.length-1:l.length,c=0;c<h;c++){1===c&&1!==n&&t.writeVarint(se(2,h-1));var f=l[c].x-o,p=l[c].y-i;t.writeVarint(le(f)),t.writeVarint(le(p)),o+=f,i+=p}3===n&&t.writeVarint(se(7,0))}}function he(e,t){var r=typeof e;"string"===r?t.writeStringField(1,e):"boolean"===r?t.writeBooleanField(7,e):"number"===r&&(e%1!=0?t.writeDoubleField(3,e):e<0?t.writeSVarintField(6,e):t.writeVarintField(5,e))}function ce(e,t,r,n,o,i){if(!(o-n<=r)){var a=Math.floor((n+o)/2);!function e(t,r,n,o,i,a){for(;i>o;){if(i-o>600){var s=i-o+1,l=n-o+1,u=Math.log(s),h=.5*Math.exp(2*u/3),c=.5*Math.sqrt(u*h*(s-h)/s)*(l-s/2<0?-1:1),f=Math.max(o,Math.floor(n-l*h/s+c)),p=Math.min(i,Math.floor(n+(s-l)*h/s+c));e(t,r,n,f,p,a)}var d=r[2*n+a],g=o,m=i;for(fe(t,r,o,n),r[2*i+a]>d&&fe(t,r,o,i);g<m;){for(fe(t,r,g,m),g++,m--;r[2*g+a]<d;)g++;for(;r[2*m+a]>d;)m--}r[2*o+a]===d?fe(t,r,o,m):fe(t,r,++m,i),m<=n&&(o=m+1),n<=m&&(i=m-1)}}(e,t,a,n,o,i%2),ce(e,t,r,n,a-1,i+1),ce(e,t,r,a+1,o,i+1)}}function fe(e,t,r,n){pe(e,r,n),pe(t,2*r,2*n),pe(t,2*r+1,2*n+1)}function pe(e,t,r){var n=e[t];e[t]=e[r],e[r]=n}function de(e,t,r,n){var o=e-r,i=t-n;return o*o+i*i}function ge(e,t,r,n,o){return new me(e,t,r,n,o)}function me(e,t,r,n,o){t=t||ve,r=r||ye,o=o||Array,this.nodeSize=n||64,this.points=e,this.ids=new o(e.length),this.coords=new o(2*e.length);for(var i=0;i<e.length;i++)this.ids[i]=i,this.coords[2*i]=t(e[i]),this.coords[2*i+1]=r(e[i]);ce(this.ids,this.coords,this.nodeSize,0,this.ids.length-1,0)}function ve(e){return e[0]}function ye(e){return e[1]}function xe(e){this.options=be(Object.create(this.options),e),this.trees=new Array(this.options.maxZoom+1)}function we(e,t,r,n,o){return{x:e,y:t,zoom:1/0,id:r,parentId:-1,numPoints:n,properties:o}}function Me(e){return{type:"Feature",id:e.id,properties:Se(e),geometry:{type:"Point",coordinates:[(n=e.x,360*(n-.5)),(t=e.y,r=(180-360*t)*Math.PI/180,360*Math.atan(Math.exp(r))/Math.PI-90)]}};var t,r,n}function Se(e){var t=e.numPoints,r=t>=1e4?Math.round(t/1e3)+"k":t>=1e3?Math.round(t/100)/10+"k":t;return be(be({},e.properties),{cluster:!0,cluster_id:e.id,point_count:t,point_count_abbreviated:r})}function _e(e){return e/360+.5}function Pe(e){var t=Math.sin(e*Math.PI/180),r=.5-.25*Math.log((1+t)/(1-t))/Math.PI;return r<0?0:r>1?1:r}function be(e,t){for(var r in t)e[r]=t[r];return e}function Ie(e){return e.x}function Te(e){return e.y}function ke(e,t,r,n,o,i){var a=o-r,s=i-n;if(0!==a||0!==s){var l=((e-r)*a+(t-n)*s)/(a*a+s*s);l>1?(r=o,n=i):l>0&&(r+=a*l,n+=s*l)}return(a=e-r)*a+(s=t-n)*s}function ze(e,t,r,n){var o={id:void 0===e?null:e,type:t,geometry:r,tags:n,minX:1/0,minY:1/0,maxX:-1/0,maxY:-1/0};return function(e){var t=e.geometry,r=e.type;if("Point"===r||"MultiPoint"===r||"LineString"===r)Ce(e,t);else if("Polygon"===r||"MultiLineString"===r)for(var n=0;n<t.length;n++)Ce(e,t[n]);else if("MultiPolygon"===r)for(n=0;n<t.length;n++)for(var o=0;o<t[n].length;o++)Ce(e,t[n][o])}(o),o}function Ce(e,t){for(var r=0;r<t.length;r+=3)e.minX=Math.min(e.minX,t[r]),e.minY=Math.min(e.minY,t[r+1]),e.maxX=Math.max(e.maxX,t[r]),e.maxY=Math.max(e.maxY,t[r+1])}function Ee(e,t,r,n){if(t.geometry){var o=t.geometry.coordinates,i=t.geometry.type,a=Math.pow(r.tolerance/((1<<r.maxZoom)*r.extent),2),s=[],l=t.id;if(r.promoteId?l=t.properties[r.promoteId]:r.generateId&&(l=n||0),"Point"===i)Le(o,s);else if("MultiPoint"===i)for(var u=0;u<o.length;u++)Le(o[u],s);else if("LineString"===i)Ae(o,s,a,!1);else if("MultiLineString"===i){if(r.lineMetrics){for(u=0;u<o.length;u++)s=[],Ae(o[u],s,a,!1),e.push(ze(l,"LineString",s,t.properties));return}De(o,s,a,!1)}else if("Polygon"===i)De(o,s,a,!0);else{if("MultiPolygon"!==i){if("GeometryCollection"===i){for(u=0;u<t.geometry.geometries.length;u++)Ee(e,{id:l,geometry:t.geometry.geometries[u],properties:t.properties},r,n);return}throw new Error("Input data is not a valid GeoJSON object.")}for(u=0;u<o.length;u++){var h=[];De(o[u],h,a,!0),s.push(h)}}e.push(ze(l,i,s,t.properties))}}function Le(e,t){t.push(Oe(e[0])),t.push(Ne(e[1])),t.push(0)}function Ae(e,t,r,n){for(var o,i,a=0,s=0;s<e.length;s++){var l=Oe(e[s][0]),u=Ne(e[s][1]);t.push(l),t.push(u),t.push(0),s>0&&(a+=n?(o*u-l*i)/2:Math.sqrt(Math.pow(l-o,2)+Math.pow(u-i,2))),o=l,i=u}var h=t.length-3;t[2]=1,function e(t,r,n,o){for(var i,a=o,s=n-r>>1,l=n-r,u=t[r],h=t[r+1],c=t[n],f=t[n+1],p=r+3;p<n;p+=3){var d=ke(t[p],t[p+1],u,h,c,f);if(d>a)i=p,a=d;else if(d===a){var g=Math.abs(p-s);g<l&&(i=p,l=g)}}a>o&&(i-r>3&&e(t,r,i,o),t[i+2]=a,n-i>3&&e(t,i,n,o))}(t,0,h,r),t[h+2]=1,t.size=Math.abs(a),t.start=0,t.end=t.size}function De(e,t,r,n){for(var o=0;o<e.length;o++){var i=[];Ae(e[o],i,r,n),t.push(i)}}function Oe(e){return e/360+.5}function Ne(e){var t=Math.sin(e*Math.PI/180),r=.5-.25*Math.log((1+t)/(1-t))/Math.PI;return r<0?0:r>1?1:r}function Re(e,t,r,n,o,i,a,s){if(n/=t,i>=(r/=t)&&a<n)return e;if(a<r||i>=n)return null;for(var l=[],u=0;u<e.length;u++){var h=e[u],c=h.geometry,f=h.type,p=0===o?h.minX:h.minY,d=0===o?h.maxX:h.maxY;if(p>=r&&d<n)l.push(h);else if(!(d<r||p>=n)){var g=[];if("Point"===f||"MultiPoint"===f)Fe(c,g,r,n,o);else if("LineString"===f)Be(c,g,r,n,o,!1,s.lineMetrics);else if("MultiLineString"===f)je(c,g,r,n,o,!1);else if("Polygon"===f)je(c,g,r,n,o,!0);else if("MultiPolygon"===f)for(var m=0;m<c.length;m++){var v=[];je(c[m],v,r,n,o,!0),v.length&&g.push(v)}if(g.length){if(s.lineMetrics&&"LineString"===f){for(m=0;m<g.length;m++)l.push(ze(h.id,f,g[m],h.tags));continue}"LineString"!==f&&"MultiLineString"!==f||(1===g.length?(f="LineString",g=g[0]):f="MultiLineString"),"Point"!==f&&"MultiPoint"!==f||(f=3===g.length?"Point":"MultiPoint"),l.push(ze(h.id,f,g,h.tags))}}}return l.length?l:null}function Fe(e,t,r,n,o){for(var i=0;i<e.length;i+=3){var a=e[i+o];a>=r&&a<=n&&(t.push(e[i]),t.push(e[i+1]),t.push(e[i+2]))}}function Be(e,t,r,n,o,i,a){for(var s,l,u=Ze(e),h=0===o?Je:Xe,c=e.start,f=0;f<e.length-3;f+=3){var p=e[f],d=e[f+1],g=e[f+2],m=e[f+3],v=e[f+4],y=0===o?p:d,x=0===o?m:v,w=!1;a&&(s=Math.sqrt(Math.pow(p-m,2)+Math.pow(d-v,2))),y<r?x>=r&&(l=h(u,p,d,m,v,r),a&&(u.start=c+s*l)):y>=n?x<n&&(l=h(u,p,d,m,v,n),a&&(u.start=c+s*l)):Ge(u,p,d,g),x<r&&y>=r&&(l=h(u,p,d,m,v,r),w=!0),x>n&&y<=n&&(l=h(u,p,d,m,v,n),w=!0),!i&&w&&(a&&(u.end=c+s*l),t.push(u),u=Ze(e)),a&&(c+=s)}var M=e.length-3;p=e[M],d=e[M+1],g=e[M+2],(y=0===o?p:d)>=r&&y<=n&&Ge(u,p,d,g),M=u.length-3,i&&M>=3&&(u[M]!==u[0]||u[M+1]!==u[1])&&Ge(u,u[0],u[1],u[2]),u.length&&t.push(u)}function Ze(e){var t=[];return t.size=e.size,t.start=e.start,t.end=e.end,t}function je(e,t,r,n,o,i){for(var a=0;a<e.length;a++)Be(e[a],t,r,n,o,i,!1)}function Ge(e,t,r,n){e.push(t),e.push(r),e.push(n)}function Je(e,t,r,n,o,i){var a=(i-t)/(n-t);return e.push(i),e.push(r+(o-r)*a),e.push(1),a}function Xe(e,t,r,n,o,i){var a=(i-r)/(o-r);return e.push(t+(n-t)*a),e.push(i),e.push(1),a}function Ve(e,t){for(var r=[],n=0;n<e.length;n++){var o,i=e[n],a=i.type;if("Point"===a||"MultiPoint"===a||"LineString"===a)o=We(i.geometry,t);else if("MultiLineString"===a||"Polygon"===a){o=[];for(var s=0;s<i.geometry.length;s++)o.push(We(i.geometry[s],t))}else if("MultiPolygon"===a)for(o=[],s=0;s<i.geometry.length;s++){for(var l=[],u=0;u<i.geometry[s].length;u++)l.push(We(i.geometry[s][u],t));o.push(l)}r.push(ze(i.id,a,o,i.tags))}return r}function We(e,t){var r=[];r.size=e.size,void 0!==e.start&&(r.start=e.start,r.end=e.end);for(var n=0;n<e.length;n+=3)r.push(e[n]+t,e[n+1],e[n+2]);return r}function Ye(e,t){if(e.transformed)return e;var r,n,o,i=1<<e.z,a=e.x,s=e.y;for(r=0;r<e.features.length;r++){var l=e.features[r],u=l.geometry,h=l.type;if(l.geometry=[],1===h)for(n=0;n<u.length;n+=2)l.geometry.push(qe(u[n],u[n+1],t,i,a,s));else for(n=0;n<u.length;n++){var c=[];for(o=0;o<u[n].length;o+=2)c.push(qe(u[n][o],u[n][o+1],t,i,a,s));l.geometry.push(c)}}return e.transformed=!0,e}function qe(e,t,r,n,o,i){return[Math.round(r*(e*n-o)),Math.round(r*(t*n-i))]}function Ke(e,t,r,n,o){for(var i=t===o.maxZoom?0:o.tolerance/((1<<t)*o.extent),a={features:[],numPoints:0,numSimplified:0,numFeatures:0,source:null,x:r,y:n,z:t,transformed:!1,minX:2,minY:1,maxX:-1,maxY:0},s=0;s<e.length;s++){a.numFeatures++,Ue(a,e[s],i,o);var l=e[s].minX,u=e[s].minY,h=e[s].maxX,c=e[s].maxY;l<a.minX&&(a.minX=l),u<a.minY&&(a.minY=u),h>a.maxX&&(a.maxX=h),c>a.maxY&&(a.maxY=c)}return a}function Ue(e,t,r,n){var o=t.geometry,i=t.type,a=[];if("Point"===i||"MultiPoint"===i)for(var s=0;s<o.length;s+=3)a.push(o[s]),a.push(o[s+1]),e.numPoints++,e.numSimplified++;else if("LineString"===i)He(a,o,e,r,!1,!1);else if("MultiLineString"===i||"Polygon"===i)for(s=0;s<o.length;s++)He(a,o[s],e,r,"Polygon"===i,0===s);else if("MultiPolygon"===i)for(var l=0;l<o.length;l++){var u=o[l];for(s=0;s<u.length;s++)He(a,u[s],e,r,!0,0===s)}if(a.length){var h=t.tags||null;if("LineString"===i&&n.lineMetrics){for(var c in h={},t.tags)h[c]=t.tags[c];h.mapbox_clip_start=o.start/o.size,h.mapbox_clip_end=o.end/o.size}var f={geometry:a,type:"Polygon"===i||"MultiPolygon"===i?3:"LineString"===i||"MultiLineString"===i?2:1,tags:h};null!==t.id&&(f.id=t.id),e.features.push(f)}}function He(e,t,r,n,o,i){var a=n*n;if(n>0&&t.size<(o?a:n))r.numPoints+=t.length/3;else{for(var s=[],l=0;l<t.length;l+=3)(0===n||t[l+2]>a)&&(r.numSimplified++,s.push(t[l]),s.push(t[l+1])),r.numPoints++;o&&function(e,t){for(var r=0,n=0,o=e.length,i=o-2;n<o;i=n,n+=2)r+=(e[n]-e[i])*(e[n+1]+e[i+1]);if(r>0===t)for(n=0,o=e.length;n<o/2;n+=2){var a=e[n],s=e[n+1];e[n]=e[o-2-n],e[n+1]=e[o-1-n],e[o-2-n]=a,e[o-1-n]=s}}(s,i),e.push(s)}}function Qe(e,t){var r=(t=this.options=function(e,t){for(var r in t)e[r]=t[r];return e}(Object.create(this.options),t)).debug;if(r&&console.time("preprocess data"),t.maxZoom<0||t.maxZoom>24)throw new Error("maxZoom should be in the 0-24 range");if(t.promoteId&&t.generateId)throw new Error("promoteId and generateId cannot be used together.");var n=function(e,t){var r=[];if("FeatureCollection"===e.type)for(var n=0;n<e.features.length;n++)Ee(r,e.features[n],t,n);else"Feature"===e.type?Ee(r,e,t):Ee(r,{geometry:e},t);return r}(e,t);this.tiles={},this.tileCoords=[],r&&(console.timeEnd("preprocess data"),console.log("index: maxZoom: %d, maxPoints: %d",t.indexMaxZoom,t.indexMaxPoints),console.time("generate tiles"),this.stats={},this.total=0),(n=function(e,t){var r=t.buffer/t.extent,n=e,o=Re(e,1,-1-r,r,0,-1,2,t),i=Re(e,1,1-r,2+r,0,-1,2,t);return(o||i)&&(n=Re(e,1,-r,1+r,0,-1,2,t)||[],o&&(n=Ve(o,1).concat(n)),i&&(n=n.concat(Ve(i,-1)))),n}(n,t)).length&&this.splitTile(n,0,0,0),r&&(n.length&&console.log("features: %d, points: %d",this.tiles[0].numFeatures,this.tiles[0].numPoints),console.timeEnd("generate tiles"),console.log("tiles generated:",this.total,JSON.stringify(this.stats)))}function $e(e,t,r){return 32*((1<<e)*r+t)+e}function et(e,t){var r=e.tileID.canonical;if(!this._geoJSONIndex)return t(null,null);var n=this._geoJSONIndex.getTile(r.z,r.x,r.y);if(!n)return t(null,null);var o=new q(n.features),i=$(o);0===i.byteOffset&&i.byteLength===i.buffer.byteLength||(i=new Uint8Array(i)),t(null,{vectorTile:o,rawData:i.buffer})}$.fromVectorTileJs=ee,$.fromGeojsonVt=te,$.GeoJSONWrapper=re,me.prototype={range:function(e,t,r,n){return function(e,t,r,n,o,i,a){for(var s,l,u=[0,e.length-1,0],h=[];u.length;){var c=u.pop(),f=u.pop(),p=u.pop();if(f-p<=a)for(var d=p;d<=f;d++)s=t[2*d],l=t[2*d+1],s>=r&&s<=o&&l>=n&&l<=i&&h.push(e[d]);else{var g=Math.floor((p+f)/2);s=t[2*g],l=t[2*g+1],s>=r&&s<=o&&l>=n&&l<=i&&h.push(e[g]);var m=(c+1)%2;(0===c?r<=s:n<=l)&&(u.push(p),u.push(g-1),u.push(m)),(0===c?o>=s:i>=l)&&(u.push(g+1),u.push(f),u.push(m))}}return h}(this.ids,this.coords,e,t,r,n,this.nodeSize)},within:function(e,t,r){return function(e,t,r,n,o,i){for(var a=[0,e.length-1,0],s=[],l=o*o;a.length;){var u=a.pop(),h=a.pop(),c=a.pop();if(h-c<=i)for(var f=c;f<=h;f++)de(t[2*f],t[2*f+1],r,n)<=l&&s.push(e[f]);else{var p=Math.floor((c+h)/2),d=t[2*p],g=t[2*p+1];de(d,g,r,n)<=l&&s.push(e[p]);var m=(u+1)%2;(0===u?r-o<=d:n-o<=g)&&(a.push(c),a.push(p-1),a.push(m)),(0===u?r+o>=d:n+o>=g)&&(a.push(p+1),a.push(h),a.push(m))}}return s}(this.ids,this.coords,e,t,r,this.nodeSize)}},xe.prototype={options:{minZoom:0,maxZoom:16,radius:40,extent:512,nodeSize:64,log:!1,reduce:null,initial:function(){return{}},map:function(e){return e}},load:function(e){var t=this.options.log;t&&console.time("total time");var r="prepare "+e.length+" points";t&&console.time(r),this.points=e;for(var n,o,i,a=[],s=0;s<e.length;s++)e[s].geometry&&a.push((n=e[s],o=s,void 0,{x:_e((i=n.geometry.coordinates)[0]),y:Pe(i[1]),zoom:1/0,index:o,parentId:-1}));this.trees[this.options.maxZoom+1]=ge(a,Ie,Te,this.options.nodeSize,Float32Array),t&&console.timeEnd(r);for(var l=this.options.maxZoom;l>=this.options.minZoom;l--){var u=+Date.now();a=this._cluster(a,l),this.trees[l]=ge(a,Ie,Te,this.options.nodeSize,Float32Array),t&&console.log("z%d: %d clusters in %dms",l,a.length,+Date.now()-u)}return t&&console.timeEnd("total time"),this},getClusters:function(e,t){var r=((e[0]+180)%360+360)%360-180,n=Math.max(-90,Math.min(90,e[1])),o=180===e[2]?180:((e[2]+180)%360+360)%360-180,i=Math.max(-90,Math.min(90,e[3]));if(e[2]-e[0]>=360)r=-180,o=180;else if(r>o){var a=this.getClusters([r,n,180,i],t),s=this.getClusters([-180,n,o,i],t);return a.concat(s)}for(var l=this.trees[this._limitZoom(t)],u=l.range(_e(r),Pe(i),_e(o),Pe(n)),h=[],c=0;c<u.length;c++){var f=l.points[u[c]];h.push(f.numPoints?Me(f):this.points[f.index])}return h},getChildren:function(e){var t=e>>5,r=e%32,n="No cluster with the specified id.",o=this.trees[r];if(!o)throw new Error(n);var i=o.points[t];if(!i)throw new Error(n);for(var a=this.options.radius/(this.options.extent*Math.pow(2,r-1)),s=o.within(i.x,i.y,a),l=[],u=0;u<s.length;u++){var h=o.points[s[u]];h.parentId===e&&l.push(h.numPoints?Me(h):this.points[h.index])}if(0===l.length)throw new Error(n);return l},getLeaves:function(e,t,r){t=t||10,r=r||0;var n=[];return this._appendLeaves(n,e,t,r,0),n},getTile:function(e,t,r){var n=this.trees[this._limitZoom(e)],o=Math.pow(2,e),i=this.options.extent,a=this.options.radius/i,s=(r-a)/o,l=(r+1+a)/o,u={features:[]};return this._addTileFeatures(n.range((t-a)/o,s,(t+1+a)/o,l),n.points,t,r,o,u),0===t&&this._addTileFeatures(n.range(1-a/o,s,1,l),n.points,o,r,o,u),t===o-1&&this._addTileFeatures(n.range(0,s,a/o,l),n.points,-1,r,o,u),u.features.length?u:null},getClusterExpansionZoom:function(e){for(var t=e%32-1;t<this.options.maxZoom;){var r=this.getChildren(e);if(t++,1!==r.length)break;e=r[0].properties.cluster_id}return t},_appendLeaves:function(e,t,r,n,o){for(var i=this.getChildren(t),a=0;a<i.length;a++){var s=i[a].properties;if(s&&s.cluster?o+s.point_count<=n?o+=s.point_count:o=this._appendLeaves(e,s.cluster_id,r,n,o):o<n?o++:e.push(i[a]),e.length===r)break}return o},_addTileFeatures:function(e,t,r,n,o,i){for(var a=0;a<e.length;a++){var s=t[e[a]],l={type:1,geometry:[[Math.round(this.options.extent*(s.x*o-r)),Math.round(this.options.extent*(s.y*o-n))]],tags:s.numPoints?Se(s):this.points[s.index].properties},u=s.numPoints?s.id:this.points[s.index].id;void 0!==u&&(l.id=u),i.features.push(l)}},_limitZoom:function(e){return Math.max(this.options.minZoom,Math.min(e,this.options.maxZoom+1))},_cluster:function(e,t){for(var r=[],n=this.options.radius/(this.options.extent*Math.pow(2,t)),o=0;o<e.length;o++){var i=e[o];if(!(i.zoom<=t)){i.zoom=t;var a=this.trees[t+1],s=a.within(i.x,i.y,n),l=i.numPoints||1,u=i.x*l,h=i.y*l,c=null;this.options.reduce&&(c=this.options.initial(),this._accumulate(c,i));for(var f=(o<<5)+(t+1),p=0;p<s.length;p++){var d=a.points[s[p]];if(!(d.zoom<=t)){d.zoom=t;var g=d.numPoints||1;u+=d.x*g,h+=d.y*g,l+=g,d.parentId=f,this.options.reduce&&this._accumulate(c,d)}}1===l?r.push(i):(i.parentId=f,r.push(we(u/l,h/l,f,l,c)))}}return r},_accumulate:function(e,t){var r=t.numPoints?t.properties:this.options.map(this.points[t.index].properties);this.options.reduce(e,r)}},Qe.prototype.options={maxZoom:14,indexMaxZoom:5,indexMaxPoints:1e5,tolerance:3,extent:4096,buffer:64,lineMetrics:!1,promoteId:null,generateId:!1,debug:0},Qe.prototype.splitTile=function(e,t,r,n,o,i,a){for(var s=[e,t,r,n],l=this.options,u=l.debug;s.length;){n=s.pop(),r=s.pop(),t=s.pop(),e=s.pop();var h=1<<t,c=$e(t,r,n),f=this.tiles[c];if(!f&&(u>1&&console.time("creation"),f=this.tiles[c]=Ke(e,t,r,n,l),this.tileCoords.push({z:t,x:r,y:n}),u)){u>1&&(console.log("tile z%d-%d-%d (features: %d, points: %d, simplified: %d)",t,r,n,f.numFeatures,f.numPoints,f.numSimplified),console.timeEnd("creation"));var p="z"+t;this.stats[p]=(this.stats[p]||0)+1,this.total++}if(f.source=e,o){if(t===l.maxZoom||t===o)continue;var d=1<<o-t;if(r!==Math.floor(i/d)||n!==Math.floor(a/d))continue}else if(t===l.indexMaxZoom||f.numPoints<=l.indexMaxPoints)continue;if(f.source=null,0!==e.length){u>1&&console.time("clipping");var g,m,v,y,x,w,M=.5*l.buffer/l.extent,S=.5-M,_=.5+M,P=1+M;g=m=v=y=null,x=Re(e,h,r-M,r+_,0,f.minX,f.maxX,l),w=Re(e,h,r+S,r+P,0,f.minX,f.maxX,l),e=null,x&&(g=Re(x,h,n-M,n+_,1,f.minY,f.maxY,l),m=Re(x,h,n+S,n+P,1,f.minY,f.maxY,l),x=null),w&&(v=Re(w,h,n-M,n+_,1,f.minY,f.maxY,l),y=Re(w,h,n+S,n+P,1,f.minY,f.maxY,l),w=null),u>1&&console.timeEnd("clipping"),s.push(g||[],t+1,2*r,2*n),s.push(m||[],t+1,2*r,2*n+1),s.push(v||[],t+1,2*r+1,2*n),s.push(y||[],t+1,2*r+1,2*n+1)}}},Qe.prototype.getTile=function(e,t,r){var n=this.options,o=n.extent,i=n.debug;if(e<0||e>24)return null;var a=1<<e,s=$e(e,t=(t%a+a)%a,r);if(this.tiles[s])return Ye(this.tiles[s],o);i>1&&console.log("drilling down to z%d-%d-%d",e,t,r);for(var l,u=e,h=t,c=r;!l&&u>0;)u--,h=Math.floor(h/2),c=Math.floor(c/2),l=this.tiles[$e(u,h,c)];return l&&l.source?(i>1&&console.log("found parent tile z%d-%d-%d",u,h,c),i>1&&console.time("drilling down"),this.splitTile(l.source,u,h,c,e,t,r),i>1&&console.timeEnd("drilling down"),this.tiles[s]?Ye(this.tiles[s],o):null):null};var tt=function(t){function r(e,r,n){t.call(this,e,r,et),n&&(this.loadGeoJSON=n)}return t&&(r.__proto__=t),r.prototype=Object.create(t&&t.prototype),r.prototype.constructor=r,r.prototype.loadData=function(e,t){this._pendingCallback&&this._pendingCallback(null,{abandoned:!0}),this._pendingCallback=t,this._pendingLoadDataParams=e,this._state&&"Idle"!==this._state?this._state="NeedsLoadData":(this._state="Coalescing",this._loadData())},r.prototype._loadData=function(){var e=this;if(this._pendingCallback&&this._pendingLoadDataParams){var t=this._pendingCallback,r=this._pendingLoadDataParams;delete this._pendingCallback,delete this._pendingLoadDataParams;var n=!!(r&&r.request&&r.request.collectResourceTiming)&&new L.Performance(r.request);this.loadGeoJSON(r,function(o,i){if(o||!i)return t(o);if("object"!=typeof i)return t(new Error("Input data is not a valid GeoJSON object."));G(i,!0);try{e._geoJSONIndex=r.cluster?(a=r.superclusterOptions,new xe(a)).load(i.features):function(e,t){return new Qe(e,t)}(i,r.geojsonVtOptions)}catch(o){return t(o)}e.loaded={};var a,s={};if(n){var l=n.finish();l&&(s.resourceTiming={},s.resourceTiming[r.source]=JSON.parse(JSON.stringify(l)))}t(null,s)})}},r.prototype.coalesce=function(){"Coalescing"===this._state?this._state="Idle":"NeedsLoadData"===this._state&&(this._state="Coalescing",this._loadData())},r.prototype.reloadTile=function(e,r){var n=this.loaded,o=e.uid;return n&&n[o]?t.prototype.reloadTile.call(this,e,r):this.loadTile(e,r)},r.prototype.loadGeoJSON=function(t,r){if(t.request)e.getJSON(t.request,r);else{if("string"!=typeof t.data)return r(new Error("Input data is not a valid GeoJSON object."));try{return r(null,JSON.parse(t.data))}catch(e){return r(new Error("Input data is not a valid GeoJSON object."))}}},r.prototype.removeSource=function(e,t){this._pendingCallback&&this._pendingCallback(null,{abandoned:!0}),t()},r.prototype.getClusterExpansionZoom=function(e,t){t(null,this._geoJSONIndex.getClusterExpansionZoom(e.clusterId))},r.prototype.getClusterChildren=function(e,t){t(null,this._geoJSONIndex.getChildren(e.clusterId))},r.prototype.getClusterLeaves=function(e,t){t(null,this._geoJSONIndex.getLeaves(e.clusterId,e.limit,e.offset))},r}(O),rt=function(t){var r=this;this.self=t,this.actor=new e.Actor(t,this),this.layerIndexes={},this.workerSourceTypes={vector:O,geojson:tt},this.workerSources={},this.demWorkerSources={},this.self.registerWorkerSource=function(e,t){if(r.workerSourceTypes[e])throw new Error('Worker source with name "'+e+'" already registered.');r.workerSourceTypes[e]=t},this.self.registerRTLTextPlugin=function(t){if(e.plugin.isLoaded())throw new Error("RTL text plugin already registered.");e.plugin.applyArabicShaping=t.applyArabicShaping,e.plugin.processBidirectionalText=t.processBidirectionalText,e.plugin.processStyledBidirectionalText=t.processStyledBidirectionalText}};return rt.prototype.setLayers=function(e,t,r){this.getLayerIndex(e).replace(t),r()},rt.prototype.updateLayers=function(e,t,r){this.getLayerIndex(e).update(t.layers,t.removedIds),r()},rt.prototype.loadTile=function(e,t,r){this.getWorkerSource(e,t.type,t.source).loadTile(t,r)},rt.prototype.loadDEMTile=function(e,t,r){this.getDEMWorkerSource(e,t.source).loadTile(t,r)},rt.prototype.reloadTile=function(e,t,r){this.getWorkerSource(e,t.type,t.source).reloadTile(t,r)},rt.prototype.abortTile=function(e,t,r){this.getWorkerSource(e,t.type,t.source).abortTile(t,r)},rt.prototype.removeTile=function(e,t,r){this.getWorkerSource(e,t.type,t.source).removeTile(t,r)},rt.prototype.removeDEMTile=function(e,t){this.getDEMWorkerSource(e,t.source).removeTile(t)},rt.prototype.removeSource=function(e,t,r){if(this.workerSources[e]&&this.workerSources[e][t.type]&&this.workerSources[e][t.type][t.source]){var n=this.workerSources[e][t.type][t.source];delete this.workerSources[e][t.type][t.source],void 0!==n.removeSource?n.removeSource(t,r):r()}},rt.prototype.loadWorkerSource=function(e,t,r){try{this.self.importScripts(t.url),r()}catch(e){r(e.toString())}},rt.prototype.loadRTLTextPlugin=function(t,r,n){try{e.plugin.isLoaded()||(this.self.importScripts(r),n(e.plugin.isLoaded()?null:new Error("RTL Text Plugin failed to import scripts from "+r)))}catch(e){n(e.toString())}},rt.prototype.getLayerIndex=function(e){var t=this.layerIndexes[e];return t||(t=this.layerIndexes[e]=new n),t},rt.prototype.getWorkerSource=function(e,t,r){var n=this;if(this.workerSources[e]||(this.workerSources[e]={}),this.workerSources[e][t]||(this.workerSources[e][t]={}),!this.workerSources[e][t][r]){var o={send:function(t,r,o){n.actor.send(t,r,o,e)}};this.workerSources[e][t][r]=new this.workerSourceTypes[t](o,this.getLayerIndex(e))}return this.workerSources[e][t][r]},rt.prototype.getDEMWorkerSource=function(e,t){return this.demWorkerSources[e]||(this.demWorkerSources[e]={}),this.demWorkerSources[e][t]||(this.demWorkerSources[e][t]=new N),this.demWorkerSources[e][t]},"undefined"!=typeof WorkerGlobalScope&&"undefined"!=typeof self&&self instanceof WorkerGlobalScope&&new rt(self),rt});
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoid29ya2VyLmpzIiwic291cmNlcyI6WyIuLi8uLi8uLi9zcmMvc3R5bGUtc3BlYy9ncm91cF9ieV9sYXlvdXQuanMiLCIuLi8uLi8uLi9zcmMvc3R5bGUvc3R5bGVfbGF5ZXJfaW5kZXguanMiLCIuLi8uLi8uLi9zcmMvc3ltYm9sL2NoZWNrX21heF9hbmdsZS5qcyIsIi4uLy4uLy4uL3NyYy9zeW1ib2wvZ2V0X2FuY2hvcnMuanMiLCIuLi8uLi8uLi9zcmMvc3ltYm9sL2NvbGxpc2lvbl9mZWF0dXJlLmpzIiwiLi4vLi4vLi4vLi4vLi4vLi4vbm9kZV9tb2R1bGVzL3RpbnlxdWV1ZS9pbmRleC5qcyIsIi4uLy4uLy4uL3NyYy91dGlsL2ZpbmRfcG9sZV9vZl9pbmFjY2Vzc2liaWxpdHkuanMiLCIuLi8uLi8uLi8uLi8uLi8uLi9ub2RlX21vZHVsZXMvbXVybXVyaGFzaC1qcy9tdXJtdXJoYXNoM19nYy5qcyIsIi4uLy4uLy4uLy4uLy4uLy4uL25vZGVfbW9kdWxlcy9tdXJtdXJoYXNoLWpzL211cm11cmhhc2gyX2djLmpzIiwiLi4vLi4vLi4vLi4vLi4vLi4vbm9kZV9tb2R1bGVzL211cm11cmhhc2gtanMvaW5kZXguanMiLCIuLi8uLi8uLi9zcmMvc3ltYm9sL3N5bWJvbF9sYXlvdXQuanMiLCIuLi8uLi8uLi9zcmMvc3ltYm9sL3F1YWRzLmpzIiwiLi4vLi4vLi4vc3JjL3N5bWJvbC9jbGlwX2xpbmUuanMiLCIuLi8uLi8uLi9zcmMvcmVuZGVyL2dseXBoX2F0bGFzLmpzIiwiLi4vLi4vLi4vc3JjL3NvdXJjZS93b3JrZXJfdGlsZS5qcyIsIi4uLy4uLy4uL3NyYy91dGlsL3BlcmZvcm1hbmNlLmpzIiwiLi4vLi4vLi4vc3JjL3NvdXJjZS92ZWN0b3JfdGlsZV93b3JrZXJfc291cmNlLmpzIiwiLi4vLi4vLi4vc3JjL3NvdXJjZS9yYXN0ZXJfZGVtX3RpbGVfd29ya2VyX3NvdXJjZS5qcyIsIi4uLy4uLy4uLy4uLy4uLy4uL25vZGVfbW9kdWxlcy93Z3M4NC9pbmRleC5qcyIsIi4uLy4uLy4uLy4uLy4uLy4uL25vZGVfbW9kdWxlcy9AbWFwYm94L2dlb2pzb24tYXJlYS9pbmRleC5qcyIsIi4uLy4uLy4uLy4uLy4uLy4uL25vZGVfbW9kdWxlcy9nZW9qc29uLXJld2luZC9pbmRleC5qcyIsIi4uLy4uLy4uL3NyYy9zb3VyY2UvZ2VvanNvbl93cmFwcGVyLmpzIiwiLi4vLi4vLi4vLi4vLi4vLi4vbm9kZV9tb2R1bGVzL3Z0LXBiZi9saWIvZ2VvanNvbl93cmFwcGVyLmpzIiwiLi4vLi4vLi4vLi4vLi4vLi4vbm9kZV9tb2R1bGVzL3Z0LXBiZi9pbmRleC5qcyIsIi4uLy4uLy4uLy4uLy4uLy4uL25vZGVfbW9kdWxlcy9rZGJ1c2gvc3JjL3NvcnQuanMiLCIuLi8uLi8uLi8uLi8uLi8uLi9ub2RlX21vZHVsZXMva2RidXNoL3NyYy93aXRoaW4uanMiLCIuLi8uLi8uLi8uLi8uLi8uLi9ub2RlX21vZHVsZXMva2RidXNoL3NyYy9pbmRleC5qcyIsIi4uLy4uLy4uLy4uLy4uLy4uL25vZGVfbW9kdWxlcy9zdXBlcmNsdXN0ZXIvaW5kZXguanMiLCIuLi8uLi8uLi8uLi8uLi8uLi9ub2RlX21vZHVsZXMvZ2VvanNvbi12dC9zcmMvc2ltcGxpZnkuanMiLCIuLi8uLi8uLi8uLi8uLi8uLi9ub2RlX21vZHVsZXMvZ2VvanNvbi12dC9zcmMvZmVhdHVyZS5qcyIsIi4uLy4uLy4uLy4uLy4uLy4uL25vZGVfbW9kdWxlcy9nZW9qc29uLXZ0L3NyYy9jb252ZXJ0LmpzIiwiLi4vLi4vLi4vLi4vLi4vLi4vbm9kZV9tb2R1bGVzL2dlb2pzb24tdnQvc3JjL2NsaXAuanMiLCIuLi8uLi8uLi8uLi8uLi8uLi9ub2RlX21vZHVsZXMvZ2VvanNvbi12dC9zcmMvd3JhcC5qcyIsIi4uLy4uLy4uLy4uLy4uLy4uL25vZGVfbW9kdWxlcy9nZW9qc29uLXZ0L3NyYy90cmFuc2Zvcm0uanMiLCIuLi8uLi8uLi8uLi8uLi8uLi9ub2RlX21vZHVsZXMvZ2VvanNvbi12dC9zcmMvdGlsZS5qcyIsIi4uLy4uLy4uLy4uLy4uLy4uL25vZGVfbW9kdWxlcy9nZW9qc29uLXZ0L3NyYy9pbmRleC5qcyIsIi4uLy4uLy4uL3NyYy9zb3VyY2UvZ2VvanNvbl93b3JrZXJfc291cmNlLmpzIiwiLi4vLi4vLi4vLi4vLi4vLi4vbm9kZV9tb2R1bGVzL2tkYnVzaC9zcmMvcmFuZ2UuanMiLCIuLi8uLi8uLi9zcmMvc291cmNlL3dvcmtlci5qcyJdLCJzb3VyY2VzQ29udGVudCI6WyJcbmltcG9ydCByZWZQcm9wZXJ0aWVzIGZyb20gJy4vdXRpbC9yZWZfcHJvcGVydGllcyc7XG5cbmZ1bmN0aW9uIHN0cmluZ2lmeShvYmopIHtcbiAgICBjb25zdCB0eXBlID0gdHlwZW9mIG9iajtcbiAgICBpZiAodHlwZSA9PT0gJ251bWJlcicgfHwgdHlwZSA9PT0gJ2Jvb2xlYW4nIHx8IHR5cGUgPT09ICdzdHJpbmcnIHx8IG9iaiA9PT0gdW5kZWZpbmVkIHx8IG9iaiA9PT0gbnVsbClcbiAgICAgICAgcmV0dXJuIEpTT04uc3RyaW5naWZ5KG9iaik7XG5cbiAgICBpZiAoQXJyYXkuaXNBcnJheShvYmopKSB7XG4gICAgICAgIGxldCBzdHIgPSAnWyc7XG4gICAgICAgIGZvciAoY29uc3QgdmFsIG9mIG9iaikge1xuICAgICAgICAgICAgc3RyICs9IGAke3N0cmluZ2lmeSh2YWwpfSxgO1xuICAgICAgICB9XG4gICAgICAgIHJldHVybiBgJHtzdHJ9XWA7XG4gICAgfVxuXG4gICAgY29uc3Qga2V5cyA9IE9iamVjdC5rZXlzKG9iaikuc29ydCgpO1xuXG4gICAgbGV0IHN0ciA9ICd7JztcbiAgICBmb3IgKGxldCBpID0gMDsgaSA8IGtleXMubGVuZ3RoOyBpKyspIHtcbiAgICAgICAgc3RyICs9IGAke0pTT04uc3RyaW5naWZ5KGtleXNbaV0pfToke3N0cmluZ2lmeShvYmpba2V5c1tpXV0pfSxgO1xuICAgIH1cbiAgICByZXR1cm4gYCR7c3RyfX1gO1xufVxuXG5mdW5jdGlvbiBnZXRLZXkobGF5ZXIpIHtcbiAgICBsZXQga2V5ID0gJyc7XG4gICAgZm9yIChjb25zdCBrIG9mIHJlZlByb3BlcnRpZXMpIHtcbiAgICAgICAga2V5ICs9IGAvJHtzdHJpbmdpZnkobGF5ZXJba10pfWA7XG4gICAgfVxuICAgIHJldHVybiBrZXk7XG59XG5cbmV4cG9ydCBkZWZhdWx0IGdyb3VwQnlMYXlvdXQ7XG5cbi8qKlxuICogR2l2ZW4gYW4gYXJyYXkgb2YgbGF5ZXJzLCByZXR1cm4gYW4gYXJyYXkgb2YgYXJyYXlzIG9mIGxheWVycyB3aGVyZSBhbGxcbiAqIGxheWVycyBpbiBlYWNoIGdyb3VwIGhhdmUgaWRlbnRpY2FsIGxheW91dC1hZmZlY3RpbmcgcHJvcGVydGllcy4gVGhlc2VcbiAqIGFyZSB0aGUgcHJvcGVydGllcyB0aGF0IHdlcmUgZm9ybWVybHkgdXNlZCBieSBleHBsaWNpdCBgcmVmYCBtZWNoYW5pc21cbiAqIGZvciBsYXllcnM6ICd0eXBlJywgJ3NvdXJjZScsICdzb3VyY2UtbGF5ZXInLCAnbWluem9vbScsICdtYXh6b29tJyxcbiAqICdmaWx0ZXInLCBhbmQgJ2xheW91dCcuXG4gKlxuICogVGhlIGlucHV0IGlzIG5vdCBtb2RpZmllZC4gVGhlIG91dHB1dCBsYXllcnMgYXJlIHJlZmVyZW5jZXMgdG8gdGhlXG4gKiBpbnB1dCBsYXllcnMuXG4gKlxuICogQHByaXZhdGVcbiAqIEBwYXJhbSB7QXJyYXk8TGF5ZXI+fSBsYXllcnNcbiAqIEByZXR1cm5zIHtBcnJheTxBcnJheTxMYXllcj4+fVxuICovXG5mdW5jdGlvbiBncm91cEJ5TGF5b3V0KGxheWVycykge1xuICAgIGNvbnN0IGdyb3VwcyA9IHt9O1xuXG4gICAgZm9yIChsZXQgaSA9IDA7IGkgPCBsYXllcnMubGVuZ3RoOyBpKyspIHtcbiAgICAgICAgY29uc3QgayA9IGdldEtleShsYXllcnNbaV0pO1xuICAgICAgICBsZXQgZ3JvdXAgPSBncm91cHNba107XG4gICAgICAgIGlmICghZ3JvdXApIHtcbiAgICAgICAgICAgIGdyb3VwID0gZ3JvdXBzW2tdID0gW107XG4gICAgICAgIH1cbiAgICAgICAgZ3JvdXAucHVzaChsYXllcnNbaV0pO1xuICAgIH1cblxuICAgIGNvbnN0IHJlc3VsdCA9IFtdO1xuXG4gICAgZm9yIChjb25zdCBrIGluIGdyb3Vwcykge1xuICAgICAgICByZXN1bHQucHVzaChncm91cHNba10pO1xuICAgIH1cblxuICAgIHJldHVybiByZXN1bHQ7XG59XG4iLCIvLyBAZmxvd1xuXG5pbXBvcnQgU3R5bGVMYXllciBmcm9tICcuL3N0eWxlX2xheWVyJztcbmltcG9ydCBjcmVhdGVTdHlsZUxheWVyIGZyb20gJy4vY3JlYXRlX3N0eWxlX2xheWVyJztcblxuaW1wb3J0IHsgdmFsdWVzIH0gZnJvbSAnLi4vdXRpbC91dGlsJztcbmltcG9ydCBmZWF0dXJlRmlsdGVyIGZyb20gJy4uL3N0eWxlLXNwZWMvZmVhdHVyZV9maWx0ZXInO1xuaW1wb3J0IGdyb3VwQnlMYXlvdXQgZnJvbSAnLi4vc3R5bGUtc3BlYy9ncm91cF9ieV9sYXlvdXQnO1xuXG5pbXBvcnQgdHlwZSB7VHlwZWRTdHlsZUxheWVyfSBmcm9tICcuL3N0eWxlX2xheWVyL3R5cGVkX3N0eWxlX2xheWVyJztcbmltcG9ydCB0eXBlIHtMYXllclNwZWNpZmljYXRpb259IGZyb20gJy4uL3N0eWxlLXNwZWMvdHlwZXMnO1xuXG5leHBvcnQgdHlwZSBMYXllckNvbmZpZ3MgPSB7IFtzdHJpbmddOiBMYXllclNwZWNpZmljYXRpb24gfTtcbmV4cG9ydCB0eXBlIEZhbWlseTxMYXllcjogVHlwZWRTdHlsZUxheWVyPiA9IEFycmF5PExheWVyPjtcblxuY2xhc3MgU3R5bGVMYXllckluZGV4IHtcbiAgICBmYW1pbGllc0J5U291cmNlOiB7IFtzb3VyY2U6IHN0cmluZ106IHsgW3NvdXJjZUxheWVyOiBzdHJpbmddOiBBcnJheTxGYW1pbHk8Kj4+IH0gfTtcblxuICAgIF9sYXllckNvbmZpZ3M6IExheWVyQ29uZmlncztcbiAgICBfbGF5ZXJzOiB7IFtzdHJpbmddOiBTdHlsZUxheWVyIH07XG5cbiAgICBjb25zdHJ1Y3RvcihsYXllckNvbmZpZ3M6ID9BcnJheTxMYXllclNwZWNpZmljYXRpb24+KSB7XG4gICAgICAgIGlmIChsYXllckNvbmZpZ3MpIHtcbiAgICAgICAgICAgIHRoaXMucmVwbGFjZShsYXllckNvbmZpZ3MpO1xuICAgICAgICB9XG4gICAgfVxuXG4gICAgcmVwbGFjZShsYXllckNvbmZpZ3M6IEFycmF5PExheWVyU3BlY2lmaWNhdGlvbj4pIHtcbiAgICAgICAgdGhpcy5fbGF5ZXJDb25maWdzID0ge307XG4gICAgICAgIHRoaXMuX2xheWVycyA9IHt9O1xuICAgICAgICB0aGlzLnVwZGF0ZShsYXllckNvbmZpZ3MsIFtdKTtcbiAgICB9XG5cbiAgICB1cGRhdGUobGF5ZXJDb25maWdzOiBBcnJheTxMYXllclNwZWNpZmljYXRpb24+LCByZW1vdmVkSWRzOiBBcnJheTxzdHJpbmc+KSB7XG4gICAgICAgIGZvciAoY29uc3QgbGF5ZXJDb25maWcgb2YgbGF5ZXJDb25maWdzKSB7XG4gICAgICAgICAgICB0aGlzLl9sYXllckNvbmZpZ3NbbGF5ZXJDb25maWcuaWRdID0gbGF5ZXJDb25maWc7XG5cbiAgICAgICAgICAgIGNvbnN0IGxheWVyID0gdGhpcy5fbGF5ZXJzW2xheWVyQ29uZmlnLmlkXSA9IGNyZWF0ZVN0eWxlTGF5ZXIobGF5ZXJDb25maWcpO1xuICAgICAgICAgICAgbGF5ZXIuX2ZlYXR1cmVGaWx0ZXIgPSBmZWF0dXJlRmlsdGVyKGxheWVyLmZpbHRlcik7XG4gICAgICAgIH1cbiAgICAgICAgZm9yIChjb25zdCBpZCBvZiByZW1vdmVkSWRzKSB7XG4gICAgICAgICAgICBkZWxldGUgdGhpcy5fbGF5ZXJDb25maWdzW2lkXTtcbiAgICAgICAgICAgIGRlbGV0ZSB0aGlzLl9sYXllcnNbaWRdO1xuICAgICAgICB9XG5cbiAgICAgICAgdGhpcy5mYW1pbGllc0J5U291cmNlID0ge307XG5cbiAgICAgICAgY29uc3QgZ3JvdXBzID0gZ3JvdXBCeUxheW91dCh2YWx1ZXModGhpcy5fbGF5ZXJDb25maWdzKSk7XG5cbiAgICAgICAgZm9yIChjb25zdCBsYXllckNvbmZpZ3Mgb2YgZ3JvdXBzKSB7XG4gICAgICAgICAgICBjb25zdCBsYXllcnMgPSBsYXllckNvbmZpZ3MubWFwKChsYXllckNvbmZpZykgPT4gdGhpcy5fbGF5ZXJzW2xheWVyQ29uZmlnLmlkXSk7XG5cbiAgICAgICAgICAgIGNvbnN0IGxheWVyID0gbGF5ZXJzWzBdO1xuICAgICAgICAgICAgaWYgKGxheWVyLnZpc2liaWxpdHkgPT09ICdub25lJykge1xuICAgICAgICAgICAgICAgIGNvbnRpbnVlO1xuICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICBjb25zdCBzb3VyY2VJZCA9IGxheWVyLnNvdXJjZSB8fCAnJztcbiAgICAgICAgICAgIGxldCBzb3VyY2VHcm91cCA9IHRoaXMuZmFtaWxpZXNCeVNvdXJjZVtzb3VyY2VJZF07XG4gICAgICAgICAgICBpZiAoIXNvdXJjZUdyb3VwKSB7XG4gICAgICAgICAgICAgICAgc291cmNlR3JvdXAgPSB0aGlzLmZhbWlsaWVzQnlTb3VyY2Vbc291cmNlSWRdID0ge307XG4gICAgICAgICAgICB9XG5cbiAgICAgICAgICAgIGNvbnN0IHNvdXJjZUxheWVySWQgPSBsYXllci5zb3VyY2VMYXllciB8fCAnX2dlb2pzb25UaWxlTGF5ZXInO1xuICAgICAgICAgICAgbGV0IHNvdXJjZUxheWVyRmFtaWxpZXMgPSBzb3VyY2VHcm91cFtzb3VyY2VMYXllcklkXTtcbiAgICAgICAgICAgIGlmICghc291cmNlTGF5ZXJGYW1pbGllcykge1xuICAgICAgICAgICAgICAgIHNvdXJjZUxheWVyRmFtaWxpZXMgPSBzb3VyY2VHcm91cFtzb3VyY2VMYXllcklkXSA9IFtdO1xuICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICBzb3VyY2VMYXllckZhbWlsaWVzLnB1c2gobGF5ZXJzKTtcbiAgICAgICAgfVxuICAgIH1cbn1cblxuZXhwb3J0IGRlZmF1bHQgU3R5bGVMYXllckluZGV4O1xuIiwiLy8gQGZsb3dcblxuZXhwb3J0IGRlZmF1bHQgY2hlY2tNYXhBbmdsZTtcblxuaW1wb3J0IHR5cGUgUG9pbnQgZnJvbSAnQG1hcGJveC9wb2ludC1nZW9tZXRyeSc7XG5pbXBvcnQgdHlwZSBBbmNob3IgZnJvbSAnLi9hbmNob3InO1xuXG4vKipcbiAqIExhYmVscyBwbGFjZWQgYXJvdW5kIHJlYWxseSBzaGFycCBhbmdsZXMgYXJlbid0IHJlYWRhYmxlLiBDaGVjayBpZiBhbnlcbiAqIHBhcnQgb2YgdGhlIHBvdGVudGlhbCBsYWJlbCBoYXMgYSBjb21iaW5lZCBhbmdsZSB0aGF0IGlzIHRvbyBiaWcuXG4gKlxuICogQHBhcmFtIGxpbmVcbiAqIEBwYXJhbSBhbmNob3IgVGhlIHBvaW50IG9uIHRoZSBsaW5lIGFyb3VuZCB3aGljaCB0aGUgbGFiZWwgaXMgYW5jaG9yZWQuXG4gKiBAcGFyYW0gbGFiZWxMZW5ndGggVGhlIGxlbmd0aCBvZiB0aGUgbGFiZWwgaW4gZ2VvbWV0cnkgdW5pdHMuXG4gKiBAcGFyYW0gd2luZG93U2l6ZSBUaGUgY2hlY2sgZmFpbHMgaWYgdGhlIGNvbWJpbmVkIGFuZ2xlcyB3aXRoaW4gYSBwYXJ0IG9mIHRoZSBsaW5lIHRoYXQgaXMgYHdpbmRvd1NpemVgIGxvbmcgaXMgdG9vIGJpZy5cbiAqIEBwYXJhbSBtYXhBbmdsZSBUaGUgbWF4aW11bSBjb21iaW5lZCBhbmdsZSB0aGF0IGFueSB3aW5kb3cgYWxvbmcgdGhlIGxhYmVsIGlzIGFsbG93ZWQgdG8gaGF2ZS5cbiAqXG4gKiBAcmV0dXJucyB7Ym9vbGVhbn0gd2hldGhlciB0aGUgbGFiZWwgc2hvdWxkIGJlIHBsYWNlZFxuICogQHByaXZhdGVcbiAqL1xuZnVuY3Rpb24gY2hlY2tNYXhBbmdsZShsaW5lOiBBcnJheTxQb2ludD4sIGFuY2hvcjogQW5jaG9yLCBsYWJlbExlbmd0aDogbnVtYmVyLCB3aW5kb3dTaXplOiBudW1iZXIsIG1heEFuZ2xlOiBudW1iZXIpIHtcblxuICAgIC8vIGhvcml6b250YWwgbGFiZWxzIGFsd2F5cyBwYXNzXG4gICAgaWYgKGFuY2hvci5zZWdtZW50ID09PSB1bmRlZmluZWQpIHJldHVybiB0cnVlO1xuXG4gICAgbGV0IHAgPSBhbmNob3I7XG4gICAgbGV0IGluZGV4ID0gYW5jaG9yLnNlZ21lbnQgKyAxO1xuICAgIGxldCBhbmNob3JEaXN0YW5jZSA9IDA7XG5cbiAgICAvLyBtb3ZlIGJhY2t3YXJkcyBhbG9uZyB0aGUgbGluZSB0byB0aGUgZmlyc3Qgc2VnbWVudCB0aGUgbGFiZWwgYXBwZWFycyBvblxuICAgIHdoaWxlIChhbmNob3JEaXN0YW5jZSA+IC1sYWJlbExlbmd0aCAvIDIpIHtcbiAgICAgICAgaW5kZXgtLTtcblxuICAgICAgICAvLyB0aGVyZSBpc24ndCBlbm91Z2ggcm9vbSBmb3IgdGhlIGxhYmVsIGFmdGVyIHRoZSBiZWdpbm5pbmcgb2YgdGhlIGxpbmVcbiAgICAgICAgaWYgKGluZGV4IDwgMCkgcmV0dXJuIGZhbHNlO1xuXG4gICAgICAgIGFuY2hvckRpc3RhbmNlIC09IGxpbmVbaW5kZXhdLmRpc3QocCk7XG4gICAgICAgIHAgPSBsaW5lW2luZGV4XTtcbiAgICB9XG5cbiAgICBhbmNob3JEaXN0YW5jZSArPSBsaW5lW2luZGV4XS5kaXN0KGxpbmVbaW5kZXggKyAxXSk7XG4gICAgaW5kZXgrKztcblxuICAgIC8vIHN0b3JlIHJlY2VudCBjb3JuZXJzIGFuZCB0aGVpciB0b3RhbCBhbmdsZSBkaWZmZXJlbmNlXG4gICAgY29uc3QgcmVjZW50Q29ybmVycyA9IFtdO1xuICAgIGxldCByZWNlbnRBbmdsZURlbHRhID0gMDtcblxuICAgIC8vIG1vdmUgZm9yd2FyZHMgYnkgdGhlIGxlbmd0aCBvZiB0aGUgbGFiZWwgYW5kIGNoZWNrIGFuZ2xlcyBhbG9uZyB0aGUgd2F5XG4gICAgd2hpbGUgKGFuY2hvckRpc3RhbmNlIDwgbGFiZWxMZW5ndGggLyAyKSB7XG4gICAgICAgIGNvbnN0IHByZXYgPSBsaW5lW2luZGV4IC0gMV07XG4gICAgICAgIGNvbnN0IGN1cnJlbnQgPSBsaW5lW2luZGV4XTtcbiAgICAgICAgY29uc3QgbmV4dCA9IGxpbmVbaW5kZXggKyAxXTtcblxuICAgICAgICAvLyB0aGVyZSBpc24ndCBlbm91Z2ggcm9vbSBmb3IgdGhlIGxhYmVsIGJlZm9yZSB0aGUgZW5kIG9mIHRoZSBsaW5lXG4gICAgICAgIGlmICghbmV4dCkgcmV0dXJuIGZhbHNlO1xuXG4gICAgICAgIGxldCBhbmdsZURlbHRhID0gcHJldi5hbmdsZVRvKGN1cnJlbnQpIC0gY3VycmVudC5hbmdsZVRvKG5leHQpO1xuICAgICAgICAvLyByZXN0cmljdCBhbmdsZSB0byAtcGkuLnBpIHJhbmdlXG4gICAgICAgIGFuZ2xlRGVsdGEgPSBNYXRoLmFicygoKGFuZ2xlRGVsdGEgKyAzICogTWF0aC5QSSkgJSAoTWF0aC5QSSAqIDIpKSAtIE1hdGguUEkpO1xuXG4gICAgICAgIHJlY2VudENvcm5lcnMucHVzaCh7XG4gICAgICAgICAgICBkaXN0YW5jZTogYW5jaG9yRGlzdGFuY2UsXG4gICAgICAgICAgICBhbmdsZURlbHRhOiBhbmdsZURlbHRhXG4gICAgICAgIH0pO1xuICAgICAgICByZWNlbnRBbmdsZURlbHRhICs9IGFuZ2xlRGVsdGE7XG5cbiAgICAgICAgLy8gcmVtb3ZlIGNvcm5lcnMgdGhhdCBhcmUgZmFyIGVub3VnaCBhd2F5IGZyb20gdGhlIGxpc3Qgb2YgcmVjZW50IGFuY2hvcnNcbiAgICAgICAgd2hpbGUgKGFuY2hvckRpc3RhbmNlIC0gcmVjZW50Q29ybmVyc1swXS5kaXN0YW5jZSA+IHdpbmRvd1NpemUpIHtcbiAgICAgICAgICAgIHJlY2VudEFuZ2xlRGVsdGEgLT0gcmVjZW50Q29ybmVycy5zaGlmdCgpLmFuZ2xlRGVsdGE7XG4gICAgICAgIH1cblxuICAgICAgICAvLyB0aGUgc3VtIG9mIGFuZ2xlcyB3aXRoaW4gdGhlIHdpbmRvdyBhcmVhIGV4Y2VlZHMgdGhlIG1heGltdW0gYWxsb3dlZCB2YWx1ZS4gY2hlY2sgZmFpbHMuXG4gICAgICAgIGlmIChyZWNlbnRBbmdsZURlbHRhID4gbWF4QW5nbGUpIHJldHVybiBmYWxzZTtcblxuICAgICAgICBpbmRleCsrO1xuICAgICAgICBhbmNob3JEaXN0YW5jZSArPSBjdXJyZW50LmRpc3QobmV4dCk7XG4gICAgfVxuXG4gICAgLy8gbm8gcGFydCBvZiB0aGUgbGluZSBoYWQgYW4gYW5nbGUgZ3JlYXRlciB0aGFuIHRoZSBtYXhpbXVtIGFsbG93ZWQuIGNoZWNrIHBhc3Nlcy5cbiAgICByZXR1cm4gdHJ1ZTtcbn1cbiIsIi8vIEBmbG93XG5cbmltcG9ydCB7IG51bWJlciBhcyBpbnRlcnBvbGF0ZSB9IGZyb20gJy4uL3N0eWxlLXNwZWMvdXRpbC9pbnRlcnBvbGF0ZSc7XG5cbmltcG9ydCBBbmNob3IgZnJvbSAnLi4vc3ltYm9sL2FuY2hvcic7XG5pbXBvcnQgY2hlY2tNYXhBbmdsZSBmcm9tICcuL2NoZWNrX21heF9hbmdsZSc7XG5cbmltcG9ydCB0eXBlIFBvaW50IGZyb20gJ0BtYXBib3gvcG9pbnQtZ2VvbWV0cnknO1xuaW1wb3J0IHR5cGUge1NoYXBpbmcsIFBvc2l0aW9uZWRJY29ufSBmcm9tICcuL3NoYXBpbmcnO1xuXG5leHBvcnQgeyBnZXRBbmNob3JzLCBnZXRDZW50ZXJBbmNob3IgfTtcblxuZnVuY3Rpb24gZ2V0TGluZUxlbmd0aChsaW5lOiBBcnJheTxQb2ludD4pOiBudW1iZXIge1xuICAgIGxldCBsaW5lTGVuZ3RoID0gMDtcbiAgICBmb3IgKGxldCBrID0gMDsgayA8IGxpbmUubGVuZ3RoIC0gMTsgaysrKSB7XG4gICAgICAgIGxpbmVMZW5ndGggKz0gbGluZVtrXS5kaXN0KGxpbmVbayArIDFdKTtcbiAgICB9XG4gICAgcmV0dXJuIGxpbmVMZW5ndGg7XG59XG5cbmZ1bmN0aW9uIGdldEFuZ2xlV2luZG93U2l6ZShzaGFwZWRUZXh0OiA/U2hhcGluZyxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBnbHlwaFNpemU6IG51bWJlcixcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBib3hTY2FsZTogbnVtYmVyKTogbnVtYmVyIHtcbiAgICByZXR1cm4gc2hhcGVkVGV4dCA/XG4gICAgICAgIDMgLyA1ICogZ2x5cGhTaXplICogYm94U2NhbGUgOlxuICAgICAgICAwO1xufVxuXG5mdW5jdGlvbiBnZXRTaGFwZWRMYWJlbExlbmd0aChzaGFwZWRUZXh0OiA/U2hhcGluZywgc2hhcGVkSWNvbjogP1Bvc2l0aW9uZWRJY29uKTogbnVtYmVyIHtcbiAgICByZXR1cm4gTWF0aC5tYXgoXG4gICAgICAgIHNoYXBlZFRleHQgPyBzaGFwZWRUZXh0LnJpZ2h0IC0gc2hhcGVkVGV4dC5sZWZ0IDogMCxcbiAgICAgICAgc2hhcGVkSWNvbiA/IHNoYXBlZEljb24ucmlnaHQgLSBzaGFwZWRJY29uLmxlZnQgOiAwKTtcbn1cblxuZnVuY3Rpb24gZ2V0Q2VudGVyQW5jaG9yKGxpbmU6IEFycmF5PFBvaW50PixcbiAgICAgICAgICAgICAgICAgICAgICAgICBtYXhBbmdsZTogbnVtYmVyLFxuICAgICAgICAgICAgICAgICAgICAgICAgIHNoYXBlZFRleHQ6ID9TaGFwaW5nLFxuICAgICAgICAgICAgICAgICAgICAgICAgIHNoYXBlZEljb246ID9Qb3NpdGlvbmVkSWNvbixcbiAgICAgICAgICAgICAgICAgICAgICAgICBnbHlwaFNpemU6IG51bWJlcixcbiAgICAgICAgICAgICAgICAgICAgICAgICBib3hTY2FsZTogbnVtYmVyKSB7XG4gICAgY29uc3QgYW5nbGVXaW5kb3dTaXplID0gZ2V0QW5nbGVXaW5kb3dTaXplKHNoYXBlZFRleHQsIGdseXBoU2l6ZSwgYm94U2NhbGUpO1xuICAgIGNvbnN0IGxhYmVsTGVuZ3RoID0gZ2V0U2hhcGVkTGFiZWxMZW5ndGgoc2hhcGVkVGV4dCwgc2hhcGVkSWNvbikgKiBib3hTY2FsZTtcblxuICAgIGxldCBwcmV2RGlzdGFuY2UgPSAwO1xuICAgIGNvbnN0IGNlbnRlckRpc3RhbmNlID0gZ2V0TGluZUxlbmd0aChsaW5lKSAvIDI7XG5cbiAgICBmb3IgKGxldCBpID0gMDsgaSA8IGxpbmUubGVuZ3RoIC0gMTsgaSsrKSB7XG5cbiAgICAgICAgY29uc3QgYSA9IGxpbmVbaV0sXG4gICAgICAgICAgICBiID0gbGluZVtpICsgMV07XG5cbiAgICAgICAgY29uc3Qgc2VnbWVudERpc3RhbmNlID0gYS5kaXN0KGIpO1xuXG4gICAgICAgIGlmIChwcmV2RGlzdGFuY2UgKyBzZWdtZW50RGlzdGFuY2UgPiBjZW50ZXJEaXN0YW5jZSkge1xuICAgICAgICAgICAgLy8gVGhlIGNlbnRlciBpcyBvbiB0aGlzIHNlZ21lbnRcbiAgICAgICAgICAgIGNvbnN0IHQgPSAoY2VudGVyRGlzdGFuY2UgLSBwcmV2RGlzdGFuY2UpIC8gc2VnbWVudERpc3RhbmNlLFxuICAgICAgICAgICAgICAgIHggPSBpbnRlcnBvbGF0ZShhLngsIGIueCwgdCksXG4gICAgICAgICAgICAgICAgeSA9IGludGVycG9sYXRlKGEueSwgYi55LCB0KTtcblxuICAgICAgICAgICAgY29uc3QgYW5jaG9yID0gbmV3IEFuY2hvcih4LCB5LCBiLmFuZ2xlVG8oYSksIGkpO1xuICAgICAgICAgICAgYW5jaG9yLl9yb3VuZCgpO1xuICAgICAgICAgICAgaWYgKCFhbmdsZVdpbmRvd1NpemUgfHwgY2hlY2tNYXhBbmdsZShsaW5lLCBhbmNob3IsIGxhYmVsTGVuZ3RoLCBhbmdsZVdpbmRvd1NpemUsIG1heEFuZ2xlKSkge1xuICAgICAgICAgICAgICAgIHJldHVybiBhbmNob3I7XG4gICAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgICAgIHJldHVybjtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfVxuXG4gICAgICAgIHByZXZEaXN0YW5jZSArPSBzZWdtZW50RGlzdGFuY2U7XG4gICAgfVxufVxuXG5mdW5jdGlvbiBnZXRBbmNob3JzKGxpbmU6IEFycmF5PFBvaW50PixcbiAgICAgICAgICAgICAgICAgICAgc3BhY2luZzogbnVtYmVyLFxuICAgICAgICAgICAgICAgICAgICBtYXhBbmdsZTogbnVtYmVyLFxuICAgICAgICAgICAgICAgICAgICBzaGFwZWRUZXh0OiA/U2hhcGluZyxcbiAgICAgICAgICAgICAgICAgICAgc2hhcGVkSWNvbjogP1Bvc2l0aW9uZWRJY29uLFxuICAgICAgICAgICAgICAgICAgICBnbHlwaFNpemU6IG51bWJlcixcbiAgICAgICAgICAgICAgICAgICAgYm94U2NhbGU6IG51bWJlcixcbiAgICAgICAgICAgICAgICAgICAgb3ZlcnNjYWxpbmc6IG51bWJlcixcbiAgICAgICAgICAgICAgICAgICAgdGlsZUV4dGVudDogbnVtYmVyKSB7XG5cbiAgICAvLyBSZXNhbXBsZSBhIGxpbmUgdG8gZ2V0IGFuY2hvciBwb2ludHMgZm9yIGxhYmVscyBhbmQgY2hlY2sgdGhhdCBlYWNoXG4gICAgLy8gcG90ZW50aWFsIGxhYmVsIHBhc3NlcyB0ZXh0LW1heC1hbmdsZSBjaGVjayBhbmQgaGFzIGVub3VnaCBmcm9vbSB0byBmaXRcbiAgICAvLyBvbiB0aGUgbGluZS5cblxuICAgIGNvbnN0IGFuZ2xlV2luZG93U2l6ZSA9IGdldEFuZ2xlV2luZG93U2l6ZShzaGFwZWRUZXh0LCBnbHlwaFNpemUsIGJveFNjYWxlKTtcbiAgICBjb25zdCBzaGFwZWRMYWJlbExlbmd0aCA9IGdldFNoYXBlZExhYmVsTGVuZ3RoKHNoYXBlZFRleHQsIHNoYXBlZEljb24pO1xuICAgIGNvbnN0IGxhYmVsTGVuZ3RoID0gc2hhcGVkTGFiZWxMZW5ndGggKiBib3hTY2FsZTtcblxuICAgIC8vIElzIHRoZSBsaW5lIGNvbnRpbnVlZCBmcm9tIG91dHNpZGUgdGhlIHRpbGUgYm91bmRhcnk/XG4gICAgY29uc3QgaXNMaW5lQ29udGludWVkID0gbGluZVswXS54ID09PSAwIHx8IGxpbmVbMF0ueCA9PT0gdGlsZUV4dGVudCB8fCBsaW5lWzBdLnkgPT09IDAgfHwgbGluZVswXS55ID09PSB0aWxlRXh0ZW50O1xuXG4gICAgLy8gSXMgdGhlIGxhYmVsIGxvbmcsIHJlbGF0aXZlIHRvIHRoZSBzcGFjaW5nP1xuICAgIC8vIElmIHNvLCBhZGp1c3QgdGhlIHNwYWNpbmcgc28gdGhlcmUgaXMgYWx3YXlzIGEgbWluaW11bSBzcGFjZSBvZiBgc3BhY2luZyAvIDRgIGJldHdlZW4gbGFiZWwgZWRnZXMuXG4gICAgaWYgKHNwYWNpbmcgLSBsYWJlbExlbmd0aCA8IHNwYWNpbmcgLyA0KSB7XG4gICAgICAgIHNwYWNpbmcgPSBsYWJlbExlbmd0aCArIHNwYWNpbmcgLyA0O1xuICAgIH1cblxuICAgIC8vIE9mZnNldCB0aGUgZmlyc3QgYW5jaG9yIGJ5OlxuICAgIC8vIEVpdGhlciBoYWxmIHRoZSBsYWJlbCBsZW5ndGggcGx1cyBhIGZpeGVkIGV4dHJhIG9mZnNldCBpZiB0aGUgbGluZSBpcyBub3QgY29udGludWVkXG4gICAgLy8gT3IgaGFsZiB0aGUgc3BhY2luZyBpZiB0aGUgbGluZSBpcyBjb250aW51ZWQuXG5cbiAgICAvLyBGb3Igbm9uLWNvbnRpbnVlZCBsaW5lcywgYWRkIGEgYml0IG9mIGZpeGVkIGV4dHJhIG9mZnNldCB0byBhdm9pZCBjb2xsaXNpb25zIGF0IFQgaW50ZXJzZWN0aW9ucy5cbiAgICBjb25zdCBmaXhlZEV4dHJhT2Zmc2V0ID0gZ2x5cGhTaXplICogMjtcblxuICAgIGNvbnN0IG9mZnNldCA9ICFpc0xpbmVDb250aW51ZWQgP1xuICAgICAgICAoKHNoYXBlZExhYmVsTGVuZ3RoIC8gMiArIGZpeGVkRXh0cmFPZmZzZXQpICogYm94U2NhbGUgKiBvdmVyc2NhbGluZykgJSBzcGFjaW5nIDpcbiAgICAgICAgKHNwYWNpbmcgLyAyICogb3ZlcnNjYWxpbmcpICUgc3BhY2luZztcblxuICAgIHJldHVybiByZXNhbXBsZShsaW5lLCBvZmZzZXQsIHNwYWNpbmcsIGFuZ2xlV2luZG93U2l6ZSwgbWF4QW5nbGUsIGxhYmVsTGVuZ3RoLCBpc0xpbmVDb250aW51ZWQsIGZhbHNlLCB0aWxlRXh0ZW50KTtcbn1cblxuXG5mdW5jdGlvbiByZXNhbXBsZShsaW5lLCBvZmZzZXQsIHNwYWNpbmcsIGFuZ2xlV2luZG93U2l6ZSwgbWF4QW5nbGUsIGxhYmVsTGVuZ3RoLCBpc0xpbmVDb250aW51ZWQsIHBsYWNlQXRNaWRkbGUsIHRpbGVFeHRlbnQpIHtcblxuICAgIGNvbnN0IGhhbGZMYWJlbExlbmd0aCA9IGxhYmVsTGVuZ3RoIC8gMjtcbiAgICBjb25zdCBsaW5lTGVuZ3RoID0gZ2V0TGluZUxlbmd0aChsaW5lKTtcblxuICAgIGxldCBkaXN0YW5jZSA9IDAsXG4gICAgICAgIG1hcmtlZERpc3RhbmNlID0gb2Zmc2V0IC0gc3BhY2luZztcblxuICAgIGxldCBhbmNob3JzID0gW107XG5cbiAgICBmb3IgKGxldCBpID0gMDsgaSA8IGxpbmUubGVuZ3RoIC0gMTsgaSsrKSB7XG5cbiAgICAgICAgY29uc3QgYSA9IGxpbmVbaV0sXG4gICAgICAgICAgICBiID0gbGluZVtpICsgMV07XG5cbiAgICAgICAgY29uc3Qgc2VnbWVudERpc3QgPSBhLmRpc3QoYiksXG4gICAgICAgICAgICBhbmdsZSA9IGIuYW5nbGVUbyhhKTtcblxuICAgICAgICB3aGlsZSAobWFya2VkRGlzdGFuY2UgKyBzcGFjaW5nIDwgZGlzdGFuY2UgKyBzZWdtZW50RGlzdCkge1xuICAgICAgICAgICAgbWFya2VkRGlzdGFuY2UgKz0gc3BhY2luZztcblxuICAgICAgICAgICAgY29uc3QgdCA9IChtYXJrZWREaXN0YW5jZSAtIGRpc3RhbmNlKSAvIHNlZ21lbnREaXN0LFxuICAgICAgICAgICAgICAgIHggPSBpbnRlcnBvbGF0ZShhLngsIGIueCwgdCksXG4gICAgICAgICAgICAgICAgeSA9IGludGVycG9sYXRlKGEueSwgYi55LCB0KTtcblxuICAgICAgICAgICAgLy8gQ2hlY2sgdGhhdCB0aGUgcG9pbnQgaXMgd2l0aGluIHRoZSB0aWxlIGJvdW5kYXJpZXMgYW5kIHRoYXRcbiAgICAgICAgICAgIC8vIHRoZSBsYWJlbCB3b3VsZCBmaXQgYmVmb3JlIHRoZSBiZWdpbm5pbmcgYW5kIGVuZCBvZiB0aGUgbGluZVxuICAgICAgICAgICAgLy8gaWYgcGxhY2VkIGF0IHRoaXMgcG9pbnQuXG4gICAgICAgICAgICBpZiAoeCA+PSAwICYmIHggPCB0aWxlRXh0ZW50ICYmIHkgPj0gMCAmJiB5IDwgdGlsZUV4dGVudCAmJlxuICAgICAgICAgICAgICAgICAgICBtYXJrZWREaXN0YW5jZSAtIGhhbGZMYWJlbExlbmd0aCA+PSAwICYmXG4gICAgICAgICAgICAgICAgICAgIG1hcmtlZERpc3RhbmNlICsgaGFsZkxhYmVsTGVuZ3RoIDw9IGxpbmVMZW5ndGgpIHtcbiAgICAgICAgICAgICAgICBjb25zdCBhbmNob3IgPSBuZXcgQW5jaG9yKHgsIHksIGFuZ2xlLCBpKTtcbiAgICAgICAgICAgICAgICBhbmNob3IuX3JvdW5kKCk7XG5cbiAgICAgICAgICAgICAgICBpZiAoIWFuZ2xlV2luZG93U2l6ZSB8fCBjaGVja01heEFuZ2xlKGxpbmUsIGFuY2hvciwgbGFiZWxMZW5ndGgsIGFuZ2xlV2luZG93U2l6ZSwgbWF4QW5nbGUpKSB7XG4gICAgICAgICAgICAgICAgICAgIGFuY2hvcnMucHVzaChhbmNob3IpO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH1cbiAgICAgICAgfVxuXG4gICAgICAgIGRpc3RhbmNlICs9IHNlZ21lbnREaXN0O1xuICAgIH1cblxuICAgIGlmICghcGxhY2VBdE1pZGRsZSAmJiAhYW5jaG9ycy5sZW5ndGggJiYgIWlzTGluZUNvbnRpbnVlZCkge1xuICAgICAgICAvLyBUaGUgZmlyc3QgYXR0ZW1wdCBhdCBmaW5kaW5nIGFuY2hvcnMgYXQgd2hpY2ggbGFiZWxzIGNhbiBiZSBwbGFjZWQgZmFpbGVkLlxuICAgICAgICAvLyBUcnkgYWdhaW4sIGJ1dCB0aGlzIHRpbWUganVzdCB0cnkgcGxhY2luZyBvbmUgYW5jaG9yIGF0IHRoZSBtaWRkbGUgb2YgdGhlIGxpbmUuXG4gICAgICAgIC8vIFRoaXMgaGFzIHRoZSBtb3N0IGVmZmVjdCBmb3Igc2hvcnQgbGluZXMgaW4gb3ZlcnNjYWxlZCB0aWxlcywgc2luY2UgdGhlXG4gICAgICAgIC8vIGluaXRpYWwgb2Zmc2V0IHVzZWQgaW4gb3ZlcnNjYWxlZCB0aWxlcyBpcyBjYWxjdWxhdGVkIHRvIGFsaWduIGxhYmVscyB3aXRoIHBvc2l0aW9ucyBpblxuICAgICAgICAvLyBwYXJlbnQgdGlsZXMgaW5zdGVhZCBvZiBwbGFjaW5nIHRoZSBsYWJlbCBhcyBjbG9zZSB0byB0aGUgYmVnaW5uaW5nIGFzIHBvc3NpYmxlLlxuICAgICAgICBhbmNob3JzID0gcmVzYW1wbGUobGluZSwgZGlzdGFuY2UgLyAyLCBzcGFjaW5nLCBhbmdsZVdpbmRvd1NpemUsIG1heEFuZ2xlLCBsYWJlbExlbmd0aCwgaXNMaW5lQ29udGludWVkLCB0cnVlLCB0aWxlRXh0ZW50KTtcbiAgICB9XG5cbiAgICByZXR1cm4gYW5jaG9ycztcbn1cbiIsIi8vIEBmbG93XG5cbmltcG9ydCB0eXBlIHtDb2xsaXNpb25Cb3hBcnJheX0gZnJvbSAnLi4vZGF0YS9hcnJheV90eXBlcyc7XG5pbXBvcnQgUG9pbnQgZnJvbSAnQG1hcGJveC9wb2ludC1nZW9tZXRyeSc7XG5pbXBvcnQgdHlwZSBBbmNob3IgZnJvbSAnLi9hbmNob3InO1xuXG4vKipcbiAqIEEgQ29sbGlzaW9uRmVhdHVyZSByZXByZXNlbnRzIHRoZSBhcmVhIG9mIHRoZSB0aWxlIGNvdmVyZWQgYnkgYSBzaW5nbGUgbGFiZWwuXG4gKiBJdCBpcyB1c2VkIHdpdGggQ29sbGlzaW9uSW5kZXggdG8gY2hlY2sgaWYgdGhlIGxhYmVsIG92ZXJsYXBzIHdpdGggYW55XG4gKiBwcmV2aW91cyBsYWJlbHMuIEEgQ29sbGlzaW9uRmVhdHVyZSBpcyBtb3N0bHkganVzdCBhIHNldCBvZiBDb2xsaXNpb25Cb3hcbiAqIG9iamVjdHMuXG4gKlxuICogQHByaXZhdGVcbiAqL1xuY2xhc3MgQ29sbGlzaW9uRmVhdHVyZSB7XG4gICAgYm94U3RhcnRJbmRleDogbnVtYmVyO1xuICAgIGJveEVuZEluZGV4OiBudW1iZXI7XG5cbiAgICAvKipcbiAgICAgKiBDcmVhdGUgYSBDb2xsaXNpb25GZWF0dXJlLCBhZGRpbmcgaXRzIGNvbGxpc2lvbiBib3ggZGF0YSB0byB0aGUgZ2l2ZW4gY29sbGlzaW9uQm94QXJyYXkgaW4gdGhlIHByb2Nlc3MuXG4gICAgICpcbiAgICAgKiBAcGFyYW0gbGluZSBUaGUgZ2VvbWV0cnkgdGhlIGxhYmVsIGlzIHBsYWNlZCBvbi5cbiAgICAgKiBAcGFyYW0gYW5jaG9yIFRoZSBwb2ludCBhbG9uZyB0aGUgbGluZSBhcm91bmQgd2hpY2ggdGhlIGxhYmVsIGlzIGFuY2hvcmVkLlxuICAgICAqIEBwYXJhbSBzaGFwZWQgVGhlIHRleHQgb3IgaWNvbiBzaGFwaW5nIHJlc3VsdHMuXG4gICAgICogQHBhcmFtIGJveFNjYWxlIEEgbWFnaWMgbnVtYmVyIHVzZWQgdG8gY29udmVydCBmcm9tIGdseXBoIG1ldHJpY3MgdW5pdHMgdG8gZ2VvbWV0cnkgdW5pdHMuXG4gICAgICogQHBhcmFtIHBhZGRpbmcgVGhlIGFtb3VudCBvZiBwYWRkaW5nIHRvIGFkZCBhcm91bmQgdGhlIGxhYmVsIGVkZ2VzLlxuICAgICAqIEBwYXJhbSBhbGlnbkxpbmUgV2hldGhlciB0aGUgbGFiZWwgaXMgYWxpZ25lZCB3aXRoIHRoZSBsaW5lIG9yIHRoZSB2aWV3cG9ydC5cbiAgICAgKi9cbiAgICBjb25zdHJ1Y3Rvcihjb2xsaXNpb25Cb3hBcnJheTogQ29sbGlzaW9uQm94QXJyYXksXG4gICAgICAgICAgICAgICAgbGluZTogQXJyYXk8UG9pbnQ+LFxuICAgICAgICAgICAgICAgIGFuY2hvcjogQW5jaG9yLFxuICAgICAgICAgICAgICAgIGZlYXR1cmVJbmRleDogbnVtYmVyLFxuICAgICAgICAgICAgICAgIHNvdXJjZUxheWVySW5kZXg6IG51bWJlcixcbiAgICAgICAgICAgICAgICBidWNrZXRJbmRleDogbnVtYmVyLFxuICAgICAgICAgICAgICAgIHNoYXBlZDogT2JqZWN0LFxuICAgICAgICAgICAgICAgIGJveFNjYWxlOiBudW1iZXIsXG4gICAgICAgICAgICAgICAgcGFkZGluZzogbnVtYmVyLFxuICAgICAgICAgICAgICAgIGFsaWduTGluZTogYm9vbGVhbixcbiAgICAgICAgICAgICAgICBvdmVyc2NhbGluZzogbnVtYmVyLFxuICAgICAgICAgICAgICAgIHJvdGF0ZTogbnVtYmVyKSB7XG4gICAgICAgIGxldCB5MSA9IHNoYXBlZC50b3AgKiBib3hTY2FsZSAtIHBhZGRpbmc7XG4gICAgICAgIGxldCB5MiA9IHNoYXBlZC5ib3R0b20gKiBib3hTY2FsZSArIHBhZGRpbmc7XG4gICAgICAgIGxldCB4MSA9IHNoYXBlZC5sZWZ0ICogYm94U2NhbGUgLSBwYWRkaW5nO1xuICAgICAgICBsZXQgeDIgPSBzaGFwZWQucmlnaHQgKiBib3hTY2FsZSArIHBhZGRpbmc7XG5cbiAgICAgICAgdGhpcy5ib3hTdGFydEluZGV4ID0gY29sbGlzaW9uQm94QXJyYXkubGVuZ3RoO1xuXG4gICAgICAgIGlmIChhbGlnbkxpbmUpIHtcblxuICAgICAgICAgICAgbGV0IGhlaWdodCA9IHkyIC0geTE7XG4gICAgICAgICAgICBjb25zdCBsZW5ndGggPSB4MiAtIHgxO1xuXG4gICAgICAgICAgICBpZiAoaGVpZ2h0ID4gMCkge1xuICAgICAgICAgICAgICAgIC8vIHNldCBtaW5pbXVtIGJveCBoZWlnaHQgdG8gYXZvaWQgdmVyeSBtYW55IHNtYWxsIGxhYmVsc1xuICAgICAgICAgICAgICAgIGhlaWdodCA9IE1hdGgubWF4KDEwICogYm94U2NhbGUsIGhlaWdodCk7XG5cbiAgICAgICAgICAgICAgICB0aGlzLl9hZGRMaW5lQ29sbGlzaW9uQ2lyY2xlcyhjb2xsaXNpb25Cb3hBcnJheSwgbGluZSwgYW5jaG9yLCAoYW5jaG9yLnNlZ21lbnQ6IGFueSksIGxlbmd0aCwgaGVpZ2h0LCBmZWF0dXJlSW5kZXgsIHNvdXJjZUxheWVySW5kZXgsIGJ1Y2tldEluZGV4LCBvdmVyc2NhbGluZyk7XG4gICAgICAgICAgICB9XG5cbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgIGlmIChyb3RhdGUpIHtcbiAgICAgICAgICAgICAgICAvLyBBY2NvdW50IGZvciAqLXJvdGF0ZSBpbiBwb2ludCBjb2xsaXNpb24gYm94ZXNcbiAgICAgICAgICAgICAgICAvLyBTZWUgaHR0cHM6Ly9naXRodWIuY29tL21hcGJveC9tYXBib3gtZ2wtanMvaXNzdWVzLzYwNzVcbiAgICAgICAgICAgICAgICAvLyBEb2Vzbid0IGFjY291bnQgZm9yIGljb24tdGV4dC1maXRcblxuICAgICAgICAgICAgICAgIGNvbnN0IHRsID0gbmV3IFBvaW50KHgxLCB5MSk7XG4gICAgICAgICAgICAgICAgY29uc3QgdHIgPSBuZXcgUG9pbnQoeDIsIHkxKTtcbiAgICAgICAgICAgICAgICBjb25zdCBibCA9IG5ldyBQb2ludCh4MSwgeTIpO1xuICAgICAgICAgICAgICAgIGNvbnN0IGJyID0gbmV3IFBvaW50KHgyLCB5Mik7XG5cbiAgICAgICAgICAgICAgICBjb25zdCByb3RhdGVSYWRpYW5zID0gcm90YXRlICogTWF0aC5QSSAvIDE4MDtcblxuICAgICAgICAgICAgICAgIHRsLl9yb3RhdGUocm90YXRlUmFkaWFucyk7XG4gICAgICAgICAgICAgICAgdHIuX3JvdGF0ZShyb3RhdGVSYWRpYW5zKTtcbiAgICAgICAgICAgICAgICBibC5fcm90YXRlKHJvdGF0ZVJhZGlhbnMpO1xuICAgICAgICAgICAgICAgIGJyLl9yb3RhdGUocm90YXRlUmFkaWFucyk7XG5cbiAgICAgICAgICAgICAgICAvLyBDb2xsaXNpb24gZmVhdHVyZXMgcmVxdWlyZSBhbiBcIm9uLWF4aXNcIiBnZW9tZXRyeSxcbiAgICAgICAgICAgICAgICAvLyBzbyB0YWtlIHRoZSBlbnZlbG9wZSBvZiB0aGUgcm90YXRlZCBnZW9tZXRyeVxuICAgICAgICAgICAgICAgIC8vIChtYXkgYmUgcXVpdGUgbGFyZ2UgZm9yIHdpZGUgbGFiZWxzIHJvdGF0ZWQgNDUgZGVncmVlcylcbiAgICAgICAgICAgICAgICB4MSA9IE1hdGgubWluKHRsLngsIHRyLngsIGJsLngsIGJyLngpO1xuICAgICAgICAgICAgICAgIHgyID0gTWF0aC5tYXgodGwueCwgdHIueCwgYmwueCwgYnIueCk7XG4gICAgICAgICAgICAgICAgeTEgPSBNYXRoLm1pbih0bC55LCB0ci55LCBibC55LCBici55KTtcbiAgICAgICAgICAgICAgICB5MiA9IE1hdGgubWF4KHRsLnksIHRyLnksIGJsLnksIGJyLnkpO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgY29sbGlzaW9uQm94QXJyYXkuZW1wbGFjZUJhY2soYW5jaG9yLngsIGFuY2hvci55LCB4MSwgeTEsIHgyLCB5MiwgZmVhdHVyZUluZGV4LCBzb3VyY2VMYXllckluZGV4LCBidWNrZXRJbmRleCxcbiAgICAgICAgICAgICAgICAwLCAwKTtcbiAgICAgICAgfVxuXG4gICAgICAgIHRoaXMuYm94RW5kSW5kZXggPSBjb2xsaXNpb25Cb3hBcnJheS5sZW5ndGg7XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogQ3JlYXRlIGEgc2V0IG9mIENvbGxpc2lvbkJveCBvYmplY3RzIGZvciBhIGxpbmUuXG4gICAgICpcbiAgICAgKiBAcGFyYW0gbGFiZWxMZW5ndGggVGhlIGxlbmd0aCBvZiB0aGUgbGFiZWwgaW4gZ2VvbWV0cnkgdW5pdHMuXG4gICAgICogQHBhcmFtIGFuY2hvciBUaGUgcG9pbnQgYWxvbmcgdGhlIGxpbmUgYXJvdW5kIHdoaWNoIHRoZSBsYWJlbCBpcyBhbmNob3JlZC5cbiAgICAgKiBAcGFyYW0gYm94U2l6ZSBUaGUgc2l6ZSBvZiB0aGUgY29sbGlzaW9uIGJveGVzIHRoYXQgd2lsbCBiZSBjcmVhdGVkLlxuICAgICAqIEBwcml2YXRlXG4gICAgICovXG4gICAgX2FkZExpbmVDb2xsaXNpb25DaXJjbGVzKGNvbGxpc2lvbkJveEFycmF5OiBDb2xsaXNpb25Cb3hBcnJheSxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgIGxpbmU6IEFycmF5PFBvaW50PixcbiAgICAgICAgICAgICAgICAgICAgICAgICAgIGFuY2hvcjogQW5jaG9yLFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgc2VnbWVudDogbnVtYmVyLFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgbGFiZWxMZW5ndGg6IG51bWJlcixcbiAgICAgICAgICAgICAgICAgICAgICAgICAgIGJveFNpemU6IG51bWJlcixcbiAgICAgICAgICAgICAgICAgICAgICAgICAgIGZlYXR1cmVJbmRleDogbnVtYmVyLFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgc291cmNlTGF5ZXJJbmRleDogbnVtYmVyLFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgYnVja2V0SW5kZXg6IG51bWJlcixcbiAgICAgICAgICAgICAgICAgICAgICAgICAgIG92ZXJzY2FsaW5nOiBudW1iZXIpIHtcbiAgICAgICAgY29uc3Qgc3RlcCA9IGJveFNpemUgLyAyO1xuICAgICAgICBjb25zdCBuQm94ZXMgPSBNYXRoLmZsb29yKGxhYmVsTGVuZ3RoIC8gc3RlcCkgfHwgMTtcbiAgICAgICAgLy8gV2UgY2FsY3VsYXRlIGxpbmUgY29sbGlzaW9uIGNpcmNsZXMgb3V0IHRvIDMwMCUgb2Ygd2hhdCB3b3VsZCBub3JtYWxseSBiZSBvdXJcbiAgICAgICAgLy8gbWF4IHNpemUsIHRvIGFsbG93IGNvbGxpc2lvbiBkZXRlY3Rpb24gdG8gd29yayBvbiBsYWJlbHMgdGhhdCBleHBhbmQgYXNcbiAgICAgICAgLy8gdGhleSBtb3ZlIGludG8gdGhlIGRpc3RhbmNlXG4gICAgICAgIC8vIFZlcnRpY2FsbHkgb3JpZW50ZWQgbGFiZWxzIGluIHRoZSBkaXN0YW50IGZpZWxkIGNhbiBleHRlbmQgcGFzdCB0aGlzIHBhZGRpbmdcbiAgICAgICAgLy8gVGhpcyBpcyBhIG5vdGljZWFibGUgcHJvYmxlbSBpbiBvdmVyc2NhbGVkIHRpbGVzIHdoZXJlIHRoZSBwaXRjaCAwLWJhc2VkXG4gICAgICAgIC8vIHN5bWJvbCBzcGFjaW5nIHdpbGwgcHV0IGxhYmVscyB2ZXJ5IGNsb3NlIHRvZ2V0aGVyIGluIGEgcGl0Y2hlZCBtYXAuXG4gICAgICAgIC8vIFRvIHJlZHVjZSB0aGUgY29zdCBvZiBhZGRpbmcgZXh0cmEgY29sbGlzaW9uIGNpcmNsZXMsIHdlIHNsb3dseSBpbmNyZWFzZVxuICAgICAgICAvLyB0aGVtIGZvciBvdmVyc2NhbGVkIHRpbGVzLlxuICAgICAgICBjb25zdCBvdmVyc2NhbGluZ1BhZGRpbmdGYWN0b3IgPSAxICsgLjQgKiBNYXRoLmxvZyhvdmVyc2NhbGluZykgLyBNYXRoLkxOMjtcbiAgICAgICAgY29uc3QgblBpdGNoUGFkZGluZ0JveGVzID0gTWF0aC5mbG9vcihuQm94ZXMgKiBvdmVyc2NhbGluZ1BhZGRpbmdGYWN0b3IgLyAyKTtcblxuICAgICAgICAvLyBvZmZzZXQgdGhlIGNlbnRlciBvZiB0aGUgZmlyc3QgYm94IGJ5IGhhbGYgYSBib3ggc28gdGhhdCB0aGUgZWRnZSBvZiB0aGVcbiAgICAgICAgLy8gYm94IGlzIGF0IHRoZSBlZGdlIG9mIHRoZSBsYWJlbC5cbiAgICAgICAgY29uc3QgZmlyc3RCb3hPZmZzZXQgPSAtYm94U2l6ZSAvIDI7XG5cbiAgICAgICAgbGV0IHAgPSBhbmNob3I7XG4gICAgICAgIGxldCBpbmRleCA9IHNlZ21lbnQgKyAxO1xuICAgICAgICBsZXQgYW5jaG9yRGlzdGFuY2UgPSBmaXJzdEJveE9mZnNldDtcbiAgICAgICAgY29uc3QgbGFiZWxTdGFydERpc3RhbmNlID0gLWxhYmVsTGVuZ3RoIC8gMjtcbiAgICAgICAgY29uc3QgcGFkZGluZ1N0YXJ0RGlzdGFuY2UgPSBsYWJlbFN0YXJ0RGlzdGFuY2UgLSBsYWJlbExlbmd0aCAvIDQ7XG4gICAgICAgIC8vIG1vdmUgYmFja3dhcmRzIGFsb25nIHRoZSBsaW5lIHRvIHRoZSBmaXJzdCBzZWdtZW50IHRoZSBsYWJlbCBhcHBlYXJzIG9uXG4gICAgICAgIGRvIHtcbiAgICAgICAgICAgIGluZGV4LS07XG5cbiAgICAgICAgICAgIGlmIChpbmRleCA8IDApIHtcbiAgICAgICAgICAgICAgICBpZiAoYW5jaG9yRGlzdGFuY2UgPiBsYWJlbFN0YXJ0RGlzdGFuY2UpIHtcbiAgICAgICAgICAgICAgICAgICAgLy8gdGhlcmUgaXNuJ3QgZW5vdWdoIHJvb20gZm9yIHRoZSBsYWJlbCBhZnRlciB0aGUgYmVnaW5uaW5nIG9mIHRoZSBsaW5lXG4gICAgICAgICAgICAgICAgICAgIC8vIGNoZWNrTWF4QW5nbGUgc2hvdWxkIGhhdmUgYWxyZWFkeSBjYXVnaHQgdGhpc1xuICAgICAgICAgICAgICAgICAgICByZXR1cm47XG4gICAgICAgICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgICAgICAgICAgLy8gVGhlIGxpbmUgZG9lc24ndCBleHRlbmQgZmFyIGVub3VnaCBiYWNrIGZvciBhbGwgb2Ygb3VyIHBhZGRpbmcsXG4gICAgICAgICAgICAgICAgICAgIC8vIGJ1dCB3ZSBnb3QgZmFyIGVub3VnaCB0byBzaG93IHRoZSBsYWJlbCB1bmRlciBtb3N0IGNvbmRpdGlvbnMuXG4gICAgICAgICAgICAgICAgICAgIGluZGV4ID0gMDtcbiAgICAgICAgICAgICAgICAgICAgYnJlYWs7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgICAgICBhbmNob3JEaXN0YW5jZSAtPSBsaW5lW2luZGV4XS5kaXN0KHApO1xuICAgICAgICAgICAgICAgIHAgPSBsaW5lW2luZGV4XTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfSB3aGlsZSAoYW5jaG9yRGlzdGFuY2UgPiBwYWRkaW5nU3RhcnREaXN0YW5jZSk7XG5cbiAgICAgICAgbGV0IHNlZ21lbnRMZW5ndGggPSBsaW5lW2luZGV4XS5kaXN0KGxpbmVbaW5kZXggKyAxXSk7XG5cbiAgICAgICAgZm9yIChsZXQgaSA9IC1uUGl0Y2hQYWRkaW5nQm94ZXM7IGkgPCBuQm94ZXMgKyBuUGl0Y2hQYWRkaW5nQm94ZXM7IGkrKykge1xuXG4gICAgICAgICAgICAvLyB0aGUgZGlzdGFuY2UgdGhlIGJveCB3aWxsIGJlIGZyb20gdGhlIGFuY2hvclxuICAgICAgICAgICAgY29uc3QgYm94T2Zmc2V0ID0gaSAqIHN0ZXA7XG4gICAgICAgICAgICBsZXQgYm94RGlzdGFuY2VUb0FuY2hvciA9IGxhYmVsU3RhcnREaXN0YW5jZSArIGJveE9mZnNldDtcblxuICAgICAgICAgICAgLy8gbWFrZSB0aGUgZGlzdGFuY2UgYmV0d2VlbiBwaXRjaCBwYWRkaW5nIGJveGVzIGJpZ2dlclxuICAgICAgICAgICAgaWYgKGJveE9mZnNldCA8IDApIGJveERpc3RhbmNlVG9BbmNob3IgKz0gYm94T2Zmc2V0O1xuICAgICAgICAgICAgaWYgKGJveE9mZnNldCA+IGxhYmVsTGVuZ3RoKSBib3hEaXN0YW5jZVRvQW5jaG9yICs9IGJveE9mZnNldCAtIGxhYmVsTGVuZ3RoO1xuXG4gICAgICAgICAgICBpZiAoYm94RGlzdGFuY2VUb0FuY2hvciA8IGFuY2hvckRpc3RhbmNlKSB7XG4gICAgICAgICAgICAgICAgLy8gVGhlIGxpbmUgZG9lc24ndCBleHRlbmQgZmFyIGVub3VnaCBiYWNrIGZvciB0aGlzIGJveCwgc2tpcCBpdFxuICAgICAgICAgICAgICAgIC8vIChUaGlzIGNvdWxkIGFsbG93IGZvciBsaW5lIGNvbGxpc2lvbnMgb24gZGlzdGFudCB0aWxlcylcbiAgICAgICAgICAgICAgICBjb250aW51ZTtcbiAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgLy8gdGhlIGJveCBpcyBub3Qgb24gdGhlIGN1cnJlbnQgc2VnbWVudC4gTW92ZSB0byB0aGUgbmV4dCBzZWdtZW50LlxuICAgICAgICAgICAgd2hpbGUgKGFuY2hvckRpc3RhbmNlICsgc2VnbWVudExlbmd0aCA8IGJveERpc3RhbmNlVG9BbmNob3IpIHtcbiAgICAgICAgICAgICAgICBhbmNob3JEaXN0YW5jZSArPSBzZWdtZW50TGVuZ3RoO1xuICAgICAgICAgICAgICAgIGluZGV4Kys7XG5cbiAgICAgICAgICAgICAgICAvLyBUaGVyZSBpc24ndCBlbm91Z2ggcm9vbSBiZWZvcmUgdGhlIGVuZCBvZiB0aGUgbGluZS5cbiAgICAgICAgICAgICAgICBpZiAoaW5kZXggKyAxID49IGxpbmUubGVuZ3RoKSB7XG4gICAgICAgICAgICAgICAgICAgIHJldHVybjtcbiAgICAgICAgICAgICAgICB9XG5cbiAgICAgICAgICAgICAgICBzZWdtZW50TGVuZ3RoID0gbGluZVtpbmRleF0uZGlzdChsaW5lW2luZGV4ICsgMV0pO1xuICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICAvLyB0aGUgZGlzdGFuY2UgdGhlIGJveCB3aWxsIGJlIGZyb20gdGhlIGJlZ2lubmluZyBvZiB0aGUgc2VnbWVudFxuICAgICAgICAgICAgY29uc3Qgc2VnbWVudEJveERpc3RhbmNlID0gYm94RGlzdGFuY2VUb0FuY2hvciAtIGFuY2hvckRpc3RhbmNlO1xuXG4gICAgICAgICAgICBjb25zdCBwMCA9IGxpbmVbaW5kZXhdO1xuICAgICAgICAgICAgY29uc3QgcDEgPSBsaW5lW2luZGV4ICsgMV07XG4gICAgICAgICAgICBjb25zdCBib3hBbmNob3JQb2ludCA9IHAxLnN1YihwMCkuX3VuaXQoKS5fbXVsdChzZWdtZW50Qm94RGlzdGFuY2UpLl9hZGQocDApLl9yb3VuZCgpO1xuXG4gICAgICAgICAgICAvLyBJZiB0aGUgYm94IGlzIHdpdGhpbiBib3hTaXplIG9mIHRoZSBhbmNob3IsIGZvcmNlIHRoZSBib3ggdG8gYmUgdXNlZFxuICAgICAgICAgICAgLy8gKHNvIGV2ZW4gMC13aWR0aCBsYWJlbHMgdXNlIGF0IGxlYXN0IG9uZSBib3gpXG4gICAgICAgICAgICAvLyBPdGhlcndpc2UsIHRoZSAuOCBtdWx0aXBsaWNhdGlvbiBnaXZlcyB1cyBhIGxpdHRsZSBiaXQgb2YgY29uc2VydmF0aXZlXG4gICAgICAgICAgICAvLyBwYWRkaW5nIGluIGNob29zaW5nIHdoaWNoIGJveGVzIHRvIHVzZSAoc2VlIENvbGxpc2lvbkluZGV4I3BsYWNlZENvbGxpc2lvbkNpcmNsZXMpXG4gICAgICAgICAgICBjb25zdCBwYWRkZWRBbmNob3JEaXN0YW5jZSA9IE1hdGguYWJzKGJveERpc3RhbmNlVG9BbmNob3IgLSBmaXJzdEJveE9mZnNldCkgPCBzdGVwID9cbiAgICAgICAgICAgICAgICAwIDpcbiAgICAgICAgICAgICAgICAoYm94RGlzdGFuY2VUb0FuY2hvciAtIGZpcnN0Qm94T2Zmc2V0KSAqIDAuODtcblxuICAgICAgICAgICAgY29sbGlzaW9uQm94QXJyYXkuZW1wbGFjZUJhY2soYm94QW5jaG9yUG9pbnQueCwgYm94QW5jaG9yUG9pbnQueSxcbiAgICAgICAgICAgICAgICAtYm94U2l6ZSAvIDIsIC1ib3hTaXplIC8gMiwgYm94U2l6ZSAvIDIsIGJveFNpemUgLyAyLFxuICAgICAgICAgICAgICAgIGZlYXR1cmVJbmRleCwgc291cmNlTGF5ZXJJbmRleCwgYnVja2V0SW5kZXgsXG4gICAgICAgICAgICAgICAgYm94U2l6ZSAvIDIsIHBhZGRlZEFuY2hvckRpc3RhbmNlKTtcbiAgICAgICAgfVxuICAgIH1cbn1cblxuZXhwb3J0IGRlZmF1bHQgQ29sbGlzaW9uRmVhdHVyZTtcbiIsIid1c2Ugc3RyaWN0JztcblxubW9kdWxlLmV4cG9ydHMgPSBUaW55UXVldWU7XG5tb2R1bGUuZXhwb3J0cy5kZWZhdWx0ID0gVGlueVF1ZXVlO1xuXG5mdW5jdGlvbiBUaW55UXVldWUoZGF0YSwgY29tcGFyZSkge1xuICAgIGlmICghKHRoaXMgaW5zdGFuY2VvZiBUaW55UXVldWUpKSByZXR1cm4gbmV3IFRpbnlRdWV1ZShkYXRhLCBjb21wYXJlKTtcblxuICAgIHRoaXMuZGF0YSA9IGRhdGEgfHwgW107XG4gICAgdGhpcy5sZW5ndGggPSB0aGlzLmRhdGEubGVuZ3RoO1xuICAgIHRoaXMuY29tcGFyZSA9IGNvbXBhcmUgfHwgZGVmYXVsdENvbXBhcmU7XG5cbiAgICBpZiAodGhpcy5sZW5ndGggPiAwKSB7XG4gICAgICAgIGZvciAodmFyIGkgPSAodGhpcy5sZW5ndGggPj4gMSkgLSAxOyBpID49IDA7IGktLSkgdGhpcy5fZG93bihpKTtcbiAgICB9XG59XG5cbmZ1bmN0aW9uIGRlZmF1bHRDb21wYXJlKGEsIGIpIHtcbiAgICByZXR1cm4gYSA8IGIgPyAtMSA6IGEgPiBiID8gMSA6IDA7XG59XG5cblRpbnlRdWV1ZS5wcm90b3R5cGUgPSB7XG5cbiAgICBwdXNoOiBmdW5jdGlvbiAoaXRlbSkge1xuICAgICAgICB0aGlzLmRhdGEucHVzaChpdGVtKTtcbiAgICAgICAgdGhpcy5sZW5ndGgrKztcbiAgICAgICAgdGhpcy5fdXAodGhpcy5sZW5ndGggLSAxKTtcbiAgICB9LFxuXG4gICAgcG9wOiBmdW5jdGlvbiAoKSB7XG4gICAgICAgIGlmICh0aGlzLmxlbmd0aCA9PT0gMCkgcmV0dXJuIHVuZGVmaW5lZDtcblxuICAgICAgICB2YXIgdG9wID0gdGhpcy5kYXRhWzBdO1xuICAgICAgICB0aGlzLmxlbmd0aC0tO1xuXG4gICAgICAgIGlmICh0aGlzLmxlbmd0aCA+IDApIHtcbiAgICAgICAgICAgIHRoaXMuZGF0YVswXSA9IHRoaXMuZGF0YVt0aGlzLmxlbmd0aF07XG4gICAgICAgICAgICB0aGlzLl9kb3duKDApO1xuICAgICAgICB9XG4gICAgICAgIHRoaXMuZGF0YS5wb3AoKTtcblxuICAgICAgICByZXR1cm4gdG9wO1xuICAgIH0sXG5cbiAgICBwZWVrOiBmdW5jdGlvbiAoKSB7XG4gICAgICAgIHJldHVybiB0aGlzLmRhdGFbMF07XG4gICAgfSxcblxuICAgIF91cDogZnVuY3Rpb24gKHBvcykge1xuICAgICAgICB2YXIgZGF0YSA9IHRoaXMuZGF0YTtcbiAgICAgICAgdmFyIGNvbXBhcmUgPSB0aGlzLmNvbXBhcmU7XG4gICAgICAgIHZhciBpdGVtID0gZGF0YVtwb3NdO1xuXG4gICAgICAgIHdoaWxlIChwb3MgPiAwKSB7XG4gICAgICAgICAgICB2YXIgcGFyZW50ID0gKHBvcyAtIDEpID4+IDE7XG4gICAgICAgICAgICB2YXIgY3VycmVudCA9IGRhdGFbcGFyZW50XTtcbiAgICAgICAgICAgIGlmIChjb21wYXJlKGl0ZW0sIGN1cnJlbnQpID49IDApIGJyZWFrO1xuICAgICAgICAgICAgZGF0YVtwb3NdID0gY3VycmVudDtcbiAgICAgICAgICAgIHBvcyA9IHBhcmVudDtcbiAgICAgICAgfVxuXG4gICAgICAgIGRhdGFbcG9zXSA9IGl0ZW07XG4gICAgfSxcblxuICAgIF9kb3duOiBmdW5jdGlvbiAocG9zKSB7XG4gICAgICAgIHZhciBkYXRhID0gdGhpcy5kYXRhO1xuICAgICAgICB2YXIgY29tcGFyZSA9IHRoaXMuY29tcGFyZTtcbiAgICAgICAgdmFyIGhhbGZMZW5ndGggPSB0aGlzLmxlbmd0aCA+PiAxO1xuICAgICAgICB2YXIgaXRlbSA9IGRhdGFbcG9zXTtcblxuICAgICAgICB3aGlsZSAocG9zIDwgaGFsZkxlbmd0aCkge1xuICAgICAgICAgICAgdmFyIGxlZnQgPSAocG9zIDw8IDEpICsgMTtcbiAgICAgICAgICAgIHZhciByaWdodCA9IGxlZnQgKyAxO1xuICAgICAgICAgICAgdmFyIGJlc3QgPSBkYXRhW2xlZnRdO1xuXG4gICAgICAgICAgICBpZiAocmlnaHQgPCB0aGlzLmxlbmd0aCAmJiBjb21wYXJlKGRhdGFbcmlnaHRdLCBiZXN0KSA8IDApIHtcbiAgICAgICAgICAgICAgICBsZWZ0ID0gcmlnaHQ7XG4gICAgICAgICAgICAgICAgYmVzdCA9IGRhdGFbcmlnaHRdO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgaWYgKGNvbXBhcmUoYmVzdCwgaXRlbSkgPj0gMCkgYnJlYWs7XG5cbiAgICAgICAgICAgIGRhdGFbcG9zXSA9IGJlc3Q7XG4gICAgICAgICAgICBwb3MgPSBsZWZ0O1xuICAgICAgICB9XG5cbiAgICAgICAgZGF0YVtwb3NdID0gaXRlbTtcbiAgICB9XG59O1xuIiwiLy8gQGZsb3dcblxuaW1wb3J0IFF1ZXVlIGZyb20gJ3RpbnlxdWV1ZSc7XG5cbmltcG9ydCBQb2ludCBmcm9tICdAbWFwYm94L3BvaW50LWdlb21ldHJ5JztcbmltcG9ydCB7IGRpc3RUb1NlZ21lbnRTcXVhcmVkIH0gZnJvbSAnLi9pbnRlcnNlY3Rpb25fdGVzdHMnO1xuXG4vKipcbiAqIEZpbmRzIGFuIGFwcHJveGltYXRpb24gb2YgYSBwb2x5Z29uJ3MgUG9sZSBPZiBJbmFjY2Vzc2liaWxpeSBodHRwczovL2VuLndpa2lwZWRpYS5vcmcvd2lraS9Qb2xlX29mX2luYWNjZXNzaWJpbGl0eVxuICogVGhpcyBpcyBhIGNvcHkgb2YgaHR0cDovL2dpdGh1Yi5jb20vbWFwYm94L3BvbHlsYWJlbCBhZGFwdGVkIHRvIHVzZSBQb2ludHNcbiAqXG4gKiBAcGFyYW0gcG9seWdvblJpbmdzIGZpcnN0IGl0ZW0gaW4gYXJyYXkgaXMgdGhlIG91dGVyIHJpbmcgZm9sbG93ZWQgb3B0aW9uYWxseSBieSB0aGUgbGlzdCBvZiBob2xlcywgc2hvdWxkIGJlIGFuIGVsZW1lbnQgb2YgdGhlIHJlc3VsdCBvZiB1dGlsL2NsYXNzaWZ5X3JpbmdzXG4gKiBAcGFyYW0gcHJlY2lzaW9uIFNwZWNpZmllZCBpbiBpbnB1dCBjb29yZGluYXRlIHVuaXRzLiBJZiAwIHJldHVybnMgYWZ0ZXIgZmlyc3QgcnVuLCBpZiA+IDAgcmVwZWF0ZWRseSBuYXJyb3dzIHRoZSBzZWFyY2ggc3BhY2UgdW50aWwgdGhlIHJhZGl1cyBvZiB0aGUgYXJlYSBzZWFyY2hlZCBmb3IgdGhlIGJlc3QgcG9sZSBpcyBsZXNzIHRoYW4gcHJlY2lzaW9uXG4gKiBAcGFyYW0gZGVidWcgUHJpbnQgc29tZSBzdGF0aXN0aWNzIHRvIHRoZSBjb25zb2xlIGR1cmluZyBleGVjdXRpb25cbiAqIEByZXR1cm5zIFBvbGUgb2YgSW5hY2Nlc3NpYmlsaXkuXG4gKiBAcHJpdmF0ZVxuICovXG5leHBvcnQgZGVmYXVsdCBmdW5jdGlvbiAocG9seWdvblJpbmdzOiBBcnJheTxBcnJheTxQb2ludD4+LCBwcmVjaXNpb24/OiBudW1iZXIgPSAxLCBkZWJ1Zz86IGJvb2xlYW4gPSBmYWxzZSk6IFBvaW50IHtcbiAgICAvLyBmaW5kIHRoZSBib3VuZGluZyBib3ggb2YgdGhlIG91dGVyIHJpbmdcbiAgICBsZXQgbWluWCA9IEluZmluaXR5LCBtaW5ZID0gSW5maW5pdHksIG1heFggPSAtSW5maW5pdHksIG1heFkgPSAtSW5maW5pdHk7XG4gICAgY29uc3Qgb3V0ZXJSaW5nID0gcG9seWdvblJpbmdzWzBdO1xuICAgIGZvciAobGV0IGkgPSAwOyBpIDwgb3V0ZXJSaW5nLmxlbmd0aDsgaSsrKSB7XG4gICAgICAgIGNvbnN0IHAgPSBvdXRlclJpbmdbaV07XG4gICAgICAgIGlmICghaSB8fCBwLnggPCBtaW5YKSBtaW5YID0gcC54O1xuICAgICAgICBpZiAoIWkgfHwgcC55IDwgbWluWSkgbWluWSA9IHAueTtcbiAgICAgICAgaWYgKCFpIHx8IHAueCA+IG1heFgpIG1heFggPSBwLng7XG4gICAgICAgIGlmICghaSB8fCBwLnkgPiBtYXhZKSBtYXhZID0gcC55O1xuICAgIH1cblxuICAgIGNvbnN0IHdpZHRoID0gbWF4WCAtIG1pblg7XG4gICAgY29uc3QgaGVpZ2h0ID0gbWF4WSAtIG1pblk7XG4gICAgY29uc3QgY2VsbFNpemUgPSBNYXRoLm1pbih3aWR0aCwgaGVpZ2h0KTtcbiAgICBsZXQgaCA9IGNlbGxTaXplIC8gMjtcblxuICAgIC8vIGEgcHJpb3JpdHkgcXVldWUgb2YgY2VsbHMgaW4gb3JkZXIgb2YgdGhlaXIgXCJwb3RlbnRpYWxcIiAobWF4IGRpc3RhbmNlIHRvIHBvbHlnb24pXG4gICAgY29uc3QgY2VsbFF1ZXVlID0gbmV3IFF1ZXVlKG51bGwsIGNvbXBhcmVNYXgpO1xuXG4gICAgaWYgKGNlbGxTaXplID09PSAwKSByZXR1cm4gbmV3IFBvaW50KG1pblgsIG1pblkpO1xuXG4gICAgLy8gY292ZXIgcG9seWdvbiB3aXRoIGluaXRpYWwgY2VsbHNcbiAgICBmb3IgKGxldCB4ID0gbWluWDsgeCA8IG1heFg7IHggKz0gY2VsbFNpemUpIHtcbiAgICAgICAgZm9yIChsZXQgeSA9IG1pblk7IHkgPCBtYXhZOyB5ICs9IGNlbGxTaXplKSB7XG4gICAgICAgICAgICBjZWxsUXVldWUucHVzaChuZXcgQ2VsbCh4ICsgaCwgeSArIGgsIGgsIHBvbHlnb25SaW5ncykpO1xuICAgICAgICB9XG4gICAgfVxuXG4gICAgLy8gdGFrZSBjZW50cm9pZCBhcyB0aGUgZmlyc3QgYmVzdCBndWVzc1xuICAgIGxldCBiZXN0Q2VsbCA9IGdldENlbnRyb2lkQ2VsbChwb2x5Z29uUmluZ3MpO1xuICAgIGxldCBudW1Qcm9iZXMgPSBjZWxsUXVldWUubGVuZ3RoO1xuXG4gICAgd2hpbGUgKGNlbGxRdWV1ZS5sZW5ndGgpIHtcbiAgICAgICAgLy8gcGljayB0aGUgbW9zdCBwcm9taXNpbmcgY2VsbCBmcm9tIHRoZSBxdWV1ZVxuICAgICAgICBjb25zdCBjZWxsID0gY2VsbFF1ZXVlLnBvcCgpO1xuXG4gICAgICAgIC8vIHVwZGF0ZSB0aGUgYmVzdCBjZWxsIGlmIHdlIGZvdW5kIGEgYmV0dGVyIG9uZVxuICAgICAgICBpZiAoY2VsbC5kID4gYmVzdENlbGwuZCB8fCAhYmVzdENlbGwuZCkge1xuICAgICAgICAgICAgYmVzdENlbGwgPSBjZWxsO1xuICAgICAgICAgICAgaWYgKGRlYnVnKSBjb25zb2xlLmxvZygnZm91bmQgYmVzdCAlZCBhZnRlciAlZCBwcm9iZXMnLCBNYXRoLnJvdW5kKDFlNCAqIGNlbGwuZCkgLyAxZTQsIG51bVByb2Jlcyk7XG4gICAgICAgIH1cblxuICAgICAgICAvLyBkbyBub3QgZHJpbGwgZG93biBmdXJ0aGVyIGlmIHRoZXJlJ3Mgbm8gY2hhbmNlIG9mIGEgYmV0dGVyIHNvbHV0aW9uXG4gICAgICAgIGlmIChjZWxsLm1heCAtIGJlc3RDZWxsLmQgPD0gcHJlY2lzaW9uKSBjb250aW51ZTtcblxuICAgICAgICAvLyBzcGxpdCB0aGUgY2VsbCBpbnRvIGZvdXIgY2VsbHNcbiAgICAgICAgaCA9IGNlbGwuaCAvIDI7XG4gICAgICAgIGNlbGxRdWV1ZS5wdXNoKG5ldyBDZWxsKGNlbGwucC54IC0gaCwgY2VsbC5wLnkgLSBoLCBoLCBwb2x5Z29uUmluZ3MpKTtcbiAgICAgICAgY2VsbFF1ZXVlLnB1c2gobmV3IENlbGwoY2VsbC5wLnggKyBoLCBjZWxsLnAueSAtIGgsIGgsIHBvbHlnb25SaW5ncykpO1xuICAgICAgICBjZWxsUXVldWUucHVzaChuZXcgQ2VsbChjZWxsLnAueCAtIGgsIGNlbGwucC55ICsgaCwgaCwgcG9seWdvblJpbmdzKSk7XG4gICAgICAgIGNlbGxRdWV1ZS5wdXNoKG5ldyBDZWxsKGNlbGwucC54ICsgaCwgY2VsbC5wLnkgKyBoLCBoLCBwb2x5Z29uUmluZ3MpKTtcbiAgICAgICAgbnVtUHJvYmVzICs9IDQ7XG4gICAgfVxuXG4gICAgaWYgKGRlYnVnKSB7XG4gICAgICAgIGNvbnNvbGUubG9nKGBudW0gcHJvYmVzOiAke251bVByb2Jlc31gKTtcbiAgICAgICAgY29uc29sZS5sb2coYGJlc3QgZGlzdGFuY2U6ICR7YmVzdENlbGwuZH1gKTtcbiAgICB9XG5cbiAgICByZXR1cm4gYmVzdENlbGwucDtcbn1cblxuZnVuY3Rpb24gY29tcGFyZU1heChhLCBiKSB7XG4gICAgcmV0dXJuIGIubWF4IC0gYS5tYXg7XG59XG5cbmZ1bmN0aW9uIENlbGwoeCwgeSwgaCwgcG9seWdvbikge1xuICAgIHRoaXMucCA9IG5ldyBQb2ludCh4LCB5KTtcbiAgICB0aGlzLmggPSBoOyAvLyBoYWxmIHRoZSBjZWxsIHNpemVcbiAgICB0aGlzLmQgPSBwb2ludFRvUG9seWdvbkRpc3QodGhpcy5wLCBwb2x5Z29uKTsgLy8gZGlzdGFuY2UgZnJvbSBjZWxsIGNlbnRlciB0byBwb2x5Z29uXG4gICAgdGhpcy5tYXggPSB0aGlzLmQgKyB0aGlzLmggKiBNYXRoLlNRUlQyOyAvLyBtYXggZGlzdGFuY2UgdG8gcG9seWdvbiB3aXRoaW4gYSBjZWxsXG59XG5cbi8vIHNpZ25lZCBkaXN0YW5jZSBmcm9tIHBvaW50IHRvIHBvbHlnb24gb3V0bGluZSAobmVnYXRpdmUgaWYgcG9pbnQgaXMgb3V0c2lkZSlcbmZ1bmN0aW9uIHBvaW50VG9Qb2x5Z29uRGlzdChwLCBwb2x5Z29uKSB7XG4gICAgbGV0IGluc2lkZSA9IGZhbHNlO1xuICAgIGxldCBtaW5EaXN0U3EgPSBJbmZpbml0eTtcblxuICAgIGZvciAobGV0IGsgPSAwOyBrIDwgcG9seWdvbi5sZW5ndGg7IGsrKykge1xuICAgICAgICBjb25zdCByaW5nID0gcG9seWdvbltrXTtcblxuICAgICAgICBmb3IgKGxldCBpID0gMCwgbGVuID0gcmluZy5sZW5ndGgsIGogPSBsZW4gLSAxOyBpIDwgbGVuOyBqID0gaSsrKSB7XG4gICAgICAgICAgICBjb25zdCBhID0gcmluZ1tpXTtcbiAgICAgICAgICAgIGNvbnN0IGIgPSByaW5nW2pdO1xuXG4gICAgICAgICAgICBpZiAoKGEueSA+IHAueSAhPT0gYi55ID4gcC55KSAmJlxuICAgICAgICAgICAgICAgIChwLnggPCAoYi54IC0gYS54KSAqIChwLnkgLSBhLnkpIC8gKGIueSAtIGEueSkgKyBhLngpKSBpbnNpZGUgPSAhaW5zaWRlO1xuXG4gICAgICAgICAgICBtaW5EaXN0U3EgPSBNYXRoLm1pbihtaW5EaXN0U3EsIGRpc3RUb1NlZ21lbnRTcXVhcmVkKHAsIGEsIGIpKTtcbiAgICAgICAgfVxuICAgIH1cblxuICAgIHJldHVybiAoaW5zaWRlID8gMSA6IC0xKSAqIE1hdGguc3FydChtaW5EaXN0U3EpO1xufVxuXG4vLyBnZXQgcG9seWdvbiBjZW50cm9pZFxuZnVuY3Rpb24gZ2V0Q2VudHJvaWRDZWxsKHBvbHlnb24pIHtcbiAgICBsZXQgYXJlYSA9IDA7XG4gICAgbGV0IHggPSAwO1xuICAgIGxldCB5ID0gMDtcbiAgICBjb25zdCBwb2ludHMgPSBwb2x5Z29uWzBdO1xuICAgIGZvciAobGV0IGkgPSAwLCBsZW4gPSBwb2ludHMubGVuZ3RoLCBqID0gbGVuIC0gMTsgaSA8IGxlbjsgaiA9IGkrKykge1xuICAgICAgICBjb25zdCBhID0gcG9pbnRzW2ldO1xuICAgICAgICBjb25zdCBiID0gcG9pbnRzW2pdO1xuICAgICAgICBjb25zdCBmID0gYS54ICogYi55IC0gYi54ICogYS55O1xuICAgICAgICB4ICs9IChhLnggKyBiLngpICogZjtcbiAgICAgICAgeSArPSAoYS55ICsgYi55KSAqIGY7XG4gICAgICAgIGFyZWEgKz0gZiAqIDM7XG4gICAgfVxuICAgIHJldHVybiBuZXcgQ2VsbCh4IC8gYXJlYSwgeSAvIGFyZWEsIDAsIHBvbHlnb24pO1xufVxuIiwiLyoqXG4gKiBKUyBJbXBsZW1lbnRhdGlvbiBvZiBNdXJtdXJIYXNoMyAocjEzNikgKGFzIG9mIE1heSAyMCwgMjAxMSlcbiAqIFxuICogQGF1dGhvciA8YSBocmVmPVwibWFpbHRvOmdhcnkuY291cnRAZ21haWwuY29tXCI+R2FyeSBDb3VydDwvYT5cbiAqIEBzZWUgaHR0cDovL2dpdGh1Yi5jb20vZ2FyeWNvdXJ0L211cm11cmhhc2gtanNcbiAqIEBhdXRob3IgPGEgaHJlZj1cIm1haWx0bzphYXBwbGVieUBnbWFpbC5jb21cIj5BdXN0aW4gQXBwbGVieTwvYT5cbiAqIEBzZWUgaHR0cDovL3NpdGVzLmdvb2dsZS5jb20vc2l0ZS9tdXJtdXJoYXNoL1xuICogXG4gKiBAcGFyYW0ge3N0cmluZ30ga2V5IEFTQ0lJIG9ubHlcbiAqIEBwYXJhbSB7bnVtYmVyfSBzZWVkIFBvc2l0aXZlIGludGVnZXIgb25seVxuICogQHJldHVybiB7bnVtYmVyfSAzMi1iaXQgcG9zaXRpdmUgaW50ZWdlciBoYXNoIFxuICovXG5cbmZ1bmN0aW9uIG11cm11cmhhc2gzXzMyX2djKGtleSwgc2VlZCkge1xuXHR2YXIgcmVtYWluZGVyLCBieXRlcywgaDEsIGgxYiwgYzEsIGMxYiwgYzIsIGMyYiwgazEsIGk7XG5cdFxuXHRyZW1haW5kZXIgPSBrZXkubGVuZ3RoICYgMzsgLy8ga2V5Lmxlbmd0aCAlIDRcblx0Ynl0ZXMgPSBrZXkubGVuZ3RoIC0gcmVtYWluZGVyO1xuXHRoMSA9IHNlZWQ7XG5cdGMxID0gMHhjYzllMmQ1MTtcblx0YzIgPSAweDFiODczNTkzO1xuXHRpID0gMDtcblx0XG5cdHdoaWxlIChpIDwgYnl0ZXMpIHtcblx0ICBcdGsxID0gXG5cdCAgXHQgICgoa2V5LmNoYXJDb2RlQXQoaSkgJiAweGZmKSkgfFxuXHQgIFx0ICAoKGtleS5jaGFyQ29kZUF0KCsraSkgJiAweGZmKSA8PCA4KSB8XG5cdCAgXHQgICgoa2V5LmNoYXJDb2RlQXQoKytpKSAmIDB4ZmYpIDw8IDE2KSB8XG5cdCAgXHQgICgoa2V5LmNoYXJDb2RlQXQoKytpKSAmIDB4ZmYpIDw8IDI0KTtcblx0XHQrK2k7XG5cdFx0XG5cdFx0azEgPSAoKCgoazEgJiAweGZmZmYpICogYzEpICsgKCgoKGsxID4+PiAxNikgKiBjMSkgJiAweGZmZmYpIDw8IDE2KSkpICYgMHhmZmZmZmZmZjtcblx0XHRrMSA9IChrMSA8PCAxNSkgfCAoazEgPj4+IDE3KTtcblx0XHRrMSA9ICgoKChrMSAmIDB4ZmZmZikgKiBjMikgKyAoKCgoazEgPj4+IDE2KSAqIGMyKSAmIDB4ZmZmZikgPDwgMTYpKSkgJiAweGZmZmZmZmZmO1xuXG5cdFx0aDEgXj0gazE7XG4gICAgICAgIGgxID0gKGgxIDw8IDEzKSB8IChoMSA+Pj4gMTkpO1xuXHRcdGgxYiA9ICgoKChoMSAmIDB4ZmZmZikgKiA1KSArICgoKChoMSA+Pj4gMTYpICogNSkgJiAweGZmZmYpIDw8IDE2KSkpICYgMHhmZmZmZmZmZjtcblx0XHRoMSA9ICgoKGgxYiAmIDB4ZmZmZikgKyAweDZiNjQpICsgKCgoKGgxYiA+Pj4gMTYpICsgMHhlNjU0KSAmIDB4ZmZmZikgPDwgMTYpKTtcblx0fVxuXHRcblx0azEgPSAwO1xuXHRcblx0c3dpdGNoIChyZW1haW5kZXIpIHtcblx0XHRjYXNlIDM6IGsxIF49IChrZXkuY2hhckNvZGVBdChpICsgMikgJiAweGZmKSA8PCAxNjtcblx0XHRjYXNlIDI6IGsxIF49IChrZXkuY2hhckNvZGVBdChpICsgMSkgJiAweGZmKSA8PCA4O1xuXHRcdGNhc2UgMTogazEgXj0gKGtleS5jaGFyQ29kZUF0KGkpICYgMHhmZik7XG5cdFx0XG5cdFx0azEgPSAoKChrMSAmIDB4ZmZmZikgKiBjMSkgKyAoKCgoazEgPj4+IDE2KSAqIGMxKSAmIDB4ZmZmZikgPDwgMTYpKSAmIDB4ZmZmZmZmZmY7XG5cdFx0azEgPSAoazEgPDwgMTUpIHwgKGsxID4+PiAxNyk7XG5cdFx0azEgPSAoKChrMSAmIDB4ZmZmZikgKiBjMikgKyAoKCgoazEgPj4+IDE2KSAqIGMyKSAmIDB4ZmZmZikgPDwgMTYpKSAmIDB4ZmZmZmZmZmY7XG5cdFx0aDEgXj0gazE7XG5cdH1cblx0XG5cdGgxIF49IGtleS5sZW5ndGg7XG5cblx0aDEgXj0gaDEgPj4+IDE2O1xuXHRoMSA9ICgoKGgxICYgMHhmZmZmKSAqIDB4ODVlYmNhNmIpICsgKCgoKGgxID4+PiAxNikgKiAweDg1ZWJjYTZiKSAmIDB4ZmZmZikgPDwgMTYpKSAmIDB4ZmZmZmZmZmY7XG5cdGgxIF49IGgxID4+PiAxMztcblx0aDEgPSAoKCgoaDEgJiAweGZmZmYpICogMHhjMmIyYWUzNSkgKyAoKCgoaDEgPj4+IDE2KSAqIDB4YzJiMmFlMzUpICYgMHhmZmZmKSA8PCAxNikpKSAmIDB4ZmZmZmZmZmY7XG5cdGgxIF49IGgxID4+PiAxNjtcblxuXHRyZXR1cm4gaDEgPj4+IDA7XG59XG5cbmlmKHR5cGVvZiBtb2R1bGUgIT09IFwidW5kZWZpbmVkXCIpIHtcbiAgbW9kdWxlLmV4cG9ydHMgPSBtdXJtdXJoYXNoM18zMl9nY1xufSIsIi8qKlxuICogSlMgSW1wbGVtZW50YXRpb24gb2YgTXVybXVySGFzaDJcbiAqIFxuICogQGF1dGhvciA8YSBocmVmPVwibWFpbHRvOmdhcnkuY291cnRAZ21haWwuY29tXCI+R2FyeSBDb3VydDwvYT5cbiAqIEBzZWUgaHR0cDovL2dpdGh1Yi5jb20vZ2FyeWNvdXJ0L211cm11cmhhc2gtanNcbiAqIEBhdXRob3IgPGEgaHJlZj1cIm1haWx0bzphYXBwbGVieUBnbWFpbC5jb21cIj5BdXN0aW4gQXBwbGVieTwvYT5cbiAqIEBzZWUgaHR0cDovL3NpdGVzLmdvb2dsZS5jb20vc2l0ZS9tdXJtdXJoYXNoL1xuICogXG4gKiBAcGFyYW0ge3N0cmluZ30gc3RyIEFTQ0lJIG9ubHlcbiAqIEBwYXJhbSB7bnVtYmVyfSBzZWVkIFBvc2l0aXZlIGludGVnZXIgb25seVxuICogQHJldHVybiB7bnVtYmVyfSAzMi1iaXQgcG9zaXRpdmUgaW50ZWdlciBoYXNoXG4gKi9cblxuZnVuY3Rpb24gbXVybXVyaGFzaDJfMzJfZ2Moc3RyLCBzZWVkKSB7XG4gIHZhclxuICAgIGwgPSBzdHIubGVuZ3RoLFxuICAgIGggPSBzZWVkIF4gbCxcbiAgICBpID0gMCxcbiAgICBrO1xuICBcbiAgd2hpbGUgKGwgPj0gNCkge1xuICBcdGsgPSBcbiAgXHQgICgoc3RyLmNoYXJDb2RlQXQoaSkgJiAweGZmKSkgfFxuICBcdCAgKChzdHIuY2hhckNvZGVBdCgrK2kpICYgMHhmZikgPDwgOCkgfFxuICBcdCAgKChzdHIuY2hhckNvZGVBdCgrK2kpICYgMHhmZikgPDwgMTYpIHxcbiAgXHQgICgoc3RyLmNoYXJDb2RlQXQoKytpKSAmIDB4ZmYpIDw8IDI0KTtcbiAgICBcbiAgICBrID0gKCgoayAmIDB4ZmZmZikgKiAweDViZDFlOTk1KSArICgoKChrID4+PiAxNikgKiAweDViZDFlOTk1KSAmIDB4ZmZmZikgPDwgMTYpKTtcbiAgICBrIF49IGsgPj4+IDI0O1xuICAgIGsgPSAoKChrICYgMHhmZmZmKSAqIDB4NWJkMWU5OTUpICsgKCgoKGsgPj4+IDE2KSAqIDB4NWJkMWU5OTUpICYgMHhmZmZmKSA8PCAxNikpO1xuXG5cdGggPSAoKChoICYgMHhmZmZmKSAqIDB4NWJkMWU5OTUpICsgKCgoKGggPj4+IDE2KSAqIDB4NWJkMWU5OTUpICYgMHhmZmZmKSA8PCAxNikpIF4gaztcblxuICAgIGwgLT0gNDtcbiAgICArK2k7XG4gIH1cbiAgXG4gIHN3aXRjaCAobCkge1xuICBjYXNlIDM6IGggXj0gKHN0ci5jaGFyQ29kZUF0KGkgKyAyKSAmIDB4ZmYpIDw8IDE2O1xuICBjYXNlIDI6IGggXj0gKHN0ci5jaGFyQ29kZUF0KGkgKyAxKSAmIDB4ZmYpIDw8IDg7XG4gIGNhc2UgMTogaCBePSAoc3RyLmNoYXJDb2RlQXQoaSkgJiAweGZmKTtcbiAgICAgICAgICBoID0gKCgoaCAmIDB4ZmZmZikgKiAweDViZDFlOTk1KSArICgoKChoID4+PiAxNikgKiAweDViZDFlOTk1KSAmIDB4ZmZmZikgPDwgMTYpKTtcbiAgfVxuXG4gIGggXj0gaCA+Pj4gMTM7XG4gIGggPSAoKChoICYgMHhmZmZmKSAqIDB4NWJkMWU5OTUpICsgKCgoKGggPj4+IDE2KSAqIDB4NWJkMWU5OTUpICYgMHhmZmZmKSA8PCAxNikpO1xuICBoIF49IGggPj4+IDE1O1xuXG4gIHJldHVybiBoID4+PiAwO1xufVxuXG5pZih0eXBlb2YgbW9kdWxlICE9PSB1bmRlZmluZWQpIHtcbiAgbW9kdWxlLmV4cG9ydHMgPSBtdXJtdXJoYXNoMl8zMl9nY1xufVxuIiwidmFyIG11cm11cjMgPSByZXF1aXJlKFwiLi9tdXJtdXJoYXNoM19nYy5qc1wiKVxudmFyIG11cm11cjIgPSByZXF1aXJlKFwiLi9tdXJtdXJoYXNoMl9nYy5qc1wiKVxuXG5tb2R1bGUuZXhwb3J0cyA9IG11cm11cjNcbm1vZHVsZS5leHBvcnRzLm11cm11cjMgPSBtdXJtdXIzXG5tb2R1bGUuZXhwb3J0cy5tdXJtdXIyID0gbXVybXVyMlxuIiwiLy8gQGZsb3dcblxuaW1wb3J0IEFuY2hvciBmcm9tICcuL2FuY2hvcic7XG5cbmltcG9ydCB7IGdldEFuY2hvcnMsIGdldENlbnRlckFuY2hvciB9IGZyb20gJy4vZ2V0X2FuY2hvcnMnO1xuaW1wb3J0IGNsaXBMaW5lIGZyb20gJy4vY2xpcF9saW5lJztcbmltcG9ydCB7IHNoYXBlVGV4dCwgc2hhcGVJY29uLCBXcml0aW5nTW9kZSB9IGZyb20gJy4vc2hhcGluZyc7XG5pbXBvcnQgeyBnZXRHbHlwaFF1YWRzLCBnZXRJY29uUXVhZHMgfSBmcm9tICcuL3F1YWRzJztcbmltcG9ydCBDb2xsaXNpb25GZWF0dXJlIGZyb20gJy4vY29sbGlzaW9uX2ZlYXR1cmUnO1xuaW1wb3J0IHsgd2Fybk9uY2UgfSBmcm9tICcuLi91dGlsL3V0aWwnO1xuaW1wb3J0IHtcbiAgICBhbGxvd3NWZXJ0aWNhbFdyaXRpbmdNb2RlLFxuICAgIGFsbG93c0xldHRlclNwYWNpbmdcbn0gZnJvbSAnLi4vdXRpbC9zY3JpcHRfZGV0ZWN0aW9uJztcbmltcG9ydCBmaW5kUG9sZU9mSW5hY2Nlc3NpYmlsaXR5IGZyb20gJy4uL3V0aWwvZmluZF9wb2xlX29mX2luYWNjZXNzaWJpbGl0eSc7XG5pbXBvcnQgY2xhc3NpZnlSaW5ncyBmcm9tICcuLi91dGlsL2NsYXNzaWZ5X3JpbmdzJztcbmltcG9ydCBFWFRFTlQgZnJvbSAnLi4vZGF0YS9leHRlbnQnO1xuaW1wb3J0IFN5bWJvbEJ1Y2tldCBmcm9tICcuLi9kYXRhL2J1Y2tldC9zeW1ib2xfYnVja2V0JztcbmltcG9ydCBFdmFsdWF0aW9uUGFyYW1ldGVycyBmcm9tICcuLi9zdHlsZS9ldmFsdWF0aW9uX3BhcmFtZXRlcnMnO1xuaW1wb3J0IHtGb3JtYXR0ZWR9IGZyb20gJy4uL3N0eWxlLXNwZWMvZXhwcmVzc2lvbi9kZWZpbml0aW9ucy9mb3JtYXR0ZWQnO1xuaW1wb3J0IHtTSVpFX1BBQ0tfRkFDVE9SfSBmcm9tICcuL3N5bWJvbF9zaXplJztcblxuaW1wb3J0IHR5cGUge1NoYXBpbmcsIFBvc2l0aW9uZWRJY29ufSBmcm9tICcuL3NoYXBpbmcnO1xuaW1wb3J0IHR5cGUge0NvbGxpc2lvbkJveEFycmF5fSBmcm9tICcuLi9kYXRhL2FycmF5X3R5cGVzJztcbmltcG9ydCB0eXBlIHtTeW1ib2xGZWF0dXJlfSBmcm9tICcuLi9kYXRhL2J1Y2tldC9zeW1ib2xfYnVja2V0JztcbmltcG9ydCB0eXBlIHtTdHlsZUltYWdlfSBmcm9tICcuLi9zdHlsZS9zdHlsZV9pbWFnZSc7XG5pbXBvcnQgdHlwZSB7U3R5bGVHbHlwaH0gZnJvbSAnLi4vc3R5bGUvc3R5bGVfZ2x5cGgnO1xuaW1wb3J0IHR5cGUgU3ltYm9sU3R5bGVMYXllciBmcm9tICcuLi9zdHlsZS9zdHlsZV9sYXllci9zeW1ib2xfc3R5bGVfbGF5ZXInO1xuaW1wb3J0IHR5cGUge0ltYWdlUG9zaXRpb259IGZyb20gJy4uL3JlbmRlci9pbWFnZV9hdGxhcyc7XG5pbXBvcnQgdHlwZSB7R2x5cGhQb3NpdGlvbn0gZnJvbSAnLi4vcmVuZGVyL2dseXBoX2F0bGFzJztcbmltcG9ydCB0eXBlIHtQb3NzaWJseUV2YWx1YXRlZFByb3BlcnR5VmFsdWV9IGZyb20gJy4uL3N0eWxlL3Byb3BlcnRpZXMnO1xuXG5pbXBvcnQgUG9pbnQgZnJvbSAnQG1hcGJveC9wb2ludC1nZW9tZXRyeSc7XG5pbXBvcnQgbXVybXVyMyBmcm9tICdtdXJtdXJoYXNoLWpzJztcblxuLy8gVGhlIHN5bWJvbCBsYXlvdXQgcHJvY2VzcyBuZWVkcyBgdGV4dC1zaXplYCBldmFsdWF0ZWQgYXQgdXAgdG8gZml2ZSBkaWZmZXJlbnQgem9vbSBsZXZlbHMsIGFuZFxuLy8gYGljb24tc2l6ZWAgYXQgdXAgdG8gdGhyZWU6XG4vL1xuLy8gICAxLiBgdGV4dC1zaXplYCBhdCB0aGUgem9vbSBsZXZlbCBvZiB0aGUgYnVja2V0LiBVc2VkIHRvIGNhbGN1bGF0ZSBhIHBlci1mZWF0dXJlIHNpemUgZm9yIHNvdXJjZSBgdGV4dC1zaXplYFxuLy8gICAgICAgZXhwcmVzc2lvbnMsIGFuZCB0byBjYWxjdWxhdGUgdGhlIGJveCBkaW1lbnNpb25zIGZvciBpY29uLXRleHQtZml0LlxuLy8gICAyLiBgaWNvbi1zaXplYCBhdCB0aGUgem9vbSBsZXZlbCBvZiB0aGUgYnVja2V0LiBVc2VkIHRvIGNhbGN1bGF0ZSBhIHBlci1mZWF0dXJlIHNpemUgZm9yIHNvdXJjZSBgaWNvbi1zaXplYFxuLy8gICAgICAgZXhwcmVzc2lvbnMuXG4vLyAgIDMuIGB0ZXh0LXNpemVgIGFuZCBgaWNvbi1zaXplYCBhdCB0aGUgem9vbSBsZXZlbCBvZiB0aGUgYnVja2V0LCBwbHVzIG9uZS4gVXNlZCB0byBjYWxjdWxhdGUgY29sbGlzaW9uIGJveGVzLlxuLy8gICA0LiBgdGV4dC1zaXplYCBhdCB6b29tIGxldmVsIDE4LiBVc2VkIGZvciBzb21ldGhpbmcgbGluZS1zeW1ib2wtcGxhY2VtZW50LXJlbGF0ZWQuXG4vLyAgIDUuICBGb3IgY29tcG9zaXRlIGAqLXNpemVgIGV4cHJlc3Npb25zOiB0d28gem9vbSBsZXZlbHMgb2YgY3VydmUgc3RvcHMgdGhhdCBcImNvdmVyXCIgdGhlIHpvb20gbGV2ZWwgb2YgdGhlXG4vLyAgICAgICBidWNrZXQuIFRoZXNlIGdvIGludG8gYSB2ZXJ0ZXggYnVmZmVyIGFuZCBhcmUgdXNlZCBieSB0aGUgc2hhZGVyIHRvIGludGVycG9sYXRlIHRoZSBzaXplIGF0IHJlbmRlciB0aW1lLlxuLy9cbi8vICgxKSBhbmQgKDIpIGFyZSBzdG9yZWQgaW4gYGJ1Y2tldC5sYXllcnNbMF0ubGF5b3V0YC4gVGhlIHJlbWFpbmRlciBhcmUgYmVsb3cuXG4vL1xudHlwZSBTaXplcyA9IHtcbiAgICBsYXlvdXRUZXh0U2l6ZTogUG9zc2libHlFdmFsdWF0ZWRQcm9wZXJ0eVZhbHVlPG51bWJlcj4sIC8vICgzKVxuICAgIGxheW91dEljb25TaXplOiBQb3NzaWJseUV2YWx1YXRlZFByb3BlcnR5VmFsdWU8bnVtYmVyPiwgLy8gKDMpXG4gICAgdGV4dE1heFNpemU6IFBvc3NpYmx5RXZhbHVhdGVkUHJvcGVydHlWYWx1ZTxudW1iZXI+LCAgICAvLyAoNClcbiAgICBjb21wb3NpdGVUZXh0U2l6ZXM6IFtQb3NzaWJseUV2YWx1YXRlZFByb3BlcnR5VmFsdWU8bnVtYmVyPiwgUG9zc2libHlFdmFsdWF0ZWRQcm9wZXJ0eVZhbHVlPG51bWJlcj5dLCAvLyAoNSlcbiAgICBjb21wb3NpdGVJY29uU2l6ZXM6IFtQb3NzaWJseUV2YWx1YXRlZFByb3BlcnR5VmFsdWU8bnVtYmVyPiwgUG9zc2libHlFdmFsdWF0ZWRQcm9wZXJ0eVZhbHVlPG51bWJlcj5dLCAvLyAoNSlcbn07XG5cbmV4cG9ydCBmdW5jdGlvbiBwZXJmb3JtU3ltYm9sTGF5b3V0KGJ1Y2tldDogU3ltYm9sQnVja2V0LFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICBnbHlwaE1hcDoge1tzdHJpbmddOiB7W251bWJlcl06ID9TdHlsZUdseXBofX0sXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgIGdseXBoUG9zaXRpb25zOiB7W3N0cmluZ106IHtbbnVtYmVyXTogR2x5cGhQb3NpdGlvbn19LFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICBpbWFnZU1hcDoge1tzdHJpbmddOiBTdHlsZUltYWdlfSxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgaW1hZ2VQb3NpdGlvbnM6IHtbc3RyaW5nXTogSW1hZ2VQb3NpdGlvbn0sXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgIHNob3dDb2xsaXNpb25Cb3hlczogYm9vbGVhbikge1xuICAgIGJ1Y2tldC5jcmVhdGVBcnJheXMoKTtcblxuICAgIGNvbnN0IHRpbGVTaXplID0gNTEyICogYnVja2V0Lm92ZXJzY2FsaW5nO1xuICAgIGJ1Y2tldC50aWxlUGl4ZWxSYXRpbyA9IEVYVEVOVCAvIHRpbGVTaXplO1xuICAgIGJ1Y2tldC5jb21wYXJlVGV4dCA9IHt9O1xuICAgIGJ1Y2tldC5pY29uc05lZWRMaW5lYXIgPSBmYWxzZTtcblxuICAgIGNvbnN0IGxheW91dCA9IGJ1Y2tldC5sYXllcnNbMF0ubGF5b3V0O1xuICAgIGNvbnN0IHVuZXZhbHVhdGVkTGF5b3V0VmFsdWVzID0gYnVja2V0LmxheWVyc1swXS5fdW5ldmFsdWF0ZWRMYXlvdXQuX3ZhbHVlcztcblxuICAgIGNvbnN0IHNpemVzID0ge307XG5cbiAgICBpZiAoYnVja2V0LnRleHRTaXplRGF0YS5mdW5jdGlvblR5cGUgPT09ICdjb21wb3NpdGUnKSB7XG4gICAgICAgIGNvbnN0IHttaW4sIG1heH0gPSBidWNrZXQudGV4dFNpemVEYXRhLnpvb21SYW5nZTtcbiAgICAgICAgc2l6ZXMuY29tcG9zaXRlVGV4dFNpemVzID0gW1xuICAgICAgICAgICAgdW5ldmFsdWF0ZWRMYXlvdXRWYWx1ZXNbJ3RleHQtc2l6ZSddLnBvc3NpYmx5RXZhbHVhdGUobmV3IEV2YWx1YXRpb25QYXJhbWV0ZXJzKG1pbikpLFxuICAgICAgICAgICAgdW5ldmFsdWF0ZWRMYXlvdXRWYWx1ZXNbJ3RleHQtc2l6ZSddLnBvc3NpYmx5RXZhbHVhdGUobmV3IEV2YWx1YXRpb25QYXJhbWV0ZXJzKG1heCkpXG4gICAgICAgIF07XG4gICAgfVxuXG4gICAgaWYgKGJ1Y2tldC5pY29uU2l6ZURhdGEuZnVuY3Rpb25UeXBlID09PSAnY29tcG9zaXRlJykge1xuICAgICAgICBjb25zdCB7bWluLCBtYXh9ID0gYnVja2V0Lmljb25TaXplRGF0YS56b29tUmFuZ2U7XG4gICAgICAgIHNpemVzLmNvbXBvc2l0ZUljb25TaXplcyA9IFtcbiAgICAgICAgICAgIHVuZXZhbHVhdGVkTGF5b3V0VmFsdWVzWydpY29uLXNpemUnXS5wb3NzaWJseUV2YWx1YXRlKG5ldyBFdmFsdWF0aW9uUGFyYW1ldGVycyhtaW4pKSxcbiAgICAgICAgICAgIHVuZXZhbHVhdGVkTGF5b3V0VmFsdWVzWydpY29uLXNpemUnXS5wb3NzaWJseUV2YWx1YXRlKG5ldyBFdmFsdWF0aW9uUGFyYW1ldGVycyhtYXgpKVxuICAgICAgICBdO1xuICAgIH1cblxuICAgIHNpemVzLmxheW91dFRleHRTaXplID0gdW5ldmFsdWF0ZWRMYXlvdXRWYWx1ZXNbJ3RleHQtc2l6ZSddLnBvc3NpYmx5RXZhbHVhdGUobmV3IEV2YWx1YXRpb25QYXJhbWV0ZXJzKGJ1Y2tldC56b29tICsgMSkpO1xuICAgIHNpemVzLmxheW91dEljb25TaXplID0gdW5ldmFsdWF0ZWRMYXlvdXRWYWx1ZXNbJ2ljb24tc2l6ZSddLnBvc3NpYmx5RXZhbHVhdGUobmV3IEV2YWx1YXRpb25QYXJhbWV0ZXJzKGJ1Y2tldC56b29tICsgMSkpO1xuICAgIHNpemVzLnRleHRNYXhTaXplID0gdW5ldmFsdWF0ZWRMYXlvdXRWYWx1ZXNbJ3RleHQtc2l6ZSddLnBvc3NpYmx5RXZhbHVhdGUobmV3IEV2YWx1YXRpb25QYXJhbWV0ZXJzKDE4KSk7XG5cbiAgICBjb25zdCBvbmVFbSA9IDI0O1xuICAgIGNvbnN0IGxpbmVIZWlnaHQgPSBsYXlvdXQuZ2V0KCd0ZXh0LWxpbmUtaGVpZ2h0JykgKiBvbmVFbTtcbiAgICBjb25zdCB0ZXh0QWxvbmdMaW5lID0gbGF5b3V0LmdldCgndGV4dC1yb3RhdGlvbi1hbGlnbm1lbnQnKSA9PT0gJ21hcCcgJiYgbGF5b3V0LmdldCgnc3ltYm9sLXBsYWNlbWVudCcpICE9PSAncG9pbnQnO1xuICAgIGNvbnN0IGtlZXBVcHJpZ2h0ID0gbGF5b3V0LmdldCgndGV4dC1rZWVwLXVwcmlnaHQnKTtcblxuXG4gICAgZm9yIChjb25zdCBmZWF0dXJlIG9mIGJ1Y2tldC5mZWF0dXJlcykge1xuICAgICAgICBjb25zdCBmb250c3RhY2sgPSBsYXlvdXQuZ2V0KCd0ZXh0LWZvbnQnKS5ldmFsdWF0ZShmZWF0dXJlLCB7fSkuam9pbignLCcpO1xuICAgICAgICBjb25zdCBnbHlwaFBvc2l0aW9uTWFwID0gZ2x5cGhQb3NpdGlvbnM7XG5cbiAgICAgICAgY29uc3Qgc2hhcGVkVGV4dE9yaWVudGF0aW9ucyA9IHt9O1xuICAgICAgICBjb25zdCB0ZXh0ID0gZmVhdHVyZS50ZXh0O1xuICAgICAgICBpZiAodGV4dCkge1xuICAgICAgICAgICAgY29uc3QgdW5mb3JtYXR0ZWRUZXh0ID0gdGV4dCBpbnN0YW5jZW9mIEZvcm1hdHRlZCA/IHRleHQudG9TdHJpbmcoKSA6IHRleHQ7XG4gICAgICAgICAgICBjb25zdCB0ZXh0T2Zmc2V0OiBbbnVtYmVyLCBudW1iZXJdID0gKGxheW91dC5nZXQoJ3RleHQtb2Zmc2V0JykuZXZhbHVhdGUoZmVhdHVyZSwge30pLm1hcCgodCk9PiB0ICogb25lRW0pOiBhbnkpO1xuICAgICAgICAgICAgY29uc3Qgc3BhY2luZyA9IGxheW91dC5nZXQoJ3RleHQtbGV0dGVyLXNwYWNpbmcnKS5ldmFsdWF0ZShmZWF0dXJlLCB7fSkgKiBvbmVFbTtcbiAgICAgICAgICAgIGNvbnN0IHNwYWNpbmdJZkFsbG93ZWQgPSBhbGxvd3NMZXR0ZXJTcGFjaW5nKHVuZm9ybWF0dGVkVGV4dCkgPyBzcGFjaW5nIDogMDtcbiAgICAgICAgICAgIGNvbnN0IHRleHRBbmNob3IgPSBsYXlvdXQuZ2V0KCd0ZXh0LWFuY2hvcicpLmV2YWx1YXRlKGZlYXR1cmUsIHt9KTtcbiAgICAgICAgICAgIGNvbnN0IHRleHRKdXN0aWZ5ID0gbGF5b3V0LmdldCgndGV4dC1qdXN0aWZ5JykuZXZhbHVhdGUoZmVhdHVyZSwge30pO1xuICAgICAgICAgICAgY29uc3QgbWF4V2lkdGggPSBsYXlvdXQuZ2V0KCdzeW1ib2wtcGxhY2VtZW50JykgPT09ICdwb2ludCcgP1xuICAgICAgICAgICAgICAgIGxheW91dC5nZXQoJ3RleHQtbWF4LXdpZHRoJykuZXZhbHVhdGUoZmVhdHVyZSwge30pICogb25lRW0gOlxuICAgICAgICAgICAgICAgIDA7XG5cbiAgICAgICAgICAgIHNoYXBlZFRleHRPcmllbnRhdGlvbnMuaG9yaXpvbnRhbCA9IHNoYXBlVGV4dCh0ZXh0LCBnbHlwaE1hcCwgZm9udHN0YWNrLCBtYXhXaWR0aCwgbGluZUhlaWdodCwgdGV4dEFuY2hvciwgdGV4dEp1c3RpZnksIHNwYWNpbmdJZkFsbG93ZWQsIHRleHRPZmZzZXQsIG9uZUVtLCBXcml0aW5nTW9kZS5ob3Jpem9udGFsKTtcbiAgICAgICAgICAgIGlmIChhbGxvd3NWZXJ0aWNhbFdyaXRpbmdNb2RlKHVuZm9ybWF0dGVkVGV4dCkgJiYgdGV4dEFsb25nTGluZSAmJiBrZWVwVXByaWdodCkge1xuICAgICAgICAgICAgICAgIHNoYXBlZFRleHRPcmllbnRhdGlvbnMudmVydGljYWwgPSBzaGFwZVRleHQodGV4dCwgZ2x5cGhNYXAsIGZvbnRzdGFjaywgbWF4V2lkdGgsIGxpbmVIZWlnaHQsIHRleHRBbmNob3IsIHRleHRKdXN0aWZ5LCBzcGFjaW5nSWZBbGxvd2VkLCB0ZXh0T2Zmc2V0LCBvbmVFbSwgV3JpdGluZ01vZGUudmVydGljYWwpO1xuICAgICAgICAgICAgfVxuICAgICAgICB9XG5cbiAgICAgICAgbGV0IHNoYXBlZEljb247XG4gICAgICAgIGlmIChmZWF0dXJlLmljb24pIHtcbiAgICAgICAgICAgIGNvbnN0IGltYWdlID0gaW1hZ2VNYXBbZmVhdHVyZS5pY29uXTtcbiAgICAgICAgICAgIGlmIChpbWFnZSkge1xuICAgICAgICAgICAgICAgIHNoYXBlZEljb24gPSBzaGFwZUljb24oXG4gICAgICAgICAgICAgICAgICAgIGltYWdlUG9zaXRpb25zW2ZlYXR1cmUuaWNvbl0sXG4gICAgICAgICAgICAgICAgICAgIGxheW91dC5nZXQoJ2ljb24tb2Zmc2V0JykuZXZhbHVhdGUoZmVhdHVyZSwge30pLFxuICAgICAgICAgICAgICAgICAgICBsYXlvdXQuZ2V0KCdpY29uLWFuY2hvcicpLmV2YWx1YXRlKGZlYXR1cmUsIHt9KSk7XG4gICAgICAgICAgICAgICAgaWYgKGJ1Y2tldC5zZGZJY29ucyA9PT0gdW5kZWZpbmVkKSB7XG4gICAgICAgICAgICAgICAgICAgIGJ1Y2tldC5zZGZJY29ucyA9IGltYWdlLnNkZjtcbiAgICAgICAgICAgICAgICB9IGVsc2UgaWYgKGJ1Y2tldC5zZGZJY29ucyAhPT0gaW1hZ2Uuc2RmKSB7XG4gICAgICAgICAgICAgICAgICAgIHdhcm5PbmNlKCdTdHlsZSBzaGVldCB3YXJuaW5nOiBDYW5ub3QgbWl4IFNERiBhbmQgbm9uLVNERiBpY29ucyBpbiBvbmUgYnVmZmVyJyk7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIGlmIChpbWFnZS5waXhlbFJhdGlvICE9PSBidWNrZXQucGl4ZWxSYXRpbykge1xuICAgICAgICAgICAgICAgICAgICBidWNrZXQuaWNvbnNOZWVkTGluZWFyID0gdHJ1ZTtcbiAgICAgICAgICAgICAgICB9IGVsc2UgaWYgKGxheW91dC5nZXQoJ2ljb24tcm90YXRlJykuY29uc3RhbnRPcigxKSAhPT0gMCkge1xuICAgICAgICAgICAgICAgICAgICBidWNrZXQuaWNvbnNOZWVkTGluZWFyID0gdHJ1ZTtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9XG4gICAgICAgIH1cblxuICAgICAgICBpZiAoc2hhcGVkVGV4dE9yaWVudGF0aW9ucy5ob3Jpem9udGFsIHx8IHNoYXBlZEljb24pIHtcbiAgICAgICAgICAgIGFkZEZlYXR1cmUoYnVja2V0LCBmZWF0dXJlLCBzaGFwZWRUZXh0T3JpZW50YXRpb25zLCBzaGFwZWRJY29uLCBnbHlwaFBvc2l0aW9uTWFwLCBzaXplcyk7XG4gICAgICAgIH1cbiAgICB9XG5cbiAgICBpZiAoc2hvd0NvbGxpc2lvbkJveGVzKSB7XG4gICAgICAgIGJ1Y2tldC5nZW5lcmF0ZUNvbGxpc2lvbkRlYnVnQnVmZmVycygpO1xuICAgIH1cbn1cblxuXG4vKipcbiAqIEdpdmVuIGEgZmVhdHVyZSBhbmQgaXRzIHNoYXBlZCB0ZXh0IGFuZCBpY29uIGRhdGEsIGFkZCBhICdzeW1ib2xcbiAqIGluc3RhbmNlJyBmb3IgZWFjaCBfcG9zc2libGVfIHBsYWNlbWVudCBvZiB0aGUgc3ltYm9sIGZlYXR1cmUuXG4gKiAoQXQgcmVuZGVyIHRpbWVQbGFjZVN5bWJvbHMjcGxhY2UoKSBzZWxlY3RzIHdoaWNoIG9mIHRoZXNlIGluc3RhbmNlcyB0b1xuICogc2hvdyBvciBoaWRlIGJhc2VkIG9uIGNvbGxpc2lvbnMgd2l0aCBzeW1ib2xzIGluIG90aGVyIGxheWVycy4pXG4gKiBAcHJpdmF0ZVxuICovXG5mdW5jdGlvbiBhZGRGZWF0dXJlKGJ1Y2tldDogU3ltYm9sQnVja2V0LFxuICAgICAgICAgICAgICAgICAgICBmZWF0dXJlOiBTeW1ib2xGZWF0dXJlLFxuICAgICAgICAgICAgICAgICAgICBzaGFwZWRUZXh0T3JpZW50YXRpb25zOiBhbnksXG4gICAgICAgICAgICAgICAgICAgIHNoYXBlZEljb246IFBvc2l0aW9uZWRJY29uIHwgdm9pZCxcbiAgICAgICAgICAgICAgICAgICAgZ2x5cGhQb3NpdGlvbk1hcDoge1tzdHJpbmddOiB7W251bWJlcl06IEdseXBoUG9zaXRpb259fSxcbiAgICAgICAgICAgICAgICAgICAgc2l6ZXM6IFNpemVzKSB7XG4gICAgY29uc3QgbGF5b3V0VGV4dFNpemUgPSBzaXplcy5sYXlvdXRUZXh0U2l6ZS5ldmFsdWF0ZShmZWF0dXJlLCB7fSk7XG4gICAgY29uc3QgbGF5b3V0SWNvblNpemUgPSBzaXplcy5sYXlvdXRJY29uU2l6ZS5ldmFsdWF0ZShmZWF0dXJlLCB7fSk7XG5cbiAgICAvLyBUbyByZWR1Y2UgdGhlIG51bWJlciBvZiBsYWJlbHMgdGhhdCBqdW1wIGFyb3VuZCB3aGVuIHpvb21pbmcgd2UgbmVlZFxuICAgIC8vIHRvIHVzZSBhIHRleHQtc2l6ZSB2YWx1ZSB0aGF0IGlzIHRoZSBzYW1lIGZvciBhbGwgem9vbSBsZXZlbHMuXG4gICAgLy8gYnVja2V0IGNhbGN1bGF0ZXMgdGV4dC1zaXplIGF0IGEgaGlnaCB6b29tIGxldmVsIHNvIHRoYXQgYWxsIHRpbGVzIGNhblxuICAgIC8vIHVzZSB0aGUgc2FtZSB2YWx1ZSB3aGVuIGNhbGN1bGF0aW5nIGFuY2hvciBwb3NpdGlvbnMuXG4gICAgbGV0IHRleHRNYXhTaXplID0gc2l6ZXMudGV4dE1heFNpemUuZXZhbHVhdGUoZmVhdHVyZSwge30pO1xuICAgIGlmICh0ZXh0TWF4U2l6ZSA9PT0gdW5kZWZpbmVkKSB7XG4gICAgICAgIHRleHRNYXhTaXplID0gbGF5b3V0VGV4dFNpemU7XG4gICAgfVxuXG4gICAgY29uc3QgbGF5b3V0ID0gYnVja2V0LmxheWVyc1swXS5sYXlvdXQ7XG4gICAgY29uc3QgdGV4dE9mZnNldCA9IGxheW91dC5nZXQoJ3RleHQtb2Zmc2V0JykuZXZhbHVhdGUoZmVhdHVyZSwge30pO1xuICAgIGNvbnN0IGljb25PZmZzZXQgPSBsYXlvdXQuZ2V0KCdpY29uLW9mZnNldCcpLmV2YWx1YXRlKGZlYXR1cmUsIHt9KTtcblxuICAgIGNvbnN0IGdseXBoU2l6ZSA9IDI0LFxuICAgICAgICBmb250U2NhbGUgPSBsYXlvdXRUZXh0U2l6ZSAvIGdseXBoU2l6ZSxcbiAgICAgICAgdGV4dEJveFNjYWxlID0gYnVja2V0LnRpbGVQaXhlbFJhdGlvICogZm9udFNjYWxlLFxuICAgICAgICB0ZXh0TWF4Qm94U2NhbGUgPSBidWNrZXQudGlsZVBpeGVsUmF0aW8gKiB0ZXh0TWF4U2l6ZSAvIGdseXBoU2l6ZSxcbiAgICAgICAgaWNvbkJveFNjYWxlID0gYnVja2V0LnRpbGVQaXhlbFJhdGlvICogbGF5b3V0SWNvblNpemUsXG4gICAgICAgIHN5bWJvbE1pbkRpc3RhbmNlID0gYnVja2V0LnRpbGVQaXhlbFJhdGlvICogbGF5b3V0LmdldCgnc3ltYm9sLXNwYWNpbmcnKSxcbiAgICAgICAgdGV4dFBhZGRpbmcgPSBsYXlvdXQuZ2V0KCd0ZXh0LXBhZGRpbmcnKSAqIGJ1Y2tldC50aWxlUGl4ZWxSYXRpbyxcbiAgICAgICAgaWNvblBhZGRpbmcgPSBsYXlvdXQuZ2V0KCdpY29uLXBhZGRpbmcnKSAqIGJ1Y2tldC50aWxlUGl4ZWxSYXRpbyxcbiAgICAgICAgdGV4dE1heEFuZ2xlID0gbGF5b3V0LmdldCgndGV4dC1tYXgtYW5nbGUnKSAvIDE4MCAqIE1hdGguUEksXG4gICAgICAgIHRleHRBbG9uZ0xpbmUgPSBsYXlvdXQuZ2V0KCd0ZXh0LXJvdGF0aW9uLWFsaWdubWVudCcpID09PSAnbWFwJyAmJiBsYXlvdXQuZ2V0KCdzeW1ib2wtcGxhY2VtZW50JykgIT09ICdwb2ludCcsXG4gICAgICAgIGljb25BbG9uZ0xpbmUgPSBsYXlvdXQuZ2V0KCdpY29uLXJvdGF0aW9uLWFsaWdubWVudCcpID09PSAnbWFwJyAmJiBsYXlvdXQuZ2V0KCdzeW1ib2wtcGxhY2VtZW50JykgIT09ICdwb2ludCcsXG4gICAgICAgIHN5bWJvbFBsYWNlbWVudCA9IGxheW91dC5nZXQoJ3N5bWJvbC1wbGFjZW1lbnQnKSxcbiAgICAgICAgdGV4dFJlcGVhdERpc3RhbmNlID0gc3ltYm9sTWluRGlzdGFuY2UgLyAyO1xuXG4gICAgY29uc3QgYWRkU3ltYm9sQXRBbmNob3IgPSAobGluZSwgYW5jaG9yKSA9PiB7XG4gICAgICAgIGlmIChhbmNob3IueCA8IDAgfHwgYW5jaG9yLnggPj0gRVhURU5UIHx8IGFuY2hvci55IDwgMCB8fCBhbmNob3IueSA+PSBFWFRFTlQpIHtcbiAgICAgICAgICAgIC8vIFN5bWJvbCBsYXllcnMgYXJlIGRyYXduIGFjcm9zcyB0aWxlIGJvdW5kYXJpZXMsIFdlIGZpbHRlciBvdXQgc3ltYm9sc1xuICAgICAgICAgICAgLy8gb3V0c2lkZSBvdXIgdGlsZSBib3VuZGFyaWVzICh3aGljaCBtYXkgYmUgaW5jbHVkZWQgaW4gdmVjdG9yIHRpbGUgYnVmZmVycylcbiAgICAgICAgICAgIC8vIHRvIHByZXZlbnQgZG91YmxlLWRyYXdpbmcgc3ltYm9scy5cbiAgICAgICAgICAgIHJldHVybjtcbiAgICAgICAgfVxuXG4gICAgICAgIGFkZFN5bWJvbChidWNrZXQsIGFuY2hvciwgbGluZSwgc2hhcGVkVGV4dE9yaWVudGF0aW9ucywgc2hhcGVkSWNvbiwgYnVja2V0LmxheWVyc1swXSxcbiAgICAgICAgICAgIGJ1Y2tldC5jb2xsaXNpb25Cb3hBcnJheSwgZmVhdHVyZS5pbmRleCwgZmVhdHVyZS5zb3VyY2VMYXllckluZGV4LCBidWNrZXQuaW5kZXgsXG4gICAgICAgICAgICB0ZXh0Qm94U2NhbGUsIHRleHRQYWRkaW5nLCB0ZXh0QWxvbmdMaW5lLCB0ZXh0T2Zmc2V0LFxuICAgICAgICAgICAgaWNvbkJveFNjYWxlLCBpY29uUGFkZGluZywgaWNvbkFsb25nTGluZSwgaWNvbk9mZnNldCxcbiAgICAgICAgICAgIGZlYXR1cmUsIGdseXBoUG9zaXRpb25NYXAsIHNpemVzKTtcbiAgICB9O1xuXG4gICAgaWYgKHN5bWJvbFBsYWNlbWVudCA9PT0gJ2xpbmUnKSB7XG4gICAgICAgIGZvciAoY29uc3QgbGluZSBvZiBjbGlwTGluZShmZWF0dXJlLmdlb21ldHJ5LCAwLCAwLCBFWFRFTlQsIEVYVEVOVCkpIHtcbiAgICAgICAgICAgIGNvbnN0IGFuY2hvcnMgPSBnZXRBbmNob3JzKFxuICAgICAgICAgICAgICAgIGxpbmUsXG4gICAgICAgICAgICAgICAgc3ltYm9sTWluRGlzdGFuY2UsXG4gICAgICAgICAgICAgICAgdGV4dE1heEFuZ2xlLFxuICAgICAgICAgICAgICAgIHNoYXBlZFRleHRPcmllbnRhdGlvbnMudmVydGljYWwgfHwgc2hhcGVkVGV4dE9yaWVudGF0aW9ucy5ob3Jpem9udGFsLFxuICAgICAgICAgICAgICAgIHNoYXBlZEljb24sXG4gICAgICAgICAgICAgICAgZ2x5cGhTaXplLFxuICAgICAgICAgICAgICAgIHRleHRNYXhCb3hTY2FsZSxcbiAgICAgICAgICAgICAgICBidWNrZXQub3ZlcnNjYWxpbmcsXG4gICAgICAgICAgICAgICAgRVhURU5UXG4gICAgICAgICAgICApO1xuICAgICAgICAgICAgZm9yIChjb25zdCBhbmNob3Igb2YgYW5jaG9ycykge1xuICAgICAgICAgICAgICAgIGNvbnN0IHNoYXBlZFRleHQgPSBzaGFwZWRUZXh0T3JpZW50YXRpb25zLmhvcml6b250YWw7XG4gICAgICAgICAgICAgICAgaWYgKCFzaGFwZWRUZXh0IHx8ICFhbmNob3JJc1Rvb0Nsb3NlKGJ1Y2tldCwgc2hhcGVkVGV4dC50ZXh0LCB0ZXh0UmVwZWF0RGlzdGFuY2UsIGFuY2hvcikpIHtcbiAgICAgICAgICAgICAgICAgICAgYWRkU3ltYm9sQXRBbmNob3IobGluZSwgYW5jaG9yKTtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICB9IGVsc2UgaWYgKHN5bWJvbFBsYWNlbWVudCA9PT0gJ2xpbmUtY2VudGVyJykge1xuICAgICAgICAvLyBObyBjbGlwcGluZywgbXVsdGlwbGUgbGluZXMgcGVyIGZlYXR1cmUgYXJlIGFsbG93ZWRcbiAgICAgICAgLy8gXCJsaW5lc1wiIHdpdGggb25seSBvbmUgcG9pbnQgYXJlIGlnbm9yZWQgYXMgaW4gY2xpcExpbmVzXG4gICAgICAgIGZvciAoY29uc3QgbGluZSBvZiBmZWF0dXJlLmdlb21ldHJ5KSB7XG4gICAgICAgICAgICBpZiAobGluZS5sZW5ndGggPiAxKSB7XG4gICAgICAgICAgICAgICAgY29uc3QgYW5jaG9yID0gZ2V0Q2VudGVyQW5jaG9yKFxuICAgICAgICAgICAgICAgICAgICBsaW5lLFxuICAgICAgICAgICAgICAgICAgICB0ZXh0TWF4QW5nbGUsXG4gICAgICAgICAgICAgICAgICAgIHNoYXBlZFRleHRPcmllbnRhdGlvbnMudmVydGljYWwgfHwgc2hhcGVkVGV4dE9yaWVudGF0aW9ucy5ob3Jpem9udGFsLFxuICAgICAgICAgICAgICAgICAgICBzaGFwZWRJY29uLFxuICAgICAgICAgICAgICAgICAgICBnbHlwaFNpemUsXG4gICAgICAgICAgICAgICAgICAgIHRleHRNYXhCb3hTY2FsZSk7XG4gICAgICAgICAgICAgICAgaWYgKGFuY2hvcikge1xuICAgICAgICAgICAgICAgICAgICBhZGRTeW1ib2xBdEFuY2hvcihsaW5lLCBhbmNob3IpO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgIH0gZWxzZSBpZiAoZmVhdHVyZS50eXBlID09PSAnUG9seWdvbicpIHtcbiAgICAgICAgZm9yIChjb25zdCBwb2x5Z29uIG9mIGNsYXNzaWZ5UmluZ3MoZmVhdHVyZS5nZW9tZXRyeSwgMCkpIHtcbiAgICAgICAgICAgIC8vIDE2IGhlcmUgcmVwcmVzZW50cyAyIHBpeGVsc1xuICAgICAgICAgICAgY29uc3QgcG9pID0gZmluZFBvbGVPZkluYWNjZXNzaWJpbGl0eShwb2x5Z29uLCAxNik7XG4gICAgICAgICAgICBhZGRTeW1ib2xBdEFuY2hvcihwb2x5Z29uWzBdLCBuZXcgQW5jaG9yKHBvaS54LCBwb2kueSwgMCkpO1xuICAgICAgICB9XG4gICAgfSBlbHNlIGlmIChmZWF0dXJlLnR5cGUgPT09ICdMaW5lU3RyaW5nJykge1xuICAgICAgICAvLyBodHRwczovL2dpdGh1Yi5jb20vbWFwYm94L21hcGJveC1nbC1qcy9pc3N1ZXMvMzgwOFxuICAgICAgICBmb3IgKGNvbnN0IGxpbmUgb2YgZmVhdHVyZS5nZW9tZXRyeSkge1xuICAgICAgICAgICAgYWRkU3ltYm9sQXRBbmNob3IobGluZSwgbmV3IEFuY2hvcihsaW5lWzBdLngsIGxpbmVbMF0ueSwgMCkpO1xuICAgICAgICB9XG4gICAgfSBlbHNlIGlmIChmZWF0dXJlLnR5cGUgPT09ICdQb2ludCcpIHtcbiAgICAgICAgZm9yIChjb25zdCBwb2ludHMgb2YgZmVhdHVyZS5nZW9tZXRyeSkge1xuICAgICAgICAgICAgZm9yIChjb25zdCBwb2ludCBvZiBwb2ludHMpIHtcbiAgICAgICAgICAgICAgICBhZGRTeW1ib2xBdEFuY2hvcihbcG9pbnRdLCBuZXcgQW5jaG9yKHBvaW50LngsIHBvaW50LnksIDApKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgIH1cbn1cblxuY29uc3QgTUFYX1BBQ0tFRF9TSVpFID0gNjU1MzU7XG5cbmZ1bmN0aW9uIGFkZFRleHRWZXJ0aWNlcyhidWNrZXQ6IFN5bWJvbEJ1Y2tldCxcbiAgICAgICAgICAgICAgICAgICAgICAgICBhbmNob3I6IFBvaW50LFxuICAgICAgICAgICAgICAgICAgICAgICAgIHNoYXBlZFRleHQ6IFNoYXBpbmcsXG4gICAgICAgICAgICAgICAgICAgICAgICAgbGF5ZXI6IFN5bWJvbFN0eWxlTGF5ZXIsXG4gICAgICAgICAgICAgICAgICAgICAgICAgdGV4dEFsb25nTGluZTogYm9vbGVhbixcbiAgICAgICAgICAgICAgICAgICAgICAgICBmZWF0dXJlOiBTeW1ib2xGZWF0dXJlLFxuICAgICAgICAgICAgICAgICAgICAgICAgIHRleHRPZmZzZXQ6IFtudW1iZXIsIG51bWJlcl0sXG4gICAgICAgICAgICAgICAgICAgICAgICAgbGluZUFycmF5OiB7bGluZVN0YXJ0SW5kZXg6IG51bWJlciwgbGluZUxlbmd0aDogbnVtYmVyfSxcbiAgICAgICAgICAgICAgICAgICAgICAgICB3cml0aW5nTW9kZTogbnVtYmVyLFxuICAgICAgICAgICAgICAgICAgICAgICAgIHBsYWNlZFRleHRTeW1ib2xJbmRpY2VzOiBBcnJheTxudW1iZXI+LFxuICAgICAgICAgICAgICAgICAgICAgICAgIGdseXBoUG9zaXRpb25NYXA6IHtbc3RyaW5nXToge1tudW1iZXJdOiBHbHlwaFBvc2l0aW9ufX0sXG4gICAgICAgICAgICAgICAgICAgICAgICAgc2l6ZXM6IFNpemVzKSB7XG4gICAgY29uc3QgZ2x5cGhRdWFkcyA9IGdldEdseXBoUXVhZHMoYW5jaG9yLCBzaGFwZWRUZXh0LFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGxheWVyLCB0ZXh0QWxvbmdMaW5lLCBmZWF0dXJlLCBnbHlwaFBvc2l0aW9uTWFwKTtcblxuICAgIGNvbnN0IHNpemVEYXRhID0gYnVja2V0LnRleHRTaXplRGF0YTtcbiAgICBsZXQgdGV4dFNpemVEYXRhID0gbnVsbDtcblxuICAgIGlmIChzaXplRGF0YS5mdW5jdGlvblR5cGUgPT09ICdzb3VyY2UnKSB7XG4gICAgICAgIHRleHRTaXplRGF0YSA9IFtcbiAgICAgICAgICAgIFNJWkVfUEFDS19GQUNUT1IgKiBsYXllci5sYXlvdXQuZ2V0KCd0ZXh0LXNpemUnKS5ldmFsdWF0ZShmZWF0dXJlLCB7fSlcbiAgICAgICAgXTtcbiAgICAgICAgaWYgKHRleHRTaXplRGF0YVswXSA+IE1BWF9QQUNLRURfU0laRSkge1xuICAgICAgICAgICAgd2Fybk9uY2UoYCR7YnVja2V0LmxheWVySWRzWzBdfTogVmFsdWUgZm9yIFwidGV4dC1zaXplXCIgaXMgPj0gMjU2LiBSZWR1Y2UgeW91ciBcInRleHQtc2l6ZVwiLmApO1xuICAgICAgICB9XG4gICAgfSBlbHNlIGlmIChzaXplRGF0YS5mdW5jdGlvblR5cGUgPT09ICdjb21wb3NpdGUnKSB7XG4gICAgICAgIHRleHRTaXplRGF0YSA9IFtcbiAgICAgICAgICAgIFNJWkVfUEFDS19GQUNUT1IgKiBzaXplcy5jb21wb3NpdGVUZXh0U2l6ZXNbMF0uZXZhbHVhdGUoZmVhdHVyZSwge30pLFxuICAgICAgICAgICAgU0laRV9QQUNLX0ZBQ1RPUiAqIHNpemVzLmNvbXBvc2l0ZVRleHRTaXplc1sxXS5ldmFsdWF0ZShmZWF0dXJlLCB7fSlcbiAgICAgICAgXTtcbiAgICAgICAgaWYgKHRleHRTaXplRGF0YVswXSA+IE1BWF9QQUNLRURfU0laRSB8fCB0ZXh0U2l6ZURhdGFbMV0gPiBNQVhfUEFDS0VEX1NJWkUpIHtcbiAgICAgICAgICAgIHdhcm5PbmNlKGAke2J1Y2tldC5sYXllcklkc1swXX06IFZhbHVlIGZvciBcInRleHQtc2l6ZVwiIGlzID49IDI1Ni4gUmVkdWNlIHlvdXIgXCJ0ZXh0LXNpemVcIi5gKTtcbiAgICAgICAgfVxuICAgIH1cblxuICAgIGJ1Y2tldC5hZGRTeW1ib2xzKFxuICAgICAgICBidWNrZXQudGV4dCxcbiAgICAgICAgZ2x5cGhRdWFkcyxcbiAgICAgICAgdGV4dFNpemVEYXRhLFxuICAgICAgICB0ZXh0T2Zmc2V0LFxuICAgICAgICB0ZXh0QWxvbmdMaW5lLFxuICAgICAgICBmZWF0dXJlLFxuICAgICAgICB3cml0aW5nTW9kZSxcbiAgICAgICAgYW5jaG9yLFxuICAgICAgICBsaW5lQXJyYXkubGluZVN0YXJ0SW5kZXgsXG4gICAgICAgIGxpbmVBcnJheS5saW5lTGVuZ3RoKTtcblxuICAgIC8vIFRoZSBwbGFjZWRTeW1ib2xBcnJheSBpcyB1c2VkIGF0IHJlbmRlciB0aW1lIGluIGRyYXdUaWxlU3ltYm9sc1xuICAgIC8vIFRoZXNlIGluZGljZXMgYWxsb3cgYWNjZXNzIHRvIHRoZSBhcnJheSBhdCBjb2xsaXNpb24gZGV0ZWN0aW9uIHRpbWVcbiAgICBwbGFjZWRUZXh0U3ltYm9sSW5kaWNlcy5wdXNoKGJ1Y2tldC50ZXh0LnBsYWNlZFN5bWJvbEFycmF5Lmxlbmd0aCAtIDEpO1xuXG4gICAgcmV0dXJuIGdseXBoUXVhZHMubGVuZ3RoICogNDtcbn1cblxuXG4vKipcbiAqIEFkZCBhIHNpbmdsZSBsYWJlbCAmIGljb24gcGxhY2VtZW50LlxuICpcbiAqIEBwcml2YXRlXG4gKi9cbmZ1bmN0aW9uIGFkZFN5bWJvbChidWNrZXQ6IFN5bWJvbEJ1Y2tldCxcbiAgICAgICAgICAgICAgICAgICBhbmNob3I6IEFuY2hvcixcbiAgICAgICAgICAgICAgICAgICBsaW5lOiBBcnJheTxQb2ludD4sXG4gICAgICAgICAgICAgICAgICAgc2hhcGVkVGV4dE9yaWVudGF0aW9uczogYW55LFxuICAgICAgICAgICAgICAgICAgIHNoYXBlZEljb246IFBvc2l0aW9uZWRJY29uIHwgdm9pZCxcbiAgICAgICAgICAgICAgICAgICBsYXllcjogU3ltYm9sU3R5bGVMYXllcixcbiAgICAgICAgICAgICAgICAgICBjb2xsaXNpb25Cb3hBcnJheTogQ29sbGlzaW9uQm94QXJyYXksXG4gICAgICAgICAgICAgICAgICAgZmVhdHVyZUluZGV4OiBudW1iZXIsXG4gICAgICAgICAgICAgICAgICAgc291cmNlTGF5ZXJJbmRleDogbnVtYmVyLFxuICAgICAgICAgICAgICAgICAgIGJ1Y2tldEluZGV4OiBudW1iZXIsXG4gICAgICAgICAgICAgICAgICAgdGV4dEJveFNjYWxlOiBudW1iZXIsXG4gICAgICAgICAgICAgICAgICAgdGV4dFBhZGRpbmc6IG51bWJlcixcbiAgICAgICAgICAgICAgICAgICB0ZXh0QWxvbmdMaW5lOiBib29sZWFuLFxuICAgICAgICAgICAgICAgICAgIHRleHRPZmZzZXQ6IFtudW1iZXIsIG51bWJlcl0sXG4gICAgICAgICAgICAgICAgICAgaWNvbkJveFNjYWxlOiBudW1iZXIsXG4gICAgICAgICAgICAgICAgICAgaWNvblBhZGRpbmc6IG51bWJlcixcbiAgICAgICAgICAgICAgICAgICBpY29uQWxvbmdMaW5lOiBib29sZWFuLFxuICAgICAgICAgICAgICAgICAgIGljb25PZmZzZXQ6IFtudW1iZXIsIG51bWJlcl0sXG4gICAgICAgICAgICAgICAgICAgZmVhdHVyZTogU3ltYm9sRmVhdHVyZSxcbiAgICAgICAgICAgICAgICAgICBnbHlwaFBvc2l0aW9uTWFwOiB7W3N0cmluZ106IHtbbnVtYmVyXTogR2x5cGhQb3NpdGlvbn19LFxuICAgICAgICAgICAgICAgICAgIHNpemVzOiBTaXplcykge1xuICAgIGNvbnN0IGxpbmVBcnJheSA9IGJ1Y2tldC5hZGRUb0xpbmVWZXJ0ZXhBcnJheShhbmNob3IsIGxpbmUpO1xuXG4gICAgbGV0IHRleHRDb2xsaXNpb25GZWF0dXJlLCBpY29uQ29sbGlzaW9uRmVhdHVyZTtcblxuICAgIGxldCBudW1JY29uVmVydGljZXMgPSAwO1xuICAgIGxldCBudW1HbHlwaFZlcnRpY2VzID0gMDtcbiAgICBsZXQgbnVtVmVydGljYWxHbHlwaFZlcnRpY2VzID0gMDtcbiAgICBjb25zdCBrZXkgPSBtdXJtdXIzKHNoYXBlZFRleHRPcmllbnRhdGlvbnMuaG9yaXpvbnRhbCA/IHNoYXBlZFRleHRPcmllbnRhdGlvbnMuaG9yaXpvbnRhbC50ZXh0IDogJycpO1xuICAgIGNvbnN0IHBsYWNlZFRleHRTeW1ib2xJbmRpY2VzID0gW107XG4gICAgaWYgKHNoYXBlZFRleHRPcmllbnRhdGlvbnMuaG9yaXpvbnRhbCkge1xuICAgICAgICAvLyBBcyBhIGNvbGxpc2lvbiBhcHByb3hpbWF0aW9uLCB3ZSBjYW4gdXNlIGVpdGhlciB0aGUgdmVydGljYWwgb3IgdGhlIGhvcml6b250YWwgdmVyc2lvbiBvZiB0aGUgZmVhdHVyZVxuICAgICAgICAvLyBXZSdyZSBjb3VudGluZyBvbiB0aGUgdHdvIHZlcnNpb25zIGhhdmluZyBzaW1pbGFyIGRpbWVuc2lvbnNcbiAgICAgICAgY29uc3QgdGV4dFJvdGF0ZSA9IGxheWVyLmxheW91dC5nZXQoJ3RleHQtcm90YXRlJykuZXZhbHVhdGUoZmVhdHVyZSwge30pO1xuICAgICAgICB0ZXh0Q29sbGlzaW9uRmVhdHVyZSA9IG5ldyBDb2xsaXNpb25GZWF0dXJlKGNvbGxpc2lvbkJveEFycmF5LCBsaW5lLCBhbmNob3IsIGZlYXR1cmVJbmRleCwgc291cmNlTGF5ZXJJbmRleCwgYnVja2V0SW5kZXgsIHNoYXBlZFRleHRPcmllbnRhdGlvbnMuaG9yaXpvbnRhbCwgdGV4dEJveFNjYWxlLCB0ZXh0UGFkZGluZywgdGV4dEFsb25nTGluZSwgYnVja2V0Lm92ZXJzY2FsaW5nLCB0ZXh0Um90YXRlKTtcbiAgICAgICAgbnVtR2x5cGhWZXJ0aWNlcyArPSBhZGRUZXh0VmVydGljZXMoYnVja2V0LCBhbmNob3IsIHNoYXBlZFRleHRPcmllbnRhdGlvbnMuaG9yaXpvbnRhbCwgbGF5ZXIsIHRleHRBbG9uZ0xpbmUsIGZlYXR1cmUsIHRleHRPZmZzZXQsIGxpbmVBcnJheSwgc2hhcGVkVGV4dE9yaWVudGF0aW9ucy52ZXJ0aWNhbCA/IFdyaXRpbmdNb2RlLmhvcml6b250YWwgOiBXcml0aW5nTW9kZS5ob3Jpem9udGFsT25seSwgcGxhY2VkVGV4dFN5bWJvbEluZGljZXMsIGdseXBoUG9zaXRpb25NYXAsIHNpemVzKTtcblxuICAgICAgICBpZiAoc2hhcGVkVGV4dE9yaWVudGF0aW9ucy52ZXJ0aWNhbCkge1xuICAgICAgICAgICAgbnVtVmVydGljYWxHbHlwaFZlcnRpY2VzICs9IGFkZFRleHRWZXJ0aWNlcyhidWNrZXQsIGFuY2hvciwgc2hhcGVkVGV4dE9yaWVudGF0aW9ucy52ZXJ0aWNhbCwgbGF5ZXIsIHRleHRBbG9uZ0xpbmUsIGZlYXR1cmUsIHRleHRPZmZzZXQsIGxpbmVBcnJheSwgV3JpdGluZ01vZGUudmVydGljYWwsIHBsYWNlZFRleHRTeW1ib2xJbmRpY2VzLCBnbHlwaFBvc2l0aW9uTWFwLCBzaXplcyk7XG4gICAgICAgIH1cbiAgICB9XG5cbiAgICBjb25zdCB0ZXh0Qm94U3RhcnRJbmRleCA9IHRleHRDb2xsaXNpb25GZWF0dXJlID8gdGV4dENvbGxpc2lvbkZlYXR1cmUuYm94U3RhcnRJbmRleCA6IGJ1Y2tldC5jb2xsaXNpb25Cb3hBcnJheS5sZW5ndGg7XG4gICAgY29uc3QgdGV4dEJveEVuZEluZGV4ID0gdGV4dENvbGxpc2lvbkZlYXR1cmUgPyB0ZXh0Q29sbGlzaW9uRmVhdHVyZS5ib3hFbmRJbmRleCA6IGJ1Y2tldC5jb2xsaXNpb25Cb3hBcnJheS5sZW5ndGg7XG5cbiAgICBpZiAoc2hhcGVkSWNvbikge1xuICAgICAgICBjb25zdCBpY29uUXVhZHMgPSBnZXRJY29uUXVhZHMoYW5jaG9yLCBzaGFwZWRJY29uLCBsYXllcixcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBpY29uQWxvbmdMaW5lLCBzaGFwZWRUZXh0T3JpZW50YXRpb25zLmhvcml6b250YWwsXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgZmVhdHVyZSk7XG4gICAgICAgIGNvbnN0IGljb25Sb3RhdGUgPSBsYXllci5sYXlvdXQuZ2V0KCdpY29uLXJvdGF0ZScpLmV2YWx1YXRlKGZlYXR1cmUsIHt9KTtcbiAgICAgICAgaWNvbkNvbGxpc2lvbkZlYXR1cmUgPSBuZXcgQ29sbGlzaW9uRmVhdHVyZShjb2xsaXNpb25Cb3hBcnJheSwgbGluZSwgYW5jaG9yLCBmZWF0dXJlSW5kZXgsIHNvdXJjZUxheWVySW5kZXgsIGJ1Y2tldEluZGV4LCBzaGFwZWRJY29uLCBpY29uQm94U2NhbGUsIGljb25QYWRkaW5nLCAvKmFsaWduIGJveGVzIHRvIGxpbmUqL2ZhbHNlLCBidWNrZXQub3ZlcnNjYWxpbmcsIGljb25Sb3RhdGUpO1xuXG4gICAgICAgIG51bUljb25WZXJ0aWNlcyA9IGljb25RdWFkcy5sZW5ndGggKiA0O1xuXG4gICAgICAgIGNvbnN0IHNpemVEYXRhID0gYnVja2V0Lmljb25TaXplRGF0YTtcbiAgICAgICAgbGV0IGljb25TaXplRGF0YSA9IG51bGw7XG5cbiAgICAgICAgaWYgKHNpemVEYXRhLmZ1bmN0aW9uVHlwZSA9PT0gJ3NvdXJjZScpIHtcbiAgICAgICAgICAgIGljb25TaXplRGF0YSA9IFtcbiAgICAgICAgICAgICAgICBTSVpFX1BBQ0tfRkFDVE9SICogbGF5ZXIubGF5b3V0LmdldCgnaWNvbi1zaXplJykuZXZhbHVhdGUoZmVhdHVyZSwge30pXG4gICAgICAgICAgICBdO1xuICAgICAgICAgICAgaWYgKGljb25TaXplRGF0YVswXSA+IE1BWF9QQUNLRURfU0laRSkge1xuICAgICAgICAgICAgICAgIHdhcm5PbmNlKGAke2J1Y2tldC5sYXllcklkc1swXX06IFZhbHVlIGZvciBcImljb24tc2l6ZVwiIGlzID49IDI1Ni4gUmVkdWNlIHlvdXIgXCJpY29uLXNpemVcIi5gKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfSBlbHNlIGlmIChzaXplRGF0YS5mdW5jdGlvblR5cGUgPT09ICdjb21wb3NpdGUnKSB7XG4gICAgICAgICAgICBpY29uU2l6ZURhdGEgPSBbXG4gICAgICAgICAgICAgICAgU0laRV9QQUNLX0ZBQ1RPUiAqIHNpemVzLmNvbXBvc2l0ZUljb25TaXplc1swXS5ldmFsdWF0ZShmZWF0dXJlLCB7fSksXG4gICAgICAgICAgICAgICAgU0laRV9QQUNLX0ZBQ1RPUiAqIHNpemVzLmNvbXBvc2l0ZUljb25TaXplc1sxXS5ldmFsdWF0ZShmZWF0dXJlLCB7fSlcbiAgICAgICAgICAgIF07XG4gICAgICAgICAgICBpZiAoaWNvblNpemVEYXRhWzBdID4gTUFYX1BBQ0tFRF9TSVpFIHx8IGljb25TaXplRGF0YVsxXSA+IE1BWF9QQUNLRURfU0laRSkge1xuICAgICAgICAgICAgICAgIHdhcm5PbmNlKGAke2J1Y2tldC5sYXllcklkc1swXX06IFZhbHVlIGZvciBcImljb24tc2l6ZVwiIGlzID49IDI1Ni4gUmVkdWNlIHlvdXIgXCJpY29uLXNpemVcIi5gKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfVxuXG4gICAgICAgIGJ1Y2tldC5hZGRTeW1ib2xzKFxuICAgICAgICAgICAgYnVja2V0Lmljb24sXG4gICAgICAgICAgICBpY29uUXVhZHMsXG4gICAgICAgICAgICBpY29uU2l6ZURhdGEsXG4gICAgICAgICAgICBpY29uT2Zmc2V0LFxuICAgICAgICAgICAgaWNvbkFsb25nTGluZSxcbiAgICAgICAgICAgIGZlYXR1cmUsXG4gICAgICAgICAgICBmYWxzZSxcbiAgICAgICAgICAgIGFuY2hvcixcbiAgICAgICAgICAgIGxpbmVBcnJheS5saW5lU3RhcnRJbmRleCxcbiAgICAgICAgICAgIGxpbmVBcnJheS5saW5lTGVuZ3RoKTtcbiAgICB9XG5cbiAgICBjb25zdCBpY29uQm94U3RhcnRJbmRleCA9IGljb25Db2xsaXNpb25GZWF0dXJlID8gaWNvbkNvbGxpc2lvbkZlYXR1cmUuYm94U3RhcnRJbmRleCA6IGJ1Y2tldC5jb2xsaXNpb25Cb3hBcnJheS5sZW5ndGg7XG4gICAgY29uc3QgaWNvbkJveEVuZEluZGV4ID0gaWNvbkNvbGxpc2lvbkZlYXR1cmUgPyBpY29uQ29sbGlzaW9uRmVhdHVyZS5ib3hFbmRJbmRleCA6IGJ1Y2tldC5jb2xsaXNpb25Cb3hBcnJheS5sZW5ndGg7XG5cbiAgICBpZiAoYnVja2V0LmdseXBoT2Zmc2V0QXJyYXkubGVuZ3RoID49IFN5bWJvbEJ1Y2tldC5NQVhfR0xZUEhTKSB3YXJuT25jZShcbiAgICAgICAgXCJUb28gbWFueSBnbHlwaHMgYmVpbmcgcmVuZGVyZWQgaW4gYSB0aWxlLiBTZWUgaHR0cHM6Ly9naXRodWIuY29tL21hcGJveC9tYXBib3gtZ2wtanMvaXNzdWVzLzI5MDdcIlxuICAgICk7XG5cbiAgICBidWNrZXQuc3ltYm9sSW5zdGFuY2VzLmVtcGxhY2VCYWNrKFxuICAgICAgICBhbmNob3IueCxcbiAgICAgICAgYW5jaG9yLnksXG4gICAgICAgIHBsYWNlZFRleHRTeW1ib2xJbmRpY2VzLmxlbmd0aCA+IDAgPyBwbGFjZWRUZXh0U3ltYm9sSW5kaWNlc1swXSA6IC0xLFxuICAgICAgICBwbGFjZWRUZXh0U3ltYm9sSW5kaWNlcy5sZW5ndGggPiAxID8gcGxhY2VkVGV4dFN5bWJvbEluZGljZXNbMV0gOiAtMSxcbiAgICAgICAga2V5LFxuICAgICAgICB0ZXh0Qm94U3RhcnRJbmRleCxcbiAgICAgICAgdGV4dEJveEVuZEluZGV4LFxuICAgICAgICBpY29uQm94U3RhcnRJbmRleCxcbiAgICAgICAgaWNvbkJveEVuZEluZGV4LFxuICAgICAgICBmZWF0dXJlSW5kZXgsXG4gICAgICAgIG51bUdseXBoVmVydGljZXMsXG4gICAgICAgIG51bVZlcnRpY2FsR2x5cGhWZXJ0aWNlcyxcbiAgICAgICAgbnVtSWNvblZlcnRpY2VzLFxuICAgICAgICAwKTtcbn1cblxuZnVuY3Rpb24gYW5jaG9ySXNUb29DbG9zZShidWNrZXQ6IGFueSwgdGV4dDogc3RyaW5nLCByZXBlYXREaXN0YW5jZTogbnVtYmVyLCBhbmNob3I6IFBvaW50KSB7XG4gICAgY29uc3QgY29tcGFyZVRleHQgPSBidWNrZXQuY29tcGFyZVRleHQ7XG4gICAgaWYgKCEodGV4dCBpbiBjb21wYXJlVGV4dCkpIHtcbiAgICAgICAgY29tcGFyZVRleHRbdGV4dF0gPSBbXTtcbiAgICB9IGVsc2Uge1xuICAgICAgICBjb25zdCBvdGhlckFuY2hvcnMgPSBjb21wYXJlVGV4dFt0ZXh0XTtcbiAgICAgICAgZm9yIChsZXQgayA9IG90aGVyQW5jaG9ycy5sZW5ndGggLSAxOyBrID49IDA7IGstLSkge1xuICAgICAgICAgICAgaWYgKGFuY2hvci5kaXN0KG90aGVyQW5jaG9yc1trXSkgPCByZXBlYXREaXN0YW5jZSkge1xuICAgICAgICAgICAgICAgIC8vIElmIGl0J3Mgd2l0aGluIHJlcGVhdERpc3RhbmNlIG9mIG9uZSBhbmNob3IsIHN0b3AgbG9va2luZ1xuICAgICAgICAgICAgICAgIHJldHVybiB0cnVlO1xuICAgICAgICAgICAgfVxuICAgICAgICB9XG4gICAgfVxuICAgIC8vIElmIGFuY2hvciBpcyBub3Qgd2l0aGluIHJlcGVhdERpc3RhbmNlIG9mIGFueSBvdGhlciBhbmNob3IsIGFkZCB0byBhcnJheVxuICAgIGNvbXBhcmVUZXh0W3RleHRdLnB1c2goYW5jaG9yKTtcbiAgICByZXR1cm4gZmFsc2U7XG59XG4iLCIvLyBAZmxvd1xuXG5pbXBvcnQgUG9pbnQgZnJvbSAnQG1hcGJveC9wb2ludC1nZW9tZXRyeSc7XG5cbmltcG9ydCB7IEdMWVBIX1BCRl9CT1JERVIgfSBmcm9tICcuLi9zdHlsZS9wYXJzZV9nbHlwaF9wYmYnO1xuXG5pbXBvcnQgdHlwZSBBbmNob3IgZnJvbSAnLi9hbmNob3InO1xuaW1wb3J0IHR5cGUge1Bvc2l0aW9uZWRJY29uLCBTaGFwaW5nfSBmcm9tICcuL3NoYXBpbmcnO1xuaW1wb3J0IHR5cGUgU3ltYm9sU3R5bGVMYXllciBmcm9tICcuLi9zdHlsZS9zdHlsZV9sYXllci9zeW1ib2xfc3R5bGVfbGF5ZXInO1xuaW1wb3J0IHR5cGUge0ZlYXR1cmV9IGZyb20gJy4uL3N0eWxlLXNwZWMvZXhwcmVzc2lvbic7XG5pbXBvcnQgdHlwZSB7R2x5cGhQb3NpdGlvbn0gZnJvbSAnLi4vcmVuZGVyL2dseXBoX2F0bGFzJztcblxuLyoqXG4gKiBBIHRleHR1cmVkIHF1YWQgZm9yIHJlbmRlcmluZyBhIHNpbmdsZSBpY29uIG9yIGdseXBoLlxuICpcbiAqIFRoZSB6b29tIHJhbmdlIHRoZSBnbHlwaCBjYW4gYmUgc2hvd24gaXMgZGVmaW5lZCBieSBtaW5TY2FsZSBhbmQgbWF4U2NhbGUuXG4gKlxuICogQHBhcmFtIHRsIFRoZSBvZmZzZXQgb2YgdGhlIHRvcCBsZWZ0IGNvcm5lciBmcm9tIHRoZSBhbmNob3IuXG4gKiBAcGFyYW0gdHIgVGhlIG9mZnNldCBvZiB0aGUgdG9wIHJpZ2h0IGNvcm5lciBmcm9tIHRoZSBhbmNob3IuXG4gKiBAcGFyYW0gYmwgVGhlIG9mZnNldCBvZiB0aGUgYm90dG9tIGxlZnQgY29ybmVyIGZyb20gdGhlIGFuY2hvci5cbiAqIEBwYXJhbSBiciBUaGUgb2Zmc2V0IG9mIHRoZSBib3R0b20gcmlnaHQgY29ybmVyIGZyb20gdGhlIGFuY2hvci5cbiAqIEBwYXJhbSB0ZXggVGhlIHRleHR1cmUgY29vcmRpbmF0ZXMuXG4gKlxuICogQHByaXZhdGVcbiAqL1xuZXhwb3J0IHR5cGUgU3ltYm9sUXVhZCA9IHtcbiAgICB0bDogUG9pbnQsXG4gICAgdHI6IFBvaW50LFxuICAgIGJsOiBQb2ludCxcbiAgICBicjogUG9pbnQsXG4gICAgdGV4OiB7XG4gICAgICAgIHg6IG51bWJlcixcbiAgICAgICAgeTogbnVtYmVyLFxuICAgICAgICB3OiBudW1iZXIsXG4gICAgICAgIGg6IG51bWJlclxuICAgIH0sXG4gICAgd3JpdGluZ01vZGU6IGFueSB8IHZvaWQsXG4gICAgZ2x5cGhPZmZzZXQ6IFtudW1iZXIsIG51bWJlcl1cbn07XG5cbi8qKlxuICogQ3JlYXRlIHRoZSBxdWFkcyB1c2VkIGZvciByZW5kZXJpbmcgYW4gaWNvbi5cbiAqIEBwcml2YXRlXG4gKi9cbmV4cG9ydCBmdW5jdGlvbiBnZXRJY29uUXVhZHMoYW5jaG9yOiBBbmNob3IsXG4gICAgICAgICAgICAgICAgICAgICAgc2hhcGVkSWNvbjogUG9zaXRpb25lZEljb24sXG4gICAgICAgICAgICAgICAgICAgICAgbGF5ZXI6IFN5bWJvbFN0eWxlTGF5ZXIsXG4gICAgICAgICAgICAgICAgICAgICAgYWxvbmdMaW5lOiBib29sZWFuLFxuICAgICAgICAgICAgICAgICAgICAgIHNoYXBlZFRleHQ6IFNoYXBpbmcsXG4gICAgICAgICAgICAgICAgICAgICAgZmVhdHVyZTogRmVhdHVyZSk6IEFycmF5PFN5bWJvbFF1YWQ+IHtcbiAgICBjb25zdCBpbWFnZSA9IHNoYXBlZEljb24uaW1hZ2U7XG4gICAgY29uc3QgbGF5b3V0ID0gbGF5ZXIubGF5b3V0O1xuXG4gICAgLy8gSWYgeW91IGhhdmUgYSAxMHB4IGljb24gdGhhdCBpc24ndCBwZXJmZWN0bHkgYWxpZ25lZCB0byB0aGUgcGl4ZWwgZ3JpZCBpdCB3aWxsIGNvdmVyIDExIGFjdHVhbFxuICAgIC8vIHBpeGVscy4gVGhlIHF1YWQgbmVlZHMgdG8gYmUgcGFkZGVkIHRvIGFjY291bnQgZm9yIHRoaXMsIG90aGVyd2lzZSB0aGV5J2xsIGxvb2sgc2xpZ2h0bHkgY2xpcHBlZFxuICAgIC8vIG9uIG9uZSBlZGdlIGluIHNvbWUgY2FzZXMuXG4gICAgY29uc3QgYm9yZGVyID0gMTtcblxuICAgIGNvbnN0IHRvcCA9IHNoYXBlZEljb24udG9wIC0gYm9yZGVyIC8gaW1hZ2UucGl4ZWxSYXRpbztcbiAgICBjb25zdCBsZWZ0ID0gc2hhcGVkSWNvbi5sZWZ0IC0gYm9yZGVyIC8gaW1hZ2UucGl4ZWxSYXRpbztcbiAgICBjb25zdCBib3R0b20gPSBzaGFwZWRJY29uLmJvdHRvbSArIGJvcmRlciAvIGltYWdlLnBpeGVsUmF0aW87XG4gICAgY29uc3QgcmlnaHQgPSBzaGFwZWRJY29uLnJpZ2h0ICsgYm9yZGVyIC8gaW1hZ2UucGl4ZWxSYXRpbztcbiAgICBsZXQgdGwsIHRyLCBiciwgYmw7XG5cbiAgICAvLyB0ZXh0LWZpdCBtb2RlXG4gICAgaWYgKGxheW91dC5nZXQoJ2ljb24tdGV4dC1maXQnKSAhPT0gJ25vbmUnICYmIHNoYXBlZFRleHQpIHtcbiAgICAgICAgY29uc3QgaWNvbldpZHRoID0gKHJpZ2h0IC0gbGVmdCksXG4gICAgICAgICAgICBpY29uSGVpZ2h0ID0gKGJvdHRvbSAtIHRvcCksXG4gICAgICAgICAgICBzaXplID0gbGF5b3V0LmdldCgndGV4dC1zaXplJykuZXZhbHVhdGUoZmVhdHVyZSwge30pIC8gMjQsXG4gICAgICAgICAgICB0ZXh0TGVmdCA9IHNoYXBlZFRleHQubGVmdCAqIHNpemUsXG4gICAgICAgICAgICB0ZXh0UmlnaHQgPSBzaGFwZWRUZXh0LnJpZ2h0ICogc2l6ZSxcbiAgICAgICAgICAgIHRleHRUb3AgPSBzaGFwZWRUZXh0LnRvcCAqIHNpemUsXG4gICAgICAgICAgICB0ZXh0Qm90dG9tID0gc2hhcGVkVGV4dC5ib3R0b20gKiBzaXplLFxuICAgICAgICAgICAgdGV4dFdpZHRoID0gdGV4dFJpZ2h0IC0gdGV4dExlZnQsXG4gICAgICAgICAgICB0ZXh0SGVpZ2h0ID0gdGV4dEJvdHRvbSAtIHRleHRUb3AsXG4gICAgICAgICAgICBwYWRUID0gbGF5b3V0LmdldCgnaWNvbi10ZXh0LWZpdC1wYWRkaW5nJylbMF0sXG4gICAgICAgICAgICBwYWRSID0gbGF5b3V0LmdldCgnaWNvbi10ZXh0LWZpdC1wYWRkaW5nJylbMV0sXG4gICAgICAgICAgICBwYWRCID0gbGF5b3V0LmdldCgnaWNvbi10ZXh0LWZpdC1wYWRkaW5nJylbMl0sXG4gICAgICAgICAgICBwYWRMID0gbGF5b3V0LmdldCgnaWNvbi10ZXh0LWZpdC1wYWRkaW5nJylbM10sXG4gICAgICAgICAgICBvZmZzZXRZID0gbGF5b3V0LmdldCgnaWNvbi10ZXh0LWZpdCcpID09PSAnd2lkdGgnID8gKHRleHRIZWlnaHQgLSBpY29uSGVpZ2h0KSAqIDAuNSA6IDAsXG4gICAgICAgICAgICBvZmZzZXRYID0gbGF5b3V0LmdldCgnaWNvbi10ZXh0LWZpdCcpID09PSAnaGVpZ2h0JyA/ICh0ZXh0V2lkdGggLSBpY29uV2lkdGgpICogMC41IDogMCxcbiAgICAgICAgICAgIHdpZHRoID0gbGF5b3V0LmdldCgnaWNvbi10ZXh0LWZpdCcpID09PSAnd2lkdGgnIHx8IGxheW91dC5nZXQoJ2ljb24tdGV4dC1maXQnKSA9PT0gJ2JvdGgnID8gdGV4dFdpZHRoIDogaWNvbldpZHRoLFxuICAgICAgICAgICAgaGVpZ2h0ID0gbGF5b3V0LmdldCgnaWNvbi10ZXh0LWZpdCcpID09PSAnaGVpZ2h0JyB8fCBsYXlvdXQuZ2V0KCdpY29uLXRleHQtZml0JykgPT09ICdib3RoJyA/IHRleHRIZWlnaHQgOiBpY29uSGVpZ2h0O1xuICAgICAgICB0bCA9IG5ldyBQb2ludCh0ZXh0TGVmdCArIG9mZnNldFggLSBwYWRMLCAgICAgICAgIHRleHRUb3AgKyBvZmZzZXRZIC0gcGFkVCk7XG4gICAgICAgIHRyID0gbmV3IFBvaW50KHRleHRMZWZ0ICsgb2Zmc2V0WCArIHBhZFIgKyB3aWR0aCwgdGV4dFRvcCArIG9mZnNldFkgLSBwYWRUKTtcbiAgICAgICAgYnIgPSBuZXcgUG9pbnQodGV4dExlZnQgKyBvZmZzZXRYICsgcGFkUiArIHdpZHRoLCB0ZXh0VG9wICsgb2Zmc2V0WSArIHBhZEIgKyBoZWlnaHQpO1xuICAgICAgICBibCA9IG5ldyBQb2ludCh0ZXh0TGVmdCArIG9mZnNldFggLSBwYWRMLCAgICAgICAgIHRleHRUb3AgKyBvZmZzZXRZICsgcGFkQiArIGhlaWdodCk7XG4gICAgLy8gTm9ybWFsIGljb24gc2l6ZSBtb2RlXG4gICAgfSBlbHNlIHtcbiAgICAgICAgdGwgPSBuZXcgUG9pbnQobGVmdCwgdG9wKTtcbiAgICAgICAgdHIgPSBuZXcgUG9pbnQocmlnaHQsIHRvcCk7XG4gICAgICAgIGJyID0gbmV3IFBvaW50KHJpZ2h0LCBib3R0b20pO1xuICAgICAgICBibCA9IG5ldyBQb2ludChsZWZ0LCBib3R0b20pO1xuICAgIH1cblxuICAgIGNvbnN0IGFuZ2xlID0gbGF5ZXIubGF5b3V0LmdldCgnaWNvbi1yb3RhdGUnKS5ldmFsdWF0ZShmZWF0dXJlLCB7fSkgKiBNYXRoLlBJIC8gMTgwO1xuXG4gICAgaWYgKGFuZ2xlKSB7XG4gICAgICAgIGNvbnN0IHNpbiA9IE1hdGguc2luKGFuZ2xlKSxcbiAgICAgICAgICAgIGNvcyA9IE1hdGguY29zKGFuZ2xlKSxcbiAgICAgICAgICAgIG1hdHJpeCA9IFtjb3MsIC1zaW4sIHNpbiwgY29zXTtcblxuICAgICAgICB0bC5fbWF0TXVsdChtYXRyaXgpO1xuICAgICAgICB0ci5fbWF0TXVsdChtYXRyaXgpO1xuICAgICAgICBibC5fbWF0TXVsdChtYXRyaXgpO1xuICAgICAgICBici5fbWF0TXVsdChtYXRyaXgpO1xuICAgIH1cblxuICAgIC8vIEljb24gcXVhZCBpcyBwYWRkZWQsIHNvIHRleHR1cmUgY29vcmRpbmF0ZXMgYWxzbyBuZWVkIHRvIGJlIHBhZGRlZC5cbiAgICByZXR1cm4gW3t0bCwgdHIsIGJsLCBiciwgdGV4OiBpbWFnZS5wYWRkZWRSZWN0LCB3cml0aW5nTW9kZTogdW5kZWZpbmVkLCBnbHlwaE9mZnNldDogWzAsIDBdfV07XG59XG5cbi8qKlxuICogQ3JlYXRlIHRoZSBxdWFkcyB1c2VkIGZvciByZW5kZXJpbmcgYSB0ZXh0IGxhYmVsLlxuICogQHByaXZhdGVcbiAqL1xuZXhwb3J0IGZ1bmN0aW9uIGdldEdseXBoUXVhZHMoYW5jaG9yOiBBbmNob3IsXG4gICAgICAgICAgICAgICAgICAgICAgIHNoYXBpbmc6IFNoYXBpbmcsXG4gICAgICAgICAgICAgICAgICAgICAgIGxheWVyOiBTeW1ib2xTdHlsZUxheWVyLFxuICAgICAgICAgICAgICAgICAgICAgICBhbG9uZ0xpbmU6IGJvb2xlYW4sXG4gICAgICAgICAgICAgICAgICAgICAgIGZlYXR1cmU6IEZlYXR1cmUsXG4gICAgICAgICAgICAgICAgICAgICAgIHBvc2l0aW9uczoge1tzdHJpbmddOiB7W251bWJlcl06IEdseXBoUG9zaXRpb259fSk6IEFycmF5PFN5bWJvbFF1YWQ+IHtcblxuICAgIGNvbnN0IG9uZUVtID0gMjQ7XG4gICAgY29uc3QgdGV4dFJvdGF0ZSA9IGxheWVyLmxheW91dC5nZXQoJ3RleHQtcm90YXRlJykuZXZhbHVhdGUoZmVhdHVyZSwge30pICogTWF0aC5QSSAvIDE4MDtcbiAgICBjb25zdCB0ZXh0T2Zmc2V0ID0gbGF5ZXIubGF5b3V0LmdldCgndGV4dC1vZmZzZXQnKS5ldmFsdWF0ZShmZWF0dXJlLCB7fSkubWFwKCh0KT0+IHQgKiBvbmVFbSk7XG5cbiAgICBjb25zdCBwb3NpdGlvbmVkR2x5cGhzID0gc2hhcGluZy5wb3NpdGlvbmVkR2x5cGhzO1xuICAgIGNvbnN0IHF1YWRzID0gW107XG5cblxuICAgIGZvciAobGV0IGsgPSAwOyBrIDwgcG9zaXRpb25lZEdseXBocy5sZW5ndGg7IGsrKykge1xuICAgICAgICBjb25zdCBwb3NpdGlvbmVkR2x5cGggPSBwb3NpdGlvbmVkR2x5cGhzW2tdO1xuICAgICAgICBjb25zdCBnbHlwaFBvc2l0aW9ucyA9IHBvc2l0aW9uc1twb3NpdGlvbmVkR2x5cGguZm9udFN0YWNrXTtcbiAgICAgICAgY29uc3QgZ2x5cGggPSBnbHlwaFBvc2l0aW9ucyAmJiBnbHlwaFBvc2l0aW9uc1twb3NpdGlvbmVkR2x5cGguZ2x5cGhdO1xuICAgICAgICBpZiAoIWdseXBoKSBjb250aW51ZTtcblxuICAgICAgICBjb25zdCByZWN0ID0gZ2x5cGgucmVjdDtcbiAgICAgICAgaWYgKCFyZWN0KSBjb250aW51ZTtcblxuICAgICAgICAvLyBUaGUgcmVjdHMgaGF2ZSBhbiBhZGRkaXRpb25hbCBidWZmZXIgdGhhdCBpcyBub3QgaW5jbHVkZWQgaW4gdGhlaXIgc2l6ZS5cbiAgICAgICAgY29uc3QgZ2x5cGhQYWRkaW5nID0gMS4wO1xuICAgICAgICBjb25zdCByZWN0QnVmZmVyID0gR0xZUEhfUEJGX0JPUkRFUiArIGdseXBoUGFkZGluZztcblxuICAgICAgICBjb25zdCBoYWxmQWR2YW5jZSA9IGdseXBoLm1ldHJpY3MuYWR2YW5jZSAqIHBvc2l0aW9uZWRHbHlwaC5zY2FsZSAvIDI7XG5cbiAgICAgICAgY29uc3QgZ2x5cGhPZmZzZXQgPSBhbG9uZ0xpbmUgP1xuICAgICAgICAgICAgW3Bvc2l0aW9uZWRHbHlwaC54ICsgaGFsZkFkdmFuY2UsIHBvc2l0aW9uZWRHbHlwaC55XSA6XG4gICAgICAgICAgICBbMCwgMF07XG5cbiAgICAgICAgY29uc3QgYnVpbHRJbk9mZnNldCA9IGFsb25nTGluZSA/XG4gICAgICAgICAgICBbMCwgMF0gOlxuICAgICAgICAgICAgW3Bvc2l0aW9uZWRHbHlwaC54ICsgaGFsZkFkdmFuY2UgKyB0ZXh0T2Zmc2V0WzBdLCBwb3NpdGlvbmVkR2x5cGgueSArIHRleHRPZmZzZXRbMV1dO1xuXG4gICAgICAgIGNvbnN0IHgxID0gKGdseXBoLm1ldHJpY3MubGVmdCAtIHJlY3RCdWZmZXIpICogcG9zaXRpb25lZEdseXBoLnNjYWxlIC0gaGFsZkFkdmFuY2UgKyBidWlsdEluT2Zmc2V0WzBdO1xuICAgICAgICBjb25zdCB5MSA9ICgtZ2x5cGgubWV0cmljcy50b3AgLSByZWN0QnVmZmVyKSAqIHBvc2l0aW9uZWRHbHlwaC5zY2FsZSArIGJ1aWx0SW5PZmZzZXRbMV07XG4gICAgICAgIGNvbnN0IHgyID0geDEgKyByZWN0LncgKiBwb3NpdGlvbmVkR2x5cGguc2NhbGU7XG4gICAgICAgIGNvbnN0IHkyID0geTEgKyByZWN0LmggKiBwb3NpdGlvbmVkR2x5cGguc2NhbGU7XG5cbiAgICAgICAgY29uc3QgdGwgPSBuZXcgUG9pbnQoeDEsIHkxKTtcbiAgICAgICAgY29uc3QgdHIgPSBuZXcgUG9pbnQoeDIsIHkxKTtcbiAgICAgICAgY29uc3QgYmwgID0gbmV3IFBvaW50KHgxLCB5Mik7XG4gICAgICAgIGNvbnN0IGJyID0gbmV3IFBvaW50KHgyLCB5Mik7XG5cbiAgICAgICAgaWYgKGFsb25nTGluZSAmJiBwb3NpdGlvbmVkR2x5cGgudmVydGljYWwpIHtcbiAgICAgICAgICAgIC8vIFZlcnRpY2FsLXN1cHBvcnRpbmcgZ2x5cGhzIGFyZSBsYWlkIG91dCBpbiAyNHgyNCBwb2ludCBib3hlcyAoMSBzcXVhcmUgZW0pXG4gICAgICAgICAgICAvLyBJbiBob3Jpem9udGFsIG9yaWVudGF0aW9uLCB0aGUgeSB2YWx1ZXMgZm9yIGdseXBocyBhcmUgYmVsb3cgdGhlIG1pZGxpbmVcbiAgICAgICAgICAgIC8vIGFuZCB3ZSB1c2UgYSBcInlPZmZzZXRcIiBvZiAtMTcgdG8gcHVsbCB0aGVtIHVwIHRvIHRoZSBtaWRkbGUuXG4gICAgICAgICAgICAvLyBCeSByb3RhdGluZyBjb3VudGVyLWNsb2Nrd2lzZSBhcm91bmQgdGhlIHBvaW50IGF0IHRoZSBjZW50ZXIgb2YgdGhlIGxlZnRcbiAgICAgICAgICAgIC8vIGVkZ2Ugb2YgYSAyNHgyNCBsYXlvdXQgYm94IGNlbnRlcmVkIGJlbG93IHRoZSBtaWRsaW5lLCB3ZSBhbGlnbiB0aGUgY2VudGVyXG4gICAgICAgICAgICAvLyBvZiB0aGUgZ2x5cGhzIHdpdGggdGhlIGhvcml6b250YWwgbWlkbGluZSwgc28gdGhlIHlPZmZzZXQgaXMgbm8gbG9uZ2VyXG4gICAgICAgICAgICAvLyBuZWNlc3NhcnksIGJ1dCB3ZSBhbHNvIHB1bGwgdGhlIGdseXBoIHRvIHRoZSBsZWZ0IGFsb25nIHRoZSB4IGF4aXNcbiAgICAgICAgICAgIGNvbnN0IGNlbnRlciA9IG5ldyBQb2ludCgtaGFsZkFkdmFuY2UsIGhhbGZBZHZhbmNlKTtcbiAgICAgICAgICAgIGNvbnN0IHZlcnRpY2FsUm90YXRpb24gPSAtTWF0aC5QSSAvIDI7XG4gICAgICAgICAgICBjb25zdCB4T2Zmc2V0Q29ycmVjdGlvbiA9IG5ldyBQb2ludCg1LCAwKTtcbiAgICAgICAgICAgIHRsLl9yb3RhdGVBcm91bmQodmVydGljYWxSb3RhdGlvbiwgY2VudGVyKS5fYWRkKHhPZmZzZXRDb3JyZWN0aW9uKTtcbiAgICAgICAgICAgIHRyLl9yb3RhdGVBcm91bmQodmVydGljYWxSb3RhdGlvbiwgY2VudGVyKS5fYWRkKHhPZmZzZXRDb3JyZWN0aW9uKTtcbiAgICAgICAgICAgIGJsLl9yb3RhdGVBcm91bmQodmVydGljYWxSb3RhdGlvbiwgY2VudGVyKS5fYWRkKHhPZmZzZXRDb3JyZWN0aW9uKTtcbiAgICAgICAgICAgIGJyLl9yb3RhdGVBcm91bmQodmVydGljYWxSb3RhdGlvbiwgY2VudGVyKS5fYWRkKHhPZmZzZXRDb3JyZWN0aW9uKTtcbiAgICAgICAgfVxuXG4gICAgICAgIGlmICh0ZXh0Um90YXRlKSB7XG4gICAgICAgICAgICBjb25zdCBzaW4gPSBNYXRoLnNpbih0ZXh0Um90YXRlKSxcbiAgICAgICAgICAgICAgICBjb3MgPSBNYXRoLmNvcyh0ZXh0Um90YXRlKSxcbiAgICAgICAgICAgICAgICBtYXRyaXggPSBbY29zLCAtc2luLCBzaW4sIGNvc107XG5cbiAgICAgICAgICAgIHRsLl9tYXRNdWx0KG1hdHJpeCk7XG4gICAgICAgICAgICB0ci5fbWF0TXVsdChtYXRyaXgpO1xuICAgICAgICAgICAgYmwuX21hdE11bHQobWF0cml4KTtcbiAgICAgICAgICAgIGJyLl9tYXRNdWx0KG1hdHJpeCk7XG4gICAgICAgIH1cblxuICAgICAgICBxdWFkcy5wdXNoKHt0bCwgdHIsIGJsLCBiciwgdGV4OiByZWN0LCB3cml0aW5nTW9kZTogc2hhcGluZy53cml0aW5nTW9kZSwgZ2x5cGhPZmZzZXR9KTtcbiAgICB9XG5cbiAgICByZXR1cm4gcXVhZHM7XG59XG4iLCIvLyBAZmxvd1xuXG5pbXBvcnQgUG9pbnQgZnJvbSAnQG1hcGJveC9wb2ludC1nZW9tZXRyeSc7XG5cbmV4cG9ydCBkZWZhdWx0IGNsaXBMaW5lO1xuXG4vKipcbiAqIFJldHVybnMgdGhlIHBhcnQgb2YgYSBtdWx0aWxpbmUgdGhhdCBpbnRlcnNlY3RzIHdpdGggdGhlIHByb3ZpZGVkIHJlY3Rhbmd1bGFyIGJveC5cbiAqXG4gKiBAcGFyYW0gbGluZXNcbiAqIEBwYXJhbSB4MSB0aGUgbGVmdCBlZGdlIG9mIHRoZSBib3hcbiAqIEBwYXJhbSB5MSB0aGUgdG9wIGVkZ2Ugb2YgdGhlIGJveFxuICogQHBhcmFtIHgyIHRoZSByaWdodCBlZGdlIG9mIHRoZSBib3hcbiAqIEBwYXJhbSB5MiB0aGUgYm90dG9tIGVkZ2Ugb2YgdGhlIGJveFxuICogQHJldHVybnMgbGluZXNcbiAqIEBwcml2YXRlXG4gKi9cbmZ1bmN0aW9uIGNsaXBMaW5lKGxpbmVzOiBBcnJheTxBcnJheTxQb2ludD4+LCB4MTogbnVtYmVyLCB5MTogbnVtYmVyLCB4MjogbnVtYmVyLCB5MjogbnVtYmVyKTogQXJyYXk8QXJyYXk8UG9pbnQ+PiB7XG4gICAgY29uc3QgY2xpcHBlZExpbmVzID0gW107XG5cbiAgICBmb3IgKGxldCBsID0gMDsgbCA8IGxpbmVzLmxlbmd0aDsgbCsrKSB7XG4gICAgICAgIGNvbnN0IGxpbmUgPSBsaW5lc1tsXTtcbiAgICAgICAgbGV0IGNsaXBwZWRMaW5lO1xuXG4gICAgICAgIGZvciAobGV0IGkgPSAwOyBpIDwgbGluZS5sZW5ndGggLSAxOyBpKyspIHtcbiAgICAgICAgICAgIGxldCBwMCA9IGxpbmVbaV07XG4gICAgICAgICAgICBsZXQgcDEgPSBsaW5lW2kgKyAxXTtcblxuXG4gICAgICAgICAgICBpZiAocDAueCA8IHgxICYmIHAxLnggPCB4MSkge1xuICAgICAgICAgICAgICAgIGNvbnRpbnVlO1xuICAgICAgICAgICAgfSBlbHNlIGlmIChwMC54IDwgeDEpIHtcbiAgICAgICAgICAgICAgICBwMCA9IG5ldyBQb2ludCh4MSwgcDAueSArIChwMS55IC0gcDAueSkgKiAoKHgxIC0gcDAueCkgLyAocDEueCAtIHAwLngpKSkuX3JvdW5kKCk7XG4gICAgICAgICAgICB9IGVsc2UgaWYgKHAxLnggPCB4MSkge1xuICAgICAgICAgICAgICAgIHAxID0gbmV3IFBvaW50KHgxLCBwMC55ICsgKHAxLnkgLSBwMC55KSAqICgoeDEgLSBwMC54KSAvIChwMS54IC0gcDAueCkpKS5fcm91bmQoKTtcbiAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgaWYgKHAwLnkgPCB5MSAmJiBwMS55IDwgeTEpIHtcbiAgICAgICAgICAgICAgICBjb250aW51ZTtcbiAgICAgICAgICAgIH0gZWxzZSBpZiAocDAueSA8IHkxKSB7XG4gICAgICAgICAgICAgICAgcDAgPSBuZXcgUG9pbnQocDAueCArIChwMS54IC0gcDAueCkgKiAoKHkxIC0gcDAueSkgLyAocDEueSAtIHAwLnkpKSwgeTEpLl9yb3VuZCgpO1xuICAgICAgICAgICAgfSBlbHNlIGlmIChwMS55IDwgeTEpIHtcbiAgICAgICAgICAgICAgICBwMSA9IG5ldyBQb2ludChwMC54ICsgKHAxLnggLSBwMC54KSAqICgoeTEgLSBwMC55KSAvIChwMS55IC0gcDAueSkpLCB5MSkuX3JvdW5kKCk7XG4gICAgICAgICAgICB9XG5cbiAgICAgICAgICAgIGlmIChwMC54ID49IHgyICYmIHAxLnggPj0geDIpIHtcbiAgICAgICAgICAgICAgICBjb250aW51ZTtcbiAgICAgICAgICAgIH0gZWxzZSBpZiAocDAueCA+PSB4Mikge1xuICAgICAgICAgICAgICAgIHAwID0gbmV3IFBvaW50KHgyLCBwMC55ICsgKHAxLnkgLSBwMC55KSAqICgoeDIgLSBwMC54KSAvIChwMS54IC0gcDAueCkpKS5fcm91bmQoKTtcbiAgICAgICAgICAgIH0gZWxzZSBpZiAocDEueCA+PSB4Mikge1xuICAgICAgICAgICAgICAgIHAxID0gbmV3IFBvaW50KHgyLCBwMC55ICsgKHAxLnkgLSBwMC55KSAqICgoeDIgLSBwMC54KSAvIChwMS54IC0gcDAueCkpKS5fcm91bmQoKTtcbiAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgaWYgKHAwLnkgPj0geTIgJiYgcDEueSA+PSB5Mikge1xuICAgICAgICAgICAgICAgIGNvbnRpbnVlO1xuICAgICAgICAgICAgfSBlbHNlIGlmIChwMC55ID49IHkyKSB7XG4gICAgICAgICAgICAgICAgcDAgPSBuZXcgUG9pbnQocDAueCArIChwMS54IC0gcDAueCkgKiAoKHkyIC0gcDAueSkgLyAocDEueSAtIHAwLnkpKSwgeTIpLl9yb3VuZCgpO1xuICAgICAgICAgICAgfSBlbHNlIGlmIChwMS55ID49IHkyKSB7XG4gICAgICAgICAgICAgICAgcDEgPSBuZXcgUG9pbnQocDAueCArIChwMS54IC0gcDAueCkgKiAoKHkyIC0gcDAueSkgLyAocDEueSAtIHAwLnkpKSwgeTIpLl9yb3VuZCgpO1xuICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICBpZiAoIWNsaXBwZWRMaW5lIHx8ICFwMC5lcXVhbHMoY2xpcHBlZExpbmVbY2xpcHBlZExpbmUubGVuZ3RoIC0gMV0pKSB7XG4gICAgICAgICAgICAgICAgY2xpcHBlZExpbmUgPSBbcDBdO1xuICAgICAgICAgICAgICAgIGNsaXBwZWRMaW5lcy5wdXNoKGNsaXBwZWRMaW5lKTtcbiAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgY2xpcHBlZExpbmUucHVzaChwMSk7XG4gICAgICAgIH1cbiAgICB9XG5cbiAgICByZXR1cm4gY2xpcHBlZExpbmVzO1xufVxuIiwiLy8gQGZsb3dcblxuaW1wb3J0IHsgQWxwaGFJbWFnZSB9IGZyb20gJy4uL3V0aWwvaW1hZ2UnO1xuaW1wb3J0IHsgcmVnaXN0ZXIgfSBmcm9tICcuLi91dGlsL3dlYl93b3JrZXJfdHJhbnNmZXInO1xuaW1wb3J0IHBvdHBhY2sgZnJvbSAncG90cGFjayc7XG5cbmltcG9ydCB0eXBlIHtHbHlwaE1ldHJpY3MsIFN0eWxlR2x5cGh9IGZyb20gJy4uL3N0eWxlL3N0eWxlX2dseXBoJztcblxuY29uc3QgcGFkZGluZyA9IDE7XG5cbnR5cGUgUmVjdCA9IHtcbiAgICB4OiBudW1iZXIsXG4gICAgeTogbnVtYmVyLFxuICAgIHc6IG51bWJlcixcbiAgICBoOiBudW1iZXJcbn07XG5cbmV4cG9ydCB0eXBlIEdseXBoUG9zaXRpb24gPSB7XG4gICAgcmVjdDogUmVjdCxcbiAgICBtZXRyaWNzOiBHbHlwaE1ldHJpY3Ncbn07XG5cbmV4cG9ydCBkZWZhdWx0IGNsYXNzIEdseXBoQXRsYXMge1xuICAgIGltYWdlOiBBbHBoYUltYWdlO1xuICAgIHBvc2l0aW9uczogeyBbc3RyaW5nXTogeyBbbnVtYmVyXTogR2x5cGhQb3NpdGlvbiB9IH07XG5cbiAgICBjb25zdHJ1Y3RvcihzdGFja3M6IHsgW3N0cmluZ106IHsgW251bWJlcl06ID9TdHlsZUdseXBoIH0gfSkge1xuICAgICAgICBjb25zdCBwb3NpdGlvbnMgPSB7fTtcbiAgICAgICAgY29uc3QgYmlucyA9IFtdO1xuXG4gICAgICAgIGZvciAoY29uc3Qgc3RhY2sgaW4gc3RhY2tzKSB7XG4gICAgICAgICAgICBjb25zdCBnbHlwaHMgPSBzdGFja3Nbc3RhY2tdO1xuICAgICAgICAgICAgY29uc3Qgc3RhY2tQb3NpdGlvbnMgPSBwb3NpdGlvbnNbc3RhY2tdID0ge307XG5cbiAgICAgICAgICAgIGZvciAoY29uc3QgaWQgaW4gZ2x5cGhzKSB7XG4gICAgICAgICAgICAgICAgY29uc3Qgc3JjID0gZ2x5cGhzWytpZF07XG4gICAgICAgICAgICAgICAgaWYgKCFzcmMgfHwgc3JjLmJpdG1hcC53aWR0aCA9PT0gMCB8fCBzcmMuYml0bWFwLmhlaWdodCA9PT0gMCkgY29udGludWU7XG5cbiAgICAgICAgICAgICAgICBjb25zdCBiaW4gPSB7XG4gICAgICAgICAgICAgICAgICAgIHg6IDAsXG4gICAgICAgICAgICAgICAgICAgIHk6IDAsXG4gICAgICAgICAgICAgICAgICAgIHc6IHNyYy5iaXRtYXAud2lkdGggKyAyICogcGFkZGluZyxcbiAgICAgICAgICAgICAgICAgICAgaDogc3JjLmJpdG1hcC5oZWlnaHQgKyAyICogcGFkZGluZ1xuICAgICAgICAgICAgICAgIH07XG4gICAgICAgICAgICAgICAgYmlucy5wdXNoKGJpbik7XG4gICAgICAgICAgICAgICAgc3RhY2tQb3NpdGlvbnNbaWRdID0ge3JlY3Q6IGJpbiwgbWV0cmljczogc3JjLm1ldHJpY3N9O1xuICAgICAgICAgICAgfVxuICAgICAgICB9XG5cbiAgICAgICAgY29uc3Qge3csIGh9ID0gcG90cGFjayhiaW5zKTtcbiAgICAgICAgY29uc3QgaW1hZ2UgPSBuZXcgQWxwaGFJbWFnZSh7d2lkdGg6IHcgfHwgMSwgaGVpZ2h0OiBoIHx8IDF9KTtcblxuICAgICAgICBmb3IgKGNvbnN0IHN0YWNrIGluIHN0YWNrcykge1xuICAgICAgICAgICAgY29uc3QgZ2x5cGhzID0gc3RhY2tzW3N0YWNrXTtcblxuICAgICAgICAgICAgZm9yIChjb25zdCBpZCBpbiBnbHlwaHMpIHtcbiAgICAgICAgICAgICAgICBjb25zdCBzcmMgPSBnbHlwaHNbK2lkXTtcbiAgICAgICAgICAgICAgICBpZiAoIXNyYyB8fCBzcmMuYml0bWFwLndpZHRoID09PSAwIHx8IHNyYy5iaXRtYXAuaGVpZ2h0ID09PSAwKSBjb250aW51ZTtcbiAgICAgICAgICAgICAgICBjb25zdCBiaW4gPSBwb3NpdGlvbnNbc3RhY2tdW2lkXS5yZWN0O1xuICAgICAgICAgICAgICAgIEFscGhhSW1hZ2UuY29weShzcmMuYml0bWFwLCBpbWFnZSwge3g6IDAsIHk6IDB9LCB7eDogYmluLnggKyBwYWRkaW5nLCB5OiBiaW4ueSArIHBhZGRpbmd9LCBzcmMuYml0bWFwKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfVxuXG4gICAgICAgIHRoaXMuaW1hZ2UgPSBpbWFnZTtcbiAgICAgICAgdGhpcy5wb3NpdGlvbnMgPSBwb3NpdGlvbnM7XG4gICAgfVxufVxuXG5yZWdpc3RlcignR2x5cGhBdGxhcycsIEdseXBoQXRsYXMpO1xuIiwiLy8gQGZsb3dcblxuaW1wb3J0IEZlYXR1cmVJbmRleCBmcm9tICcuLi9kYXRhL2ZlYXR1cmVfaW5kZXgnO1xuXG5pbXBvcnQgeyBwZXJmb3JtU3ltYm9sTGF5b3V0IH0gZnJvbSAnLi4vc3ltYm9sL3N5bWJvbF9sYXlvdXQnO1xuaW1wb3J0IHsgQ29sbGlzaW9uQm94QXJyYXkgfSBmcm9tICcuLi9kYXRhL2FycmF5X3R5cGVzJztcbmltcG9ydCBEaWN0aW9uYXJ5Q29kZXIgZnJvbSAnLi4vdXRpbC9kaWN0aW9uYXJ5X2NvZGVyJztcbmltcG9ydCBTeW1ib2xCdWNrZXQgZnJvbSAnLi4vZGF0YS9idWNrZXQvc3ltYm9sX2J1Y2tldCc7XG5pbXBvcnQgTGluZUJ1Y2tldCBmcm9tICcuLi9kYXRhL2J1Y2tldC9saW5lX2J1Y2tldCc7XG5pbXBvcnQgRmlsbEJ1Y2tldCBmcm9tICcuLi9kYXRhL2J1Y2tldC9maWxsX2J1Y2tldCc7XG5pbXBvcnQgRmlsbEV4dHJ1c2lvbkJ1Y2tldCBmcm9tICcuLi9kYXRhL2J1Y2tldC9maWxsX2V4dHJ1c2lvbl9idWNrZXQnO1xuaW1wb3J0IHsgd2Fybk9uY2UsIG1hcE9iamVjdCwgdmFsdWVzIH0gZnJvbSAnLi4vdXRpbC91dGlsJztcbmltcG9ydCBhc3NlcnQgZnJvbSAnYXNzZXJ0JztcbmltcG9ydCBJbWFnZUF0bGFzIGZyb20gJy4uL3JlbmRlci9pbWFnZV9hdGxhcyc7XG5pbXBvcnQgR2x5cGhBdGxhcyBmcm9tICcuLi9yZW5kZXIvZ2x5cGhfYXRsYXMnO1xuaW1wb3J0IEV2YWx1YXRpb25QYXJhbWV0ZXJzIGZyb20gJy4uL3N0eWxlL2V2YWx1YXRpb25fcGFyYW1ldGVycyc7XG5pbXBvcnQgeyBPdmVyc2NhbGVkVGlsZUlEIH0gZnJvbSAnLi90aWxlX2lkJztcblxuaW1wb3J0IHR5cGUge0J1Y2tldH0gZnJvbSAnLi4vZGF0YS9idWNrZXQnO1xuaW1wb3J0IHR5cGUgQWN0b3IgZnJvbSAnLi4vdXRpbC9hY3Rvcic7XG5pbXBvcnQgdHlwZSBTdHlsZUxheWVyIGZyb20gJy4uL3N0eWxlL3N0eWxlX2xheWVyJztcbmltcG9ydCB0eXBlIFN0eWxlTGF5ZXJJbmRleCBmcm9tICcuLi9zdHlsZS9zdHlsZV9sYXllcl9pbmRleCc7XG5pbXBvcnQgdHlwZSB7U3R5bGVJbWFnZX0gZnJvbSAnLi4vc3R5bGUvc3R5bGVfaW1hZ2UnO1xuaW1wb3J0IHR5cGUge1N0eWxlR2x5cGh9IGZyb20gJy4uL3N0eWxlL3N0eWxlX2dseXBoJztcbmltcG9ydCB0eXBlIHtcbiAgICBXb3JrZXJUaWxlUGFyYW1ldGVycyxcbiAgICBXb3JrZXJUaWxlQ2FsbGJhY2ssXG59IGZyb20gJy4uL3NvdXJjZS93b3JrZXJfc291cmNlJztcblxuY2xhc3MgV29ya2VyVGlsZSB7XG4gICAgdGlsZUlEOiBPdmVyc2NhbGVkVGlsZUlEO1xuICAgIHVpZDogc3RyaW5nO1xuICAgIHpvb206IG51bWJlcjtcbiAgICBwaXhlbFJhdGlvOiBudW1iZXI7XG4gICAgdGlsZVNpemU6IG51bWJlcjtcbiAgICBzb3VyY2U6IHN0cmluZztcbiAgICBvdmVyc2NhbGluZzogbnVtYmVyO1xuICAgIHNob3dDb2xsaXNpb25Cb3hlczogYm9vbGVhbjtcbiAgICBjb2xsZWN0UmVzb3VyY2VUaW1pbmc6IGJvb2xlYW47XG5cbiAgICBzdGF0dXM6ICdwYXJzaW5nJyB8ICdkb25lJztcbiAgICBkYXRhOiBWZWN0b3JUaWxlO1xuICAgIGNvbGxpc2lvbkJveEFycmF5OiBDb2xsaXNpb25Cb3hBcnJheTtcblxuICAgIGFib3J0OiA/KCkgPT4gdm9pZDtcbiAgICByZWxvYWRDYWxsYmFjazogV29ya2VyVGlsZUNhbGxiYWNrO1xuICAgIHZlY3RvclRpbGU6IFZlY3RvclRpbGU7XG5cbiAgICBjb25zdHJ1Y3RvcihwYXJhbXM6IFdvcmtlclRpbGVQYXJhbWV0ZXJzKSB7XG4gICAgICAgIHRoaXMudGlsZUlEID0gbmV3IE92ZXJzY2FsZWRUaWxlSUQocGFyYW1zLnRpbGVJRC5vdmVyc2NhbGVkWiwgcGFyYW1zLnRpbGVJRC53cmFwLCBwYXJhbXMudGlsZUlELmNhbm9uaWNhbC56LCBwYXJhbXMudGlsZUlELmNhbm9uaWNhbC54LCBwYXJhbXMudGlsZUlELmNhbm9uaWNhbC55KTtcbiAgICAgICAgdGhpcy51aWQgPSBwYXJhbXMudWlkO1xuICAgICAgICB0aGlzLnpvb20gPSBwYXJhbXMuem9vbTtcbiAgICAgICAgdGhpcy5waXhlbFJhdGlvID0gcGFyYW1zLnBpeGVsUmF0aW87XG4gICAgICAgIHRoaXMudGlsZVNpemUgPSBwYXJhbXMudGlsZVNpemU7XG4gICAgICAgIHRoaXMuc291cmNlID0gcGFyYW1zLnNvdXJjZTtcbiAgICAgICAgdGhpcy5vdmVyc2NhbGluZyA9IHRoaXMudGlsZUlELm92ZXJzY2FsZUZhY3RvcigpO1xuICAgICAgICB0aGlzLnNob3dDb2xsaXNpb25Cb3hlcyA9IHBhcmFtcy5zaG93Q29sbGlzaW9uQm94ZXM7XG4gICAgICAgIHRoaXMuY29sbGVjdFJlc291cmNlVGltaW5nID0gISFwYXJhbXMuY29sbGVjdFJlc291cmNlVGltaW5nO1xuICAgIH1cblxuICAgIHBhcnNlKGRhdGE6IFZlY3RvclRpbGUsIGxheWVySW5kZXg6IFN0eWxlTGF5ZXJJbmRleCwgYWN0b3I6IEFjdG9yLCBjYWxsYmFjazogV29ya2VyVGlsZUNhbGxiYWNrKSB7XG4gICAgICAgIHRoaXMuc3RhdHVzID0gJ3BhcnNpbmcnO1xuICAgICAgICB0aGlzLmRhdGEgPSBkYXRhO1xuXG4gICAgICAgIHRoaXMuY29sbGlzaW9uQm94QXJyYXkgPSBuZXcgQ29sbGlzaW9uQm94QXJyYXkoKTtcbiAgICAgICAgY29uc3Qgc291cmNlTGF5ZXJDb2RlciA9IG5ldyBEaWN0aW9uYXJ5Q29kZXIoT2JqZWN0LmtleXMoZGF0YS5sYXllcnMpLnNvcnQoKSk7XG5cbiAgICAgICAgY29uc3QgZmVhdHVyZUluZGV4ID0gbmV3IEZlYXR1cmVJbmRleCh0aGlzLnRpbGVJRCk7XG4gICAgICAgIGZlYXR1cmVJbmRleC5idWNrZXRMYXllcklEcyA9IFtdO1xuXG4gICAgICAgIGNvbnN0IGJ1Y2tldHM6IHtbc3RyaW5nXTogQnVja2V0fSA9IHt9O1xuXG4gICAgICAgIGNvbnN0IG9wdGlvbnMgPSB7XG4gICAgICAgICAgICBmZWF0dXJlSW5kZXg6IGZlYXR1cmVJbmRleCxcbiAgICAgICAgICAgIGljb25EZXBlbmRlbmNpZXM6IHt9LFxuICAgICAgICAgICAgcGF0dGVybkRlcGVuZGVuY2llczoge30sXG4gICAgICAgICAgICBnbHlwaERlcGVuZGVuY2llczoge31cbiAgICAgICAgfTtcblxuICAgICAgICBjb25zdCBsYXllckZhbWlsaWVzID0gbGF5ZXJJbmRleC5mYW1pbGllc0J5U291cmNlW3RoaXMuc291cmNlXTtcbiAgICAgICAgZm9yIChjb25zdCBzb3VyY2VMYXllcklkIGluIGxheWVyRmFtaWxpZXMpIHtcbiAgICAgICAgICAgIGNvbnN0IHNvdXJjZUxheWVyID0gZGF0YS5sYXllcnNbc291cmNlTGF5ZXJJZF07XG4gICAgICAgICAgICBpZiAoIXNvdXJjZUxheWVyKSB7XG4gICAgICAgICAgICAgICAgY29udGludWU7XG4gICAgICAgICAgICB9XG5cbiAgICAgICAgICAgIGlmIChzb3VyY2VMYXllci52ZXJzaW9uID09PSAxKSB7XG4gICAgICAgICAgICAgICAgd2Fybk9uY2UoYFZlY3RvciB0aWxlIHNvdXJjZSBcIiR7dGhpcy5zb3VyY2V9XCIgbGF5ZXIgXCIke3NvdXJjZUxheWVySWR9XCIgYCArXG4gICAgICAgICAgICAgICAgICAgIGBkb2VzIG5vdCB1c2UgdmVjdG9yIHRpbGUgc3BlYyB2MiBhbmQgdGhlcmVmb3JlIG1heSBoYXZlIHNvbWUgcmVuZGVyaW5nIGVycm9ycy5gKTtcbiAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgY29uc3Qgc291cmNlTGF5ZXJJbmRleCA9IHNvdXJjZUxheWVyQ29kZXIuZW5jb2RlKHNvdXJjZUxheWVySWQpO1xuICAgICAgICAgICAgY29uc3QgZmVhdHVyZXMgPSBbXTtcbiAgICAgICAgICAgIGZvciAobGV0IGluZGV4ID0gMDsgaW5kZXggPCBzb3VyY2VMYXllci5sZW5ndGg7IGluZGV4KyspIHtcbiAgICAgICAgICAgICAgICBjb25zdCBmZWF0dXJlID0gc291cmNlTGF5ZXIuZmVhdHVyZShpbmRleCk7XG4gICAgICAgICAgICAgICAgZmVhdHVyZXMucHVzaCh7IGZlYXR1cmUsIGluZGV4LCBzb3VyY2VMYXllckluZGV4IH0pO1xuICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICBmb3IgKGNvbnN0IGZhbWlseSBvZiBsYXllckZhbWlsaWVzW3NvdXJjZUxheWVySWRdKSB7XG4gICAgICAgICAgICAgICAgY29uc3QgbGF5ZXIgPSBmYW1pbHlbMF07XG5cbiAgICAgICAgICAgICAgICBhc3NlcnQobGF5ZXIuc291cmNlID09PSB0aGlzLnNvdXJjZSk7XG4gICAgICAgICAgICAgICAgaWYgKGxheWVyLm1pbnpvb20gJiYgdGhpcy56b29tIDwgTWF0aC5mbG9vcihsYXllci5taW56b29tKSkgY29udGludWU7XG4gICAgICAgICAgICAgICAgaWYgKGxheWVyLm1heHpvb20gJiYgdGhpcy56b29tID49IGxheWVyLm1heHpvb20pIGNvbnRpbnVlO1xuICAgICAgICAgICAgICAgIGlmIChsYXllci52aXNpYmlsaXR5ID09PSAnbm9uZScpIGNvbnRpbnVlO1xuXG4gICAgICAgICAgICAgICAgcmVjYWxjdWxhdGVMYXllcnMoZmFtaWx5LCB0aGlzLnpvb20pO1xuXG4gICAgICAgICAgICAgICAgY29uc3QgYnVja2V0ID0gYnVja2V0c1tsYXllci5pZF0gPSBsYXllci5jcmVhdGVCdWNrZXQoe1xuICAgICAgICAgICAgICAgICAgICBpbmRleDogZmVhdHVyZUluZGV4LmJ1Y2tldExheWVySURzLmxlbmd0aCxcbiAgICAgICAgICAgICAgICAgICAgbGF5ZXJzOiBmYW1pbHksXG4gICAgICAgICAgICAgICAgICAgIHpvb206IHRoaXMuem9vbSxcbiAgICAgICAgICAgICAgICAgICAgcGl4ZWxSYXRpbzogdGhpcy5waXhlbFJhdGlvLFxuICAgICAgICAgICAgICAgICAgICBvdmVyc2NhbGluZzogdGhpcy5vdmVyc2NhbGluZyxcbiAgICAgICAgICAgICAgICAgICAgY29sbGlzaW9uQm94QXJyYXk6IHRoaXMuY29sbGlzaW9uQm94QXJyYXksXG4gICAgICAgICAgICAgICAgICAgIHNvdXJjZUxheWVySW5kZXg6IHNvdXJjZUxheWVySW5kZXgsXG4gICAgICAgICAgICAgICAgICAgIHNvdXJjZUlEOiB0aGlzLnNvdXJjZVxuICAgICAgICAgICAgICAgIH0pO1xuXG4gICAgICAgICAgICAgICAgYnVja2V0LnBvcHVsYXRlKGZlYXR1cmVzLCBvcHRpb25zKTtcbiAgICAgICAgICAgICAgICBmZWF0dXJlSW5kZXguYnVja2V0TGF5ZXJJRHMucHVzaChmYW1pbHkubWFwKChsKSA9PiBsLmlkKSk7XG4gICAgICAgICAgICB9XG4gICAgICAgIH1cblxuICAgICAgICBsZXQgZXJyb3I6ID9FcnJvcjtcbiAgICAgICAgbGV0IGdseXBoTWFwOiA/e1tzdHJpbmddOiB7W251bWJlcl06ID9TdHlsZUdseXBofX07XG4gICAgICAgIGxldCBpY29uTWFwOiA/e1tzdHJpbmddOiBTdHlsZUltYWdlfTtcbiAgICAgICAgbGV0IHBhdHRlcm5NYXA6ID97W3N0cmluZ106IFN0eWxlSW1hZ2V9O1xuXG4gICAgICAgIGNvbnN0IHN0YWNrcyA9IG1hcE9iamVjdChvcHRpb25zLmdseXBoRGVwZW5kZW5jaWVzLCAoZ2x5cGhzKSA9PiBPYmplY3Qua2V5cyhnbHlwaHMpLm1hcChOdW1iZXIpKTtcbiAgICAgICAgaWYgKE9iamVjdC5rZXlzKHN0YWNrcykubGVuZ3RoKSB7XG4gICAgICAgICAgICBhY3Rvci5zZW5kKCdnZXRHbHlwaHMnLCB7dWlkOiB0aGlzLnVpZCwgc3RhY2tzfSwgKGVyciwgcmVzdWx0KSA9PiB7XG4gICAgICAgICAgICAgICAgaWYgKCFlcnJvcikge1xuICAgICAgICAgICAgICAgICAgICBlcnJvciA9IGVycjtcbiAgICAgICAgICAgICAgICAgICAgZ2x5cGhNYXAgPSByZXN1bHQ7XG4gICAgICAgICAgICAgICAgICAgIG1heWJlUHJlcGFyZS5jYWxsKHRoaXMpO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH0pO1xuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgZ2x5cGhNYXAgPSB7fTtcbiAgICAgICAgfVxuXG4gICAgICAgIGNvbnN0IGljb25zID0gT2JqZWN0LmtleXMob3B0aW9ucy5pY29uRGVwZW5kZW5jaWVzKTtcbiAgICAgICAgaWYgKGljb25zLmxlbmd0aCkge1xuICAgICAgICAgICAgYWN0b3Iuc2VuZCgnZ2V0SW1hZ2VzJywge2ljb25zfSwgKGVyciwgcmVzdWx0KSA9PiB7XG4gICAgICAgICAgICAgICAgaWYgKCFlcnJvcikge1xuICAgICAgICAgICAgICAgICAgICBlcnJvciA9IGVycjtcbiAgICAgICAgICAgICAgICAgICAgaWNvbk1hcCA9IHJlc3VsdDtcbiAgICAgICAgICAgICAgICAgICAgbWF5YmVQcmVwYXJlLmNhbGwodGhpcyk7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfSk7XG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICBpY29uTWFwID0ge307XG4gICAgICAgIH1cblxuICAgICAgICBjb25zdCBwYXR0ZXJucyA9IE9iamVjdC5rZXlzKG9wdGlvbnMucGF0dGVybkRlcGVuZGVuY2llcyk7XG4gICAgICAgIGlmIChwYXR0ZXJucy5sZW5ndGgpIHtcbiAgICAgICAgICAgIGFjdG9yLnNlbmQoJ2dldEltYWdlcycsIHtpY29uczogcGF0dGVybnN9LCAoZXJyLCByZXN1bHQpID0+IHtcbiAgICAgICAgICAgICAgICBpZiAoIWVycm9yKSB7XG4gICAgICAgICAgICAgICAgICAgIGVycm9yID0gZXJyO1xuICAgICAgICAgICAgICAgICAgICBwYXR0ZXJuTWFwID0gcmVzdWx0O1xuICAgICAgICAgICAgICAgICAgICBtYXliZVByZXBhcmUuY2FsbCh0aGlzKTtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9KTtcbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgIHBhdHRlcm5NYXAgPSB7fTtcbiAgICAgICAgfVxuXG5cbiAgICAgICAgbWF5YmVQcmVwYXJlLmNhbGwodGhpcyk7XG5cbiAgICAgICAgZnVuY3Rpb24gbWF5YmVQcmVwYXJlKCkge1xuICAgICAgICAgICAgaWYgKGVycm9yKSB7XG4gICAgICAgICAgICAgICAgcmV0dXJuIGNhbGxiYWNrKGVycm9yKTtcbiAgICAgICAgICAgIH0gZWxzZSBpZiAoZ2x5cGhNYXAgJiYgaWNvbk1hcCAmJiBwYXR0ZXJuTWFwKSB7XG4gICAgICAgICAgICAgICAgY29uc3QgZ2x5cGhBdGxhcyA9IG5ldyBHbHlwaEF0bGFzKGdseXBoTWFwKTtcbiAgICAgICAgICAgICAgICBjb25zdCBpbWFnZUF0bGFzID0gbmV3IEltYWdlQXRsYXMoaWNvbk1hcCwgcGF0dGVybk1hcCk7XG5cbiAgICAgICAgICAgICAgICBmb3IgKGNvbnN0IGtleSBpbiBidWNrZXRzKSB7XG4gICAgICAgICAgICAgICAgICAgIGNvbnN0IGJ1Y2tldCA9IGJ1Y2tldHNba2V5XTtcbiAgICAgICAgICAgICAgICAgICAgaWYgKGJ1Y2tldCBpbnN0YW5jZW9mIFN5bWJvbEJ1Y2tldCkge1xuICAgICAgICAgICAgICAgICAgICAgICAgcmVjYWxjdWxhdGVMYXllcnMoYnVja2V0LmxheWVycywgdGhpcy56b29tKTtcbiAgICAgICAgICAgICAgICAgICAgICAgIHBlcmZvcm1TeW1ib2xMYXlvdXQoYnVja2V0LCBnbHlwaE1hcCwgZ2x5cGhBdGxhcy5wb3NpdGlvbnMsIGljb25NYXAsIGltYWdlQXRsYXMuaWNvblBvc2l0aW9ucywgdGhpcy5zaG93Q29sbGlzaW9uQm94ZXMpO1xuICAgICAgICAgICAgICAgICAgICB9IGVsc2UgaWYgKGJ1Y2tldC5oYXNQYXR0ZXJuICYmXG4gICAgICAgICAgICAgICAgICAgICAgICAoYnVja2V0IGluc3RhbmNlb2YgTGluZUJ1Y2tldCB8fFxuICAgICAgICAgICAgICAgICAgICAgICAgIGJ1Y2tldCBpbnN0YW5jZW9mIEZpbGxCdWNrZXQgfHxcbiAgICAgICAgICAgICAgICAgICAgICAgICBidWNrZXQgaW5zdGFuY2VvZiBGaWxsRXh0cnVzaW9uQnVja2V0KSkge1xuICAgICAgICAgICAgICAgICAgICAgICAgcmVjYWxjdWxhdGVMYXllcnMoYnVja2V0LmxheWVycywgdGhpcy56b29tKTtcbiAgICAgICAgICAgICAgICAgICAgICAgIGJ1Y2tldC5hZGRGZWF0dXJlcyhvcHRpb25zLCBpbWFnZUF0bGFzLnBhdHRlcm5Qb3NpdGlvbnMpO1xuICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICAgICAgdGhpcy5zdGF0dXMgPSAnZG9uZSc7XG4gICAgICAgICAgICAgICAgY2FsbGJhY2sobnVsbCwge1xuICAgICAgICAgICAgICAgICAgICBidWNrZXRzOiB2YWx1ZXMoYnVja2V0cykuZmlsdGVyKGIgPT4gIWIuaXNFbXB0eSgpKSxcbiAgICAgICAgICAgICAgICAgICAgZmVhdHVyZUluZGV4LFxuICAgICAgICAgICAgICAgICAgICBjb2xsaXNpb25Cb3hBcnJheTogdGhpcy5jb2xsaXNpb25Cb3hBcnJheSxcbiAgICAgICAgICAgICAgICAgICAgZ2x5cGhBdGxhc0ltYWdlOiBnbHlwaEF0bGFzLmltYWdlLFxuICAgICAgICAgICAgICAgICAgICBpbWFnZUF0bGFzOiBpbWFnZUF0bGFzXG4gICAgICAgICAgICAgICAgfSk7XG4gICAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICB9XG59XG5cbmZ1bmN0aW9uIHJlY2FsY3VsYXRlTGF5ZXJzKGxheWVyczogJFJlYWRPbmx5QXJyYXk8U3R5bGVMYXllcj4sIHpvb206IG51bWJlcikge1xuICAgIC8vIExheWVycyBhcmUgc2hhcmVkIGFuZCBtYXkgaGF2ZSBiZWVuIHVzZWQgYnkgYSBXb3JrZXJUaWxlIHdpdGggYSBkaWZmZXJlbnQgem9vbS5cbiAgICBjb25zdCBwYXJhbWV0ZXJzID0gbmV3IEV2YWx1YXRpb25QYXJhbWV0ZXJzKHpvb20pO1xuICAgIGZvciAoY29uc3QgbGF5ZXIgb2YgbGF5ZXJzKSB7XG4gICAgICAgIGxheWVyLnJlY2FsY3VsYXRlKHBhcmFtZXRlcnMpO1xuICAgIH1cbn1cblxuZXhwb3J0IGRlZmF1bHQgV29ya2VyVGlsZTtcbiIsIi8vIEBmbG93XG5cbmltcG9ydCB0eXBlIHtSZXF1ZXN0UGFyYW1ldGVyc30gZnJvbSAnLi4vdXRpbC9hamF4JztcblxuLy8gV3JhcHMgcGVyZm9ybWFuY2UgdG8gZmFjaWxpdGF0ZSB0ZXN0aW5nXG4vLyBOb3QgaW5jb3Jwb3JhdGVkIGludG8gYnJvd3Nlci5qcyBiZWNhdXNlIHRoZSBsYXR0ZXIgaXMgcG9pc29ub3VzIHdoZW4gdXNlZCBvdXRzaWRlIHRoZSBtYWluIHRocmVhZFxuY29uc3QgcGVyZm9ybWFuY2VFeGlzdHMgPSB0eXBlb2YgcGVyZm9ybWFuY2UgIT09ICd1bmRlZmluZWQnO1xuY29uc3Qgd3JhcHBlciA9IHt9O1xuXG53cmFwcGVyLmdldEVudHJpZXNCeU5hbWUgPSAodXJsOiBzdHJpbmcpID0+IHtcbiAgICBpZiAocGVyZm9ybWFuY2VFeGlzdHMgJiYgcGVyZm9ybWFuY2UgJiYgcGVyZm9ybWFuY2UuZ2V0RW50cmllc0J5TmFtZSlcbiAgICAgICAgcmV0dXJuIHBlcmZvcm1hbmNlLmdldEVudHJpZXNCeU5hbWUodXJsKTtcbiAgICBlbHNlXG4gICAgICAgIHJldHVybiBmYWxzZTtcbn07XG5cbndyYXBwZXIubWFyayA9IChuYW1lOiBzdHJpbmcpID0+IHtcbiAgICBpZiAocGVyZm9ybWFuY2VFeGlzdHMgJiYgcGVyZm9ybWFuY2UgJiYgcGVyZm9ybWFuY2UubWFyaylcbiAgICAgICAgcmV0dXJuIHBlcmZvcm1hbmNlLm1hcmsobmFtZSk7XG4gICAgZWxzZVxuICAgICAgICByZXR1cm4gZmFsc2U7XG59O1xuXG53cmFwcGVyLm1lYXN1cmUgPSAobmFtZTogc3RyaW5nLCBzdGFydE1hcms6IHN0cmluZywgZW5kTWFyazogc3RyaW5nKSA9PiB7XG4gICAgaWYgKHBlcmZvcm1hbmNlRXhpc3RzICYmIHBlcmZvcm1hbmNlICYmIHBlcmZvcm1hbmNlLm1lYXN1cmUpXG4gICAgICAgIHJldHVybiBwZXJmb3JtYW5jZS5tZWFzdXJlKG5hbWUsIHN0YXJ0TWFyaywgZW5kTWFyayk7XG4gICAgZWxzZVxuICAgICAgICByZXR1cm4gZmFsc2U7XG59O1xuXG53cmFwcGVyLmNsZWFyTWFya3MgPSAobmFtZTogc3RyaW5nKSA9PiB7XG4gICAgaWYgKHBlcmZvcm1hbmNlRXhpc3RzICYmIHBlcmZvcm1hbmNlICYmIHBlcmZvcm1hbmNlLmNsZWFyTWFya3MpXG4gICAgICAgIHJldHVybiBwZXJmb3JtYW5jZS5jbGVhck1hcmtzKG5hbWUpO1xuICAgIGVsc2VcbiAgICAgICAgcmV0dXJuIGZhbHNlO1xufTtcblxud3JhcHBlci5jbGVhck1lYXN1cmVzID0gKG5hbWU6IHN0cmluZykgPT4ge1xuICAgIGlmIChwZXJmb3JtYW5jZUV4aXN0cyAmJiBwZXJmb3JtYW5jZSAmJiBwZXJmb3JtYW5jZS5jbGVhck1lYXN1cmVzKVxuICAgICAgICByZXR1cm4gcGVyZm9ybWFuY2UuY2xlYXJNZWFzdXJlcyhuYW1lKTtcbiAgICBlbHNlXG4gICAgICAgIHJldHVybiBmYWxzZTtcbn07XG5cbi8qKlxuICogU2FmZSB3cmFwcGVyIGZvciB0aGUgcGVyZm9ybWFuY2UgcmVzb3VyY2UgdGltaW5nIEFQSSBpbiB3ZWIgd29ya2VycyB3aXRoIGdyYWNlZnVsIGRlZ3JhZGF0aW9uXG4gKlxuICogQHBhcmFtIHtSZXF1ZXN0UGFyYW1ldGVyc30gcmVxdWVzdFxuICogQHByaXZhdGVcbiAqL1xuY2xhc3MgUGVyZm9ybWFuY2Uge1xuICAgIF9tYXJrczoge3N0YXJ0OiBzdHJpbmcsIGVuZDogc3RyaW5nLCBtZWFzdXJlOiBzdHJpbmd9O1xuXG4gICAgY29uc3RydWN0b3IgKHJlcXVlc3Q6IFJlcXVlc3RQYXJhbWV0ZXJzKSB7XG4gICAgICAgIHRoaXMuX21hcmtzID0ge1xuICAgICAgICAgICAgc3RhcnQ6IFtyZXF1ZXN0LnVybCwgJ3N0YXJ0J10uam9pbignIycpLFxuICAgICAgICAgICAgZW5kOiBbcmVxdWVzdC51cmwsICdlbmQnXS5qb2luKCcjJyksXG4gICAgICAgICAgICBtZWFzdXJlOiByZXF1ZXN0LnVybC50b1N0cmluZygpXG4gICAgICAgIH07XG5cbiAgICAgICAgd3JhcHBlci5tYXJrKHRoaXMuX21hcmtzLnN0YXJ0KTtcbiAgICB9XG5cbiAgICBmaW5pc2goKSB7XG4gICAgICAgIHdyYXBwZXIubWFyayh0aGlzLl9tYXJrcy5lbmQpO1xuICAgICAgICBsZXQgcmVzb3VyY2VUaW1pbmdEYXRhID0gd3JhcHBlci5nZXRFbnRyaWVzQnlOYW1lKHRoaXMuX21hcmtzLm1lYXN1cmUpO1xuXG4gICAgICAgIC8vIGZhbGxiYWNrIGlmIHdlYiB3b3JrZXIgaW1wbGVtZW50YXRpb24gb2YgcGVyZi5nZXRFbnRyaWVzQnlOYW1lIHJldHVybnMgZW1wdHlcbiAgICAgICAgaWYgKHJlc291cmNlVGltaW5nRGF0YS5sZW5ndGggPT09IDApIHtcbiAgICAgICAgICAgIHdyYXBwZXIubWVhc3VyZSh0aGlzLl9tYXJrcy5tZWFzdXJlLCB0aGlzLl9tYXJrcy5zdGFydCwgdGhpcy5fbWFya3MuZW5kKTtcbiAgICAgICAgICAgIHJlc291cmNlVGltaW5nRGF0YSA9IHdyYXBwZXIuZ2V0RW50cmllc0J5TmFtZSh0aGlzLl9tYXJrcy5tZWFzdXJlKTtcblxuICAgICAgICAgICAgLy8gY2xlYW51cFxuICAgICAgICAgICAgd3JhcHBlci5jbGVhck1hcmtzKHRoaXMuX21hcmtzLnN0YXJ0KTtcbiAgICAgICAgICAgIHdyYXBwZXIuY2xlYXJNYXJrcyh0aGlzLl9tYXJrcy5lbmQpO1xuICAgICAgICAgICAgd3JhcHBlci5jbGVhck1lYXN1cmVzKHRoaXMuX21hcmtzLm1lYXN1cmUpO1xuICAgICAgICB9XG5cbiAgICAgICAgcmV0dXJuIHJlc291cmNlVGltaW5nRGF0YTtcbiAgICB9XG59XG5cbndyYXBwZXIuUGVyZm9ybWFuY2UgPSBQZXJmb3JtYW5jZTtcblxuZXhwb3J0IGRlZmF1bHQgd3JhcHBlcjtcbiIsIi8vIEBmbG93XG5cbmltcG9ydCB7Z2V0QXJyYXlCdWZmZXJ9IGZyb20gJy4uL3V0aWwvYWpheCc7XG5cbmltcG9ydCB2dCBmcm9tICdAbWFwYm94L3ZlY3Rvci10aWxlJztcbmltcG9ydCBQcm90b2J1ZiBmcm9tICdwYmYnO1xuaW1wb3J0IFdvcmtlclRpbGUgZnJvbSAnLi93b3JrZXJfdGlsZSc7XG5pbXBvcnQgeyBleHRlbmQgfSBmcm9tICcuLi91dGlsL3V0aWwnO1xuaW1wb3J0IHBlcmZvcm1hbmNlIGZyb20gJy4uL3V0aWwvcGVyZm9ybWFuY2UnO1xuXG5pbXBvcnQgdHlwZSB7XG4gICAgV29ya2VyU291cmNlLFxuICAgIFdvcmtlclRpbGVQYXJhbWV0ZXJzLFxuICAgIFdvcmtlclRpbGVDYWxsYmFjayxcbiAgICBUaWxlUGFyYW1ldGVyc1xufSBmcm9tICcuLi9zb3VyY2Uvd29ya2VyX3NvdXJjZSc7XG5cbmltcG9ydCB0eXBlIHtQZXJmb3JtYW5jZVJlc291cmNlVGltaW5nfSBmcm9tICcuLi90eXBlcy9wZXJmb3JtYW5jZV9yZXNvdXJjZV90aW1pbmcnO1xuaW1wb3J0IHR5cGUgQWN0b3IgZnJvbSAnLi4vdXRpbC9hY3Rvcic7XG5pbXBvcnQgdHlwZSBTdHlsZUxheWVySW5kZXggZnJvbSAnLi4vc3R5bGUvc3R5bGVfbGF5ZXJfaW5kZXgnO1xuaW1wb3J0IHR5cGUge0NhbGxiYWNrfSBmcm9tICcuLi90eXBlcy9jYWxsYmFjayc7XG5cbmV4cG9ydCB0eXBlIExvYWRWZWN0b3JUaWxlUmVzdWx0ID0ge1xuICAgIHZlY3RvclRpbGU6IFZlY3RvclRpbGU7XG4gICAgcmF3RGF0YTogQXJyYXlCdWZmZXI7XG4gICAgZXhwaXJlcz86IGFueTtcbiAgICBjYWNoZUNvbnRyb2w/OiBhbnk7XG4gICAgcmVzb3VyY2VUaW1pbmc/OiBBcnJheTxQZXJmb3JtYW5jZVJlc291cmNlVGltaW5nPjtcbn07XG5cbi8qKlxuICogQGNhbGxiYWNrIExvYWRWZWN0b3JEYXRhQ2FsbGJhY2tcbiAqIEBwYXJhbSBlcnJvclxuICogQHBhcmFtIHZlY3RvclRpbGVcbiAqIEBwcml2YXRlXG4gKi9cbmV4cG9ydCB0eXBlIExvYWRWZWN0b3JEYXRhQ2FsbGJhY2sgPSBDYWxsYmFjazw/TG9hZFZlY3RvclRpbGVSZXN1bHQ+O1xuXG5leHBvcnQgdHlwZSBBYm9ydFZlY3RvckRhdGEgPSAoKSA9PiB2b2lkO1xuZXhwb3J0IHR5cGUgTG9hZFZlY3RvckRhdGEgPSAocGFyYW1zOiBXb3JrZXJUaWxlUGFyYW1ldGVycywgY2FsbGJhY2s6IExvYWRWZWN0b3JEYXRhQ2FsbGJhY2spID0+ID9BYm9ydFZlY3RvckRhdGE7XG5cbi8qKlxuICogQHByaXZhdGVcbiAqL1xuZnVuY3Rpb24gbG9hZFZlY3RvclRpbGUocGFyYW1zOiBXb3JrZXJUaWxlUGFyYW1ldGVycywgY2FsbGJhY2s6IExvYWRWZWN0b3JEYXRhQ2FsbGJhY2spIHtcbiAgICBjb25zdCByZXF1ZXN0ID0gZ2V0QXJyYXlCdWZmZXIocGFyYW1zLnJlcXVlc3QsIChlcnIsIHJlc3BvbnNlKSA9PiB7XG4gICAgICAgIGlmIChlcnIpIHtcbiAgICAgICAgICAgIGNhbGxiYWNrKGVycik7XG4gICAgICAgIH0gZWxzZSBpZiAocmVzcG9uc2UpIHtcbiAgICAgICAgICAgIGNhbGxiYWNrKG51bGwsIHtcbiAgICAgICAgICAgICAgICB2ZWN0b3JUaWxlOiBuZXcgdnQuVmVjdG9yVGlsZShuZXcgUHJvdG9idWYocmVzcG9uc2UuZGF0YSkpLFxuICAgICAgICAgICAgICAgIHJhd0RhdGE6IHJlc3BvbnNlLmRhdGEsXG4gICAgICAgICAgICAgICAgY2FjaGVDb250cm9sOiByZXNwb25zZS5jYWNoZUNvbnRyb2wsXG4gICAgICAgICAgICAgICAgZXhwaXJlczogcmVzcG9uc2UuZXhwaXJlc1xuICAgICAgICAgICAgfSk7XG4gICAgICAgIH1cbiAgICB9KTtcbiAgICByZXR1cm4gKCkgPT4ge1xuICAgICAgICByZXF1ZXN0LmNhbmNlbCgpO1xuICAgICAgICBjYWxsYmFjaygpO1xuICAgIH07XG59XG5cbi8qKlxuICogVGhlIHtAbGluayBXb3JrZXJTb3VyY2V9IGltcGxlbWVudGF0aW9uIHRoYXQgc3VwcG9ydHMge0BsaW5rIFZlY3RvclRpbGVTb3VyY2V9LlxuICogVGhpcyBjbGFzcyBpcyBkZXNpZ25lZCB0byBiZSBlYXNpbHkgcmV1c2VkIHRvIHN1cHBvcnQgY3VzdG9tIHNvdXJjZSB0eXBlc1xuICogZm9yIGRhdGEgZm9ybWF0cyB0aGF0IGNhbiBiZSBwYXJzZWQvY29udmVydGVkIGludG8gYW4gaW4tbWVtb3J5IFZlY3RvclRpbGVcbiAqIHJlcHJlc2VudGF0aW9uLiAgVG8gZG8gc28sIGNyZWF0ZSBpdCB3aXRoXG4gKiBgbmV3IFZlY3RvclRpbGVXb3JrZXJTb3VyY2UoYWN0b3IsIHN0eWxlTGF5ZXJzLCBjdXN0b21Mb2FkVmVjdG9yRGF0YUZ1bmN0aW9uKWAuXG4gKlxuICogQHByaXZhdGVcbiAqL1xuY2xhc3MgVmVjdG9yVGlsZVdvcmtlclNvdXJjZSBpbXBsZW1lbnRzIFdvcmtlclNvdXJjZSB7XG4gICAgYWN0b3I6IEFjdG9yO1xuICAgIGxheWVySW5kZXg6IFN0eWxlTGF5ZXJJbmRleDtcbiAgICBsb2FkVmVjdG9yRGF0YTogTG9hZFZlY3RvckRhdGE7XG4gICAgbG9hZGluZzogeyBbc3RyaW5nXTogV29ya2VyVGlsZSB9O1xuICAgIGxvYWRlZDogeyBbc3RyaW5nXTogV29ya2VyVGlsZSB9O1xuXG4gICAgLyoqXG4gICAgICogQHBhcmFtIFtsb2FkVmVjdG9yRGF0YV0gT3B0aW9uYWwgbWV0aG9kIGZvciBjdXN0b20gbG9hZGluZyBvZiBhIFZlY3RvclRpbGVcbiAgICAgKiBvYmplY3QgYmFzZWQgb24gcGFyYW1ldGVycyBwYXNzZWQgZnJvbSB0aGUgbWFpbi10aHJlYWQgU291cmNlLiBTZWVcbiAgICAgKiB7QGxpbmsgVmVjdG9yVGlsZVdvcmtlclNvdXJjZSNsb2FkVGlsZX0uIFRoZSBkZWZhdWx0IGltcGxlbWVudGF0aW9uIHNpbXBseVxuICAgICAqIGxvYWRzIHRoZSBwYmYgYXQgYHBhcmFtcy51cmxgLlxuICAgICAqL1xuICAgIGNvbnN0cnVjdG9yKGFjdG9yOiBBY3RvciwgbGF5ZXJJbmRleDogU3R5bGVMYXllckluZGV4LCBsb2FkVmVjdG9yRGF0YTogP0xvYWRWZWN0b3JEYXRhKSB7XG4gICAgICAgIHRoaXMuYWN0b3IgPSBhY3RvcjtcbiAgICAgICAgdGhpcy5sYXllckluZGV4ID0gbGF5ZXJJbmRleDtcbiAgICAgICAgdGhpcy5sb2FkVmVjdG9yRGF0YSA9IGxvYWRWZWN0b3JEYXRhIHx8IGxvYWRWZWN0b3JUaWxlO1xuICAgICAgICB0aGlzLmxvYWRpbmcgPSB7fTtcbiAgICAgICAgdGhpcy5sb2FkZWQgPSB7fTtcbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBJbXBsZW1lbnRzIHtAbGluayBXb3JrZXJTb3VyY2UjbG9hZFRpbGV9LiBEZWxlZ2F0ZXMgdG9cbiAgICAgKiB7QGxpbmsgVmVjdG9yVGlsZVdvcmtlclNvdXJjZSNsb2FkVmVjdG9yRGF0YX0gKHdoaWNoIGJ5IGRlZmF1bHQgZXhwZWN0c1xuICAgICAqIGEgYHBhcmFtcy51cmxgIHByb3BlcnR5KSBmb3IgZmV0Y2hpbmcgYW5kIHByb2R1Y2luZyBhIFZlY3RvclRpbGUgb2JqZWN0LlxuICAgICAqL1xuICAgIGxvYWRUaWxlKHBhcmFtczogV29ya2VyVGlsZVBhcmFtZXRlcnMsIGNhbGxiYWNrOiBXb3JrZXJUaWxlQ2FsbGJhY2spIHtcbiAgICAgICAgY29uc3QgdWlkID0gcGFyYW1zLnVpZDtcblxuICAgICAgICBpZiAoIXRoaXMubG9hZGluZylcbiAgICAgICAgICAgIHRoaXMubG9hZGluZyA9IHt9O1xuXG4gICAgICAgIGNvbnN0IHBlcmYgPSAocGFyYW1zICYmIHBhcmFtcy5yZXF1ZXN0ICYmIHBhcmFtcy5yZXF1ZXN0LmNvbGxlY3RSZXNvdXJjZVRpbWluZykgP1xuICAgICAgICAgICAgbmV3IHBlcmZvcm1hbmNlLlBlcmZvcm1hbmNlKHBhcmFtcy5yZXF1ZXN0KSA6IGZhbHNlO1xuXG4gICAgICAgIGNvbnN0IHdvcmtlclRpbGUgPSB0aGlzLmxvYWRpbmdbdWlkXSA9IG5ldyBXb3JrZXJUaWxlKHBhcmFtcyk7XG4gICAgICAgIHdvcmtlclRpbGUuYWJvcnQgPSB0aGlzLmxvYWRWZWN0b3JEYXRhKHBhcmFtcywgKGVyciwgcmVzcG9uc2UpID0+IHtcbiAgICAgICAgICAgIGRlbGV0ZSB0aGlzLmxvYWRpbmdbdWlkXTtcblxuICAgICAgICAgICAgaWYgKGVyciB8fCAhcmVzcG9uc2UpIHtcbiAgICAgICAgICAgICAgICByZXR1cm4gY2FsbGJhY2soZXJyKTtcbiAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgY29uc3QgcmF3VGlsZURhdGEgPSByZXNwb25zZS5yYXdEYXRhO1xuICAgICAgICAgICAgY29uc3QgY2FjaGVDb250cm9sID0ge307XG4gICAgICAgICAgICBpZiAocmVzcG9uc2UuZXhwaXJlcykgY2FjaGVDb250cm9sLmV4cGlyZXMgPSByZXNwb25zZS5leHBpcmVzO1xuICAgICAgICAgICAgaWYgKHJlc3BvbnNlLmNhY2hlQ29udHJvbCkgY2FjaGVDb250cm9sLmNhY2hlQ29udHJvbCA9IHJlc3BvbnNlLmNhY2hlQ29udHJvbDtcblxuICAgICAgICAgICAgY29uc3QgcmVzb3VyY2VUaW1pbmcgPSB7fTtcbiAgICAgICAgICAgIGlmIChwZXJmKSB7XG4gICAgICAgICAgICAgICAgY29uc3QgcmVzb3VyY2VUaW1pbmdEYXRhID0gcGVyZi5maW5pc2goKTtcbiAgICAgICAgICAgICAgICAvLyBpdCdzIG5lY2Vzc2FyeSB0byBldmFsIHRoZSByZXN1bHQgb2YgZ2V0RW50cmllc0J5TmFtZSgpIGhlcmUgdmlhIHBhcnNlL3N0cmluZ2lmeVxuICAgICAgICAgICAgICAgIC8vIGxhdGUgZXZhbHVhdGlvbiBpbiB0aGUgbWFpbiB0aHJlYWQgY2F1c2VzIFR5cGVFcnJvcjogaWxsZWdhbCBpbnZvY2F0aW9uXG4gICAgICAgICAgICAgICAgaWYgKHJlc291cmNlVGltaW5nRGF0YSlcbiAgICAgICAgICAgICAgICAgICAgcmVzb3VyY2VUaW1pbmcucmVzb3VyY2VUaW1pbmcgPSBKU09OLnBhcnNlKEpTT04uc3RyaW5naWZ5KHJlc291cmNlVGltaW5nRGF0YSkpO1xuICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICB3b3JrZXJUaWxlLnZlY3RvclRpbGUgPSByZXNwb25zZS52ZWN0b3JUaWxlO1xuICAgICAgICAgICAgd29ya2VyVGlsZS5wYXJzZShyZXNwb25zZS52ZWN0b3JUaWxlLCB0aGlzLmxheWVySW5kZXgsIHRoaXMuYWN0b3IsIChlcnIsIHJlc3VsdCkgPT4ge1xuICAgICAgICAgICAgICAgIGlmIChlcnIgfHwgIXJlc3VsdCkgcmV0dXJuIGNhbGxiYWNrKGVycik7XG5cbiAgICAgICAgICAgICAgICAvLyBUcmFuc2ZlcnJpbmcgYSBjb3B5IG9mIHJhd1RpbGVEYXRhIGJlY2F1c2UgdGhlIHdvcmtlciBuZWVkcyB0byByZXRhaW4gaXRzIGNvcHkuXG4gICAgICAgICAgICAgICAgY2FsbGJhY2sobnVsbCwgZXh0ZW5kKHtyYXdUaWxlRGF0YTogcmF3VGlsZURhdGEuc2xpY2UoMCl9LCByZXN1bHQsIGNhY2hlQ29udHJvbCwgcmVzb3VyY2VUaW1pbmcpKTtcbiAgICAgICAgICAgIH0pO1xuXG4gICAgICAgICAgICB0aGlzLmxvYWRlZCA9IHRoaXMubG9hZGVkIHx8IHt9O1xuICAgICAgICAgICAgdGhpcy5sb2FkZWRbdWlkXSA9IHdvcmtlclRpbGU7XG4gICAgICAgIH0pO1xuICAgIH1cblxuICAgIC8qKlxuICAgICAqIEltcGxlbWVudHMge0BsaW5rIFdvcmtlclNvdXJjZSNyZWxvYWRUaWxlfS5cbiAgICAgKi9cbiAgICByZWxvYWRUaWxlKHBhcmFtczogV29ya2VyVGlsZVBhcmFtZXRlcnMsIGNhbGxiYWNrOiBXb3JrZXJUaWxlQ2FsbGJhY2spIHtcbiAgICAgICAgY29uc3QgbG9hZGVkID0gdGhpcy5sb2FkZWQsXG4gICAgICAgICAgICB1aWQgPSBwYXJhbXMudWlkLFxuICAgICAgICAgICAgdnRTb3VyY2UgPSB0aGlzO1xuICAgICAgICBpZiAobG9hZGVkICYmIGxvYWRlZFt1aWRdKSB7XG4gICAgICAgICAgICBjb25zdCB3b3JrZXJUaWxlID0gbG9hZGVkW3VpZF07XG4gICAgICAgICAgICB3b3JrZXJUaWxlLnNob3dDb2xsaXNpb25Cb3hlcyA9IHBhcmFtcy5zaG93Q29sbGlzaW9uQm94ZXM7XG5cbiAgICAgICAgICAgIGNvbnN0IGRvbmUgPSAoZXJyLCBkYXRhKSA9PiB7XG4gICAgICAgICAgICAgICAgY29uc3QgcmVsb2FkQ2FsbGJhY2sgPSB3b3JrZXJUaWxlLnJlbG9hZENhbGxiYWNrO1xuICAgICAgICAgICAgICAgIGlmIChyZWxvYWRDYWxsYmFjaykge1xuICAgICAgICAgICAgICAgICAgICBkZWxldGUgd29ya2VyVGlsZS5yZWxvYWRDYWxsYmFjaztcbiAgICAgICAgICAgICAgICAgICAgd29ya2VyVGlsZS5wYXJzZSh3b3JrZXJUaWxlLnZlY3RvclRpbGUsIHZ0U291cmNlLmxheWVySW5kZXgsIHZ0U291cmNlLmFjdG9yLCByZWxvYWRDYWxsYmFjayk7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIGNhbGxiYWNrKGVyciwgZGF0YSk7XG4gICAgICAgICAgICB9O1xuXG4gICAgICAgICAgICBpZiAod29ya2VyVGlsZS5zdGF0dXMgPT09ICdwYXJzaW5nJykge1xuICAgICAgICAgICAgICAgIHdvcmtlclRpbGUucmVsb2FkQ2FsbGJhY2sgPSBkb25lO1xuICAgICAgICAgICAgfSBlbHNlIGlmICh3b3JrZXJUaWxlLnN0YXR1cyA9PT0gJ2RvbmUnKSB7XG4gICAgICAgICAgICAgICAgd29ya2VyVGlsZS5wYXJzZSh3b3JrZXJUaWxlLnZlY3RvclRpbGUsIHRoaXMubGF5ZXJJbmRleCwgdGhpcy5hY3RvciwgZG9uZSk7XG4gICAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBJbXBsZW1lbnRzIHtAbGluayBXb3JrZXJTb3VyY2UjYWJvcnRUaWxlfS5cbiAgICAgKlxuICAgICAqIEBwYXJhbSBwYXJhbXNcbiAgICAgKiBAcGFyYW0gcGFyYW1zLnVpZCBUaGUgVUlEIGZvciB0aGlzIHRpbGUuXG4gICAgICovXG4gICAgYWJvcnRUaWxlKHBhcmFtczogVGlsZVBhcmFtZXRlcnMsIGNhbGxiYWNrOiBXb3JrZXJUaWxlQ2FsbGJhY2spIHtcbiAgICAgICAgY29uc3QgbG9hZGluZyA9IHRoaXMubG9hZGluZyxcbiAgICAgICAgICAgIHVpZCA9IHBhcmFtcy51aWQ7XG4gICAgICAgIGlmIChsb2FkaW5nICYmIGxvYWRpbmdbdWlkXSAmJiBsb2FkaW5nW3VpZF0uYWJvcnQpIHtcbiAgICAgICAgICAgIGxvYWRpbmdbdWlkXS5hYm9ydCgpO1xuICAgICAgICAgICAgZGVsZXRlIGxvYWRpbmdbdWlkXTtcbiAgICAgICAgfVxuICAgICAgICBjYWxsYmFjaygpO1xuICAgIH1cblxuICAgIC8qKlxuICAgICAqIEltcGxlbWVudHMge0BsaW5rIFdvcmtlclNvdXJjZSNyZW1vdmVUaWxlfS5cbiAgICAgKlxuICAgICAqIEBwYXJhbSBwYXJhbXNcbiAgICAgKiBAcGFyYW0gcGFyYW1zLnVpZCBUaGUgVUlEIGZvciB0aGlzIHRpbGUuXG4gICAgICovXG4gICAgcmVtb3ZlVGlsZShwYXJhbXM6IFRpbGVQYXJhbWV0ZXJzLCBjYWxsYmFjazogV29ya2VyVGlsZUNhbGxiYWNrKSB7XG4gICAgICAgIGNvbnN0IGxvYWRlZCA9IHRoaXMubG9hZGVkLFxuICAgICAgICAgICAgdWlkID0gcGFyYW1zLnVpZDtcbiAgICAgICAgaWYgKGxvYWRlZCAmJiBsb2FkZWRbdWlkXSkge1xuICAgICAgICAgICAgZGVsZXRlIGxvYWRlZFt1aWRdO1xuICAgICAgICB9XG4gICAgICAgIGNhbGxiYWNrKCk7XG4gICAgfVxufVxuXG5leHBvcnQgZGVmYXVsdCBWZWN0b3JUaWxlV29ya2VyU291cmNlO1xuIiwiLy8gQGZsb3dcblxuaW1wb3J0IERFTURhdGEgZnJvbSAnLi4vZGF0YS9kZW1fZGF0YSc7XG5cbmltcG9ydCB0eXBlIEFjdG9yIGZyb20gJy4uL3V0aWwvYWN0b3InO1xuaW1wb3J0IHR5cGUge1xuICAgIFdvcmtlckRFTVRpbGVQYXJhbWV0ZXJzLFxuICAgIFdvcmtlckRFTVRpbGVDYWxsYmFjayxcbiAgICBUaWxlUGFyYW1ldGVyc1xufSBmcm9tICcuL3dvcmtlcl9zb3VyY2UnO1xuXG5cbmNsYXNzIFJhc3RlckRFTVRpbGVXb3JrZXJTb3VyY2Uge1xuICAgIGFjdG9yOiBBY3RvcjtcbiAgICBsb2FkZWQ6IHtbc3RyaW5nXTogREVNRGF0YX07XG5cbiAgICBjb25zdHJ1Y3RvcigpIHtcbiAgICAgICAgdGhpcy5sb2FkZWQgPSB7fTtcbiAgICB9XG5cbiAgICBsb2FkVGlsZShwYXJhbXM6IFdvcmtlckRFTVRpbGVQYXJhbWV0ZXJzLCBjYWxsYmFjazogV29ya2VyREVNVGlsZUNhbGxiYWNrKSB7XG4gICAgICAgIGNvbnN0IHt1aWQsIGVuY29kaW5nLCByYXdJbWFnZURhdGF9ID0gcGFyYW1zO1xuICAgICAgICBjb25zdCBkZW0gPSBuZXcgREVNRGF0YSh1aWQsIHJhd0ltYWdlRGF0YSwgZW5jb2RpbmcpO1xuXG4gICAgICAgIHRoaXMubG9hZGVkID0gdGhpcy5sb2FkZWQgfHwge307XG4gICAgICAgIHRoaXMubG9hZGVkW3VpZF0gPSBkZW07XG4gICAgICAgIGNhbGxiYWNrKG51bGwsIGRlbSk7XG4gICAgfVxuXG4gICAgcmVtb3ZlVGlsZShwYXJhbXM6IFRpbGVQYXJhbWV0ZXJzKSB7XG4gICAgICAgIGNvbnN0IGxvYWRlZCA9IHRoaXMubG9hZGVkLFxuICAgICAgICAgICAgdWlkID0gcGFyYW1zLnVpZDtcbiAgICAgICAgaWYgKGxvYWRlZCAmJiBsb2FkZWRbdWlkXSkge1xuICAgICAgICAgICAgZGVsZXRlIGxvYWRlZFt1aWRdO1xuICAgICAgICB9XG4gICAgfVxufVxuXG5leHBvcnQgZGVmYXVsdCBSYXN0ZXJERU1UaWxlV29ya2VyU291cmNlO1xuIiwibW9kdWxlLmV4cG9ydHMuUkFESVVTID0gNjM3ODEzNztcbm1vZHVsZS5leHBvcnRzLkZMQVRURU5JTkcgPSAxLzI5OC4yNTcyMjM1NjM7XG5tb2R1bGUuZXhwb3J0cy5QT0xBUl9SQURJVVMgPSA2MzU2NzUyLjMxNDI7XG4iLCJ2YXIgd2dzODQgPSByZXF1aXJlKCd3Z3M4NCcpO1xuXG5tb2R1bGUuZXhwb3J0cy5nZW9tZXRyeSA9IGdlb21ldHJ5O1xubW9kdWxlLmV4cG9ydHMucmluZyA9IHJpbmdBcmVhO1xuXG5mdW5jdGlvbiBnZW9tZXRyeShfKSB7XG4gICAgdmFyIGFyZWEgPSAwLCBpO1xuICAgIHN3aXRjaCAoXy50eXBlKSB7XG4gICAgICAgIGNhc2UgJ1BvbHlnb24nOlxuICAgICAgICAgICAgcmV0dXJuIHBvbHlnb25BcmVhKF8uY29vcmRpbmF0ZXMpO1xuICAgICAgICBjYXNlICdNdWx0aVBvbHlnb24nOlxuICAgICAgICAgICAgZm9yIChpID0gMDsgaSA8IF8uY29vcmRpbmF0ZXMubGVuZ3RoOyBpKyspIHtcbiAgICAgICAgICAgICAgICBhcmVhICs9IHBvbHlnb25BcmVhKF8uY29vcmRpbmF0ZXNbaV0pO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgcmV0dXJuIGFyZWE7XG4gICAgICAgIGNhc2UgJ1BvaW50JzpcbiAgICAgICAgY2FzZSAnTXVsdGlQb2ludCc6XG4gICAgICAgIGNhc2UgJ0xpbmVTdHJpbmcnOlxuICAgICAgICBjYXNlICdNdWx0aUxpbmVTdHJpbmcnOlxuICAgICAgICAgICAgcmV0dXJuIDA7XG4gICAgICAgIGNhc2UgJ0dlb21ldHJ5Q29sbGVjdGlvbic6XG4gICAgICAgICAgICBmb3IgKGkgPSAwOyBpIDwgXy5nZW9tZXRyaWVzLmxlbmd0aDsgaSsrKSB7XG4gICAgICAgICAgICAgICAgYXJlYSArPSBnZW9tZXRyeShfLmdlb21ldHJpZXNbaV0pO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgcmV0dXJuIGFyZWE7XG4gICAgfVxufVxuXG5mdW5jdGlvbiBwb2x5Z29uQXJlYShjb29yZHMpIHtcbiAgICB2YXIgYXJlYSA9IDA7XG4gICAgaWYgKGNvb3JkcyAmJiBjb29yZHMubGVuZ3RoID4gMCkge1xuICAgICAgICBhcmVhICs9IE1hdGguYWJzKHJpbmdBcmVhKGNvb3Jkc1swXSkpO1xuICAgICAgICBmb3IgKHZhciBpID0gMTsgaSA8IGNvb3Jkcy5sZW5ndGg7IGkrKykge1xuICAgICAgICAgICAgYXJlYSAtPSBNYXRoLmFicyhyaW5nQXJlYShjb29yZHNbaV0pKTtcbiAgICAgICAgfVxuICAgIH1cbiAgICByZXR1cm4gYXJlYTtcbn1cblxuLyoqXG4gKiBDYWxjdWxhdGUgdGhlIGFwcHJveGltYXRlIGFyZWEgb2YgdGhlIHBvbHlnb24gd2VyZSBpdCBwcm9qZWN0ZWQgb250b1xuICogICAgIHRoZSBlYXJ0aC4gIE5vdGUgdGhhdCB0aGlzIGFyZWEgd2lsbCBiZSBwb3NpdGl2ZSBpZiByaW5nIGlzIG9yaWVudGVkXG4gKiAgICAgY2xvY2t3aXNlLCBvdGhlcndpc2UgaXQgd2lsbCBiZSBuZWdhdGl2ZS5cbiAqXG4gKiBSZWZlcmVuY2U6XG4gKiBSb2JlcnQuIEcuIENoYW1iZXJsYWluIGFuZCBXaWxsaWFtIEguIER1cXVldHRlLCBcIlNvbWUgQWxnb3JpdGhtcyBmb3JcbiAqICAgICBQb2x5Z29ucyBvbiBhIFNwaGVyZVwiLCBKUEwgUHVibGljYXRpb24gMDctMDMsIEpldCBQcm9wdWxzaW9uXG4gKiAgICAgTGFib3JhdG9yeSwgUGFzYWRlbmEsIENBLCBKdW5lIDIwMDcgaHR0cDovL3Rycy1uZXcuanBsLm5hc2EuZ292L2RzcGFjZS9oYW5kbGUvMjAxNC80MDQwOVxuICpcbiAqIFJldHVybnM6XG4gKiB7ZmxvYXR9IFRoZSBhcHByb3hpbWF0ZSBzaWduZWQgZ2VvZGVzaWMgYXJlYSBvZiB0aGUgcG9seWdvbiBpbiBzcXVhcmVcbiAqICAgICBtZXRlcnMuXG4gKi9cblxuZnVuY3Rpb24gcmluZ0FyZWEoY29vcmRzKSB7XG4gICAgdmFyIHAxLCBwMiwgcDMsIGxvd2VySW5kZXgsIG1pZGRsZUluZGV4LCB1cHBlckluZGV4LCBpLFxuICAgIGFyZWEgPSAwLFxuICAgIGNvb3Jkc0xlbmd0aCA9IGNvb3Jkcy5sZW5ndGg7XG5cbiAgICBpZiAoY29vcmRzTGVuZ3RoID4gMikge1xuICAgICAgICBmb3IgKGkgPSAwOyBpIDwgY29vcmRzTGVuZ3RoOyBpKyspIHtcbiAgICAgICAgICAgIGlmIChpID09PSBjb29yZHNMZW5ndGggLSAyKSB7Ly8gaSA9IE4tMlxuICAgICAgICAgICAgICAgIGxvd2VySW5kZXggPSBjb29yZHNMZW5ndGggLSAyO1xuICAgICAgICAgICAgICAgIG1pZGRsZUluZGV4ID0gY29vcmRzTGVuZ3RoIC0xO1xuICAgICAgICAgICAgICAgIHVwcGVySW5kZXggPSAwO1xuICAgICAgICAgICAgfSBlbHNlIGlmIChpID09PSBjb29yZHNMZW5ndGggLSAxKSB7Ly8gaSA9IE4tMVxuICAgICAgICAgICAgICAgIGxvd2VySW5kZXggPSBjb29yZHNMZW5ndGggLSAxO1xuICAgICAgICAgICAgICAgIG1pZGRsZUluZGV4ID0gMDtcbiAgICAgICAgICAgICAgICB1cHBlckluZGV4ID0gMTtcbiAgICAgICAgICAgIH0gZWxzZSB7IC8vIGkgPSAwIHRvIE4tM1xuICAgICAgICAgICAgICAgIGxvd2VySW5kZXggPSBpO1xuICAgICAgICAgICAgICAgIG1pZGRsZUluZGV4ID0gaSsxO1xuICAgICAgICAgICAgICAgIHVwcGVySW5kZXggPSBpKzI7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBwMSA9IGNvb3Jkc1tsb3dlckluZGV4XTtcbiAgICAgICAgICAgIHAyID0gY29vcmRzW21pZGRsZUluZGV4XTtcbiAgICAgICAgICAgIHAzID0gY29vcmRzW3VwcGVySW5kZXhdO1xuICAgICAgICAgICAgYXJlYSArPSAoIHJhZChwM1swXSkgLSByYWQocDFbMF0pICkgKiBNYXRoLnNpbiggcmFkKHAyWzFdKSk7XG4gICAgICAgIH1cblxuICAgICAgICBhcmVhID0gYXJlYSAqIHdnczg0LlJBRElVUyAqIHdnczg0LlJBRElVUyAvIDI7XG4gICAgfVxuXG4gICAgcmV0dXJuIGFyZWE7XG59XG5cbmZ1bmN0aW9uIHJhZChfKSB7XG4gICAgcmV0dXJuIF8gKiBNYXRoLlBJIC8gMTgwO1xufSIsInZhciBnZW9qc29uQXJlYSA9IHJlcXVpcmUoJ0BtYXBib3gvZ2VvanNvbi1hcmVhJyk7XG5cbm1vZHVsZS5leHBvcnRzID0gcmV3aW5kO1xuXG5mdW5jdGlvbiByZXdpbmQoZ2osIG91dGVyKSB7XG4gICAgc3dpdGNoICgoZ2ogJiYgZ2oudHlwZSkgfHwgbnVsbCkge1xuICAgICAgICBjYXNlICdGZWF0dXJlQ29sbGVjdGlvbic6XG4gICAgICAgICAgICBnai5mZWF0dXJlcyA9IGdqLmZlYXR1cmVzLm1hcChjdXJyeU91dGVyKHJld2luZCwgb3V0ZXIpKTtcbiAgICAgICAgICAgIHJldHVybiBnajtcbiAgICAgICAgY2FzZSAnRmVhdHVyZSc6XG4gICAgICAgICAgICBnai5nZW9tZXRyeSA9IHJld2luZChnai5nZW9tZXRyeSwgb3V0ZXIpO1xuICAgICAgICAgICAgcmV0dXJuIGdqO1xuICAgICAgICBjYXNlICdQb2x5Z29uJzpcbiAgICAgICAgY2FzZSAnTXVsdGlQb2x5Z29uJzpcbiAgICAgICAgICAgIHJldHVybiBjb3JyZWN0KGdqLCBvdXRlcik7XG4gICAgICAgIGRlZmF1bHQ6XG4gICAgICAgICAgICByZXR1cm4gZ2o7XG4gICAgfVxufVxuXG5mdW5jdGlvbiBjdXJyeU91dGVyKGEsIGIpIHtcbiAgICByZXR1cm4gZnVuY3Rpb24oXykgeyByZXR1cm4gYShfLCBiKTsgfTtcbn1cblxuZnVuY3Rpb24gY29ycmVjdChfLCBvdXRlcikge1xuICAgIGlmIChfLnR5cGUgPT09ICdQb2x5Z29uJykge1xuICAgICAgICBfLmNvb3JkaW5hdGVzID0gY29ycmVjdFJpbmdzKF8uY29vcmRpbmF0ZXMsIG91dGVyKTtcbiAgICB9IGVsc2UgaWYgKF8udHlwZSA9PT0gJ011bHRpUG9seWdvbicpIHtcbiAgICAgICAgXy5jb29yZGluYXRlcyA9IF8uY29vcmRpbmF0ZXMubWFwKGN1cnJ5T3V0ZXIoY29ycmVjdFJpbmdzLCBvdXRlcikpO1xuICAgIH1cbiAgICByZXR1cm4gXztcbn1cblxuZnVuY3Rpb24gY29ycmVjdFJpbmdzKF8sIG91dGVyKSB7XG4gICAgb3V0ZXIgPSAhIW91dGVyO1xuICAgIF9bMF0gPSB3aW5kKF9bMF0sIG91dGVyKTtcbiAgICBmb3IgKHZhciBpID0gMTsgaSA8IF8ubGVuZ3RoOyBpKyspIHtcbiAgICAgICAgX1tpXSA9IHdpbmQoX1tpXSwgIW91dGVyKTtcbiAgICB9XG4gICAgcmV0dXJuIF87XG59XG5cbmZ1bmN0aW9uIHdpbmQoXywgZGlyKSB7XG4gICAgcmV0dXJuIGN3KF8pID09PSBkaXIgPyBfIDogXy5yZXZlcnNlKCk7XG59XG5cbmZ1bmN0aW9uIGN3KF8pIHtcbiAgICByZXR1cm4gZ2VvanNvbkFyZWEucmluZyhfKSA+PSAwO1xufVxuIiwiLy8gQGZsb3dcblxuaW1wb3J0IFBvaW50IGZyb20gJ0BtYXBib3gvcG9pbnQtZ2VvbWV0cnknO1xuXG5pbXBvcnQgbXZ0IGZyb20gJ0BtYXBib3gvdmVjdG9yLXRpbGUnO1xuY29uc3QgdG9HZW9KU09OID0gbXZ0LlZlY3RvclRpbGVGZWF0dXJlLnByb3RvdHlwZS50b0dlb0pTT047XG5pbXBvcnQgRVhURU5UIGZyb20gJy4uL2RhdGEvZXh0ZW50JztcblxuLy8gVGhlIGZlYXR1cmUgdHlwZSB1c2VkIGJ5IGdlb2pzb24tdnQgYW5kIHN1cGVyY2x1c3Rlci4gU2hvdWxkIGJlIGV4dHJhY3RlZCB0b1xuLy8gZ2xvYmFsIHR5cGUgYW5kIHVzZWQgaW4gbW9kdWxlIGRlZmluaXRpb25zIGZvciB0aG9zZSB0d28gbW9kdWxlcy5cbnR5cGUgRmVhdHVyZSA9IHtcbiAgICB0eXBlOiAxLFxuICAgIGlkOiBtaXhlZCxcbiAgICB0YWdzOiB7W3N0cmluZ106IHN0cmluZyB8IG51bWJlciB8IGJvb2xlYW59LFxuICAgIGdlb21ldHJ5OiBBcnJheTxbbnVtYmVyLCBudW1iZXJdPixcbn0gfCB7XG4gICAgdHlwZTogMiB8IDMsXG4gICAgaWQ6IG1peGVkLFxuICAgIHRhZ3M6IHtbc3RyaW5nXTogc3RyaW5nIHwgbnVtYmVyIHwgYm9vbGVhbn0sXG4gICAgZ2VvbWV0cnk6IEFycmF5PEFycmF5PFtudW1iZXIsIG51bWJlcl0+Pixcbn1cblxuY2xhc3MgRmVhdHVyZVdyYXBwZXIgaW1wbGVtZW50cyBWZWN0b3JUaWxlRmVhdHVyZSB7XG4gICAgX2ZlYXR1cmU6IEZlYXR1cmU7XG5cbiAgICBleHRlbnQ6IG51bWJlcjtcbiAgICB0eXBlOiAxIHwgMiB8IDM7XG4gICAgaWQ6IG51bWJlcjtcbiAgICBwcm9wZXJ0aWVzOiB7W3N0cmluZ106IHN0cmluZyB8IG51bWJlciB8IGJvb2xlYW59O1xuXG4gICAgY29uc3RydWN0b3IoZmVhdHVyZTogRmVhdHVyZSkge1xuICAgICAgICB0aGlzLl9mZWF0dXJlID0gZmVhdHVyZTtcblxuICAgICAgICB0aGlzLmV4dGVudCA9IEVYVEVOVDtcbiAgICAgICAgdGhpcy50eXBlID0gZmVhdHVyZS50eXBlO1xuICAgICAgICB0aGlzLnByb3BlcnRpZXMgPSBmZWF0dXJlLnRhZ3M7XG5cbiAgICAgICAgLy8gSWYgdGhlIGZlYXR1cmUgaGFzIGEgdG9wLWxldmVsIGBpZGAgcHJvcGVydHksIGNvcHkgaXQgb3ZlciwgYnV0IG9ubHlcbiAgICAgICAgLy8gaWYgaXQgY2FuIGJlIGNvZXJjZWQgdG8gYW4gaW50ZWdlciwgYmVjYXVzZSB0aGlzIHdyYXBwZXIgaXMgdXNlZCBmb3JcbiAgICAgICAgLy8gc2VyaWFsaXppbmcgZ2VvanNvbiBmZWF0dXJlIGRhdGEgaW50byB2ZWN0b3IgdGlsZSBQQkYgZGF0YSwgYW5kIHRoZVxuICAgICAgICAvLyB2ZWN0b3IgdGlsZSBzcGVjIG9ubHkgc3VwcG9ydHMgaW50ZWdlciB2YWx1ZXMgZm9yIGZlYXR1cmUgaWRzIC0tXG4gICAgICAgIC8vIGFsbG93aW5nIG5vbi1pbnRlZ2VyIHZhbHVlcyBoZXJlIHJlc3VsdHMgaW4gYSBub24tY29tcGxpYW50IFBCRlxuICAgICAgICAvLyB0aGF0IGNhdXNlcyBhbiBleGNlcHRpb24gd2hlbiBpdCBpcyBwYXJzZWQgd2l0aCB2ZWN0b3ItdGlsZS1qc1xuICAgICAgICBpZiAoJ2lkJyBpbiBmZWF0dXJlICYmICFpc05hTihmZWF0dXJlLmlkKSkge1xuICAgICAgICAgICAgdGhpcy5pZCA9IHBhcnNlSW50KGZlYXR1cmUuaWQsIDEwKTtcbiAgICAgICAgfVxuICAgIH1cblxuICAgIGxvYWRHZW9tZXRyeSgpIHtcbiAgICAgICAgaWYgKHRoaXMuX2ZlYXR1cmUudHlwZSA9PT0gMSkge1xuICAgICAgICAgICAgY29uc3QgZ2VvbWV0cnkgPSBbXTtcbiAgICAgICAgICAgIGZvciAoY29uc3QgcG9pbnQgb2YgdGhpcy5fZmVhdHVyZS5nZW9tZXRyeSkge1xuICAgICAgICAgICAgICAgIGdlb21ldHJ5LnB1c2goW25ldyBQb2ludChwb2ludFswXSwgcG9pbnRbMV0pXSk7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICByZXR1cm4gZ2VvbWV0cnk7XG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICBjb25zdCBnZW9tZXRyeSA9IFtdO1xuICAgICAgICAgICAgZm9yIChjb25zdCByaW5nIG9mIHRoaXMuX2ZlYXR1cmUuZ2VvbWV0cnkpIHtcbiAgICAgICAgICAgICAgICBjb25zdCBuZXdSaW5nID0gW107XG4gICAgICAgICAgICAgICAgZm9yIChjb25zdCBwb2ludCBvZiByaW5nKSB7XG4gICAgICAgICAgICAgICAgICAgIG5ld1JpbmcucHVzaChuZXcgUG9pbnQocG9pbnRbMF0sIHBvaW50WzFdKSk7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIGdlb21ldHJ5LnB1c2gobmV3UmluZyk7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICByZXR1cm4gZ2VvbWV0cnk7XG4gICAgICAgIH1cbiAgICB9XG5cbiAgICB0b0dlb0pTT04oeDogbnVtYmVyLCB5OiBudW1iZXIsIHo6IG51bWJlcikge1xuICAgICAgICByZXR1cm4gdG9HZW9KU09OLmNhbGwodGhpcywgeCwgeSwgeik7XG4gICAgfVxufVxuXG5jbGFzcyBHZW9KU09OV3JhcHBlciBpbXBsZW1lbnRzIFZlY3RvclRpbGUsIFZlY3RvclRpbGVMYXllciB7XG4gICAgbGF5ZXJzOiB7W3N0cmluZ106IFZlY3RvclRpbGVMYXllcn07XG4gICAgbmFtZTogc3RyaW5nO1xuICAgIGV4dGVudDogbnVtYmVyO1xuICAgIGxlbmd0aDogbnVtYmVyO1xuICAgIF9mZWF0dXJlczogQXJyYXk8RmVhdHVyZT47XG5cbiAgICBjb25zdHJ1Y3RvcihmZWF0dXJlczogQXJyYXk8RmVhdHVyZT4pIHtcbiAgICAgICAgdGhpcy5sYXllcnMgPSB7ICdfZ2VvanNvblRpbGVMYXllcic6IHRoaXMgfTtcbiAgICAgICAgdGhpcy5uYW1lID0gJ19nZW9qc29uVGlsZUxheWVyJztcbiAgICAgICAgdGhpcy5leHRlbnQgPSBFWFRFTlQ7XG4gICAgICAgIHRoaXMubGVuZ3RoID0gZmVhdHVyZXMubGVuZ3RoO1xuICAgICAgICB0aGlzLl9mZWF0dXJlcyA9IGZlYXR1cmVzO1xuICAgIH1cblxuICAgIGZlYXR1cmUoaTogbnVtYmVyKTogVmVjdG9yVGlsZUZlYXR1cmUge1xuICAgICAgICByZXR1cm4gbmV3IEZlYXR1cmVXcmFwcGVyKHRoaXMuX2ZlYXR1cmVzW2ldKTtcbiAgICB9XG59XG5cbmV4cG9ydCBkZWZhdWx0IEdlb0pTT05XcmFwcGVyO1xuIiwiJ3VzZSBzdHJpY3QnXG5cbnZhciBQb2ludCA9IHJlcXVpcmUoJ0BtYXBib3gvcG9pbnQtZ2VvbWV0cnknKVxudmFyIFZlY3RvclRpbGVGZWF0dXJlID0gcmVxdWlyZSgnQG1hcGJveC92ZWN0b3ItdGlsZScpLlZlY3RvclRpbGVGZWF0dXJlXG5cbm1vZHVsZS5leHBvcnRzID0gR2VvSlNPTldyYXBwZXJcblxuLy8gY29uZm9ybSB0byB2ZWN0b3J0aWxlIGFwaVxuZnVuY3Rpb24gR2VvSlNPTldyYXBwZXIgKGZlYXR1cmVzLCBvcHRpb25zKSB7XG4gIHRoaXMub3B0aW9ucyA9IG9wdGlvbnMgfHwge31cbiAgdGhpcy5mZWF0dXJlcyA9IGZlYXR1cmVzXG4gIHRoaXMubGVuZ3RoID0gZmVhdHVyZXMubGVuZ3RoXG59XG5cbkdlb0pTT05XcmFwcGVyLnByb3RvdHlwZS5mZWF0dXJlID0gZnVuY3Rpb24gKGkpIHtcbiAgcmV0dXJuIG5ldyBGZWF0dXJlV3JhcHBlcih0aGlzLmZlYXR1cmVzW2ldLCB0aGlzLm9wdGlvbnMuZXh0ZW50KVxufVxuXG5mdW5jdGlvbiBGZWF0dXJlV3JhcHBlciAoZmVhdHVyZSwgZXh0ZW50KSB7XG4gIHRoaXMuaWQgPSB0eXBlb2YgZmVhdHVyZS5pZCA9PT0gJ251bWJlcicgPyBmZWF0dXJlLmlkIDogdW5kZWZpbmVkXG4gIHRoaXMudHlwZSA9IGZlYXR1cmUudHlwZVxuICB0aGlzLnJhd0dlb21ldHJ5ID0gZmVhdHVyZS50eXBlID09PSAxID8gW2ZlYXR1cmUuZ2VvbWV0cnldIDogZmVhdHVyZS5nZW9tZXRyeVxuICB0aGlzLnByb3BlcnRpZXMgPSBmZWF0dXJlLnRhZ3NcbiAgdGhpcy5leHRlbnQgPSBleHRlbnQgfHwgNDA5NlxufVxuXG5GZWF0dXJlV3JhcHBlci5wcm90b3R5cGUubG9hZEdlb21ldHJ5ID0gZnVuY3Rpb24gKCkge1xuICB2YXIgcmluZ3MgPSB0aGlzLnJhd0dlb21ldHJ5XG4gIHRoaXMuZ2VvbWV0cnkgPSBbXVxuXG4gIGZvciAodmFyIGkgPSAwOyBpIDwgcmluZ3MubGVuZ3RoOyBpKyspIHtcbiAgICB2YXIgcmluZyA9IHJpbmdzW2ldXG4gICAgdmFyIG5ld1JpbmcgPSBbXVxuICAgIGZvciAodmFyIGogPSAwOyBqIDwgcmluZy5sZW5ndGg7IGorKykge1xuICAgICAgbmV3UmluZy5wdXNoKG5ldyBQb2ludChyaW5nW2pdWzBdLCByaW5nW2pdWzFdKSlcbiAgICB9XG4gICAgdGhpcy5nZW9tZXRyeS5wdXNoKG5ld1JpbmcpXG4gIH1cbiAgcmV0dXJuIHRoaXMuZ2VvbWV0cnlcbn1cblxuRmVhdHVyZVdyYXBwZXIucHJvdG90eXBlLmJib3ggPSBmdW5jdGlvbiAoKSB7XG4gIGlmICghdGhpcy5nZW9tZXRyeSkgdGhpcy5sb2FkR2VvbWV0cnkoKVxuXG4gIHZhciByaW5ncyA9IHRoaXMuZ2VvbWV0cnlcbiAgdmFyIHgxID0gSW5maW5pdHlcbiAgdmFyIHgyID0gLUluZmluaXR5XG4gIHZhciB5MSA9IEluZmluaXR5XG4gIHZhciB5MiA9IC1JbmZpbml0eVxuXG4gIGZvciAodmFyIGkgPSAwOyBpIDwgcmluZ3MubGVuZ3RoOyBpKyspIHtcbiAgICB2YXIgcmluZyA9IHJpbmdzW2ldXG5cbiAgICBmb3IgKHZhciBqID0gMDsgaiA8IHJpbmcubGVuZ3RoOyBqKyspIHtcbiAgICAgIHZhciBjb29yZCA9IHJpbmdbal1cblxuICAgICAgeDEgPSBNYXRoLm1pbih4MSwgY29vcmQueClcbiAgICAgIHgyID0gTWF0aC5tYXgoeDIsIGNvb3JkLngpXG4gICAgICB5MSA9IE1hdGgubWluKHkxLCBjb29yZC55KVxuICAgICAgeTIgPSBNYXRoLm1heCh5MiwgY29vcmQueSlcbiAgICB9XG4gIH1cblxuICByZXR1cm4gW3gxLCB5MSwgeDIsIHkyXVxufVxuXG5GZWF0dXJlV3JhcHBlci5wcm90b3R5cGUudG9HZW9KU09OID0gVmVjdG9yVGlsZUZlYXR1cmUucHJvdG90eXBlLnRvR2VvSlNPTlxuIiwidmFyIFBiZiA9IHJlcXVpcmUoJ3BiZicpXG52YXIgR2VvSlNPTldyYXBwZXIgPSByZXF1aXJlKCcuL2xpYi9nZW9qc29uX3dyYXBwZXInKVxuXG5tb2R1bGUuZXhwb3J0cyA9IGZyb21WZWN0b3JUaWxlSnNcbm1vZHVsZS5leHBvcnRzLmZyb21WZWN0b3JUaWxlSnMgPSBmcm9tVmVjdG9yVGlsZUpzXG5tb2R1bGUuZXhwb3J0cy5mcm9tR2VvanNvblZ0ID0gZnJvbUdlb2pzb25WdFxubW9kdWxlLmV4cG9ydHMuR2VvSlNPTldyYXBwZXIgPSBHZW9KU09OV3JhcHBlclxuXG4vKipcbiAqIFNlcmlhbGl6ZSBhIHZlY3Rvci10aWxlLWpzLWNyZWF0ZWQgdGlsZSB0byBwYmZcbiAqXG4gKiBAcGFyYW0ge09iamVjdH0gdGlsZVxuICogQHJldHVybiB7QnVmZmVyfSB1bmNvbXByZXNzZWQsIHBiZi1zZXJpYWxpemVkIHRpbGUgZGF0YVxuICovXG5mdW5jdGlvbiBmcm9tVmVjdG9yVGlsZUpzICh0aWxlKSB7XG4gIHZhciBvdXQgPSBuZXcgUGJmKClcbiAgd3JpdGVUaWxlKHRpbGUsIG91dClcbiAgcmV0dXJuIG91dC5maW5pc2goKVxufVxuXG4vKipcbiAqIFNlcmlhbGl6ZWQgYSBnZW9qc29uLXZ0LWNyZWF0ZWQgdGlsZSB0byBwYmYuXG4gKlxuICogQHBhcmFtIHtPYmplY3R9IGxheWVycyAtIEFuIG9iamVjdCBtYXBwaW5nIGxheWVyIG5hbWVzIHRvIGdlb2pzb24tdnQtY3JlYXRlZCB2ZWN0b3IgdGlsZSBvYmplY3RzXG4gKiBAcGFyYW0ge09iamVjdH0gW29wdGlvbnNdIC0gQW4gb2JqZWN0IHNwZWNpZnlpbmcgdGhlIHZlY3Rvci10aWxlIHNwZWNpZmljYXRpb24gdmVyc2lvbiBhbmQgZXh0ZW50IHRoYXQgd2VyZSB1c2VkIHRvIGNyZWF0ZSBgbGF5ZXJzYC5cbiAqIEBwYXJhbSB7TnVtYmVyfSBbb3B0aW9ucy52ZXJzaW9uPTFdIC0gVmVyc2lvbiBvZiB2ZWN0b3ItdGlsZSBzcGVjIHVzZWRcbiAqIEBwYXJhbSB7TnVtYmVyfSBbb3B0aW9ucy5leHRlbnQ9NDA5Nl0gLSBFeHRlbnQgb2YgdGhlIHZlY3RvciB0aWxlXG4gKiBAcmV0dXJuIHtCdWZmZXJ9IHVuY29tcHJlc3NlZCwgcGJmLXNlcmlhbGl6ZWQgdGlsZSBkYXRhXG4gKi9cbmZ1bmN0aW9uIGZyb21HZW9qc29uVnQgKGxheWVycywgb3B0aW9ucykge1xuICBvcHRpb25zID0gb3B0aW9ucyB8fCB7fVxuICB2YXIgbCA9IHt9XG4gIGZvciAodmFyIGsgaW4gbGF5ZXJzKSB7XG4gICAgbFtrXSA9IG5ldyBHZW9KU09OV3JhcHBlcihsYXllcnNba10uZmVhdHVyZXMsIG9wdGlvbnMpXG4gICAgbFtrXS5uYW1lID0ga1xuICAgIGxba10udmVyc2lvbiA9IG9wdGlvbnMudmVyc2lvblxuICAgIGxba10uZXh0ZW50ID0gb3B0aW9ucy5leHRlbnRcbiAgfVxuICByZXR1cm4gZnJvbVZlY3RvclRpbGVKcyh7bGF5ZXJzOiBsfSlcbn1cblxuZnVuY3Rpb24gd3JpdGVUaWxlICh0aWxlLCBwYmYpIHtcbiAgZm9yICh2YXIga2V5IGluIHRpbGUubGF5ZXJzKSB7XG4gICAgcGJmLndyaXRlTWVzc2FnZSgzLCB3cml0ZUxheWVyLCB0aWxlLmxheWVyc1trZXldKVxuICB9XG59XG5cbmZ1bmN0aW9uIHdyaXRlTGF5ZXIgKGxheWVyLCBwYmYpIHtcbiAgcGJmLndyaXRlVmFyaW50RmllbGQoMTUsIGxheWVyLnZlcnNpb24gfHwgMSlcbiAgcGJmLndyaXRlU3RyaW5nRmllbGQoMSwgbGF5ZXIubmFtZSB8fCAnJylcbiAgcGJmLndyaXRlVmFyaW50RmllbGQoNSwgbGF5ZXIuZXh0ZW50IHx8IDQwOTYpXG5cbiAgdmFyIGlcbiAgdmFyIGNvbnRleHQgPSB7XG4gICAga2V5czogW10sXG4gICAgdmFsdWVzOiBbXSxcbiAgICBrZXljYWNoZToge30sXG4gICAgdmFsdWVjYWNoZToge31cbiAgfVxuXG4gIGZvciAoaSA9IDA7IGkgPCBsYXllci5sZW5ndGg7IGkrKykge1xuICAgIGNvbnRleHQuZmVhdHVyZSA9IGxheWVyLmZlYXR1cmUoaSlcbiAgICBwYmYud3JpdGVNZXNzYWdlKDIsIHdyaXRlRmVhdHVyZSwgY29udGV4dClcbiAgfVxuXG4gIHZhciBrZXlzID0gY29udGV4dC5rZXlzXG4gIGZvciAoaSA9IDA7IGkgPCBrZXlzLmxlbmd0aDsgaSsrKSB7XG4gICAgcGJmLndyaXRlU3RyaW5nRmllbGQoMywga2V5c1tpXSlcbiAgfVxuXG4gIHZhciB2YWx1ZXMgPSBjb250ZXh0LnZhbHVlc1xuICBmb3IgKGkgPSAwOyBpIDwgdmFsdWVzLmxlbmd0aDsgaSsrKSB7XG4gICAgcGJmLndyaXRlTWVzc2FnZSg0LCB3cml0ZVZhbHVlLCB2YWx1ZXNbaV0pXG4gIH1cbn1cblxuZnVuY3Rpb24gd3JpdGVGZWF0dXJlIChjb250ZXh0LCBwYmYpIHtcbiAgdmFyIGZlYXR1cmUgPSBjb250ZXh0LmZlYXR1cmVcblxuICBpZiAoZmVhdHVyZS5pZCAhPT0gdW5kZWZpbmVkKSB7XG4gICAgcGJmLndyaXRlVmFyaW50RmllbGQoMSwgZmVhdHVyZS5pZClcbiAgfVxuXG4gIHBiZi53cml0ZU1lc3NhZ2UoMiwgd3JpdGVQcm9wZXJ0aWVzLCBjb250ZXh0KVxuICBwYmYud3JpdGVWYXJpbnRGaWVsZCgzLCBmZWF0dXJlLnR5cGUpXG4gIHBiZi53cml0ZU1lc3NhZ2UoNCwgd3JpdGVHZW9tZXRyeSwgZmVhdHVyZSlcbn1cblxuZnVuY3Rpb24gd3JpdGVQcm9wZXJ0aWVzIChjb250ZXh0LCBwYmYpIHtcbiAgdmFyIGZlYXR1cmUgPSBjb250ZXh0LmZlYXR1cmVcbiAgdmFyIGtleXMgPSBjb250ZXh0LmtleXNcbiAgdmFyIHZhbHVlcyA9IGNvbnRleHQudmFsdWVzXG4gIHZhciBrZXljYWNoZSA9IGNvbnRleHQua2V5Y2FjaGVcbiAgdmFyIHZhbHVlY2FjaGUgPSBjb250ZXh0LnZhbHVlY2FjaGVcblxuICBmb3IgKHZhciBrZXkgaW4gZmVhdHVyZS5wcm9wZXJ0aWVzKSB7XG4gICAgdmFyIGtleUluZGV4ID0ga2V5Y2FjaGVba2V5XVxuICAgIGlmICh0eXBlb2Yga2V5SW5kZXggPT09ICd1bmRlZmluZWQnKSB7XG4gICAgICBrZXlzLnB1c2goa2V5KVxuICAgICAga2V5SW5kZXggPSBrZXlzLmxlbmd0aCAtIDFcbiAgICAgIGtleWNhY2hlW2tleV0gPSBrZXlJbmRleFxuICAgIH1cbiAgICBwYmYud3JpdGVWYXJpbnQoa2V5SW5kZXgpXG5cbiAgICB2YXIgdmFsdWUgPSBmZWF0dXJlLnByb3BlcnRpZXNba2V5XVxuICAgIHZhciB0eXBlID0gdHlwZW9mIHZhbHVlXG4gICAgaWYgKHR5cGUgIT09ICdzdHJpbmcnICYmIHR5cGUgIT09ICdib29sZWFuJyAmJiB0eXBlICE9PSAnbnVtYmVyJykge1xuICAgICAgdmFsdWUgPSBKU09OLnN0cmluZ2lmeSh2YWx1ZSlcbiAgICB9XG4gICAgdmFyIHZhbHVlS2V5ID0gdHlwZSArICc6JyArIHZhbHVlXG4gICAgdmFyIHZhbHVlSW5kZXggPSB2YWx1ZWNhY2hlW3ZhbHVlS2V5XVxuICAgIGlmICh0eXBlb2YgdmFsdWVJbmRleCA9PT0gJ3VuZGVmaW5lZCcpIHtcbiAgICAgIHZhbHVlcy5wdXNoKHZhbHVlKVxuICAgICAgdmFsdWVJbmRleCA9IHZhbHVlcy5sZW5ndGggLSAxXG4gICAgICB2YWx1ZWNhY2hlW3ZhbHVlS2V5XSA9IHZhbHVlSW5kZXhcbiAgICB9XG4gICAgcGJmLndyaXRlVmFyaW50KHZhbHVlSW5kZXgpXG4gIH1cbn1cblxuZnVuY3Rpb24gY29tbWFuZCAoY21kLCBsZW5ndGgpIHtcbiAgcmV0dXJuIChsZW5ndGggPDwgMykgKyAoY21kICYgMHg3KVxufVxuXG5mdW5jdGlvbiB6aWd6YWcgKG51bSkge1xuICByZXR1cm4gKG51bSA8PCAxKSBeIChudW0gPj4gMzEpXG59XG5cbmZ1bmN0aW9uIHdyaXRlR2VvbWV0cnkgKGZlYXR1cmUsIHBiZikge1xuICB2YXIgZ2VvbWV0cnkgPSBmZWF0dXJlLmxvYWRHZW9tZXRyeSgpXG4gIHZhciB0eXBlID0gZmVhdHVyZS50eXBlXG4gIHZhciB4ID0gMFxuICB2YXIgeSA9IDBcbiAgdmFyIHJpbmdzID0gZ2VvbWV0cnkubGVuZ3RoXG4gIGZvciAodmFyIHIgPSAwOyByIDwgcmluZ3M7IHIrKykge1xuICAgIHZhciByaW5nID0gZ2VvbWV0cnlbcl1cbiAgICB2YXIgY291bnQgPSAxXG4gICAgaWYgKHR5cGUgPT09IDEpIHtcbiAgICAgIGNvdW50ID0gcmluZy5sZW5ndGhcbiAgICB9XG4gICAgcGJmLndyaXRlVmFyaW50KGNvbW1hbmQoMSwgY291bnQpKSAvLyBtb3ZldG9cbiAgICAvLyBkbyBub3Qgd3JpdGUgcG9seWdvbiBjbG9zaW5nIHBhdGggYXMgbGluZXRvXG4gICAgdmFyIGxpbmVDb3VudCA9IHR5cGUgPT09IDMgPyByaW5nLmxlbmd0aCAtIDEgOiByaW5nLmxlbmd0aFxuICAgIGZvciAodmFyIGkgPSAwOyBpIDwgbGluZUNvdW50OyBpKyspIHtcbiAgICAgIGlmIChpID09PSAxICYmIHR5cGUgIT09IDEpIHtcbiAgICAgICAgcGJmLndyaXRlVmFyaW50KGNvbW1hbmQoMiwgbGluZUNvdW50IC0gMSkpIC8vIGxpbmV0b1xuICAgICAgfVxuICAgICAgdmFyIGR4ID0gcmluZ1tpXS54IC0geFxuICAgICAgdmFyIGR5ID0gcmluZ1tpXS55IC0geVxuICAgICAgcGJmLndyaXRlVmFyaW50KHppZ3phZyhkeCkpXG4gICAgICBwYmYud3JpdGVWYXJpbnQoemlnemFnKGR5KSlcbiAgICAgIHggKz0gZHhcbiAgICAgIHkgKz0gZHlcbiAgICB9XG4gICAgaWYgKHR5cGUgPT09IDMpIHtcbiAgICAgIHBiZi53cml0ZVZhcmludChjb21tYW5kKDcsIDApKSAvLyBjbG9zZXBhdGhcbiAgICB9XG4gIH1cbn1cblxuZnVuY3Rpb24gd3JpdGVWYWx1ZSAodmFsdWUsIHBiZikge1xuICB2YXIgdHlwZSA9IHR5cGVvZiB2YWx1ZVxuICBpZiAodHlwZSA9PT0gJ3N0cmluZycpIHtcbiAgICBwYmYud3JpdGVTdHJpbmdGaWVsZCgxLCB2YWx1ZSlcbiAgfSBlbHNlIGlmICh0eXBlID09PSAnYm9vbGVhbicpIHtcbiAgICBwYmYud3JpdGVCb29sZWFuRmllbGQoNywgdmFsdWUpXG4gIH0gZWxzZSBpZiAodHlwZSA9PT0gJ251bWJlcicpIHtcbiAgICBpZiAodmFsdWUgJSAxICE9PSAwKSB7XG4gICAgICBwYmYud3JpdGVEb3VibGVGaWVsZCgzLCB2YWx1ZSlcbiAgICB9IGVsc2UgaWYgKHZhbHVlIDwgMCkge1xuICAgICAgcGJmLndyaXRlU1ZhcmludEZpZWxkKDYsIHZhbHVlKVxuICAgIH0gZWxzZSB7XG4gICAgICBwYmYud3JpdGVWYXJpbnRGaWVsZCg1LCB2YWx1ZSlcbiAgICB9XG4gIH1cbn1cbiIsIlxuZXhwb3J0IGRlZmF1bHQgZnVuY3Rpb24gc29ydEtEKGlkcywgY29vcmRzLCBub2RlU2l6ZSwgbGVmdCwgcmlnaHQsIGRlcHRoKSB7XG4gICAgaWYgKHJpZ2h0IC0gbGVmdCA8PSBub2RlU2l6ZSkgcmV0dXJuO1xuXG4gICAgdmFyIG0gPSBNYXRoLmZsb29yKChsZWZ0ICsgcmlnaHQpIC8gMik7XG5cbiAgICBzZWxlY3QoaWRzLCBjb29yZHMsIG0sIGxlZnQsIHJpZ2h0LCBkZXB0aCAlIDIpO1xuXG4gICAgc29ydEtEKGlkcywgY29vcmRzLCBub2RlU2l6ZSwgbGVmdCwgbSAtIDEsIGRlcHRoICsgMSk7XG4gICAgc29ydEtEKGlkcywgY29vcmRzLCBub2RlU2l6ZSwgbSArIDEsIHJpZ2h0LCBkZXB0aCArIDEpO1xufVxuXG5mdW5jdGlvbiBzZWxlY3QoaWRzLCBjb29yZHMsIGssIGxlZnQsIHJpZ2h0LCBpbmMpIHtcblxuICAgIHdoaWxlIChyaWdodCA+IGxlZnQpIHtcbiAgICAgICAgaWYgKHJpZ2h0IC0gbGVmdCA+IDYwMCkge1xuICAgICAgICAgICAgdmFyIG4gPSByaWdodCAtIGxlZnQgKyAxO1xuICAgICAgICAgICAgdmFyIG0gPSBrIC0gbGVmdCArIDE7XG4gICAgICAgICAgICB2YXIgeiA9IE1hdGgubG9nKG4pO1xuICAgICAgICAgICAgdmFyIHMgPSAwLjUgKiBNYXRoLmV4cCgyICogeiAvIDMpO1xuICAgICAgICAgICAgdmFyIHNkID0gMC41ICogTWF0aC5zcXJ0KHogKiBzICogKG4gLSBzKSAvIG4pICogKG0gLSBuIC8gMiA8IDAgPyAtMSA6IDEpO1xuICAgICAgICAgICAgdmFyIG5ld0xlZnQgPSBNYXRoLm1heChsZWZ0LCBNYXRoLmZsb29yKGsgLSBtICogcyAvIG4gKyBzZCkpO1xuICAgICAgICAgICAgdmFyIG5ld1JpZ2h0ID0gTWF0aC5taW4ocmlnaHQsIE1hdGguZmxvb3IoayArIChuIC0gbSkgKiBzIC8gbiArIHNkKSk7XG4gICAgICAgICAgICBzZWxlY3QoaWRzLCBjb29yZHMsIGssIG5ld0xlZnQsIG5ld1JpZ2h0LCBpbmMpO1xuICAgICAgICB9XG5cbiAgICAgICAgdmFyIHQgPSBjb29yZHNbMiAqIGsgKyBpbmNdO1xuICAgICAgICB2YXIgaSA9IGxlZnQ7XG4gICAgICAgIHZhciBqID0gcmlnaHQ7XG5cbiAgICAgICAgc3dhcEl0ZW0oaWRzLCBjb29yZHMsIGxlZnQsIGspO1xuICAgICAgICBpZiAoY29vcmRzWzIgKiByaWdodCArIGluY10gPiB0KSBzd2FwSXRlbShpZHMsIGNvb3JkcywgbGVmdCwgcmlnaHQpO1xuXG4gICAgICAgIHdoaWxlIChpIDwgaikge1xuICAgICAgICAgICAgc3dhcEl0ZW0oaWRzLCBjb29yZHMsIGksIGopO1xuICAgICAgICAgICAgaSsrO1xuICAgICAgICAgICAgai0tO1xuICAgICAgICAgICAgd2hpbGUgKGNvb3Jkc1syICogaSArIGluY10gPCB0KSBpKys7XG4gICAgICAgICAgICB3aGlsZSAoY29vcmRzWzIgKiBqICsgaW5jXSA+IHQpIGotLTtcbiAgICAgICAgfVxuXG4gICAgICAgIGlmIChjb29yZHNbMiAqIGxlZnQgKyBpbmNdID09PSB0KSBzd2FwSXRlbShpZHMsIGNvb3JkcywgbGVmdCwgaik7XG4gICAgICAgIGVsc2Uge1xuICAgICAgICAgICAgaisrO1xuICAgICAgICAgICAgc3dhcEl0ZW0oaWRzLCBjb29yZHMsIGosIHJpZ2h0KTtcbiAgICAgICAgfVxuXG4gICAgICAgIGlmIChqIDw9IGspIGxlZnQgPSBqICsgMTtcbiAgICAgICAgaWYgKGsgPD0gaikgcmlnaHQgPSBqIC0gMTtcbiAgICB9XG59XG5cbmZ1bmN0aW9uIHN3YXBJdGVtKGlkcywgY29vcmRzLCBpLCBqKSB7XG4gICAgc3dhcChpZHMsIGksIGopO1xuICAgIHN3YXAoY29vcmRzLCAyICogaSwgMiAqIGopO1xuICAgIHN3YXAoY29vcmRzLCAyICogaSArIDEsIDIgKiBqICsgMSk7XG59XG5cbmZ1bmN0aW9uIHN3YXAoYXJyLCBpLCBqKSB7XG4gICAgdmFyIHRtcCA9IGFycltpXTtcbiAgICBhcnJbaV0gPSBhcnJbal07XG4gICAgYXJyW2pdID0gdG1wO1xufVxuIiwiXG5leHBvcnQgZGVmYXVsdCBmdW5jdGlvbiB3aXRoaW4oaWRzLCBjb29yZHMsIHF4LCBxeSwgciwgbm9kZVNpemUpIHtcbiAgICB2YXIgc3RhY2sgPSBbMCwgaWRzLmxlbmd0aCAtIDEsIDBdO1xuICAgIHZhciByZXN1bHQgPSBbXTtcbiAgICB2YXIgcjIgPSByICogcjtcblxuICAgIHdoaWxlIChzdGFjay5sZW5ndGgpIHtcbiAgICAgICAgdmFyIGF4aXMgPSBzdGFjay5wb3AoKTtcbiAgICAgICAgdmFyIHJpZ2h0ID0gc3RhY2sucG9wKCk7XG4gICAgICAgIHZhciBsZWZ0ID0gc3RhY2sucG9wKCk7XG5cbiAgICAgICAgaWYgKHJpZ2h0IC0gbGVmdCA8PSBub2RlU2l6ZSkge1xuICAgICAgICAgICAgZm9yICh2YXIgaSA9IGxlZnQ7IGkgPD0gcmlnaHQ7IGkrKykge1xuICAgICAgICAgICAgICAgIGlmIChzcURpc3QoY29vcmRzWzIgKiBpXSwgY29vcmRzWzIgKiBpICsgMV0sIHF4LCBxeSkgPD0gcjIpIHJlc3VsdC5wdXNoKGlkc1tpXSk7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBjb250aW51ZTtcbiAgICAgICAgfVxuXG4gICAgICAgIHZhciBtID0gTWF0aC5mbG9vcigobGVmdCArIHJpZ2h0KSAvIDIpO1xuXG4gICAgICAgIHZhciB4ID0gY29vcmRzWzIgKiBtXTtcbiAgICAgICAgdmFyIHkgPSBjb29yZHNbMiAqIG0gKyAxXTtcblxuICAgICAgICBpZiAoc3FEaXN0KHgsIHksIHF4LCBxeSkgPD0gcjIpIHJlc3VsdC5wdXNoKGlkc1ttXSk7XG5cbiAgICAgICAgdmFyIG5leHRBeGlzID0gKGF4aXMgKyAxKSAlIDI7XG5cbiAgICAgICAgaWYgKGF4aXMgPT09IDAgPyBxeCAtIHIgPD0geCA6IHF5IC0gciA8PSB5KSB7XG4gICAgICAgICAgICBzdGFjay5wdXNoKGxlZnQpO1xuICAgICAgICAgICAgc3RhY2sucHVzaChtIC0gMSk7XG4gICAgICAgICAgICBzdGFjay5wdXNoKG5leHRBeGlzKTtcbiAgICAgICAgfVxuICAgICAgICBpZiAoYXhpcyA9PT0gMCA/IHF4ICsgciA+PSB4IDogcXkgKyByID49IHkpIHtcbiAgICAgICAgICAgIHN0YWNrLnB1c2gobSArIDEpO1xuICAgICAgICAgICAgc3RhY2sucHVzaChyaWdodCk7XG4gICAgICAgICAgICBzdGFjay5wdXNoKG5leHRBeGlzKTtcbiAgICAgICAgfVxuICAgIH1cblxuICAgIHJldHVybiByZXN1bHQ7XG59XG5cbmZ1bmN0aW9uIHNxRGlzdChheCwgYXksIGJ4LCBieSkge1xuICAgIHZhciBkeCA9IGF4IC0gYng7XG4gICAgdmFyIGR5ID0gYXkgLSBieTtcbiAgICByZXR1cm4gZHggKiBkeCArIGR5ICogZHk7XG59XG4iLCJcbmltcG9ydCBzb3J0IGZyb20gJy4vc29ydCc7XG5pbXBvcnQgcmFuZ2UgZnJvbSAnLi9yYW5nZSc7XG5pbXBvcnQgd2l0aGluIGZyb20gJy4vd2l0aGluJztcblxuZXhwb3J0IGRlZmF1bHQgZnVuY3Rpb24ga2RidXNoKHBvaW50cywgZ2V0WCwgZ2V0WSwgbm9kZVNpemUsIEFycmF5VHlwZSkge1xuICAgIHJldHVybiBuZXcgS0RCdXNoKHBvaW50cywgZ2V0WCwgZ2V0WSwgbm9kZVNpemUsIEFycmF5VHlwZSk7XG59XG5cbmZ1bmN0aW9uIEtEQnVzaChwb2ludHMsIGdldFgsIGdldFksIG5vZGVTaXplLCBBcnJheVR5cGUpIHtcbiAgICBnZXRYID0gZ2V0WCB8fCBkZWZhdWx0R2V0WDtcbiAgICBnZXRZID0gZ2V0WSB8fCBkZWZhdWx0R2V0WTtcbiAgICBBcnJheVR5cGUgPSBBcnJheVR5cGUgfHwgQXJyYXk7XG5cbiAgICB0aGlzLm5vZGVTaXplID0gbm9kZVNpemUgfHwgNjQ7XG4gICAgdGhpcy5wb2ludHMgPSBwb2ludHM7XG5cbiAgICB0aGlzLmlkcyA9IG5ldyBBcnJheVR5cGUocG9pbnRzLmxlbmd0aCk7XG4gICAgdGhpcy5jb29yZHMgPSBuZXcgQXJyYXlUeXBlKHBvaW50cy5sZW5ndGggKiAyKTtcblxuICAgIGZvciAodmFyIGkgPSAwOyBpIDwgcG9pbnRzLmxlbmd0aDsgaSsrKSB7XG4gICAgICAgIHRoaXMuaWRzW2ldID0gaTtcbiAgICAgICAgdGhpcy5jb29yZHNbMiAqIGldID0gZ2V0WChwb2ludHNbaV0pO1xuICAgICAgICB0aGlzLmNvb3Jkc1syICogaSArIDFdID0gZ2V0WShwb2ludHNbaV0pO1xuICAgIH1cblxuICAgIHNvcnQodGhpcy5pZHMsIHRoaXMuY29vcmRzLCB0aGlzLm5vZGVTaXplLCAwLCB0aGlzLmlkcy5sZW5ndGggLSAxLCAwKTtcbn1cblxuS0RCdXNoLnByb3RvdHlwZSA9IHtcbiAgICByYW5nZTogZnVuY3Rpb24gKG1pblgsIG1pblksIG1heFgsIG1heFkpIHtcbiAgICAgICAgcmV0dXJuIHJhbmdlKHRoaXMuaWRzLCB0aGlzLmNvb3JkcywgbWluWCwgbWluWSwgbWF4WCwgbWF4WSwgdGhpcy5ub2RlU2l6ZSk7XG4gICAgfSxcblxuICAgIHdpdGhpbjogZnVuY3Rpb24gKHgsIHksIHIpIHtcbiAgICAgICAgcmV0dXJuIHdpdGhpbih0aGlzLmlkcywgdGhpcy5jb29yZHMsIHgsIHksIHIsIHRoaXMubm9kZVNpemUpO1xuICAgIH1cbn07XG5cbmZ1bmN0aW9uIGRlZmF1bHRHZXRYKHApIHsgcmV0dXJuIHBbMF07IH1cbmZ1bmN0aW9uIGRlZmF1bHRHZXRZKHApIHsgcmV0dXJuIHBbMV07IH1cbiIsIlxuaW1wb3J0IGtkYnVzaCBmcm9tICdrZGJ1c2gnO1xuXG5leHBvcnQgZGVmYXVsdCBmdW5jdGlvbiBzdXBlcmNsdXN0ZXIob3B0aW9ucykge1xuICAgIHJldHVybiBuZXcgU3VwZXJDbHVzdGVyKG9wdGlvbnMpO1xufVxuXG5mdW5jdGlvbiBTdXBlckNsdXN0ZXIob3B0aW9ucykge1xuICAgIHRoaXMub3B0aW9ucyA9IGV4dGVuZChPYmplY3QuY3JlYXRlKHRoaXMub3B0aW9ucyksIG9wdGlvbnMpO1xuICAgIHRoaXMudHJlZXMgPSBuZXcgQXJyYXkodGhpcy5vcHRpb25zLm1heFpvb20gKyAxKTtcbn1cblxuU3VwZXJDbHVzdGVyLnByb3RvdHlwZSA9IHtcbiAgICBvcHRpb25zOiB7XG4gICAgICAgIG1pblpvb206IDAsICAgLy8gbWluIHpvb20gdG8gZ2VuZXJhdGUgY2x1c3RlcnMgb25cbiAgICAgICAgbWF4Wm9vbTogMTYsICAvLyBtYXggem9vbSBsZXZlbCB0byBjbHVzdGVyIHRoZSBwb2ludHMgb25cbiAgICAgICAgcmFkaXVzOiA0MCwgICAvLyBjbHVzdGVyIHJhZGl1cyBpbiBwaXhlbHNcbiAgICAgICAgZXh0ZW50OiA1MTIsICAvLyB0aWxlIGV4dGVudCAocmFkaXVzIGlzIGNhbGN1bGF0ZWQgcmVsYXRpdmUgdG8gaXQpXG4gICAgICAgIG5vZGVTaXplOiA2NCwgLy8gc2l6ZSBvZiB0aGUgS0QtdHJlZSBsZWFmIG5vZGUsIGFmZmVjdHMgcGVyZm9ybWFuY2VcbiAgICAgICAgbG9nOiBmYWxzZSwgICAvLyB3aGV0aGVyIHRvIGxvZyB0aW1pbmcgaW5mb1xuXG4gICAgICAgIC8vIGEgcmVkdWNlIGZ1bmN0aW9uIGZvciBjYWxjdWxhdGluZyBjdXN0b20gY2x1c3RlciBwcm9wZXJ0aWVzXG4gICAgICAgIHJlZHVjZTogbnVsbCwgLy8gZnVuY3Rpb24gKGFjY3VtdWxhdGVkLCBwcm9wcykgeyBhY2N1bXVsYXRlZC5zdW0gKz0gcHJvcHMuc3VtOyB9XG5cbiAgICAgICAgLy8gaW5pdGlhbCBwcm9wZXJ0aWVzIG9mIGEgY2x1c3RlciAoYmVmb3JlIHJ1bm5pbmcgdGhlIHJlZHVjZXIpXG4gICAgICAgIGluaXRpYWw6IGZ1bmN0aW9uICgpIHsgcmV0dXJuIHt9OyB9LCAvLyBmdW5jdGlvbiAoKSB7IHJldHVybiB7c3VtOiAwfTsgfSxcblxuICAgICAgICAvLyBwcm9wZXJ0aWVzIHRvIHVzZSBmb3IgaW5kaXZpZHVhbCBwb2ludHMgd2hlbiBydW5uaW5nIHRoZSByZWR1Y2VyXG4gICAgICAgIG1hcDogZnVuY3Rpb24gKHByb3BzKSB7IHJldHVybiBwcm9wczsgfSAvLyBmdW5jdGlvbiAocHJvcHMpIHsgcmV0dXJuIHtzdW06IHByb3BzLm15X3ZhbHVlfTsgfSxcbiAgICB9LFxuXG4gICAgbG9hZDogZnVuY3Rpb24gKHBvaW50cykge1xuICAgICAgICB2YXIgbG9nID0gdGhpcy5vcHRpb25zLmxvZztcblxuICAgICAgICBpZiAobG9nKSBjb25zb2xlLnRpbWUoJ3RvdGFsIHRpbWUnKTtcblxuICAgICAgICB2YXIgdGltZXJJZCA9ICdwcmVwYXJlICcgKyBwb2ludHMubGVuZ3RoICsgJyBwb2ludHMnO1xuICAgICAgICBpZiAobG9nKSBjb25zb2xlLnRpbWUodGltZXJJZCk7XG5cbiAgICAgICAgdGhpcy5wb2ludHMgPSBwb2ludHM7XG5cbiAgICAgICAgLy8gZ2VuZXJhdGUgYSBjbHVzdGVyIG9iamVjdCBmb3IgZWFjaCBwb2ludCBhbmQgaW5kZXggaW5wdXQgcG9pbnRzIGludG8gYSBLRC10cmVlXG4gICAgICAgIHZhciBjbHVzdGVycyA9IFtdO1xuICAgICAgICBmb3IgKHZhciBpID0gMDsgaSA8IHBvaW50cy5sZW5ndGg7IGkrKykge1xuICAgICAgICAgICAgaWYgKCFwb2ludHNbaV0uZ2VvbWV0cnkpIHtcbiAgICAgICAgICAgICAgICBjb250aW51ZTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGNsdXN0ZXJzLnB1c2goY3JlYXRlUG9pbnRDbHVzdGVyKHBvaW50c1tpXSwgaSkpO1xuICAgICAgICB9XG4gICAgICAgIHRoaXMudHJlZXNbdGhpcy5vcHRpb25zLm1heFpvb20gKyAxXSA9IGtkYnVzaChjbHVzdGVycywgZ2V0WCwgZ2V0WSwgdGhpcy5vcHRpb25zLm5vZGVTaXplLCBGbG9hdDMyQXJyYXkpO1xuXG4gICAgICAgIGlmIChsb2cpIGNvbnNvbGUudGltZUVuZCh0aW1lcklkKTtcblxuICAgICAgICAvLyBjbHVzdGVyIHBvaW50cyBvbiBtYXggem9vbSwgdGhlbiBjbHVzdGVyIHRoZSByZXN1bHRzIG9uIHByZXZpb3VzIHpvb20sIGV0Yy47XG4gICAgICAgIC8vIHJlc3VsdHMgaW4gYSBjbHVzdGVyIGhpZXJhcmNoeSBhY3Jvc3Mgem9vbSBsZXZlbHNcbiAgICAgICAgZm9yICh2YXIgeiA9IHRoaXMub3B0aW9ucy5tYXhab29tOyB6ID49IHRoaXMub3B0aW9ucy5taW5ab29tOyB6LS0pIHtcbiAgICAgICAgICAgIHZhciBub3cgPSArRGF0ZS5ub3coKTtcblxuICAgICAgICAgICAgLy8gY3JlYXRlIGEgbmV3IHNldCBvZiBjbHVzdGVycyBmb3IgdGhlIHpvb20gYW5kIGluZGV4IHRoZW0gd2l0aCBhIEtELXRyZWVcbiAgICAgICAgICAgIGNsdXN0ZXJzID0gdGhpcy5fY2x1c3RlcihjbHVzdGVycywgeik7XG4gICAgICAgICAgICB0aGlzLnRyZWVzW3pdID0ga2RidXNoKGNsdXN0ZXJzLCBnZXRYLCBnZXRZLCB0aGlzLm9wdGlvbnMubm9kZVNpemUsIEZsb2F0MzJBcnJheSk7XG5cbiAgICAgICAgICAgIGlmIChsb2cpIGNvbnNvbGUubG9nKCd6JWQ6ICVkIGNsdXN0ZXJzIGluICVkbXMnLCB6LCBjbHVzdGVycy5sZW5ndGgsICtEYXRlLm5vdygpIC0gbm93KTtcbiAgICAgICAgfVxuXG4gICAgICAgIGlmIChsb2cpIGNvbnNvbGUudGltZUVuZCgndG90YWwgdGltZScpO1xuXG4gICAgICAgIHJldHVybiB0aGlzO1xuICAgIH0sXG5cbiAgICBnZXRDbHVzdGVyczogZnVuY3Rpb24gKGJib3gsIHpvb20pIHtcbiAgICAgICAgdmFyIG1pbkxuZyA9ICgoYmJveFswXSArIDE4MCkgJSAzNjAgKyAzNjApICUgMzYwIC0gMTgwO1xuICAgICAgICB2YXIgbWluTGF0ID0gTWF0aC5tYXgoLTkwLCBNYXRoLm1pbig5MCwgYmJveFsxXSkpO1xuICAgICAgICB2YXIgbWF4TG5nID0gYmJveFsyXSA9PT0gMTgwID8gMTgwIDogKChiYm94WzJdICsgMTgwKSAlIDM2MCArIDM2MCkgJSAzNjAgLSAxODA7XG4gICAgICAgIHZhciBtYXhMYXQgPSBNYXRoLm1heCgtOTAsIE1hdGgubWluKDkwLCBiYm94WzNdKSk7XG5cbiAgICAgICAgaWYgKGJib3hbMl0gLSBiYm94WzBdID49IDM2MCkge1xuICAgICAgICAgICAgbWluTG5nID0gLTE4MDtcbiAgICAgICAgICAgIG1heExuZyA9IDE4MDtcbiAgICAgICAgfSBlbHNlIGlmIChtaW5MbmcgPiBtYXhMbmcpIHtcbiAgICAgICAgICAgIHZhciBlYXN0ZXJuSGVtID0gdGhpcy5nZXRDbHVzdGVycyhbbWluTG5nLCBtaW5MYXQsIDE4MCwgbWF4TGF0XSwgem9vbSk7XG4gICAgICAgICAgICB2YXIgd2VzdGVybkhlbSA9IHRoaXMuZ2V0Q2x1c3RlcnMoWy0xODAsIG1pbkxhdCwgbWF4TG5nLCBtYXhMYXRdLCB6b29tKTtcbiAgICAgICAgICAgIHJldHVybiBlYXN0ZXJuSGVtLmNvbmNhdCh3ZXN0ZXJuSGVtKTtcbiAgICAgICAgfVxuXG4gICAgICAgIHZhciB0cmVlID0gdGhpcy50cmVlc1t0aGlzLl9saW1pdFpvb20oem9vbSldO1xuICAgICAgICB2YXIgaWRzID0gdHJlZS5yYW5nZShsbmdYKG1pbkxuZyksIGxhdFkobWF4TGF0KSwgbG5nWChtYXhMbmcpLCBsYXRZKG1pbkxhdCkpO1xuICAgICAgICB2YXIgY2x1c3RlcnMgPSBbXTtcbiAgICAgICAgZm9yICh2YXIgaSA9IDA7IGkgPCBpZHMubGVuZ3RoOyBpKyspIHtcbiAgICAgICAgICAgIHZhciBjID0gdHJlZS5wb2ludHNbaWRzW2ldXTtcbiAgICAgICAgICAgIGNsdXN0ZXJzLnB1c2goYy5udW1Qb2ludHMgPyBnZXRDbHVzdGVySlNPTihjKSA6IHRoaXMucG9pbnRzW2MuaW5kZXhdKTtcbiAgICAgICAgfVxuICAgICAgICByZXR1cm4gY2x1c3RlcnM7XG4gICAgfSxcblxuICAgIGdldENoaWxkcmVuOiBmdW5jdGlvbiAoY2x1c3RlcklkKSB7XG4gICAgICAgIHZhciBvcmlnaW5JZCA9IGNsdXN0ZXJJZCA+PiA1O1xuICAgICAgICB2YXIgb3JpZ2luWm9vbSA9IGNsdXN0ZXJJZCAlIDMyO1xuICAgICAgICB2YXIgZXJyb3JNc2cgPSAnTm8gY2x1c3RlciB3aXRoIHRoZSBzcGVjaWZpZWQgaWQuJztcblxuICAgICAgICB2YXIgaW5kZXggPSB0aGlzLnRyZWVzW29yaWdpblpvb21dO1xuICAgICAgICBpZiAoIWluZGV4KSB0aHJvdyBuZXcgRXJyb3IoZXJyb3JNc2cpO1xuXG4gICAgICAgIHZhciBvcmlnaW4gPSBpbmRleC5wb2ludHNbb3JpZ2luSWRdO1xuICAgICAgICBpZiAoIW9yaWdpbikgdGhyb3cgbmV3IEVycm9yKGVycm9yTXNnKTtcblxuICAgICAgICB2YXIgciA9IHRoaXMub3B0aW9ucy5yYWRpdXMgLyAodGhpcy5vcHRpb25zLmV4dGVudCAqIE1hdGgucG93KDIsIG9yaWdpblpvb20gLSAxKSk7XG4gICAgICAgIHZhciBpZHMgPSBpbmRleC53aXRoaW4ob3JpZ2luLngsIG9yaWdpbi55LCByKTtcbiAgICAgICAgdmFyIGNoaWxkcmVuID0gW107XG4gICAgICAgIGZvciAodmFyIGkgPSAwOyBpIDwgaWRzLmxlbmd0aDsgaSsrKSB7XG4gICAgICAgICAgICB2YXIgYyA9IGluZGV4LnBvaW50c1tpZHNbaV1dO1xuICAgICAgICAgICAgaWYgKGMucGFyZW50SWQgPT09IGNsdXN0ZXJJZCkge1xuICAgICAgICAgICAgICAgIGNoaWxkcmVuLnB1c2goYy5udW1Qb2ludHMgPyBnZXRDbHVzdGVySlNPTihjKSA6IHRoaXMucG9pbnRzW2MuaW5kZXhdKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfVxuXG4gICAgICAgIGlmIChjaGlsZHJlbi5sZW5ndGggPT09IDApIHRocm93IG5ldyBFcnJvcihlcnJvck1zZyk7XG5cbiAgICAgICAgcmV0dXJuIGNoaWxkcmVuO1xuICAgIH0sXG5cbiAgICBnZXRMZWF2ZXM6IGZ1bmN0aW9uIChjbHVzdGVySWQsIGxpbWl0LCBvZmZzZXQpIHtcbiAgICAgICAgbGltaXQgPSBsaW1pdCB8fCAxMDtcbiAgICAgICAgb2Zmc2V0ID0gb2Zmc2V0IHx8IDA7XG5cbiAgICAgICAgdmFyIGxlYXZlcyA9IFtdO1xuICAgICAgICB0aGlzLl9hcHBlbmRMZWF2ZXMobGVhdmVzLCBjbHVzdGVySWQsIGxpbWl0LCBvZmZzZXQsIDApO1xuXG4gICAgICAgIHJldHVybiBsZWF2ZXM7XG4gICAgfSxcblxuICAgIGdldFRpbGU6IGZ1bmN0aW9uICh6LCB4LCB5KSB7XG4gICAgICAgIHZhciB0cmVlID0gdGhpcy50cmVlc1t0aGlzLl9saW1pdFpvb20oeildO1xuICAgICAgICB2YXIgejIgPSBNYXRoLnBvdygyLCB6KTtcbiAgICAgICAgdmFyIGV4dGVudCA9IHRoaXMub3B0aW9ucy5leHRlbnQ7XG4gICAgICAgIHZhciByID0gdGhpcy5vcHRpb25zLnJhZGl1cztcbiAgICAgICAgdmFyIHAgPSByIC8gZXh0ZW50O1xuICAgICAgICB2YXIgdG9wID0gKHkgLSBwKSAvIHoyO1xuICAgICAgICB2YXIgYm90dG9tID0gKHkgKyAxICsgcCkgLyB6MjtcblxuICAgICAgICB2YXIgdGlsZSA9IHtcbiAgICAgICAgICAgIGZlYXR1cmVzOiBbXVxuICAgICAgICB9O1xuXG4gICAgICAgIHRoaXMuX2FkZFRpbGVGZWF0dXJlcyhcbiAgICAgICAgICAgIHRyZWUucmFuZ2UoKHggLSBwKSAvIHoyLCB0b3AsICh4ICsgMSArIHApIC8gejIsIGJvdHRvbSksXG4gICAgICAgICAgICB0cmVlLnBvaW50cywgeCwgeSwgejIsIHRpbGUpO1xuXG4gICAgICAgIGlmICh4ID09PSAwKSB7XG4gICAgICAgICAgICB0aGlzLl9hZGRUaWxlRmVhdHVyZXMoXG4gICAgICAgICAgICAgICAgdHJlZS5yYW5nZSgxIC0gcCAvIHoyLCB0b3AsIDEsIGJvdHRvbSksXG4gICAgICAgICAgICAgICAgdHJlZS5wb2ludHMsIHoyLCB5LCB6MiwgdGlsZSk7XG4gICAgICAgIH1cbiAgICAgICAgaWYgKHggPT09IHoyIC0gMSkge1xuICAgICAgICAgICAgdGhpcy5fYWRkVGlsZUZlYXR1cmVzKFxuICAgICAgICAgICAgICAgIHRyZWUucmFuZ2UoMCwgdG9wLCBwIC8gejIsIGJvdHRvbSksXG4gICAgICAgICAgICAgICAgdHJlZS5wb2ludHMsIC0xLCB5LCB6MiwgdGlsZSk7XG4gICAgICAgIH1cblxuICAgICAgICByZXR1cm4gdGlsZS5mZWF0dXJlcy5sZW5ndGggPyB0aWxlIDogbnVsbDtcbiAgICB9LFxuXG4gICAgZ2V0Q2x1c3RlckV4cGFuc2lvblpvb206IGZ1bmN0aW9uIChjbHVzdGVySWQpIHtcbiAgICAgICAgdmFyIGNsdXN0ZXJab29tID0gKGNsdXN0ZXJJZCAlIDMyKSAtIDE7XG4gICAgICAgIHdoaWxlIChjbHVzdGVyWm9vbSA8IHRoaXMub3B0aW9ucy5tYXhab29tKSB7XG4gICAgICAgICAgICB2YXIgY2hpbGRyZW4gPSB0aGlzLmdldENoaWxkcmVuKGNsdXN0ZXJJZCk7XG4gICAgICAgICAgICBjbHVzdGVyWm9vbSsrO1xuICAgICAgICAgICAgaWYgKGNoaWxkcmVuLmxlbmd0aCAhPT0gMSkgYnJlYWs7XG4gICAgICAgICAgICBjbHVzdGVySWQgPSBjaGlsZHJlblswXS5wcm9wZXJ0aWVzLmNsdXN0ZXJfaWQ7XG4gICAgICAgIH1cbiAgICAgICAgcmV0dXJuIGNsdXN0ZXJab29tO1xuICAgIH0sXG5cbiAgICBfYXBwZW5kTGVhdmVzOiBmdW5jdGlvbiAocmVzdWx0LCBjbHVzdGVySWQsIGxpbWl0LCBvZmZzZXQsIHNraXBwZWQpIHtcbiAgICAgICAgdmFyIGNoaWxkcmVuID0gdGhpcy5nZXRDaGlsZHJlbihjbHVzdGVySWQpO1xuXG4gICAgICAgIGZvciAodmFyIGkgPSAwOyBpIDwgY2hpbGRyZW4ubGVuZ3RoOyBpKyspIHtcbiAgICAgICAgICAgIHZhciBwcm9wcyA9IGNoaWxkcmVuW2ldLnByb3BlcnRpZXM7XG5cbiAgICAgICAgICAgIGlmIChwcm9wcyAmJiBwcm9wcy5jbHVzdGVyKSB7XG4gICAgICAgICAgICAgICAgaWYgKHNraXBwZWQgKyBwcm9wcy5wb2ludF9jb3VudCA8PSBvZmZzZXQpIHtcbiAgICAgICAgICAgICAgICAgICAgLy8gc2tpcCB0aGUgd2hvbGUgY2x1c3RlclxuICAgICAgICAgICAgICAgICAgICBza2lwcGVkICs9IHByb3BzLnBvaW50X2NvdW50O1xuICAgICAgICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICAgICAgICAgIC8vIGVudGVyIHRoZSBjbHVzdGVyXG4gICAgICAgICAgICAgICAgICAgIHNraXBwZWQgPSB0aGlzLl9hcHBlbmRMZWF2ZXMocmVzdWx0LCBwcm9wcy5jbHVzdGVyX2lkLCBsaW1pdCwgb2Zmc2V0LCBza2lwcGVkKTtcbiAgICAgICAgICAgICAgICAgICAgLy8gZXhpdCB0aGUgY2x1c3RlclxuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH0gZWxzZSBpZiAoc2tpcHBlZCA8IG9mZnNldCkge1xuICAgICAgICAgICAgICAgIC8vIHNraXAgYSBzaW5nbGUgcG9pbnRcbiAgICAgICAgICAgICAgICBza2lwcGVkKys7XG4gICAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgICAgIC8vIGFkZCBhIHNpbmdsZSBwb2ludFxuICAgICAgICAgICAgICAgIHJlc3VsdC5wdXNoKGNoaWxkcmVuW2ldKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGlmIChyZXN1bHQubGVuZ3RoID09PSBsaW1pdCkgYnJlYWs7XG4gICAgICAgIH1cblxuICAgICAgICByZXR1cm4gc2tpcHBlZDtcbiAgICB9LFxuXG4gICAgX2FkZFRpbGVGZWF0dXJlczogZnVuY3Rpb24gKGlkcywgcG9pbnRzLCB4LCB5LCB6MiwgdGlsZSkge1xuICAgICAgICBmb3IgKHZhciBpID0gMDsgaSA8IGlkcy5sZW5ndGg7IGkrKykge1xuICAgICAgICAgICAgdmFyIGMgPSBwb2ludHNbaWRzW2ldXTtcbiAgICAgICAgICAgIHZhciBmID0ge1xuICAgICAgICAgICAgICAgIHR5cGU6IDEsXG4gICAgICAgICAgICAgICAgZ2VvbWV0cnk6IFtbXG4gICAgICAgICAgICAgICAgICAgIE1hdGgucm91bmQodGhpcy5vcHRpb25zLmV4dGVudCAqIChjLnggKiB6MiAtIHgpKSxcbiAgICAgICAgICAgICAgICAgICAgTWF0aC5yb3VuZCh0aGlzLm9wdGlvbnMuZXh0ZW50ICogKGMueSAqIHoyIC0geSkpXG4gICAgICAgICAgICAgICAgXV0sXG4gICAgICAgICAgICAgICAgdGFnczogYy5udW1Qb2ludHMgPyBnZXRDbHVzdGVyUHJvcGVydGllcyhjKSA6IHRoaXMucG9pbnRzW2MuaW5kZXhdLnByb3BlcnRpZXNcbiAgICAgICAgICAgIH07XG4gICAgICAgICAgICB2YXIgaWQgPSBjLm51bVBvaW50cyA/IGMuaWQgOiB0aGlzLnBvaW50c1tjLmluZGV4XS5pZDtcbiAgICAgICAgICAgIGlmIChpZCAhPT0gdW5kZWZpbmVkKSB7XG4gICAgICAgICAgICAgICAgZi5pZCA9IGlkO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgdGlsZS5mZWF0dXJlcy5wdXNoKGYpO1xuICAgICAgICB9XG4gICAgfSxcblxuICAgIF9saW1pdFpvb206IGZ1bmN0aW9uICh6KSB7XG4gICAgICAgIHJldHVybiBNYXRoLm1heCh0aGlzLm9wdGlvbnMubWluWm9vbSwgTWF0aC5taW4oeiwgdGhpcy5vcHRpb25zLm1heFpvb20gKyAxKSk7XG4gICAgfSxcblxuICAgIF9jbHVzdGVyOiBmdW5jdGlvbiAocG9pbnRzLCB6b29tKSB7XG4gICAgICAgIHZhciBjbHVzdGVycyA9IFtdO1xuICAgICAgICB2YXIgciA9IHRoaXMub3B0aW9ucy5yYWRpdXMgLyAodGhpcy5vcHRpb25zLmV4dGVudCAqIE1hdGgucG93KDIsIHpvb20pKTtcblxuICAgICAgICAvLyBsb29wIHRocm91Z2ggZWFjaCBwb2ludFxuICAgICAgICBmb3IgKHZhciBpID0gMDsgaSA8IHBvaW50cy5sZW5ndGg7IGkrKykge1xuICAgICAgICAgICAgdmFyIHAgPSBwb2ludHNbaV07XG4gICAgICAgICAgICAvLyBpZiB3ZSd2ZSBhbHJlYWR5IHZpc2l0ZWQgdGhlIHBvaW50IGF0IHRoaXMgem9vbSBsZXZlbCwgc2tpcCBpdFxuICAgICAgICAgICAgaWYgKHAuem9vbSA8PSB6b29tKSBjb250aW51ZTtcbiAgICAgICAgICAgIHAuem9vbSA9IHpvb207XG5cbiAgICAgICAgICAgIC8vIGZpbmQgYWxsIG5lYXJieSBwb2ludHNcbiAgICAgICAgICAgIHZhciB0cmVlID0gdGhpcy50cmVlc1t6b29tICsgMV07XG4gICAgICAgICAgICB2YXIgbmVpZ2hib3JJZHMgPSB0cmVlLndpdGhpbihwLngsIHAueSwgcik7XG5cbiAgICAgICAgICAgIHZhciBudW1Qb2ludHMgPSBwLm51bVBvaW50cyB8fCAxO1xuICAgICAgICAgICAgdmFyIHd4ID0gcC54ICogbnVtUG9pbnRzO1xuICAgICAgICAgICAgdmFyIHd5ID0gcC55ICogbnVtUG9pbnRzO1xuXG4gICAgICAgICAgICB2YXIgY2x1c3RlclByb3BlcnRpZXMgPSBudWxsO1xuXG4gICAgICAgICAgICBpZiAodGhpcy5vcHRpb25zLnJlZHVjZSkge1xuICAgICAgICAgICAgICAgIGNsdXN0ZXJQcm9wZXJ0aWVzID0gdGhpcy5vcHRpb25zLmluaXRpYWwoKTtcbiAgICAgICAgICAgICAgICB0aGlzLl9hY2N1bXVsYXRlKGNsdXN0ZXJQcm9wZXJ0aWVzLCBwKTtcbiAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgLy8gZW5jb2RlIGJvdGggem9vbSBhbmQgcG9pbnQgaW5kZXggb24gd2hpY2ggdGhlIGNsdXN0ZXIgb3JpZ2luYXRlZFxuICAgICAgICAgICAgdmFyIGlkID0gKGkgPDwgNSkgKyAoem9vbSArIDEpO1xuXG4gICAgICAgICAgICBmb3IgKHZhciBqID0gMDsgaiA8IG5laWdoYm9ySWRzLmxlbmd0aDsgaisrKSB7XG4gICAgICAgICAgICAgICAgdmFyIGIgPSB0cmVlLnBvaW50c1tuZWlnaGJvcklkc1tqXV07XG4gICAgICAgICAgICAgICAgLy8gZmlsdGVyIG91dCBuZWlnaGJvcnMgdGhhdCBhcmUgYWxyZWFkeSBwcm9jZXNzZWRcbiAgICAgICAgICAgICAgICBpZiAoYi56b29tIDw9IHpvb20pIGNvbnRpbnVlO1xuICAgICAgICAgICAgICAgIGIuem9vbSA9IHpvb207IC8vIHNhdmUgdGhlIHpvb20gKHNvIGl0IGRvZXNuJ3QgZ2V0IHByb2Nlc3NlZCB0d2ljZSlcblxuICAgICAgICAgICAgICAgIHZhciBudW1Qb2ludHMyID0gYi5udW1Qb2ludHMgfHwgMTtcbiAgICAgICAgICAgICAgICB3eCArPSBiLnggKiBudW1Qb2ludHMyOyAvLyBhY2N1bXVsYXRlIGNvb3JkaW5hdGVzIGZvciBjYWxjdWxhdGluZyB3ZWlnaHRlZCBjZW50ZXJcbiAgICAgICAgICAgICAgICB3eSArPSBiLnkgKiBudW1Qb2ludHMyO1xuXG4gICAgICAgICAgICAgICAgbnVtUG9pbnRzICs9IG51bVBvaW50czI7XG4gICAgICAgICAgICAgICAgYi5wYXJlbnRJZCA9IGlkO1xuXG4gICAgICAgICAgICAgICAgaWYgKHRoaXMub3B0aW9ucy5yZWR1Y2UpIHtcbiAgICAgICAgICAgICAgICAgICAgdGhpcy5fYWNjdW11bGF0ZShjbHVzdGVyUHJvcGVydGllcywgYik7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICBpZiAobnVtUG9pbnRzID09PSAxKSB7XG4gICAgICAgICAgICAgICAgY2x1c3RlcnMucHVzaChwKTtcbiAgICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICAgICAgcC5wYXJlbnRJZCA9IGlkO1xuICAgICAgICAgICAgICAgIGNsdXN0ZXJzLnB1c2goY3JlYXRlQ2x1c3Rlcih3eCAvIG51bVBvaW50cywgd3kgLyBudW1Qb2ludHMsIGlkLCBudW1Qb2ludHMsIGNsdXN0ZXJQcm9wZXJ0aWVzKSk7XG4gICAgICAgICAgICB9XG4gICAgICAgIH1cblxuICAgICAgICByZXR1cm4gY2x1c3RlcnM7XG4gICAgfSxcblxuICAgIF9hY2N1bXVsYXRlOiBmdW5jdGlvbiAoY2x1c3RlclByb3BlcnRpZXMsIHBvaW50KSB7XG4gICAgICAgIHZhciBwcm9wZXJ0aWVzID0gcG9pbnQubnVtUG9pbnRzID9cbiAgICAgICAgICAgIHBvaW50LnByb3BlcnRpZXMgOlxuICAgICAgICAgICAgdGhpcy5vcHRpb25zLm1hcCh0aGlzLnBvaW50c1twb2ludC5pbmRleF0ucHJvcGVydGllcyk7XG5cbiAgICAgICAgdGhpcy5vcHRpb25zLnJlZHVjZShjbHVzdGVyUHJvcGVydGllcywgcHJvcGVydGllcyk7XG4gICAgfVxufTtcblxuZnVuY3Rpb24gY3JlYXRlQ2x1c3Rlcih4LCB5LCBpZCwgbnVtUG9pbnRzLCBwcm9wZXJ0aWVzKSB7XG4gICAgcmV0dXJuIHtcbiAgICAgICAgeDogeCwgLy8gd2VpZ2h0ZWQgY2x1c3RlciBjZW50ZXJcbiAgICAgICAgeTogeSxcbiAgICAgICAgem9vbTogSW5maW5pdHksIC8vIHRoZSBsYXN0IHpvb20gdGhlIGNsdXN0ZXIgd2FzIHByb2Nlc3NlZCBhdFxuICAgICAgICBpZDogaWQsIC8vIGVuY29kZXMgaW5kZXggb2YgdGhlIGZpcnN0IGNoaWxkIG9mIHRoZSBjbHVzdGVyIGFuZCBpdHMgem9vbSBsZXZlbFxuICAgICAgICBwYXJlbnRJZDogLTEsIC8vIHBhcmVudCBjbHVzdGVyIGlkXG4gICAgICAgIG51bVBvaW50czogbnVtUG9pbnRzLFxuICAgICAgICBwcm9wZXJ0aWVzOiBwcm9wZXJ0aWVzXG4gICAgfTtcbn1cblxuZnVuY3Rpb24gY3JlYXRlUG9pbnRDbHVzdGVyKHAsIGlkKSB7XG4gICAgdmFyIGNvb3JkcyA9IHAuZ2VvbWV0cnkuY29vcmRpbmF0ZXM7XG4gICAgcmV0dXJuIHtcbiAgICAgICAgeDogbG5nWChjb29yZHNbMF0pLCAvLyBwcm9qZWN0ZWQgcG9pbnQgY29vcmRpbmF0ZXNcbiAgICAgICAgeTogbGF0WShjb29yZHNbMV0pLFxuICAgICAgICB6b29tOiBJbmZpbml0eSwgLy8gdGhlIGxhc3Qgem9vbSB0aGUgcG9pbnQgd2FzIHByb2Nlc3NlZCBhdFxuICAgICAgICBpbmRleDogaWQsIC8vIGluZGV4IG9mIHRoZSBzb3VyY2UgZmVhdHVyZSBpbiB0aGUgb3JpZ2luYWwgaW5wdXQgYXJyYXksXG4gICAgICAgIHBhcmVudElkOiAtMSAvLyBwYXJlbnQgY2x1c3RlciBpZFxuICAgIH07XG59XG5cbmZ1bmN0aW9uIGdldENsdXN0ZXJKU09OKGNsdXN0ZXIpIHtcbiAgICByZXR1cm4ge1xuICAgICAgICB0eXBlOiAnRmVhdHVyZScsXG4gICAgICAgIGlkOiBjbHVzdGVyLmlkLFxuICAgICAgICBwcm9wZXJ0aWVzOiBnZXRDbHVzdGVyUHJvcGVydGllcyhjbHVzdGVyKSxcbiAgICAgICAgZ2VvbWV0cnk6IHtcbiAgICAgICAgICAgIHR5cGU6ICdQb2ludCcsXG4gICAgICAgICAgICBjb29yZGluYXRlczogW3hMbmcoY2x1c3Rlci54KSwgeUxhdChjbHVzdGVyLnkpXVxuICAgICAgICB9XG4gICAgfTtcbn1cblxuZnVuY3Rpb24gZ2V0Q2x1c3RlclByb3BlcnRpZXMoY2x1c3Rlcikge1xuICAgIHZhciBjb3VudCA9IGNsdXN0ZXIubnVtUG9pbnRzO1xuICAgIHZhciBhYmJyZXYgPVxuICAgICAgICBjb3VudCA+PSAxMDAwMCA/IE1hdGgucm91bmQoY291bnQgLyAxMDAwKSArICdrJyA6XG4gICAgICAgIGNvdW50ID49IDEwMDAgPyAoTWF0aC5yb3VuZChjb3VudCAvIDEwMCkgLyAxMCkgKyAnaycgOiBjb3VudDtcbiAgICByZXR1cm4gZXh0ZW5kKGV4dGVuZCh7fSwgY2x1c3Rlci5wcm9wZXJ0aWVzKSwge1xuICAgICAgICBjbHVzdGVyOiB0cnVlLFxuICAgICAgICBjbHVzdGVyX2lkOiBjbHVzdGVyLmlkLFxuICAgICAgICBwb2ludF9jb3VudDogY291bnQsXG4gICAgICAgIHBvaW50X2NvdW50X2FiYnJldmlhdGVkOiBhYmJyZXZcbiAgICB9KTtcbn1cblxuLy8gbG9uZ2l0dWRlL2xhdGl0dWRlIHRvIHNwaGVyaWNhbCBtZXJjYXRvciBpbiBbMC4uMV0gcmFuZ2VcbmZ1bmN0aW9uIGxuZ1gobG5nKSB7XG4gICAgcmV0dXJuIGxuZyAvIDM2MCArIDAuNTtcbn1cbmZ1bmN0aW9uIGxhdFkobGF0KSB7XG4gICAgdmFyIHNpbiA9IE1hdGguc2luKGxhdCAqIE1hdGguUEkgLyAxODApLFxuICAgICAgICB5ID0gKDAuNSAtIDAuMjUgKiBNYXRoLmxvZygoMSArIHNpbikgLyAoMSAtIHNpbikpIC8gTWF0aC5QSSk7XG4gICAgcmV0dXJuIHkgPCAwID8gMCA6IHkgPiAxID8gMSA6IHk7XG59XG5cbi8vIHNwaGVyaWNhbCBtZXJjYXRvciB0byBsb25naXR1ZGUvbGF0aXR1ZGVcbmZ1bmN0aW9uIHhMbmcoeCkge1xuICAgIHJldHVybiAoeCAtIDAuNSkgKiAzNjA7XG59XG5mdW5jdGlvbiB5TGF0KHkpIHtcbiAgICB2YXIgeTIgPSAoMTgwIC0geSAqIDM2MCkgKiBNYXRoLlBJIC8gMTgwO1xuICAgIHJldHVybiAzNjAgKiBNYXRoLmF0YW4oTWF0aC5leHAoeTIpKSAvIE1hdGguUEkgLSA5MDtcbn1cblxuZnVuY3Rpb24gZXh0ZW5kKGRlc3QsIHNyYykge1xuICAgIGZvciAodmFyIGlkIGluIHNyYykgZGVzdFtpZF0gPSBzcmNbaWRdO1xuICAgIHJldHVybiBkZXN0O1xufVxuXG5mdW5jdGlvbiBnZXRYKHApIHtcbiAgICByZXR1cm4gcC54O1xufVxuZnVuY3Rpb24gZ2V0WShwKSB7XG4gICAgcmV0dXJuIHAueTtcbn1cbiIsIlxuLy8gY2FsY3VsYXRlIHNpbXBsaWZpY2F0aW9uIGRhdGEgdXNpbmcgb3B0aW1pemVkIERvdWdsYXMtUGV1Y2tlciBhbGdvcml0aG1cblxuZXhwb3J0IGRlZmF1bHQgZnVuY3Rpb24gc2ltcGxpZnkoY29vcmRzLCBmaXJzdCwgbGFzdCwgc3FUb2xlcmFuY2UpIHtcbiAgICB2YXIgbWF4U3FEaXN0ID0gc3FUb2xlcmFuY2U7XG4gICAgdmFyIG1pZCA9IChsYXN0IC0gZmlyc3QpID4+IDE7XG4gICAgdmFyIG1pblBvc1RvTWlkID0gbGFzdCAtIGZpcnN0O1xuICAgIHZhciBpbmRleDtcblxuICAgIHZhciBheCA9IGNvb3Jkc1tmaXJzdF07XG4gICAgdmFyIGF5ID0gY29vcmRzW2ZpcnN0ICsgMV07XG4gICAgdmFyIGJ4ID0gY29vcmRzW2xhc3RdO1xuICAgIHZhciBieSA9IGNvb3Jkc1tsYXN0ICsgMV07XG5cbiAgICBmb3IgKHZhciBpID0gZmlyc3QgKyAzOyBpIDwgbGFzdDsgaSArPSAzKSB7XG4gICAgICAgIHZhciBkID0gZ2V0U3FTZWdEaXN0KGNvb3Jkc1tpXSwgY29vcmRzW2kgKyAxXSwgYXgsIGF5LCBieCwgYnkpO1xuXG4gICAgICAgIGlmIChkID4gbWF4U3FEaXN0KSB7XG4gICAgICAgICAgICBpbmRleCA9IGk7XG4gICAgICAgICAgICBtYXhTcURpc3QgPSBkO1xuXG4gICAgICAgIH0gZWxzZSBpZiAoZCA9PT0gbWF4U3FEaXN0KSB7XG4gICAgICAgICAgICAvLyBhIHdvcmthcm91bmQgdG8gZW5zdXJlIHdlIGNob29zZSBhIHBpdm90IGNsb3NlIHRvIHRoZSBtaWRkbGUgb2YgdGhlIGxpc3QsXG4gICAgICAgICAgICAvLyByZWR1Y2luZyByZWN1cnNpb24gZGVwdGgsIGZvciBjZXJ0YWluIGRlZ2VuZXJhdGUgaW5wdXRzXG4gICAgICAgICAgICAvLyBodHRwczovL2dpdGh1Yi5jb20vbWFwYm94L2dlb2pzb24tdnQvaXNzdWVzLzEwNFxuICAgICAgICAgICAgdmFyIHBvc1RvTWlkID0gTWF0aC5hYnMoaSAtIG1pZCk7XG4gICAgICAgICAgICBpZiAocG9zVG9NaWQgPCBtaW5Qb3NUb01pZCkge1xuICAgICAgICAgICAgICAgIGluZGV4ID0gaTtcbiAgICAgICAgICAgICAgICBtaW5Qb3NUb01pZCA9IHBvc1RvTWlkO1xuICAgICAgICAgICAgfVxuICAgICAgICB9XG4gICAgfVxuXG4gICAgaWYgKG1heFNxRGlzdCA+IHNxVG9sZXJhbmNlKSB7XG4gICAgICAgIGlmIChpbmRleCAtIGZpcnN0ID4gMykgc2ltcGxpZnkoY29vcmRzLCBmaXJzdCwgaW5kZXgsIHNxVG9sZXJhbmNlKTtcbiAgICAgICAgY29vcmRzW2luZGV4ICsgMl0gPSBtYXhTcURpc3Q7XG4gICAgICAgIGlmIChsYXN0IC0gaW5kZXggPiAzKSBzaW1wbGlmeShjb29yZHMsIGluZGV4LCBsYXN0LCBzcVRvbGVyYW5jZSk7XG4gICAgfVxufVxuXG4vLyBzcXVhcmUgZGlzdGFuY2UgZnJvbSBhIHBvaW50IHRvIGEgc2VnbWVudFxuZnVuY3Rpb24gZ2V0U3FTZWdEaXN0KHB4LCBweSwgeCwgeSwgYngsIGJ5KSB7XG5cbiAgICB2YXIgZHggPSBieCAtIHg7XG4gICAgdmFyIGR5ID0gYnkgLSB5O1xuXG4gICAgaWYgKGR4ICE9PSAwIHx8IGR5ICE9PSAwKSB7XG5cbiAgICAgICAgdmFyIHQgPSAoKHB4IC0geCkgKiBkeCArIChweSAtIHkpICogZHkpIC8gKGR4ICogZHggKyBkeSAqIGR5KTtcblxuICAgICAgICBpZiAodCA+IDEpIHtcbiAgICAgICAgICAgIHggPSBieDtcbiAgICAgICAgICAgIHkgPSBieTtcblxuICAgICAgICB9IGVsc2UgaWYgKHQgPiAwKSB7XG4gICAgICAgICAgICB4ICs9IGR4ICogdDtcbiAgICAgICAgICAgIHkgKz0gZHkgKiB0O1xuICAgICAgICB9XG4gICAgfVxuXG4gICAgZHggPSBweCAtIHg7XG4gICAgZHkgPSBweSAtIHk7XG5cbiAgICByZXR1cm4gZHggKiBkeCArIGR5ICogZHk7XG59XG4iLCJcbmV4cG9ydCBkZWZhdWx0IGZ1bmN0aW9uIGNyZWF0ZUZlYXR1cmUoaWQsIHR5cGUsIGdlb20sIHRhZ3MpIHtcbiAgICB2YXIgZmVhdHVyZSA9IHtcbiAgICAgICAgaWQ6IHR5cGVvZiBpZCA9PT0gJ3VuZGVmaW5lZCcgPyBudWxsIDogaWQsXG4gICAgICAgIHR5cGU6IHR5cGUsXG4gICAgICAgIGdlb21ldHJ5OiBnZW9tLFxuICAgICAgICB0YWdzOiB0YWdzLFxuICAgICAgICBtaW5YOiBJbmZpbml0eSxcbiAgICAgICAgbWluWTogSW5maW5pdHksXG4gICAgICAgIG1heFg6IC1JbmZpbml0eSxcbiAgICAgICAgbWF4WTogLUluZmluaXR5XG4gICAgfTtcbiAgICBjYWxjQkJveChmZWF0dXJlKTtcbiAgICByZXR1cm4gZmVhdHVyZTtcbn1cblxuZnVuY3Rpb24gY2FsY0JCb3goZmVhdHVyZSkge1xuICAgIHZhciBnZW9tID0gZmVhdHVyZS5nZW9tZXRyeTtcbiAgICB2YXIgdHlwZSA9IGZlYXR1cmUudHlwZTtcblxuICAgIGlmICh0eXBlID09PSAnUG9pbnQnIHx8IHR5cGUgPT09ICdNdWx0aVBvaW50JyB8fCB0eXBlID09PSAnTGluZVN0cmluZycpIHtcbiAgICAgICAgY2FsY0xpbmVCQm94KGZlYXR1cmUsIGdlb20pO1xuXG4gICAgfSBlbHNlIGlmICh0eXBlID09PSAnUG9seWdvbicgfHwgdHlwZSA9PT0gJ011bHRpTGluZVN0cmluZycpIHtcbiAgICAgICAgZm9yICh2YXIgaSA9IDA7IGkgPCBnZW9tLmxlbmd0aDsgaSsrKSB7XG4gICAgICAgICAgICBjYWxjTGluZUJCb3goZmVhdHVyZSwgZ2VvbVtpXSk7XG4gICAgICAgIH1cblxuICAgIH0gZWxzZSBpZiAodHlwZSA9PT0gJ011bHRpUG9seWdvbicpIHtcbiAgICAgICAgZm9yIChpID0gMDsgaSA8IGdlb20ubGVuZ3RoOyBpKyspIHtcbiAgICAgICAgICAgIGZvciAodmFyIGogPSAwOyBqIDwgZ2VvbVtpXS5sZW5ndGg7IGorKykge1xuICAgICAgICAgICAgICAgIGNhbGNMaW5lQkJveChmZWF0dXJlLCBnZW9tW2ldW2pdKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgIH1cbn1cblxuZnVuY3Rpb24gY2FsY0xpbmVCQm94KGZlYXR1cmUsIGdlb20pIHtcbiAgICBmb3IgKHZhciBpID0gMDsgaSA8IGdlb20ubGVuZ3RoOyBpICs9IDMpIHtcbiAgICAgICAgZmVhdHVyZS5taW5YID0gTWF0aC5taW4oZmVhdHVyZS5taW5YLCBnZW9tW2ldKTtcbiAgICAgICAgZmVhdHVyZS5taW5ZID0gTWF0aC5taW4oZmVhdHVyZS5taW5ZLCBnZW9tW2kgKyAxXSk7XG4gICAgICAgIGZlYXR1cmUubWF4WCA9IE1hdGgubWF4KGZlYXR1cmUubWF4WCwgZ2VvbVtpXSk7XG4gICAgICAgIGZlYXR1cmUubWF4WSA9IE1hdGgubWF4KGZlYXR1cmUubWF4WSwgZ2VvbVtpICsgMV0pO1xuICAgIH1cbn1cbiIsIlxuaW1wb3J0IHNpbXBsaWZ5IGZyb20gJy4vc2ltcGxpZnknO1xuaW1wb3J0IGNyZWF0ZUZlYXR1cmUgZnJvbSAnLi9mZWF0dXJlJztcblxuLy8gY29udmVydHMgR2VvSlNPTiBmZWF0dXJlIGludG8gYW4gaW50ZXJtZWRpYXRlIHByb2plY3RlZCBKU09OIHZlY3RvciBmb3JtYXQgd2l0aCBzaW1wbGlmaWNhdGlvbiBkYXRhXG5cbmV4cG9ydCBkZWZhdWx0IGZ1bmN0aW9uIGNvbnZlcnQoZGF0YSwgb3B0aW9ucykge1xuICAgIHZhciBmZWF0dXJlcyA9IFtdO1xuICAgIGlmIChkYXRhLnR5cGUgPT09ICdGZWF0dXJlQ29sbGVjdGlvbicpIHtcbiAgICAgICAgZm9yICh2YXIgaSA9IDA7IGkgPCBkYXRhLmZlYXR1cmVzLmxlbmd0aDsgaSsrKSB7XG4gICAgICAgICAgICBjb252ZXJ0RmVhdHVyZShmZWF0dXJlcywgZGF0YS5mZWF0dXJlc1tpXSwgb3B0aW9ucywgaSk7XG4gICAgICAgIH1cblxuICAgIH0gZWxzZSBpZiAoZGF0YS50eXBlID09PSAnRmVhdHVyZScpIHtcbiAgICAgICAgY29udmVydEZlYXR1cmUoZmVhdHVyZXMsIGRhdGEsIG9wdGlvbnMpO1xuXG4gICAgfSBlbHNlIHtcbiAgICAgICAgLy8gc2luZ2xlIGdlb21ldHJ5IG9yIGEgZ2VvbWV0cnkgY29sbGVjdGlvblxuICAgICAgICBjb252ZXJ0RmVhdHVyZShmZWF0dXJlcywge2dlb21ldHJ5OiBkYXRhfSwgb3B0aW9ucyk7XG4gICAgfVxuXG4gICAgcmV0dXJuIGZlYXR1cmVzO1xufVxuXG5mdW5jdGlvbiBjb252ZXJ0RmVhdHVyZShmZWF0dXJlcywgZ2VvanNvbiwgb3B0aW9ucywgaW5kZXgpIHtcbiAgICBpZiAoIWdlb2pzb24uZ2VvbWV0cnkpIHJldHVybjtcblxuICAgIHZhciBjb29yZHMgPSBnZW9qc29uLmdlb21ldHJ5LmNvb3JkaW5hdGVzO1xuICAgIHZhciB0eXBlID0gZ2VvanNvbi5nZW9tZXRyeS50eXBlO1xuICAgIHZhciB0b2xlcmFuY2UgPSBNYXRoLnBvdyhvcHRpb25zLnRvbGVyYW5jZSAvICgoMSA8PCBvcHRpb25zLm1heFpvb20pICogb3B0aW9ucy5leHRlbnQpLCAyKTtcbiAgICB2YXIgZ2VvbWV0cnkgPSBbXTtcbiAgICB2YXIgaWQgPSBnZW9qc29uLmlkO1xuICAgIGlmIChvcHRpb25zLnByb21vdGVJZCkge1xuICAgICAgICBpZCA9IGdlb2pzb24ucHJvcGVydGllc1tvcHRpb25zLnByb21vdGVJZF07XG4gICAgfSBlbHNlIGlmIChvcHRpb25zLmdlbmVyYXRlSWQpIHtcbiAgICAgICAgaWQgPSBpbmRleCB8fCAwO1xuICAgIH1cbiAgICBpZiAodHlwZSA9PT0gJ1BvaW50Jykge1xuICAgICAgICBjb252ZXJ0UG9pbnQoY29vcmRzLCBnZW9tZXRyeSk7XG5cbiAgICB9IGVsc2UgaWYgKHR5cGUgPT09ICdNdWx0aVBvaW50Jykge1xuICAgICAgICBmb3IgKHZhciBpID0gMDsgaSA8IGNvb3Jkcy5sZW5ndGg7IGkrKykge1xuICAgICAgICAgICAgY29udmVydFBvaW50KGNvb3Jkc1tpXSwgZ2VvbWV0cnkpO1xuICAgICAgICB9XG5cbiAgICB9IGVsc2UgaWYgKHR5cGUgPT09ICdMaW5lU3RyaW5nJykge1xuICAgICAgICBjb252ZXJ0TGluZShjb29yZHMsIGdlb21ldHJ5LCB0b2xlcmFuY2UsIGZhbHNlKTtcblxuICAgIH0gZWxzZSBpZiAodHlwZSA9PT0gJ011bHRpTGluZVN0cmluZycpIHtcbiAgICAgICAgaWYgKG9wdGlvbnMubGluZU1ldHJpY3MpIHtcbiAgICAgICAgICAgIC8vIGV4cGxvZGUgaW50byBsaW5lc3RyaW5ncyB0byBiZSBhYmxlIHRvIHRyYWNrIG1ldHJpY3NcbiAgICAgICAgICAgIGZvciAoaSA9IDA7IGkgPCBjb29yZHMubGVuZ3RoOyBpKyspIHtcbiAgICAgICAgICAgICAgICBnZW9tZXRyeSA9IFtdO1xuICAgICAgICAgICAgICAgIGNvbnZlcnRMaW5lKGNvb3Jkc1tpXSwgZ2VvbWV0cnksIHRvbGVyYW5jZSwgZmFsc2UpO1xuICAgICAgICAgICAgICAgIGZlYXR1cmVzLnB1c2goY3JlYXRlRmVhdHVyZShpZCwgJ0xpbmVTdHJpbmcnLCBnZW9tZXRyeSwgZ2VvanNvbi5wcm9wZXJ0aWVzKSk7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICByZXR1cm47XG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICBjb252ZXJ0TGluZXMoY29vcmRzLCBnZW9tZXRyeSwgdG9sZXJhbmNlLCBmYWxzZSk7XG4gICAgICAgIH1cblxuICAgIH0gZWxzZSBpZiAodHlwZSA9PT0gJ1BvbHlnb24nKSB7XG4gICAgICAgIGNvbnZlcnRMaW5lcyhjb29yZHMsIGdlb21ldHJ5LCB0b2xlcmFuY2UsIHRydWUpO1xuXG4gICAgfSBlbHNlIGlmICh0eXBlID09PSAnTXVsdGlQb2x5Z29uJykge1xuICAgICAgICBmb3IgKGkgPSAwOyBpIDwgY29vcmRzLmxlbmd0aDsgaSsrKSB7XG4gICAgICAgICAgICB2YXIgcG9seWdvbiA9IFtdO1xuICAgICAgICAgICAgY29udmVydExpbmVzKGNvb3Jkc1tpXSwgcG9seWdvbiwgdG9sZXJhbmNlLCB0cnVlKTtcbiAgICAgICAgICAgIGdlb21ldHJ5LnB1c2gocG9seWdvbik7XG4gICAgICAgIH1cbiAgICB9IGVsc2UgaWYgKHR5cGUgPT09ICdHZW9tZXRyeUNvbGxlY3Rpb24nKSB7XG4gICAgICAgIGZvciAoaSA9IDA7IGkgPCBnZW9qc29uLmdlb21ldHJ5Lmdlb21ldHJpZXMubGVuZ3RoOyBpKyspIHtcbiAgICAgICAgICAgIGNvbnZlcnRGZWF0dXJlKGZlYXR1cmVzLCB7XG4gICAgICAgICAgICAgICAgaWQ6IGlkLFxuICAgICAgICAgICAgICAgIGdlb21ldHJ5OiBnZW9qc29uLmdlb21ldHJ5Lmdlb21ldHJpZXNbaV0sXG4gICAgICAgICAgICAgICAgcHJvcGVydGllczogZ2VvanNvbi5wcm9wZXJ0aWVzXG4gICAgICAgICAgICB9LCBvcHRpb25zLCBpbmRleCk7XG4gICAgICAgIH1cbiAgICAgICAgcmV0dXJuO1xuICAgIH0gZWxzZSB7XG4gICAgICAgIHRocm93IG5ldyBFcnJvcignSW5wdXQgZGF0YSBpcyBub3QgYSB2YWxpZCBHZW9KU09OIG9iamVjdC4nKTtcbiAgICB9XG5cbiAgICBmZWF0dXJlcy5wdXNoKGNyZWF0ZUZlYXR1cmUoaWQsIHR5cGUsIGdlb21ldHJ5LCBnZW9qc29uLnByb3BlcnRpZXMpKTtcbn1cblxuZnVuY3Rpb24gY29udmVydFBvaW50KGNvb3Jkcywgb3V0KSB7XG4gICAgb3V0LnB1c2gocHJvamVjdFgoY29vcmRzWzBdKSk7XG4gICAgb3V0LnB1c2gocHJvamVjdFkoY29vcmRzWzFdKSk7XG4gICAgb3V0LnB1c2goMCk7XG59XG5cbmZ1bmN0aW9uIGNvbnZlcnRMaW5lKHJpbmcsIG91dCwgdG9sZXJhbmNlLCBpc1BvbHlnb24pIHtcbiAgICB2YXIgeDAsIHkwO1xuICAgIHZhciBzaXplID0gMDtcblxuICAgIGZvciAodmFyIGogPSAwOyBqIDwgcmluZy5sZW5ndGg7IGorKykge1xuICAgICAgICB2YXIgeCA9IHByb2plY3RYKHJpbmdbal1bMF0pO1xuICAgICAgICB2YXIgeSA9IHByb2plY3RZKHJpbmdbal1bMV0pO1xuXG4gICAgICAgIG91dC5wdXNoKHgpO1xuICAgICAgICBvdXQucHVzaCh5KTtcbiAgICAgICAgb3V0LnB1c2goMCk7XG5cbiAgICAgICAgaWYgKGogPiAwKSB7XG4gICAgICAgICAgICBpZiAoaXNQb2x5Z29uKSB7XG4gICAgICAgICAgICAgICAgc2l6ZSArPSAoeDAgKiB5IC0geCAqIHkwKSAvIDI7IC8vIGFyZWFcbiAgICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICAgICAgc2l6ZSArPSBNYXRoLnNxcnQoTWF0aC5wb3coeCAtIHgwLCAyKSArIE1hdGgucG93KHkgLSB5MCwgMikpOyAvLyBsZW5ndGhcbiAgICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgICAgICB4MCA9IHg7XG4gICAgICAgIHkwID0geTtcbiAgICB9XG5cbiAgICB2YXIgbGFzdCA9IG91dC5sZW5ndGggLSAzO1xuICAgIG91dFsyXSA9IDE7XG4gICAgc2ltcGxpZnkob3V0LCAwLCBsYXN0LCB0b2xlcmFuY2UpO1xuICAgIG91dFtsYXN0ICsgMl0gPSAxO1xuXG4gICAgb3V0LnNpemUgPSBNYXRoLmFicyhzaXplKTtcbiAgICBvdXQuc3RhcnQgPSAwO1xuICAgIG91dC5lbmQgPSBvdXQuc2l6ZTtcbn1cblxuZnVuY3Rpb24gY29udmVydExpbmVzKHJpbmdzLCBvdXQsIHRvbGVyYW5jZSwgaXNQb2x5Z29uKSB7XG4gICAgZm9yICh2YXIgaSA9IDA7IGkgPCByaW5ncy5sZW5ndGg7IGkrKykge1xuICAgICAgICB2YXIgZ2VvbSA9IFtdO1xuICAgICAgICBjb252ZXJ0TGluZShyaW5nc1tpXSwgZ2VvbSwgdG9sZXJhbmNlLCBpc1BvbHlnb24pO1xuICAgICAgICBvdXQucHVzaChnZW9tKTtcbiAgICB9XG59XG5cbmZ1bmN0aW9uIHByb2plY3RYKHgpIHtcbiAgICByZXR1cm4geCAvIDM2MCArIDAuNTtcbn1cblxuZnVuY3Rpb24gcHJvamVjdFkoeSkge1xuICAgIHZhciBzaW4gPSBNYXRoLnNpbih5ICogTWF0aC5QSSAvIDE4MCk7XG4gICAgdmFyIHkyID0gMC41IC0gMC4yNSAqIE1hdGgubG9nKCgxICsgc2luKSAvICgxIC0gc2luKSkgLyBNYXRoLlBJO1xuICAgIHJldHVybiB5MiA8IDAgPyAwIDogeTIgPiAxID8gMSA6IHkyO1xufVxuIiwiXG5pbXBvcnQgY3JlYXRlRmVhdHVyZSBmcm9tICcuL2ZlYXR1cmUnO1xuXG4vKiBjbGlwIGZlYXR1cmVzIGJldHdlZW4gdHdvIGF4aXMtcGFyYWxsZWwgbGluZXM6XG4gKiAgICAgfCAgICAgICAgfFxuICogIF9fX3xfX18gICAgIHwgICAgIC9cbiAqIC8gICB8ICAgXFxfX19ffF9fX18vXG4gKiAgICAgfCAgICAgICAgfFxuICovXG5cbmV4cG9ydCBkZWZhdWx0IGZ1bmN0aW9uIGNsaXAoZmVhdHVyZXMsIHNjYWxlLCBrMSwgazIsIGF4aXMsIG1pbkFsbCwgbWF4QWxsLCBvcHRpb25zKSB7XG5cbiAgICBrMSAvPSBzY2FsZTtcbiAgICBrMiAvPSBzY2FsZTtcblxuICAgIGlmIChtaW5BbGwgPj0gazEgJiYgbWF4QWxsIDwgazIpIHJldHVybiBmZWF0dXJlczsgLy8gdHJpdmlhbCBhY2NlcHRcbiAgICBlbHNlIGlmIChtYXhBbGwgPCBrMSB8fCBtaW5BbGwgPj0gazIpIHJldHVybiBudWxsOyAvLyB0cml2aWFsIHJlamVjdFxuXG4gICAgdmFyIGNsaXBwZWQgPSBbXTtcblxuICAgIGZvciAodmFyIGkgPSAwOyBpIDwgZmVhdHVyZXMubGVuZ3RoOyBpKyspIHtcblxuICAgICAgICB2YXIgZmVhdHVyZSA9IGZlYXR1cmVzW2ldO1xuICAgICAgICB2YXIgZ2VvbWV0cnkgPSBmZWF0dXJlLmdlb21ldHJ5O1xuICAgICAgICB2YXIgdHlwZSA9IGZlYXR1cmUudHlwZTtcblxuICAgICAgICB2YXIgbWluID0gYXhpcyA9PT0gMCA/IGZlYXR1cmUubWluWCA6IGZlYXR1cmUubWluWTtcbiAgICAgICAgdmFyIG1heCA9IGF4aXMgPT09IDAgPyBmZWF0dXJlLm1heFggOiBmZWF0dXJlLm1heFk7XG5cbiAgICAgICAgaWYgKG1pbiA+PSBrMSAmJiBtYXggPCBrMikgeyAvLyB0cml2aWFsIGFjY2VwdFxuICAgICAgICAgICAgY2xpcHBlZC5wdXNoKGZlYXR1cmUpO1xuICAgICAgICAgICAgY29udGludWU7XG4gICAgICAgIH0gZWxzZSBpZiAobWF4IDwgazEgfHwgbWluID49IGsyKSB7IC8vIHRyaXZpYWwgcmVqZWN0XG4gICAgICAgICAgICBjb250aW51ZTtcbiAgICAgICAgfVxuXG4gICAgICAgIHZhciBuZXdHZW9tZXRyeSA9IFtdO1xuXG4gICAgICAgIGlmICh0eXBlID09PSAnUG9pbnQnIHx8IHR5cGUgPT09ICdNdWx0aVBvaW50Jykge1xuICAgICAgICAgICAgY2xpcFBvaW50cyhnZW9tZXRyeSwgbmV3R2VvbWV0cnksIGsxLCBrMiwgYXhpcyk7XG5cbiAgICAgICAgfSBlbHNlIGlmICh0eXBlID09PSAnTGluZVN0cmluZycpIHtcbiAgICAgICAgICAgIGNsaXBMaW5lKGdlb21ldHJ5LCBuZXdHZW9tZXRyeSwgazEsIGsyLCBheGlzLCBmYWxzZSwgb3B0aW9ucy5saW5lTWV0cmljcyk7XG5cbiAgICAgICAgfSBlbHNlIGlmICh0eXBlID09PSAnTXVsdGlMaW5lU3RyaW5nJykge1xuICAgICAgICAgICAgY2xpcExpbmVzKGdlb21ldHJ5LCBuZXdHZW9tZXRyeSwgazEsIGsyLCBheGlzLCBmYWxzZSk7XG5cbiAgICAgICAgfSBlbHNlIGlmICh0eXBlID09PSAnUG9seWdvbicpIHtcbiAgICAgICAgICAgIGNsaXBMaW5lcyhnZW9tZXRyeSwgbmV3R2VvbWV0cnksIGsxLCBrMiwgYXhpcywgdHJ1ZSk7XG5cbiAgICAgICAgfSBlbHNlIGlmICh0eXBlID09PSAnTXVsdGlQb2x5Z29uJykge1xuICAgICAgICAgICAgZm9yICh2YXIgaiA9IDA7IGogPCBnZW9tZXRyeS5sZW5ndGg7IGorKykge1xuICAgICAgICAgICAgICAgIHZhciBwb2x5Z29uID0gW107XG4gICAgICAgICAgICAgICAgY2xpcExpbmVzKGdlb21ldHJ5W2pdLCBwb2x5Z29uLCBrMSwgazIsIGF4aXMsIHRydWUpO1xuICAgICAgICAgICAgICAgIGlmIChwb2x5Z29uLmxlbmd0aCkge1xuICAgICAgICAgICAgICAgICAgICBuZXdHZW9tZXRyeS5wdXNoKHBvbHlnb24pO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH1cbiAgICAgICAgfVxuXG4gICAgICAgIGlmIChuZXdHZW9tZXRyeS5sZW5ndGgpIHtcbiAgICAgICAgICAgIGlmIChvcHRpb25zLmxpbmVNZXRyaWNzICYmIHR5cGUgPT09ICdMaW5lU3RyaW5nJykge1xuICAgICAgICAgICAgICAgIGZvciAoaiA9IDA7IGogPCBuZXdHZW9tZXRyeS5sZW5ndGg7IGorKykge1xuICAgICAgICAgICAgICAgICAgICBjbGlwcGVkLnB1c2goY3JlYXRlRmVhdHVyZShmZWF0dXJlLmlkLCB0eXBlLCBuZXdHZW9tZXRyeVtqXSwgZmVhdHVyZS50YWdzKSk7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIGNvbnRpbnVlO1xuICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICBpZiAodHlwZSA9PT0gJ0xpbmVTdHJpbmcnIHx8IHR5cGUgPT09ICdNdWx0aUxpbmVTdHJpbmcnKSB7XG4gICAgICAgICAgICAgICAgaWYgKG5ld0dlb21ldHJ5Lmxlbmd0aCA9PT0gMSkge1xuICAgICAgICAgICAgICAgICAgICB0eXBlID0gJ0xpbmVTdHJpbmcnO1xuICAgICAgICAgICAgICAgICAgICBuZXdHZW9tZXRyeSA9IG5ld0dlb21ldHJ5WzBdO1xuICAgICAgICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICAgICAgICAgIHR5cGUgPSAnTXVsdGlMaW5lU3RyaW5nJztcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBpZiAodHlwZSA9PT0gJ1BvaW50JyB8fCB0eXBlID09PSAnTXVsdGlQb2ludCcpIHtcbiAgICAgICAgICAgICAgICB0eXBlID0gbmV3R2VvbWV0cnkubGVuZ3RoID09PSAzID8gJ1BvaW50JyA6ICdNdWx0aVBvaW50JztcbiAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgY2xpcHBlZC5wdXNoKGNyZWF0ZUZlYXR1cmUoZmVhdHVyZS5pZCwgdHlwZSwgbmV3R2VvbWV0cnksIGZlYXR1cmUudGFncykpO1xuICAgICAgICB9XG4gICAgfVxuXG4gICAgcmV0dXJuIGNsaXBwZWQubGVuZ3RoID8gY2xpcHBlZCA6IG51bGw7XG59XG5cbmZ1bmN0aW9uIGNsaXBQb2ludHMoZ2VvbSwgbmV3R2VvbSwgazEsIGsyLCBheGlzKSB7XG4gICAgZm9yICh2YXIgaSA9IDA7IGkgPCBnZW9tLmxlbmd0aDsgaSArPSAzKSB7XG4gICAgICAgIHZhciBhID0gZ2VvbVtpICsgYXhpc107XG5cbiAgICAgICAgaWYgKGEgPj0gazEgJiYgYSA8PSBrMikge1xuICAgICAgICAgICAgbmV3R2VvbS5wdXNoKGdlb21baV0pO1xuICAgICAgICAgICAgbmV3R2VvbS5wdXNoKGdlb21baSArIDFdKTtcbiAgICAgICAgICAgIG5ld0dlb20ucHVzaChnZW9tW2kgKyAyXSk7XG4gICAgICAgIH1cbiAgICB9XG59XG5cbmZ1bmN0aW9uIGNsaXBMaW5lKGdlb20sIG5ld0dlb20sIGsxLCBrMiwgYXhpcywgaXNQb2x5Z29uLCB0cmFja01ldHJpY3MpIHtcblxuICAgIHZhciBzbGljZSA9IG5ld1NsaWNlKGdlb20pO1xuICAgIHZhciBpbnRlcnNlY3QgPSBheGlzID09PSAwID8gaW50ZXJzZWN0WCA6IGludGVyc2VjdFk7XG4gICAgdmFyIGxlbiA9IGdlb20uc3RhcnQ7XG4gICAgdmFyIHNlZ0xlbiwgdDtcblxuICAgIGZvciAodmFyIGkgPSAwOyBpIDwgZ2VvbS5sZW5ndGggLSAzOyBpICs9IDMpIHtcbiAgICAgICAgdmFyIGF4ID0gZ2VvbVtpXTtcbiAgICAgICAgdmFyIGF5ID0gZ2VvbVtpICsgMV07XG4gICAgICAgIHZhciBheiA9IGdlb21baSArIDJdO1xuICAgICAgICB2YXIgYnggPSBnZW9tW2kgKyAzXTtcbiAgICAgICAgdmFyIGJ5ID0gZ2VvbVtpICsgNF07XG4gICAgICAgIHZhciBhID0gYXhpcyA9PT0gMCA/IGF4IDogYXk7XG4gICAgICAgIHZhciBiID0gYXhpcyA9PT0gMCA/IGJ4IDogYnk7XG4gICAgICAgIHZhciBleGl0ZWQgPSBmYWxzZTtcblxuICAgICAgICBpZiAodHJhY2tNZXRyaWNzKSBzZWdMZW4gPSBNYXRoLnNxcnQoTWF0aC5wb3coYXggLSBieCwgMikgKyBNYXRoLnBvdyhheSAtIGJ5LCAyKSk7XG5cbiAgICAgICAgaWYgKGEgPCBrMSkge1xuICAgICAgICAgICAgLy8gLS0tfC0tPiAgfCAobGluZSBlbnRlcnMgdGhlIGNsaXAgcmVnaW9uIGZyb20gdGhlIGxlZnQpXG4gICAgICAgICAgICBpZiAoYiA+PSBrMSkge1xuICAgICAgICAgICAgICAgIHQgPSBpbnRlcnNlY3Qoc2xpY2UsIGF4LCBheSwgYngsIGJ5LCBrMSk7XG4gICAgICAgICAgICAgICAgaWYgKHRyYWNrTWV0cmljcykgc2xpY2Uuc3RhcnQgPSBsZW4gKyBzZWdMZW4gKiB0O1xuICAgICAgICAgICAgfVxuICAgICAgICB9IGVsc2UgaWYgKGEgPj0gazIpIHtcbiAgICAgICAgICAgIC8vIHwgIDwtLXwtLS0gKGxpbmUgZW50ZXJzIHRoZSBjbGlwIHJlZ2lvbiBmcm9tIHRoZSByaWdodClcbiAgICAgICAgICAgIGlmIChiIDwgazIpIHtcbiAgICAgICAgICAgICAgICB0ID0gaW50ZXJzZWN0KHNsaWNlLCBheCwgYXksIGJ4LCBieSwgazIpO1xuICAgICAgICAgICAgICAgIGlmICh0cmFja01ldHJpY3MpIHNsaWNlLnN0YXJ0ID0gbGVuICsgc2VnTGVuICogdDtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgIGFkZFBvaW50KHNsaWNlLCBheCwgYXksIGF6KTtcbiAgICAgICAgfVxuICAgICAgICBpZiAoYiA8IGsxICYmIGEgPj0gazEpIHtcbiAgICAgICAgICAgIC8vIDwtLXwtLS0gIHwgb3IgPC0tfC0tLS0tfC0tLSAobGluZSBleGl0cyB0aGUgY2xpcCByZWdpb24gb24gdGhlIGxlZnQpXG4gICAgICAgICAgICB0ID0gaW50ZXJzZWN0KHNsaWNlLCBheCwgYXksIGJ4LCBieSwgazEpO1xuICAgICAgICAgICAgZXhpdGVkID0gdHJ1ZTtcbiAgICAgICAgfVxuICAgICAgICBpZiAoYiA+IGsyICYmIGEgPD0gazIpIHtcbiAgICAgICAgICAgIC8vIHwgIC0tLXwtLT4gb3IgLS0tfC0tLS0tfC0tPiAobGluZSBleGl0cyB0aGUgY2xpcCByZWdpb24gb24gdGhlIHJpZ2h0KVxuICAgICAgICAgICAgdCA9IGludGVyc2VjdChzbGljZSwgYXgsIGF5LCBieCwgYnksIGsyKTtcbiAgICAgICAgICAgIGV4aXRlZCA9IHRydWU7XG4gICAgICAgIH1cblxuICAgICAgICBpZiAoIWlzUG9seWdvbiAmJiBleGl0ZWQpIHtcbiAgICAgICAgICAgIGlmICh0cmFja01ldHJpY3MpIHNsaWNlLmVuZCA9IGxlbiArIHNlZ0xlbiAqIHQ7XG4gICAgICAgICAgICBuZXdHZW9tLnB1c2goc2xpY2UpO1xuICAgICAgICAgICAgc2xpY2UgPSBuZXdTbGljZShnZW9tKTtcbiAgICAgICAgfVxuXG4gICAgICAgIGlmICh0cmFja01ldHJpY3MpIGxlbiArPSBzZWdMZW47XG4gICAgfVxuXG4gICAgLy8gYWRkIHRoZSBsYXN0IHBvaW50XG4gICAgdmFyIGxhc3QgPSBnZW9tLmxlbmd0aCAtIDM7XG4gICAgYXggPSBnZW9tW2xhc3RdO1xuICAgIGF5ID0gZ2VvbVtsYXN0ICsgMV07XG4gICAgYXogPSBnZW9tW2xhc3QgKyAyXTtcbiAgICBhID0gYXhpcyA9PT0gMCA/IGF4IDogYXk7XG4gICAgaWYgKGEgPj0gazEgJiYgYSA8PSBrMikgYWRkUG9pbnQoc2xpY2UsIGF4LCBheSwgYXopO1xuXG4gICAgLy8gY2xvc2UgdGhlIHBvbHlnb24gaWYgaXRzIGVuZHBvaW50cyBhcmUgbm90IHRoZSBzYW1lIGFmdGVyIGNsaXBwaW5nXG4gICAgbGFzdCA9IHNsaWNlLmxlbmd0aCAtIDM7XG4gICAgaWYgKGlzUG9seWdvbiAmJiBsYXN0ID49IDMgJiYgKHNsaWNlW2xhc3RdICE9PSBzbGljZVswXSB8fCBzbGljZVtsYXN0ICsgMV0gIT09IHNsaWNlWzFdKSkge1xuICAgICAgICBhZGRQb2ludChzbGljZSwgc2xpY2VbMF0sIHNsaWNlWzFdLCBzbGljZVsyXSk7XG4gICAgfVxuXG4gICAgLy8gYWRkIHRoZSBmaW5hbCBzbGljZVxuICAgIGlmIChzbGljZS5sZW5ndGgpIHtcbiAgICAgICAgbmV3R2VvbS5wdXNoKHNsaWNlKTtcbiAgICB9XG59XG5cbmZ1bmN0aW9uIG5ld1NsaWNlKGxpbmUpIHtcbiAgICB2YXIgc2xpY2UgPSBbXTtcbiAgICBzbGljZS5zaXplID0gbGluZS5zaXplO1xuICAgIHNsaWNlLnN0YXJ0ID0gbGluZS5zdGFydDtcbiAgICBzbGljZS5lbmQgPSBsaW5lLmVuZDtcbiAgICByZXR1cm4gc2xpY2U7XG59XG5cbmZ1bmN0aW9uIGNsaXBMaW5lcyhnZW9tLCBuZXdHZW9tLCBrMSwgazIsIGF4aXMsIGlzUG9seWdvbikge1xuICAgIGZvciAodmFyIGkgPSAwOyBpIDwgZ2VvbS5sZW5ndGg7IGkrKykge1xuICAgICAgICBjbGlwTGluZShnZW9tW2ldLCBuZXdHZW9tLCBrMSwgazIsIGF4aXMsIGlzUG9seWdvbiwgZmFsc2UpO1xuICAgIH1cbn1cblxuZnVuY3Rpb24gYWRkUG9pbnQob3V0LCB4LCB5LCB6KSB7XG4gICAgb3V0LnB1c2goeCk7XG4gICAgb3V0LnB1c2goeSk7XG4gICAgb3V0LnB1c2goeik7XG59XG5cbmZ1bmN0aW9uIGludGVyc2VjdFgob3V0LCBheCwgYXksIGJ4LCBieSwgeCkge1xuICAgIHZhciB0ID0gKHggLSBheCkgLyAoYnggLSBheCk7XG4gICAgb3V0LnB1c2goeCk7XG4gICAgb3V0LnB1c2goYXkgKyAoYnkgLSBheSkgKiB0KTtcbiAgICBvdXQucHVzaCgxKTtcbiAgICByZXR1cm4gdDtcbn1cblxuZnVuY3Rpb24gaW50ZXJzZWN0WShvdXQsIGF4LCBheSwgYngsIGJ5LCB5KSB7XG4gICAgdmFyIHQgPSAoeSAtIGF5KSAvIChieSAtIGF5KTtcbiAgICBvdXQucHVzaChheCArIChieCAtIGF4KSAqIHQpO1xuICAgIG91dC5wdXNoKHkpO1xuICAgIG91dC5wdXNoKDEpO1xuICAgIHJldHVybiB0O1xufVxuIiwiXG5pbXBvcnQgY2xpcCBmcm9tICcuL2NsaXAnO1xuaW1wb3J0IGNyZWF0ZUZlYXR1cmUgZnJvbSAnLi9mZWF0dXJlJztcblxuZXhwb3J0IGRlZmF1bHQgZnVuY3Rpb24gd3JhcChmZWF0dXJlcywgb3B0aW9ucykge1xuICAgIHZhciBidWZmZXIgPSBvcHRpb25zLmJ1ZmZlciAvIG9wdGlvbnMuZXh0ZW50O1xuICAgIHZhciBtZXJnZWQgPSBmZWF0dXJlcztcbiAgICB2YXIgbGVmdCAgPSBjbGlwKGZlYXR1cmVzLCAxLCAtMSAtIGJ1ZmZlciwgYnVmZmVyLCAgICAgMCwgLTEsIDIsIG9wdGlvbnMpOyAvLyBsZWZ0IHdvcmxkIGNvcHlcbiAgICB2YXIgcmlnaHQgPSBjbGlwKGZlYXR1cmVzLCAxLCAgMSAtIGJ1ZmZlciwgMiArIGJ1ZmZlciwgMCwgLTEsIDIsIG9wdGlvbnMpOyAvLyByaWdodCB3b3JsZCBjb3B5XG5cbiAgICBpZiAobGVmdCB8fCByaWdodCkge1xuICAgICAgICBtZXJnZWQgPSBjbGlwKGZlYXR1cmVzLCAxLCAtYnVmZmVyLCAxICsgYnVmZmVyLCAwLCAtMSwgMiwgb3B0aW9ucykgfHwgW107IC8vIGNlbnRlciB3b3JsZCBjb3B5XG5cbiAgICAgICAgaWYgKGxlZnQpIG1lcmdlZCA9IHNoaWZ0RmVhdHVyZUNvb3JkcyhsZWZ0LCAxKS5jb25jYXQobWVyZ2VkKTsgLy8gbWVyZ2UgbGVmdCBpbnRvIGNlbnRlclxuICAgICAgICBpZiAocmlnaHQpIG1lcmdlZCA9IG1lcmdlZC5jb25jYXQoc2hpZnRGZWF0dXJlQ29vcmRzKHJpZ2h0LCAtMSkpOyAvLyBtZXJnZSByaWdodCBpbnRvIGNlbnRlclxuICAgIH1cblxuICAgIHJldHVybiBtZXJnZWQ7XG59XG5cbmZ1bmN0aW9uIHNoaWZ0RmVhdHVyZUNvb3JkcyhmZWF0dXJlcywgb2Zmc2V0KSB7XG4gICAgdmFyIG5ld0ZlYXR1cmVzID0gW107XG5cbiAgICBmb3IgKHZhciBpID0gMDsgaSA8IGZlYXR1cmVzLmxlbmd0aDsgaSsrKSB7XG4gICAgICAgIHZhciBmZWF0dXJlID0gZmVhdHVyZXNbaV0sXG4gICAgICAgICAgICB0eXBlID0gZmVhdHVyZS50eXBlO1xuXG4gICAgICAgIHZhciBuZXdHZW9tZXRyeTtcblxuICAgICAgICBpZiAodHlwZSA9PT0gJ1BvaW50JyB8fCB0eXBlID09PSAnTXVsdGlQb2ludCcgfHwgdHlwZSA9PT0gJ0xpbmVTdHJpbmcnKSB7XG4gICAgICAgICAgICBuZXdHZW9tZXRyeSA9IHNoaWZ0Q29vcmRzKGZlYXR1cmUuZ2VvbWV0cnksIG9mZnNldCk7XG5cbiAgICAgICAgfSBlbHNlIGlmICh0eXBlID09PSAnTXVsdGlMaW5lU3RyaW5nJyB8fCB0eXBlID09PSAnUG9seWdvbicpIHtcbiAgICAgICAgICAgIG5ld0dlb21ldHJ5ID0gW107XG4gICAgICAgICAgICBmb3IgKHZhciBqID0gMDsgaiA8IGZlYXR1cmUuZ2VvbWV0cnkubGVuZ3RoOyBqKyspIHtcbiAgICAgICAgICAgICAgICBuZXdHZW9tZXRyeS5wdXNoKHNoaWZ0Q29vcmRzKGZlYXR1cmUuZ2VvbWV0cnlbal0sIG9mZnNldCkpO1xuICAgICAgICAgICAgfVxuICAgICAgICB9IGVsc2UgaWYgKHR5cGUgPT09ICdNdWx0aVBvbHlnb24nKSB7XG4gICAgICAgICAgICBuZXdHZW9tZXRyeSA9IFtdO1xuICAgICAgICAgICAgZm9yIChqID0gMDsgaiA8IGZlYXR1cmUuZ2VvbWV0cnkubGVuZ3RoOyBqKyspIHtcbiAgICAgICAgICAgICAgICB2YXIgbmV3UG9seWdvbiA9IFtdO1xuICAgICAgICAgICAgICAgIGZvciAodmFyIGsgPSAwOyBrIDwgZmVhdHVyZS5nZW9tZXRyeVtqXS5sZW5ndGg7IGsrKykge1xuICAgICAgICAgICAgICAgICAgICBuZXdQb2x5Z29uLnB1c2goc2hpZnRDb29yZHMoZmVhdHVyZS5nZW9tZXRyeVtqXVtrXSwgb2Zmc2V0KSk7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIG5ld0dlb21ldHJ5LnB1c2gobmV3UG9seWdvbik7XG4gICAgICAgICAgICB9XG4gICAgICAgIH1cblxuICAgICAgICBuZXdGZWF0dXJlcy5wdXNoKGNyZWF0ZUZlYXR1cmUoZmVhdHVyZS5pZCwgdHlwZSwgbmV3R2VvbWV0cnksIGZlYXR1cmUudGFncykpO1xuICAgIH1cblxuICAgIHJldHVybiBuZXdGZWF0dXJlcztcbn1cblxuZnVuY3Rpb24gc2hpZnRDb29yZHMocG9pbnRzLCBvZmZzZXQpIHtcbiAgICB2YXIgbmV3UG9pbnRzID0gW107XG4gICAgbmV3UG9pbnRzLnNpemUgPSBwb2ludHMuc2l6ZTtcblxuICAgIGlmIChwb2ludHMuc3RhcnQgIT09IHVuZGVmaW5lZCkge1xuICAgICAgICBuZXdQb2ludHMuc3RhcnQgPSBwb2ludHMuc3RhcnQ7XG4gICAgICAgIG5ld1BvaW50cy5lbmQgPSBwb2ludHMuZW5kO1xuICAgIH1cblxuICAgIGZvciAodmFyIGkgPSAwOyBpIDwgcG9pbnRzLmxlbmd0aDsgaSArPSAzKSB7XG4gICAgICAgIG5ld1BvaW50cy5wdXNoKHBvaW50c1tpXSArIG9mZnNldCwgcG9pbnRzW2kgKyAxXSwgcG9pbnRzW2kgKyAyXSk7XG4gICAgfVxuICAgIHJldHVybiBuZXdQb2ludHM7XG59XG4iLCJcbi8vIFRyYW5zZm9ybXMgdGhlIGNvb3JkaW5hdGVzIG9mIGVhY2ggZmVhdHVyZSBpbiB0aGUgZ2l2ZW4gdGlsZSBmcm9tXG4vLyBtZXJjYXRvci1wcm9qZWN0ZWQgc3BhY2UgaW50byAoZXh0ZW50IHggZXh0ZW50KSB0aWxlIHNwYWNlLlxuZXhwb3J0IGRlZmF1bHQgZnVuY3Rpb24gdHJhbnNmb3JtVGlsZSh0aWxlLCBleHRlbnQpIHtcbiAgICBpZiAodGlsZS50cmFuc2Zvcm1lZCkgcmV0dXJuIHRpbGU7XG5cbiAgICB2YXIgejIgPSAxIDw8IHRpbGUueixcbiAgICAgICAgdHggPSB0aWxlLngsXG4gICAgICAgIHR5ID0gdGlsZS55LFxuICAgICAgICBpLCBqLCBrO1xuXG4gICAgZm9yIChpID0gMDsgaSA8IHRpbGUuZmVhdHVyZXMubGVuZ3RoOyBpKyspIHtcbiAgICAgICAgdmFyIGZlYXR1cmUgPSB0aWxlLmZlYXR1cmVzW2ldLFxuICAgICAgICAgICAgZ2VvbSA9IGZlYXR1cmUuZ2VvbWV0cnksXG4gICAgICAgICAgICB0eXBlID0gZmVhdHVyZS50eXBlO1xuXG4gICAgICAgIGZlYXR1cmUuZ2VvbWV0cnkgPSBbXTtcblxuICAgICAgICBpZiAodHlwZSA9PT0gMSkge1xuICAgICAgICAgICAgZm9yIChqID0gMDsgaiA8IGdlb20ubGVuZ3RoOyBqICs9IDIpIHtcbiAgICAgICAgICAgICAgICBmZWF0dXJlLmdlb21ldHJ5LnB1c2godHJhbnNmb3JtUG9pbnQoZ2VvbVtqXSwgZ2VvbVtqICsgMV0sIGV4dGVudCwgejIsIHR4LCB0eSkpO1xuICAgICAgICAgICAgfVxuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgZm9yIChqID0gMDsgaiA8IGdlb20ubGVuZ3RoOyBqKyspIHtcbiAgICAgICAgICAgICAgICB2YXIgcmluZyA9IFtdO1xuICAgICAgICAgICAgICAgIGZvciAoayA9IDA7IGsgPCBnZW9tW2pdLmxlbmd0aDsgayArPSAyKSB7XG4gICAgICAgICAgICAgICAgICAgIHJpbmcucHVzaCh0cmFuc2Zvcm1Qb2ludChnZW9tW2pdW2tdLCBnZW9tW2pdW2sgKyAxXSwgZXh0ZW50LCB6MiwgdHgsIHR5KSk7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIGZlYXR1cmUuZ2VvbWV0cnkucHVzaChyaW5nKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgIH1cblxuICAgIHRpbGUudHJhbnNmb3JtZWQgPSB0cnVlO1xuXG4gICAgcmV0dXJuIHRpbGU7XG59XG5cbmZ1bmN0aW9uIHRyYW5zZm9ybVBvaW50KHgsIHksIGV4dGVudCwgejIsIHR4LCB0eSkge1xuICAgIHJldHVybiBbXG4gICAgICAgIE1hdGgucm91bmQoZXh0ZW50ICogKHggKiB6MiAtIHR4KSksXG4gICAgICAgIE1hdGgucm91bmQoZXh0ZW50ICogKHkgKiB6MiAtIHR5KSldO1xufVxuIiwiXG5leHBvcnQgZGVmYXVsdCBmdW5jdGlvbiBjcmVhdGVUaWxlKGZlYXR1cmVzLCB6LCB0eCwgdHksIG9wdGlvbnMpIHtcbiAgICB2YXIgdG9sZXJhbmNlID0geiA9PT0gb3B0aW9ucy5tYXhab29tID8gMCA6IG9wdGlvbnMudG9sZXJhbmNlIC8gKCgxIDw8IHopICogb3B0aW9ucy5leHRlbnQpO1xuICAgIHZhciB0aWxlID0ge1xuICAgICAgICBmZWF0dXJlczogW10sXG4gICAgICAgIG51bVBvaW50czogMCxcbiAgICAgICAgbnVtU2ltcGxpZmllZDogMCxcbiAgICAgICAgbnVtRmVhdHVyZXM6IDAsXG4gICAgICAgIHNvdXJjZTogbnVsbCxcbiAgICAgICAgeDogdHgsXG4gICAgICAgIHk6IHR5LFxuICAgICAgICB6OiB6LFxuICAgICAgICB0cmFuc2Zvcm1lZDogZmFsc2UsXG4gICAgICAgIG1pblg6IDIsXG4gICAgICAgIG1pblk6IDEsXG4gICAgICAgIG1heFg6IC0xLFxuICAgICAgICBtYXhZOiAwXG4gICAgfTtcbiAgICBmb3IgKHZhciBpID0gMDsgaSA8IGZlYXR1cmVzLmxlbmd0aDsgaSsrKSB7XG4gICAgICAgIHRpbGUubnVtRmVhdHVyZXMrKztcbiAgICAgICAgYWRkRmVhdHVyZSh0aWxlLCBmZWF0dXJlc1tpXSwgdG9sZXJhbmNlLCBvcHRpb25zKTtcblxuICAgICAgICB2YXIgbWluWCA9IGZlYXR1cmVzW2ldLm1pblg7XG4gICAgICAgIHZhciBtaW5ZID0gZmVhdHVyZXNbaV0ubWluWTtcbiAgICAgICAgdmFyIG1heFggPSBmZWF0dXJlc1tpXS5tYXhYO1xuICAgICAgICB2YXIgbWF4WSA9IGZlYXR1cmVzW2ldLm1heFk7XG5cbiAgICAgICAgaWYgKG1pblggPCB0aWxlLm1pblgpIHRpbGUubWluWCA9IG1pblg7XG4gICAgICAgIGlmIChtaW5ZIDwgdGlsZS5taW5ZKSB0aWxlLm1pblkgPSBtaW5ZO1xuICAgICAgICBpZiAobWF4WCA+IHRpbGUubWF4WCkgdGlsZS5tYXhYID0gbWF4WDtcbiAgICAgICAgaWYgKG1heFkgPiB0aWxlLm1heFkpIHRpbGUubWF4WSA9IG1heFk7XG4gICAgfVxuICAgIHJldHVybiB0aWxlO1xufVxuXG5mdW5jdGlvbiBhZGRGZWF0dXJlKHRpbGUsIGZlYXR1cmUsIHRvbGVyYW5jZSwgb3B0aW9ucykge1xuXG4gICAgdmFyIGdlb20gPSBmZWF0dXJlLmdlb21ldHJ5LFxuICAgICAgICB0eXBlID0gZmVhdHVyZS50eXBlLFxuICAgICAgICBzaW1wbGlmaWVkID0gW107XG5cbiAgICBpZiAodHlwZSA9PT0gJ1BvaW50JyB8fCB0eXBlID09PSAnTXVsdGlQb2ludCcpIHtcbiAgICAgICAgZm9yICh2YXIgaSA9IDA7IGkgPCBnZW9tLmxlbmd0aDsgaSArPSAzKSB7XG4gICAgICAgICAgICBzaW1wbGlmaWVkLnB1c2goZ2VvbVtpXSk7XG4gICAgICAgICAgICBzaW1wbGlmaWVkLnB1c2goZ2VvbVtpICsgMV0pO1xuICAgICAgICAgICAgdGlsZS5udW1Qb2ludHMrKztcbiAgICAgICAgICAgIHRpbGUubnVtU2ltcGxpZmllZCsrO1xuICAgICAgICB9XG5cbiAgICB9IGVsc2UgaWYgKHR5cGUgPT09ICdMaW5lU3RyaW5nJykge1xuICAgICAgICBhZGRMaW5lKHNpbXBsaWZpZWQsIGdlb20sIHRpbGUsIHRvbGVyYW5jZSwgZmFsc2UsIGZhbHNlKTtcblxuICAgIH0gZWxzZSBpZiAodHlwZSA9PT0gJ011bHRpTGluZVN0cmluZycgfHwgdHlwZSA9PT0gJ1BvbHlnb24nKSB7XG4gICAgICAgIGZvciAoaSA9IDA7IGkgPCBnZW9tLmxlbmd0aDsgaSsrKSB7XG4gICAgICAgICAgICBhZGRMaW5lKHNpbXBsaWZpZWQsIGdlb21baV0sIHRpbGUsIHRvbGVyYW5jZSwgdHlwZSA9PT0gJ1BvbHlnb24nLCBpID09PSAwKTtcbiAgICAgICAgfVxuXG4gICAgfSBlbHNlIGlmICh0eXBlID09PSAnTXVsdGlQb2x5Z29uJykge1xuXG4gICAgICAgIGZvciAodmFyIGsgPSAwOyBrIDwgZ2VvbS5sZW5ndGg7IGsrKykge1xuICAgICAgICAgICAgdmFyIHBvbHlnb24gPSBnZW9tW2tdO1xuICAgICAgICAgICAgZm9yIChpID0gMDsgaSA8IHBvbHlnb24ubGVuZ3RoOyBpKyspIHtcbiAgICAgICAgICAgICAgICBhZGRMaW5lKHNpbXBsaWZpZWQsIHBvbHlnb25baV0sIHRpbGUsIHRvbGVyYW5jZSwgdHJ1ZSwgaSA9PT0gMCk7XG4gICAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICB9XG5cbiAgICBpZiAoc2ltcGxpZmllZC5sZW5ndGgpIHtcbiAgICAgICAgdmFyIHRhZ3MgPSBmZWF0dXJlLnRhZ3MgfHwgbnVsbDtcbiAgICAgICAgaWYgKHR5cGUgPT09ICdMaW5lU3RyaW5nJyAmJiBvcHRpb25zLmxpbmVNZXRyaWNzKSB7XG4gICAgICAgICAgICB0YWdzID0ge307XG4gICAgICAgICAgICBmb3IgKHZhciBrZXkgaW4gZmVhdHVyZS50YWdzKSB0YWdzW2tleV0gPSBmZWF0dXJlLnRhZ3Nba2V5XTtcbiAgICAgICAgICAgIHRhZ3NbJ21hcGJveF9jbGlwX3N0YXJ0J10gPSBnZW9tLnN0YXJ0IC8gZ2VvbS5zaXplO1xuICAgICAgICAgICAgdGFnc1snbWFwYm94X2NsaXBfZW5kJ10gPSBnZW9tLmVuZCAvIGdlb20uc2l6ZTtcbiAgICAgICAgfVxuICAgICAgICB2YXIgdGlsZUZlYXR1cmUgPSB7XG4gICAgICAgICAgICBnZW9tZXRyeTogc2ltcGxpZmllZCxcbiAgICAgICAgICAgIHR5cGU6IHR5cGUgPT09ICdQb2x5Z29uJyB8fCB0eXBlID09PSAnTXVsdGlQb2x5Z29uJyA/IDMgOlxuICAgICAgICAgICAgICAgIHR5cGUgPT09ICdMaW5lU3RyaW5nJyB8fCB0eXBlID09PSAnTXVsdGlMaW5lU3RyaW5nJyA/IDIgOiAxLFxuICAgICAgICAgICAgdGFnczogdGFnc1xuICAgICAgICB9O1xuICAgICAgICBpZiAoZmVhdHVyZS5pZCAhPT0gbnVsbCkge1xuICAgICAgICAgICAgdGlsZUZlYXR1cmUuaWQgPSBmZWF0dXJlLmlkO1xuICAgICAgICB9XG4gICAgICAgIHRpbGUuZmVhdHVyZXMucHVzaCh0aWxlRmVhdHVyZSk7XG4gICAgfVxufVxuXG5mdW5jdGlvbiBhZGRMaW5lKHJlc3VsdCwgZ2VvbSwgdGlsZSwgdG9sZXJhbmNlLCBpc1BvbHlnb24sIGlzT3V0ZXIpIHtcbiAgICB2YXIgc3FUb2xlcmFuY2UgPSB0b2xlcmFuY2UgKiB0b2xlcmFuY2U7XG5cbiAgICBpZiAodG9sZXJhbmNlID4gMCAmJiAoZ2VvbS5zaXplIDwgKGlzUG9seWdvbiA/IHNxVG9sZXJhbmNlIDogdG9sZXJhbmNlKSkpIHtcbiAgICAgICAgdGlsZS5udW1Qb2ludHMgKz0gZ2VvbS5sZW5ndGggLyAzO1xuICAgICAgICByZXR1cm47XG4gICAgfVxuXG4gICAgdmFyIHJpbmcgPSBbXTtcblxuICAgIGZvciAodmFyIGkgPSAwOyBpIDwgZ2VvbS5sZW5ndGg7IGkgKz0gMykge1xuICAgICAgICBpZiAodG9sZXJhbmNlID09PSAwIHx8IGdlb21baSArIDJdID4gc3FUb2xlcmFuY2UpIHtcbiAgICAgICAgICAgIHRpbGUubnVtU2ltcGxpZmllZCsrO1xuICAgICAgICAgICAgcmluZy5wdXNoKGdlb21baV0pO1xuICAgICAgICAgICAgcmluZy5wdXNoKGdlb21baSArIDFdKTtcbiAgICAgICAgfVxuICAgICAgICB0aWxlLm51bVBvaW50cysrO1xuICAgIH1cblxuICAgIGlmIChpc1BvbHlnb24pIHJld2luZChyaW5nLCBpc091dGVyKTtcblxuICAgIHJlc3VsdC5wdXNoKHJpbmcpO1xufVxuXG5mdW5jdGlvbiByZXdpbmQocmluZywgY2xvY2t3aXNlKSB7XG4gICAgdmFyIGFyZWEgPSAwO1xuICAgIGZvciAodmFyIGkgPSAwLCBsZW4gPSByaW5nLmxlbmd0aCwgaiA9IGxlbiAtIDI7IGkgPCBsZW47IGogPSBpLCBpICs9IDIpIHtcbiAgICAgICAgYXJlYSArPSAocmluZ1tpXSAtIHJpbmdbal0pICogKHJpbmdbaSArIDFdICsgcmluZ1tqICsgMV0pO1xuICAgIH1cbiAgICBpZiAoYXJlYSA+IDAgPT09IGNsb2Nrd2lzZSkge1xuICAgICAgICBmb3IgKGkgPSAwLCBsZW4gPSByaW5nLmxlbmd0aDsgaSA8IGxlbiAvIDI7IGkgKz0gMikge1xuICAgICAgICAgICAgdmFyIHggPSByaW5nW2ldO1xuICAgICAgICAgICAgdmFyIHkgPSByaW5nW2kgKyAxXTtcbiAgICAgICAgICAgIHJpbmdbaV0gPSByaW5nW2xlbiAtIDIgLSBpXTtcbiAgICAgICAgICAgIHJpbmdbaSArIDFdID0gcmluZ1tsZW4gLSAxIC0gaV07XG4gICAgICAgICAgICByaW5nW2xlbiAtIDIgLSBpXSA9IHg7XG4gICAgICAgICAgICByaW5nW2xlbiAtIDEgLSBpXSA9IHk7XG4gICAgICAgIH1cbiAgICB9XG59XG4iLCJcbmltcG9ydCBjb252ZXJ0IGZyb20gJy4vY29udmVydCc7ICAgICAvLyBHZW9KU09OIGNvbnZlcnNpb24gYW5kIHByZXByb2Nlc3NpbmdcbmltcG9ydCBjbGlwIGZyb20gJy4vY2xpcCc7ICAgICAgICAgICAvLyBzdHJpcGUgY2xpcHBpbmcgYWxnb3JpdGhtXG5pbXBvcnQgd3JhcCBmcm9tICcuL3dyYXAnOyAgICAgICAgICAgLy8gZGF0ZSBsaW5lIHByb2Nlc3NpbmdcbmltcG9ydCB0cmFuc2Zvcm0gZnJvbSAnLi90cmFuc2Zvcm0nOyAvLyBjb29yZGluYXRlIHRyYW5zZm9ybWF0aW9uXG5pbXBvcnQgY3JlYXRlVGlsZSBmcm9tICcuL3RpbGUnOyAgICAgLy8gZmluYWwgc2ltcGxpZmllZCB0aWxlIGdlbmVyYXRpb25cblxuZXhwb3J0IGRlZmF1bHQgZnVuY3Rpb24gZ2VvanNvbnZ0KGRhdGEsIG9wdGlvbnMpIHtcbiAgICByZXR1cm4gbmV3IEdlb0pTT05WVChkYXRhLCBvcHRpb25zKTtcbn1cblxuZnVuY3Rpb24gR2VvSlNPTlZUKGRhdGEsIG9wdGlvbnMpIHtcbiAgICBvcHRpb25zID0gdGhpcy5vcHRpb25zID0gZXh0ZW5kKE9iamVjdC5jcmVhdGUodGhpcy5vcHRpb25zKSwgb3B0aW9ucyk7XG5cbiAgICB2YXIgZGVidWcgPSBvcHRpb25zLmRlYnVnO1xuXG4gICAgaWYgKGRlYnVnKSBjb25zb2xlLnRpbWUoJ3ByZXByb2Nlc3MgZGF0YScpO1xuXG4gICAgaWYgKG9wdGlvbnMubWF4Wm9vbSA8IDAgfHwgb3B0aW9ucy5tYXhab29tID4gMjQpIHRocm93IG5ldyBFcnJvcignbWF4Wm9vbSBzaG91bGQgYmUgaW4gdGhlIDAtMjQgcmFuZ2UnKTtcbiAgICBpZiAob3B0aW9ucy5wcm9tb3RlSWQgJiYgb3B0aW9ucy5nZW5lcmF0ZUlkKSB0aHJvdyBuZXcgRXJyb3IoJ3Byb21vdGVJZCBhbmQgZ2VuZXJhdGVJZCBjYW5ub3QgYmUgdXNlZCB0b2dldGhlci4nKTtcblxuICAgIHZhciBmZWF0dXJlcyA9IGNvbnZlcnQoZGF0YSwgb3B0aW9ucyk7XG5cbiAgICB0aGlzLnRpbGVzID0ge307XG4gICAgdGhpcy50aWxlQ29vcmRzID0gW107XG5cbiAgICBpZiAoZGVidWcpIHtcbiAgICAgICAgY29uc29sZS50aW1lRW5kKCdwcmVwcm9jZXNzIGRhdGEnKTtcbiAgICAgICAgY29uc29sZS5sb2coJ2luZGV4OiBtYXhab29tOiAlZCwgbWF4UG9pbnRzOiAlZCcsIG9wdGlvbnMuaW5kZXhNYXhab29tLCBvcHRpb25zLmluZGV4TWF4UG9pbnRzKTtcbiAgICAgICAgY29uc29sZS50aW1lKCdnZW5lcmF0ZSB0aWxlcycpO1xuICAgICAgICB0aGlzLnN0YXRzID0ge307XG4gICAgICAgIHRoaXMudG90YWwgPSAwO1xuICAgIH1cblxuICAgIGZlYXR1cmVzID0gd3JhcChmZWF0dXJlcywgb3B0aW9ucyk7XG5cbiAgICAvLyBzdGFydCBzbGljaW5nIGZyb20gdGhlIHRvcCB0aWxlIGRvd25cbiAgICBpZiAoZmVhdHVyZXMubGVuZ3RoKSB0aGlzLnNwbGl0VGlsZShmZWF0dXJlcywgMCwgMCwgMCk7XG5cbiAgICBpZiAoZGVidWcpIHtcbiAgICAgICAgaWYgKGZlYXR1cmVzLmxlbmd0aCkgY29uc29sZS5sb2coJ2ZlYXR1cmVzOiAlZCwgcG9pbnRzOiAlZCcsIHRoaXMudGlsZXNbMF0ubnVtRmVhdHVyZXMsIHRoaXMudGlsZXNbMF0ubnVtUG9pbnRzKTtcbiAgICAgICAgY29uc29sZS50aW1lRW5kKCdnZW5lcmF0ZSB0aWxlcycpO1xuICAgICAgICBjb25zb2xlLmxvZygndGlsZXMgZ2VuZXJhdGVkOicsIHRoaXMudG90YWwsIEpTT04uc3RyaW5naWZ5KHRoaXMuc3RhdHMpKTtcbiAgICB9XG59XG5cbkdlb0pTT05WVC5wcm90b3R5cGUub3B0aW9ucyA9IHtcbiAgICBtYXhab29tOiAxNCwgICAgICAgICAgICAvLyBtYXggem9vbSB0byBwcmVzZXJ2ZSBkZXRhaWwgb25cbiAgICBpbmRleE1heFpvb206IDUsICAgICAgICAvLyBtYXggem9vbSBpbiB0aGUgdGlsZSBpbmRleFxuICAgIGluZGV4TWF4UG9pbnRzOiAxMDAwMDAsIC8vIG1heCBudW1iZXIgb2YgcG9pbnRzIHBlciB0aWxlIGluIHRoZSB0aWxlIGluZGV4XG4gICAgdG9sZXJhbmNlOiAzLCAgICAgICAgICAgLy8gc2ltcGxpZmljYXRpb24gdG9sZXJhbmNlIChoaWdoZXIgbWVhbnMgc2ltcGxlcilcbiAgICBleHRlbnQ6IDQwOTYsICAgICAgICAgICAvLyB0aWxlIGV4dGVudFxuICAgIGJ1ZmZlcjogNjQsICAgICAgICAgICAgIC8vIHRpbGUgYnVmZmVyIG9uIGVhY2ggc2lkZVxuICAgIGxpbmVNZXRyaWNzOiBmYWxzZSwgICAgIC8vIHdoZXRoZXIgdG8gY2FsY3VsYXRlIGxpbmUgbWV0cmljc1xuICAgIHByb21vdGVJZDogbnVsbCwgICAgICAgIC8vIG5hbWUgb2YgYSBmZWF0dXJlIHByb3BlcnR5IHRvIGJlIHByb21vdGVkIHRvIGZlYXR1cmUuaWRcbiAgICBnZW5lcmF0ZUlkOiBmYWxzZSwgICAgICAvLyB3aGV0aGVyIHRvIGdlbmVyYXRlIGZlYXR1cmUgaWRzLiBDYW5ub3QgYmUgdXNlZCB3aXRoIHByb21vdGVJZFxuICAgIGRlYnVnOiAwICAgICAgICAgICAgICAgIC8vIGxvZ2dpbmcgbGV2ZWwgKDAsIDEgb3IgMilcbn07XG5cbkdlb0pTT05WVC5wcm90b3R5cGUuc3BsaXRUaWxlID0gZnVuY3Rpb24gKGZlYXR1cmVzLCB6LCB4LCB5LCBjeiwgY3gsIGN5KSB7XG5cbiAgICB2YXIgc3RhY2sgPSBbZmVhdHVyZXMsIHosIHgsIHldLFxuICAgICAgICBvcHRpb25zID0gdGhpcy5vcHRpb25zLFxuICAgICAgICBkZWJ1ZyA9IG9wdGlvbnMuZGVidWc7XG5cbiAgICAvLyBhdm9pZCByZWN1cnNpb24gYnkgdXNpbmcgYSBwcm9jZXNzaW5nIHF1ZXVlXG4gICAgd2hpbGUgKHN0YWNrLmxlbmd0aCkge1xuICAgICAgICB5ID0gc3RhY2sucG9wKCk7XG4gICAgICAgIHggPSBzdGFjay5wb3AoKTtcbiAgICAgICAgeiA9IHN0YWNrLnBvcCgpO1xuICAgICAgICBmZWF0dXJlcyA9IHN0YWNrLnBvcCgpO1xuXG4gICAgICAgIHZhciB6MiA9IDEgPDwgeixcbiAgICAgICAgICAgIGlkID0gdG9JRCh6LCB4LCB5KSxcbiAgICAgICAgICAgIHRpbGUgPSB0aGlzLnRpbGVzW2lkXTtcblxuICAgICAgICBpZiAoIXRpbGUpIHtcbiAgICAgICAgICAgIGlmIChkZWJ1ZyA+IDEpIGNvbnNvbGUudGltZSgnY3JlYXRpb24nKTtcblxuICAgICAgICAgICAgdGlsZSA9IHRoaXMudGlsZXNbaWRdID0gY3JlYXRlVGlsZShmZWF0dXJlcywgeiwgeCwgeSwgb3B0aW9ucyk7XG4gICAgICAgICAgICB0aGlzLnRpbGVDb29yZHMucHVzaCh7ejogeiwgeDogeCwgeTogeX0pO1xuXG4gICAgICAgICAgICBpZiAoZGVidWcpIHtcbiAgICAgICAgICAgICAgICBpZiAoZGVidWcgPiAxKSB7XG4gICAgICAgICAgICAgICAgICAgIGNvbnNvbGUubG9nKCd0aWxlIHolZC0lZC0lZCAoZmVhdHVyZXM6ICVkLCBwb2ludHM6ICVkLCBzaW1wbGlmaWVkOiAlZCknLFxuICAgICAgICAgICAgICAgICAgICAgICAgeiwgeCwgeSwgdGlsZS5udW1GZWF0dXJlcywgdGlsZS5udW1Qb2ludHMsIHRpbGUubnVtU2ltcGxpZmllZCk7XG4gICAgICAgICAgICAgICAgICAgIGNvbnNvbGUudGltZUVuZCgnY3JlYXRpb24nKTtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgdmFyIGtleSA9ICd6JyArIHo7XG4gICAgICAgICAgICAgICAgdGhpcy5zdGF0c1trZXldID0gKHRoaXMuc3RhdHNba2V5XSB8fCAwKSArIDE7XG4gICAgICAgICAgICAgICAgdGhpcy50b3RhbCsrO1xuICAgICAgICAgICAgfVxuICAgICAgICB9XG5cbiAgICAgICAgLy8gc2F2ZSByZWZlcmVuY2UgdG8gb3JpZ2luYWwgZ2VvbWV0cnkgaW4gdGlsZSBzbyB0aGF0IHdlIGNhbiBkcmlsbCBkb3duIGxhdGVyIGlmIHdlIHN0b3Agbm93XG4gICAgICAgIHRpbGUuc291cmNlID0gZmVhdHVyZXM7XG5cbiAgICAgICAgLy8gaWYgaXQncyB0aGUgZmlyc3QtcGFzcyB0aWxpbmdcbiAgICAgICAgaWYgKCFjeikge1xuICAgICAgICAgICAgLy8gc3RvcCB0aWxpbmcgaWYgd2UgcmVhY2hlZCBtYXggem9vbSwgb3IgaWYgdGhlIHRpbGUgaXMgdG9vIHNpbXBsZVxuICAgICAgICAgICAgaWYgKHogPT09IG9wdGlvbnMuaW5kZXhNYXhab29tIHx8IHRpbGUubnVtUG9pbnRzIDw9IG9wdGlvbnMuaW5kZXhNYXhQb2ludHMpIGNvbnRpbnVlO1xuXG4gICAgICAgIC8vIGlmIGEgZHJpbGxkb3duIHRvIGEgc3BlY2lmaWMgdGlsZVxuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgLy8gc3RvcCB0aWxpbmcgaWYgd2UgcmVhY2hlZCBiYXNlIHpvb20gb3Igb3VyIHRhcmdldCB0aWxlIHpvb21cbiAgICAgICAgICAgIGlmICh6ID09PSBvcHRpb25zLm1heFpvb20gfHwgeiA9PT0gY3opIGNvbnRpbnVlO1xuXG4gICAgICAgICAgICAvLyBzdG9wIHRpbGluZyBpZiBpdCdzIG5vdCBhbiBhbmNlc3RvciBvZiB0aGUgdGFyZ2V0IHRpbGVcbiAgICAgICAgICAgIHZhciBtID0gMSA8PCAoY3ogLSB6KTtcbiAgICAgICAgICAgIGlmICh4ICE9PSBNYXRoLmZsb29yKGN4IC8gbSkgfHwgeSAhPT0gTWF0aC5mbG9vcihjeSAvIG0pKSBjb250aW51ZTtcbiAgICAgICAgfVxuXG4gICAgICAgIC8vIGlmIHdlIHNsaWNlIGZ1cnRoZXIgZG93biwgbm8gbmVlZCB0byBrZWVwIHNvdXJjZSBnZW9tZXRyeVxuICAgICAgICB0aWxlLnNvdXJjZSA9IG51bGw7XG5cbiAgICAgICAgaWYgKGZlYXR1cmVzLmxlbmd0aCA9PT0gMCkgY29udGludWU7XG5cbiAgICAgICAgaWYgKGRlYnVnID4gMSkgY29uc29sZS50aW1lKCdjbGlwcGluZycpO1xuXG4gICAgICAgIC8vIHZhbHVlcyB3ZSdsbCB1c2UgZm9yIGNsaXBwaW5nXG4gICAgICAgIHZhciBrMSA9IDAuNSAqIG9wdGlvbnMuYnVmZmVyIC8gb3B0aW9ucy5leHRlbnQsXG4gICAgICAgICAgICBrMiA9IDAuNSAtIGsxLFxuICAgICAgICAgICAgazMgPSAwLjUgKyBrMSxcbiAgICAgICAgICAgIGs0ID0gMSArIGsxLFxuICAgICAgICAgICAgdGwsIGJsLCB0ciwgYnIsIGxlZnQsIHJpZ2h0O1xuXG4gICAgICAgIHRsID0gYmwgPSB0ciA9IGJyID0gbnVsbDtcblxuICAgICAgICBsZWZ0ICA9IGNsaXAoZmVhdHVyZXMsIHoyLCB4IC0gazEsIHggKyBrMywgMCwgdGlsZS5taW5YLCB0aWxlLm1heFgsIG9wdGlvbnMpO1xuICAgICAgICByaWdodCA9IGNsaXAoZmVhdHVyZXMsIHoyLCB4ICsgazIsIHggKyBrNCwgMCwgdGlsZS5taW5YLCB0aWxlLm1heFgsIG9wdGlvbnMpO1xuICAgICAgICBmZWF0dXJlcyA9IG51bGw7XG5cbiAgICAgICAgaWYgKGxlZnQpIHtcbiAgICAgICAgICAgIHRsID0gY2xpcChsZWZ0LCB6MiwgeSAtIGsxLCB5ICsgazMsIDEsIHRpbGUubWluWSwgdGlsZS5tYXhZLCBvcHRpb25zKTtcbiAgICAgICAgICAgIGJsID0gY2xpcChsZWZ0LCB6MiwgeSArIGsyLCB5ICsgazQsIDEsIHRpbGUubWluWSwgdGlsZS5tYXhZLCBvcHRpb25zKTtcbiAgICAgICAgICAgIGxlZnQgPSBudWxsO1xuICAgICAgICB9XG5cbiAgICAgICAgaWYgKHJpZ2h0KSB7XG4gICAgICAgICAgICB0ciA9IGNsaXAocmlnaHQsIHoyLCB5IC0gazEsIHkgKyBrMywgMSwgdGlsZS5taW5ZLCB0aWxlLm1heFksIG9wdGlvbnMpO1xuICAgICAgICAgICAgYnIgPSBjbGlwKHJpZ2h0LCB6MiwgeSArIGsyLCB5ICsgazQsIDEsIHRpbGUubWluWSwgdGlsZS5tYXhZLCBvcHRpb25zKTtcbiAgICAgICAgICAgIHJpZ2h0ID0gbnVsbDtcbiAgICAgICAgfVxuXG4gICAgICAgIGlmIChkZWJ1ZyA+IDEpIGNvbnNvbGUudGltZUVuZCgnY2xpcHBpbmcnKTtcblxuICAgICAgICBzdGFjay5wdXNoKHRsIHx8IFtdLCB6ICsgMSwgeCAqIDIsICAgICB5ICogMik7XG4gICAgICAgIHN0YWNrLnB1c2goYmwgfHwgW10sIHogKyAxLCB4ICogMiwgICAgIHkgKiAyICsgMSk7XG4gICAgICAgIHN0YWNrLnB1c2godHIgfHwgW10sIHogKyAxLCB4ICogMiArIDEsIHkgKiAyKTtcbiAgICAgICAgc3RhY2sucHVzaChiciB8fCBbXSwgeiArIDEsIHggKiAyICsgMSwgeSAqIDIgKyAxKTtcbiAgICB9XG59O1xuXG5HZW9KU09OVlQucHJvdG90eXBlLmdldFRpbGUgPSBmdW5jdGlvbiAoeiwgeCwgeSkge1xuICAgIHZhciBvcHRpb25zID0gdGhpcy5vcHRpb25zLFxuICAgICAgICBleHRlbnQgPSBvcHRpb25zLmV4dGVudCxcbiAgICAgICAgZGVidWcgPSBvcHRpb25zLmRlYnVnO1xuXG4gICAgaWYgKHogPCAwIHx8IHogPiAyNCkgcmV0dXJuIG51bGw7XG5cbiAgICB2YXIgejIgPSAxIDw8IHo7XG4gICAgeCA9ICgoeCAlIHoyKSArIHoyKSAlIHoyOyAvLyB3cmFwIHRpbGUgeCBjb29yZGluYXRlXG5cbiAgICB2YXIgaWQgPSB0b0lEKHosIHgsIHkpO1xuICAgIGlmICh0aGlzLnRpbGVzW2lkXSkgcmV0dXJuIHRyYW5zZm9ybSh0aGlzLnRpbGVzW2lkXSwgZXh0ZW50KTtcblxuICAgIGlmIChkZWJ1ZyA+IDEpIGNvbnNvbGUubG9nKCdkcmlsbGluZyBkb3duIHRvIHolZC0lZC0lZCcsIHosIHgsIHkpO1xuXG4gICAgdmFyIHowID0geixcbiAgICAgICAgeDAgPSB4LFxuICAgICAgICB5MCA9IHksXG4gICAgICAgIHBhcmVudDtcblxuICAgIHdoaWxlICghcGFyZW50ICYmIHowID4gMCkge1xuICAgICAgICB6MC0tO1xuICAgICAgICB4MCA9IE1hdGguZmxvb3IoeDAgLyAyKTtcbiAgICAgICAgeTAgPSBNYXRoLmZsb29yKHkwIC8gMik7XG4gICAgICAgIHBhcmVudCA9IHRoaXMudGlsZXNbdG9JRCh6MCwgeDAsIHkwKV07XG4gICAgfVxuXG4gICAgaWYgKCFwYXJlbnQgfHwgIXBhcmVudC5zb3VyY2UpIHJldHVybiBudWxsO1xuXG4gICAgLy8gaWYgd2UgZm91bmQgYSBwYXJlbnQgdGlsZSBjb250YWluaW5nIHRoZSBvcmlnaW5hbCBnZW9tZXRyeSwgd2UgY2FuIGRyaWxsIGRvd24gZnJvbSBpdFxuICAgIGlmIChkZWJ1ZyA+IDEpIGNvbnNvbGUubG9nKCdmb3VuZCBwYXJlbnQgdGlsZSB6JWQtJWQtJWQnLCB6MCwgeDAsIHkwKTtcblxuICAgIGlmIChkZWJ1ZyA+IDEpIGNvbnNvbGUudGltZSgnZHJpbGxpbmcgZG93bicpO1xuICAgIHRoaXMuc3BsaXRUaWxlKHBhcmVudC5zb3VyY2UsIHowLCB4MCwgeTAsIHosIHgsIHkpO1xuICAgIGlmIChkZWJ1ZyA+IDEpIGNvbnNvbGUudGltZUVuZCgnZHJpbGxpbmcgZG93bicpO1xuXG4gICAgcmV0dXJuIHRoaXMudGlsZXNbaWRdID8gdHJhbnNmb3JtKHRoaXMudGlsZXNbaWRdLCBleHRlbnQpIDogbnVsbDtcbn07XG5cbmZ1bmN0aW9uIHRvSUQoeiwgeCwgeSkge1xuICAgIHJldHVybiAoKCgxIDw8IHopICogeSArIHgpICogMzIpICsgejtcbn1cblxuZnVuY3Rpb24gZXh0ZW5kKGRlc3QsIHNyYykge1xuICAgIGZvciAodmFyIGkgaW4gc3JjKSBkZXN0W2ldID0gc3JjW2ldO1xuICAgIHJldHVybiBkZXN0O1xufVxuIiwiLy8gQGZsb3dcblxuaW1wb3J0IHsgZ2V0SlNPTiB9IGZyb20gJy4uL3V0aWwvYWpheCc7XG5cbmltcG9ydCBwZXJmb3JtYW5jZSBmcm9tICcuLi91dGlsL3BlcmZvcm1hbmNlJztcbmltcG9ydCByZXdpbmQgZnJvbSAnZ2VvanNvbi1yZXdpbmQnO1xuaW1wb3J0IEdlb0pTT05XcmFwcGVyIGZyb20gJy4vZ2VvanNvbl93cmFwcGVyJztcbmltcG9ydCB2dHBiZiBmcm9tICd2dC1wYmYnO1xuaW1wb3J0IHN1cGVyY2x1c3RlciBmcm9tICdzdXBlcmNsdXN0ZXInO1xuaW1wb3J0IGdlb2pzb252dCBmcm9tICdnZW9qc29uLXZ0JztcbmltcG9ydCBhc3NlcnQgZnJvbSAnYXNzZXJ0JztcbmltcG9ydCBWZWN0b3JUaWxlV29ya2VyU291cmNlIGZyb20gJy4vdmVjdG9yX3RpbGVfd29ya2VyX3NvdXJjZSc7XG5cbmltcG9ydCB0eXBlIHtcbiAgICBXb3JrZXJUaWxlUGFyYW1ldGVycyxcbiAgICBXb3JrZXJUaWxlQ2FsbGJhY2ssXG59IGZyb20gJy4uL3NvdXJjZS93b3JrZXJfc291cmNlJztcblxuaW1wb3J0IHR5cGUgQWN0b3IgZnJvbSAnLi4vdXRpbC9hY3Rvcic7XG5pbXBvcnQgdHlwZSBTdHlsZUxheWVySW5kZXggZnJvbSAnLi4vc3R5bGUvc3R5bGVfbGF5ZXJfaW5kZXgnO1xuXG5pbXBvcnQgdHlwZSB7TG9hZFZlY3RvckRhdGFDYWxsYmFja30gZnJvbSAnLi92ZWN0b3JfdGlsZV93b3JrZXJfc291cmNlJztcbmltcG9ydCB0eXBlIHtSZXF1ZXN0UGFyYW1ldGVyc30gZnJvbSAnLi4vdXRpbC9hamF4JztcbmltcG9ydCB0eXBlIHsgQ2FsbGJhY2sgfSBmcm9tICcuLi90eXBlcy9jYWxsYmFjayc7XG5pbXBvcnQgdHlwZSB7R2VvSlNPTkZlYXR1cmV9IGZyb20gJ0BtYXBib3gvZ2VvanNvbi10eXBlcyc7XG5cbmV4cG9ydCB0eXBlIExvYWRHZW9KU09OUGFyYW1ldGVycyA9IHtcbiAgICByZXF1ZXN0PzogUmVxdWVzdFBhcmFtZXRlcnMsXG4gICAgZGF0YT86IHN0cmluZyxcbiAgICBzb3VyY2U6IHN0cmluZyxcbiAgICBjbHVzdGVyOiBib29sZWFuLFxuICAgIHN1cGVyY2x1c3Rlck9wdGlvbnM/OiBPYmplY3QsXG4gICAgZ2VvanNvblZ0T3B0aW9ucz86IE9iamVjdFxufTtcblxuZXhwb3J0IHR5cGUgTG9hZEdlb0pTT04gPSAocGFyYW1zOiBMb2FkR2VvSlNPTlBhcmFtZXRlcnMsIGNhbGxiYWNrOiBDYWxsYmFjazxtaXhlZD4pID0+IHZvaWQ7XG5cbmV4cG9ydCBpbnRlcmZhY2UgR2VvSlNPTkluZGV4IHtcbiAgICBnZXRUaWxlKHo6IG51bWJlciwgeDogbnVtYmVyLCB5OiBudW1iZXIpOiBPYmplY3Q7XG5cbiAgICAvLyBzdXBlcmNsdXN0ZXIgbWV0aG9kc1xuICAgIGdldENsdXN0ZXJFeHBhbnNpb25ab29tKGNsdXN0ZXJJZDogbnVtYmVyKTogbnVtYmVyO1xuICAgIGdldENoaWxkcmVuKGNsdXN0ZXJJZDogbnVtYmVyKTogQXJyYXk8R2VvSlNPTkZlYXR1cmU+O1xuICAgIGdldExlYXZlcyhjbHVzdGVySWQ6IG51bWJlciwgbGltaXQ6IG51bWJlciwgb2Zmc2V0OiBudW1iZXIpOiBBcnJheTxHZW9KU09ORmVhdHVyZT47XG59XG5cbmZ1bmN0aW9uIGxvYWRHZW9KU09OVGlsZShwYXJhbXM6IFdvcmtlclRpbGVQYXJhbWV0ZXJzLCBjYWxsYmFjazogTG9hZFZlY3RvckRhdGFDYWxsYmFjaykge1xuICAgIGNvbnN0IGNhbm9uaWNhbCA9IHBhcmFtcy50aWxlSUQuY2Fub25pY2FsO1xuXG4gICAgaWYgKCF0aGlzLl9nZW9KU09OSW5kZXgpIHtcbiAgICAgICAgcmV0dXJuIGNhbGxiYWNrKG51bGwsIG51bGwpOyAgLy8gd2UgY291bGRuJ3QgbG9hZCB0aGUgZmlsZVxuICAgIH1cblxuICAgIGNvbnN0IGdlb0pTT05UaWxlID0gdGhpcy5fZ2VvSlNPTkluZGV4LmdldFRpbGUoY2Fub25pY2FsLnosIGNhbm9uaWNhbC54LCBjYW5vbmljYWwueSk7XG4gICAgaWYgKCFnZW9KU09OVGlsZSkge1xuICAgICAgICByZXR1cm4gY2FsbGJhY2sobnVsbCwgbnVsbCk7IC8vIG5vdGhpbmcgaW4gdGhlIGdpdmVuIHRpbGVcbiAgICB9XG5cbiAgICBjb25zdCBnZW9qc29uV3JhcHBlciA9IG5ldyBHZW9KU09OV3JhcHBlcihnZW9KU09OVGlsZS5mZWF0dXJlcyk7XG5cbiAgICAvLyBFbmNvZGUgdGhlIGdlb2pzb24tdnQgdGlsZSBpbnRvIGJpbmFyeSB2ZWN0b3IgdGlsZSBmb3JtLiAgVGhpc1xuICAgIC8vIGlzIGEgY29udmVuaWVuY2UgdGhhdCBhbGxvd3MgYEZlYXR1cmVJbmRleGAgdG8gb3BlcmF0ZSB0aGUgc2FtZSB3YXlcbiAgICAvLyBhY3Jvc3MgYFZlY3RvclRpbGVTb3VyY2VgIGFuZCBgR2VvSlNPTlNvdXJjZWAgZGF0YS5cbiAgICBsZXQgcGJmID0gdnRwYmYoZ2VvanNvbldyYXBwZXIpO1xuICAgIGlmIChwYmYuYnl0ZU9mZnNldCAhPT0gMCB8fCBwYmYuYnl0ZUxlbmd0aCAhPT0gcGJmLmJ1ZmZlci5ieXRlTGVuZ3RoKSB7XG4gICAgICAgIC8vIENvbXBhdGliaWxpdHkgd2l0aCBub2RlIEJ1ZmZlciAoaHR0cHM6Ly9naXRodWIuY29tL21hcGJveC9wYmYvaXNzdWVzLzM1KVxuICAgICAgICBwYmYgPSBuZXcgVWludDhBcnJheShwYmYpO1xuICAgIH1cblxuICAgIGNhbGxiYWNrKG51bGwsIHtcbiAgICAgICAgdmVjdG9yVGlsZTogZ2VvanNvbldyYXBwZXIsXG4gICAgICAgIHJhd0RhdGE6IHBiZi5idWZmZXJcbiAgICB9KTtcbn1cblxuZXhwb3J0IHR5cGUgU291cmNlU3RhdGUgPVxuICAgIHwgJ0lkbGUnICAgICAgICAgICAgLy8gU291cmNlIGVtcHR5IG9yIGRhdGEgbG9hZGVkXG4gICAgfCAnQ29hbGVzY2luZycgICAgICAvLyBEYXRhIGZpbmlzaGVkIGxvYWRpbmcsIGJ1dCBkaXNjYXJkICdsb2FkRGF0YScgbWVzc2FnZXMgdW50aWwgcmVjZWl2aW5nICdjb2FsZXNjZWQnXG4gICAgfCAnTmVlZHNMb2FkRGF0YSc7ICAvLyAnbG9hZERhdGEnIHJlY2VpdmVkIHdoaWxlIGNvYWxlc2NpbmcsIHRyaWdnZXIgb25lIG1vcmUgJ2xvYWREYXRhJyBvbiByZWNlaXZpbmcgJ2NvYWxlc2NlZCdcblxuLyoqXG4gKiBUaGUge0BsaW5rIFdvcmtlclNvdXJjZX0gaW1wbGVtZW50YXRpb24gdGhhdCBzdXBwb3J0cyB7QGxpbmsgR2VvSlNPTlNvdXJjZX0uXG4gKiBUaGlzIGNsYXNzIGlzIGRlc2lnbmVkIHRvIGJlIGVhc2lseSByZXVzZWQgdG8gc3VwcG9ydCBjdXN0b20gc291cmNlIHR5cGVzXG4gKiBmb3IgZGF0YSBmb3JtYXRzIHRoYXQgY2FuIGJlIHBhcnNlZC9jb252ZXJ0ZWQgaW50byBhbiBpbi1tZW1vcnkgR2VvSlNPTlxuICogcmVwcmVzZW50YXRpb24uICBUbyBkbyBzbywgY3JlYXRlIGl0IHdpdGhcbiAqIGBuZXcgR2VvSlNPTldvcmtlclNvdXJjZShhY3RvciwgbGF5ZXJJbmRleCwgY3VzdG9tTG9hZEdlb0pTT05GdW5jdGlvbilgLlxuICogRm9yIGEgZnVsbCBleGFtcGxlLCBzZWUgW21hcGJveC1nbC10b3BvanNvbl0oaHR0cHM6Ly9naXRodWIuY29tL2RldmVsb3BtZW50c2VlZC9tYXBib3gtZ2wtdG9wb2pzb24pLlxuICpcbiAqIEBwcml2YXRlXG4gKi9cbmNsYXNzIEdlb0pTT05Xb3JrZXJTb3VyY2UgZXh0ZW5kcyBWZWN0b3JUaWxlV29ya2VyU291cmNlIHtcbiAgICBsb2FkR2VvSlNPTjogTG9hZEdlb0pTT047XG4gICAgX3N0YXRlOiBTb3VyY2VTdGF0ZTtcbiAgICBfcGVuZGluZ0NhbGxiYWNrOiBDYWxsYmFjazx7XG4gICAgICAgIHJlc291cmNlVGltaW5nPzoge1tzdHJpbmddOiBBcnJheTxQZXJmb3JtYW5jZVJlc291cmNlVGltaW5nPn0sXG4gICAgICAgIGFiYW5kb25lZD86IGJvb2xlYW4gfT47XG4gICAgX3BlbmRpbmdMb2FkRGF0YVBhcmFtczogTG9hZEdlb0pTT05QYXJhbWV0ZXJzO1xuICAgIF9nZW9KU09OSW5kZXg6IEdlb0pTT05JbmRleFxuXG4gICAgLyoqXG4gICAgICogQHBhcmFtIFtsb2FkR2VvSlNPTl0gT3B0aW9uYWwgbWV0aG9kIGZvciBjdXN0b20gbG9hZGluZy9wYXJzaW5nIG9mXG4gICAgICogR2VvSlNPTiBiYXNlZCBvbiBwYXJhbWV0ZXJzIHBhc3NlZCBmcm9tIHRoZSBtYWluLXRocmVhZCBTb3VyY2UuXG4gICAgICogU2VlIHtAbGluayBHZW9KU09OV29ya2VyU291cmNlI2xvYWRHZW9KU09OfS5cbiAgICAgKi9cbiAgICBjb25zdHJ1Y3RvcihhY3RvcjogQWN0b3IsIGxheWVySW5kZXg6IFN0eWxlTGF5ZXJJbmRleCwgbG9hZEdlb0pTT046ID9Mb2FkR2VvSlNPTikge1xuICAgICAgICBzdXBlcihhY3RvciwgbGF5ZXJJbmRleCwgbG9hZEdlb0pTT05UaWxlKTtcbiAgICAgICAgaWYgKGxvYWRHZW9KU09OKSB7XG4gICAgICAgICAgICB0aGlzLmxvYWRHZW9KU09OID0gbG9hZEdlb0pTT047XG4gICAgICAgIH1cbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBGZXRjaGVzIChpZiBhcHByb3ByaWF0ZSksIHBhcnNlcywgYW5kIGluZGV4IGdlb2pzb24gZGF0YSBpbnRvIHRpbGVzLiBUaGlzXG4gICAgICogcHJlcGFyYXRvcnkgbWV0aG9kIG11c3QgYmUgY2FsbGVkIGJlZm9yZSB7QGxpbmsgR2VvSlNPTldvcmtlclNvdXJjZSNsb2FkVGlsZX1cbiAgICAgKiBjYW4gY29ycmVjdGx5IHNlcnZlIHVwIHRpbGVzLlxuICAgICAqXG4gICAgICogRGVmZXJzIHRvIHtAbGluayBHZW9KU09OV29ya2VyU291cmNlI2xvYWRHZW9KU09OfSBmb3IgdGhlIGZldGNoaW5nL3BhcnNpbmcsXG4gICAgICogZXhwZWN0aW5nIGBjYWxsYmFjayhlcnJvciwgZGF0YSlgIHRvIGJlIGNhbGxlZCB3aXRoIGVpdGhlciBhbiBlcnJvciBvciBhXG4gICAgICogcGFyc2VkIEdlb0pTT04gb2JqZWN0LlxuICAgICAqXG4gICAgICogV2hlbiBgbG9hZERhdGFgIHJlcXVlc3RzIGNvbWUgaW4gZmFzdGVyIHRoYW4gdGhleSBjYW4gYmUgcHJvY2Vzc2VkLFxuICAgICAqIHRoZXkgYXJlIGNvYWxlc2NlZCBpbnRvIGEgc2luZ2xlIHJlcXVlc3QgdXNpbmcgdGhlIGxhdGVzdCBkYXRhLlxuICAgICAqIFNlZSB7QGxpbmsgR2VvSlNPTldvcmtlclNvdXJjZSNjb2FsZXNjZX1cbiAgICAgKlxuICAgICAqIEBwYXJhbSBwYXJhbXNcbiAgICAgKiBAcGFyYW0gY2FsbGJhY2tcbiAgICAgKi9cbiAgICBsb2FkRGF0YShwYXJhbXM6IExvYWRHZW9KU09OUGFyYW1ldGVycywgY2FsbGJhY2s6IENhbGxiYWNrPHtcbiAgICAgICAgcmVzb3VyY2VUaW1pbmc/OiB7W3N0cmluZ106IEFycmF5PFBlcmZvcm1hbmNlUmVzb3VyY2VUaW1pbmc+fSxcbiAgICAgICAgYWJhbmRvbmVkPzogYm9vbGVhbiB9Pikge1xuICAgICAgICBpZiAodGhpcy5fcGVuZGluZ0NhbGxiYWNrKSB7XG4gICAgICAgICAgICAvLyBUZWxsIHRoZSBmb3JlZ3JvdW5kIHRoZSBwcmV2aW91cyBjYWxsIGhhcyBiZWVuIGFiYW5kb25lZFxuICAgICAgICAgICAgdGhpcy5fcGVuZGluZ0NhbGxiYWNrKG51bGwsIHsgYWJhbmRvbmVkOiB0cnVlIH0pO1xuICAgICAgICB9XG4gICAgICAgIHRoaXMuX3BlbmRpbmdDYWxsYmFjayA9IGNhbGxiYWNrO1xuICAgICAgICB0aGlzLl9wZW5kaW5nTG9hZERhdGFQYXJhbXMgPSBwYXJhbXM7XG5cbiAgICAgICAgaWYgKHRoaXMuX3N0YXRlICYmXG4gICAgICAgICAgICB0aGlzLl9zdGF0ZSAhPT0gJ0lkbGUnKSB7XG4gICAgICAgICAgICB0aGlzLl9zdGF0ZSA9ICdOZWVkc0xvYWREYXRhJztcbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgIHRoaXMuX3N0YXRlID0gJ0NvYWxlc2NpbmcnO1xuICAgICAgICAgICAgdGhpcy5fbG9hZERhdGEoKTtcbiAgICAgICAgfVxuICAgIH1cblxuICAgIC8qKlxuICAgICAqIEludGVybmFsIGltcGxlbWVudGF0aW9uOiBjYWxsZWQgZGlyZWN0bHkgYnkgYGxvYWREYXRhYFxuICAgICAqIG9yIGJ5IGBjb2FsZXNjZWAgdXNpbmcgc3RvcmVkIHBhcmFtZXRlcnMuXG4gICAgICovXG4gICAgX2xvYWREYXRhKCkge1xuICAgICAgICBpZiAoIXRoaXMuX3BlbmRpbmdDYWxsYmFjayB8fCAhdGhpcy5fcGVuZGluZ0xvYWREYXRhUGFyYW1zKSB7XG4gICAgICAgICAgICBhc3NlcnQoZmFsc2UpO1xuICAgICAgICAgICAgcmV0dXJuO1xuICAgICAgICB9XG4gICAgICAgIGNvbnN0IGNhbGxiYWNrID0gdGhpcy5fcGVuZGluZ0NhbGxiYWNrO1xuICAgICAgICBjb25zdCBwYXJhbXMgPSB0aGlzLl9wZW5kaW5nTG9hZERhdGFQYXJhbXM7XG4gICAgICAgIGRlbGV0ZSB0aGlzLl9wZW5kaW5nQ2FsbGJhY2s7XG4gICAgICAgIGRlbGV0ZSB0aGlzLl9wZW5kaW5nTG9hZERhdGFQYXJhbXM7XG5cbiAgICAgICAgY29uc3QgcGVyZiA9IChwYXJhbXMgJiYgcGFyYW1zLnJlcXVlc3QgJiYgcGFyYW1zLnJlcXVlc3QuY29sbGVjdFJlc291cmNlVGltaW5nKSA/XG4gICAgICAgICAgICBuZXcgcGVyZm9ybWFuY2UuUGVyZm9ybWFuY2UocGFyYW1zLnJlcXVlc3QpIDogZmFsc2U7XG5cbiAgICAgICAgdGhpcy5sb2FkR2VvSlNPTihwYXJhbXMsIChlcnIsIGRhdGEpID0+IHtcbiAgICAgICAgICAgIGlmIChlcnIgfHwgIWRhdGEpIHtcbiAgICAgICAgICAgICAgICByZXR1cm4gY2FsbGJhY2soZXJyKTtcbiAgICAgICAgICAgIH0gZWxzZSBpZiAodHlwZW9mIGRhdGEgIT09ICdvYmplY3QnKSB7XG4gICAgICAgICAgICAgICAgcmV0dXJuIGNhbGxiYWNrKG5ldyBFcnJvcihcIklucHV0IGRhdGEgaXMgbm90IGEgdmFsaWQgR2VvSlNPTiBvYmplY3QuXCIpKTtcbiAgICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICAgICAgcmV3aW5kKGRhdGEsIHRydWUpO1xuXG4gICAgICAgICAgICAgICAgdHJ5IHtcbiAgICAgICAgICAgICAgICAgICAgdGhpcy5fZ2VvSlNPTkluZGV4ID0gcGFyYW1zLmNsdXN0ZXIgP1xuICAgICAgICAgICAgICAgICAgICAgICAgc3VwZXJjbHVzdGVyKHBhcmFtcy5zdXBlcmNsdXN0ZXJPcHRpb25zKS5sb2FkKGRhdGEuZmVhdHVyZXMpIDpcbiAgICAgICAgICAgICAgICAgICAgICAgIGdlb2pzb252dChkYXRhLCBwYXJhbXMuZ2VvanNvblZ0T3B0aW9ucyk7XG4gICAgICAgICAgICAgICAgfSBjYXRjaCAoZXJyKSB7XG4gICAgICAgICAgICAgICAgICAgIHJldHVybiBjYWxsYmFjayhlcnIpO1xuICAgICAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgICAgIHRoaXMubG9hZGVkID0ge307XG5cbiAgICAgICAgICAgICAgICBjb25zdCByZXN1bHQgPSB7fTtcbiAgICAgICAgICAgICAgICBpZiAocGVyZikge1xuICAgICAgICAgICAgICAgICAgICBjb25zdCByZXNvdXJjZVRpbWluZ0RhdGEgPSBwZXJmLmZpbmlzaCgpO1xuICAgICAgICAgICAgICAgICAgICAvLyBpdCdzIG5lY2Vzc2FyeSB0byBldmFsIHRoZSByZXN1bHQgb2YgZ2V0RW50cmllc0J5TmFtZSgpIGhlcmUgdmlhIHBhcnNlL3N0cmluZ2lmeVxuICAgICAgICAgICAgICAgICAgICAvLyBsYXRlIGV2YWx1YXRpb24gaW4gdGhlIG1haW4gdGhyZWFkIGNhdXNlcyBUeXBlRXJyb3I6IGlsbGVnYWwgaW52b2NhdGlvblxuICAgICAgICAgICAgICAgICAgICBpZiAocmVzb3VyY2VUaW1pbmdEYXRhKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICByZXN1bHQucmVzb3VyY2VUaW1pbmcgPSB7fTtcbiAgICAgICAgICAgICAgICAgICAgICAgIHJlc3VsdC5yZXNvdXJjZVRpbWluZ1twYXJhbXMuc291cmNlXSA9IEpTT04ucGFyc2UoSlNPTi5zdHJpbmdpZnkocmVzb3VyY2VUaW1pbmdEYXRhKSk7XG4gICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgY2FsbGJhY2sobnVsbCwgcmVzdWx0KTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfSk7XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogV2hpbGUgcHJvY2Vzc2luZyBgbG9hZERhdGFgLCB3ZSBjb2FsZXNjZSBhbGwgZnVydGhlclxuICAgICAqIGBsb2FkRGF0YWAgbWVzc2FnZXMgaW50byBhIHNpbmdsZSBjYWxsIHRvIF9sb2FkRGF0YVxuICAgICAqIHRoYXQgd2lsbCBoYXBwZW4gb25jZSB3ZSd2ZSBmaW5pc2hlZCBwcm9jZXNzaW5nIHRoZVxuICAgICAqIGZpcnN0IG1lc3NhZ2UuIHtAbGluayBHZW9KU09OU291cmNlI191cGRhdGVXb3JrZXJEYXRhfVxuICAgICAqIGlzIHJlc3BvbnNpYmxlIGZvciBzZW5kaW5nIHVzIHRoZSBgY29hbGVzY2VgIG1lc3NhZ2VcbiAgICAgKiBhdCB0aGUgdGltZSBpdCByZWNlaXZlcyBhIHJlc3BvbnNlIGZyb20gYGxvYWREYXRhYFxuICAgICAqXG4gICAgICogICAgICAgICAgU3RhdGU6IElkbGVcbiAgICAgKiAgICAgICAgICDihpEgICAgICAgICAgfFxuICAgICAqICAgICAnY29hbGVzY2UnICAgJ2xvYWREYXRhJ1xuICAgICAqICAgICAgICAgIHwgICAgICh0cmlnZ2VycyBsb2FkKVxuICAgICAqICAgICAgICAgIHwgICAgICAgICAg4oaTXG4gICAgICogICAgICAgIFN0YXRlOiBDb2FsZXNjaW5nXG4gICAgICogICAgICAgICAg4oaRICAgICAgICAgIHxcbiAgICAgKiAgICh0cmlnZ2VycyBsb2FkKSAgIHxcbiAgICAgKiAgICAgJ2NvYWxlc2NlJyAgICdsb2FkRGF0YSdcbiAgICAgKiAgICAgICAgICB8ICAgICAgICAgIOKGk1xuICAgICAqICAgICAgICBTdGF0ZTogTmVlZHNMb2FkRGF0YVxuICAgICAqL1xuICAgIGNvYWxlc2NlKCkge1xuICAgICAgICBpZiAodGhpcy5fc3RhdGUgPT09ICdDb2FsZXNjaW5nJykge1xuICAgICAgICAgICAgdGhpcy5fc3RhdGUgPSAnSWRsZSc7XG4gICAgICAgIH0gZWxzZSBpZiAodGhpcy5fc3RhdGUgPT09ICdOZWVkc0xvYWREYXRhJykge1xuICAgICAgICAgICAgdGhpcy5fc3RhdGUgPSAnQ29hbGVzY2luZyc7XG4gICAgICAgICAgICB0aGlzLl9sb2FkRGF0YSgpO1xuICAgICAgICB9XG4gICAgfVxuXG4gICAgLyoqXG4gICAgKiBJbXBsZW1lbnRzIHtAbGluayBXb3JrZXJTb3VyY2UjcmVsb2FkVGlsZX0uXG4gICAgKlxuICAgICogSWYgdGhlIHRpbGUgaXMgbG9hZGVkLCB1c2VzIHRoZSBpbXBsZW1lbnRhdGlvbiBpbiBWZWN0b3JUaWxlV29ya2VyU291cmNlLlxuICAgICogT3RoZXJ3aXNlLCBzdWNoIGFzIGFmdGVyIGEgc2V0RGF0YSgpIGNhbGwsIHdlIGxvYWQgdGhlIHRpbGUgZnJlc2guXG4gICAgKlxuICAgICogQHBhcmFtIHBhcmFtc1xuICAgICogQHBhcmFtIHBhcmFtcy51aWQgVGhlIFVJRCBmb3IgdGhpcyB0aWxlLlxuICAgICovXG4gICAgcmVsb2FkVGlsZShwYXJhbXM6IFdvcmtlclRpbGVQYXJhbWV0ZXJzLCBjYWxsYmFjazogV29ya2VyVGlsZUNhbGxiYWNrKSB7XG4gICAgICAgIGNvbnN0IGxvYWRlZCA9IHRoaXMubG9hZGVkLFxuICAgICAgICAgICAgdWlkID0gcGFyYW1zLnVpZDtcblxuICAgICAgICBpZiAobG9hZGVkICYmIGxvYWRlZFt1aWRdKSB7XG4gICAgICAgICAgICByZXR1cm4gc3VwZXIucmVsb2FkVGlsZShwYXJhbXMsIGNhbGxiYWNrKTtcbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgIHJldHVybiB0aGlzLmxvYWRUaWxlKHBhcmFtcywgY2FsbGJhY2spO1xuICAgICAgICB9XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogRmV0Y2ggYW5kIHBhcnNlIEdlb0pTT04gYWNjb3JkaW5nIHRvIHRoZSBnaXZlbiBwYXJhbXMuICBDYWxscyBgY2FsbGJhY2tgXG4gICAgICogd2l0aCBgKGVyciwgZGF0YSlgLCB3aGVyZSBgZGF0YWAgaXMgYSBwYXJzZWQgR2VvSlNPTiBvYmplY3QuXG4gICAgICpcbiAgICAgKiBHZW9KU09OIGlzIGxvYWRlZCBhbmQgcGFyc2VkIGZyb20gYHBhcmFtcy51cmxgIGlmIGl0IGV4aXN0cywgb3IgZWxzZVxuICAgICAqIGV4cGVjdGVkIGFzIGEgbGl0ZXJhbCAoc3RyaW5nIG9yIG9iamVjdCkgYHBhcmFtcy5kYXRhYC5cbiAgICAgKlxuICAgICAqIEBwYXJhbSBwYXJhbXNcbiAgICAgKiBAcGFyYW0gW3BhcmFtcy51cmxdIEEgVVJMIHRvIHRoZSByZW1vdGUgR2VvSlNPTiBkYXRhLlxuICAgICAqIEBwYXJhbSBbcGFyYW1zLmRhdGFdIExpdGVyYWwgR2VvSlNPTiBkYXRhLiBNdXN0IGJlIHByb3ZpZGVkIGlmIGBwYXJhbXMudXJsYCBpcyBub3QuXG4gICAgICovXG4gICAgbG9hZEdlb0pTT04ocGFyYW1zOiBMb2FkR2VvSlNPTlBhcmFtZXRlcnMsIGNhbGxiYWNrOiBDYWxsYmFjazxtaXhlZD4pIHtcbiAgICAgICAgLy8gQmVjYXVzZSBvZiBzYW1lIG9yaWdpbiBpc3N1ZXMsIHVybHMgbXVzdCBlaXRoZXIgaW5jbHVkZSBhbiBleHBsaWNpdFxuICAgICAgICAvLyBvcmlnaW4gb3IgYWJzb2x1dGUgcGF0aC5cbiAgICAgICAgLy8gaWU6IC9mb28vYmFyLmpzb24gb3IgaHR0cDovL2V4YW1wbGUuY29tL2Jhci5qc29uXG4gICAgICAgIC8vIGJ1dCBub3QgLi4vZm9vL2Jhci5qc29uXG4gICAgICAgIGlmIChwYXJhbXMucmVxdWVzdCkge1xuICAgICAgICAgICAgZ2V0SlNPTihwYXJhbXMucmVxdWVzdCwgY2FsbGJhY2spO1xuICAgICAgICB9IGVsc2UgaWYgKHR5cGVvZiBwYXJhbXMuZGF0YSA9PT0gJ3N0cmluZycpIHtcbiAgICAgICAgICAgIHRyeSB7XG4gICAgICAgICAgICAgICAgcmV0dXJuIGNhbGxiYWNrKG51bGwsIEpTT04ucGFyc2UocGFyYW1zLmRhdGEpKTtcbiAgICAgICAgICAgIH0gY2F0Y2ggKGUpIHtcbiAgICAgICAgICAgICAgICByZXR1cm4gY2FsbGJhY2sobmV3IEVycm9yKFwiSW5wdXQgZGF0YSBpcyBub3QgYSB2YWxpZCBHZW9KU09OIG9iamVjdC5cIikpO1xuICAgICAgICAgICAgfVxuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgcmV0dXJuIGNhbGxiYWNrKG5ldyBFcnJvcihcIklucHV0IGRhdGEgaXMgbm90IGEgdmFsaWQgR2VvSlNPTiBvYmplY3QuXCIpKTtcbiAgICAgICAgfVxuICAgIH1cblxuICAgIHJlbW92ZVNvdXJjZShwYXJhbXM6IHtzb3VyY2U6IHN0cmluZ30sIGNhbGxiYWNrOiBDYWxsYmFjazxtaXhlZD4pIHtcbiAgICAgICAgaWYgKHRoaXMuX3BlbmRpbmdDYWxsYmFjaykge1xuICAgICAgICAgICAgLy8gRG9uJ3QgbGVhayBjYWxsYmFja3NcbiAgICAgICAgICAgIHRoaXMuX3BlbmRpbmdDYWxsYmFjayhudWxsLCB7IGFiYW5kb25lZDogdHJ1ZSB9KTtcbiAgICAgICAgfVxuICAgICAgICBjYWxsYmFjaygpO1xuICAgIH1cblxuICAgIGdldENsdXN0ZXJFeHBhbnNpb25ab29tKHBhcmFtczoge2NsdXN0ZXJJZDogbnVtYmVyfSwgY2FsbGJhY2s6IENhbGxiYWNrPG51bWJlcj4pIHtcbiAgICAgICAgY2FsbGJhY2sobnVsbCwgdGhpcy5fZ2VvSlNPTkluZGV4LmdldENsdXN0ZXJFeHBhbnNpb25ab29tKHBhcmFtcy5jbHVzdGVySWQpKTtcbiAgICB9XG5cbiAgICBnZXRDbHVzdGVyQ2hpbGRyZW4ocGFyYW1zOiB7Y2x1c3RlcklkOiBudW1iZXJ9LCBjYWxsYmFjazogQ2FsbGJhY2s8QXJyYXk8R2VvSlNPTkZlYXR1cmU+Pikge1xuICAgICAgICBjYWxsYmFjayhudWxsLCB0aGlzLl9nZW9KU09OSW5kZXguZ2V0Q2hpbGRyZW4ocGFyYW1zLmNsdXN0ZXJJZCkpO1xuICAgIH1cblxuICAgIGdldENsdXN0ZXJMZWF2ZXMocGFyYW1zOiB7Y2x1c3RlcklkOiBudW1iZXIsIGxpbWl0OiBudW1iZXIsIG9mZnNldDogbnVtYmVyfSwgY2FsbGJhY2s6IENhbGxiYWNrPEFycmF5PEdlb0pTT05GZWF0dXJlPj4pIHtcbiAgICAgICAgY2FsbGJhY2sobnVsbCwgdGhpcy5fZ2VvSlNPTkluZGV4LmdldExlYXZlcyhwYXJhbXMuY2x1c3RlcklkLCBwYXJhbXMubGltaXQsIHBhcmFtcy5vZmZzZXQpKTtcbiAgICB9XG59XG5cbmV4cG9ydCBkZWZhdWx0IEdlb0pTT05Xb3JrZXJTb3VyY2U7XG4iLCJcbmV4cG9ydCBkZWZhdWx0IGZ1bmN0aW9uIHJhbmdlKGlkcywgY29vcmRzLCBtaW5YLCBtaW5ZLCBtYXhYLCBtYXhZLCBub2RlU2l6ZSkge1xuICAgIHZhciBzdGFjayA9IFswLCBpZHMubGVuZ3RoIC0gMSwgMF07XG4gICAgdmFyIHJlc3VsdCA9IFtdO1xuICAgIHZhciB4LCB5O1xuXG4gICAgd2hpbGUgKHN0YWNrLmxlbmd0aCkge1xuICAgICAgICB2YXIgYXhpcyA9IHN0YWNrLnBvcCgpO1xuICAgICAgICB2YXIgcmlnaHQgPSBzdGFjay5wb3AoKTtcbiAgICAgICAgdmFyIGxlZnQgPSBzdGFjay5wb3AoKTtcblxuICAgICAgICBpZiAocmlnaHQgLSBsZWZ0IDw9IG5vZGVTaXplKSB7XG4gICAgICAgICAgICBmb3IgKHZhciBpID0gbGVmdDsgaSA8PSByaWdodDsgaSsrKSB7XG4gICAgICAgICAgICAgICAgeCA9IGNvb3Jkc1syICogaV07XG4gICAgICAgICAgICAgICAgeSA9IGNvb3Jkc1syICogaSArIDFdO1xuICAgICAgICAgICAgICAgIGlmICh4ID49IG1pblggJiYgeCA8PSBtYXhYICYmIHkgPj0gbWluWSAmJiB5IDw9IG1heFkpIHJlc3VsdC5wdXNoKGlkc1tpXSk7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBjb250aW51ZTtcbiAgICAgICAgfVxuXG4gICAgICAgIHZhciBtID0gTWF0aC5mbG9vcigobGVmdCArIHJpZ2h0KSAvIDIpO1xuXG4gICAgICAgIHggPSBjb29yZHNbMiAqIG1dO1xuICAgICAgICB5ID0gY29vcmRzWzIgKiBtICsgMV07XG5cbiAgICAgICAgaWYgKHggPj0gbWluWCAmJiB4IDw9IG1heFggJiYgeSA+PSBtaW5ZICYmIHkgPD0gbWF4WSkgcmVzdWx0LnB1c2goaWRzW21dKTtcblxuICAgICAgICB2YXIgbmV4dEF4aXMgPSAoYXhpcyArIDEpICUgMjtcblxuICAgICAgICBpZiAoYXhpcyA9PT0gMCA/IG1pblggPD0geCA6IG1pblkgPD0geSkge1xuICAgICAgICAgICAgc3RhY2sucHVzaChsZWZ0KTtcbiAgICAgICAgICAgIHN0YWNrLnB1c2gobSAtIDEpO1xuICAgICAgICAgICAgc3RhY2sucHVzaChuZXh0QXhpcyk7XG4gICAgICAgIH1cbiAgICAgICAgaWYgKGF4aXMgPT09IDAgPyBtYXhYID49IHggOiBtYXhZID49IHkpIHtcbiAgICAgICAgICAgIHN0YWNrLnB1c2gobSArIDEpO1xuICAgICAgICAgICAgc3RhY2sucHVzaChyaWdodCk7XG4gICAgICAgICAgICBzdGFjay5wdXNoKG5leHRBeGlzKTtcbiAgICAgICAgfVxuICAgIH1cblxuICAgIHJldHVybiByZXN1bHQ7XG59XG4iLCIvLyBAZmxvd1xuXG5pbXBvcnQgQWN0b3IgZnJvbSAnLi4vdXRpbC9hY3Rvcic7XG5cbmltcG9ydCBTdHlsZUxheWVySW5kZXggZnJvbSAnLi4vc3R5bGUvc3R5bGVfbGF5ZXJfaW5kZXgnO1xuaW1wb3J0IFZlY3RvclRpbGVXb3JrZXJTb3VyY2UgZnJvbSAnLi92ZWN0b3JfdGlsZV93b3JrZXJfc291cmNlJztcbmltcG9ydCBSYXN0ZXJERU1UaWxlV29ya2VyU291cmNlIGZyb20gJy4vcmFzdGVyX2RlbV90aWxlX3dvcmtlcl9zb3VyY2UnO1xuaW1wb3J0IEdlb0pTT05Xb3JrZXJTb3VyY2UgZnJvbSAnLi9nZW9qc29uX3dvcmtlcl9zb3VyY2UnO1xuaW1wb3J0IGFzc2VydCBmcm9tICdhc3NlcnQnO1xuaW1wb3J0IHsgcGx1Z2luIGFzIGdsb2JhbFJUTFRleHRQbHVnaW4gfSBmcm9tICcuL3J0bF90ZXh0X3BsdWdpbic7XG5cbmltcG9ydCB0eXBlIHtcbiAgICBXb3JrZXJTb3VyY2UsXG4gICAgV29ya2VyVGlsZVBhcmFtZXRlcnMsXG4gICAgV29ya2VyREVNVGlsZVBhcmFtZXRlcnMsXG4gICAgV29ya2VyVGlsZUNhbGxiYWNrLFxuICAgIFdvcmtlckRFTVRpbGVDYWxsYmFjayxcbiAgICBUaWxlUGFyYW1ldGVyc1xufSBmcm9tICcuLi9zb3VyY2Uvd29ya2VyX3NvdXJjZSc7XG5cbmltcG9ydCB0eXBlIHtXb3JrZXJHbG9iYWxTY29wZUludGVyZmFjZX0gZnJvbSAnLi4vdXRpbC93ZWJfd29ya2VyJztcbmltcG9ydCB0eXBlIHtDYWxsYmFja30gZnJvbSAnLi4vdHlwZXMvY2FsbGJhY2snO1xuaW1wb3J0IHR5cGUge0xheWVyU3BlY2lmaWNhdGlvbn0gZnJvbSAnLi4vc3R5bGUtc3BlYy90eXBlcyc7XG5cbi8qKlxuICogQHByaXZhdGVcbiAqL1xuZXhwb3J0IGRlZmF1bHQgY2xhc3MgV29ya2VyIHtcbiAgICBzZWxmOiBXb3JrZXJHbG9iYWxTY29wZUludGVyZmFjZTtcbiAgICBhY3RvcjogQWN0b3I7XG4gICAgbGF5ZXJJbmRleGVzOiB7IFtzdHJpbmddOiBTdHlsZUxheWVySW5kZXggfTtcbiAgICB3b3JrZXJTb3VyY2VUeXBlczogeyBbc3RyaW5nXTogQ2xhc3M8V29ya2VyU291cmNlPiB9O1xuICAgIHdvcmtlclNvdXJjZXM6IHsgW3N0cmluZ106IHsgW3N0cmluZ106IHsgW3N0cmluZ106IFdvcmtlclNvdXJjZSB9IH0gfTtcbiAgICBkZW1Xb3JrZXJTb3VyY2VzOiB7IFtzdHJpbmddOiB7IFtzdHJpbmddOiBSYXN0ZXJERU1UaWxlV29ya2VyU291cmNlIH0gfTtcblxuICAgIGNvbnN0cnVjdG9yKHNlbGY6IFdvcmtlckdsb2JhbFNjb3BlSW50ZXJmYWNlKSB7XG4gICAgICAgIHRoaXMuc2VsZiA9IHNlbGY7XG4gICAgICAgIHRoaXMuYWN0b3IgPSBuZXcgQWN0b3Ioc2VsZiwgdGhpcyk7XG5cbiAgICAgICAgdGhpcy5sYXllckluZGV4ZXMgPSB7fTtcblxuICAgICAgICB0aGlzLndvcmtlclNvdXJjZVR5cGVzID0ge1xuICAgICAgICAgICAgdmVjdG9yOiBWZWN0b3JUaWxlV29ya2VyU291cmNlLFxuICAgICAgICAgICAgZ2VvanNvbjogR2VvSlNPTldvcmtlclNvdXJjZVxuICAgICAgICB9O1xuXG4gICAgICAgIC8vIFttYXBJZF1bc291cmNlVHlwZV1bc291cmNlTmFtZV0gPT4gd29ya2VyIHNvdXJjZSBpbnN0YW5jZVxuICAgICAgICB0aGlzLndvcmtlclNvdXJjZXMgPSB7fTtcbiAgICAgICAgdGhpcy5kZW1Xb3JrZXJTb3VyY2VzID0ge307XG5cbiAgICAgICAgdGhpcy5zZWxmLnJlZ2lzdGVyV29ya2VyU291cmNlID0gKG5hbWU6IHN0cmluZywgV29ya2VyU291cmNlOiBDbGFzczxXb3JrZXJTb3VyY2U+KSA9PiB7XG4gICAgICAgICAgICBpZiAodGhpcy53b3JrZXJTb3VyY2VUeXBlc1tuYW1lXSkge1xuICAgICAgICAgICAgICAgIHRocm93IG5ldyBFcnJvcihgV29ya2VyIHNvdXJjZSB3aXRoIG5hbWUgXCIke25hbWV9XCIgYWxyZWFkeSByZWdpc3RlcmVkLmApO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgdGhpcy53b3JrZXJTb3VyY2VUeXBlc1tuYW1lXSA9IFdvcmtlclNvdXJjZTtcbiAgICAgICAgfTtcblxuICAgICAgICB0aGlzLnNlbGYucmVnaXN0ZXJSVExUZXh0UGx1Z2luID0gKHJ0bFRleHRQbHVnaW46IHthcHBseUFyYWJpY1NoYXBpbmc6IEZ1bmN0aW9uLCBwcm9jZXNzQmlkaXJlY3Rpb25hbFRleHQ6IEZ1bmN0aW9uLCBwcm9jZXNzU3R5bGVkQmlkaXJlY3Rpb25hbFRleHQ/OiBGdW5jdGlvbn0pID0+IHtcbiAgICAgICAgICAgIGlmIChnbG9iYWxSVExUZXh0UGx1Z2luLmlzTG9hZGVkKCkpIHtcbiAgICAgICAgICAgICAgICB0aHJvdyBuZXcgRXJyb3IoJ1JUTCB0ZXh0IHBsdWdpbiBhbHJlYWR5IHJlZ2lzdGVyZWQuJyk7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBnbG9iYWxSVExUZXh0UGx1Z2luWydhcHBseUFyYWJpY1NoYXBpbmcnXSA9IHJ0bFRleHRQbHVnaW4uYXBwbHlBcmFiaWNTaGFwaW5nO1xuICAgICAgICAgICAgZ2xvYmFsUlRMVGV4dFBsdWdpblsncHJvY2Vzc0JpZGlyZWN0aW9uYWxUZXh0J10gPSBydGxUZXh0UGx1Z2luLnByb2Nlc3NCaWRpcmVjdGlvbmFsVGV4dDtcbiAgICAgICAgICAgIGdsb2JhbFJUTFRleHRQbHVnaW5bJ3Byb2Nlc3NTdHlsZWRCaWRpcmVjdGlvbmFsVGV4dCddID0gcnRsVGV4dFBsdWdpbi5wcm9jZXNzU3R5bGVkQmlkaXJlY3Rpb25hbFRleHQ7XG4gICAgICAgIH07XG4gICAgfVxuXG4gICAgc2V0TGF5ZXJzKG1hcElkOiBzdHJpbmcsIGxheWVyczogQXJyYXk8TGF5ZXJTcGVjaWZpY2F0aW9uPiwgY2FsbGJhY2s6IFdvcmtlclRpbGVDYWxsYmFjaykge1xuICAgICAgICB0aGlzLmdldExheWVySW5kZXgobWFwSWQpLnJlcGxhY2UobGF5ZXJzKTtcbiAgICAgICAgY2FsbGJhY2soKTtcbiAgICB9XG5cbiAgICB1cGRhdGVMYXllcnMobWFwSWQ6IHN0cmluZywgcGFyYW1zOiB7bGF5ZXJzOiBBcnJheTxMYXllclNwZWNpZmljYXRpb24+LCByZW1vdmVkSWRzOiBBcnJheTxzdHJpbmc+fSwgY2FsbGJhY2s6IFdvcmtlclRpbGVDYWxsYmFjaykge1xuICAgICAgICB0aGlzLmdldExheWVySW5kZXgobWFwSWQpLnVwZGF0ZShwYXJhbXMubGF5ZXJzLCBwYXJhbXMucmVtb3ZlZElkcyk7XG4gICAgICAgIGNhbGxiYWNrKCk7XG4gICAgfVxuXG4gICAgbG9hZFRpbGUobWFwSWQ6IHN0cmluZywgcGFyYW1zOiBXb3JrZXJUaWxlUGFyYW1ldGVycyAmIHt0eXBlOiBzdHJpbmd9LCBjYWxsYmFjazogV29ya2VyVGlsZUNhbGxiYWNrKSB7XG4gICAgICAgIGFzc2VydChwYXJhbXMudHlwZSk7XG4gICAgICAgIHRoaXMuZ2V0V29ya2VyU291cmNlKG1hcElkLCBwYXJhbXMudHlwZSwgcGFyYW1zLnNvdXJjZSkubG9hZFRpbGUocGFyYW1zLCBjYWxsYmFjayk7XG4gICAgfVxuXG4gICAgbG9hZERFTVRpbGUobWFwSWQ6IHN0cmluZywgcGFyYW1zOiBXb3JrZXJERU1UaWxlUGFyYW1ldGVycywgY2FsbGJhY2s6IFdvcmtlckRFTVRpbGVDYWxsYmFjaykge1xuICAgICAgICB0aGlzLmdldERFTVdvcmtlclNvdXJjZShtYXBJZCwgcGFyYW1zLnNvdXJjZSkubG9hZFRpbGUocGFyYW1zLCBjYWxsYmFjayk7XG4gICAgfVxuXG4gICAgcmVsb2FkVGlsZShtYXBJZDogc3RyaW5nLCBwYXJhbXM6IFdvcmtlclRpbGVQYXJhbWV0ZXJzICYge3R5cGU6IHN0cmluZ30sIGNhbGxiYWNrOiBXb3JrZXJUaWxlQ2FsbGJhY2spIHtcbiAgICAgICAgYXNzZXJ0KHBhcmFtcy50eXBlKTtcbiAgICAgICAgdGhpcy5nZXRXb3JrZXJTb3VyY2UobWFwSWQsIHBhcmFtcy50eXBlLCBwYXJhbXMuc291cmNlKS5yZWxvYWRUaWxlKHBhcmFtcywgY2FsbGJhY2spO1xuICAgIH1cblxuICAgIGFib3J0VGlsZShtYXBJZDogc3RyaW5nLCBwYXJhbXM6IFRpbGVQYXJhbWV0ZXJzICYge3R5cGU6IHN0cmluZ30sIGNhbGxiYWNrOiBXb3JrZXJUaWxlQ2FsbGJhY2spIHtcbiAgICAgICAgYXNzZXJ0KHBhcmFtcy50eXBlKTtcbiAgICAgICAgdGhpcy5nZXRXb3JrZXJTb3VyY2UobWFwSWQsIHBhcmFtcy50eXBlLCBwYXJhbXMuc291cmNlKS5hYm9ydFRpbGUocGFyYW1zLCBjYWxsYmFjayk7XG4gICAgfVxuXG4gICAgcmVtb3ZlVGlsZShtYXBJZDogc3RyaW5nLCBwYXJhbXM6IFRpbGVQYXJhbWV0ZXJzICYge3R5cGU6IHN0cmluZ30sIGNhbGxiYWNrOiBXb3JrZXJUaWxlQ2FsbGJhY2spIHtcbiAgICAgICAgYXNzZXJ0KHBhcmFtcy50eXBlKTtcbiAgICAgICAgdGhpcy5nZXRXb3JrZXJTb3VyY2UobWFwSWQsIHBhcmFtcy50eXBlLCBwYXJhbXMuc291cmNlKS5yZW1vdmVUaWxlKHBhcmFtcywgY2FsbGJhY2spO1xuICAgIH1cblxuICAgIHJlbW92ZURFTVRpbGUobWFwSWQ6IHN0cmluZywgcGFyYW1zOiBUaWxlUGFyYW1ldGVycykge1xuICAgICAgICB0aGlzLmdldERFTVdvcmtlclNvdXJjZShtYXBJZCwgcGFyYW1zLnNvdXJjZSkucmVtb3ZlVGlsZShwYXJhbXMpO1xuICAgIH1cblxuICAgIHJlbW92ZVNvdXJjZShtYXBJZDogc3RyaW5nLCBwYXJhbXM6IHtzb3VyY2U6IHN0cmluZ30gJiB7dHlwZTogc3RyaW5nfSwgY2FsbGJhY2s6IFdvcmtlclRpbGVDYWxsYmFjaykge1xuICAgICAgICBhc3NlcnQocGFyYW1zLnR5cGUpO1xuICAgICAgICBhc3NlcnQocGFyYW1zLnNvdXJjZSk7XG5cbiAgICAgICAgaWYgKCF0aGlzLndvcmtlclNvdXJjZXNbbWFwSWRdIHx8XG4gICAgICAgICAgICAhdGhpcy53b3JrZXJTb3VyY2VzW21hcElkXVtwYXJhbXMudHlwZV0gfHxcbiAgICAgICAgICAgICF0aGlzLndvcmtlclNvdXJjZXNbbWFwSWRdW3BhcmFtcy50eXBlXVtwYXJhbXMuc291cmNlXSkge1xuICAgICAgICAgICAgcmV0dXJuO1xuICAgICAgICB9XG5cbiAgICAgICAgY29uc3Qgd29ya2VyID0gdGhpcy53b3JrZXJTb3VyY2VzW21hcElkXVtwYXJhbXMudHlwZV1bcGFyYW1zLnNvdXJjZV07XG4gICAgICAgIGRlbGV0ZSB0aGlzLndvcmtlclNvdXJjZXNbbWFwSWRdW3BhcmFtcy50eXBlXVtwYXJhbXMuc291cmNlXTtcblxuICAgICAgICBpZiAod29ya2VyLnJlbW92ZVNvdXJjZSAhPT0gdW5kZWZpbmVkKSB7XG4gICAgICAgICAgICB3b3JrZXIucmVtb3ZlU291cmNlKHBhcmFtcywgY2FsbGJhY2spO1xuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgY2FsbGJhY2soKTtcbiAgICAgICAgfVxuICAgIH1cblxuICAgIC8qKlxuICAgICAqIExvYWQgYSB7QGxpbmsgV29ya2VyU291cmNlfSBzY3JpcHQgYXQgcGFyYW1zLnVybC4gIFRoZSBzY3JpcHQgaXMgcnVuXG4gICAgICogKHVzaW5nIGltcG9ydFNjcmlwdHMpIHdpdGggYHJlZ2lzdGVyV29ya2VyU291cmNlYCBpbiBzY29wZSwgd2hpY2ggaXMgYVxuICAgICAqIGZ1bmN0aW9uIHRha2luZyBgKG5hbWUsIHdvcmtlclNvdXJjZU9iamVjdClgLlxuICAgICAqICBAcHJpdmF0ZVxuICAgICAqL1xuICAgIGxvYWRXb3JrZXJTb3VyY2UobWFwOiBzdHJpbmcsIHBhcmFtczogeyB1cmw6IHN0cmluZyB9LCBjYWxsYmFjazogQ2FsbGJhY2s8dm9pZD4pIHtcbiAgICAgICAgdHJ5IHtcbiAgICAgICAgICAgIHRoaXMuc2VsZi5pbXBvcnRTY3JpcHRzKHBhcmFtcy51cmwpO1xuICAgICAgICAgICAgY2FsbGJhY2soKTtcbiAgICAgICAgfSBjYXRjaCAoZSkge1xuICAgICAgICAgICAgY2FsbGJhY2soZS50b1N0cmluZygpKTtcbiAgICAgICAgfVxuICAgIH1cblxuICAgIGxvYWRSVExUZXh0UGx1Z2luKG1hcDogc3RyaW5nLCBwbHVnaW5VUkw6IHN0cmluZywgY2FsbGJhY2s6IENhbGxiYWNrPHZvaWQ+KSB7XG4gICAgICAgIHRyeSB7XG4gICAgICAgICAgICBpZiAoIWdsb2JhbFJUTFRleHRQbHVnaW4uaXNMb2FkZWQoKSkge1xuICAgICAgICAgICAgICAgIHRoaXMuc2VsZi5pbXBvcnRTY3JpcHRzKHBsdWdpblVSTCk7XG4gICAgICAgICAgICAgICAgY2FsbGJhY2soZ2xvYmFsUlRMVGV4dFBsdWdpbi5pc0xvYWRlZCgpID9cbiAgICAgICAgICAgICAgICAgICAgbnVsbCA6XG4gICAgICAgICAgICAgICAgICAgIG5ldyBFcnJvcihgUlRMIFRleHQgUGx1Z2luIGZhaWxlZCB0byBpbXBvcnQgc2NyaXB0cyBmcm9tICR7cGx1Z2luVVJMfWApKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfSBjYXRjaCAoZSkge1xuICAgICAgICAgICAgY2FsbGJhY2soZS50b1N0cmluZygpKTtcbiAgICAgICAgfVxuICAgIH1cblxuICAgIGdldExheWVySW5kZXgobWFwSWQ6IHN0cmluZykge1xuICAgICAgICBsZXQgbGF5ZXJJbmRleGVzID0gdGhpcy5sYXllckluZGV4ZXNbbWFwSWRdO1xuICAgICAgICBpZiAoIWxheWVySW5kZXhlcykge1xuICAgICAgICAgICAgbGF5ZXJJbmRleGVzID0gdGhpcy5sYXllckluZGV4ZXNbbWFwSWRdID0gbmV3IFN0eWxlTGF5ZXJJbmRleCgpO1xuICAgICAgICB9XG4gICAgICAgIHJldHVybiBsYXllckluZGV4ZXM7XG4gICAgfVxuXG4gICAgZ2V0V29ya2VyU291cmNlKG1hcElkOiBzdHJpbmcsIHR5cGU6IHN0cmluZywgc291cmNlOiBzdHJpbmcpIHtcbiAgICAgICAgaWYgKCF0aGlzLndvcmtlclNvdXJjZXNbbWFwSWRdKVxuICAgICAgICAgICAgdGhpcy53b3JrZXJTb3VyY2VzW21hcElkXSA9IHt9O1xuICAgICAgICBpZiAoIXRoaXMud29ya2VyU291cmNlc1ttYXBJZF1bdHlwZV0pXG4gICAgICAgICAgICB0aGlzLndvcmtlclNvdXJjZXNbbWFwSWRdW3R5cGVdID0ge307XG5cbiAgICAgICAgaWYgKCF0aGlzLndvcmtlclNvdXJjZXNbbWFwSWRdW3R5cGVdW3NvdXJjZV0pIHtcbiAgICAgICAgICAgIC8vIHVzZSBhIHdyYXBwZWQgYWN0b3Igc28gdGhhdCB3ZSBjYW4gYXR0YWNoIGEgdGFyZ2V0IG1hcElkIHBhcmFtXG4gICAgICAgICAgICAvLyB0byBhbnkgbWVzc2FnZXMgaW52b2tlZCBieSB0aGUgV29ya2VyU291cmNlXG4gICAgICAgICAgICBjb25zdCBhY3RvciA9IHtcbiAgICAgICAgICAgICAgICBzZW5kOiAodHlwZSwgZGF0YSwgY2FsbGJhY2spID0+IHtcbiAgICAgICAgICAgICAgICAgICAgdGhpcy5hY3Rvci5zZW5kKHR5cGUsIGRhdGEsIGNhbGxiYWNrLCBtYXBJZCk7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfTtcblxuICAgICAgICAgICAgdGhpcy53b3JrZXJTb3VyY2VzW21hcElkXVt0eXBlXVtzb3VyY2VdID0gbmV3ICh0aGlzLndvcmtlclNvdXJjZVR5cGVzW3R5cGVdOiBhbnkpKChhY3RvcjogYW55KSwgdGhpcy5nZXRMYXllckluZGV4KG1hcElkKSk7XG4gICAgICAgIH1cblxuICAgICAgICByZXR1cm4gdGhpcy53b3JrZXJTb3VyY2VzW21hcElkXVt0eXBlXVtzb3VyY2VdO1xuICAgIH1cblxuICAgIGdldERFTVdvcmtlclNvdXJjZShtYXBJZDogc3RyaW5nLCBzb3VyY2U6IHN0cmluZykge1xuICAgICAgICBpZiAoIXRoaXMuZGVtV29ya2VyU291cmNlc1ttYXBJZF0pXG4gICAgICAgICAgICB0aGlzLmRlbVdvcmtlclNvdXJjZXNbbWFwSWRdID0ge307XG5cbiAgICAgICAgaWYgKCF0aGlzLmRlbVdvcmtlclNvdXJjZXNbbWFwSWRdW3NvdXJjZV0pIHtcbiAgICAgICAgICAgIHRoaXMuZGVtV29ya2VyU291cmNlc1ttYXBJZF1bc291cmNlXSA9IG5ldyBSYXN0ZXJERU1UaWxlV29ya2VyU291cmNlKCk7XG4gICAgICAgIH1cblxuICAgICAgICByZXR1cm4gdGhpcy5kZW1Xb3JrZXJTb3VyY2VzW21hcElkXVtzb3VyY2VdO1xuICAgIH1cbn1cblxuLyogZ2xvYmFsIHNlbGYsIFdvcmtlckdsb2JhbFNjb3BlICovXG5pZiAodHlwZW9mIFdvcmtlckdsb2JhbFNjb3BlICE9PSAndW5kZWZpbmVkJyAmJlxuICAgIHR5cGVvZiBzZWxmICE9PSAndW5kZWZpbmVkJyAmJlxuICAgIHNlbGYgaW5zdGFuY2VvZiBXb3JrZXJHbG9iYWxTY29wZSkge1xuICAgIG5ldyBXb3JrZXIoc2VsZik7XG59XG4iXSwibmFtZXMiOlsic3RyaW5naWZ5Iiwib2JqIiwiY29uc3QiLCJ0eXBlIiwiSlNPTiIsIkFycmF5IiwiaXNBcnJheSIsImxldCIsInN0ciIsImtleXMiLCJPYmplY3QiLCJzb3J0IiwiaSIsImxlbmd0aCIsImdldEtleSIsImxheWVyIiwia2V5IiwicmVmUHJvcGVydGllcyIsIlN0eWxlTGF5ZXJJbmRleCIsImxheWVyQ29uZmlncyIsInRoaXMiLCJyZXBsYWNlIiwiY2hlY2tNYXhBbmdsZSIsImxpbmUiLCJhbmNob3IiLCJsYWJlbExlbmd0aCIsIndpbmRvd1NpemUiLCJtYXhBbmdsZSIsInVuZGVmaW5lZCIsInNlZ21lbnQiLCJwIiwiaW5kZXgiLCJhbmNob3JEaXN0YW5jZSIsImRpc3QiLCJyZWNlbnRDb3JuZXJzIiwicmVjZW50QW5nbGVEZWx0YSIsInByZXYiLCJjdXJyZW50IiwibmV4dCIsImFuZ2xlRGVsdGEiLCJhbmdsZVRvIiwiTWF0aCIsImFicyIsIlBJIiwicHVzaCIsImRpc3RhbmNlIiwic2hpZnQiLCJnZXRMaW5lTGVuZ3RoIiwibGluZUxlbmd0aCIsImsiLCJnZXRBbmdsZVdpbmRvd1NpemUiLCJzaGFwZWRUZXh0IiwiZ2x5cGhTaXplIiwiYm94U2NhbGUiLCJnZXRTaGFwZWRMYWJlbExlbmd0aCIsInNoYXBlZEljb24iLCJtYXgiLCJyaWdodCIsImxlZnQiLCJnZXRDZW50ZXJBbmNob3IiLCJhbmdsZVdpbmRvd1NpemUiLCJwcmV2RGlzdGFuY2UiLCJjZW50ZXJEaXN0YW5jZSIsImEiLCJiIiwic2VnbWVudERpc3RhbmNlIiwidCIsIngiLCJpbnRlcnBvbGF0ZSIsInkiLCJBbmNob3IiLCJfcm91bmQiLCJnZXRBbmNob3JzIiwic3BhY2luZyIsIm92ZXJzY2FsaW5nIiwidGlsZUV4dGVudCIsInNoYXBlZExhYmVsTGVuZ3RoIiwiaXNMaW5lQ29udGludWVkIiwicmVzYW1wbGUiLCJvZmZzZXQiLCJwbGFjZUF0TWlkZGxlIiwiaGFsZkxhYmVsTGVuZ3RoIiwibWFya2VkRGlzdGFuY2UiLCJhbmNob3JzIiwic2VnbWVudERpc3QiLCJhbmdsZSIsIl9sYXllckNvbmZpZ3MiLCJfbGF5ZXJzIiwidXBkYXRlIiwicmVtb3ZlZElkcyIsImxheWVyQ29uZmlnIiwiaWQiLCJjcmVhdGVTdHlsZUxheWVyIiwiX2ZlYXR1cmVGaWx0ZXIiLCJmZWF0dXJlRmlsdGVyIiwiZmlsdGVyIiwiZmFtaWxpZXNCeVNvdXJjZSIsImxheWVycyIsImdyb3VwcyIsImdyb3VwIiwicmVzdWx0IiwiZ3JvdXBCeUxheW91dCIsInZhbHVlcyIsIm1hcCIsInZpc2liaWxpdHkiLCJzb3VyY2VJZCIsInNvdXJjZSIsInNvdXJjZUdyb3VwIiwic291cmNlTGF5ZXJJZCIsInNvdXJjZUxheWVyIiwic291cmNlTGF5ZXJGYW1pbGllcyIsIkNvbGxpc2lvbkZlYXR1cmUiLCJjb2xsaXNpb25Cb3hBcnJheSIsImZlYXR1cmVJbmRleCIsInNvdXJjZUxheWVySW5kZXgiLCJidWNrZXRJbmRleCIsInNoYXBlZCIsInBhZGRpbmciLCJhbGlnbkxpbmUiLCJyb3RhdGUiLCJ5MSIsInRvcCIsInkyIiwiYm90dG9tIiwieDEiLCJ4MiIsImJveFN0YXJ0SW5kZXgiLCJoZWlnaHQiLCJfYWRkTGluZUNvbGxpc2lvbkNpcmNsZXMiLCJ0bCIsIlBvaW50IiwidHIiLCJibCIsImJyIiwicm90YXRlUmFkaWFucyIsIl9yb3RhdGUiLCJtaW4iLCJlbXBsYWNlQmFjayIsImJveEVuZEluZGV4IiwiYm94U2l6ZSIsInN0ZXAiLCJuQm94ZXMiLCJmbG9vciIsIm92ZXJzY2FsaW5nUGFkZGluZ0ZhY3RvciIsImxvZyIsIkxOMiIsIm5QaXRjaFBhZGRpbmdCb3hlcyIsImZpcnN0Qm94T2Zmc2V0IiwibGFiZWxTdGFydERpc3RhbmNlIiwicGFkZGluZ1N0YXJ0RGlzdGFuY2UiLCJzZWdtZW50TGVuZ3RoIiwiYm94T2Zmc2V0IiwiYm94RGlzdGFuY2VUb0FuY2hvciIsInNlZ21lbnRCb3hEaXN0YW5jZSIsInAwIiwiYm94QW5jaG9yUG9pbnQiLCJzdWIiLCJfdW5pdCIsIl9tdWx0IiwiX2FkZCIsInBhZGRlZEFuY2hvckRpc3RhbmNlIiwiVGlueVF1ZXVlIiwiZGF0YSIsImNvbXBhcmUiLCJkZWZhdWx0Q29tcGFyZSIsIl9kb3duIiwicG9seWdvbiIsImFyZWEiLCJwb2ludHMiLCJsZW4iLCJqIiwiZiIsIkNlbGwiLCJjb21wYXJlTWF4IiwiaCIsImQiLCJpbnNpZGUiLCJtaW5EaXN0U3EiLCJJbmZpbml0eSIsInJpbmciLCJkaXN0VG9TZWdtZW50U3F1YXJlZCIsInNxcnQiLCJwb2ludFRvUG9seWdvbkRpc3QiLCJTUVJUMiIsInByb3RvdHlwZSIsIml0ZW0iLCJfdXAiLCJwb3AiLCJwZWVrIiwicG9zIiwicGFyZW50IiwiaGFsZkxlbmd0aCIsImJlc3QiLCJtb2R1bGUiLCJzZWVkIiwicmVtYWluZGVyIiwiYnl0ZXMiLCJoMSIsImgxYiIsImMxIiwiYzIiLCJrMSIsImNoYXJDb2RlQXQiLCJsIiwibXVybXVyMyIsIm11cm11cjIiLCJwZXJmb3JtU3ltYm9sTGF5b3V0IiwiYnVja2V0IiwiZ2x5cGhNYXAiLCJnbHlwaFBvc2l0aW9ucyIsImltYWdlTWFwIiwiaW1hZ2VQb3NpdGlvbnMiLCJzaG93Q29sbGlzaW9uQm94ZXMiLCJjcmVhdGVBcnJheXMiLCJ0aWxlU2l6ZSIsInRpbGVQaXhlbFJhdGlvIiwiRVhURU5UIiwiY29tcGFyZVRleHQiLCJpY29uc05lZWRMaW5lYXIiLCJsYXlvdXQiLCJ1bmV2YWx1YXRlZExheW91dFZhbHVlcyIsIl91bmV2YWx1YXRlZExheW91dCIsIl92YWx1ZXMiLCJzaXplcyIsInRleHRTaXplRGF0YSIsImZ1bmN0aW9uVHlwZSIsInpvb21SYW5nZSIsImNvbXBvc2l0ZVRleHRTaXplcyIsInBvc3NpYmx5RXZhbHVhdGUiLCJFdmFsdWF0aW9uUGFyYW1ldGVycyIsImljb25TaXplRGF0YSIsImNvbXBvc2l0ZUljb25TaXplcyIsImxheW91dFRleHRTaXplIiwiem9vbSIsImxheW91dEljb25TaXplIiwidGV4dE1heFNpemUiLCJsaW5lSGVpZ2h0IiwiZ2V0IiwidGV4dEFsb25nTGluZSIsImtlZXBVcHJpZ2h0IiwiZmVhdHVyZXMiLCJmZWF0dXJlIiwiZm9udHN0YWNrIiwiZXZhbHVhdGUiLCJqb2luIiwiZ2x5cGhQb3NpdGlvbk1hcCIsInNoYXBlZFRleHRPcmllbnRhdGlvbnMiLCJ0ZXh0IiwidW5mb3JtYXR0ZWRUZXh0IiwiRm9ybWF0dGVkIiwidG9TdHJpbmciLCJ0ZXh0T2Zmc2V0Iiwic3BhY2luZ0lmQWxsb3dlZCIsImFsbG93c0xldHRlclNwYWNpbmciLCJ0ZXh0QW5jaG9yIiwidGV4dEp1c3RpZnkiLCJtYXhXaWR0aCIsImhvcml6b250YWwiLCJzaGFwZVRleHQiLCJXcml0aW5nTW9kZSIsImFsbG93c1ZlcnRpY2FsV3JpdGluZ01vZGUiLCJ2ZXJ0aWNhbCIsImljb24iLCJpbWFnZSIsInNoYXBlSWNvbiIsInNkZkljb25zIiwic2RmIiwid2Fybk9uY2UiLCJwaXhlbFJhdGlvIiwiY29uc3RhbnRPciIsImFkZEZlYXR1cmUiLCJnZW5lcmF0ZUNvbGxpc2lvbkRlYnVnQnVmZmVycyIsImljb25PZmZzZXQiLCJmb250U2NhbGUiLCJ0ZXh0Qm94U2NhbGUiLCJ0ZXh0TWF4Qm94U2NhbGUiLCJpY29uQm94U2NhbGUiLCJzeW1ib2xNaW5EaXN0YW5jZSIsInRleHRQYWRkaW5nIiwiaWNvblBhZGRpbmciLCJ0ZXh0TWF4QW5nbGUiLCJpY29uQWxvbmdMaW5lIiwic3ltYm9sUGxhY2VtZW50IiwidGV4dFJlcGVhdERpc3RhbmNlIiwiYWRkU3ltYm9sQXRBbmNob3IiLCJ0ZXh0Q29sbGlzaW9uRmVhdHVyZSIsImljb25Db2xsaXNpb25GZWF0dXJlIiwibGluZUFycmF5IiwiYWRkVG9MaW5lVmVydGV4QXJyYXkiLCJudW1JY29uVmVydGljZXMiLCJudW1HbHlwaFZlcnRpY2VzIiwibnVtVmVydGljYWxHbHlwaFZlcnRpY2VzIiwicGxhY2VkVGV4dFN5bWJvbEluZGljZXMiLCJ0ZXh0Um90YXRlIiwiYWRkVGV4dFZlcnRpY2VzIiwiaG9yaXpvbnRhbE9ubHkiLCJ0ZXh0Qm94U3RhcnRJbmRleCIsInRleHRCb3hFbmRJbmRleCIsImljb25RdWFkcyIsImFsb25nTGluZSIsImljb25XaWR0aCIsImljb25IZWlnaHQiLCJzaXplIiwidGV4dExlZnQiLCJ0ZXh0UmlnaHQiLCJ0ZXh0VG9wIiwidGV4dFdpZHRoIiwidGV4dEhlaWdodCIsInBhZFQiLCJwYWRSIiwicGFkQiIsInBhZEwiLCJvZmZzZXRZIiwib2Zmc2V0WCIsIndpZHRoIiwic2luIiwiY29zIiwibWF0cml4IiwiX21hdE11bHQiLCJ0ZXgiLCJwYWRkZWRSZWN0Iiwid3JpdGluZ01vZGUiLCJnbHlwaE9mZnNldCIsImdldEljb25RdWFkcyIsImljb25Sb3RhdGUiLCJzaXplRGF0YSIsIlNJWkVfUEFDS19GQUNUT1IiLCJNQVhfUEFDS0VEX1NJWkUiLCJsYXllcklkcyIsImFkZFN5bWJvbHMiLCJsaW5lU3RhcnRJbmRleCIsImljb25Cb3hTdGFydEluZGV4IiwiaWNvbkJveEVuZEluZGV4IiwiZ2x5cGhPZmZzZXRBcnJheSIsIlN5bWJvbEJ1Y2tldCIsIk1BWF9HTFlQSFMiLCJzeW1ib2xJbnN0YW5jZXMiLCJhZGRTeW1ib2wiLCJsaW5lcyIsImNsaXBwZWRMaW5lcyIsImNsaXBwZWRMaW5lIiwicDEiLCJlcXVhbHMiLCJjbGlwTGluZSIsImdlb21ldHJ5IiwiYW5jaG9ySXNUb29DbG9zZSIsImNsYXNzaWZ5UmluZ3MiLCJwb2kiLCJmaW5kUG9sZU9mSW5hY2Nlc3NpYmlsaXR5IiwicG9pbnQiLCJnbHlwaFF1YWRzIiwic2hhcGluZyIsInBvc2l0aW9ucyIsInBvc2l0aW9uZWRHbHlwaHMiLCJxdWFkcyIsInBvc2l0aW9uZWRHbHlwaCIsImZvbnRTdGFjayIsImdseXBoIiwicmVjdCIsInJlY3RCdWZmZXIiLCJHTFlQSF9QQkZfQk9SREVSIiwiaGFsZkFkdmFuY2UiLCJtZXRyaWNzIiwiYWR2YW5jZSIsInNjYWxlIiwiYnVpbHRJbk9mZnNldCIsInciLCJjZW50ZXIiLCJ2ZXJ0aWNhbFJvdGF0aW9uIiwieE9mZnNldENvcnJlY3Rpb24iLCJfcm90YXRlQXJvdW5kIiwiZ2V0R2x5cGhRdWFkcyIsInBsYWNlZFN5bWJvbEFycmF5IiwicmVwZWF0RGlzdGFuY2UiLCJvdGhlckFuY2hvcnMiLCJHbHlwaEF0bGFzIiwic3RhY2tzIiwiYmlucyIsInN0YWNrIiwiZ2x5cGhzIiwic3RhY2tQb3NpdGlvbnMiLCJzcmMiLCJiaXRtYXAiLCJiaW4iLCJwb3RwYWNrIiwiQWxwaGFJbWFnZSIsImNvcHkiLCJyZWdpc3RlciIsIldvcmtlclRpbGUiLCJwYXJhbXMiLCJ0aWxlSUQiLCJPdmVyc2NhbGVkVGlsZUlEIiwib3ZlcnNjYWxlZFoiLCJ3cmFwIiwiY2Fub25pY2FsIiwieiIsInVpZCIsIm92ZXJzY2FsZUZhY3RvciIsImNvbGxlY3RSZXNvdXJjZVRpbWluZyIsInJlY2FsY3VsYXRlTGF5ZXJzIiwicGFyYW1ldGVycyIsInJlY2FsY3VsYXRlIiwicGFyc2UiLCJsYXllckluZGV4IiwiYWN0b3IiLCJjYWxsYmFjayIsInN0YXR1cyIsIkNvbGxpc2lvbkJveEFycmF5Iiwic291cmNlTGF5ZXJDb2RlciIsIkRpY3Rpb25hcnlDb2RlciIsIkZlYXR1cmVJbmRleCIsImJ1Y2tldExheWVySURzIiwiZXJyb3IiLCJpY29uTWFwIiwicGF0dGVybk1hcCIsImJ1Y2tldHMiLCJvcHRpb25zIiwiaWNvbkRlcGVuZGVuY2llcyIsInBhdHRlcm5EZXBlbmRlbmNpZXMiLCJnbHlwaERlcGVuZGVuY2llcyIsImxheWVyRmFtaWxpZXMiLCJ2ZXJzaW9uIiwiZW5jb2RlIiwiZmFtaWx5IiwibWluem9vbSIsIm1heHpvb20iLCJjcmVhdGVCdWNrZXQiLCJzb3VyY2VJRCIsInBvcHVsYXRlIiwibWFwT2JqZWN0IiwiTnVtYmVyIiwic2VuZCIsImVyciIsIm1heWJlUHJlcGFyZSIsImNhbGwiLCJpY29ucyIsInBhdHRlcm5zIiwiZ2x5cGhBdGxhcyIsImltYWdlQXRsYXMiLCJJbWFnZUF0bGFzIiwiaWNvblBvc2l0aW9ucyIsImhhc1BhdHRlcm4iLCJMaW5lQnVja2V0IiwiRmlsbEJ1Y2tldCIsIkZpbGxFeHRydXNpb25CdWNrZXQiLCJhZGRGZWF0dXJlcyIsInBhdHRlcm5Qb3NpdGlvbnMiLCJpc0VtcHR5IiwiZ2x5cGhBdGxhc0ltYWdlIiwicGVyZm9ybWFuY2VFeGlzdHMiLCJwZXJmb3JtYW5jZSIsIndyYXBwZXIiLCJ1cmwiLCJnZXRFbnRyaWVzQnlOYW1lIiwibmFtZSIsIm1hcmsiLCJzdGFydE1hcmsiLCJlbmRNYXJrIiwibWVhc3VyZSIsImNsZWFyTWFya3MiLCJjbGVhck1lYXN1cmVzIiwiUGVyZm9ybWFuY2UiLCJyZXF1ZXN0IiwiX21hcmtzIiwic3RhcnQiLCJlbmQiLCJsb2FkVmVjdG9yVGlsZSIsImdldEFycmF5QnVmZmVyIiwicmVzcG9uc2UiLCJ2ZWN0b3JUaWxlIiwidnQiLCJWZWN0b3JUaWxlIiwiUHJvdG9idWYiLCJyYXdEYXRhIiwiY2FjaGVDb250cm9sIiwiZXhwaXJlcyIsImNhbmNlbCIsImZpbmlzaCIsInJlc291cmNlVGltaW5nRGF0YSIsIlZlY3RvclRpbGVXb3JrZXJTb3VyY2UiLCJsb2FkVmVjdG9yRGF0YSIsImxvYWRpbmciLCJsb2FkZWQiLCJsb2FkVGlsZSIsInBlcmYiLCJ3b3JrZXJUaWxlIiwiYWJvcnQiLCJyYXdUaWxlRGF0YSIsInJlc291cmNlVGltaW5nIiwiZXh0ZW5kIiwic2xpY2UiLCJ0aGlzJDEiLCJyZWxvYWRUaWxlIiwidnRTb3VyY2UiLCJkb25lIiwicmVsb2FkQ2FsbGJhY2siLCJhYm9ydFRpbGUiLCJyZW1vdmVUaWxlIiwiUmFzdGVyREVNVGlsZVdvcmtlclNvdXJjZSIsImVuY29kaW5nIiwicmF3SW1hZ2VEYXRhIiwiZGVtIiwiREVNRGF0YSIsInBvbHlnb25BcmVhIiwiY29vcmRzIiwicmluZ0FyZWEiLCJwMiIsImxvd2VySW5kZXgiLCJtaWRkbGVJbmRleCIsInVwcGVySW5kZXgiLCJjb29yZHNMZW5ndGgiLCJyYWQiLCJ3Z3M4NCIsIlJBRElVUyIsIl8iLCJjb29yZGluYXRlcyIsImdlb21ldHJpZXMiLCJyZXdpbmQiLCJnaiIsIm91dGVyIiwiY3VycnlPdXRlciIsImNvcnJlY3RSaW5ncyIsImNvcnJlY3QiLCJ3aW5kIiwiZGlyIiwiZ2VvanNvbkFyZWEiLCJjdyIsInJldmVyc2UiLCJ0b0dlb0pTT04iLCJtdnQiLCJWZWN0b3JUaWxlRmVhdHVyZSIsIkZlYXR1cmVXcmFwcGVyIiwiX2ZlYXR1cmUiLCJleHRlbnQiLCJwcm9wZXJ0aWVzIiwidGFncyIsImlzTmFOIiwicGFyc2VJbnQiLCJsb2FkR2VvbWV0cnkiLCJuZXdSaW5nIiwiR2VvSlNPTldyYXBwZXIiLCJfZ2VvanNvblRpbGVMYXllciIsIl9mZWF0dXJlcyIsInJlcXVpcmUkJDAiLCJyYXdHZW9tZXRyeSIsInJpbmdzIiwiYmJveCIsImNvb3JkIiwiZnJvbVZlY3RvclRpbGVKcyIsInRpbGUiLCJvdXQiLCJQYmYiLCJwYmYiLCJ3cml0ZU1lc3NhZ2UiLCJ3cml0ZUxheWVyIiwid3JpdGVUaWxlIiwid3JpdGVWYXJpbnRGaWVsZCIsIndyaXRlU3RyaW5nRmllbGQiLCJjb250ZXh0Iiwia2V5Y2FjaGUiLCJ2YWx1ZWNhY2hlIiwid3JpdGVGZWF0dXJlIiwid3JpdGVWYWx1ZSIsIndyaXRlUHJvcGVydGllcyIsIndyaXRlR2VvbWV0cnkiLCJrZXlJbmRleCIsIndyaXRlVmFyaW50IiwidmFsdWUiLCJ2YWx1ZUtleSIsInZhbHVlSW5kZXgiLCJjb21tYW5kIiwiY21kIiwiemlnemFnIiwibnVtIiwiciIsImNvdW50IiwibGluZUNvdW50IiwiZHgiLCJkeSIsIndyaXRlQm9vbGVhbkZpZWxkIiwid3JpdGVEb3VibGVGaWVsZCIsIndyaXRlU1ZhcmludEZpZWxkIiwic29ydEtEIiwiaWRzIiwibm9kZVNpemUiLCJkZXB0aCIsIm0iLCJzZWxlY3QiLCJpbmMiLCJuIiwicyIsImV4cCIsInNkIiwibmV3TGVmdCIsIm5ld1JpZ2h0Iiwic3dhcEl0ZW0iLCJzd2FwIiwiYXJyIiwidG1wIiwic3FEaXN0IiwiYXgiLCJheSIsImJ4IiwiYnkiLCJrZGJ1c2giLCJnZXRYIiwiZ2V0WSIsIkFycmF5VHlwZSIsIktEQnVzaCIsImRlZmF1bHRHZXRYIiwiZGVmYXVsdEdldFkiLCJTdXBlckNsdXN0ZXIiLCJjcmVhdGUiLCJ0cmVlcyIsIm1heFpvb20iLCJjcmVhdGVDbHVzdGVyIiwibnVtUG9pbnRzIiwicGFyZW50SWQiLCJnZXRDbHVzdGVySlNPTiIsImNsdXN0ZXIiLCJnZXRDbHVzdGVyUHJvcGVydGllcyIsImF0YW4iLCJhYmJyZXYiLCJyb3VuZCIsImNsdXN0ZXJfaWQiLCJwb2ludF9jb3VudCIsInBvaW50X2NvdW50X2FiYnJldmlhdGVkIiwibG5nWCIsImxuZyIsImxhdFkiLCJsYXQiLCJkZXN0IiwiZ2V0U3FTZWdEaXN0IiwicHgiLCJweSIsImNyZWF0ZUZlYXR1cmUiLCJnZW9tIiwibWluWCIsIm1pblkiLCJtYXhYIiwibWF4WSIsImNhbGNMaW5lQkJveCIsImNhbGNCQm94IiwiY29udmVydEZlYXR1cmUiLCJnZW9qc29uIiwidG9sZXJhbmNlIiwicG93IiwicHJvbW90ZUlkIiwiZ2VuZXJhdGVJZCIsImNvbnZlcnRQb2ludCIsImNvbnZlcnRMaW5lIiwibGluZU1ldHJpY3MiLCJjb252ZXJ0TGluZXMiLCJFcnJvciIsInByb2plY3RYIiwicHJvamVjdFkiLCJpc1BvbHlnb24iLCJ4MCIsInkwIiwibGFzdCIsInNpbXBsaWZ5IiwiZmlyc3QiLCJzcVRvbGVyYW5jZSIsIm1heFNxRGlzdCIsIm1pZCIsIm1pblBvc1RvTWlkIiwicG9zVG9NaWQiLCJjbGlwIiwiazIiLCJheGlzIiwibWluQWxsIiwibWF4QWxsIiwiY2xpcHBlZCIsIm5ld0dlb21ldHJ5IiwiY2xpcFBvaW50cyIsImNsaXBMaW5lcyIsIm5ld0dlb20iLCJ0cmFja01ldHJpY3MiLCJzZWdMZW4iLCJuZXdTbGljZSIsImludGVyc2VjdCIsImludGVyc2VjdFgiLCJpbnRlcnNlY3RZIiwiYXoiLCJleGl0ZWQiLCJhZGRQb2ludCIsInNoaWZ0RmVhdHVyZUNvb3JkcyIsIm5ld0ZlYXR1cmVzIiwic2hpZnRDb29yZHMiLCJuZXdQb2x5Z29uIiwibmV3UG9pbnRzIiwidHJhbnNmb3JtVGlsZSIsInRyYW5zZm9ybWVkIiwiejIiLCJ0eCIsInR5IiwidHJhbnNmb3JtUG9pbnQiLCJjcmVhdGVUaWxlIiwibnVtU2ltcGxpZmllZCIsIm51bUZlYXR1cmVzIiwic2ltcGxpZmllZCIsImFkZExpbmUiLCJ0aWxlRmVhdHVyZSIsImlzT3V0ZXIiLCJjbG9ja3dpc2UiLCJHZW9KU09OVlQiLCJkZWJ1ZyIsImNvbnNvbGUiLCJ0aW1lIiwiY29udmVydCIsInRpbGVzIiwidGlsZUNvb3JkcyIsInRpbWVFbmQiLCJpbmRleE1heFpvb20iLCJpbmRleE1heFBvaW50cyIsInN0YXRzIiwidG90YWwiLCJidWZmZXIiLCJtZXJnZWQiLCJjb25jYXQiLCJzcGxpdFRpbGUiLCJ0b0lEIiwibG9hZEdlb0pTT05UaWxlIiwiX2dlb0pTT05JbmRleCIsImdlb0pTT05UaWxlIiwiZ2V0VGlsZSIsImdlb2pzb25XcmFwcGVyIiwidnRwYmYiLCJieXRlT2Zmc2V0IiwiYnl0ZUxlbmd0aCIsIlVpbnQ4QXJyYXkiLCJyYW5nZSIsIm5leHRBeGlzIiwid2l0aGluIiwicXgiLCJxeSIsInIyIiwibWluWm9vbSIsInJhZGl1cyIsInJlZHVjZSIsImluaXRpYWwiLCJwcm9wcyIsImxvYWQiLCJ0aW1lcklkIiwiY2x1c3RlcnMiLCJGbG9hdDMyQXJyYXkiLCJub3ciLCJEYXRlIiwiX2NsdXN0ZXIiLCJnZXRDbHVzdGVycyIsIm1pbkxuZyIsIm1pbkxhdCIsIm1heExuZyIsIm1heExhdCIsImVhc3Rlcm5IZW0iLCJ3ZXN0ZXJuSGVtIiwidHJlZSIsIl9saW1pdFpvb20iLCJjIiwiZ2V0Q2hpbGRyZW4iLCJjbHVzdGVySWQiLCJvcmlnaW5JZCIsIm9yaWdpblpvb20iLCJlcnJvck1zZyIsIm9yaWdpbiIsImNoaWxkcmVuIiwiZ2V0TGVhdmVzIiwibGltaXQiLCJsZWF2ZXMiLCJfYXBwZW5kTGVhdmVzIiwiX2FkZFRpbGVGZWF0dXJlcyIsImdldENsdXN0ZXJFeHBhbnNpb25ab29tIiwiY2x1c3Rlclpvb20iLCJza2lwcGVkIiwibmVpZ2hib3JJZHMiLCJ3eCIsInd5IiwiY2x1c3RlclByb3BlcnRpZXMiLCJfYWNjdW11bGF0ZSIsIm51bVBvaW50czIiLCJjeiIsImN4IiwiY3kiLCJrMyIsIms0IiwidHJhbnNmb3JtIiwiejAiLCJHZW9KU09OV29ya2VyU291cmNlIiwibG9hZEdlb0pTT04iLCJzdXBlciIsImxvYWREYXRhIiwiX3BlbmRpbmdDYWxsYmFjayIsImFiYW5kb25lZCIsIl9wZW5kaW5nTG9hZERhdGFQYXJhbXMiLCJfc3RhdGUiLCJfbG9hZERhdGEiLCJzdXBlcmNsdXN0ZXJPcHRpb25zIiwiZ2VvanNvbnZ0IiwiZ2VvanNvblZ0T3B0aW9ucyIsImNvYWxlc2NlIiwiZ2V0SlNPTiIsImUiLCJyZW1vdmVTb3VyY2UiLCJnZXRDbHVzdGVyQ2hpbGRyZW4iLCJnZXRDbHVzdGVyTGVhdmVzIiwiV29ya2VyIiwic2VsZiIsIkFjdG9yIiwibGF5ZXJJbmRleGVzIiwid29ya2VyU291cmNlVHlwZXMiLCJ2ZWN0b3IiLCJ3b3JrZXJTb3VyY2VzIiwiZGVtV29ya2VyU291cmNlcyIsInJlZ2lzdGVyV29ya2VyU291cmNlIiwiV29ya2VyU291cmNlIiwicmVnaXN0ZXJSVExUZXh0UGx1Z2luIiwicnRsVGV4dFBsdWdpbiIsImdsb2JhbFJUTFRleHRQbHVnaW4iLCJpc0xvYWRlZCIsImFwcGx5QXJhYmljU2hhcGluZyIsInByb2Nlc3NCaWRpcmVjdGlvbmFsVGV4dCIsInByb2Nlc3NTdHlsZWRCaWRpcmVjdGlvbmFsVGV4dCIsInNldExheWVycyIsIm1hcElkIiwiZ2V0TGF5ZXJJbmRleCIsInVwZGF0ZUxheWVycyIsImdldFdvcmtlclNvdXJjZSIsImxvYWRERU1UaWxlIiwiZ2V0REVNV29ya2VyU291cmNlIiwicmVtb3ZlREVNVGlsZSIsIndvcmtlciIsImxvYWRXb3JrZXJTb3VyY2UiLCJpbXBvcnRTY3JpcHRzIiwibG9hZFJUTFRleHRQbHVnaW4iLCJwbHVnaW5VUkwiLCJXb3JrZXJHbG9iYWxTY29wZSJdLCJtYXBwaW5ncyI6ImdEQUdBLFNBQVNBLEVBQVVDLEdBQ2ZDLElBQU1DLFNBQWNGLEVBQ3BCLEdBQWEsV0FBVEUsR0FBOEIsWUFBVEEsR0FBK0IsV0FBVEEsR0FBM0NBLE1BQWdFRixFQUNoRSxPQUFPRyxLQUFLSixVQUFVQyxHQUUxQixHQUFJSSxNQUFNQyxRQUFRTCxHQUFNLENBRXBCLElBREFNLElBQUlDLEVBQU0sVUFDUVAsa0JBQUssQ0FDbkJPLEdBQVVSLFlBRWQsT0FBVVEsTUFNZCxJQUhBTixJQUFNTyxFQUFPQyxPQUFPRCxLQUFLUixHQUFLVSxPQUUxQkgsRUFBTSxJQUNESSxFQUFJLEVBQUdBLEVBQUlILEVBQUtJLE9BQVFELElBQzdCSixHQUFVSixLQUFLSixVQUFVUyxFQUFLRyxRQUFPWixFQUFVQyxFQUFJUSxFQUFLRyxTQUU1RCxPQUFVSixNQUdkLFNBQVNNLEVBQU9DLEdBRVosSUFEQVIsSUFBSVMsRUFBTSxTQUNNQyxnQ0FBZSxDQUMzQkQsR0FBTyxJQUFJaEIsRUFBVWUsU0FFekIsT0FBT0MsRUNmWCxJQUFNRSxFQU1GLFNBQVlDLEdBQ0pBLEdBQ0FDLEtBQUtDLFFBQVFGLElDSHpCLFNBQVNHLEVBQWNDLEVBQW9CQyxFQUFnQkMsRUFBcUJDLEVBQW9CQyxHQUdoRyxRQUF1QkMsSUFBbkJKLEVBQU9LLFFBQXVCLE9BQU8sRUFPekMsSUFMQXRCLElBQUl1QixFQUFJTixFQUNKTyxFQUFRUCxFQUFPSyxRQUFVLEVBQ3pCRyxFQUFpQixFQUdkQSxHQUFrQlAsRUFBYyxHQUFHLENBSXRDLEtBSEFNLEVBR1ksRUFBRyxPQUFPLEVBRXRCQyxHQUFrQlQsRUFBS1EsR0FBT0UsS0FBS0gs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
