'use strict'; // code generated by pbf v3.1.0

// TYLocatingBeaconPbf ========================================

var TYLocatingBeaconPbf = exports.TYLocatingBeaconPbf = {};

TYLocatingBeaconPbf.read = function (pbf, end) {
    return pbf.readFields(TYLocatingBeaconPbf._readField, {major: 0, minor: 0, x: 0, y: 0, floor: 0}, end);
};
TYLocatingBeaconPbf._readField = function (tag, obj, pbf) {
    if (tag === 2) obj.major = pbf.readVarint();
    else if (tag === 3) obj.minor = pbf.readVarint();
    else if (tag === 4) obj.x = pbf.readDouble();
    else if (tag === 5) obj.y = pbf.readDouble();
    else if (tag === 6) obj.floor = pbf.readDouble();
};
TYLocatingBeaconPbf.write = function (obj, pbf) {
    if (obj.major) pbf.writeVarintField(2, obj.major);
    if (obj.minor) pbf.writeVarintField(3, obj.minor);
    if (obj.x) pbf.writeDoubleField(4, obj.x);
    if (obj.y) pbf.writeDoubleField(5, obj.y);
    if (obj.floor) pbf.writeDoubleField(6, obj.floor);
};

// TYLocatingBeaconListPbf ========================================

var TYLocatingBeaconListPbf = exports.TYLocatingBeaconListPbf = {};

TYLocatingBeaconListPbf.read = function (pbf, end) {
    return pbf.readFields(TYLocatingBeaconListPbf._readField, {uuid: "", beacons: []}, end);
};
TYLocatingBeaconListPbf._readField = function (tag, obj, pbf) {
    if (tag === 1) obj.uuid = pbf.readString();
    else if (tag === 2) obj.beacons.push(TYLocatingBeaconPbf.read(pbf, pbf.readVarint() + pbf.pos));
};
TYLocatingBeaconListPbf.write = function (obj, pbf) {
    if (obj.uuid) pbf.writeStringField(1, obj.uuid);
    if (obj.beacons) for (var i = 0; i < obj.beacons.length; i++) pbf.writeMessage(2, TYLocatingBeaconPbf.write, obj.beacons[i]);
};
